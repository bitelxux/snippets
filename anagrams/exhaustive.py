def test_exhaustive(self):
    """
    Exhaustive test which tests the anagrams for
    all the words in the example dictionary
    """

    _, r = self.anagrams2.get_anagrams("aarhus")
    self.assertEqual(r, ['aarhus'])

    _, r = self.anagrams2.get_anagrams("aaron")
    self.assertEqual(r, ['aaron'])

    _, r = self.anagrams2.get_anagrams("ababa")
    self.assertEqual(r, ['ababa'])

    _, r = self.anagrams2.get_anagrams("aback")
    self.assertEqual(r, ['aback'])

    _, r = self.anagrams2.get_anagrams("abaft")
    self.assertEqual(r, ['abaft'])

    _, r = self.anagrams2.get_anagrams("abandon")
    self.assertEqual(r, ['abandon'])

    _, r = self.anagrams2.get_anagrams("abandoned")
    self.assertEqual(r, ['abandoned'])

    _, r = self.anagrams2.get_anagrams("abandoning")
    self.assertEqual(r, ['abandoning'])

    _, r = self.anagrams2.get_anagrams("abandonment")
    self.assertEqual(r, ['abandonment'])

    _, r = self.anagrams2.get_anagrams("abandons")
    self.assertEqual(r, ['abandons'])

    _, r = self.anagrams2.get_anagrams("abase")
    self.assertEqual(r, ['abase'])

    _, r = self.anagrams2.get_anagrams("abased")
    self.assertEqual(r, ['abased'])

    _, r = self.anagrams2.get_anagrams("abasement")
    self.assertEqual(r, ['abasement'])

    _, r = self.anagrams2.get_anagrams("abasements")
    self.assertEqual(r, ['abasements'])

    _, r = self.anagrams2.get_anagrams("abases")
    self.assertEqual(r, ['abases'])

    _, r = self.anagrams2.get_anagrams("abash")
    self.assertEqual(r, ['abash'])

    _, r = self.anagrams2.get_anagrams("abashed")
    self.assertEqual(r, ['abashed'])

    _, r = self.anagrams2.get_anagrams("abashes")
    self.assertEqual(r, ['abashes'])

    _, r = self.anagrams2.get_anagrams("abashing")
    self.assertEqual(r, ['abashing'])

    _, r = self.anagrams2.get_anagrams("abasing")
    self.assertEqual(r, ['abasing'])

    _, r = self.anagrams2.get_anagrams("abate")
    self.assertEqual(r, ['abate'])

    _, r = self.anagrams2.get_anagrams("abated")
    self.assertEqual(r, ['abated'])

    _, r = self.anagrams2.get_anagrams("abatement")
    self.assertEqual(r, ['abatement'])

    _, r = self.anagrams2.get_anagrams("abatements")
    self.assertEqual(r, ['abatements'])

    _, r = self.anagrams2.get_anagrams("abater")
    self.assertEqual(r, ['abater'])

    _, r = self.anagrams2.get_anagrams("abates")
    self.assertEqual(r, ['abates'])

    _, r = self.anagrams2.get_anagrams("abating")
    self.assertEqual(r, ['abating'])

    _, r = self.anagrams2.get_anagrams("abba")
    self.assertEqual(r, ['abba'])

    _, r = self.anagrams2.get_anagrams("abbe")
    self.assertEqual(r, ['abbe', 'babe'])

    _, r = self.anagrams2.get_anagrams("abbey")
    self.assertEqual(r, ['abbey'])

    _, r = self.anagrams2.get_anagrams("abbeys")
    self.assertEqual(r, ['abbeys'])

    _, r = self.anagrams2.get_anagrams("abbot")
    self.assertEqual(r, ['abbot'])

    _, r = self.anagrams2.get_anagrams("abbots")
    self.assertEqual(r, ['abbots'])

    _, r = self.anagrams2.get_anagrams("abbott")
    self.assertEqual(r, ['abbott'])

    _, r = self.anagrams2.get_anagrams("abbreviate")
    self.assertEqual(r, ['abbreviate'])

    _, r = self.anagrams2.get_anagrams("abbreviated")
    self.assertEqual(r, ['abbreviated'])

    _, r = self.anagrams2.get_anagrams("abbreviates")
    self.assertEqual(r, ['abbreviates'])

    _, r = self.anagrams2.get_anagrams("abbreviating")
    self.assertEqual(r, ['abbreviating'])

    _, r = self.anagrams2.get_anagrams("abbreviation")
    self.assertEqual(r, ['abbreviation'])

    _, r = self.anagrams2.get_anagrams("abbreviations")
    self.assertEqual(r, ['abbreviations'])

    _, r = self.anagrams2.get_anagrams("abby")
    self.assertEqual(r, ['abby', 'baby'])

    _, r = self.anagrams2.get_anagrams("abdomen")
    self.assertEqual(r, ['abdomen'])

    _, r = self.anagrams2.get_anagrams("abdomens")
    self.assertEqual(r, ['abdomens'])

    _, r = self.anagrams2.get_anagrams("abdominal")
    self.assertEqual(r, ['abdominal'])

    _, r = self.anagrams2.get_anagrams("abduct")
    self.assertEqual(r, ['abduct'])

    _, r = self.anagrams2.get_anagrams("abducted")
    self.assertEqual(r, ['abducted'])

    _, r = self.anagrams2.get_anagrams("abduction")
    self.assertEqual(r, ['abduction'])

    _, r = self.anagrams2.get_anagrams("abductions")
    self.assertEqual(r, ['abductions'])

    _, r = self.anagrams2.get_anagrams("abductor")
    self.assertEqual(r, ['abductor'])

    _, r = self.anagrams2.get_anagrams("abductors")
    self.assertEqual(r, ['abductors'])

    _, r = self.anagrams2.get_anagrams("abducts")
    self.assertEqual(r, ['abducts'])

    _, r = self.anagrams2.get_anagrams("abe")
    self.assertEqual(r, ['abe'])

    _, r = self.anagrams2.get_anagrams("abed")
    self.assertEqual(r, ['abed', 'bade', 'bead'])

    _, r = self.anagrams2.get_anagrams("abel")
    self.assertEqual(r, ['abel', 'able', 'bale', 'bela', 'elba'])

    _, r = self.anagrams2.get_anagrams("abelian")
    self.assertEqual(r, ['abelian'])

    _, r = self.anagrams2.get_anagrams("abelson")
    self.assertEqual(r, ['abelson'])

    _, r = self.anagrams2.get_anagrams("aberdeen")
    self.assertEqual(r, ['aberdeen'])

    _, r = self.anagrams2.get_anagrams("abernathy")
    self.assertEqual(r, ['abernathy'])

    _, r = self.anagrams2.get_anagrams("aberrant")
    self.assertEqual(r, ['aberrant'])

    _, r = self.anagrams2.get_anagrams("aberration")
    self.assertEqual(r, ['aberration'])

    _, r = self.anagrams2.get_anagrams("aberrations")
    self.assertEqual(r, ['aberrations'])

    _, r = self.anagrams2.get_anagrams("abet")
    self.assertEqual(r, ['abet', 'beat', 'beta'])

    _, r = self.anagrams2.get_anagrams("abets")
    self.assertEqual(r, ['abets', 'baste', 'bates', 'beast', 'beats'])

    _, r = self.anagrams2.get_anagrams("abetted")
    self.assertEqual(r, ['abetted'])

    _, r = self.anagrams2.get_anagrams("abetter")
    self.assertEqual(r, ['abetter'])

    _, r = self.anagrams2.get_anagrams("abetting")
    self.assertEqual(r, ['abetting'])

    _, r = self.anagrams2.get_anagrams("abeyance")
    self.assertEqual(r, ['abeyance'])

    _, r = self.anagrams2.get_anagrams("abhor")
    self.assertEqual(r, ['abhor'])

    _, r = self.anagrams2.get_anagrams("abhorred")
    self.assertEqual(r, ['abhorred', 'harbored'])

    _, r = self.anagrams2.get_anagrams("abhorrent")
    self.assertEqual(r, ['abhorrent'])

    _, r = self.anagrams2.get_anagrams("abhorrer")
    self.assertEqual(r, ['abhorrer'])

    _, r = self.anagrams2.get_anagrams("abhorring")
    self.assertEqual(r, ['abhorring', 'harboring'])

    _, r = self.anagrams2.get_anagrams("abhors")
    self.assertEqual(r, ['abhors', 'boarsh'])

    _, r = self.anagrams2.get_anagrams("abide")
    self.assertEqual(r, ['abide'])

    _, r = self.anagrams2.get_anagrams("abided")
    self.assertEqual(r, ['abided'])

    _, r = self.anagrams2.get_anagrams("abides")
    self.assertEqual(r, ['abides', 'biased'])

    _, r = self.anagrams2.get_anagrams("abiding")
    self.assertEqual(r, ['abiding'])

    _, r = self.anagrams2.get_anagrams("abidjan")
    self.assertEqual(r, ['abidjan'])

    _, r = self.anagrams2.get_anagrams("abigail")
    self.assertEqual(r, ['abigail'])

    _, r = self.anagrams2.get_anagrams("abilene")
    self.assertEqual(r, ['abilene'])

    _, r = self.anagrams2.get_anagrams("abilities")
    self.assertEqual(r, ['abilities'])

    _, r = self.anagrams2.get_anagrams("ability")
    self.assertEqual(r, ['ability'])

    _, r = self.anagrams2.get_anagrams("abject")
    self.assertEqual(r, ['abject'])

    _, r = self.anagrams2.get_anagrams("abjection")
    self.assertEqual(r, ['abjection'])

    _, r = self.anagrams2.get_anagrams("abjections")
    self.assertEqual(r, ['abjections'])

    _, r = self.anagrams2.get_anagrams("abjectly")
    self.assertEqual(r, ['abjectly'])

    _, r = self.anagrams2.get_anagrams("abjectness")
    self.assertEqual(r, ['abjectness'])

    _, r = self.anagrams2.get_anagrams("abjure")
    self.assertEqual(r, ['abjure'])

    _, r = self.anagrams2.get_anagrams("abjured")
    self.assertEqual(r, ['abjured'])

    _, r = self.anagrams2.get_anagrams("abjures")
    self.assertEqual(r, ['abjures'])

    _, r = self.anagrams2.get_anagrams("abjuring")
    self.assertEqual(r, ['abjuring'])

    _, r = self.anagrams2.get_anagrams("ablate")
    self.assertEqual(r, ['ablate'])

    _, r = self.anagrams2.get_anagrams("ablated")
    self.assertEqual(r, ['ablated'])

    _, r = self.anagrams2.get_anagrams("ablates")
    self.assertEqual(r, ['ablates'])

    _, r = self.anagrams2.get_anagrams("ablating")
    self.assertEqual(r, ['ablating'])

    _, r = self.anagrams2.get_anagrams("ablation")
    self.assertEqual(r, ['ablation'])

    _, r = self.anagrams2.get_anagrams("ablative")
    self.assertEqual(r, ['ablative'])

    _, r = self.anagrams2.get_anagrams("ablaze")
    self.assertEqual(r, ['ablaze'])

    _, r = self.anagrams2.get_anagrams("able")
    self.assertEqual(r, ['abel', 'able', 'bale', 'bela', 'elba'])

    _, r = self.anagrams2.get_anagrams("abler")
    self.assertEqual(r, ['abler', 'baler', 'blare', 'blear'])

    _, r = self.anagrams2.get_anagrams("ablest")
    self.assertEqual(r, ['ablest', 'bleats', 'stable', 'tables'])

    _, r = self.anagrams2.get_anagrams("ably")
    self.assertEqual(r, ['ably'])

    _, r = self.anagrams2.get_anagrams("abner")
    self.assertEqual(r, ['abner'])

    _, r = self.anagrams2.get_anagrams("abnormal")
    self.assertEqual(r, ['abnormal'])

    _, r = self.anagrams2.get_anagrams("abnormalities")
    self.assertEqual(r, ['abnormalities'])

    _, r = self.anagrams2.get_anagrams("abnormality")
    self.assertEqual(r, ['abnormality'])

    _, r = self.anagrams2.get_anagrams("abnormally")
    self.assertEqual(r, ['abnormally'])

    _, r = self.anagrams2.get_anagrams("abo")
    self.assertEqual(r, ['abo', 'boa'])

    _, r = self.anagrams2.get_anagrams("aboard")
    self.assertEqual(r, ['aboard', 'abroad'])

    _, r = self.anagrams2.get_anagrams("abode")
    self.assertEqual(r, ['abode', 'adobe'])

    _, r = self.anagrams2.get_anagrams("abodes")
    self.assertEqual(r, ['abodes'])

    _, r = self.anagrams2.get_anagrams("abolish")
    self.assertEqual(r, ['abolish'])

    _, r = self.anagrams2.get_anagrams("abolished")
    self.assertEqual(r, ['abolished'])

    _, r = self.anagrams2.get_anagrams("abolisher")
    self.assertEqual(r, ['abolisher'])

    _, r = self.anagrams2.get_anagrams("abolishers")
    self.assertEqual(r, ['abolishers'])

    _, r = self.anagrams2.get_anagrams("abolishes")
    self.assertEqual(r, ['abolishes'])

    _, r = self.anagrams2.get_anagrams("abolishing")
    self.assertEqual(r, ['abolishing'])

    _, r = self.anagrams2.get_anagrams("abolishment")
    self.assertEqual(r, ['abolishment'])

    _, r = self.anagrams2.get_anagrams("abolishments")
    self.assertEqual(r, ['abolishments'])

    _, r = self.anagrams2.get_anagrams("abolition")
    self.assertEqual(r, ['abolition'])

    _, r = self.anagrams2.get_anagrams("abolitionist")
    self.assertEqual(r, ['abolitionist'])

    _, r = self.anagrams2.get_anagrams("abolitionists")
    self.assertEqual(r, ['abolitionists'])

    _, r = self.anagrams2.get_anagrams("abominable")
    self.assertEqual(r, ['abominable'])

    _, r = self.anagrams2.get_anagrams("abominate")
    self.assertEqual(r, ['abominate'])

    _, r = self.anagrams2.get_anagrams("aboriginal")
    self.assertEqual(r, ['aboriginal'])

    _, r = self.anagrams2.get_anagrams("aborigine")
    self.assertEqual(r, ['aborigine'])

    _, r = self.anagrams2.get_anagrams("aborigines")
    self.assertEqual(r, ['aborigines'])

    _, r = self.anagrams2.get_anagrams("abort")
    self.assertEqual(r, ['abort', 'bator'])

    _, r = self.anagrams2.get_anagrams("aborted")
    self.assertEqual(r, ['aborted'])

    _, r = self.anagrams2.get_anagrams("aborting")
    self.assertEqual(r, ['aborting'])

    _, r = self.anagrams2.get_anagrams("abortion")
    self.assertEqual(r, ['abortion'])

    _, r = self.anagrams2.get_anagrams("abortions")
    self.assertEqual(r, ['abortions'])

    _, r = self.anagrams2.get_anagrams("abortive")
    self.assertEqual(r, ['abortive'])

    _, r = self.anagrams2.get_anagrams("abortively")
    self.assertEqual(r, ['abortively'])

    _, r = self.anagrams2.get_anagrams("aborts")
    self.assertEqual(r, ['aborts'])

    _, r = self.anagrams2.get_anagrams("abos")
    self.assertEqual(r, ['abos'])

    _, r = self.anagrams2.get_anagrams("abound")
    self.assertEqual(r, ['abound'])

    _, r = self.anagrams2.get_anagrams("abounded")
    self.assertEqual(r, ['abounded'])

    _, r = self.anagrams2.get_anagrams("abounding")
    self.assertEqual(r, ['abounding'])

    _, r = self.anagrams2.get_anagrams("abounds")
    self.assertEqual(r, ['abounds'])

    _, r = self.anagrams2.get_anagrams("about")
    self.assertEqual(r, ['about'])

    _, r = self.anagrams2.get_anagrams("above")
    self.assertEqual(r, ['above'])

    _, r = self.anagrams2.get_anagrams("aboveboard")
    self.assertEqual(r, ['aboveboard'])

    _, r = self.anagrams2.get_anagrams("aboveground")
    self.assertEqual(r, ['aboveground'])

    _, r = self.anagrams2.get_anagrams("abovementioned")
    self.assertEqual(r, ['abovementioned'])

    _, r = self.anagrams2.get_anagrams("abrade")
    self.assertEqual(r, ['abrade'])

    _, r = self.anagrams2.get_anagrams("abraded")
    self.assertEqual(r, ['abraded'])

    _, r = self.anagrams2.get_anagrams("abrades")
    self.assertEqual(r, ['abrades'])

    _, r = self.anagrams2.get_anagrams("abrading")
    self.assertEqual(r, ['abrading'])

    _, r = self.anagrams2.get_anagrams("abraham")
    self.assertEqual(r, ['abraham'])

    _, r = self.anagrams2.get_anagrams("abram")
    self.assertEqual(r, ['abram'])

    _, r = self.anagrams2.get_anagrams("abrams")
    self.assertEqual(r, ['abrams'])

    _, r = self.anagrams2.get_anagrams("abramson")
    self.assertEqual(r, ['abramson'])

    _, r = self.anagrams2.get_anagrams("abrasion")
    self.assertEqual(r, ['abrasion'])

    _, r = self.anagrams2.get_anagrams("abrasions")
    self.assertEqual(r, ['abrasions'])

    _, r = self.anagrams2.get_anagrams("abrasive")
    self.assertEqual(r, ['abrasive'])

    _, r = self.anagrams2.get_anagrams("abreaction")
    self.assertEqual(r, ['abreaction'])

    _, r = self.anagrams2.get_anagrams("abreactions")
    self.assertEqual(r, ['abreactions'])

    _, r = self.anagrams2.get_anagrams("abreast")
    self.assertEqual(r, ['abreast'])

    _, r = self.anagrams2.get_anagrams("abridge")
    self.assertEqual(r, ['abridge', 'brigade'])

    _, r = self.anagrams2.get_anagrams("abridged")
    self.assertEqual(r, ['abridged'])

    _, r = self.anagrams2.get_anagrams("abridges")
    self.assertEqual(r, ['abridges', 'brigades'])

    _, r = self.anagrams2.get_anagrams("abridging")
    self.assertEqual(r, ['abridging'])

    _, r = self.anagrams2.get_anagrams("abridgment")
    self.assertEqual(r, ['abridgment'])

    _, r = self.anagrams2.get_anagrams("abroad")
    self.assertEqual(r, ['aboard', 'abroad'])

    _, r = self.anagrams2.get_anagrams("abrogate")
    self.assertEqual(r, ['abrogate'])

    _, r = self.anagrams2.get_anagrams("abrogated")
    self.assertEqual(r, ['abrogated'])

    _, r = self.anagrams2.get_anagrams("abrogates")
    self.assertEqual(r, ['abrogates'])

    _, r = self.anagrams2.get_anagrams("abrogating")
    self.assertEqual(r, ['abrogating'])

    _, r = self.anagrams2.get_anagrams("abrupt")
    self.assertEqual(r, ['abrupt'])

    _, r = self.anagrams2.get_anagrams("abruptly")
    self.assertEqual(r, ['abruptly'])

    _, r = self.anagrams2.get_anagrams("abruptness")
    self.assertEqual(r, ['abruptness'])

    _, r = self.anagrams2.get_anagrams("abscess")
    self.assertEqual(r, ['abscess'])

    _, r = self.anagrams2.get_anagrams("abscessed")
    self.assertEqual(r, ['abscessed'])

    _, r = self.anagrams2.get_anagrams("abscesses")
    self.assertEqual(r, ['abscesses'])

    _, r = self.anagrams2.get_anagrams("abscissa")
    self.assertEqual(r, ['abscissa'])

    _, r = self.anagrams2.get_anagrams("abscissas")
    self.assertEqual(r, ['abscissas'])

    _, r = self.anagrams2.get_anagrams("abscond")
    self.assertEqual(r, ['abscond'])

    _, r = self.anagrams2.get_anagrams("absconded")
    self.assertEqual(r, ['absconded'])

    _, r = self.anagrams2.get_anagrams("absconding")
    self.assertEqual(r, ['absconding'])

    _, r = self.anagrams2.get_anagrams("absconds")
    self.assertEqual(r, ['absconds'])

    _, r = self.anagrams2.get_anagrams("absence")
    self.assertEqual(r, ['absence'])

    _, r = self.anagrams2.get_anagrams("absences")
    self.assertEqual(r, ['absences'])

    _, r = self.anagrams2.get_anagrams("absent")
    self.assertEqual(r, ['absent'])

    _, r = self.anagrams2.get_anagrams("absented")
    self.assertEqual(r, ['absented'])

    _, r = self.anagrams2.get_anagrams("absentee")
    self.assertEqual(r, ['absentee'])

    _, r = self.anagrams2.get_anagrams("absenteeism")
    self.assertEqual(r, ['absenteeism'])

    _, r = self.anagrams2.get_anagrams("absentees")
    self.assertEqual(r, ['absentees'])

    _, r = self.anagrams2.get_anagrams("absentia")
    self.assertEqual(r, ['absentia'])

    _, r = self.anagrams2.get_anagrams("absenting")
    self.assertEqual(r, ['absenting'])

    _, r = self.anagrams2.get_anagrams("absently")
    self.assertEqual(r, ['absently'])

    _, r = self.anagrams2.get_anagrams("absentminded")
    self.assertEqual(r, ['absentminded'])

    _, r = self.anagrams2.get_anagrams("absents")
    self.assertEqual(r, ['absents'])

    _, r = self.anagrams2.get_anagrams("absinthe")
    self.assertEqual(r, ['absinthe'])

    _, r = self.anagrams2.get_anagrams("absolute")
    self.assertEqual(r, ['absolute'])

    _, r = self.anagrams2.get_anagrams("absolutely")
    self.assertEqual(r, ['absolutely'])

    _, r = self.anagrams2.get_anagrams("absoluteness")
    self.assertEqual(r, ['absoluteness'])

    _, r = self.anagrams2.get_anagrams("absolutes")
    self.assertEqual(r, ['absolutes'])

    _, r = self.anagrams2.get_anagrams("absolution")
    self.assertEqual(r, ['absolution'])

    _, r = self.anagrams2.get_anagrams("absolve")
    self.assertEqual(r, ['absolve'])

    _, r = self.anagrams2.get_anagrams("absolved")
    self.assertEqual(r, ['absolved'])

    _, r = self.anagrams2.get_anagrams("absolves")
    self.assertEqual(r, ['absolves'])

    _, r = self.anagrams2.get_anagrams("absolving")
    self.assertEqual(r, ['absolving'])

    _, r = self.anagrams2.get_anagrams("absorb")
    self.assertEqual(r, ['absorb'])

    _, r = self.anagrams2.get_anagrams("absorbed")
    self.assertEqual(r, ['absorbed'])

    _, r = self.anagrams2.get_anagrams("absorbency")
    self.assertEqual(r, ['absorbency'])

    _, r = self.anagrams2.get_anagrams("absorbent")
    self.assertEqual(r, ['absorbent'])

    _, r = self.anagrams2.get_anagrams("absorber")
    self.assertEqual(r, ['absorber'])

    _, r = self.anagrams2.get_anagrams("absorbing")
    self.assertEqual(r, ['absorbing'])

    _, r = self.anagrams2.get_anagrams("absorbs")
    self.assertEqual(r, ['absorbs'])

    _, r = self.anagrams2.get_anagrams("absorption")
    self.assertEqual(r, ['absorption'])

    _, r = self.anagrams2.get_anagrams("absorptions")
    self.assertEqual(r, ['absorptions'])

    _, r = self.anagrams2.get_anagrams("absorptive")
    self.assertEqual(r, ['absorptive'])

    _, r = self.anagrams2.get_anagrams("abstain")
    self.assertEqual(r, ['abstain'])

    _, r = self.anagrams2.get_anagrams("abstained")
    self.assertEqual(r, ['abstained'])

    _, r = self.anagrams2.get_anagrams("abstainer")
    self.assertEqual(r, ['abstainer'])

    _, r = self.anagrams2.get_anagrams("abstaining")
    self.assertEqual(r, ['abstaining'])

    _, r = self.anagrams2.get_anagrams("abstains")
    self.assertEqual(r, ['abstains'])

    _, r = self.anagrams2.get_anagrams("abstention")
    self.assertEqual(r, ['abstention'])

    _, r = self.anagrams2.get_anagrams("abstentions")
    self.assertEqual(r, ['abstentions'])

    _, r = self.anagrams2.get_anagrams("abstinence")
    self.assertEqual(r, ['abstinence'])

    _, r = self.anagrams2.get_anagrams("abstract")
    self.assertEqual(r, ['abstract'])

    _, r = self.anagrams2.get_anagrams("abstracted")
    self.assertEqual(r, ['abstracted'])

    _, r = self.anagrams2.get_anagrams("abstracting")
    self.assertEqual(r, ['abstracting'])

    _, r = self.anagrams2.get_anagrams("abstraction")
    self.assertEqual(r, ['abstraction'])

    _, r = self.anagrams2.get_anagrams("abstractionism")
    self.assertEqual(r, ['abstractionism'])

    _, r = self.anagrams2.get_anagrams("abstractionist")
    self.assertEqual(r, ['abstractionist'])

    _, r = self.anagrams2.get_anagrams("abstractions")
    self.assertEqual(r, ['abstractions'])

    _, r = self.anagrams2.get_anagrams("abstractly")
    self.assertEqual(r, ['abstractly'])

    _, r = self.anagrams2.get_anagrams("abstractness")
    self.assertEqual(r, ['abstractness'])

    _, r = self.anagrams2.get_anagrams("abstractor")
    self.assertEqual(r, ['abstractor'])

    _, r = self.anagrams2.get_anagrams("abstractors")
    self.assertEqual(r, ['abstractors'])

    _, r = self.anagrams2.get_anagrams("abstracts")
    self.assertEqual(r, ['abstracts'])

    _, r = self.anagrams2.get_anagrams("abstruse")
    self.assertEqual(r, ['abstruse'])

    _, r = self.anagrams2.get_anagrams("abstruseness")
    self.assertEqual(r, ['abstruseness'])

    _, r = self.anagrams2.get_anagrams("absurd")
    self.assertEqual(r, ['absurd'])

    _, r = self.anagrams2.get_anagrams("absurdities")
    self.assertEqual(r, ['absurdities'])

    _, r = self.anagrams2.get_anagrams("absurdity")
    self.assertEqual(r, ['absurdity'])

    _, r = self.anagrams2.get_anagrams("absurdly")
    self.assertEqual(r, ['absurdly'])

    _, r = self.anagrams2.get_anagrams("abu")
    self.assertEqual(r, ['abu'])

    _, r = self.anagrams2.get_anagrams("abundance")
    self.assertEqual(r, ['abundance'])

    _, r = self.anagrams2.get_anagrams("abundant")
    self.assertEqual(r, ['abundant'])

    _, r = self.anagrams2.get_anagrams("abundantly")
    self.assertEqual(r, ['abundantly'])

    _, r = self.anagrams2.get_anagrams("abuse")
    self.assertEqual(r, ['abuse', 'beaus'])

    _, r = self.anagrams2.get_anagrams("abused")
    self.assertEqual(r, ['abused'])

    _, r = self.anagrams2.get_anagrams("abuses")
    self.assertEqual(r, ['abuses'])

    _, r = self.anagrams2.get_anagrams("abusing")
    self.assertEqual(r, ['abusing'])

    _, r = self.anagrams2.get_anagrams("abusive")
    self.assertEqual(r, ['abusive'])

    _, r = self.anagrams2.get_anagrams("abut")
    self.assertEqual(r, ['abut'])

    _, r = self.anagrams2.get_anagrams("abutment")
    self.assertEqual(r, ['abutment'])

    _, r = self.anagrams2.get_anagrams("abuts")
    self.assertEqual(r, ['abuts'])

    _, r = self.anagrams2.get_anagrams("abutted")
    self.assertEqual(r, ['abutted'])

    _, r = self.anagrams2.get_anagrams("abutter")
    self.assertEqual(r, ['abutter'])

    _, r = self.anagrams2.get_anagrams("abutters")
    self.assertEqual(r, ['abutters'])

    _, r = self.anagrams2.get_anagrams("abutting")
    self.assertEqual(r, ['abutting'])

    _, r = self.anagrams2.get_anagrams("abysmal")
    self.assertEqual(r, ['abysmal'])

    _, r = self.anagrams2.get_anagrams("abysmally")
    self.assertEqual(r, ['abysmally'])

    _, r = self.anagrams2.get_anagrams("abyss")
    self.assertEqual(r, ['abyss'])

    _, r = self.anagrams2.get_anagrams("abysses")
    self.assertEqual(r, ['abysses'])

    _, r = self.anagrams2.get_anagrams("abyssinia")
    self.assertEqual(r, ['abyssinia'])

    _, r = self.anagrams2.get_anagrams("abyssinian")
    self.assertEqual(r, ['abyssinian'])

    _, r = self.anagrams2.get_anagrams("abyssinians")
    self.assertEqual(r, ['abyssinians'])

    _, r = self.anagrams2.get_anagrams("acacia")
    self.assertEqual(r, ['acacia'])

    _, r = self.anagrams2.get_anagrams("academia")
    self.assertEqual(r, ['academia'])

    _, r = self.anagrams2.get_anagrams("academic")
    self.assertEqual(r, ['academic'])

    _, r = self.anagrams2.get_anagrams("academically")
    self.assertEqual(r, ['academically'])

    _, r = self.anagrams2.get_anagrams("academics")
    self.assertEqual(r, ['academics'])

    _, r = self.anagrams2.get_anagrams("academies")
    self.assertEqual(r, ['academies'])

    _, r = self.anagrams2.get_anagrams("academy")
    self.assertEqual(r, ['academy'])

    _, r = self.anagrams2.get_anagrams("acadia")
    self.assertEqual(r, ['acadia'])

    _, r = self.anagrams2.get_anagrams("acapulco")
    self.assertEqual(r, ['acapulco'])

    _, r = self.anagrams2.get_anagrams("accede")
    self.assertEqual(r, ['accede'])

    _, r = self.anagrams2.get_anagrams("acceded")
    self.assertEqual(r, ['acceded'])

    _, r = self.anagrams2.get_anagrams("accedes")
    self.assertEqual(r, ['accedes'])

    _, r = self.anagrams2.get_anagrams("accelerate")
    self.assertEqual(r, ['accelerate'])

    _, r = self.anagrams2.get_anagrams("accelerated")
    self.assertEqual(r, ['accelerated'])

    _, r = self.anagrams2.get_anagrams("accelerates")
    self.assertEqual(r, ['accelerates'])

    _, r = self.anagrams2.get_anagrams("accelerating")
    self.assertEqual(r, ['accelerating'])

    _, r = self.anagrams2.get_anagrams("acceleration")
    self.assertEqual(r, ['acceleration'])

    _, r = self.anagrams2.get_anagrams("accelerations")
    self.assertEqual(r, ['accelerations'])

    _, r = self.anagrams2.get_anagrams("accelerator")
    self.assertEqual(r, ['accelerator'])

    _, r = self.anagrams2.get_anagrams("accelerators")
    self.assertEqual(r, ['accelerators'])

    _, r = self.anagrams2.get_anagrams("accelerometer")
    self.assertEqual(r, ['accelerometer'])

    _, r = self.anagrams2.get_anagrams("accelerometers")
    self.assertEqual(r, ['accelerometers'])

    _, r = self.anagrams2.get_anagrams("accent")
    self.assertEqual(r, ['accent'])

    _, r = self.anagrams2.get_anagrams("accented")
    self.assertEqual(r, ['accented'])

    _, r = self.anagrams2.get_anagrams("accenting")
    self.assertEqual(r, ['accenting'])

    _, r = self.anagrams2.get_anagrams("accents")
    self.assertEqual(r, ['accents'])

    _, r = self.anagrams2.get_anagrams("accentual")
    self.assertEqual(r, ['accentual'])

    _, r = self.anagrams2.get_anagrams("accentuate")
    self.assertEqual(r, ['accentuate'])

    _, r = self.anagrams2.get_anagrams("accentuated")
    self.assertEqual(r, ['accentuated'])

    _, r = self.anagrams2.get_anagrams("accentuates")
    self.assertEqual(r, ['accentuates'])

    _, r = self.anagrams2.get_anagrams("accentuating")
    self.assertEqual(r, ['accentuating'])

    _, r = self.anagrams2.get_anagrams("accentuation")
    self.assertEqual(r, ['accentuation'])

    _, r = self.anagrams2.get_anagrams("accept")
    self.assertEqual(r, ['accept'])

    _, r = self.anagrams2.get_anagrams("acceptability")
    self.assertEqual(r, ['acceptability'])

    _, r = self.anagrams2.get_anagrams("acceptable")
    self.assertEqual(r, ['acceptable'])

    _, r = self.anagrams2.get_anagrams("acceptably")
    self.assertEqual(r, ['acceptably'])

    _, r = self.anagrams2.get_anagrams("acceptance")
    self.assertEqual(r, ['acceptance'])

    _, r = self.anagrams2.get_anagrams("acceptances")
    self.assertEqual(r, ['acceptances'])

    _, r = self.anagrams2.get_anagrams("accepted")
    self.assertEqual(r, ['accepted'])

    _, r = self.anagrams2.get_anagrams("accepter")
    self.assertEqual(r, ['accepter'])

    _, r = self.anagrams2.get_anagrams("accepters")
    self.assertEqual(r, ['accepters'])

    _, r = self.anagrams2.get_anagrams("accepting")
    self.assertEqual(r, ['accepting'])

    _, r = self.anagrams2.get_anagrams("acceptor")
    self.assertEqual(r, ['acceptor'])

    _, r = self.anagrams2.get_anagrams("acceptors")
    self.assertEqual(r, ['acceptors'])

    _, r = self.anagrams2.get_anagrams("accepts")
    self.assertEqual(r, ['accepts'])

    _, r = self.anagrams2.get_anagrams("access")
    self.assertEqual(r, ['access'])

    _, r = self.anagrams2.get_anagrams("accessed")
    self.assertEqual(r, ['accessed'])

    _, r = self.anagrams2.get_anagrams("accesses")
    self.assertEqual(r, ['accesses'])

    _, r = self.anagrams2.get_anagrams("accessibility")
    self.assertEqual(r, ['accessibility'])

    _, r = self.anagrams2.get_anagrams("accessible")
    self.assertEqual(r, ['accessible'])

    _, r = self.anagrams2.get_anagrams("accessibly")
    self.assertEqual(r, ['accessibly'])

    _, r = self.anagrams2.get_anagrams("accessing")
    self.assertEqual(r, ['accessing'])

    _, r = self.anagrams2.get_anagrams("accession")
    self.assertEqual(r, ['accession'])

    _, r = self.anagrams2.get_anagrams("accessions")
    self.assertEqual(r, ['accessions'])

    _, r = self.anagrams2.get_anagrams("accessories")
    self.assertEqual(r, ['accessories'])

    _, r = self.anagrams2.get_anagrams("accessors")
    self.assertEqual(r, ['accessors'])

    _, r = self.anagrams2.get_anagrams("accessory")
    self.assertEqual(r, ['accessory'])

    _, r = self.anagrams2.get_anagrams("accident")
    self.assertEqual(r, ['accident'])

    _, r = self.anagrams2.get_anagrams("accidental")
    self.assertEqual(r, ['accidental'])

    _, r = self.anagrams2.get_anagrams("accidentally")
    self.assertEqual(r, ['accidentally'])

    _, r = self.anagrams2.get_anagrams("accidently")
    self.assertEqual(r, ['accidently'])

    _, r = self.anagrams2.get_anagrams("accidents")
    self.assertEqual(r, ['accidents'])

    _, r = self.anagrams2.get_anagrams("acclaim")
    self.assertEqual(r, ['acclaim'])

    _, r = self.anagrams2.get_anagrams("acclaimed")
    self.assertEqual(r, ['acclaimed'])

    _, r = self.anagrams2.get_anagrams("acclaiming")
    self.assertEqual(r, ['acclaiming'])

    _, r = self.anagrams2.get_anagrams("acclaims")
    self.assertEqual(r, ['acclaims'])

    _, r = self.anagrams2.get_anagrams("acclamation")
    self.assertEqual(r, ['acclamation'])

    _, r = self.anagrams2.get_anagrams("acclimate")
    self.assertEqual(r, ['acclimate'])

    _, r = self.anagrams2.get_anagrams("acclimated")
    self.assertEqual(r, ['acclimated'])

    _, r = self.anagrams2.get_anagrams("acclimates")
    self.assertEqual(r, ['acclimates'])

    _, r = self.anagrams2.get_anagrams("acclimating")
    self.assertEqual(r, ['acclimating'])

    _, r = self.anagrams2.get_anagrams("acclimatization")
    self.assertEqual(r, ['acclimatization'])

    _, r = self.anagrams2.get_anagrams("acclimatized")
    self.assertEqual(r, ['acclimatized'])

    _, r = self.anagrams2.get_anagrams("accolade")
    self.assertEqual(r, ['accolade'])

    _, r = self.anagrams2.get_anagrams("accolades")
    self.assertEqual(r, ['accolades'])

    _, r = self.anagrams2.get_anagrams("accommodate")
    self.assertEqual(r, ['accommodate'])

    _, r = self.anagrams2.get_anagrams("accommodated")
    self.assertEqual(r, ['accommodated'])

    _, r = self.anagrams2.get_anagrams("accommodates")
    self.assertEqual(r, ['accommodates'])

    _, r = self.anagrams2.get_anagrams("accommodating")
    self.assertEqual(r, ['accommodating'])

    _, r = self.anagrams2.get_anagrams("accommodation")
    self.assertEqual(r, ['accommodation'])

    _, r = self.anagrams2.get_anagrams("accommodations")
    self.assertEqual(r, ['accommodations'])

    _, r = self.anagrams2.get_anagrams("accompanied")
    self.assertEqual(r, ['accompanied'])

    _, r = self.anagrams2.get_anagrams("accompanies")
    self.assertEqual(r, ['accompanies'])

    _, r = self.anagrams2.get_anagrams("accompaniment")
    self.assertEqual(r, ['accompaniment'])

    _, r = self.anagrams2.get_anagrams("accompaniments")
    self.assertEqual(r, ['accompaniments'])

    _, r = self.anagrams2.get_anagrams("accompanist")
    self.assertEqual(r, ['accompanist'])

    _, r = self.anagrams2.get_anagrams("accompanists")
    self.assertEqual(r, ['accompanists'])

    _, r = self.anagrams2.get_anagrams("accompany")
    self.assertEqual(r, ['accompany'])

    _, r = self.anagrams2.get_anagrams("accompanying")
    self.assertEqual(r, ['accompanying'])

    _, r = self.anagrams2.get_anagrams("accomplice")
    self.assertEqual(r, ['accomplice'])

    _, r = self.anagrams2.get_anagrams("accomplices")
    self.assertEqual(r, ['accomplices'])

    _, r = self.anagrams2.get_anagrams("accomplish")
    self.assertEqual(r, ['accomplish'])

    _, r = self.anagrams2.get_anagrams("accomplished")
    self.assertEqual(r, ['accomplished'])

    _, r = self.anagrams2.get_anagrams("accomplisher")
    self.assertEqual(r, ['accomplisher'])

    _, r = self.anagrams2.get_anagrams("accomplishers")
    self.assertEqual(r, ['accomplishers'])

    _, r = self.anagrams2.get_anagrams("accomplishes")
    self.assertEqual(r, ['accomplishes'])

    _, r = self.anagrams2.get_anagrams("accomplishing")
    self.assertEqual(r, ['accomplishing'])

    _, r = self.anagrams2.get_anagrams("accomplishment")
    self.assertEqual(r, ['accomplishment'])

    _, r = self.anagrams2.get_anagrams("accomplishments")
    self.assertEqual(r, ['accomplishments'])

    _, r = self.anagrams2.get_anagrams("accord")
    self.assertEqual(r, ['accord'])

    _, r = self.anagrams2.get_anagrams("accordance")
    self.assertEqual(r, ['accordance'])

    _, r = self.anagrams2.get_anagrams("accorded")
    self.assertEqual(r, ['accorded'])

    _, r = self.anagrams2.get_anagrams("accorder")
    self.assertEqual(r, ['accorder'])

    _, r = self.anagrams2.get_anagrams("accorders")
    self.assertEqual(r, ['accorders', 'scorecard'])

    _, r = self.anagrams2.get_anagrams("according")
    self.assertEqual(r, ['according'])

    _, r = self.anagrams2.get_anagrams("accordingly")
    self.assertEqual(r, ['accordingly'])

    _, r = self.anagrams2.get_anagrams("accordion")
    self.assertEqual(r, ['accordion', 'concordia'])

    _, r = self.anagrams2.get_anagrams("accordions")
    self.assertEqual(r, ['accordions'])

    _, r = self.anagrams2.get_anagrams("accords")
    self.assertEqual(r, ['accords'])

    _, r = self.anagrams2.get_anagrams("accost")
    self.assertEqual(r, ['accost'])

    _, r = self.anagrams2.get_anagrams("accosted")
    self.assertEqual(r, ['accosted'])

    _, r = self.anagrams2.get_anagrams("accosting")
    self.assertEqual(r, ['accosting'])

    _, r = self.anagrams2.get_anagrams("accosts")
    self.assertEqual(r, ['accosts'])

    _, r = self.anagrams2.get_anagrams("account")
    self.assertEqual(r, ['account'])

    _, r = self.anagrams2.get_anagrams("accountability")
    self.assertEqual(r, ['accountability'])

    _, r = self.anagrams2.get_anagrams("accountable")
    self.assertEqual(r, ['accountable'])

    _, r = self.anagrams2.get_anagrams("accountably")
    self.assertEqual(r, ['accountably'])

    _, r = self.anagrams2.get_anagrams("accountancy")
    self.assertEqual(r, ['accountancy'])

    _, r = self.anagrams2.get_anagrams("accountant")
    self.assertEqual(r, ['accountant'])

    _, r = self.anagrams2.get_anagrams("accountants")
    self.assertEqual(r, ['accountants'])

    _, r = self.anagrams2.get_anagrams("accounted")
    self.assertEqual(r, ['accounted'])

    _, r = self.anagrams2.get_anagrams("accounting")
    self.assertEqual(r, ['accounting'])

    _, r = self.anagrams2.get_anagrams("accounts")
    self.assertEqual(r, ['accounts'])

    _, r = self.anagrams2.get_anagrams("accra")
    self.assertEqual(r, ['accra'])

    _, r = self.anagrams2.get_anagrams("accredit")
    self.assertEqual(r, ['accredit'])

    _, r = self.anagrams2.get_anagrams("accreditation")
    self.assertEqual(r, ['accreditation'])

    _, r = self.anagrams2.get_anagrams("accreditations")
    self.assertEqual(r, ['accreditations'])

    _, r = self.anagrams2.get_anagrams("accredited")
    self.assertEqual(r, ['accredited'])

    _, r = self.anagrams2.get_anagrams("accretion")
    self.assertEqual(r, ['accretion'])

    _, r = self.anagrams2.get_anagrams("accretions")
    self.assertEqual(r, ['accretions'])

    _, r = self.anagrams2.get_anagrams("accrue")
    self.assertEqual(r, ['accrue'])

    _, r = self.anagrams2.get_anagrams("accrued")
    self.assertEqual(r, ['accrued'])

    _, r = self.anagrams2.get_anagrams("accrues")
    self.assertEqual(r, ['accrues', 'accuser'])

    _, r = self.anagrams2.get_anagrams("accruing")
    self.assertEqual(r, ['accruing'])

    _, r = self.anagrams2.get_anagrams("acculturate")
    self.assertEqual(r, ['acculturate'])

    _, r = self.anagrams2.get_anagrams("acculturated")
    self.assertEqual(r, ['acculturated'])

    _, r = self.anagrams2.get_anagrams("acculturates")
    self.assertEqual(r, ['acculturates'])

    _, r = self.anagrams2.get_anagrams("acculturating")
    self.assertEqual(r, ['acculturating'])

    _, r = self.anagrams2.get_anagrams("acculturation")
    self.assertEqual(r, ['acculturation'])

    _, r = self.anagrams2.get_anagrams("accumulate")
    self.assertEqual(r, ['accumulate'])

    _, r = self.anagrams2.get_anagrams("accumulated")
    self.assertEqual(r, ['accumulated'])

    _, r = self.anagrams2.get_anagrams("accumulates")
    self.assertEqual(r, ['accumulates'])

    _, r = self.anagrams2.get_anagrams("accumulating")
    self.assertEqual(r, ['accumulating'])

    _, r = self.anagrams2.get_anagrams("accumulation")
    self.assertEqual(r, ['accumulation'])

    _, r = self.anagrams2.get_anagrams("accumulations")
    self.assertEqual(r, ['accumulations'])

    _, r = self.anagrams2.get_anagrams("accumulator")
    self.assertEqual(r, ['accumulator'])

    _, r = self.anagrams2.get_anagrams("accumulators")
    self.assertEqual(r, ['accumulators'])

    _, r = self.anagrams2.get_anagrams("accuracies")
    self.assertEqual(r, ['accuracies'])

    _, r = self.anagrams2.get_anagrams("accuracy")
    self.assertEqual(r, ['accuracy'])

    _, r = self.anagrams2.get_anagrams("accurate")
    self.assertEqual(r, ['accurate'])

    _, r = self.anagrams2.get_anagrams("accurately")
    self.assertEqual(r, ['accurately'])

    _, r = self.anagrams2.get_anagrams("accurateness")
    self.assertEqual(r, ['accurateness'])

    _, r = self.anagrams2.get_anagrams("accursed")
    self.assertEqual(r, ['accursed'])

    _, r = self.anagrams2.get_anagrams("accusal")
    self.assertEqual(r, ['accusal'])

    _, r = self.anagrams2.get_anagrams("accusation")
    self.assertEqual(r, ['accusation'])

    _, r = self.anagrams2.get_anagrams("accusations")
    self.assertEqual(r, ['accusations'])

    _, r = self.anagrams2.get_anagrams("accusative")
    self.assertEqual(r, ['accusative'])

    _, r = self.anagrams2.get_anagrams("accuse")
    self.assertEqual(r, ['accuse'])

    _, r = self.anagrams2.get_anagrams("accused")
    self.assertEqual(r, ['accused'])

    _, r = self.anagrams2.get_anagrams("accuser")
    self.assertEqual(r, ['accrues', 'accuser'])

    _, r = self.anagrams2.get_anagrams("accuses")
    self.assertEqual(r, ['accuses'])

    _, r = self.anagrams2.get_anagrams("accusing")
    self.assertEqual(r, ['accusing'])

    _, r = self.anagrams2.get_anagrams("accusingly")
    self.assertEqual(r, ['accusingly'])

    _, r = self.anagrams2.get_anagrams("accustom")
    self.assertEqual(r, ['accustom'])

    _, r = self.anagrams2.get_anagrams("accustomed")
    self.assertEqual(r, ['accustomed'])

    _, r = self.anagrams2.get_anagrams("accustoming")
    self.assertEqual(r, ['accustoming'])

    _, r = self.anagrams2.get_anagrams("accustoms")
    self.assertEqual(r, ['accustoms'])

    _, r = self.anagrams2.get_anagrams("ace")
    self.assertEqual(r, ['ace'])

    _, r = self.anagrams2.get_anagrams("aces")
    self.assertEqual(r, ['aces', 'case'])

    _, r = self.anagrams2.get_anagrams("acetate")
    self.assertEqual(r, ['acetate'])

    _, r = self.anagrams2.get_anagrams("acetone")
    self.assertEqual(r, ['acetone'])

    _, r = self.anagrams2.get_anagrams("acetylene")
    self.assertEqual(r, ['acetylene'])

    _, r = self.anagrams2.get_anagrams("achaean")
    self.assertEqual(r, ['achaean'])

    _, r = self.anagrams2.get_anagrams("achaeans")
    self.assertEqual(r, ['achaeans'])

    _, r = self.anagrams2.get_anagrams("ache")
    self.assertEqual(r, ['ache', 'each'])

    _, r = self.anagrams2.get_anagrams("ached")
    self.assertEqual(r, ['ached'])

    _, r = self.anagrams2.get_anagrams("aches")
    self.assertEqual(r, ['aches', 'chase'])

    _, r = self.anagrams2.get_anagrams("achievable")
    self.assertEqual(r, ['achievable'])

    _, r = self.anagrams2.get_anagrams("achieve")
    self.assertEqual(r, ['achieve'])

    _, r = self.anagrams2.get_anagrams("achieved")
    self.assertEqual(r, ['achieved'])

    _, r = self.anagrams2.get_anagrams("achievement")
    self.assertEqual(r, ['achievement'])

    _, r = self.anagrams2.get_anagrams("achievements")
    self.assertEqual(r, ['achievements'])

    _, r = self.anagrams2.get_anagrams("achiever")
    self.assertEqual(r, ['achiever'])

    _, r = self.anagrams2.get_anagrams("achievers")
    self.assertEqual(r, ['achievers'])

    _, r = self.anagrams2.get_anagrams("achieves")
    self.assertEqual(r, ['achieves'])

    _, r = self.anagrams2.get_anagrams("achieving")
    self.assertEqual(r, ['achieving'])

    _, r = self.anagrams2.get_anagrams("achilles")
    self.assertEqual(r, ['achilles'])

    _, r = self.anagrams2.get_anagrams("aching")
    self.assertEqual(r, ['aching', 'chiang'])

    _, r = self.anagrams2.get_anagrams("acid")
    self.assertEqual(r, ['acid'])

    _, r = self.anagrams2.get_anagrams("acidic")
    self.assertEqual(r, ['acidic'])

    _, r = self.anagrams2.get_anagrams("acidities")
    self.assertEqual(r, ['acidities'])

    _, r = self.anagrams2.get_anagrams("acidity")
    self.assertEqual(r, ['acidity'])

    _, r = self.anagrams2.get_anagrams("acidly")
    self.assertEqual(r, ['acidly'])

    _, r = self.anagrams2.get_anagrams("acids")
    self.assertEqual(r, ['acids'])

    _, r = self.anagrams2.get_anagrams("acidulous")
    self.assertEqual(r, ['acidulous'])

    _, r = self.anagrams2.get_anagrams("ackerman")
    self.assertEqual(r, ['ackerman'])

    _, r = self.anagrams2.get_anagrams("ackley")
    self.assertEqual(r, ['ackley', 'lackey'])

    _, r = self.anagrams2.get_anagrams("acknowledge")
    self.assertEqual(r, ['acknowledge'])

    _, r = self.anagrams2.get_anagrams("acknowledgeable")
    self.assertEqual(r, ['acknowledgeable'])

    _, r = self.anagrams2.get_anagrams("acknowledged")
    self.assertEqual(r, ['acknowledged'])

    _, r = self.anagrams2.get_anagrams("acknowledgement")
    self.assertEqual(r, ['acknowledgement'])

    _, r = self.anagrams2.get_anagrams("acknowledgements")
    self.assertEqual(r, ['acknowledgements'])

    _, r = self.anagrams2.get_anagrams("acknowledger")
    self.assertEqual(r, ['acknowledger'])

    _, r = self.anagrams2.get_anagrams("acknowledgers")
    self.assertEqual(r, ['acknowledgers'])

    _, r = self.anagrams2.get_anagrams("acknowledges")
    self.assertEqual(r, ['acknowledges'])

    _, r = self.anagrams2.get_anagrams("acknowledging")
    self.assertEqual(r, ['acknowledging'])

    _, r = self.anagrams2.get_anagrams("acknowledgment")
    self.assertEqual(r, ['acknowledgment'])

    _, r = self.anagrams2.get_anagrams("acknowledgments")
    self.assertEqual(r, ['acknowledgments'])

    _, r = self.anagrams2.get_anagrams("acme")
    self.assertEqual(r, ['acme', 'came', 'mace'])

    _, r = self.anagrams2.get_anagrams("acne")
    self.assertEqual(r, ['acne', 'cane'])

    _, r = self.anagrams2.get_anagrams("acolyte")
    self.assertEqual(r, ['acolyte'])

    _, r = self.anagrams2.get_anagrams("acolytes")
    self.assertEqual(r, ['acolytes'])

    _, r = self.anagrams2.get_anagrams("acorn")
    self.assertEqual(r, ['acorn'])

    _, r = self.anagrams2.get_anagrams("acorns")
    self.assertEqual(r, ['acorns', 'carson'])

    _, r = self.anagrams2.get_anagrams("acoustic")
    self.assertEqual(r, ['acoustic'])

    _, r = self.anagrams2.get_anagrams("acoustical")
    self.assertEqual(r, ['acoustical'])

    _, r = self.anagrams2.get_anagrams("acoustically")
    self.assertEqual(r, ['acoustically'])

    _, r = self.anagrams2.get_anagrams("acoustician")
    self.assertEqual(r, ['acoustician'])

    _, r = self.anagrams2.get_anagrams("acoustics")
    self.assertEqual(r, ['acoustics'])

    _, r = self.anagrams2.get_anagrams("acquaint")
    self.assertEqual(r, ['acquaint'])

    _, r = self.anagrams2.get_anagrams("acquaintance")
    self.assertEqual(r, ['acquaintance'])

    _, r = self.anagrams2.get_anagrams("acquaintances")
    self.assertEqual(r, ['acquaintances'])

    _, r = self.anagrams2.get_anagrams("acquainted")
    self.assertEqual(r, ['acquainted'])

    _, r = self.anagrams2.get_anagrams("acquainting")
    self.assertEqual(r, ['acquainting'])

    _, r = self.anagrams2.get_anagrams("acquaints")
    self.assertEqual(r, ['acquaints'])

    _, r = self.anagrams2.get_anagrams("acquiesce")
    self.assertEqual(r, ['acquiesce'])

    _, r = self.anagrams2.get_anagrams("acquiesced")
    self.assertEqual(r, ['acquiesced'])

    _, r = self.anagrams2.get_anagrams("acquiescence")
    self.assertEqual(r, ['acquiescence'])

    _, r = self.anagrams2.get_anagrams("acquiescent")
    self.assertEqual(r, ['acquiescent'])

    _, r = self.anagrams2.get_anagrams("acquiesces")
    self.assertEqual(r, ['acquiesces'])

    _, r = self.anagrams2.get_anagrams("acquiescing")
    self.assertEqual(r, ['acquiescing'])

    _, r = self.anagrams2.get_anagrams("acquirable")
    self.assertEqual(r, ['acquirable'])

    _, r = self.anagrams2.get_anagrams("acquire")
    self.assertEqual(r, ['acquire'])

    _, r = self.anagrams2.get_anagrams("acquired")
    self.assertEqual(r, ['acquired'])

    _, r = self.anagrams2.get_anagrams("acquires")
    self.assertEqual(r, ['acquires'])

    _, r = self.anagrams2.get_anagrams("acquiring")
    self.assertEqual(r, ['acquiring'])

    _, r = self.anagrams2.get_anagrams("acquisition")
    self.assertEqual(r, ['acquisition'])

    _, r = self.anagrams2.get_anagrams("acquisitions")
    self.assertEqual(r, ['acquisitions'])

    _, r = self.anagrams2.get_anagrams("acquisitive")
    self.assertEqual(r, ['acquisitive'])

    _, r = self.anagrams2.get_anagrams("acquisitiveness")
    self.assertEqual(r, ['acquisitiveness'])

    _, r = self.anagrams2.get_anagrams("acquit")
    self.assertEqual(r, ['acquit'])

    _, r = self.anagrams2.get_anagrams("acquits")
    self.assertEqual(r, ['acquits'])

    _, r = self.anagrams2.get_anagrams("acquittal")
    self.assertEqual(r, ['acquittal'])

    _, r = self.anagrams2.get_anagrams("acquitted")
    self.assertEqual(r, ['acquitted'])

    _, r = self.anagrams2.get_anagrams("acquitter")
    self.assertEqual(r, ['acquitter'])

    _, r = self.anagrams2.get_anagrams("acquitting")
    self.assertEqual(r, ['acquitting'])

    _, r = self.anagrams2.get_anagrams("acre")
    self.assertEqual(r, ['acre', 'care', 'race'])

    _, r = self.anagrams2.get_anagrams("acreage")
    self.assertEqual(r, ['acreage'])

    _, r = self.anagrams2.get_anagrams("acres")
    self.assertEqual(r, ['acres', 'cares', 'races', 'scare'])

    _, r = self.anagrams2.get_anagrams("acrid")
    self.assertEqual(r, ['acrid', 'dirac'])

    _, r = self.anagrams2.get_anagrams("acrimonious")
    self.assertEqual(r, ['acrimonious'])

    _, r = self.anagrams2.get_anagrams("acrimony")
    self.assertEqual(r, ['acrimony'])

    _, r = self.anagrams2.get_anagrams("acrobat")
    self.assertEqual(r, ['acrobat'])

    _, r = self.anagrams2.get_anagrams("acrobatic")
    self.assertEqual(r, ['acrobatic'])

    _, r = self.anagrams2.get_anagrams("acrobatics")
    self.assertEqual(r, ['acrobatics'])

    _, r = self.anagrams2.get_anagrams("acrobats")
    self.assertEqual(r, ['acrobats'])

    _, r = self.anagrams2.get_anagrams("acronym")
    self.assertEqual(r, ['acronym'])

    _, r = self.anagrams2.get_anagrams("acronyms")
    self.assertEqual(r, ['acronyms'])

    _, r = self.anagrams2.get_anagrams("acropolis")
    self.assertEqual(r, ['acropolis'])

    _, r = self.anagrams2.get_anagrams("across")
    self.assertEqual(r, ['across'])

    _, r = self.anagrams2.get_anagrams("acrylic")
    self.assertEqual(r, ['acrylic'])

    _, r = self.anagrams2.get_anagrams("act")
    self.assertEqual(r, ['act', 'cat'])

    _, r = self.anagrams2.get_anagrams("acta")
    self.assertEqual(r, ['acta'])

    _, r = self.anagrams2.get_anagrams("actaeon")
    self.assertEqual(r, ['actaeon'])

    _, r = self.anagrams2.get_anagrams("acted")
    self.assertEqual(r, ['acted'])

    _, r = self.anagrams2.get_anagrams("acting")
    self.assertEqual(r, ['acting'])

    _, r = self.anagrams2.get_anagrams("actinium")
    self.assertEqual(r, ['actinium'])

    _, r = self.anagrams2.get_anagrams("actinometer")
    self.assertEqual(r, ['actinometer'])

    _, r = self.anagrams2.get_anagrams("actinometers")
    self.assertEqual(r, ['actinometers'])

    _, r = self.anagrams2.get_anagrams("action")
    self.assertEqual(r, ['action'])

    _, r = self.anagrams2.get_anagrams("actions")
    self.assertEqual(r, ['actions', 'scotian'])

    _, r = self.anagrams2.get_anagrams("activate")
    self.assertEqual(r, ['activate'])

    _, r = self.anagrams2.get_anagrams("activated")
    self.assertEqual(r, ['activated'])

    _, r = self.anagrams2.get_anagrams("activates")
    self.assertEqual(r, ['activates'])

    _, r = self.anagrams2.get_anagrams("activating")
    self.assertEqual(r, ['activating'])

    _, r = self.anagrams2.get_anagrams("activation")
    self.assertEqual(r, ['activation'])

    _, r = self.anagrams2.get_anagrams("activations")
    self.assertEqual(r, ['activations'])

    _, r = self.anagrams2.get_anagrams("activator")
    self.assertEqual(r, ['activator'])

    _, r = self.anagrams2.get_anagrams("activators")
    self.assertEqual(r, ['activators'])

    _, r = self.anagrams2.get_anagrams("active")
    self.assertEqual(r, ['active'])

    _, r = self.anagrams2.get_anagrams("actively")
    self.assertEqual(r, ['actively'])

    _, r = self.anagrams2.get_anagrams("activism")
    self.assertEqual(r, ['activism'])

    _, r = self.anagrams2.get_anagrams("activist")
    self.assertEqual(r, ['activist'])

    _, r = self.anagrams2.get_anagrams("activists")
    self.assertEqual(r, ['activists'])

    _, r = self.anagrams2.get_anagrams("activities")
    self.assertEqual(r, ['activities'])

    _, r = self.anagrams2.get_anagrams("activity")
    self.assertEqual(r, ['activity'])

    _, r = self.anagrams2.get_anagrams("acton")
    self.assertEqual(r, ['acton', 'canto'])

    _, r = self.anagrams2.get_anagrams("actor")
    self.assertEqual(r, ['actor'])

    _, r = self.anagrams2.get_anagrams("actors")
    self.assertEqual(r, ['actors', 'castor', 'castro'])

    _, r = self.anagrams2.get_anagrams("actress")
    self.assertEqual(r, ['actress', 'casters', 'recasts'])

    _, r = self.anagrams2.get_anagrams("actresses")
    self.assertEqual(r, ['actresses'])

    _, r = self.anagrams2.get_anagrams("acts")
    self.assertEqual(r, ['acts', 'cast', 'cats'])

    _, r = self.anagrams2.get_anagrams("actual")
    self.assertEqual(r, ['actual'])

    _, r = self.anagrams2.get_anagrams("actualities")
    self.assertEqual(r, ['actualities'])

    _, r = self.anagrams2.get_anagrams("actuality")
    self.assertEqual(r, ['actuality'])

    _, r = self.anagrams2.get_anagrams("actualization")
    self.assertEqual(r, ['actualization'])

    _, r = self.anagrams2.get_anagrams("actually")
    self.assertEqual(r, ['actually'])

    _, r = self.anagrams2.get_anagrams("actuals")
    self.assertEqual(r, ['actuals'])

    _, r = self.anagrams2.get_anagrams("actuarial")
    self.assertEqual(r, ['actuarial'])

    _, r = self.anagrams2.get_anagrams("actuarially")
    self.assertEqual(r, ['actuarially'])

    _, r = self.anagrams2.get_anagrams("actuate")
    self.assertEqual(r, ['actuate'])

    _, r = self.anagrams2.get_anagrams("actuated")
    self.assertEqual(r, ['actuated'])

    _, r = self.anagrams2.get_anagrams("actuates")
    self.assertEqual(r, ['actuates'])

    _, r = self.anagrams2.get_anagrams("actuating")
    self.assertEqual(r, ['actuating'])

    _, r = self.anagrams2.get_anagrams("actuator")
    self.assertEqual(r, ['actuator', 'autocrat'])

    _, r = self.anagrams2.get_anagrams("actuators")
    self.assertEqual(r, ['actuators', 'autocrats'])

    _, r = self.anagrams2.get_anagrams("acuity")
    self.assertEqual(r, ['acuity'])

    _, r = self.anagrams2.get_anagrams("acumen")
    self.assertEqual(r, ['acumen'])

    _, r = self.anagrams2.get_anagrams("acute")
    self.assertEqual(r, ['acute'])

    _, r = self.anagrams2.get_anagrams("acutely")
    self.assertEqual(r, ['acutely'])

    _, r = self.anagrams2.get_anagrams("acuteness")
    self.assertEqual(r, ['acuteness'])

    _, r = self.anagrams2.get_anagrams("acyclic")
    self.assertEqual(r, ['acyclic'])

    _, r = self.anagrams2.get_anagrams("acyclically")
    self.assertEqual(r, ['acyclically'])

    _, r = self.anagrams2.get_anagrams("ad")
    self.assertEqual(r, ['ad'])

    _, r = self.anagrams2.get_anagrams("ada")
    self.assertEqual(r, ['ada'])

    _, r = self.anagrams2.get_anagrams("adage")
    self.assertEqual(r, ['adage'])

    _, r = self.anagrams2.get_anagrams("adages")
    self.assertEqual(r, ['adages'])

    _, r = self.anagrams2.get_anagrams("adagio")
    self.assertEqual(r, ['adagio'])

    _, r = self.anagrams2.get_anagrams("adagios")
    self.assertEqual(r, ['adagios'])

    _, r = self.anagrams2.get_anagrams("adair")
    self.assertEqual(r, ['adair'])

    _, r = self.anagrams2.get_anagrams("adam")
    self.assertEqual(r, ['adam'])

    _, r = self.anagrams2.get_anagrams("adamant")
    self.assertEqual(r, ['adamant'])

    _, r = self.anagrams2.get_anagrams("adamantly")
    self.assertEqual(r, ['adamantly'])

    _, r = self.anagrams2.get_anagrams("adams")
    self.assertEqual(r, ['adams'])

    _, r = self.anagrams2.get_anagrams("adamson")
    self.assertEqual(r, ['adamson'])

    _, r = self.anagrams2.get_anagrams("adapt")
    self.assertEqual(r, ['adapt'])

    _, r = self.anagrams2.get_anagrams("adaptability")
    self.assertEqual(r, ['adaptability'])

    _, r = self.anagrams2.get_anagrams("adaptable")
    self.assertEqual(r, ['adaptable'])

    _, r = self.anagrams2.get_anagrams("adaptation")
    self.assertEqual(r, ['adaptation'])

    _, r = self.anagrams2.get_anagrams("adaptations")
    self.assertEqual(r, ['adaptations'])

    _, r = self.anagrams2.get_anagrams("adapted")
    self.assertEqual(r, ['adapted'])

    _, r = self.anagrams2.get_anagrams("adapter")
    self.assertEqual(r, ['adapter'])

    _, r = self.anagrams2.get_anagrams("adapters")
    self.assertEqual(r, ['adapters'])

    _, r = self.anagrams2.get_anagrams("adapting")
    self.assertEqual(r, ['adapting'])

    _, r = self.anagrams2.get_anagrams("adaptive")
    self.assertEqual(r, ['adaptive'])

    _, r = self.anagrams2.get_anagrams("adaptively")
    self.assertEqual(r, ['adaptively'])

    _, r = self.anagrams2.get_anagrams("adaptor")
    self.assertEqual(r, ['adaptor'])

    _, r = self.anagrams2.get_anagrams("adaptors")
    self.assertEqual(r, ['adaptors'])

    _, r = self.anagrams2.get_anagrams("adapts")
    self.assertEqual(r, ['adapts'])

    _, r = self.anagrams2.get_anagrams("add")
    self.assertEqual(r, ['add', 'dad'])

    _, r = self.anagrams2.get_anagrams("added")
    self.assertEqual(r, ['added'])

    _, r = self.anagrams2.get_anagrams("addend")
    self.assertEqual(r, ['addend'])

    _, r = self.anagrams2.get_anagrams("addenda")
    self.assertEqual(r, ['addenda'])

    _, r = self.anagrams2.get_anagrams("addendum")
    self.assertEqual(r, ['addendum'])

    _, r = self.anagrams2.get_anagrams("adder")
    self.assertEqual(r, ['adder', 'dared', 'dread'])

    _, r = self.anagrams2.get_anagrams("adders")
    self.assertEqual(r, ['adders', 'dreads', 'sadder'])

    _, r = self.anagrams2.get_anagrams("addict")
    self.assertEqual(r, ['addict'])

    _, r = self.anagrams2.get_anagrams("addicted")
    self.assertEqual(r, ['addicted'])

    _, r = self.anagrams2.get_anagrams("addicting")
    self.assertEqual(r, ['addicting'])

    _, r = self.anagrams2.get_anagrams("addiction")
    self.assertEqual(r, ['addiction'])

    _, r = self.anagrams2.get_anagrams("addictions")
    self.assertEqual(r, ['addictions'])

    _, r = self.anagrams2.get_anagrams("addicts")
    self.assertEqual(r, ['addicts'])

    _, r = self.anagrams2.get_anagrams("adding")
    self.assertEqual(r, ['adding'])

    _, r = self.anagrams2.get_anagrams("addis")
    self.assertEqual(r, ['addis'])

    _, r = self.anagrams2.get_anagrams("addison")
    self.assertEqual(r, ['addison'])

    _, r = self.anagrams2.get_anagrams("addition")
    self.assertEqual(r, ['addition'])

    _, r = self.anagrams2.get_anagrams("additional")
    self.assertEqual(r, ['additional'])

    _, r = self.anagrams2.get_anagrams("additionally")
    self.assertEqual(r, ['additionally'])

    _, r = self.anagrams2.get_anagrams("additions")
    self.assertEqual(r, ['additions'])

    _, r = self.anagrams2.get_anagrams("additive")
    self.assertEqual(r, ['additive'])

    _, r = self.anagrams2.get_anagrams("additives")
    self.assertEqual(r, ['additives'])

    _, r = self.anagrams2.get_anagrams("additivity")
    self.assertEqual(r, ['additivity'])

    _, r = self.anagrams2.get_anagrams("address")
    self.assertEqual(r, ['address'])

    _, r = self.anagrams2.get_anagrams("addressability")
    self.assertEqual(r, ['addressability'])

    _, r = self.anagrams2.get_anagrams("addressable")
    self.assertEqual(r, ['addressable'])

    _, r = self.anagrams2.get_anagrams("addressed")
    self.assertEqual(r, ['addressed'])

    _, r = self.anagrams2.get_anagrams("addressee")
    self.assertEqual(r, ['addressee'])

    _, r = self.anagrams2.get_anagrams("addressees")
    self.assertEqual(r, ['addressees'])

    _, r = self.anagrams2.get_anagrams("addresser")
    self.assertEqual(r, ['addresser'])

    _, r = self.anagrams2.get_anagrams("addressers")
    self.assertEqual(r, ['addressers'])

    _, r = self.anagrams2.get_anagrams("addresses")
    self.assertEqual(r, ['addresses'])

    _, r = self.anagrams2.get_anagrams("addressing")
    self.assertEqual(r, ['addressing'])

    _, r = self.anagrams2.get_anagrams("addressograph")
    self.assertEqual(r, ['addressograph'])

    _, r = self.anagrams2.get_anagrams("adds")
    self.assertEqual(r, ['adds', 'dads'])

    _, r = self.anagrams2.get_anagrams("adduce")
    self.assertEqual(r, ['adduce'])

    _, r = self.anagrams2.get_anagrams("adduced")
    self.assertEqual(r, ['adduced'])

    _, r = self.anagrams2.get_anagrams("adduces")
    self.assertEqual(r, ['adduces'])

    _, r = self.anagrams2.get_anagrams("adducible")
    self.assertEqual(r, ['adducible'])

    _, r = self.anagrams2.get_anagrams("adducing")
    self.assertEqual(r, ['adducing'])

    _, r = self.anagrams2.get_anagrams("adduct")
    self.assertEqual(r, ['adduct'])

    _, r = self.anagrams2.get_anagrams("adducted")
    self.assertEqual(r, ['adducted'])

    _, r = self.anagrams2.get_anagrams("adducting")
    self.assertEqual(r, ['adducting'])

    _, r = self.anagrams2.get_anagrams("adduction")
    self.assertEqual(r, ['adduction'])

    _, r = self.anagrams2.get_anagrams("adductor")
    self.assertEqual(r, ['adductor'])

    _, r = self.anagrams2.get_anagrams("adducts")
    self.assertEqual(r, ['adducts'])

    _, r = self.anagrams2.get_anagrams("adelaide")
    self.assertEqual(r, ['adelaide'])

    _, r = self.anagrams2.get_anagrams("adele")
    self.assertEqual(r, ['adele'])

    _, r = self.anagrams2.get_anagrams("adelia")
    self.assertEqual(r, ['adelia'])

    _, r = self.anagrams2.get_anagrams("aden")
    self.assertEqual(r, ['aden', 'dane', 'dean', 'edna'])

    _, r = self.anagrams2.get_anagrams("adept")
    self.assertEqual(r, ['adept', 'taped'])

    _, r = self.anagrams2.get_anagrams("adequacies")
    self.assertEqual(r, ['adequacies'])

    _, r = self.anagrams2.get_anagrams("adequacy")
    self.assertEqual(r, ['adequacy'])

    _, r = self.anagrams2.get_anagrams("adequate")
    self.assertEqual(r, ['adequate'])

    _, r = self.anagrams2.get_anagrams("adequately")
    self.assertEqual(r, ['adequately'])

    _, r = self.anagrams2.get_anagrams("adhere")
    self.assertEqual(r, ['adhere', 'header'])

    _, r = self.anagrams2.get_anagrams("adhered")
    self.assertEqual(r, ['adhered', 'redhead'])

    _, r = self.anagrams2.get_anagrams("adherence")
    self.assertEqual(r, ['adherence'])

    _, r = self.anagrams2.get_anagrams("adherent")
    self.assertEqual(r, ['adherent'])

    _, r = self.anagrams2.get_anagrams("adherents")
    self.assertEqual(r, ['adherents'])

    _, r = self.anagrams2.get_anagrams("adherer")
    self.assertEqual(r, ['adherer'])

    _, r = self.anagrams2.get_anagrams("adherers")
    self.assertEqual(r, ['adherers'])

    _, r = self.anagrams2.get_anagrams("adheres")
    self.assertEqual(r, ['adheres', 'headers', 'sheared'])

    _, r = self.anagrams2.get_anagrams("adhering")
    self.assertEqual(r, ['adhering'])

    _, r = self.anagrams2.get_anagrams("adhesion")
    self.assertEqual(r, ['adhesion'])

    _, r = self.anagrams2.get_anagrams("adhesions")
    self.assertEqual(r, ['adhesions'])

    _, r = self.anagrams2.get_anagrams("adhesive")
    self.assertEqual(r, ['adhesive'])

    _, r = self.anagrams2.get_anagrams("adhesives")
    self.assertEqual(r, ['adhesives'])

    _, r = self.anagrams2.get_anagrams("adiabatic")
    self.assertEqual(r, ['adiabatic'])

    _, r = self.anagrams2.get_anagrams("adiabatically")
    self.assertEqual(r, ['adiabatically'])

    _, r = self.anagrams2.get_anagrams("adieu")
    self.assertEqual(r, ['adieu'])

    _, r = self.anagrams2.get_anagrams("adirondack")
    self.assertEqual(r, ['adirondack'])

    _, r = self.anagrams2.get_anagrams("adirondacks")
    self.assertEqual(r, ['adirondacks'])

    _, r = self.anagrams2.get_anagrams("adjacency")
    self.assertEqual(r, ['adjacency'])

    _, r = self.anagrams2.get_anagrams("adjacent")
    self.assertEqual(r, ['adjacent'])

    _, r = self.anagrams2.get_anagrams("adjective")
    self.assertEqual(r, ['adjective'])

    _, r = self.anagrams2.get_anagrams("adjectives")
    self.assertEqual(r, ['adjectives'])

    _, r = self.anagrams2.get_anagrams("adjoin")
    self.assertEqual(r, ['adjoin'])

    _, r = self.anagrams2.get_anagrams("adjoined")
    self.assertEqual(r, ['adjoined'])

    _, r = self.anagrams2.get_anagrams("adjoining")
    self.assertEqual(r, ['adjoining'])

    _, r = self.anagrams2.get_anagrams("adjoins")
    self.assertEqual(r, ['adjoins'])

    _, r = self.anagrams2.get_anagrams("adjourn")
    self.assertEqual(r, ['adjourn'])

    _, r = self.anagrams2.get_anagrams("adjourned")
    self.assertEqual(r, ['adjourned'])

    _, r = self.anagrams2.get_anagrams("adjourning")
    self.assertEqual(r, ['adjourning'])

    _, r = self.anagrams2.get_anagrams("adjournment")
    self.assertEqual(r, ['adjournment'])

    _, r = self.anagrams2.get_anagrams("adjourns")
    self.assertEqual(r, ['adjourns'])

    _, r = self.anagrams2.get_anagrams("adjudge")
    self.assertEqual(r, ['adjudge'])

    _, r = self.anagrams2.get_anagrams("adjudged")
    self.assertEqual(r, ['adjudged'])

    _, r = self.anagrams2.get_anagrams("adjudges")
    self.assertEqual(r, ['adjudges'])

    _, r = self.anagrams2.get_anagrams("adjudging")
    self.assertEqual(r, ['adjudging'])

    _, r = self.anagrams2.get_anagrams("adjudicate")
    self.assertEqual(r, ['adjudicate'])

    _, r = self.anagrams2.get_anagrams("adjudicated")
    self.assertEqual(r, ['adjudicated'])

    _, r = self.anagrams2.get_anagrams("adjudicates")
    self.assertEqual(r, ['adjudicates'])

    _, r = self.anagrams2.get_anagrams("adjudicating")
    self.assertEqual(r, ['adjudicating'])

    _, r = self.anagrams2.get_anagrams("adjudication")
    self.assertEqual(r, ['adjudication'])

    _, r = self.anagrams2.get_anagrams("adjudications")
    self.assertEqual(r, ['adjudications'])

    _, r = self.anagrams2.get_anagrams("adjunct")
    self.assertEqual(r, ['adjunct'])

    _, r = self.anagrams2.get_anagrams("adjuncts")
    self.assertEqual(r, ['adjuncts'])

    _, r = self.anagrams2.get_anagrams("adjure")
    self.assertEqual(r, ['adjure'])

    _, r = self.anagrams2.get_anagrams("adjured")
    self.assertEqual(r, ['adjured'])

    _, r = self.anagrams2.get_anagrams("adjures")
    self.assertEqual(r, ['adjures'])

    _, r = self.anagrams2.get_anagrams("adjuring")
    self.assertEqual(r, ['adjuring'])

    _, r = self.anagrams2.get_anagrams("adjust")
    self.assertEqual(r, ['adjust'])

    _, r = self.anagrams2.get_anagrams("adjustable")
    self.assertEqual(r, ['adjustable'])

    _, r = self.anagrams2.get_anagrams("adjustably")
    self.assertEqual(r, ['adjustably'])

    _, r = self.anagrams2.get_anagrams("adjusted")
    self.assertEqual(r, ['adjusted'])

    _, r = self.anagrams2.get_anagrams("adjuster")
    self.assertEqual(r, ['adjuster'])

    _, r = self.anagrams2.get_anagrams("adjusters")
    self.assertEqual(r, ['adjusters'])

    _, r = self.anagrams2.get_anagrams("adjusting")
    self.assertEqual(r, ['adjusting'])

    _, r = self.anagrams2.get_anagrams("adjustment")
    self.assertEqual(r, ['adjustment'])

    _, r = self.anagrams2.get_anagrams("adjustments")
    self.assertEqual(r, ['adjustments'])

    _, r = self.anagrams2.get_anagrams("adjustor")
    self.assertEqual(r, ['adjustor'])

    _, r = self.anagrams2.get_anagrams("adjustors")
    self.assertEqual(r, ['adjustors'])

    _, r = self.anagrams2.get_anagrams("adjusts")
    self.assertEqual(r, ['adjusts'])

    _, r = self.anagrams2.get_anagrams("adjutant")
    self.assertEqual(r, ['adjutant'])

    _, r = self.anagrams2.get_anagrams("adjutants")
    self.assertEqual(r, ['adjutants'])

    _, r = self.anagrams2.get_anagrams("adkins")
    self.assertEqual(r, ['adkins'])

    _, r = self.anagrams2.get_anagrams("adler")
    self.assertEqual(r, ['adler', 'alder'])

    _, r = self.anagrams2.get_anagrams("adlerian")
    self.assertEqual(r, ['adlerian'])

    _, r = self.anagrams2.get_anagrams("administer")
    self.assertEqual(r, ['administer'])

    _, r = self.anagrams2.get_anagrams("administered")
    self.assertEqual(r, ['administered'])

    _, r = self.anagrams2.get_anagrams("administering")
    self.assertEqual(r, ['administering'])

    _, r = self.anagrams2.get_anagrams("administerings")
    self.assertEqual(r, ['administerings'])

    _, r = self.anagrams2.get_anagrams("administers")
    self.assertEqual(r, ['administers'])

    _, r = self.anagrams2.get_anagrams("administrable")
    self.assertEqual(r, ['administrable'])

    _, r = self.anagrams2.get_anagrams("administrate")
    self.assertEqual(r, ['administrate'])

    _, r = self.anagrams2.get_anagrams("administration")
    self.assertEqual(r, ['administration'])

    _, r = self.anagrams2.get_anagrams("administrations")
    self.assertEqual(r, ['administrations'])

    _, r = self.anagrams2.get_anagrams("administrative")
    self.assertEqual(r, ['administrative'])

    _, r = self.anagrams2.get_anagrams("administratively")
    self.assertEqual(r, ['administratively'])

    _, r = self.anagrams2.get_anagrams("administrator")
    self.assertEqual(r, ['administrator'])

    _, r = self.anagrams2.get_anagrams("administrators")
    self.assertEqual(r, ['administrators'])

    _, r = self.anagrams2.get_anagrams("admirable")
    self.assertEqual(r, ['admirable'])

    _, r = self.anagrams2.get_anagrams("admirably")
    self.assertEqual(r, ['admirably'])

    _, r = self.anagrams2.get_anagrams("admiral")
    self.assertEqual(r, ['admiral'])

    _, r = self.anagrams2.get_anagrams("admirals")
    self.assertEqual(r, ['admirals'])

    _, r = self.anagrams2.get_anagrams("admiralty")
    self.assertEqual(r, ['admiralty'])

    _, r = self.anagrams2.get_anagrams("admiration")
    self.assertEqual(r, ['admiration'])

    _, r = self.anagrams2.get_anagrams("admirations")
    self.assertEqual(r, ['admirations'])

    _, r = self.anagrams2.get_anagrams("admire")
    self.assertEqual(r, ['admire'])

    _, r = self.anagrams2.get_anagrams("admired")
    self.assertEqual(r, ['admired'])

    _, r = self.anagrams2.get_anagrams("admirer")
    self.assertEqual(r, ['admirer', 'married'])

    _, r = self.anagrams2.get_anagrams("admirers")
    self.assertEqual(r, ['admirers'])

    _, r = self.anagrams2.get_anagrams("admires")
    self.assertEqual(r, ['admires', 'sidearm'])

    _, r = self.anagrams2.get_anagrams("admiring")
    self.assertEqual(r, ['admiring'])

    _, r = self.anagrams2.get_anagrams("admiringly")
    self.assertEqual(r, ['admiringly'])

    _, r = self.anagrams2.get_anagrams("admissibility")
    self.assertEqual(r, ['admissibility'])

    _, r = self.anagrams2.get_anagrams("admissible")
    self.assertEqual(r, ['admissible'])

    _, r = self.anagrams2.get_anagrams("admission")
    self.assertEqual(r, ['admission'])

    _, r = self.anagrams2.get_anagrams("admissions")
    self.assertEqual(r, ['admissions'])

    _, r = self.anagrams2.get_anagrams("admit")
    self.assertEqual(r, ['admit'])

    _, r = self.anagrams2.get_anagrams("admits")
    self.assertEqual(r, ['admits', 'amidst'])

    _, r = self.anagrams2.get_anagrams("admittance")
    self.assertEqual(r, ['admittance'])

    _, r = self.anagrams2.get_anagrams("admitted")
    self.assertEqual(r, ['admitted'])

    _, r = self.anagrams2.get_anagrams("admittedly")
    self.assertEqual(r, ['admittedly'])

    _, r = self.anagrams2.get_anagrams("admitter")
    self.assertEqual(r, ['admitter'])

    _, r = self.anagrams2.get_anagrams("admitters")
    self.assertEqual(r, ['admitters'])

    _, r = self.anagrams2.get_anagrams("admitting")
    self.assertEqual(r, ['admitting'])

    _, r = self.anagrams2.get_anagrams("admix")
    self.assertEqual(r, ['admix'])

    _, r = self.anagrams2.get_anagrams("admixed")
    self.assertEqual(r, ['admixed'])

    _, r = self.anagrams2.get_anagrams("admixes")
    self.assertEqual(r, ['admixes'])

    _, r = self.anagrams2.get_anagrams("admixture")
    self.assertEqual(r, ['admixture'])

    _, r = self.anagrams2.get_anagrams("admonish")
    self.assertEqual(r, ['admonish'])

    _, r = self.anagrams2.get_anagrams("admonished")
    self.assertEqual(r, ['admonished'])

    _, r = self.anagrams2.get_anagrams("admonishes")
    self.assertEqual(r, ['admonishes'])

    _, r = self.anagrams2.get_anagrams("admonishing")
    self.assertEqual(r, ['admonishing'])

    _, r = self.anagrams2.get_anagrams("admonishment")
    self.assertEqual(r, ['admonishment'])

    _, r = self.anagrams2.get_anagrams("admonishments")
    self.assertEqual(r, ['admonishments'])

    _, r = self.anagrams2.get_anagrams("admonition")
    self.assertEqual(r, ['admonition', 'domination'])

    _, r = self.anagrams2.get_anagrams("admonitions")
    self.assertEqual(r, ['admonitions'])

    _, r = self.anagrams2.get_anagrams("ado")
    self.assertEqual(r, ['ado'])

    _, r = self.anagrams2.get_anagrams("adobe")
    self.assertEqual(r, ['abode', 'adobe'])

    _, r = self.anagrams2.get_anagrams("adolescence")
    self.assertEqual(r, ['adolescence'])

    _, r = self.anagrams2.get_anagrams("adolescent")
    self.assertEqual(r, ['adolescent'])

    _, r = self.anagrams2.get_anagrams("adolescents")
    self.assertEqual(r, ['adolescents'])

    _, r = self.anagrams2.get_anagrams("adolph")
    self.assertEqual(r, ['adolph'])

    _, r = self.anagrams2.get_anagrams("adolphus")
    self.assertEqual(r, ['adolphus'])

    _, r = self.anagrams2.get_anagrams("adonis")
    self.assertEqual(r, ['adonis'])

    _, r = self.anagrams2.get_anagrams("adopt")
    self.assertEqual(r, ['adopt'])

    _, r = self.anagrams2.get_anagrams("adopted")
    self.assertEqual(r, ['adopted'])

    _, r = self.anagrams2.get_anagrams("adopter")
    self.assertEqual(r, ['adopter'])

    _, r = self.anagrams2.get_anagrams("adopters")
    self.assertEqual(r, ['adopters'])

    _, r = self.anagrams2.get_anagrams("adopting")
    self.assertEqual(r, ['adopting'])

    _, r = self.anagrams2.get_anagrams("adoption")
    self.assertEqual(r, ['adoption'])

    _, r = self.anagrams2.get_anagrams("adoptions")
    self.assertEqual(r, ['adoptions'])

    _, r = self.anagrams2.get_anagrams("adoptive")
    self.assertEqual(r, ['adoptive'])

    _, r = self.anagrams2.get_anagrams("adopts")
    self.assertEqual(r, ['adopts'])

    _, r = self.anagrams2.get_anagrams("adorable")
    self.assertEqual(r, ['adorable'])

    _, r = self.anagrams2.get_anagrams("adoration")
    self.assertEqual(r, ['adoration'])

    _, r = self.anagrams2.get_anagrams("adore")
    self.assertEqual(r, ['adore'])

    _, r = self.anagrams2.get_anagrams("adored")
    self.assertEqual(r, ['adored'])

    _, r = self.anagrams2.get_anagrams("adores")
    self.assertEqual(r, ['adores', 'soared'])

    _, r = self.anagrams2.get_anagrams("adorn")
    self.assertEqual(r, ['adorn', 'radon'])

    _, r = self.anagrams2.get_anagrams("adorned")
    self.assertEqual(r, ['adorned'])

    _, r = self.anagrams2.get_anagrams("adornment")
    self.assertEqual(r, ['adornment'])

    _, r = self.anagrams2.get_anagrams("adornments")
    self.assertEqual(r, ['adornments'])

    _, r = self.anagrams2.get_anagrams("adorns")
    self.assertEqual(r, ['adorns'])

    _, r = self.anagrams2.get_anagrams("adrenal")
    self.assertEqual(r, ['adrenal'])

    _, r = self.anagrams2.get_anagrams("adrenaline")
    self.assertEqual(r, ['adrenaline'])

    _, r = self.anagrams2.get_anagrams("adrian")
    self.assertEqual(r, ['adrian', 'radian'])

    _, r = self.anagrams2.get_anagrams("adriatic")
    self.assertEqual(r, ['adriatic'])

    _, r = self.anagrams2.get_anagrams("adrienne")
    self.assertEqual(r, ['adrienne'])

    _, r = self.anagrams2.get_anagrams("adrift")
    self.assertEqual(r, ['adrift'])

    _, r = self.anagrams2.get_anagrams("adroit")
    self.assertEqual(r, ['adroit'])

    _, r = self.anagrams2.get_anagrams("adroitness")
    self.assertEqual(r, ['adroitness'])

    _, r = self.anagrams2.get_anagrams("ads")
    self.assertEqual(r, ['ads', 'sad'])

    _, r = self.anagrams2.get_anagrams("adsorb")
    self.assertEqual(r, ['adsorb', 'boards'])

    _, r = self.anagrams2.get_anagrams("adsorbed")
    self.assertEqual(r, ['adsorbed'])

    _, r = self.anagrams2.get_anagrams("adsorbing")
    self.assertEqual(r, ['adsorbing'])

    _, r = self.anagrams2.get_anagrams("adsorbs")
    self.assertEqual(r, ['adsorbs'])

    _, r = self.anagrams2.get_anagrams("adsorption")
    self.assertEqual(r, ['adsorption'])

    _, r = self.anagrams2.get_anagrams("adulate")
    self.assertEqual(r, ['adulate'])

    _, r = self.anagrams2.get_anagrams("adulating")
    self.assertEqual(r, ['adulating'])

    _, r = self.anagrams2.get_anagrams("adulation")
    self.assertEqual(r, ['adulation'])

    _, r = self.anagrams2.get_anagrams("adult")
    self.assertEqual(r, ['adult'])

    _, r = self.anagrams2.get_anagrams("adulterate")
    self.assertEqual(r, ['adulterate'])

    _, r = self.anagrams2.get_anagrams("adulterated")
    self.assertEqual(r, ['adulterated'])

    _, r = self.anagrams2.get_anagrams("adulterates")
    self.assertEqual(r, ['adulterates'])

    _, r = self.anagrams2.get_anagrams("adulterating")
    self.assertEqual(r, ['adulterating'])

    _, r = self.anagrams2.get_anagrams("adulterer")
    self.assertEqual(r, ['adulterer'])

    _, r = self.anagrams2.get_anagrams("adulterers")
    self.assertEqual(r, ['adulterers'])

    _, r = self.anagrams2.get_anagrams("adulterous")
    self.assertEqual(r, ['adulterous'])

    _, r = self.anagrams2.get_anagrams("adulterously")
    self.assertEqual(r, ['adulterously'])

    _, r = self.anagrams2.get_anagrams("adultery")
    self.assertEqual(r, ['adultery'])

    _, r = self.anagrams2.get_anagrams("adulthood")
    self.assertEqual(r, ['adulthood'])

    _, r = self.anagrams2.get_anagrams("adults")
    self.assertEqual(r, ['adults'])

    _, r = self.anagrams2.get_anagrams("adumbrate")
    self.assertEqual(r, ['adumbrate'])

    _, r = self.anagrams2.get_anagrams("adumbrated")
    self.assertEqual(r, ['adumbrated'])

    _, r = self.anagrams2.get_anagrams("adumbrates")
    self.assertEqual(r, ['adumbrates'])

    _, r = self.anagrams2.get_anagrams("adumbrating")
    self.assertEqual(r, ['adumbrating'])

    _, r = self.anagrams2.get_anagrams("adumbration")
    self.assertEqual(r, ['adumbration'])

    _, r = self.anagrams2.get_anagrams("advance")
    self.assertEqual(r, ['advance'])

    _, r = self.anagrams2.get_anagrams("advanced")
    self.assertEqual(r, ['advanced'])

    _, r = self.anagrams2.get_anagrams("advancement")
    self.assertEqual(r, ['advancement'])

    _, r = self.anagrams2.get_anagrams("advancements")
    self.assertEqual(r, ['advancements'])

    _, r = self.anagrams2.get_anagrams("advances")
    self.assertEqual(r, ['advances'])

    _, r = self.anagrams2.get_anagrams("advancing")
    self.assertEqual(r, ['advancing'])

    _, r = self.anagrams2.get_anagrams("advantage")
    self.assertEqual(r, ['advantage'])

    _, r = self.anagrams2.get_anagrams("advantaged")
    self.assertEqual(r, ['advantaged'])

    _, r = self.anagrams2.get_anagrams("advantageous")
    self.assertEqual(r, ['advantageous'])

    _, r = self.anagrams2.get_anagrams("advantageously")
    self.assertEqual(r, ['advantageously'])

    _, r = self.anagrams2.get_anagrams("advantages")
    self.assertEqual(r, ['advantages'])

    _, r = self.anagrams2.get_anagrams("advent")
    self.assertEqual(r, ['advent'])

    _, r = self.anagrams2.get_anagrams("adventist")
    self.assertEqual(r, ['adventist'])

    _, r = self.anagrams2.get_anagrams("adventists")
    self.assertEqual(r, ['adventists'])

    _, r = self.anagrams2.get_anagrams("adventitious")
    self.assertEqual(r, ['adventitious'])

    _, r = self.anagrams2.get_anagrams("adventure")
    self.assertEqual(r, ['adventure'])

    _, r = self.anagrams2.get_anagrams("adventured")
    self.assertEqual(r, ['adventured'])

    _, r = self.anagrams2.get_anagrams("adventurer")
    self.assertEqual(r, ['adventurer'])

    _, r = self.anagrams2.get_anagrams("adventurers")
    self.assertEqual(r, ['adventurers'])

    _, r = self.anagrams2.get_anagrams("adventures")
    self.assertEqual(r, ['adventures'])

    _, r = self.anagrams2.get_anagrams("adventuring")
    self.assertEqual(r, ['adventuring'])

    _, r = self.anagrams2.get_anagrams("adventurous")
    self.assertEqual(r, ['adventurous'])

    _, r = self.anagrams2.get_anagrams("adverb")
    self.assertEqual(r, ['adverb', 'braved'])

    _, r = self.anagrams2.get_anagrams("adverbial")
    self.assertEqual(r, ['adverbial'])

    _, r = self.anagrams2.get_anagrams("adverbs")
    self.assertEqual(r, ['adverbs'])

    _, r = self.anagrams2.get_anagrams("adversaries")
    self.assertEqual(r, ['adversaries'])

    _, r = self.anagrams2.get_anagrams("adversary")
    self.assertEqual(r, ['adversary'])

    _, r = self.anagrams2.get_anagrams("adverse")
    self.assertEqual(r, ['adverse'])

    _, r = self.anagrams2.get_anagrams("adversely")
    self.assertEqual(r, ['adversely'])

    _, r = self.anagrams2.get_anagrams("adversities")
    self.assertEqual(r, ['adversities'])

    _, r = self.anagrams2.get_anagrams("adversity")
    self.assertEqual(r, ['adversity'])

    _, r = self.anagrams2.get_anagrams("advert")
    self.assertEqual(r, ['advert'])

    _, r = self.anagrams2.get_anagrams("advertise")
    self.assertEqual(r, ['advertise'])

    _, r = self.anagrams2.get_anagrams("advertised")
    self.assertEqual(r, ['advertised'])

    _, r = self.anagrams2.get_anagrams("advertisement")
    self.assertEqual(r, ['advertisement'])

    _, r = self.anagrams2.get_anagrams("advertisements")
    self.assertEqual(r, ['advertisements'])

    _, r = self.anagrams2.get_anagrams("advertiser")
    self.assertEqual(r, ['advertiser'])

    _, r = self.anagrams2.get_anagrams("advertisers")
    self.assertEqual(r, ['advertisers'])

    _, r = self.anagrams2.get_anagrams("advertises")
    self.assertEqual(r, ['advertises'])

    _, r = self.anagrams2.get_anagrams("advertising")
    self.assertEqual(r, ['advertising'])

    _, r = self.anagrams2.get_anagrams("advice")
    self.assertEqual(r, ['advice'])

    _, r = self.anagrams2.get_anagrams("advisability")
    self.assertEqual(r, ['advisability'])

    _, r = self.anagrams2.get_anagrams("advisable")
    self.assertEqual(r, ['advisable'])

    _, r = self.anagrams2.get_anagrams("advisably")
    self.assertEqual(r, ['advisably'])

    _, r = self.anagrams2.get_anagrams("advise")
    self.assertEqual(r, ['advise', 'davies'])

    _, r = self.anagrams2.get_anagrams("advised")
    self.assertEqual(r, ['advised'])

    _, r = self.anagrams2.get_anagrams("advisedly")
    self.assertEqual(r, ['advisedly'])

    _, r = self.anagrams2.get_anagrams("advisee")
    self.assertEqual(r, ['advisee'])

    _, r = self.anagrams2.get_anagrams("advisees")
    self.assertEqual(r, ['advisees'])

    _, r = self.anagrams2.get_anagrams("advisement")
    self.assertEqual(r, ['advisement'])

    _, r = self.anagrams2.get_anagrams("advisements")
    self.assertEqual(r, ['advisements'])

    _, r = self.anagrams2.get_anagrams("adviser")
    self.assertEqual(r, ['adviser'])

    _, r = self.anagrams2.get_anagrams("advisers")
    self.assertEqual(r, ['advisers'])

    _, r = self.anagrams2.get_anagrams("advises")
    self.assertEqual(r, ['advises'])

    _, r = self.anagrams2.get_anagrams("advising")
    self.assertEqual(r, ['advising'])

    _, r = self.anagrams2.get_anagrams("advisor")
    self.assertEqual(r, ['advisor'])

    _, r = self.anagrams2.get_anagrams("advisors")
    self.assertEqual(r, ['advisors'])

    _, r = self.anagrams2.get_anagrams("advisory")
    self.assertEqual(r, ['advisory'])

    _, r = self.anagrams2.get_anagrams("advocacy")
    self.assertEqual(r, ['advocacy'])

    _, r = self.anagrams2.get_anagrams("advocate")
    self.assertEqual(r, ['advocate'])

    _, r = self.anagrams2.get_anagrams("advocated")
    self.assertEqual(r, ['advocated'])

    _, r = self.anagrams2.get_anagrams("advocates")
    self.assertEqual(r, ['advocates'])

    _, r = self.anagrams2.get_anagrams("advocating")
    self.assertEqual(r, ['advocating'])

    _, r = self.anagrams2.get_anagrams("aegean")
    self.assertEqual(r, ['aegean'])

    _, r = self.anagrams2.get_anagrams("aegis")
    self.assertEqual(r, ['aegis'])

    _, r = self.anagrams2.get_anagrams("aeneas")
    self.assertEqual(r, ['aeneas'])

    _, r = self.anagrams2.get_anagrams("aeneid")
    self.assertEqual(r, ['aeneid'])

    _, r = self.anagrams2.get_anagrams("aeolus")
    self.assertEqual(r, ['aeolus'])

    _, r = self.anagrams2.get_anagrams("aerate")
    self.assertEqual(r, ['aerate'])

    _, r = self.anagrams2.get_anagrams("aerated")
    self.assertEqual(r, ['aerated'])

    _, r = self.anagrams2.get_anagrams("aerates")
    self.assertEqual(r, ['aerates'])

    _, r = self.anagrams2.get_anagrams("aerating")
    self.assertEqual(r, ['aerating'])

    _, r = self.anagrams2.get_anagrams("aeration")
    self.assertEqual(r, ['aeration'])

    _, r = self.anagrams2.get_anagrams("aerator")
    self.assertEqual(r, ['aerator'])

    _, r = self.anagrams2.get_anagrams("aerators")
    self.assertEqual(r, ['aerators'])

    _, r = self.anagrams2.get_anagrams("aerial")
    self.assertEqual(r, ['aerial'])

    _, r = self.anagrams2.get_anagrams("aerials")
    self.assertEqual(r, ['aerials'])

    _, r = self.anagrams2.get_anagrams("aeroacoustic")
    self.assertEqual(r, ['aeroacoustic'])

    _, r = self.anagrams2.get_anagrams("aerobacter")
    self.assertEqual(r, ['aerobacter'])

    _, r = self.anagrams2.get_anagrams("aerobic")
    self.assertEqual(r, ['aerobic'])

    _, r = self.anagrams2.get_anagrams("aerobics")
    self.assertEqual(r, ['aerobics'])

    _, r = self.anagrams2.get_anagrams("aerodynamic")
    self.assertEqual(r, ['aerodynamic'])

    _, r = self.anagrams2.get_anagrams("aerodynamics")
    self.assertEqual(r, ['aerodynamics'])

    _, r = self.anagrams2.get_anagrams("aeronautic")
    self.assertEqual(r, ['aeronautic'])

    _, r = self.anagrams2.get_anagrams("aeronautical")
    self.assertEqual(r, ['aeronautical'])

    _, r = self.anagrams2.get_anagrams("aeronautics")
    self.assertEqual(r, ['aeronautics'])

    _, r = self.anagrams2.get_anagrams("aerosol")
    self.assertEqual(r, ['aerosol'])

    _, r = self.anagrams2.get_anagrams("aerosolize")
    self.assertEqual(r, ['aerosolize'])

    _, r = self.anagrams2.get_anagrams("aerosols")
    self.assertEqual(r, ['aerosols'])

    _, r = self.anagrams2.get_anagrams("aerospace")
    self.assertEqual(r, ['aerospace'])

    _, r = self.anagrams2.get_anagrams("aeschylus")
    self.assertEqual(r, ['aeschylus'])

    _, r = self.anagrams2.get_anagrams("aesop")
    self.assertEqual(r, ['aesop'])

    _, r = self.anagrams2.get_anagrams("aesthetic")
    self.assertEqual(r, ['aesthetic'])

    _, r = self.anagrams2.get_anagrams("aesthetically")
    self.assertEqual(r, ['aesthetically'])

    _, r = self.anagrams2.get_anagrams("aesthetics")
    self.assertEqual(r, ['aesthetics'])

    _, r = self.anagrams2.get_anagrams("afar")
    self.assertEqual(r, ['afar'])

    _, r = self.anagrams2.get_anagrams("affable")
    self.assertEqual(r, ['affable'])

    _, r = self.anagrams2.get_anagrams("affair")
    self.assertEqual(r, ['affair'])

    _, r = self.anagrams2.get_anagrams("affairs")
    self.assertEqual(r, ['affairs'])

    _, r = self.anagrams2.get_anagrams("affect")
    self.assertEqual(r, ['affect'])

    _, r = self.anagrams2.get_anagrams("affectation")
    self.assertEqual(r, ['affectation'])

    _, r = self.anagrams2.get_anagrams("affectations")
    self.assertEqual(r, ['affectations'])

    _, r = self.anagrams2.get_anagrams("affected")
    self.assertEqual(r, ['affected'])

    _, r = self.anagrams2.get_anagrams("affecting")
    self.assertEqual(r, ['affecting'])

    _, r = self.anagrams2.get_anagrams("affectingly")
    self.assertEqual(r, ['affectingly'])

    _, r = self.anagrams2.get_anagrams("affection")
    self.assertEqual(r, ['affection'])

    _, r = self.anagrams2.get_anagrams("affectionate")
    self.assertEqual(r, ['affectionate'])

    _, r = self.anagrams2.get_anagrams("affectionately")
    self.assertEqual(r, ['affectionately'])

    _, r = self.anagrams2.get_anagrams("affections")
    self.assertEqual(r, ['affections'])

    _, r = self.anagrams2.get_anagrams("affective")
    self.assertEqual(r, ['affective'])

    _, r = self.anagrams2.get_anagrams("affects")
    self.assertEqual(r, ['affects'])

    _, r = self.anagrams2.get_anagrams("afferent")
    self.assertEqual(r, ['afferent'])

    _, r = self.anagrams2.get_anagrams("affianced")
    self.assertEqual(r, ['affianced'])

    _, r = self.anagrams2.get_anagrams("affidavit")
    self.assertEqual(r, ['affidavit'])

    _, r = self.anagrams2.get_anagrams("affidavits")
    self.assertEqual(r, ['affidavits'])

    _, r = self.anagrams2.get_anagrams("affiliate")
    self.assertEqual(r, ['affiliate'])

    _, r = self.anagrams2.get_anagrams("affiliated")
    self.assertEqual(r, ['affiliated'])

    _, r = self.anagrams2.get_anagrams("affiliates")
    self.assertEqual(r, ['affiliates'])

    _, r = self.anagrams2.get_anagrams("affiliating")
    self.assertEqual(r, ['affiliating'])

    _, r = self.anagrams2.get_anagrams("affiliation")
    self.assertEqual(r, ['affiliation'])

    _, r = self.anagrams2.get_anagrams("affiliations")
    self.assertEqual(r, ['affiliations'])

    _, r = self.anagrams2.get_anagrams("affinities")
    self.assertEqual(r, ['affinities'])

    _, r = self.anagrams2.get_anagrams("affinity")
    self.assertEqual(r, ['affinity'])

    _, r = self.anagrams2.get_anagrams("affirm")
    self.assertEqual(r, ['affirm'])

    _, r = self.anagrams2.get_anagrams("affirmation")
    self.assertEqual(r, ['affirmation'])

    _, r = self.anagrams2.get_anagrams("affirmations")
    self.assertEqual(r, ['affirmations'])

    _, r = self.anagrams2.get_anagrams("affirmative")
    self.assertEqual(r, ['affirmative'])

    _, r = self.anagrams2.get_anagrams("affirmatively")
    self.assertEqual(r, ['affirmatively'])

    _, r = self.anagrams2.get_anagrams("affirmed")
    self.assertEqual(r, ['affirmed'])

    _, r = self.anagrams2.get_anagrams("affirming")
    self.assertEqual(r, ['affirming'])

    _, r = self.anagrams2.get_anagrams("affirms")
    self.assertEqual(r, ['affirms'])

    _, r = self.anagrams2.get_anagrams("affix")
    self.assertEqual(r, ['affix'])

    _, r = self.anagrams2.get_anagrams("affixed")
    self.assertEqual(r, ['affixed'])

    _, r = self.anagrams2.get_anagrams("affixes")
    self.assertEqual(r, ['affixes'])

    _, r = self.anagrams2.get_anagrams("affixing")
    self.assertEqual(r, ['affixing'])

    _, r = self.anagrams2.get_anagrams("afflict")
    self.assertEqual(r, ['afflict'])

    _, r = self.anagrams2.get_anagrams("afflicted")
    self.assertEqual(r, ['afflicted'])

    _, r = self.anagrams2.get_anagrams("afflicting")
    self.assertEqual(r, ['afflicting'])

    _, r = self.anagrams2.get_anagrams("affliction")
    self.assertEqual(r, ['affliction'])

    _, r = self.anagrams2.get_anagrams("afflictions")
    self.assertEqual(r, ['afflictions'])

    _, r = self.anagrams2.get_anagrams("afflictive")
    self.assertEqual(r, ['afflictive'])

    _, r = self.anagrams2.get_anagrams("afflicts")
    self.assertEqual(r, ['afflicts'])

    _, r = self.anagrams2.get_anagrams("affluence")
    self.assertEqual(r, ['affluence'])

    _, r = self.anagrams2.get_anagrams("affluent")
    self.assertEqual(r, ['affluent'])

    _, r = self.anagrams2.get_anagrams("afford")
    self.assertEqual(r, ['afford'])

    _, r = self.anagrams2.get_anagrams("affordable")
    self.assertEqual(r, ['affordable'])

    _, r = self.anagrams2.get_anagrams("afforded")
    self.assertEqual(r, ['afforded'])

    _, r = self.anagrams2.get_anagrams("affording")
    self.assertEqual(r, ['affording'])

    _, r = self.anagrams2.get_anagrams("affords")
    self.assertEqual(r, ['affords'])

    _, r = self.anagrams2.get_anagrams("affricate")
    self.assertEqual(r, ['affricate'])

    _, r = self.anagrams2.get_anagrams("affricates")
    self.assertEqual(r, ['affricates'])

    _, r = self.anagrams2.get_anagrams("affright")
    self.assertEqual(r, ['affright'])

    _, r = self.anagrams2.get_anagrams("affront")
    self.assertEqual(r, ['affront'])

    _, r = self.anagrams2.get_anagrams("affronted")
    self.assertEqual(r, ['affronted'])

    _, r = self.anagrams2.get_anagrams("affronting")
    self.assertEqual(r, ['affronting'])

    _, r = self.anagrams2.get_anagrams("affronts")
    self.assertEqual(r, ['affronts'])

    _, r = self.anagrams2.get_anagrams("afghan")
    self.assertEqual(r, ['afghan'])

    _, r = self.anagrams2.get_anagrams("afghanistan")
    self.assertEqual(r, ['afghanistan'])

    _, r = self.anagrams2.get_anagrams("afghans")
    self.assertEqual(r, ['afghans'])

    _, r = self.anagrams2.get_anagrams("aficionado")
    self.assertEqual(r, ['aficionado'])

    _, r = self.anagrams2.get_anagrams("afield")
    self.assertEqual(r, ['afield', 'failed'])

    _, r = self.anagrams2.get_anagrams("afire")
    self.assertEqual(r, ['afire'])

    _, r = self.anagrams2.get_anagrams("aflame")
    self.assertEqual(r, ['aflame'])

    _, r = self.anagrams2.get_anagrams("afloat")
    self.assertEqual(r, ['afloat'])

    _, r = self.anagrams2.get_anagrams("afoot")
    self.assertEqual(r, ['afoot'])

    _, r = self.anagrams2.get_anagrams("afore")
    self.assertEqual(r, ['afore'])

    _, r = self.anagrams2.get_anagrams("aforementioned")
    self.assertEqual(r, ['aforementioned'])

    _, r = self.anagrams2.get_anagrams("aforesaid")
    self.assertEqual(r, ['aforesaid'])

    _, r = self.anagrams2.get_anagrams("aforethought")
    self.assertEqual(r, ['aforethought'])

    _, r = self.anagrams2.get_anagrams("afoul")
    self.assertEqual(r, ['afoul'])

    _, r = self.anagrams2.get_anagrams("afraid")
    self.assertEqual(r, ['afraid'])

    _, r = self.anagrams2.get_anagrams("afresh")
    self.assertEqual(r, ['afresh', 'shafer'])

    _, r = self.anagrams2.get_anagrams("africa")
    self.assertEqual(r, ['africa'])

    _, r = self.anagrams2.get_anagrams("african")
    self.assertEqual(r, ['african'])

    _, r = self.anagrams2.get_anagrams("africanization")
    self.assertEqual(r, ['africanization'])

    _, r = self.anagrams2.get_anagrams("africanizations")
    self.assertEqual(r, ['africanizations'])

    _, r = self.anagrams2.get_anagrams("africanize")
    self.assertEqual(r, ['africanize'])

    _, r = self.anagrams2.get_anagrams("africanized")
    self.assertEqual(r, ['africanized'])

    _, r = self.anagrams2.get_anagrams("africanizes")
    self.assertEqual(r, ['africanizes'])

    _, r = self.anagrams2.get_anagrams("africanizing")
    self.assertEqual(r, ['africanizing'])

    _, r = self.anagrams2.get_anagrams("africans")
    self.assertEqual(r, ['africans'])

    _, r = self.anagrams2.get_anagrams("afrikaans")
    self.assertEqual(r, ['afrikaans'])

    _, r = self.anagrams2.get_anagrams("afrikaner")
    self.assertEqual(r, ['afrikaner'])

    _, r = self.anagrams2.get_anagrams("afrikaners")
    self.assertEqual(r, ['afrikaners'])

    _, r = self.anagrams2.get_anagrams("aft")
    self.assertEqual(r, ['aft', 'fat'])

    _, r = self.anagrams2.get_anagrams("after")
    self.assertEqual(r, ['after'])

    _, r = self.anagrams2.get_anagrams("aftereffect")
    self.assertEqual(r, ['aftereffect'])

    _, r = self.anagrams2.get_anagrams("afterglow")
    self.assertEqual(r, ['afterglow'])

    _, r = self.anagrams2.get_anagrams("afterimage")
    self.assertEqual(r, ['afterimage'])

    _, r = self.anagrams2.get_anagrams("afterlife")
    self.assertEqual(r, ['afterlife'])

    _, r = self.anagrams2.get_anagrams("aftermath")
    self.assertEqual(r, ['aftermath'])

    _, r = self.anagrams2.get_anagrams("aftermost")
    self.assertEqual(r, ['aftermost'])

    _, r = self.anagrams2.get_anagrams("afternoon")
    self.assertEqual(r, ['afternoon'])

    _, r = self.anagrams2.get_anagrams("afternoons")
    self.assertEqual(r, ['afternoons'])

    _, r = self.anagrams2.get_anagrams("aftershock")
    self.assertEqual(r, ['aftershock'])

    _, r = self.anagrams2.get_anagrams("aftershocks")
    self.assertEqual(r, ['aftershocks'])

    _, r = self.anagrams2.get_anagrams("afterthought")
    self.assertEqual(r, ['afterthought'])

    _, r = self.anagrams2.get_anagrams("afterthoughts")
    self.assertEqual(r, ['afterthoughts'])

    _, r = self.anagrams2.get_anagrams("afterward")
    self.assertEqual(r, ['afterward'])

    _, r = self.anagrams2.get_anagrams("afterwards")
    self.assertEqual(r, ['afterwards'])

    _, r = self.anagrams2.get_anagrams("again")
    self.assertEqual(r, ['again'])

    _, r = self.anagrams2.get_anagrams("against")
    self.assertEqual(r, ['against'])

    _, r = self.anagrams2.get_anagrams("agamemnon")
    self.assertEqual(r, ['agamemnon'])

    _, r = self.anagrams2.get_anagrams("agape")
    self.assertEqual(r, ['agape'])

    _, r = self.anagrams2.get_anagrams("agar")
    self.assertEqual(r, ['agar'])

    _, r = self.anagrams2.get_anagrams("agate")
    self.assertEqual(r, ['agate'])

    _, r = self.anagrams2.get_anagrams("agates")
    self.assertEqual(r, ['agates'])

    _, r = self.anagrams2.get_anagrams("agatha")
    self.assertEqual(r, ['agatha'])

    _, r = self.anagrams2.get_anagrams("age")
    self.assertEqual(r, ['age'])

    _, r = self.anagrams2.get_anagrams("aged")
    self.assertEqual(r, ['aged'])

    _, r = self.anagrams2.get_anagrams("agee")
    self.assertEqual(r, ['agee'])

    _, r = self.anagrams2.get_anagrams("ageless")
    self.assertEqual(r, ['ageless'])

    _, r = self.anagrams2.get_anagrams("agencies")
    self.assertEqual(r, ['agencies'])

    _, r = self.anagrams2.get_anagrams("agency")
    self.assertEqual(r, ['agency'])

    _, r = self.anagrams2.get_anagrams("agenda")
    self.assertEqual(r, ['agenda'])

    _, r = self.anagrams2.get_anagrams("agendas")
    self.assertEqual(r, ['agendas'])

    _, r = self.anagrams2.get_anagrams("agent")
    self.assertEqual(r, ['agent'])

    _, r = self.anagrams2.get_anagrams("agents")
    self.assertEqual(r, ['agents'])

    _, r = self.anagrams2.get_anagrams("ager")
    self.assertEqual(r, ['ager', 'gear', 'rage'])

    _, r = self.anagrams2.get_anagrams("agers")
    self.assertEqual(r, ['agers', 'gears', 'rages'])

    _, r = self.anagrams2.get_anagrams("ages")
    self.assertEqual(r, ['ages', 'sage'])

    _, r = self.anagrams2.get_anagrams("aggie")
    self.assertEqual(r, ['aggie'])

    _, r = self.anagrams2.get_anagrams("aggies")
    self.assertEqual(r, ['aggies'])

    _, r = self.anagrams2.get_anagrams("agglomerate")
    self.assertEqual(r, ['agglomerate'])

    _, r = self.anagrams2.get_anagrams("agglomerated")
    self.assertEqual(r, ['agglomerated'])

    _, r = self.anagrams2.get_anagrams("agglomerates")
    self.assertEqual(r, ['agglomerates'])

    _, r = self.anagrams2.get_anagrams("agglomeration")
    self.assertEqual(r, ['agglomeration'])

    _, r = self.anagrams2.get_anagrams("agglutinate")
    self.assertEqual(r, ['agglutinate'])

    _, r = self.anagrams2.get_anagrams("agglutinated")
    self.assertEqual(r, ['agglutinated'])

    _, r = self.anagrams2.get_anagrams("agglutinates")
    self.assertEqual(r, ['agglutinates'])

    _, r = self.anagrams2.get_anagrams("agglutinating")
    self.assertEqual(r, ['agglutinating'])

    _, r = self.anagrams2.get_anagrams("agglutination")
    self.assertEqual(r, ['agglutination'])

    _, r = self.anagrams2.get_anagrams("agglutinin")
    self.assertEqual(r, ['agglutinin'])

    _, r = self.anagrams2.get_anagrams("agglutinins")
    self.assertEqual(r, ['agglutinins'])

    _, r = self.anagrams2.get_anagrams("aggrandize")
    self.assertEqual(r, ['aggrandize'])

    _, r = self.anagrams2.get_anagrams("aggravate")
    self.assertEqual(r, ['aggravate'])

    _, r = self.anagrams2.get_anagrams("aggravated")
    self.assertEqual(r, ['aggravated'])

    _, r = self.anagrams2.get_anagrams("aggravates")
    self.assertEqual(r, ['aggravates'])

    _, r = self.anagrams2.get_anagrams("aggravation")
    self.assertEqual(r, ['aggravation'])

    _, r = self.anagrams2.get_anagrams("aggregate")
    self.assertEqual(r, ['aggregate'])

    _, r = self.anagrams2.get_anagrams("aggregated")
    self.assertEqual(r, ['aggregated'])

    _, r = self.anagrams2.get_anagrams("aggregately")
    self.assertEqual(r, ['aggregately'])

    _, r = self.anagrams2.get_anagrams("aggregates")
    self.assertEqual(r, ['aggregates'])

    _, r = self.anagrams2.get_anagrams("aggregating")
    self.assertEqual(r, ['aggregating'])

    _, r = self.anagrams2.get_anagrams("aggregation")
    self.assertEqual(r, ['aggregation'])

    _, r = self.anagrams2.get_anagrams("aggregations")
    self.assertEqual(r, ['aggregations'])

    _, r = self.anagrams2.get_anagrams("aggression")
    self.assertEqual(r, ['aggression'])

    _, r = self.anagrams2.get_anagrams("aggressions")
    self.assertEqual(r, ['aggressions'])

    _, r = self.anagrams2.get_anagrams("aggressive")
    self.assertEqual(r, ['aggressive'])

    _, r = self.anagrams2.get_anagrams("aggressively")
    self.assertEqual(r, ['aggressively'])

    _, r = self.anagrams2.get_anagrams("aggressiveness")
    self.assertEqual(r, ['aggressiveness'])

    _, r = self.anagrams2.get_anagrams("aggressor")
    self.assertEqual(r, ['aggressor'])

    _, r = self.anagrams2.get_anagrams("aggressors")
    self.assertEqual(r, ['aggressors'])

    _, r = self.anagrams2.get_anagrams("aggrieve")
    self.assertEqual(r, ['aggrieve'])

    _, r = self.anagrams2.get_anagrams("aggrieved")
    self.assertEqual(r, ['aggrieved'])

    _, r = self.anagrams2.get_anagrams("aggrieves")
    self.assertEqual(r, ['aggrieves'])

    _, r = self.anagrams2.get_anagrams("aggrieving")
    self.assertEqual(r, ['aggrieving'])

    _, r = self.anagrams2.get_anagrams("aghast")
    self.assertEqual(r, ['aghast'])

    _, r = self.anagrams2.get_anagrams("agile")
    self.assertEqual(r, ['agile'])

    _, r = self.anagrams2.get_anagrams("agilely")
    self.assertEqual(r, ['agilely'])

    _, r = self.anagrams2.get_anagrams("agility")
    self.assertEqual(r, ['agility'])

    _, r = self.anagrams2.get_anagrams("aging")
    self.assertEqual(r, ['aging'])

    _, r = self.anagrams2.get_anagrams("agitate")
    self.assertEqual(r, ['agitate'])

    _, r = self.anagrams2.get_anagrams("agitated")
    self.assertEqual(r, ['agitated'])

    _, r = self.anagrams2.get_anagrams("agitates")
    self.assertEqual(r, ['agitates'])

    _, r = self.anagrams2.get_anagrams("agitating")
    self.assertEqual(r, ['agitating'])

    _, r = self.anagrams2.get_anagrams("agitation")
    self.assertEqual(r, ['agitation'])

    _, r = self.anagrams2.get_anagrams("agitations")
    self.assertEqual(r, ['agitations'])

    _, r = self.anagrams2.get_anagrams("agitator")
    self.assertEqual(r, ['agitator'])

    _, r = self.anagrams2.get_anagrams("agitators")
    self.assertEqual(r, ['agitators'])

    _, r = self.anagrams2.get_anagrams("agleam")
    self.assertEqual(r, ['agleam'])

    _, r = self.anagrams2.get_anagrams("aglow")
    self.assertEqual(r, ['aglow'])

    _, r = self.anagrams2.get_anagrams("agnes")
    self.assertEqual(r, ['agnes'])

    _, r = self.anagrams2.get_anagrams("agnew")
    self.assertEqual(r, ['agnew'])

    _, r = self.anagrams2.get_anagrams("agnostic")
    self.assertEqual(r, ['agnostic', 'coasting', 'coatings'])

    _, r = self.anagrams2.get_anagrams("agnostics")
    self.assertEqual(r, ['agnostics'])

    _, r = self.anagrams2.get_anagrams("ago")
    self.assertEqual(r, ['ago', 'goa'])

    _, r = self.anagrams2.get_anagrams("agog")
    self.assertEqual(r, ['agog'])

    _, r = self.anagrams2.get_anagrams("agonies")
    self.assertEqual(r, ['agonies'])

    _, r = self.anagrams2.get_anagrams("agonize")
    self.assertEqual(r, ['agonize'])

    _, r = self.anagrams2.get_anagrams("agonized")
    self.assertEqual(r, ['agonized'])

    _, r = self.anagrams2.get_anagrams("agonizes")
    self.assertEqual(r, ['agonizes'])

    _, r = self.anagrams2.get_anagrams("agonizing")
    self.assertEqual(r, ['agonizing'])

    _, r = self.anagrams2.get_anagrams("agonizingly")
    self.assertEqual(r, ['agonizingly'])

    _, r = self.anagrams2.get_anagrams("agony")
    self.assertEqual(r, ['agony'])

    _, r = self.anagrams2.get_anagrams("agrarian")
    self.assertEqual(r, ['agrarian'])

    _, r = self.anagrams2.get_anagrams("agree")
    self.assertEqual(r, ['agree', 'eager'])

    _, r = self.anagrams2.get_anagrams("agreeable")
    self.assertEqual(r, ['agreeable'])

    _, r = self.anagrams2.get_anagrams("agreeably")
    self.assertEqual(r, ['agreeably'])

    _, r = self.anagrams2.get_anagrams("agreed")
    self.assertEqual(r, ['agreed', 'geared'])

    _, r = self.anagrams2.get_anagrams("agreeing")
    self.assertEqual(r, ['agreeing'])

    _, r = self.anagrams2.get_anagrams("agreement")
    self.assertEqual(r, ['agreement'])

    _, r = self.anagrams2.get_anagrams("agreements")
    self.assertEqual(r, ['agreements'])

    _, r = self.anagrams2.get_anagrams("agreer")
    self.assertEqual(r, ['agreer'])

    _, r = self.anagrams2.get_anagrams("agreers")
    self.assertEqual(r, ['agreers'])

    _, r = self.anagrams2.get_anagrams("agrees")
    self.assertEqual(r, ['agrees', 'grease'])

    _, r = self.anagrams2.get_anagrams("agricola")
    self.assertEqual(r, ['agricola'])

    _, r = self.anagrams2.get_anagrams("agricultural")
    self.assertEqual(r, ['agricultural'])

    _, r = self.anagrams2.get_anagrams("agriculturally")
    self.assertEqual(r, ['agriculturally'])

    _, r = self.anagrams2.get_anagrams("agriculture")
    self.assertEqual(r, ['agriculture'])

    _, r = self.anagrams2.get_anagrams("ague")
    self.assertEqual(r, ['ague'])

    _, r = self.anagrams2.get_anagrams("agway")
    self.assertEqual(r, ['agway'])

    _, r = self.anagrams2.get_anagrams("ah")
    self.assertEqual(r, ['ah', 'ha'])

    _, r = self.anagrams2.get_anagrams("ahead")
    self.assertEqual(r, ['ahead'])

    _, r = self.anagrams2.get_anagrams("ahmadabad")
    self.assertEqual(r, ['ahmadabad'])

    _, r = self.anagrams2.get_anagrams("ahmedabad")
    self.assertEqual(r, ['ahmedabad'])

    _, r = self.anagrams2.get_anagrams("aid")
    self.assertEqual(r, ['aid', 'ida'])

    _, r = self.anagrams2.get_anagrams("aida")
    self.assertEqual(r, ['aida'])

    _, r = self.anagrams2.get_anagrams("aide")
    self.assertEqual(r, ['aide', 'idea'])

    _, r = self.anagrams2.get_anagrams("aided")
    self.assertEqual(r, ['aided'])

    _, r = self.anagrams2.get_anagrams("aides")
    self.assertEqual(r, ['aides', 'aside', 'ideas', 'sadie'])

    _, r = self.anagrams2.get_anagrams("aiding")
    self.assertEqual(r, ['aiding'])

    _, r = self.anagrams2.get_anagrams("aids")
    self.assertEqual(r, ['aids', 'said'])

    _, r = self.anagrams2.get_anagrams("aiken")
    self.assertEqual(r, ['aiken'])

    _, r = self.anagrams2.get_anagrams("ail")
    self.assertEqual(r, ['ail', 'ali'])

    _, r = self.anagrams2.get_anagrams("aileen")
    self.assertEqual(r, ['aileen', 'elaine'])

    _, r = self.anagrams2.get_anagrams("aileron")
    self.assertEqual(r, ['aileron'])

    _, r = self.anagrams2.get_anagrams("ailerons")
    self.assertEqual(r, ['ailerons'])

    _, r = self.anagrams2.get_anagrams("ailing")
    self.assertEqual(r, ['ailing'])

    _, r = self.anagrams2.get_anagrams("ailment")
    self.assertEqual(r, ['ailment', 'aliment'])

    _, r = self.anagrams2.get_anagrams("ailments")
    self.assertEqual(r, ['ailments', 'aliments'])

    _, r = self.anagrams2.get_anagrams("aim")
    self.assertEqual(r, ['aim'])

    _, r = self.anagrams2.get_anagrams("aimed")
    self.assertEqual(r, ['aimed', 'amide', 'media'])

    _, r = self.anagrams2.get_anagrams("aimer")
    self.assertEqual(r, ['aimer', 'maier', 'marie'])

    _, r = self.anagrams2.get_anagrams("aimers")
    self.assertEqual(r, ['aimers', 'armies'])

    _, r = self.anagrams2.get_anagrams("aiming")
    self.assertEqual(r, ['aiming'])

    _, r = self.anagrams2.get_anagrams("aimless")
    self.assertEqual(r, ['aimless', 'melissa'])

    _, r = self.anagrams2.get_anagrams("aimlessly")
    self.assertEqual(r, ['aimlessly'])

    _, r = self.anagrams2.get_anagrams("aims")
    self.assertEqual(r, ['aims', 'siam'])

    _, r = self.anagrams2.get_anagrams("ainu")
    self.assertEqual(r, ['ainu'])

    _, r = self.anagrams2.get_anagrams("ainus")
    self.assertEqual(r, ['ainus'])

    _, r = self.anagrams2.get_anagrams("air")
    self.assertEqual(r, ['air', 'ira'])

    _, r = self.anagrams2.get_anagrams("airbag")
    self.assertEqual(r, ['airbag'])

    _, r = self.anagrams2.get_anagrams("airbags")
    self.assertEqual(r, ['airbags'])

    _, r = self.anagrams2.get_anagrams("airborne")
    self.assertEqual(r, ['airborne'])

    _, r = self.anagrams2.get_anagrams("airbus")
    self.assertEqual(r, ['airbus'])

    _, r = self.anagrams2.get_anagrams("aircraft")
    self.assertEqual(r, ['aircraft'])

    _, r = self.anagrams2.get_anagrams("airdrop")
    self.assertEqual(r, ['airdrop'])

    _, r = self.anagrams2.get_anagrams("airdrops")
    self.assertEqual(r, ['airdrops'])

    _, r = self.anagrams2.get_anagrams("aired")
    self.assertEqual(r, ['aired'])

    _, r = self.anagrams2.get_anagrams("airedale")
    self.assertEqual(r, ['airedale'])

    _, r = self.anagrams2.get_anagrams("airer")
    self.assertEqual(r, ['airer'])

    _, r = self.anagrams2.get_anagrams("airers")
    self.assertEqual(r, ['airers', 'ariser', 'raiser', 'sierra'])

    _, r = self.anagrams2.get_anagrams("aires")
    self.assertEqual(r, ['aires', 'aries', 'arise', 'raise'])

    _, r = self.anagrams2.get_anagrams("airfare")
    self.assertEqual(r, ['airfare'])

    _, r = self.anagrams2.get_anagrams("airfield")
    self.assertEqual(r, ['airfield'])

    _, r = self.anagrams2.get_anagrams("airfields")
    self.assertEqual(r, ['airfields'])

    _, r = self.anagrams2.get_anagrams("airflow")
    self.assertEqual(r, ['airflow'])

    _, r = self.anagrams2.get_anagrams("airfoil")
    self.assertEqual(r, ['airfoil'])

    _, r = self.anagrams2.get_anagrams("airfoils")
    self.assertEqual(r, ['airfoils'])

    _, r = self.anagrams2.get_anagrams("airframe")
    self.assertEqual(r, ['airframe'])

    _, r = self.anagrams2.get_anagrams("airframes")
    self.assertEqual(r, ['airframes'])

    _, r = self.anagrams2.get_anagrams("airily")
    self.assertEqual(r, ['airily'])

    _, r = self.anagrams2.get_anagrams("airing")
    self.assertEqual(r, ['airing'])

    _, r = self.anagrams2.get_anagrams("airings")
    self.assertEqual(r, ['airings', 'arising', 'raising'])

    _, r = self.anagrams2.get_anagrams("airless")
    self.assertEqual(r, ['airless', 'serials'])

    _, r = self.anagrams2.get_anagrams("airlift")
    self.assertEqual(r, ['airlift'])

    _, r = self.anagrams2.get_anagrams("airlifts")
    self.assertEqual(r, ['airlifts'])

    _, r = self.anagrams2.get_anagrams("airline")
    self.assertEqual(r, ['airline'])

    _, r = self.anagrams2.get_anagrams("airliner")
    self.assertEqual(r, ['airliner'])

    _, r = self.anagrams2.get_anagrams("airlines")
    self.assertEqual(r, ['airlines'])

    _, r = self.anagrams2.get_anagrams("airlock")
    self.assertEqual(r, ['airlock'])

    _, r = self.anagrams2.get_anagrams("airlocks")
    self.assertEqual(r, ['airlocks'])

    _, r = self.anagrams2.get_anagrams("airmail")
    self.assertEqual(r, ['airmail'])

    _, r = self.anagrams2.get_anagrams("airmails")
    self.assertEqual(r, ['airmails'])

    _, r = self.anagrams2.get_anagrams("airman")
    self.assertEqual(r, ['airman', 'marina'])

    _, r = self.anagrams2.get_anagrams("airmen")
    self.assertEqual(r, ['airmen', 'marine', 'remain'])

    _, r = self.anagrams2.get_anagrams("airplane")
    self.assertEqual(r, ['airplane'])

    _, r = self.anagrams2.get_anagrams("airplanes")
    self.assertEqual(r, ['airplanes'])

    _, r = self.anagrams2.get_anagrams("airport")
    self.assertEqual(r, ['airport'])

    _, r = self.anagrams2.get_anagrams("airports")
    self.assertEqual(r, ['airports'])

    _, r = self.anagrams2.get_anagrams("airs")
    self.assertEqual(r, ['airs', 'sari'])

    _, r = self.anagrams2.get_anagrams("airship")
    self.assertEqual(r, ['airship'])

    _, r = self.anagrams2.get_anagrams("airships")
    self.assertEqual(r, ['airships'])

    _, r = self.anagrams2.get_anagrams("airspace")
    self.assertEqual(r, ['airspace'])

    _, r = self.anagrams2.get_anagrams("airspeed")
    self.assertEqual(r, ['airspeed'])

    _, r = self.anagrams2.get_anagrams("airstrip")
    self.assertEqual(r, ['airstrip'])

    _, r = self.anagrams2.get_anagrams("airstrips")
    self.assertEqual(r, ['airstrips'])

    _, r = self.anagrams2.get_anagrams("airtight")
    self.assertEqual(r, ['airtight'])

    _, r = self.anagrams2.get_anagrams("airway")
    self.assertEqual(r, ['airway'])

    _, r = self.anagrams2.get_anagrams("airways")
    self.assertEqual(r, ['airways'])

    _, r = self.anagrams2.get_anagrams("airy")
    self.assertEqual(r, ['airy'])

    _, r = self.anagrams2.get_anagrams("aisle")
    self.assertEqual(r, ['aisle'])

    _, r = self.anagrams2.get_anagrams("aitken")
    self.assertEqual(r, ['aitken'])

    _, r = self.anagrams2.get_anagrams("ajar")
    self.assertEqual(r, ['ajar'])

    _, r = self.anagrams2.get_anagrams("ajax")
    self.assertEqual(r, ['ajax'])

    _, r = self.anagrams2.get_anagrams("akers")
    self.assertEqual(r, ['akers', 'asker', 'rakes'])

    _, r = self.anagrams2.get_anagrams("akimbo")
    self.assertEqual(r, ['akimbo'])

    _, r = self.anagrams2.get_anagrams("akin")
    self.assertEqual(r, ['akin'])

    _, r = self.anagrams2.get_anagrams("akron")
    self.assertEqual(r, ['akron', 'koran'])

    _, r = self.anagrams2.get_anagrams("al")
    self.assertEqual(r, ['al'])

    _, r = self.anagrams2.get_anagrams("alabama")
    self.assertEqual(r, ['alabama'])

    _, r = self.anagrams2.get_anagrams("alabamans")
    self.assertEqual(r, ['alabamans'])

    _, r = self.anagrams2.get_anagrams("alabamian")
    self.assertEqual(r, ['alabamian'])

    _, r = self.anagrams2.get_anagrams("alabaster")
    self.assertEqual(r, ['alabaster'])

    _, r = self.anagrams2.get_anagrams("alacrity")
    self.assertEqual(r, ['alacrity'])

    _, r = self.anagrams2.get_anagrams("aladdin")
    self.assertEqual(r, ['aladdin'])

    _, r = self.anagrams2.get_anagrams("alameda")
    self.assertEqual(r, ['alameda'])

    _, r = self.anagrams2.get_anagrams("alamo")
    self.assertEqual(r, ['alamo'])

    _, r = self.anagrams2.get_anagrams("alamos")
    self.assertEqual(r, ['alamos'])

    _, r = self.anagrams2.get_anagrams("alan")
    self.assertEqual(r, ['alan', 'anal', 'lana'])

    _, r = self.anagrams2.get_anagrams("alar")
    self.assertEqual(r, ['alar'])

    _, r = self.anagrams2.get_anagrams("alarm")
    self.assertEqual(r, ['alarm', 'lamar'])

    _, r = self.anagrams2.get_anagrams("alarmed")
    self.assertEqual(r, ['alarmed'])

    _, r = self.anagrams2.get_anagrams("alarming")
    self.assertEqual(r, ['alarming', 'marginal'])

    _, r = self.anagrams2.get_anagrams("alarmingly")
    self.assertEqual(r, ['alarmingly', 'marginally'])

    _, r = self.anagrams2.get_anagrams("alarmist")
    self.assertEqual(r, ['alarmist'])

    _, r = self.anagrams2.get_anagrams("alarms")
    self.assertEqual(r, ['alarms'])

    _, r = self.anagrams2.get_anagrams("alas")
    self.assertEqual(r, ['alas'])

    _, r = self.anagrams2.get_anagrams("alaska")
    self.assertEqual(r, ['alaska'])

    _, r = self.anagrams2.get_anagrams("alaskan")
    self.assertEqual(r, ['alaskan'])

    _, r = self.anagrams2.get_anagrams("alastair")
    self.assertEqual(r, ['alastair'])

    _, r = self.anagrams2.get_anagrams("alba")
    self.assertEqual(r, ['alba'])

    _, r = self.anagrams2.get_anagrams("albacore")
    self.assertEqual(r, ['albacore'])

    _, r = self.anagrams2.get_anagrams("albania")
    self.assertEqual(r, ['albania'])

    _, r = self.anagrams2.get_anagrams("albanian")
    self.assertEqual(r, ['albanian'])

    _, r = self.anagrams2.get_anagrams("albanians")
    self.assertEqual(r, ['albanians'])

    _, r = self.anagrams2.get_anagrams("albany")
    self.assertEqual(r, ['albany'])

    _, r = self.anagrams2.get_anagrams("albatross")
    self.assertEqual(r, ['albatross'])

    _, r = self.anagrams2.get_anagrams("albeit")
    self.assertEqual(r, ['albeit'])

    _, r = self.anagrams2.get_anagrams("alberich")
    self.assertEqual(r, ['alberich'])

    _, r = self.anagrams2.get_anagrams("albert")
    self.assertEqual(r, ['albert'])

    _, r = self.anagrams2.get_anagrams("alberta")
    self.assertEqual(r, ['alberta'])

    _, r = self.anagrams2.get_anagrams("alberto")
    self.assertEqual(r, ['alberto', 'bloater', 'latrobe'])

    _, r = self.anagrams2.get_anagrams("albrecht")
    self.assertEqual(r, ['albrecht'])

    _, r = self.anagrams2.get_anagrams("albright")
    self.assertEqual(r, ['albright'])

    _, r = self.anagrams2.get_anagrams("album")
    self.assertEqual(r, ['album'])

    _, r = self.anagrams2.get_anagrams("albumin")
    self.assertEqual(r, ['albumin'])

    _, r = self.anagrams2.get_anagrams("albums")
    self.assertEqual(r, ['albums'])

    _, r = self.anagrams2.get_anagrams("albuquerque")
    self.assertEqual(r, ['albuquerque'])

    _, r = self.anagrams2.get_anagrams("alcestis")
    self.assertEqual(r, ['alcestis'])

    _, r = self.anagrams2.get_anagrams("alchemy")
    self.assertEqual(r, ['alchemy'])

    _, r = self.anagrams2.get_anagrams("alcibiades")
    self.assertEqual(r, ['alcibiades'])

    _, r = self.anagrams2.get_anagrams("alcmena")
    self.assertEqual(r, ['alcmena'])

    _, r = self.anagrams2.get_anagrams("alcoa")
    self.assertEqual(r, ['alcoa'])

    _, r = self.anagrams2.get_anagrams("alcohol")
    self.assertEqual(r, ['alcohol'])

    _, r = self.anagrams2.get_anagrams("alcoholic")
    self.assertEqual(r, ['alcoholic'])

    _, r = self.anagrams2.get_anagrams("alcoholics")
    self.assertEqual(r, ['alcoholics'])

    _, r = self.anagrams2.get_anagrams("alcoholism")
    self.assertEqual(r, ['alcoholism'])

    _, r = self.anagrams2.get_anagrams("alcohols")
    self.assertEqual(r, ['alcohols'])

    _, r = self.anagrams2.get_anagrams("alcott")
    self.assertEqual(r, ['alcott'])

    _, r = self.anagrams2.get_anagrams("alcove")
    self.assertEqual(r, ['alcove'])

    _, r = self.anagrams2.get_anagrams("alcoves")
    self.assertEqual(r, ['alcoves'])

    _, r = self.anagrams2.get_anagrams("aldebaran")
    self.assertEqual(r, ['aldebaran'])

    _, r = self.anagrams2.get_anagrams("alden")
    self.assertEqual(r, ['alden', 'laden'])

    _, r = self.anagrams2.get_anagrams("alder")
    self.assertEqual(r, ['adler', 'alder'])

    _, r = self.anagrams2.get_anagrams("alderman")
    self.assertEqual(r, ['alderman'])

    _, r = self.anagrams2.get_anagrams("aldermen")
    self.assertEqual(r, ['aldermen'])

    _, r = self.anagrams2.get_anagrams("aldrich")
    self.assertEqual(r, ['aldrich'])

    _, r = self.anagrams2.get_anagrams("ale")
    self.assertEqual(r, ['ale'])

    _, r = self.anagrams2.get_anagrams("alec")
    self.assertEqual(r, ['alec', 'lace'])

    _, r = self.anagrams2.get_anagrams("aleck")
    self.assertEqual(r, ['aleck'])

    _, r = self.anagrams2.get_anagrams("alee")
    self.assertEqual(r, ['alee'])

    _, r = self.anagrams2.get_anagrams("alert")
    self.assertEqual(r, ['alert', 'alter', 'later'])

    _, r = self.anagrams2.get_anagrams("alerted")
    self.assertEqual(r, ['alerted', 'altered', 'related'])

    _, r = self.anagrams2.get_anagrams("alertedly")
    self.assertEqual(r, ['alertedly'])

    _, r = self.anagrams2.get_anagrams("alerter")
    self.assertEqual(r, ['alerter', 'alterer', 'relater'])

    _, r = self.anagrams2.get_anagrams("alerters")
    self.assertEqual(r, ['alerters', 'alterers'])

    _, r = self.anagrams2.get_anagrams("alerting")
    self.assertEqual(r, ['alerting', 'altering', 'integral', 'relating', 'triangle'])

    _, r = self.anagrams2.get_anagrams("alertly")
    self.assertEqual(r, ['alertly'])

    _, r = self.anagrams2.get_anagrams("alertness")
    self.assertEqual(r, ['alertness'])

    _, r = self.anagrams2.get_anagrams("alerts")
    self.assertEqual(r, ['alerts', 'alters', 'salter', 'slater'])

    _, r = self.anagrams2.get_anagrams("aleut")
    self.assertEqual(r, ['aleut'])

    _, r = self.anagrams2.get_anagrams("aleutian")
    self.assertEqual(r, ['aleutian'])

    _, r = self.anagrams2.get_anagrams("alex")
    self.assertEqual(r, ['alex', 'axel', 'axle'])

    _, r = self.anagrams2.get_anagrams("alexander")
    self.assertEqual(r, ['alexander', 'alexandre'])

    _, r = self.anagrams2.get_anagrams("alexandra")
    self.assertEqual(r, ['alexandra'])

    _, r = self.anagrams2.get_anagrams("alexandre")
    self.assertEqual(r, ['alexander', 'alexandre'])

    _, r = self.anagrams2.get_anagrams("alexandria")
    self.assertEqual(r, ['alexandria'])

    _, r = self.anagrams2.get_anagrams("alexandrine")
    self.assertEqual(r, ['alexandrine'])

    _, r = self.anagrams2.get_anagrams("alexei")
    self.assertEqual(r, ['alexei'])

    _, r = self.anagrams2.get_anagrams("alexis")
    self.assertEqual(r, ['alexis'])

    _, r = self.anagrams2.get_anagrams("alfa")
    self.assertEqual(r, ['alfa'])

    _, r = self.anagrams2.get_anagrams("alfalfa")
    self.assertEqual(r, ['alfalfa'])

    _, r = self.anagrams2.get_anagrams("alfonso")
    self.assertEqual(r, ['alfonso'])

    _, r = self.anagrams2.get_anagrams("alfred")
    self.assertEqual(r, ['alfred', 'flared'])

    _, r = self.anagrams2.get_anagrams("alfredo")
    self.assertEqual(r, ['alfredo'])

    _, r = self.anagrams2.get_anagrams("alfresco")
    self.assertEqual(r, ['alfresco'])

    _, r = self.anagrams2.get_anagrams("alga")
    self.assertEqual(r, ['alga'])

    _, r = self.anagrams2.get_anagrams("algae")
    self.assertEqual(r, ['algae'])

    _, r = self.anagrams2.get_anagrams("algaecide")
    self.assertEqual(r, ['algaecide'])

    _, r = self.anagrams2.get_anagrams("algebra")
    self.assertEqual(r, ['algebra'])

    _, r = self.anagrams2.get_anagrams("algebraic")
    self.assertEqual(r, ['algebraic'])

    _, r = self.anagrams2.get_anagrams("algebraically")
    self.assertEqual(r, ['algebraically'])

    _, r = self.anagrams2.get_anagrams("algebras")
    self.assertEqual(r, ['algebras'])

    _, r = self.anagrams2.get_anagrams("algenib")
    self.assertEqual(r, ['algenib', 'belgian', 'bengali'])

    _, r = self.anagrams2.get_anagrams("alger")
    self.assertEqual(r, ['alger', 'glare', 'lager', 'large', 'regal'])

    _, r = self.anagrams2.get_anagrams("algeria")
    self.assertEqual(r, ['algeria'])

    _, r = self.anagrams2.get_anagrams("algerian")
    self.assertEqual(r, ['algerian'])

    _, r = self.anagrams2.get_anagrams("algiers")
    self.assertEqual(r, ['algiers'])

    _, r = self.anagrams2.get_anagrams("alginate")
    self.assertEqual(r, ['alginate'])

    _, r = self.anagrams2.get_anagrams("algol")
    self.assertEqual(r, ['algol', 'algol'])

    _, r = self.anagrams2.get_anagrams("algol")
    self.assertEqual(r, ['algol', 'algol'])

    _, r = self.anagrams2.get_anagrams("algonquian")
    self.assertEqual(r, ['algonquian'])

    _, r = self.anagrams2.get_anagrams("algonquin")
    self.assertEqual(r, ['algonquin'])

    _, r = self.anagrams2.get_anagrams("algorithm")
    self.assertEqual(r, ['algorithm', 'logarithm'])

    _, r = self.anagrams2.get_anagrams("algorithmic")
    self.assertEqual(r, ['algorithmic', 'logarithmic'])

    _, r = self.anagrams2.get_anagrams("algorithmically")
    self.assertEqual(r, ['algorithmically', 'logarithmically'])

    _, r = self.anagrams2.get_anagrams("algorithms")
    self.assertEqual(r, ['algorithms', 'logarithms'])

    _, r = self.anagrams2.get_anagrams("alhambra")
    self.assertEqual(r, ['alhambra'])

    _, r = self.anagrams2.get_anagrams("ali")
    self.assertEqual(r, ['ail', 'ali'])

    _, r = self.anagrams2.get_anagrams("alias")
    self.assertEqual(r, ['alias'])

    _, r = self.anagrams2.get_anagrams("aliased")
    self.assertEqual(r, ['aliased'])

    _, r = self.anagrams2.get_anagrams("aliases")
    self.assertEqual(r, ['aliases'])

    _, r = self.anagrams2.get_anagrams("aliasing")
    self.assertEqual(r, ['aliasing'])

    _, r = self.anagrams2.get_anagrams("alibi")
    self.assertEqual(r, ['alibi'])

    _, r = self.anagrams2.get_anagrams("alibis")
    self.assertEqual(r, ['alibis'])

    _, r = self.anagrams2.get_anagrams("alice")
    self.assertEqual(r, ['alice', 'celia'])

    _, r = self.anagrams2.get_anagrams("alicia")
    self.assertEqual(r, ['alicia'])

    _, r = self.anagrams2.get_anagrams("alien")
    self.assertEqual(r, ['alien'])

    _, r = self.anagrams2.get_anagrams("alienate")
    self.assertEqual(r, ['alienate'])

    _, r = self.anagrams2.get_anagrams("alienated")
    self.assertEqual(r, ['alienated'])

    _, r = self.anagrams2.get_anagrams("alienates")
    self.assertEqual(r, ['alienates'])

    _, r = self.anagrams2.get_anagrams("alienating")
    self.assertEqual(r, ['alienating'])

    _, r = self.anagrams2.get_anagrams("alienation")
    self.assertEqual(r, ['alienation'])

    _, r = self.anagrams2.get_anagrams("aliens")
    self.assertEqual(r, ['aliens', 'saline'])

    _, r = self.anagrams2.get_anagrams("alight")
    self.assertEqual(r, ['alight'])

    _, r = self.anagrams2.get_anagrams("align")
    self.assertEqual(r, ['align'])

    _, r = self.anagrams2.get_anagrams("aligned")
    self.assertEqual(r, ['aligned', 'dealing', 'leading'])

    _, r = self.anagrams2.get_anagrams("aligning")
    self.assertEqual(r, ['aligning'])

    _, r = self.anagrams2.get_anagrams("alignment")
    self.assertEqual(r, ['alignment', 'lamenting'])

    _, r = self.anagrams2.get_anagrams("alignments")
    self.assertEqual(r, ['alignments'])

    _, r = self.anagrams2.get_anagrams("aligns")
    self.assertEqual(r, ['aligns', 'signal'])

    _, r = self.anagrams2.get_anagrams("alike")
    self.assertEqual(r, ['alike'])

    _, r = self.anagrams2.get_anagrams("aliment")
    self.assertEqual(r, ['ailment', 'aliment'])

    _, r = self.anagrams2.get_anagrams("aliments")
    self.assertEqual(r, ['ailments', 'aliments'])

    _, r = self.anagrams2.get_anagrams("alimony")
    self.assertEqual(r, ['alimony'])

    _, r = self.anagrams2.get_anagrams("alison")
    self.assertEqual(r, ['alison'])

    _, r = self.anagrams2.get_anagrams("alistair")
    self.assertEqual(r, ['alistair'])

    _, r = self.anagrams2.get_anagrams("alive")
    self.assertEqual(r, ['alive'])

    _, r = self.anagrams2.get_anagrams("alkali")
    self.assertEqual(r, ['alkali'])

    _, r = self.anagrams2.get_anagrams("alkaline")
    self.assertEqual(r, ['alkaline'])

    _, r = self.anagrams2.get_anagrams("alkalis")
    self.assertEqual(r, ['alkalis'])

    _, r = self.anagrams2.get_anagrams("alkaloid")
    self.assertEqual(r, ['alkaloid'])

    _, r = self.anagrams2.get_anagrams("alkaloids")
    self.assertEqual(r, ['alkaloids'])

    _, r = self.anagrams2.get_anagrams("alkyl")
    self.assertEqual(r, ['alkyl'])

    _, r = self.anagrams2.get_anagrams("all")
    self.assertEqual(r, ['all'])

    _, r = self.anagrams2.get_anagrams("allah")
    self.assertEqual(r, ['allah'])

    _, r = self.anagrams2.get_anagrams("allan")
    self.assertEqual(r, ['allan'])

    _, r = self.anagrams2.get_anagrams("allay")
    self.assertEqual(r, ['allay'])

    _, r = self.anagrams2.get_anagrams("allayed")
    self.assertEqual(r, ['allayed'])

    _, r = self.anagrams2.get_anagrams("allaying")
    self.assertEqual(r, ['allaying'])

    _, r = self.anagrams2.get_anagrams("allays")
    self.assertEqual(r, ['allays'])

    _, r = self.anagrams2.get_anagrams("allegation")
    self.assertEqual(r, ['allegation'])

    _, r = self.anagrams2.get_anagrams("allegations")
    self.assertEqual(r, ['allegations'])

    _, r = self.anagrams2.get_anagrams("allege")
    self.assertEqual(r, ['allege'])

    _, r = self.anagrams2.get_anagrams("alleged")
    self.assertEqual(r, ['alleged'])

    _, r = self.anagrams2.get_anagrams("allegedly")
    self.assertEqual(r, ['allegedly'])

    _, r = self.anagrams2.get_anagrams("alleges")
    self.assertEqual(r, ['alleges'])

    _, r = self.anagrams2.get_anagrams("alleghenies")
    self.assertEqual(r, ['alleghenies'])

    _, r = self.anagrams2.get_anagrams("allegheny")
    self.assertEqual(r, ['allegheny'])

    _, r = self.anagrams2.get_anagrams("allegiance")
    self.assertEqual(r, ['allegiance'])

    _, r = self.anagrams2.get_anagrams("allegiances")
    self.assertEqual(r, ['allegiances'])

    _, r = self.anagrams2.get_anagrams("alleging")
    self.assertEqual(r, ['alleging'])

    _, r = self.anagrams2.get_anagrams("allegoric")
    self.assertEqual(r, ['allegoric'])

    _, r = self.anagrams2.get_anagrams("allegorical")
    self.assertEqual(r, ['allegorical'])

    _, r = self.anagrams2.get_anagrams("allegorically")
    self.assertEqual(r, ['allegorically'])

    _, r = self.anagrams2.get_anagrams("allegories")
    self.assertEqual(r, ['allegories'])

    _, r = self.anagrams2.get_anagrams("allegory")
    self.assertEqual(r, ['allegory'])

    _, r = self.anagrams2.get_anagrams("allegra")
    self.assertEqual(r, ['allegra'])

    _, r = self.anagrams2.get_anagrams("allegretto")
    self.assertEqual(r, ['allegretto'])

    _, r = self.anagrams2.get_anagrams("allegrettos")
    self.assertEqual(r, ['allegrettos'])

    _, r = self.anagrams2.get_anagrams("allele")
    self.assertEqual(r, ['allele'])

    _, r = self.anagrams2.get_anagrams("alleles")
    self.assertEqual(r, ['alleles'])

    _, r = self.anagrams2.get_anagrams("allemande")
    self.assertEqual(r, ['allemande'])

    _, r = self.anagrams2.get_anagrams("allen")
    self.assertEqual(r, ['allen'])

    _, r = self.anagrams2.get_anagrams("allendale")
    self.assertEqual(r, ['allendale'])

    _, r = self.anagrams2.get_anagrams("allentown")
    self.assertEqual(r, ['allentown'])

    _, r = self.anagrams2.get_anagrams("allergic")
    self.assertEqual(r, ['allergic'])

    _, r = self.anagrams2.get_anagrams("allergies")
    self.assertEqual(r, ['allergies', 'galleries'])

    _, r = self.anagrams2.get_anagrams("allergy")
    self.assertEqual(r, ['allergy', 'gallery', 'largely', 'regally'])

    _, r = self.anagrams2.get_anagrams("alleviate")
    self.assertEqual(r, ['alleviate'])

    _, r = self.anagrams2.get_anagrams("alleviated")
    self.assertEqual(r, ['alleviated'])

    _, r = self.anagrams2.get_anagrams("alleviates")
    self.assertEqual(r, ['alleviates'])

    _, r = self.anagrams2.get_anagrams("alleviating")
    self.assertEqual(r, ['alleviating'])

    _, r = self.anagrams2.get_anagrams("alleviation")
    self.assertEqual(r, ['alleviation'])

    _, r = self.anagrams2.get_anagrams("alley")
    self.assertEqual(r, ['alley'])

    _, r = self.anagrams2.get_anagrams("alleys")
    self.assertEqual(r, ['alleys'])

    _, r = self.anagrams2.get_anagrams("alleyway")
    self.assertEqual(r, ['alleyway'])

    _, r = self.anagrams2.get_anagrams("alleyways")
    self.assertEqual(r, ['alleyways'])

    _, r = self.anagrams2.get_anagrams("alliance")
    self.assertEqual(r, ['alliance'])

    _, r = self.anagrams2.get_anagrams("alliances")
    self.assertEqual(r, ['alliances'])

    _, r = self.anagrams2.get_anagrams("allied")
    self.assertEqual(r, ['allied'])

    _, r = self.anagrams2.get_anagrams("allies")
    self.assertEqual(r, ['allies'])

    _, r = self.anagrams2.get_anagrams("alligator")
    self.assertEqual(r, ['alligator'])

    _, r = self.anagrams2.get_anagrams("alligators")
    self.assertEqual(r, ['alligators'])

    _, r = self.anagrams2.get_anagrams("allis")
    self.assertEqual(r, ['allis'])

    _, r = self.anagrams2.get_anagrams("allison")
    self.assertEqual(r, ['allison'])

    _, r = self.anagrams2.get_anagrams("alliteration")
    self.assertEqual(r, ['alliteration'])

    _, r = self.anagrams2.get_anagrams("alliterations")
    self.assertEqual(r, ['alliterations'])

    _, r = self.anagrams2.get_anagrams("alliterative")
    self.assertEqual(r, ['alliterative'])

    _, r = self.anagrams2.get_anagrams("allocatable")
    self.assertEqual(r, ['allocatable'])

    _, r = self.anagrams2.get_anagrams("allocate")
    self.assertEqual(r, ['allocate'])

    _, r = self.anagrams2.get_anagrams("allocated")
    self.assertEqual(r, ['allocated'])

    _, r = self.anagrams2.get_anagrams("allocates")
    self.assertEqual(r, ['allocates'])

    _, r = self.anagrams2.get_anagrams("allocating")
    self.assertEqual(r, ['allocating'])

    _, r = self.anagrams2.get_anagrams("allocation")
    self.assertEqual(r, ['allocation'])

    _, r = self.anagrams2.get_anagrams("allocations")
    self.assertEqual(r, ['allocations'])

    _, r = self.anagrams2.get_anagrams("allocator")
    self.assertEqual(r, ['allocator'])

    _, r = self.anagrams2.get_anagrams("allocators")
    self.assertEqual(r, ['allocators'])

    _, r = self.anagrams2.get_anagrams("allophone")
    self.assertEqual(r, ['allophone'])

    _, r = self.anagrams2.get_anagrams("allophones")
    self.assertEqual(r, ['allophones'])

    _, r = self.anagrams2.get_anagrams("allophonic")
    self.assertEqual(r, ['allophonic'])

    _, r = self.anagrams2.get_anagrams("allot")
    self.assertEqual(r, ['allot', 'atoll'])

    _, r = self.anagrams2.get_anagrams("allotment")
    self.assertEqual(r, ['allotment'])

    _, r = self.anagrams2.get_anagrams("allotments")
    self.assertEqual(r, ['allotments'])

    _, r = self.anagrams2.get_anagrams("allots")
    self.assertEqual(r, ['allots', 'atolls'])

    _, r = self.anagrams2.get_anagrams("allotted")
    self.assertEqual(r, ['allotted', 'totalled'])

    _, r = self.anagrams2.get_anagrams("allotter")
    self.assertEqual(r, ['allotter', 'totaller'])

    _, r = self.anagrams2.get_anagrams("allotting")
    self.assertEqual(r, ['allotting', 'totalling'])

    _, r = self.anagrams2.get_anagrams("allow")
    self.assertEqual(r, ['allow'])

    _, r = self.anagrams2.get_anagrams("allowable")
    self.assertEqual(r, ['allowable'])

    _, r = self.anagrams2.get_anagrams("allowably")
    self.assertEqual(r, ['allowably'])

    _, r = self.anagrams2.get_anagrams("allowance")
    self.assertEqual(r, ['allowance'])

    _, r = self.anagrams2.get_anagrams("allowances")
    self.assertEqual(r, ['allowances'])

    _, r = self.anagrams2.get_anagrams("allowed")
    self.assertEqual(r, ['allowed'])

    _, r = self.anagrams2.get_anagrams("allowing")
    self.assertEqual(r, ['allowing'])

    _, r = self.anagrams2.get_anagrams("allows")
    self.assertEqual(r, ['allows', 'sallow'])

    _, r = self.anagrams2.get_anagrams("alloy")
    self.assertEqual(r, ['alloy', 'loyal'])

    _, r = self.anagrams2.get_anagrams("alloys")
    self.assertEqual(r, ['alloys'])

    _, r = self.anagrams2.get_anagrams("allstate")
    self.assertEqual(r, ['allstate'])

    _, r = self.anagrams2.get_anagrams("allude")
    self.assertEqual(r, ['allude'])

    _, r = self.anagrams2.get_anagrams("alluded")
    self.assertEqual(r, ['alluded'])

    _, r = self.anagrams2.get_anagrams("alludes")
    self.assertEqual(r, ['alludes'])

    _, r = self.anagrams2.get_anagrams("alluding")
    self.assertEqual(r, ['alluding'])

    _, r = self.anagrams2.get_anagrams("allure")
    self.assertEqual(r, ['allure', 'laurel'])

    _, r = self.anagrams2.get_anagrams("allurement")
    self.assertEqual(r, ['allurement'])

    _, r = self.anagrams2.get_anagrams("alluring")
    self.assertEqual(r, ['alluring'])

    _, r = self.anagrams2.get_anagrams("allusion")
    self.assertEqual(r, ['allusion'])

    _, r = self.anagrams2.get_anagrams("allusions")
    self.assertEqual(r, ['allusions'])

    _, r = self.anagrams2.get_anagrams("allusive")
    self.assertEqual(r, ['allusive'])

    _, r = self.anagrams2.get_anagrams("allusiveness")
    self.assertEqual(r, ['allusiveness'])

    _, r = self.anagrams2.get_anagrams("ally")
    self.assertEqual(r, ['ally'])

    _, r = self.anagrams2.get_anagrams("allying")
    self.assertEqual(r, ['allying'])

    _, r = self.anagrams2.get_anagrams("allyn")
    self.assertEqual(r, ['allyn'])

    _, r = self.anagrams2.get_anagrams("alma")
    self.assertEqual(r, ['alma'])

    _, r = self.anagrams2.get_anagrams("almaden")
    self.assertEqual(r, ['almaden'])

    _, r = self.anagrams2.get_anagrams("almanac")
    self.assertEqual(r, ['almanac'])

    _, r = self.anagrams2.get_anagrams("almanacs")
    self.assertEqual(r, ['almanacs'])

    _, r = self.anagrams2.get_anagrams("almighty")
    self.assertEqual(r, ['almighty'])

    _, r = self.anagrams2.get_anagrams("almond")
    self.assertEqual(r, ['almond'])

    _, r = self.anagrams2.get_anagrams("almonds")
    self.assertEqual(r, ['almonds'])

    _, r = self.anagrams2.get_anagrams("almoner")
    self.assertEqual(r, ['almoner'])

    _, r = self.anagrams2.get_anagrams("almost")
    self.assertEqual(r, ['almost'])

    _, r = self.anagrams2.get_anagrams("alms")
    self.assertEqual(r, ['alms', 'slam'])

    _, r = self.anagrams2.get_anagrams("almsman")
    self.assertEqual(r, ['almsman'])

    _, r = self.anagrams2.get_anagrams("alnico")
    self.assertEqual(r, ['alnico'])

    _, r = self.anagrams2.get_anagrams("aloe")
    self.assertEqual(r, ['aloe'])

    _, r = self.anagrams2.get_anagrams("aloes")
    self.assertEqual(r, ['aloes'])

    _, r = self.anagrams2.get_anagrams("aloft")
    self.assertEqual(r, ['aloft', 'float'])

    _, r = self.anagrams2.get_anagrams("aloha")
    self.assertEqual(r, ['aloha'])

    _, r = self.anagrams2.get_anagrams("alone")
    self.assertEqual(r, ['alone', 'leona'])

    _, r = self.anagrams2.get_anagrams("aloneness")
    self.assertEqual(r, ['aloneness'])

    _, r = self.anagrams2.get_anagrams("along")
    self.assertEqual(r, ['along', 'anglo', 'logan'])

    _, r = self.anagrams2.get_anagrams("alongside")
    self.assertEqual(r, ['alongside'])

    _, r = self.anagrams2.get_anagrams("aloof")
    self.assertEqual(r, ['aloof'])

    _, r = self.anagrams2.get_anagrams("aloofness")
    self.assertEqual(r, ['aloofness'])

    _, r = self.anagrams2.get_anagrams("aloud")
    self.assertEqual(r, ['aloud'])

    _, r = self.anagrams2.get_anagrams("alpert")
    self.assertEqual(r, ['alpert'])

    _, r = self.anagrams2.get_anagrams("alpha")
    self.assertEqual(r, ['alpha'])

    _, r = self.anagrams2.get_anagrams("alphabet")
    self.assertEqual(r, ['alphabet'])

    _, r = self.anagrams2.get_anagrams("alphabetic")
    self.assertEqual(r, ['alphabetic'])

    _, r = self.anagrams2.get_anagrams("alphabetical")
    self.assertEqual(r, ['alphabetical'])

    _, r = self.anagrams2.get_anagrams("alphabetically")
    self.assertEqual(r, ['alphabetically'])

    _, r = self.anagrams2.get_anagrams("alphabetics")
    self.assertEqual(r, ['alphabetics'])

    _, r = self.anagrams2.get_anagrams("alphabetize")
    self.assertEqual(r, ['alphabetize'])

    _, r = self.anagrams2.get_anagrams("alphabetized")
    self.assertEqual(r, ['alphabetized'])

    _, r = self.anagrams2.get_anagrams("alphabetizes")
    self.assertEqual(r, ['alphabetizes'])

    _, r = self.anagrams2.get_anagrams("alphabetizing")
    self.assertEqual(r, ['alphabetizing'])

    _, r = self.anagrams2.get_anagrams("alphabets")
    self.assertEqual(r, ['alphabets'])

    _, r = self.anagrams2.get_anagrams("alphanumeric")
    self.assertEqual(r, ['alphanumeric'])

    _, r = self.anagrams2.get_anagrams("alpheratz")
    self.assertEqual(r, ['alpheratz'])

    _, r = self.anagrams2.get_anagrams("alphonse")
    self.assertEqual(r, ['alphonse'])

    _, r = self.anagrams2.get_anagrams("alpine")
    self.assertEqual(r, ['alpine', 'nepali'])

    _, r = self.anagrams2.get_anagrams("alps")
    self.assertEqual(r, ['alps', 'laps', 'pals', 'slap'])

    _, r = self.anagrams2.get_anagrams("already")
    self.assertEqual(r, ['already'])

    _, r = self.anagrams2.get_anagrams("alsatian")
    self.assertEqual(r, ['alsatian'])

    _, r = self.anagrams2.get_anagrams("alsatians")
    self.assertEqual(r, ['alsatians', 'assailant'])

    _, r = self.anagrams2.get_anagrams("also")
    self.assertEqual(r, ['also', 'laos'])

    _, r = self.anagrams2.get_anagrams("alsop")
    self.assertEqual(r, ['alsop', 'opals'])

    _, r = self.anagrams2.get_anagrams("altair")
    self.assertEqual(r, ['altair'])

    _, r = self.anagrams2.get_anagrams("altar")
    self.assertEqual(r, ['altar'])

    _, r = self.anagrams2.get_anagrams("altars")
    self.assertEqual(r, ['altars', 'astral'])

    _, r = self.anagrams2.get_anagrams("alter")
    self.assertEqual(r, ['alert', 'alter', 'later'])

    _, r = self.anagrams2.get_anagrams("alterable")
    self.assertEqual(r, ['alterable'])

    _, r = self.anagrams2.get_anagrams("alteration")
    self.assertEqual(r, ['alteration'])

    _, r = self.anagrams2.get_anagrams("alterations")
    self.assertEqual(r, ['alterations'])

    _, r = self.anagrams2.get_anagrams("altercation")
    self.assertEqual(r, ['altercation'])

    _, r = self.anagrams2.get_anagrams("altercations")
    self.assertEqual(r, ['altercations'])

    _, r = self.anagrams2.get_anagrams("altered")
    self.assertEqual(r, ['alerted', 'altered', 'related'])

    _, r = self.anagrams2.get_anagrams("alterer")
    self.assertEqual(r, ['alerter', 'alterer', 'relater'])

    _, r = self.anagrams2.get_anagrams("alterers")
    self.assertEqual(r, ['alerters', 'alterers'])

    _, r = self.anagrams2.get_anagrams("altering")
    self.assertEqual(r, ['alerting', 'altering', 'integral', 'relating', 'triangle'])

    _, r = self.anagrams2.get_anagrams("alternate")
    self.assertEqual(r, ['alternate'])

    _, r = self.anagrams2.get_anagrams("alternated")
    self.assertEqual(r, ['alternated'])

    _, r = self.anagrams2.get_anagrams("alternately")
    self.assertEqual(r, ['alternately'])

    _, r = self.anagrams2.get_anagrams("alternates")
    self.assertEqual(r, ['alternates'])

    _, r = self.anagrams2.get_anagrams("alternating")
    self.assertEqual(r, ['alternating'])

    _, r = self.anagrams2.get_anagrams("alternation")
    self.assertEqual(r, ['alternation'])

    _, r = self.anagrams2.get_anagrams("alternations")
    self.assertEqual(r, ['alternations'])

    _, r = self.anagrams2.get_anagrams("alternative")
    self.assertEqual(r, ['alternative'])

    _, r = self.anagrams2.get_anagrams("alternatively")
    self.assertEqual(r, ['alternatively'])

    _, r = self.anagrams2.get_anagrams("alternatives")
    self.assertEqual(r, ['alternatives'])

    _, r = self.anagrams2.get_anagrams("alternator")
    self.assertEqual(r, ['alternator'])

    _, r = self.anagrams2.get_anagrams("alternators")
    self.assertEqual(r, ['alternators'])

    _, r = self.anagrams2.get_anagrams("alters")
    self.assertEqual(r, ['alerts', 'alters', 'salter', 'slater'])

    _, r = self.anagrams2.get_anagrams("althaea")
    self.assertEqual(r, ['althaea'])

    _, r = self.anagrams2.get_anagrams("although")
    self.assertEqual(r, ['although'])

    _, r = self.anagrams2.get_anagrams("altitude")
    self.assertEqual(r, ['altitude', 'latitude'])

    _, r = self.anagrams2.get_anagrams("altitudes")
    self.assertEqual(r, ['altitudes', 'latitudes'])

    _, r = self.anagrams2.get_anagrams("altogether")
    self.assertEqual(r, ['altogether'])

    _, r = self.anagrams2.get_anagrams("alton")
    self.assertEqual(r, ['alton'])

    _, r = self.anagrams2.get_anagrams("altos")
    self.assertEqual(r, ['altos'])

    _, r = self.anagrams2.get_anagrams("altruism")
    self.assertEqual(r, ['altruism'])

    _, r = self.anagrams2.get_anagrams("altruist")
    self.assertEqual(r, ['altruist'])

    _, r = self.anagrams2.get_anagrams("altruistic")
    self.assertEqual(r, ['altruistic'])

    _, r = self.anagrams2.get_anagrams("altruistically")
    self.assertEqual(r, ['altruistically'])

    _, r = self.anagrams2.get_anagrams("alum")
    self.assertEqual(r, ['alum', 'maul'])

    _, r = self.anagrams2.get_anagrams("aluminum")
    self.assertEqual(r, ['aluminum'])

    _, r = self.anagrams2.get_anagrams("alumna")
    self.assertEqual(r, ['alumna', 'manual'])

    _, r = self.anagrams2.get_anagrams("alumnae")
    self.assertEqual(r, ['alumnae'])

    _, r = self.anagrams2.get_anagrams("alumni")
    self.assertEqual(r, ['alumni'])

    _, r = self.anagrams2.get_anagrams("alumnus")
    self.assertEqual(r, ['alumnus'])

    _, r = self.anagrams2.get_anagrams("alundum")
    self.assertEqual(r, ['alundum'])

    _, r = self.anagrams2.get_anagrams("alva")
    self.assertEqual(r, ['alva', 'lava'])

    _, r = self.anagrams2.get_anagrams("alvarez")
    self.assertEqual(r, ['alvarez'])

    _, r = self.anagrams2.get_anagrams("alveolar")
    self.assertEqual(r, ['alveolar'])

    _, r = self.anagrams2.get_anagrams("alveoli")
    self.assertEqual(r, ['alveoli'])

    _, r = self.anagrams2.get_anagrams("alveolus")
    self.assertEqual(r, ['alveolus'])

    _, r = self.anagrams2.get_anagrams("alvin")
    self.assertEqual(r, ['alvin', 'anvil'])

    _, r = self.anagrams2.get_anagrams("always")
    self.assertEqual(r, ['always'])

    _, r = self.anagrams2.get_anagrams("alyssa")
    self.assertEqual(r, ['alyssa'])

    _, r = self.anagrams2.get_anagrams("am")
    self.assertEqual(r, ['am'])

    _, r = self.anagrams2.get_anagrams("amadeus")
    self.assertEqual(r, ['amadeus'])

    _, r = self.anagrams2.get_anagrams("amain")
    self.assertEqual(r, ['amain', 'mania'])

    _, r = self.anagrams2.get_anagrams("amalgam")
    self.assertEqual(r, ['amalgam'])

    _, r = self.anagrams2.get_anagrams("amalgamate")
    self.assertEqual(r, ['amalgamate'])

    _, r = self.anagrams2.get_anagrams("amalgamated")
    self.assertEqual(r, ['amalgamated'])

    _, r = self.anagrams2.get_anagrams("amalgamates")
    self.assertEqual(r, ['amalgamates'])

    _, r = self.anagrams2.get_anagrams("amalgamating")
    self.assertEqual(r, ['amalgamating'])

    _, r = self.anagrams2.get_anagrams("amalgamation")
    self.assertEqual(r, ['amalgamation'])

    _, r = self.anagrams2.get_anagrams("amalgams")
    self.assertEqual(r, ['amalgams'])

    _, r = self.anagrams2.get_anagrams("amanda")
    self.assertEqual(r, ['amanda'])

    _, r = self.anagrams2.get_anagrams("amanuensis")
    self.assertEqual(r, ['amanuensis'])

    _, r = self.anagrams2.get_anagrams("amaretto")
    self.assertEqual(r, ['amaretto'])

    _, r = self.anagrams2.get_anagrams("amarillo")
    self.assertEqual(r, ['amarillo'])

    _, r = self.anagrams2.get_anagrams("amass")
    self.assertEqual(r, ['amass', 'assam'])

    _, r = self.anagrams2.get_anagrams("amassed")
    self.assertEqual(r, ['amassed'])

    _, r = self.anagrams2.get_anagrams("amasses")
    self.assertEqual(r, ['amasses'])

    _, r = self.anagrams2.get_anagrams("amassing")
    self.assertEqual(r, ['amassing'])

    _, r = self.anagrams2.get_anagrams("amateur")
    self.assertEqual(r, ['amateur'])

    _, r = self.anagrams2.get_anagrams("amateurish")
    self.assertEqual(r, ['amateurish'])

    _, r = self.anagrams2.get_anagrams("amateurishness")
    self.assertEqual(r, ['amateurishness'])

    _, r = self.anagrams2.get_anagrams("amateurism")
    self.assertEqual(r, ['amateurism'])

    _, r = self.anagrams2.get_anagrams("amateurs")
    self.assertEqual(r, ['amateurs'])

    _, r = self.anagrams2.get_anagrams("amatory")
    self.assertEqual(r, ['amatory'])

    _, r = self.anagrams2.get_anagrams("amaze")
    self.assertEqual(r, ['amaze'])

    _, r = self.anagrams2.get_anagrams("amazed")
    self.assertEqual(r, ['amazed'])

    _, r = self.anagrams2.get_anagrams("amazedly")
    self.assertEqual(r, ['amazedly'])

    _, r = self.anagrams2.get_anagrams("amazement")
    self.assertEqual(r, ['amazement'])

    _, r = self.anagrams2.get_anagrams("amazer")
    self.assertEqual(r, ['amazer'])

    _, r = self.anagrams2.get_anagrams("amazers")
    self.assertEqual(r, ['amazers'])

    _, r = self.anagrams2.get_anagrams("amazes")
    self.assertEqual(r, ['amazes'])

    _, r = self.anagrams2.get_anagrams("amazing")
    self.assertEqual(r, ['amazing'])

    _, r = self.anagrams2.get_anagrams("amazingly")
    self.assertEqual(r, ['amazingly'])

    _, r = self.anagrams2.get_anagrams("amazon")
    self.assertEqual(r, ['amazon'])

    _, r = self.anagrams2.get_anagrams("amazons")
    self.assertEqual(r, ['amazons'])

    _, r = self.anagrams2.get_anagrams("ambassador")
    self.assertEqual(r, ['ambassador'])

    _, r = self.anagrams2.get_anagrams("ambassadors")
    self.assertEqual(r, ['ambassadors'])

    _, r = self.anagrams2.get_anagrams("amber")
    self.assertEqual(r, ['amber'])

    _, r = self.anagrams2.get_anagrams("ambiance")
    self.assertEqual(r, ['ambiance'])

    _, r = self.anagrams2.get_anagrams("ambidextrous")
    self.assertEqual(r, ['ambidextrous'])

    _, r = self.anagrams2.get_anagrams("ambidextrously")
    self.assertEqual(r, ['ambidextrously'])

    _, r = self.anagrams2.get_anagrams("ambient")
    self.assertEqual(r, ['ambient'])

    _, r = self.anagrams2.get_anagrams("ambiguities")
    self.assertEqual(r, ['ambiguities'])

    _, r = self.anagrams2.get_anagrams("ambiguity")
    self.assertEqual(r, ['ambiguity'])

    _, r = self.anagrams2.get_anagrams("ambiguous")
    self.assertEqual(r, ['ambiguous'])

    _, r = self.anagrams2.get_anagrams("ambiguously")
    self.assertEqual(r, ['ambiguously'])

    _, r = self.anagrams2.get_anagrams("ambition")
    self.assertEqual(r, ['ambition'])

    _, r = self.anagrams2.get_anagrams("ambitions")
    self.assertEqual(r, ['ambitions'])

    _, r = self.anagrams2.get_anagrams("ambitious")
    self.assertEqual(r, ['ambitious'])

    _, r = self.anagrams2.get_anagrams("ambitiously")
    self.assertEqual(r, ['ambitiously'])

    _, r = self.anagrams2.get_anagrams("ambivalence")
    self.assertEqual(r, ['ambivalence'])

    _, r = self.anagrams2.get_anagrams("ambivalent")
    self.assertEqual(r, ['ambivalent'])

    _, r = self.anagrams2.get_anagrams("ambivalently")
    self.assertEqual(r, ['ambivalently'])

    _, r = self.anagrams2.get_anagrams("amble")
    self.assertEqual(r, ['amble', 'blame', 'mabel'])

    _, r = self.anagrams2.get_anagrams("ambled")
    self.assertEqual(r, ['ambled', 'bedlam', 'blamed'])

    _, r = self.anagrams2.get_anagrams("ambler")
    self.assertEqual(r, ['ambler', 'blamer', 'marble', 'ramble'])

    _, r = self.anagrams2.get_anagrams("ambles")
    self.assertEqual(r, ['ambles', 'blames'])

    _, r = self.anagrams2.get_anagrams("ambling")
    self.assertEqual(r, ['ambling', 'blaming'])

    _, r = self.anagrams2.get_anagrams("ambrosial")
    self.assertEqual(r, ['ambrosial'])

    _, r = self.anagrams2.get_anagrams("ambulance")
    self.assertEqual(r, ['ambulance'])

    _, r = self.anagrams2.get_anagrams("ambulances")
    self.assertEqual(r, ['ambulances'])

    _, r = self.anagrams2.get_anagrams("ambulatory")
    self.assertEqual(r, ['ambulatory'])

    _, r = self.anagrams2.get_anagrams("ambuscade")
    self.assertEqual(r, ['ambuscade'])

    _, r = self.anagrams2.get_anagrams("ambush")
    self.assertEqual(r, ['ambush'])

    _, r = self.anagrams2.get_anagrams("ambushed")
    self.assertEqual(r, ['ambushed'])

    _, r = self.anagrams2.get_anagrams("ambushes")
    self.assertEqual(r, ['ambushes'])

    _, r = self.anagrams2.get_anagrams("amdahl")
    self.assertEqual(r, ['amdahl'])

    _, r = self.anagrams2.get_anagrams("amelia")
    self.assertEqual(r, ['amelia'])

    _, r = self.anagrams2.get_anagrams("ameliorate")
    self.assertEqual(r, ['ameliorate'])

    _, r = self.anagrams2.get_anagrams("ameliorated")
    self.assertEqual(r, ['ameliorated'])

    _, r = self.anagrams2.get_anagrams("ameliorating")
    self.assertEqual(r, ['ameliorating'])

    _, r = self.anagrams2.get_anagrams("amelioration")
    self.assertEqual(r, ['amelioration'])

    _, r = self.anagrams2.get_anagrams("amen")
    self.assertEqual(r, ['amen', 'mane', 'mean', 'name'])

    _, r = self.anagrams2.get_anagrams("amenable")
    self.assertEqual(r, ['amenable', 'nameable'])

    _, r = self.anagrams2.get_anagrams("amend")
    self.assertEqual(r, ['amend', 'named'])

    _, r = self.anagrams2.get_anagrams("amended")
    self.assertEqual(r, ['amended'])

    _, r = self.anagrams2.get_anagrams("amending")
    self.assertEqual(r, ['amending'])

    _, r = self.anagrams2.get_anagrams("amendment")
    self.assertEqual(r, ['amendment'])

    _, r = self.anagrams2.get_anagrams("amendments")
    self.assertEqual(r, ['amendments'])

    _, r = self.anagrams2.get_anagrams("amends")
    self.assertEqual(r, ['amends', 'madsen'])

    _, r = self.anagrams2.get_anagrams("amenities")
    self.assertEqual(r, ['amenities'])

    _, r = self.anagrams2.get_anagrams("amenity")
    self.assertEqual(r, ['amenity', 'anytime'])

    _, r = self.anagrams2.get_anagrams("amenorrhea")
    self.assertEqual(r, ['amenorrhea'])

    _, r = self.anagrams2.get_anagrams("amerada")
    self.assertEqual(r, ['amerada'])

    _, r = self.anagrams2.get_anagrams("america")
    self.assertEqual(r, ['america'])

    _, r = self.anagrams2.get_anagrams("american")
    self.assertEqual(r, ['american', 'cinerama'])

    _, r = self.anagrams2.get_anagrams("americana")
    self.assertEqual(r, ['americana'])

    _, r = self.anagrams2.get_anagrams("americanism")
    self.assertEqual(r, ['americanism'])

    _, r = self.anagrams2.get_anagrams("americanization")
    self.assertEqual(r, ['americanization'])

    _, r = self.anagrams2.get_anagrams("americanizations")
    self.assertEqual(r, ['americanizations'])

    _, r = self.anagrams2.get_anagrams("americanize")
    self.assertEqual(r, ['americanize'])

    _, r = self.anagrams2.get_anagrams("americanizer")
    self.assertEqual(r, ['americanizer'])

    _, r = self.anagrams2.get_anagrams("americanizers")
    self.assertEqual(r, ['americanizers'])

    _, r = self.anagrams2.get_anagrams("americanizes")
    self.assertEqual(r, ['americanizes'])

    _, r = self.anagrams2.get_anagrams("americans")
    self.assertEqual(r, ['americans'])

    _, r = self.anagrams2.get_anagrams("americas")
    self.assertEqual(r, ['americas'])

    _, r = self.anagrams2.get_anagrams("americium")
    self.assertEqual(r, ['americium'])

    _, r = self.anagrams2.get_anagrams("ames")
    self.assertEqual(r, ['ames', 'same', 'seam'])

    _, r = self.anagrams2.get_anagrams("amharic")
    self.assertEqual(r, ['amharic'])

    _, r = self.anagrams2.get_anagrams("amherst")
    self.assertEqual(r, ['amherst', 'hamster'])

    _, r = self.anagrams2.get_anagrams("amiable")
    self.assertEqual(r, ['amiable'])

    _, r = self.anagrams2.get_anagrams("amicable")
    self.assertEqual(r, ['amicable'])

    _, r = self.anagrams2.get_anagrams("amicably")
    self.assertEqual(r, ['amicably'])

    _, r = self.anagrams2.get_anagrams("amid")
    self.assertEqual(r, ['amid', 'maid'])

    _, r = self.anagrams2.get_anagrams("amide")
    self.assertEqual(r, ['aimed', 'amide', 'media'])

    _, r = self.anagrams2.get_anagrams("amidst")
    self.assertEqual(r, ['admits', 'amidst'])

    _, r = self.anagrams2.get_anagrams("amiga")
    self.assertEqual(r, ['amiga'])

    _, r = self.anagrams2.get_anagrams("amigo")
    self.assertEqual(r, ['amigo'])

    _, r = self.anagrams2.get_anagrams("amino")
    self.assertEqual(r, ['amino', 'naomi'])

    _, r = self.anagrams2.get_anagrams("amiss")
    self.assertEqual(r, ['amiss'])

    _, r = self.anagrams2.get_anagrams("amity")
    self.assertEqual(r, ['amity'])

    _, r = self.anagrams2.get_anagrams("amman")
    self.assertEqual(r, ['amman'])

    _, r = self.anagrams2.get_anagrams("ammerman")
    self.assertEqual(r, ['ammerman'])

    _, r = self.anagrams2.get_anagrams("ammo")
    self.assertEqual(r, ['ammo'])

    _, r = self.anagrams2.get_anagrams("ammonia")
    self.assertEqual(r, ['ammonia'])

    _, r = self.anagrams2.get_anagrams("ammoniac")
    self.assertEqual(r, ['ammoniac'])

    _, r = self.anagrams2.get_anagrams("ammonium")
    self.assertEqual(r, ['ammonium'])

    _, r = self.anagrams2.get_anagrams("ammunition")
    self.assertEqual(r, ['ammunition'])

    _, r = self.anagrams2.get_anagrams("amnesty")
    self.assertEqual(r, ['amnesty'])

    _, r = self.anagrams2.get_anagrams("amoco")
    self.assertEqual(r, ['amoco'])

    _, r = self.anagrams2.get_anagrams("amoeba")
    self.assertEqual(r, ['amoeba'])

    _, r = self.anagrams2.get_anagrams("amoebae")
    self.assertEqual(r, ['amoebae'])

    _, r = self.anagrams2.get_anagrams("amoebas")
    self.assertEqual(r, ['amoebas'])

    _, r = self.anagrams2.get_anagrams("amok")
    self.assertEqual(r, ['amok'])

    _, r = self.anagrams2.get_anagrams("among")
    self.assertEqual(r, ['among'])

    _, r = self.anagrams2.get_anagrams("amongst")
    self.assertEqual(r, ['amongst'])

    _, r = self.anagrams2.get_anagrams("amontillado")
    self.assertEqual(r, ['amontillado'])

    _, r = self.anagrams2.get_anagrams("amoral")
    self.assertEqual(r, ['amoral'])

    _, r = self.anagrams2.get_anagrams("amorality")
    self.assertEqual(r, ['amorality'])

    _, r = self.anagrams2.get_anagrams("amorist")
    self.assertEqual(r, ['amorist'])

    _, r = self.anagrams2.get_anagrams("amorous")
    self.assertEqual(r, ['amorous'])

    _, r = self.anagrams2.get_anagrams("amorphous")
    self.assertEqual(r, ['amorphous'])

    _, r = self.anagrams2.get_anagrams("amorphously")
    self.assertEqual(r, ['amorphously'])

    _, r = self.anagrams2.get_anagrams("amortize")
    self.assertEqual(r, ['amortize'])

    _, r = self.anagrams2.get_anagrams("amortized")
    self.assertEqual(r, ['amortized'])

    _, r = self.anagrams2.get_anagrams("amortizes")
    self.assertEqual(r, ['amortizes'])

    _, r = self.anagrams2.get_anagrams("amortizing")
    self.assertEqual(r, ['amortizing'])

    _, r = self.anagrams2.get_anagrams("amos")
    self.assertEqual(r, ['amos'])

    _, r = self.anagrams2.get_anagrams("amount")
    self.assertEqual(r, ['amount'])

    _, r = self.anagrams2.get_anagrams("amounted")
    self.assertEqual(r, ['amounted'])

    _, r = self.anagrams2.get_anagrams("amounter")
    self.assertEqual(r, ['amounter'])

    _, r = self.anagrams2.get_anagrams("amounters")
    self.assertEqual(r, ['amounters'])

    _, r = self.anagrams2.get_anagrams("amounting")
    self.assertEqual(r, ['amounting'])

    _, r = self.anagrams2.get_anagrams("amounts")
    self.assertEqual(r, ['amounts'])

    _, r = self.anagrams2.get_anagrams("amour")
    self.assertEqual(r, ['amour'])

    _, r = self.anagrams2.get_anagrams("amperage")
    self.assertEqual(r, ['amperage'])

    _, r = self.anagrams2.get_anagrams("ampere")
    self.assertEqual(r, ['ampere'])

    _, r = self.anagrams2.get_anagrams("amperes")
    self.assertEqual(r, ['amperes'])

    _, r = self.anagrams2.get_anagrams("ampersand")
    self.assertEqual(r, ['ampersand'])

    _, r = self.anagrams2.get_anagrams("ampersands")
    self.assertEqual(r, ['ampersands'])

    _, r = self.anagrams2.get_anagrams("ampex")
    self.assertEqual(r, ['ampex'])

    _, r = self.anagrams2.get_anagrams("amphetamine")
    self.assertEqual(r, ['amphetamine'])

    _, r = self.anagrams2.get_anagrams("amphetamines")
    self.assertEqual(r, ['amphetamines'])

    _, r = self.anagrams2.get_anagrams("amphibian")
    self.assertEqual(r, ['amphibian'])

    _, r = self.anagrams2.get_anagrams("amphibians")
    self.assertEqual(r, ['amphibians'])

    _, r = self.anagrams2.get_anagrams("amphibious")
    self.assertEqual(r, ['amphibious'])

    _, r = self.anagrams2.get_anagrams("amphibiously")
    self.assertEqual(r, ['amphibiously'])

    _, r = self.anagrams2.get_anagrams("amphibology")
    self.assertEqual(r, ['amphibology'])

    _, r = self.anagrams2.get_anagrams("amphitheater")
    self.assertEqual(r, ['amphitheater'])

    _, r = self.anagrams2.get_anagrams("amphitheaters")
    self.assertEqual(r, ['amphitheaters'])

    _, r = self.anagrams2.get_anagrams("ample")
    self.assertEqual(r, ['ample', 'maple'])

    _, r = self.anagrams2.get_anagrams("amplification")
    self.assertEqual(r, ['amplification'])

    _, r = self.anagrams2.get_anagrams("amplified")
    self.assertEqual(r, ['amplified'])

    _, r = self.anagrams2.get_anagrams("amplifier")
    self.assertEqual(r, ['amplifier'])

    _, r = self.anagrams2.get_anagrams("amplifiers")
    self.assertEqual(r, ['amplifiers'])

    _, r = self.anagrams2.get_anagrams("amplifies")
    self.assertEqual(r, ['amplifies'])

    _, r = self.anagrams2.get_anagrams("amplify")
    self.assertEqual(r, ['amplify'])

    _, r = self.anagrams2.get_anagrams("amplifying")
    self.assertEqual(r, ['amplifying'])

    _, r = self.anagrams2.get_anagrams("amplitude")
    self.assertEqual(r, ['amplitude'])

    _, r = self.anagrams2.get_anagrams("amplitudes")
    self.assertEqual(r, ['amplitudes'])

    _, r = self.anagrams2.get_anagrams("amply")
    self.assertEqual(r, ['amply'])

    _, r = self.anagrams2.get_anagrams("ampoule")
    self.assertEqual(r, ['ampoule'])

    _, r = self.anagrams2.get_anagrams("ampoules")
    self.assertEqual(r, ['ampoules'])

    _, r = self.anagrams2.get_anagrams("amputate")
    self.assertEqual(r, ['amputate'])

    _, r = self.anagrams2.get_anagrams("amputated")
    self.assertEqual(r, ['amputated'])

    _, r = self.anagrams2.get_anagrams("amputates")
    self.assertEqual(r, ['amputates'])

    _, r = self.anagrams2.get_anagrams("amputating")
    self.assertEqual(r, ['amputating'])

    _, r = self.anagrams2.get_anagrams("amsterdam")
    self.assertEqual(r, ['amsterdam'])

    _, r = self.anagrams2.get_anagrams("amtrak")
    self.assertEqual(r, ['amtrak'])

    _, r = self.anagrams2.get_anagrams("amulet")
    self.assertEqual(r, ['amulet'])

    _, r = self.anagrams2.get_anagrams("amulets")
    self.assertEqual(r, ['amulets'])

    _, r = self.anagrams2.get_anagrams("amuse")
    self.assertEqual(r, ['amuse'])

    _, r = self.anagrams2.get_anagrams("amused")
    self.assertEqual(r, ['amused', 'medusa'])

    _, r = self.anagrams2.get_anagrams("amusedly")
    self.assertEqual(r, ['amusedly'])

    _, r = self.anagrams2.get_anagrams("amusement")
    self.assertEqual(r, ['amusement'])

    _, r = self.anagrams2.get_anagrams("amusements")
    self.assertEqual(r, ['amusements'])

    _, r = self.anagrams2.get_anagrams("amuser")
    self.assertEqual(r, ['amuser', 'maseru'])

    _, r = self.anagrams2.get_anagrams("amusers")
    self.assertEqual(r, ['amusers', 'erasmus'])

    _, r = self.anagrams2.get_anagrams("amuses")
    self.assertEqual(r, ['amuses', 'assume'])

    _, r = self.anagrams2.get_anagrams("amusing")
    self.assertEqual(r, ['amusing'])

    _, r = self.anagrams2.get_anagrams("amusingly")
    self.assertEqual(r, ['amusingly'])

    _, r = self.anagrams2.get_anagrams("amy")
    self.assertEqual(r, ['amy', 'may'])

    _, r = self.anagrams2.get_anagrams("amyl")
    self.assertEqual(r, ['amyl'])

    _, r = self.anagrams2.get_anagrams("an")
    self.assertEqual(r, ['an'])

    _, r = self.anagrams2.get_anagrams("anabaptist")
    self.assertEqual(r, ['anabaptist'])

    _, r = self.anagrams2.get_anagrams("anabaptists")
    self.assertEqual(r, ['anabaptists'])

    _, r = self.anagrams2.get_anagrams("anabel")
    self.assertEqual(r, ['anabel'])

    _, r = self.anagrams2.get_anagrams("anachronism")
    self.assertEqual(r, ['anachronism'])

    _, r = self.anagrams2.get_anagrams("anachronisms")
    self.assertEqual(r, ['anachronisms'])

    _, r = self.anagrams2.get_anagrams("anachronistically")
    self.assertEqual(r, ['anachronistically'])

    _, r = self.anagrams2.get_anagrams("anaconda")
    self.assertEqual(r, ['anaconda'])

    _, r = self.anagrams2.get_anagrams("anacondas")
    self.assertEqual(r, ['anacondas'])

    _, r = self.anagrams2.get_anagrams("anacreon")
    self.assertEqual(r, ['anacreon'])

    _, r = self.anagrams2.get_anagrams("anaerobic")
    self.assertEqual(r, ['anaerobic'])

    _, r = self.anagrams2.get_anagrams("anagram")
    self.assertEqual(r, ['anagram'])

    _, r = self.anagrams2.get_anagrams("anagrams")
    self.assertEqual(r, ['anagrams'])

    _, r = self.anagrams2.get_anagrams("anaheim")
    self.assertEqual(r, ['anaheim'])

    _, r = self.anagrams2.get_anagrams("anal")
    self.assertEqual(r, ['alan', 'anal', 'lana'])

    _, r = self.anagrams2.get_anagrams("analects")
    self.assertEqual(r, ['analects'])

    _, r = self.anagrams2.get_anagrams("analog")
    self.assertEqual(r, ['analog', 'angola'])

    _, r = self.anagrams2.get_anagrams("analogical")
    self.assertEqual(r, ['analogical'])

    _, r = self.anagrams2.get_anagrams("analogies")
    self.assertEqual(r, ['analogies'])

    _, r = self.anagrams2.get_anagrams("analogous")
    self.assertEqual(r, ['analogous'])

    _, r = self.anagrams2.get_anagrams("analogously")
    self.assertEqual(r, ['analogously'])

    _, r = self.anagrams2.get_anagrams("analogue")
    self.assertEqual(r, ['analogue'])

    _, r = self.anagrams2.get_anagrams("analogues")
    self.assertEqual(r, ['analogues'])

    _, r = self.anagrams2.get_anagrams("analogy")
    self.assertEqual(r, ['analogy'])

    _, r = self.anagrams2.get_anagrams("analyses")
    self.assertEqual(r, ['analyses'])

    _, r = self.anagrams2.get_anagrams("analysis")
    self.assertEqual(r, ['analysis'])

    _, r = self.anagrams2.get_anagrams("analyst")
    self.assertEqual(r, ['analyst'])

    _, r = self.anagrams2.get_anagrams("analysts")
    self.assertEqual(r, ['analysts'])

    _, r = self.anagrams2.get_anagrams("analytic")
    self.assertEqual(r, ['analytic'])

    _, r = self.anagrams2.get_anagrams("analytical")
    self.assertEqual(r, ['analytical'])

    _, r = self.anagrams2.get_anagrams("analytically")
    self.assertEqual(r, ['analytically'])

    _, r = self.anagrams2.get_anagrams("analyticities")
    self.assertEqual(r, ['analyticities'])

    _, r = self.anagrams2.get_anagrams("analyticity")
    self.assertEqual(r, ['analyticity'])

    _, r = self.anagrams2.get_anagrams("analyzable")
    self.assertEqual(r, ['analyzable'])

    _, r = self.anagrams2.get_anagrams("analyze")
    self.assertEqual(r, ['analyze'])

    _, r = self.anagrams2.get_anagrams("analyzed")
    self.assertEqual(r, ['analyzed'])

    _, r = self.anagrams2.get_anagrams("analyzer")
    self.assertEqual(r, ['analyzer'])

    _, r = self.anagrams2.get_anagrams("analyzers")
    self.assertEqual(r, ['analyzers'])

    _, r = self.anagrams2.get_anagrams("analyzes")
    self.assertEqual(r, ['analyzes'])

    _, r = self.anagrams2.get_anagrams("analyzing")
    self.assertEqual(r, ['analyzing'])

    _, r = self.anagrams2.get_anagrams("anaphora")
    self.assertEqual(r, ['anaphora'])

    _, r = self.anagrams2.get_anagrams("anaphoric")
    self.assertEqual(r, ['anaphoric'])

    _, r = self.anagrams2.get_anagrams("anaphorically")
    self.assertEqual(r, ['anaphorically'])

    _, r = self.anagrams2.get_anagrams("anaplasmosis")
    self.assertEqual(r, ['anaplasmosis'])

    _, r = self.anagrams2.get_anagrams("anarchic")
    self.assertEqual(r, ['anarchic'])

    _, r = self.anagrams2.get_anagrams("anarchical")
    self.assertEqual(r, ['anarchical'])

    _, r = self.anagrams2.get_anagrams("anarchism")
    self.assertEqual(r, ['anarchism'])

    _, r = self.anagrams2.get_anagrams("anarchist")
    self.assertEqual(r, ['anarchist'])

    _, r = self.anagrams2.get_anagrams("anarchists")
    self.assertEqual(r, ['anarchists'])

    _, r = self.anagrams2.get_anagrams("anarchy")
    self.assertEqual(r, ['anarchy'])

    _, r = self.anagrams2.get_anagrams("anastasia")
    self.assertEqual(r, ['anastasia'])

    _, r = self.anagrams2.get_anagrams("anastomoses")
    self.assertEqual(r, ['anastomoses'])

    _, r = self.anagrams2.get_anagrams("anastomosis")
    self.assertEqual(r, ['anastomosis'])

    _, r = self.anagrams2.get_anagrams("anastomotic")
    self.assertEqual(r, ['anastomotic'])

    _, r = self.anagrams2.get_anagrams("anathema")
    self.assertEqual(r, ['anathema'])

    _, r = self.anagrams2.get_anagrams("anatole")
    self.assertEqual(r, ['anatole'])

    _, r = self.anagrams2.get_anagrams("anatolia")
    self.assertEqual(r, ['anatolia'])

    _, r = self.anagrams2.get_anagrams("anatolian")
    self.assertEqual(r, ['anatolian'])

    _, r = self.anagrams2.get_anagrams("anatomic")
    self.assertEqual(r, ['anatomic'])

    _, r = self.anagrams2.get_anagrams("anatomical")
    self.assertEqual(r, ['anatomical'])

    _, r = self.anagrams2.get_anagrams("anatomically")
    self.assertEqual(r, ['anatomically'])

    _, r = self.anagrams2.get_anagrams("anatomy")
    self.assertEqual(r, ['anatomy'])

    _, r = self.anagrams2.get_anagrams("ancestor")
    self.assertEqual(r, ['ancestor'])

    _, r = self.anagrams2.get_anagrams("ancestors")
    self.assertEqual(r, ['ancestors'])

    _, r = self.anagrams2.get_anagrams("ancestral")
    self.assertEqual(r, ['ancestral', 'lancaster'])

    _, r = self.anagrams2.get_anagrams("ancestry")
    self.assertEqual(r, ['ancestry'])

    _, r = self.anagrams2.get_anagrams("anchor")
    self.assertEqual(r, ['anchor', 'charon'])

    _, r = self.anagrams2.get_anagrams("anchorage")
    self.assertEqual(r, ['anchorage'])

    _, r = self.anagrams2.get_anagrams("anchorages")
    self.assertEqual(r, ['anchorages'])

    _, r = self.anagrams2.get_anagrams("anchored")
    self.assertEqual(r, ['anchored'])

    _, r = self.anagrams2.get_anagrams("anchoring")
    self.assertEqual(r, ['anchoring'])

    _, r = self.anagrams2.get_anagrams("anchorite")
    self.assertEqual(r, ['anchorite'])

    _, r = self.anagrams2.get_anagrams("anchoritism")
    self.assertEqual(r, ['anchoritism', 'harmonistic'])

    _, r = self.anagrams2.get_anagrams("anchors")
    self.assertEqual(r, ['anchors'])

    _, r = self.anagrams2.get_anagrams("anchovies")
    self.assertEqual(r, ['anchovies'])

    _, r = self.anagrams2.get_anagrams("anchovy")
    self.assertEqual(r, ['anchovy'])

    _, r = self.anagrams2.get_anagrams("ancient")
    self.assertEqual(r, ['ancient'])

    _, r = self.anagrams2.get_anagrams("anciently")
    self.assertEqual(r, ['anciently'])

    _, r = self.anagrams2.get_anagrams("ancients")
    self.assertEqual(r, ['ancients', 'instance'])

    _, r = self.anagrams2.get_anagrams("ancillary")
    self.assertEqual(r, ['ancillary'])

    _, r = self.anagrams2.get_anagrams("and")
    self.assertEqual(r, ['and', 'dan'])

    _, r = self.anagrams2.get_anagrams("andalusia")
    self.assertEqual(r, ['andalusia'])

    _, r = self.anagrams2.get_anagrams("andalusian")
    self.assertEqual(r, ['andalusian'])

    _, r = self.anagrams2.get_anagrams("andalusians")
    self.assertEqual(r, ['andalusians'])

    _, r = self.anagrams2.get_anagrams("andean")
    self.assertEqual(r, ['andean', 'deanna'])

    _, r = self.anagrams2.get_anagrams("anders")
    self.assertEqual(r, ['anders', 'sander', 'snared'])

    _, r = self.anagrams2.get_anagrams("andersen")
    self.assertEqual(r, ['andersen', 'ensnared'])

    _, r = self.anagrams2.get_anagrams("anderson")
    self.assertEqual(r, ['anderson'])

    _, r = self.anagrams2.get_anagrams("andes")
    self.assertEqual(r, ['andes', 'danes', 'deans', 'sedan', 'snead'])

    _, r = self.anagrams2.get_anagrams("anding")
    self.assertEqual(r, ['anding'])

    _, r = self.anagrams2.get_anagrams("andorra")
    self.assertEqual(r, ['andorra'])

    _, r = self.anagrams2.get_anagrams("andover")
    self.assertEqual(r, ['andover'])

    _, r = self.anagrams2.get_anagrams("andre")
    self.assertEqual(r, ['andre', 'arden'])

    _, r = self.anagrams2.get_anagrams("andrea")
    self.assertEqual(r, ['andrea'])

    _, r = self.anagrams2.get_anagrams("andrei")
    self.assertEqual(r, ['andrei', 'rained'])

    _, r = self.anagrams2.get_anagrams("andrew")
    self.assertEqual(r, ['andrew', 'wander', 'warden', 'warned'])

    _, r = self.anagrams2.get_anagrams("andrews")
    self.assertEqual(r, ['andrews', 'wanders', 'wardens'])

    _, r = self.anagrams2.get_anagrams("andromache")
    self.assertEqual(r, ['andromache'])

    _, r = self.anagrams2.get_anagrams("andromeda")
    self.assertEqual(r, ['andromeda'])

    _, r = self.anagrams2.get_anagrams("andy")
    self.assertEqual(r, ['andy'])

    _, r = self.anagrams2.get_anagrams("anecdotal")
    self.assertEqual(r, ['anecdotal'])

    _, r = self.anagrams2.get_anagrams("anecdote")
    self.assertEqual(r, ['anecdote'])

    _, r = self.anagrams2.get_anagrams("anecdotes")
    self.assertEqual(r, ['anecdotes'])

    _, r = self.anagrams2.get_anagrams("anechoic")
    self.assertEqual(r, ['anechoic'])

    _, r = self.anagrams2.get_anagrams("anemia")
    self.assertEqual(r, ['anemia'])

    _, r = self.anagrams2.get_anagrams("anemic")
    self.assertEqual(r, ['anemic', 'cinema'])

    _, r = self.anagrams2.get_anagrams("anemometer")
    self.assertEqual(r, ['anemometer'])

    _, r = self.anagrams2.get_anagrams("anemometers")
    self.assertEqual(r, ['anemometers'])

    _, r = self.anagrams2.get_anagrams("anemometry")
    self.assertEqual(r, ['anemometry'])

    _, r = self.anagrams2.get_anagrams("anemone")
    self.assertEqual(r, ['anemone'])

    _, r = self.anagrams2.get_anagrams("anesthesia")
    self.assertEqual(r, ['anesthesia'])

    _, r = self.anagrams2.get_anagrams("anesthetic")
    self.assertEqual(r, ['anesthetic'])

    _, r = self.anagrams2.get_anagrams("anesthetically")
    self.assertEqual(r, ['anesthetically'])

    _, r = self.anagrams2.get_anagrams("anesthetics")
    self.assertEqual(r, ['anesthetics'])

    _, r = self.anagrams2.get_anagrams("anesthetize")
    self.assertEqual(r, ['anesthetize'])

    _, r = self.anagrams2.get_anagrams("anesthetized")
    self.assertEqual(r, ['anesthetized'])

    _, r = self.anagrams2.get_anagrams("anesthetizes")
    self.assertEqual(r, ['anesthetizes'])

    _, r = self.anagrams2.get_anagrams("anesthetizing")
    self.assertEqual(r, ['anesthetizing'])

    _, r = self.anagrams2.get_anagrams("anew")
    self.assertEqual(r, ['anew', 'wane', 'wean'])

    _, r = self.anagrams2.get_anagrams("angel")
    self.assertEqual(r, ['angel', 'angle', 'galen', 'glean', 'lange'])

    _, r = self.anagrams2.get_anagrams("angela")
    self.assertEqual(r, ['angela'])

    _, r = self.anagrams2.get_anagrams("angeleno")
    self.assertEqual(r, ['angeleno'])

    _, r = self.anagrams2.get_anagrams("angelenos")
    self.assertEqual(r, ['angelenos'])

    _, r = self.anagrams2.get_anagrams("angeles")
    self.assertEqual(r, ['angeles', 'senegal'])

    _, r = self.anagrams2.get_anagrams("angelic")
    self.assertEqual(r, ['angelic'])

    _, r = self.anagrams2.get_anagrams("angelica")
    self.assertEqual(r, ['angelica'])

    _, r = self.anagrams2.get_anagrams("angelina")
    self.assertEqual(r, ['angelina'])

    _, r = self.anagrams2.get_anagrams("angeline")
    self.assertEqual(r, ['angeline'])

    _, r = self.anagrams2.get_anagrams("angelo")
    self.assertEqual(r, ['angelo'])

    _, r = self.anagrams2.get_anagrams("angels")
    self.assertEqual(r, ['angels', 'angles', 'gleans'])

    _, r = self.anagrams2.get_anagrams("anger")
    self.assertEqual(r, ['anger', 'range'])

    _, r = self.anagrams2.get_anagrams("angered")
    self.assertEqual(r, ['angered', 'enraged', 'grenade'])

    _, r = self.anagrams2.get_anagrams("angering")
    self.assertEqual(r, ['angering', 'enraging'])

    _, r = self.anagrams2.get_anagrams("angers")
    self.assertEqual(r, ['angers', 'ranges'])

    _, r = self.anagrams2.get_anagrams("angie")
    self.assertEqual(r, ['angie'])

    _, r = self.anagrams2.get_anagrams("angiography")
    self.assertEqual(r, ['angiography'])

    _, r = self.anagrams2.get_anagrams("angle")
    self.assertEqual(r, ['angel', 'angle', 'galen', 'glean', 'lange'])

    _, r = self.anagrams2.get_anagrams("angled")
    self.assertEqual(r, ['angled', 'dangle', 'glenda'])

    _, r = self.anagrams2.get_anagrams("angler")
    self.assertEqual(r, ['angler', 'erlang'])

    _, r = self.anagrams2.get_anagrams("anglers")
    self.assertEqual(r, ['anglers'])

    _, r = self.anagrams2.get_anagrams("angles")
    self.assertEqual(r, ['angels', 'angles', 'gleans'])

    _, r = self.anagrams2.get_anagrams("anglia")
    self.assertEqual(r, ['anglia'])

    _, r = self.anagrams2.get_anagrams("anglican")
    self.assertEqual(r, ['anglican'])

    _, r = self.anagrams2.get_anagrams("anglicanism")
    self.assertEqual(r, ['anglicanism'])

    _, r = self.anagrams2.get_anagrams("anglicanize")
    self.assertEqual(r, ['anglicanize'])

    _, r = self.anagrams2.get_anagrams("anglicanizes")
    self.assertEqual(r, ['anglicanizes'])

    _, r = self.anagrams2.get_anagrams("anglicans")
    self.assertEqual(r, ['anglicans'])

    _, r = self.anagrams2.get_anagrams("angling")
    self.assertEqual(r, ['angling'])

    _, r = self.anagrams2.get_anagrams("anglo")
    self.assertEqual(r, ['along', 'anglo', 'logan'])

    _, r = self.anagrams2.get_anagrams("anglophilia")
    self.assertEqual(r, ['anglophilia'])

    _, r = self.anagrams2.get_anagrams("anglophobia")
    self.assertEqual(r, ['anglophobia'])

    _, r = self.anagrams2.get_anagrams("angola")
    self.assertEqual(r, ['analog', 'angola'])

    _, r = self.anagrams2.get_anagrams("angora")
    self.assertEqual(r, ['angora'])

    _, r = self.anagrams2.get_anagrams("angrier")
    self.assertEqual(r, ['angrier', 'earring', 'rearing'])

    _, r = self.anagrams2.get_anagrams("angriest")
    self.assertEqual(r, ['angriest'])

    _, r = self.anagrams2.get_anagrams("angrily")
    self.assertEqual(r, ['angrily'])

    _, r = self.anagrams2.get_anagrams("angry")
    self.assertEqual(r, ['angry', 'rangy'])

    _, r = self.anagrams2.get_anagrams("angst")
    self.assertEqual(r, ['angst', 'gnats'])

    _, r = self.anagrams2.get_anagrams("angstrom")
    self.assertEqual(r, ['angstrom'])

    _, r = self.anagrams2.get_anagrams("anguish")
    self.assertEqual(r, ['anguish'])

    _, r = self.anagrams2.get_anagrams("anguished")
    self.assertEqual(r, ['anguished'])

    _, r = self.anagrams2.get_anagrams("angular")
    self.assertEqual(r, ['angular'])

    _, r = self.anagrams2.get_anagrams("angularly")
    self.assertEqual(r, ['angularly'])

    _, r = self.anagrams2.get_anagrams("angus")
    self.assertEqual(r, ['angus'])

    _, r = self.anagrams2.get_anagrams("anheuser")
    self.assertEqual(r, ['anheuser'])

    _, r = self.anagrams2.get_anagrams("anhydrous")
    self.assertEqual(r, ['anhydrous'])

    _, r = self.anagrams2.get_anagrams("anhydrously")
    self.assertEqual(r, ['anhydrously'])

    _, r = self.anagrams2.get_anagrams("aniline")
    self.assertEqual(r, ['aniline'])

    _, r = self.anagrams2.get_anagrams("animal")
    self.assertEqual(r, ['animal', 'manila'])

    _, r = self.anagrams2.get_anagrams("animals")
    self.assertEqual(r, ['animals'])

    _, r = self.anagrams2.get_anagrams("animate")
    self.assertEqual(r, ['animate'])

    _, r = self.anagrams2.get_anagrams("animated")
    self.assertEqual(r, ['animated'])

    _, r = self.anagrams2.get_anagrams("animatedly")
    self.assertEqual(r, ['animatedly'])

    _, r = self.anagrams2.get_anagrams("animately")
    self.assertEqual(r, ['animately'])

    _, r = self.anagrams2.get_anagrams("animateness")
    self.assertEqual(r, ['animateness'])

    _, r = self.anagrams2.get_anagrams("animates")
    self.assertEqual(r, ['animates'])

    _, r = self.anagrams2.get_anagrams("animating")
    self.assertEqual(r, ['animating'])

    _, r = self.anagrams2.get_anagrams("animation")
    self.assertEqual(r, ['animation'])

    _, r = self.anagrams2.get_anagrams("animations")
    self.assertEqual(r, ['animations'])

    _, r = self.anagrams2.get_anagrams("animator")
    self.assertEqual(r, ['animator'])

    _, r = self.anagrams2.get_anagrams("animators")
    self.assertEqual(r, ['animators'])

    _, r = self.anagrams2.get_anagrams("animism")
    self.assertEqual(r, ['animism'])

    _, r = self.anagrams2.get_anagrams("animized")
    self.assertEqual(r, ['animized'])

    _, r = self.anagrams2.get_anagrams("animosity")
    self.assertEqual(r, ['animosity'])

    _, r = self.anagrams2.get_anagrams("anion")
    self.assertEqual(r, ['anion'])

    _, r = self.anagrams2.get_anagrams("anionic")
    self.assertEqual(r, ['anionic'])

    _, r = self.anagrams2.get_anagrams("anions")
    self.assertEqual(r, ['anions'])

    _, r = self.anagrams2.get_anagrams("anise")
    self.assertEqual(r, ['anise', 'siena'])

    _, r = self.anagrams2.get_anagrams("aniseikonic")
    self.assertEqual(r, ['aniseikonic'])

    _, r = self.anagrams2.get_anagrams("anisotropic")
    self.assertEqual(r, ['anisotropic'])

    _, r = self.anagrams2.get_anagrams("anisotropy")
    self.assertEqual(r, ['anisotropy'])

    _, r = self.anagrams2.get_anagrams("anita")
    self.assertEqual(r, ['anita'])

    _, r = self.anagrams2.get_anagrams("ankara")
    self.assertEqual(r, ['ankara'])

    _, r = self.anagrams2.get_anagrams("ankle")
    self.assertEqual(r, ['ankle'])

    _, r = self.anagrams2.get_anagrams("ankles")
    self.assertEqual(r, ['ankles'])

    _, r = self.anagrams2.get_anagrams("ann")
    self.assertEqual(r, ['ann', 'nan'])

    _, r = self.anagrams2.get_anagrams("anna")
    self.assertEqual(r, ['anna'])

    _, r = self.anagrams2.get_anagrams("annal")
    self.assertEqual(r, ['annal'])

    _, r = self.anagrams2.get_anagrams("annalist")
    self.assertEqual(r, ['annalist'])

    _, r = self.anagrams2.get_anagrams("annalistic")
    self.assertEqual(r, ['annalistic'])

    _, r = self.anagrams2.get_anagrams("annals")
    self.assertEqual(r, ['annals'])

    _, r = self.anagrams2.get_anagrams("annapolis")
    self.assertEqual(r, ['annapolis'])

    _, r = self.anagrams2.get_anagrams("anne")
    self.assertEqual(r, ['anne'])

    _, r = self.anagrams2.get_anagrams("annette")
    self.assertEqual(r, ['annette', 'nanette'])

    _, r = self.anagrams2.get_anagrams("annex")
    self.assertEqual(r, ['annex'])

    _, r = self.anagrams2.get_anagrams("annexation")
    self.assertEqual(r, ['annexation'])

    _, r = self.anagrams2.get_anagrams("annexed")
    self.assertEqual(r, ['annexed'])

    _, r = self.anagrams2.get_anagrams("annexes")
    self.assertEqual(r, ['annexes'])

    _, r = self.anagrams2.get_anagrams("annexing")
    self.assertEqual(r, ['annexing'])

    _, r = self.anagrams2.get_anagrams("annie")
    self.assertEqual(r, ['annie', 'inane'])

    _, r = self.anagrams2.get_anagrams("annihilate")
    self.assertEqual(r, ['annihilate'])

    _, r = self.anagrams2.get_anagrams("annihilated")
    self.assertEqual(r, ['annihilated'])

    _, r = self.anagrams2.get_anagrams("annihilates")
    self.assertEqual(r, ['annihilates'])

    _, r = self.anagrams2.get_anagrams("annihilating")
    self.assertEqual(r, ['annihilating'])

    _, r = self.anagrams2.get_anagrams("annihilation")
    self.assertEqual(r, ['annihilation'])

    _, r = self.anagrams2.get_anagrams("anniversaries")
    self.assertEqual(r, ['anniversaries'])

    _, r = self.anagrams2.get_anagrams("anniversary")
    self.assertEqual(r, ['anniversary'])

    _, r = self.anagrams2.get_anagrams("annotate")
    self.assertEqual(r, ['annotate'])

    _, r = self.anagrams2.get_anagrams("annotated")
    self.assertEqual(r, ['annotated'])

    _, r = self.anagrams2.get_anagrams("annotates")
    self.assertEqual(r, ['annotates'])

    _, r = self.anagrams2.get_anagrams("annotating")
    self.assertEqual(r, ['annotating'])

    _, r = self.anagrams2.get_anagrams("annotation")
    self.assertEqual(r, ['annotation'])

    _, r = self.anagrams2.get_anagrams("annotations")
    self.assertEqual(r, ['annotations'])

    _, r = self.anagrams2.get_anagrams("announce")
    self.assertEqual(r, ['announce'])

    _, r = self.anagrams2.get_anagrams("announced")
    self.assertEqual(r, ['announced'])

    _, r = self.anagrams2.get_anagrams("announcement")
    self.assertEqual(r, ['announcement'])

    _, r = self.anagrams2.get_anagrams("announcements")
    self.assertEqual(r, ['announcements'])

    _, r = self.anagrams2.get_anagrams("announcer")
    self.assertEqual(r, ['announcer'])

    _, r = self.anagrams2.get_anagrams("announcers")
    self.assertEqual(r, ['announcers'])

    _, r = self.anagrams2.get_anagrams("announces")
    self.assertEqual(r, ['announces'])

    _, r = self.anagrams2.get_anagrams("announcing")
    self.assertEqual(r, ['announcing'])

    _, r = self.anagrams2.get_anagrams("annoy")
    self.assertEqual(r, ['annoy'])

    _, r = self.anagrams2.get_anagrams("annoyance")
    self.assertEqual(r, ['annoyance'])

    _, r = self.anagrams2.get_anagrams("annoyances")
    self.assertEqual(r, ['annoyances'])

    _, r = self.anagrams2.get_anagrams("annoyed")
    self.assertEqual(r, ['annoyed'])

    _, r = self.anagrams2.get_anagrams("annoyer")
    self.assertEqual(r, ['annoyer'])

    _, r = self.anagrams2.get_anagrams("annoyers")
    self.assertEqual(r, ['annoyers'])

    _, r = self.anagrams2.get_anagrams("annoying")
    self.assertEqual(r, ['annoying'])

    _, r = self.anagrams2.get_anagrams("annoyingly")
    self.assertEqual(r, ['annoyingly'])

    _, r = self.anagrams2.get_anagrams("annoys")
    self.assertEqual(r, ['annoys'])

    _, r = self.anagrams2.get_anagrams("annual")
    self.assertEqual(r, ['annual'])

    _, r = self.anagrams2.get_anagrams("annually")
    self.assertEqual(r, ['annually'])

    _, r = self.anagrams2.get_anagrams("annuals")
    self.assertEqual(r, ['annuals'])

    _, r = self.anagrams2.get_anagrams("annuity")
    self.assertEqual(r, ['annuity'])

    _, r = self.anagrams2.get_anagrams("annul")
    self.assertEqual(r, ['annul'])

    _, r = self.anagrams2.get_anagrams("annular")
    self.assertEqual(r, ['annular'])

    _, r = self.anagrams2.get_anagrams("annuli")
    self.assertEqual(r, ['annuli'])

    _, r = self.anagrams2.get_anagrams("annulled")
    self.assertEqual(r, ['annulled'])

    _, r = self.anagrams2.get_anagrams("annulling")
    self.assertEqual(r, ['annulling'])

    _, r = self.anagrams2.get_anagrams("annulment")
    self.assertEqual(r, ['annulment'])

    _, r = self.anagrams2.get_anagrams("annulments")
    self.assertEqual(r, ['annulments'])

    _, r = self.anagrams2.get_anagrams("annuls")
    self.assertEqual(r, ['annuls'])

    _, r = self.anagrams2.get_anagrams("annulus")
    self.assertEqual(r, ['annulus'])

    _, r = self.anagrams2.get_anagrams("annum")
    self.assertEqual(r, ['annum'])

    _, r = self.anagrams2.get_anagrams("annunciate")
    self.assertEqual(r, ['annunciate'])

    _, r = self.anagrams2.get_anagrams("annunciated")
    self.assertEqual(r, ['annunciated'])

    _, r = self.anagrams2.get_anagrams("annunciates")
    self.assertEqual(r, ['annunciates'])

    _, r = self.anagrams2.get_anagrams("annunciating")
    self.assertEqual(r, ['annunciating'])

    _, r = self.anagrams2.get_anagrams("annunciator")
    self.assertEqual(r, ['annunciator'])

    _, r = self.anagrams2.get_anagrams("annunciators")
    self.assertEqual(r, ['annunciators'])

    _, r = self.anagrams2.get_anagrams("anode")
    self.assertEqual(r, ['anode'])

    _, r = self.anagrams2.get_anagrams("anodes")
    self.assertEqual(r, ['anodes'])

    _, r = self.anagrams2.get_anagrams("anodize")
    self.assertEqual(r, ['anodize'])

    _, r = self.anagrams2.get_anagrams("anodized")
    self.assertEqual(r, ['anodized'])

    _, r = self.anagrams2.get_anagrams("anodizes")
    self.assertEqual(r, ['anodizes'])

    _, r = self.anagrams2.get_anagrams("anoint")
    self.assertEqual(r, ['anoint', 'nation'])

    _, r = self.anagrams2.get_anagrams("anointed")
    self.assertEqual(r, ['anointed'])

    _, r = self.anagrams2.get_anagrams("anointing")
    self.assertEqual(r, ['anointing'])

    _, r = self.anagrams2.get_anagrams("anoints")
    self.assertEqual(r, ['anoints', 'nations'])

    _, r = self.anagrams2.get_anagrams("anomalies")
    self.assertEqual(r, ['anomalies'])

    _, r = self.anagrams2.get_anagrams("anomalous")
    self.assertEqual(r, ['anomalous'])

    _, r = self.anagrams2.get_anagrams("anomalously")
    self.assertEqual(r, ['anomalously'])

    _, r = self.anagrams2.get_anagrams("anomaly")
    self.assertEqual(r, ['anomaly'])

    _, r = self.anagrams2.get_anagrams("anomic")
    self.assertEqual(r, ['anomic', 'camino', 'monica'])

    _, r = self.anagrams2.get_anagrams("anomie")
    self.assertEqual(r, ['anomie'])

    _, r = self.anagrams2.get_anagrams("anon")
    self.assertEqual(r, ['anon'])

    _, r = self.anagrams2.get_anagrams("anonymity")
    self.assertEqual(r, ['anonymity'])

    _, r = self.anagrams2.get_anagrams("anonymous")
    self.assertEqual(r, ['anonymous'])

    _, r = self.anagrams2.get_anagrams("anonymously")
    self.assertEqual(r, ['anonymously'])

    _, r = self.anagrams2.get_anagrams("anorexia")
    self.assertEqual(r, ['anorexia'])

    _, r = self.anagrams2.get_anagrams("another")
    self.assertEqual(r, ['another'])

    _, r = self.anagrams2.get_anagrams("anselm")
    self.assertEqual(r, ['anselm'])

    _, r = self.anagrams2.get_anagrams("anselmo")
    self.assertEqual(r, ['anselmo'])

    _, r = self.anagrams2.get_anagrams("ansi")
    self.assertEqual(r, ['ansi', 'sian'])

    _, r = self.anagrams2.get_anagrams("answer")
    self.assertEqual(r, ['answer'])

    _, r = self.anagrams2.get_anagrams("answerable")
    self.assertEqual(r, ['answerable'])

    _, r = self.anagrams2.get_anagrams("answered")
    self.assertEqual(r, ['answered'])

    _, r = self.anagrams2.get_anagrams("answerer")
    self.assertEqual(r, ['answerer'])

    _, r = self.anagrams2.get_anagrams("answerers")
    self.assertEqual(r, ['answerers'])

    _, r = self.anagrams2.get_anagrams("answering")
    self.assertEqual(r, ['answering'])

    _, r = self.anagrams2.get_anagrams("answers")
    self.assertEqual(r, ['answers', 'rawness'])

    _, r = self.anagrams2.get_anagrams("ant")
    self.assertEqual(r, ['ant', 'nat', 'tan'])

    _, r = self.anagrams2.get_anagrams("antaeus")
    self.assertEqual(r, ['antaeus'])

    _, r = self.anagrams2.get_anagrams("antagonism")
    self.assertEqual(r, ['antagonism'])

    _, r = self.anagrams2.get_anagrams("antagonisms")
    self.assertEqual(r, ['antagonisms'])

    _, r = self.anagrams2.get_anagrams("antagonist")
    self.assertEqual(r, ['antagonist', 'stagnation'])

    _, r = self.anagrams2.get_anagrams("antagonistic")
    self.assertEqual(r, ['antagonistic'])

    _, r = self.anagrams2.get_anagrams("antagonistically")
    self.assertEqual(r, ['antagonistically'])

    _, r = self.anagrams2.get_anagrams("antagonists")
    self.assertEqual(r, ['antagonists'])

    _, r = self.anagrams2.get_anagrams("antagonize")
    self.assertEqual(r, ['antagonize'])

    _, r = self.anagrams2.get_anagrams("antagonized")
    self.assertEqual(r, ['antagonized'])

    _, r = self.anagrams2.get_anagrams("antagonizes")
    self.assertEqual(r, ['antagonizes'])

    _, r = self.anagrams2.get_anagrams("antagonizing")
    self.assertEqual(r, ['antagonizing'])

    _, r = self.anagrams2.get_anagrams("antarctic")
    self.assertEqual(r, ['antarctic'])

    _, r = self.anagrams2.get_anagrams("antarctica")
    self.assertEqual(r, ['antarctica'])

    _, r = self.anagrams2.get_anagrams("antares")
    self.assertEqual(r, ['antares'])

    _, r = self.anagrams2.get_anagrams("ante")
    self.assertEqual(r, ['ante', 'nate', 'neat'])

    _, r = self.anagrams2.get_anagrams("anteater")
    self.assertEqual(r, ['anteater'])

    _, r = self.anagrams2.get_anagrams("anteaters")
    self.assertEqual(r, ['anteaters'])

    _, r = self.anagrams2.get_anagrams("antecedent")
    self.assertEqual(r, ['antecedent'])

    _, r = self.anagrams2.get_anagrams("antecedents")
    self.assertEqual(r, ['antecedents'])

    _, r = self.anagrams2.get_anagrams("antedate")
    self.assertEqual(r, ['antedate'])

    _, r = self.anagrams2.get_anagrams("antelope")
    self.assertEqual(r, ['antelope'])

    _, r = self.anagrams2.get_anagrams("antelopes")
    self.assertEqual(r, ['antelopes'])

    _, r = self.anagrams2.get_anagrams("antenna")
    self.assertEqual(r, ['antenna'])

    _, r = self.anagrams2.get_anagrams("antennae")
    self.assertEqual(r, ['antennae'])

    _, r = self.anagrams2.get_anagrams("antennas")
    self.assertEqual(r, ['antennas'])

    _, r = self.anagrams2.get_anagrams("anterior")
    self.assertEqual(r, ['anterior'])

    _, r = self.anagrams2.get_anagrams("anthem")
    self.assertEqual(r, ['anthem', 'hetman'])

    _, r = self.anagrams2.get_anagrams("anthems")
    self.assertEqual(r, ['anthems'])

    _, r = self.anagrams2.get_anagrams("anther")
    self.assertEqual(r, ['anther', 'tehran'])

    _, r = self.anagrams2.get_anagrams("anthologies")
    self.assertEqual(r, ['anthologies'])

    _, r = self.anagrams2.get_anagrams("anthology")
    self.assertEqual(r, ['anthology'])

    _, r = self.anagrams2.get_anagrams("anthony")
    self.assertEqual(r, ['anthony'])

    _, r = self.anagrams2.get_anagrams("anthracite")
    self.assertEqual(r, ['anthracite'])

    _, r = self.anagrams2.get_anagrams("anthropological")
    self.assertEqual(r, ['anthropological'])

    _, r = self.anagrams2.get_anagrams("anthropologically")
    self.assertEqual(r, ['anthropologically'])

    _, r = self.anagrams2.get_anagrams("anthropologist")
    self.assertEqual(r, ['anthropologist'])

    _, r = self.anagrams2.get_anagrams("anthropologists")
    self.assertEqual(r, ['anthropologists'])

    _, r = self.anagrams2.get_anagrams("anthropology")
    self.assertEqual(r, ['anthropology'])

    _, r = self.anagrams2.get_anagrams("anthropomorphic")
    self.assertEqual(r, ['anthropomorphic'])

    _, r = self.anagrams2.get_anagrams("anthropomorphically")
    self.assertEqual(r, ['anthropomorphically'])

    _, r = self.anagrams2.get_anagrams("anti")
    self.assertEqual(r, ['anti', 'tina'])

    _, r = self.anagrams2.get_anagrams("antibacterial")
    self.assertEqual(r, ['antibacterial'])

    _, r = self.anagrams2.get_anagrams("antibiotic")
    self.assertEqual(r, ['antibiotic'])

    _, r = self.anagrams2.get_anagrams("antibiotics")
    self.assertEqual(r, ['antibiotics'])

    _, r = self.anagrams2.get_anagrams("antibodies")
    self.assertEqual(r, ['antibodies'])

    _, r = self.anagrams2.get_anagrams("antibody")
    self.assertEqual(r, ['antibody'])

    _, r = self.anagrams2.get_anagrams("antic")
    self.assertEqual(r, ['antic'])

    _, r = self.anagrams2.get_anagrams("anticipate")
    self.assertEqual(r, ['anticipate'])

    _, r = self.anagrams2.get_anagrams("anticipated")
    self.assertEqual(r, ['anticipated'])

    _, r = self.anagrams2.get_anagrams("anticipates")
    self.assertEqual(r, ['anticipates'])

    _, r = self.anagrams2.get_anagrams("anticipating")
    self.assertEqual(r, ['anticipating'])

    _, r = self.anagrams2.get_anagrams("anticipation")
    self.assertEqual(r, ['anticipation'])

    _, r = self.anagrams2.get_anagrams("anticipations")
    self.assertEqual(r, ['anticipations'])

    _, r = self.anagrams2.get_anagrams("anticipatory")
    self.assertEqual(r, ['anticipatory'])

    _, r = self.anagrams2.get_anagrams("anticoagulation")
    self.assertEqual(r, ['anticoagulation'])

    _, r = self.anagrams2.get_anagrams("anticompetitive")
    self.assertEqual(r, ['anticompetitive'])

    _, r = self.anagrams2.get_anagrams("antics")
    self.assertEqual(r, ['antics'])

    _, r = self.anagrams2.get_anagrams("antidisestablishmentarianism")
    self.assertEqual(r, ['antidisestablishmentarianism'])

    _, r = self.anagrams2.get_anagrams("antidote")
    self.assertEqual(r, ['antidote'])

    _, r = self.anagrams2.get_anagrams("antidotes")
    self.assertEqual(r, ['antidotes', 'stationed'])

    _, r = self.anagrams2.get_anagrams("antietam")
    self.assertEqual(r, ['antietam'])

    _, r = self.anagrams2.get_anagrams("antiformant")
    self.assertEqual(r, ['antiformant'])

    _, r = self.anagrams2.get_anagrams("antifundamentalist")
    self.assertEqual(r, ['antifundamentalist'])

    _, r = self.anagrams2.get_anagrams("antigen")
    self.assertEqual(r, ['antigen'])

    _, r = self.anagrams2.get_anagrams("antigens")
    self.assertEqual(r, ['antigens'])

    _, r = self.anagrams2.get_anagrams("antigone")
    self.assertEqual(r, ['antigone', 'negation'])

    _, r = self.anagrams2.get_anagrams("antihistorical")
    self.assertEqual(r, ['antihistorical'])

    _, r = self.anagrams2.get_anagrams("antilles")
    self.assertEqual(r, ['antilles'])

    _, r = self.anagrams2.get_anagrams("antimicrobial")
    self.assertEqual(r, ['antimicrobial'])

    _, r = self.anagrams2.get_anagrams("antimony")
    self.assertEqual(r, ['antimony', 'antinomy'])

    _, r = self.anagrams2.get_anagrams("antinomian")
    self.assertEqual(r, ['antinomian'])

    _, r = self.anagrams2.get_anagrams("antinomy")
    self.assertEqual(r, ['antimony', 'antinomy'])

    _, r = self.anagrams2.get_anagrams("antioch")
    self.assertEqual(r, ['antioch'])

    _, r = self.anagrams2.get_anagrams("antipathy")
    self.assertEqual(r, ['antipathy'])

    _, r = self.anagrams2.get_anagrams("antiphonal")
    self.assertEqual(r, ['antiphonal'])

    _, r = self.anagrams2.get_anagrams("antipode")
    self.assertEqual(r, ['antipode'])

    _, r = self.anagrams2.get_anagrams("antipodes")
    self.assertEqual(r, ['antipodes'])

    _, r = self.anagrams2.get_anagrams("antiquarian")
    self.assertEqual(r, ['antiquarian'])

    _, r = self.anagrams2.get_anagrams("antiquarians")
    self.assertEqual(r, ['antiquarians'])

    _, r = self.anagrams2.get_anagrams("antiquate")
    self.assertEqual(r, ['antiquate'])

    _, r = self.anagrams2.get_anagrams("antiquated")
    self.assertEqual(r, ['antiquated'])

    _, r = self.anagrams2.get_anagrams("antique")
    self.assertEqual(r, ['antique'])

    _, r = self.anagrams2.get_anagrams("antiques")
    self.assertEqual(r, ['antiques'])

    _, r = self.anagrams2.get_anagrams("antiquities")
    self.assertEqual(r, ['antiquities'])

    _, r = self.anagrams2.get_anagrams("antiquity")
    self.assertEqual(r, ['antiquity'])

    _, r = self.anagrams2.get_anagrams("antiredeposition")
    self.assertEqual(r, ['antiredeposition'])

    _, r = self.anagrams2.get_anagrams("antiresonance")
    self.assertEqual(r, ['antiresonance'])

    _, r = self.anagrams2.get_anagrams("antiresonator")
    self.assertEqual(r, ['antiresonator'])

    _, r = self.anagrams2.get_anagrams("antisemitic")
    self.assertEqual(r, ['antisemitic'])

    _, r = self.anagrams2.get_anagrams("antisemitism")
    self.assertEqual(r, ['antisemitism'])

    _, r = self.anagrams2.get_anagrams("antiseptic")
    self.assertEqual(r, ['antiseptic'])

    _, r = self.anagrams2.get_anagrams("antisera")
    self.assertEqual(r, ['antisera'])

    _, r = self.anagrams2.get_anagrams("antiserum")
    self.assertEqual(r, ['antiserum'])

    _, r = self.anagrams2.get_anagrams("antislavery")
    self.assertEqual(r, ['antislavery'])

    _, r = self.anagrams2.get_anagrams("antisocial")
    self.assertEqual(r, ['antisocial'])

    _, r = self.anagrams2.get_anagrams("antisubmarine")
    self.assertEqual(r, ['antisubmarine'])

    _, r = self.anagrams2.get_anagrams("antisymmetric")
    self.assertEqual(r, ['antisymmetric'])

    _, r = self.anagrams2.get_anagrams("antisymmetry")
    self.assertEqual(r, ['antisymmetry'])

    _, r = self.anagrams2.get_anagrams("antithesis")
    self.assertEqual(r, ['antithesis'])

    _, r = self.anagrams2.get_anagrams("antithetical")
    self.assertEqual(r, ['antithetical'])

    _, r = self.anagrams2.get_anagrams("antithyroid")
    self.assertEqual(r, ['antithyroid'])

    _, r = self.anagrams2.get_anagrams("antitoxin")
    self.assertEqual(r, ['antitoxin'])

    _, r = self.anagrams2.get_anagrams("antitoxins")
    self.assertEqual(r, ['antitoxins'])

    _, r = self.anagrams2.get_anagrams("antitrust")
    self.assertEqual(r, ['antitrust'])

    _, r = self.anagrams2.get_anagrams("antler")
    self.assertEqual(r, ['antler', 'rental'])

    _, r = self.anagrams2.get_anagrams("antlered")
    self.assertEqual(r, ['antlered'])

    _, r = self.anagrams2.get_anagrams("antoine")
    self.assertEqual(r, ['antoine'])

    _, r = self.anagrams2.get_anagrams("antoinette")
    self.assertEqual(r, ['antoinette'])

    _, r = self.anagrams2.get_anagrams("anton")
    self.assertEqual(r, ['anton'])

    _, r = self.anagrams2.get_anagrams("antonio")
    self.assertEqual(r, ['antonio'])

    _, r = self.anagrams2.get_anagrams("antonovics")
    self.assertEqual(r, ['antonovics'])

    _, r = self.anagrams2.get_anagrams("antony")
    self.assertEqual(r, ['antony'])

    _, r = self.anagrams2.get_anagrams("ants")
    self.assertEqual(r, ['ants', 'stan'])

    _, r = self.anagrams2.get_anagrams("antwerp")
    self.assertEqual(r, ['antwerp'])

    _, r = self.anagrams2.get_anagrams("anus")
    self.assertEqual(r, ['anus'])

    _, r = self.anagrams2.get_anagrams("anvil")
    self.assertEqual(r, ['alvin', 'anvil'])

    _, r = self.anagrams2.get_anagrams("anvils")
    self.assertEqual(r, ['anvils'])

    _, r = self.anagrams2.get_anagrams("anxieties")
    self.assertEqual(r, ['anxieties'])

    _, r = self.anagrams2.get_anagrams("anxiety")
    self.assertEqual(r, ['anxiety'])

    _, r = self.anagrams2.get_anagrams("anxious")
    self.assertEqual(r, ['anxious'])

    _, r = self.anagrams2.get_anagrams("anxiously")
    self.assertEqual(r, ['anxiously'])

    _, r = self.anagrams2.get_anagrams("any")
    self.assertEqual(r, ['any', 'nay'])

    _, r = self.anagrams2.get_anagrams("anybody")
    self.assertEqual(r, ['anybody'])

    _, r = self.anagrams2.get_anagrams("anyhow")
    self.assertEqual(r, ['anyhow'])

    _, r = self.anagrams2.get_anagrams("anymore")
    self.assertEqual(r, ['anymore'])

    _, r = self.anagrams2.get_anagrams("anyone")
    self.assertEqual(r, ['anyone'])

    _, r = self.anagrams2.get_anagrams("anyplace")
    self.assertEqual(r, ['anyplace'])

    _, r = self.anagrams2.get_anagrams("anything")
    self.assertEqual(r, ['anything'])

    _, r = self.anagrams2.get_anagrams("anytime")
    self.assertEqual(r, ['amenity', 'anytime'])

    _, r = self.anagrams2.get_anagrams("anyway")
    self.assertEqual(r, ['anyway'])

    _, r = self.anagrams2.get_anagrams("anywhere")
    self.assertEqual(r, ['anywhere'])

    _, r = self.anagrams2.get_anagrams("aorta")
    self.assertEqual(r, ['aorta'])

    _, r = self.anagrams2.get_anagrams("apace")
    self.assertEqual(r, ['apace'])

    _, r = self.anagrams2.get_anagrams("apaches")
    self.assertEqual(r, ['apaches'])

    _, r = self.anagrams2.get_anagrams("apalachicola")
    self.assertEqual(r, ['apalachicola'])

    _, r = self.anagrams2.get_anagrams("apart")
    self.assertEqual(r, ['apart'])

    _, r = self.anagrams2.get_anagrams("apartment")
    self.assertEqual(r, ['apartment'])

    _, r = self.anagrams2.get_anagrams("apartments")
    self.assertEqual(r, ['apartments'])

    _, r = self.anagrams2.get_anagrams("apathetic")
    self.assertEqual(r, ['apathetic'])

    _, r = self.anagrams2.get_anagrams("apathy")
    self.assertEqual(r, ['apathy'])

    _, r = self.anagrams2.get_anagrams("ape")
    self.assertEqual(r, ['ape', 'pea'])

    _, r = self.anagrams2.get_anagrams("aped")
    self.assertEqual(r, ['aped'])

    _, r = self.anagrams2.get_anagrams("aperiodic")
    self.assertEqual(r, ['aperiodic'])

    _, r = self.anagrams2.get_anagrams("aperiodicity")
    self.assertEqual(r, ['aperiodicity'])

    _, r = self.anagrams2.get_anagrams("aperture")
    self.assertEqual(r, ['aperture'])

    _, r = self.anagrams2.get_anagrams("apes")
    self.assertEqual(r, ['apes', 'apse', 'peas'])

    _, r = self.anagrams2.get_anagrams("apetalous")
    self.assertEqual(r, ['apetalous'])

    _, r = self.anagrams2.get_anagrams("apex")
    self.assertEqual(r, ['apex'])

    _, r = self.anagrams2.get_anagrams("aphasia")
    self.assertEqual(r, ['aphasia'])

    _, r = self.anagrams2.get_anagrams("aphasic")
    self.assertEqual(r, ['aphasic'])

    _, r = self.anagrams2.get_anagrams("aphelion")
    self.assertEqual(r, ['aphelion'])

    _, r = self.anagrams2.get_anagrams("aphid")
    self.assertEqual(r, ['aphid'])

    _, r = self.anagrams2.get_anagrams("aphids")
    self.assertEqual(r, ['aphids'])

    _, r = self.anagrams2.get_anagrams("aphonic")
    self.assertEqual(r, ['aphonic'])

    _, r = self.anagrams2.get_anagrams("aphorism")
    self.assertEqual(r, ['aphorism'])

    _, r = self.anagrams2.get_anagrams("aphorisms")
    self.assertEqual(r, ['aphorisms'])

    _, r = self.anagrams2.get_anagrams("aphrodite")
    self.assertEqual(r, ['aphrodite', 'atrophied'])

    _, r = self.anagrams2.get_anagrams("apiaries")
    self.assertEqual(r, ['apiaries'])

    _, r = self.anagrams2.get_anagrams("apiary")
    self.assertEqual(r, ['apiary'])

    _, r = self.anagrams2.get_anagrams("apical")
    self.assertEqual(r, ['apical'])

    _, r = self.anagrams2.get_anagrams("apiece")
    self.assertEqual(r, ['apiece'])

    _, r = self.anagrams2.get_anagrams("aping")
    self.assertEqual(r, ['aping'])

    _, r = self.anagrams2.get_anagrams("apish")
    self.assertEqual(r, ['apish'])

    _, r = self.anagrams2.get_anagrams("aplenty")
    self.assertEqual(r, ['aplenty', 'penalty'])

    _, r = self.anagrams2.get_anagrams("aplomb")
    self.assertEqual(r, ['aplomb'])

    _, r = self.anagrams2.get_anagrams("apocalypse")
    self.assertEqual(r, ['apocalypse'])

    _, r = self.anagrams2.get_anagrams("apocalyptic")
    self.assertEqual(r, ['apocalyptic'])

    _, r = self.anagrams2.get_anagrams("apocrypha")
    self.assertEqual(r, ['apocrypha'])

    _, r = self.anagrams2.get_anagrams("apocryphal")
    self.assertEqual(r, ['apocryphal'])

    _, r = self.anagrams2.get_anagrams("apogee")
    self.assertEqual(r, ['apogee'])

    _, r = self.anagrams2.get_anagrams("apogees")
    self.assertEqual(r, ['apogees'])

    _, r = self.anagrams2.get_anagrams("apollinaire")
    self.assertEqual(r, ['apollinaire'])

    _, r = self.anagrams2.get_anagrams("apollo")
    self.assertEqual(r, ['apollo'])

    _, r = self.anagrams2.get_anagrams("apollonian")
    self.assertEqual(r, ['apollonian'])

    _, r = self.anagrams2.get_anagrams("apologetic")
    self.assertEqual(r, ['apologetic'])

    _, r = self.anagrams2.get_anagrams("apologetically")
    self.assertEqual(r, ['apologetically'])

    _, r = self.anagrams2.get_anagrams("apologia")
    self.assertEqual(r, ['apologia'])

    _, r = self.anagrams2.get_anagrams("apologies")
    self.assertEqual(r, ['apologies'])

    _, r = self.anagrams2.get_anagrams("apologist")
    self.assertEqual(r, ['apologist'])

    _, r = self.anagrams2.get_anagrams("apologists")
    self.assertEqual(r, ['apologists'])

    _, r = self.anagrams2.get_anagrams("apologize")
    self.assertEqual(r, ['apologize'])

    _, r = self.anagrams2.get_anagrams("apologized")
    self.assertEqual(r, ['apologized'])

    _, r = self.anagrams2.get_anagrams("apologizes")
    self.assertEqual(r, ['apologizes'])

    _, r = self.anagrams2.get_anagrams("apologizing")
    self.assertEqual(r, ['apologizing'])

    _, r = self.anagrams2.get_anagrams("apology")
    self.assertEqual(r, ['apology'])

    _, r = self.anagrams2.get_anagrams("apostate")
    self.assertEqual(r, ['apostate'])

    _, r = self.anagrams2.get_anagrams("apostle")
    self.assertEqual(r, ['apostle'])

    _, r = self.anagrams2.get_anagrams("apostles")
    self.assertEqual(r, ['apostles'])

    _, r = self.anagrams2.get_anagrams("apostolic")
    self.assertEqual(r, ['apostolic'])

    _, r = self.anagrams2.get_anagrams("apostrophe")
    self.assertEqual(r, ['apostrophe'])

    _, r = self.anagrams2.get_anagrams("apostrophes")
    self.assertEqual(r, ['apostrophes'])

    _, r = self.anagrams2.get_anagrams("apothecary")
    self.assertEqual(r, ['apothecary'])

    _, r = self.anagrams2.get_anagrams("apothegm")
    self.assertEqual(r, ['apothegm'])

    _, r = self.anagrams2.get_anagrams("apotheoses")
    self.assertEqual(r, ['apotheoses'])

    _, r = self.anagrams2.get_anagrams("apotheosis")
    self.assertEqual(r, ['apotheosis'])

    _, r = self.anagrams2.get_anagrams("appalachia")
    self.assertEqual(r, ['appalachia'])

    _, r = self.anagrams2.get_anagrams("appalachian")
    self.assertEqual(r, ['appalachian'])

    _, r = self.anagrams2.get_anagrams("appalachians")
    self.assertEqual(r, ['appalachians'])

    _, r = self.anagrams2.get_anagrams("appall")
    self.assertEqual(r, ['appall'])

    _, r = self.anagrams2.get_anagrams("appalled")
    self.assertEqual(r, ['appalled'])

    _, r = self.anagrams2.get_anagrams("appalling")
    self.assertEqual(r, ['appalling'])

    _, r = self.anagrams2.get_anagrams("appallingly")
    self.assertEqual(r, ['appallingly'])

    _, r = self.anagrams2.get_anagrams("appaloosas")
    self.assertEqual(r, ['appaloosas'])

    _, r = self.anagrams2.get_anagrams("appanage")
    self.assertEqual(r, ['appanage'])

    _, r = self.anagrams2.get_anagrams("apparatus")
    self.assertEqual(r, ['apparatus'])

    _, r = self.anagrams2.get_anagrams("apparel")
    self.assertEqual(r, ['apparel'])

    _, r = self.anagrams2.get_anagrams("appareled")
    self.assertEqual(r, ['appareled'])

    _, r = self.anagrams2.get_anagrams("apparent")
    self.assertEqual(r, ['apparent'])

    _, r = self.anagrams2.get_anagrams("apparently")
    self.assertEqual(r, ['apparently'])

    _, r = self.anagrams2.get_anagrams("apparition")
    self.assertEqual(r, ['apparition'])

    _, r = self.anagrams2.get_anagrams("apparitions")
    self.assertEqual(r, ['apparitions'])

    _, r = self.anagrams2.get_anagrams("appeal")
    self.assertEqual(r, ['appeal'])

    _, r = self.anagrams2.get_anagrams("appealed")
    self.assertEqual(r, ['appealed'])

    _, r = self.anagrams2.get_anagrams("appealer")
    self.assertEqual(r, ['appealer'])

    _, r = self.anagrams2.get_anagrams("appealers")
    self.assertEqual(r, ['appealers'])

    _, r = self.anagrams2.get_anagrams("appealing")
    self.assertEqual(r, ['appealing'])

    _, r = self.anagrams2.get_anagrams("appealingly")
    self.assertEqual(r, ['appealingly'])

    _, r = self.anagrams2.get_anagrams("appeals")
    self.assertEqual(r, ['appeals'])

    _, r = self.anagrams2.get_anagrams("appear")
    self.assertEqual(r, ['appear'])

    _, r = self.anagrams2.get_anagrams("appearance")
    self.assertEqual(r, ['appearance'])

    _, r = self.anagrams2.get_anagrams("appearances")
    self.assertEqual(r, ['appearances'])

    _, r = self.anagrams2.get_anagrams("appeared")
    self.assertEqual(r, ['appeared'])

    _, r = self.anagrams2.get_anagrams("appearer")
    self.assertEqual(r, ['appearer', 'reappear'])

    _, r = self.anagrams2.get_anagrams("appearers")
    self.assertEqual(r, ['appearers', 'reappears'])

    _, r = self.anagrams2.get_anagrams("appearing")
    self.assertEqual(r, ['appearing'])

    _, r = self.anagrams2.get_anagrams("appears")
    self.assertEqual(r, ['appears'])

    _, r = self.anagrams2.get_anagrams("appease")
    self.assertEqual(r, ['appease'])

    _, r = self.anagrams2.get_anagrams("appeased")
    self.assertEqual(r, ['appeased'])

    _, r = self.anagrams2.get_anagrams("appeasement")
    self.assertEqual(r, ['appeasement'])

    _, r = self.anagrams2.get_anagrams("appeases")
    self.assertEqual(r, ['appeases'])

    _, r = self.anagrams2.get_anagrams("appeasing")
    self.assertEqual(r, ['appeasing'])

    _, r = self.anagrams2.get_anagrams("appellant")
    self.assertEqual(r, ['appellant'])

    _, r = self.anagrams2.get_anagrams("appellants")
    self.assertEqual(r, ['appellants'])

    _, r = self.anagrams2.get_anagrams("appellate")
    self.assertEqual(r, ['appellate'])

    _, r = self.anagrams2.get_anagrams("appellation")
    self.assertEqual(r, ['appellation'])

    _, r = self.anagrams2.get_anagrams("append")
    self.assertEqual(r, ['append'])

    _, r = self.anagrams2.get_anagrams("appendage")
    self.assertEqual(r, ['appendage'])

    _, r = self.anagrams2.get_anagrams("appendages")
    self.assertEqual(r, ['appendages'])

    _, r = self.anagrams2.get_anagrams("appended")
    self.assertEqual(r, ['appended'])

    _, r = self.anagrams2.get_anagrams("appender")
    self.assertEqual(r, ['appender'])

    _, r = self.anagrams2.get_anagrams("appenders")
    self.assertEqual(r, ['appenders'])

    _, r = self.anagrams2.get_anagrams("appendices")
    self.assertEqual(r, ['appendices'])

    _, r = self.anagrams2.get_anagrams("appendicitis")
    self.assertEqual(r, ['appendicitis'])

    _, r = self.anagrams2.get_anagrams("appending")
    self.assertEqual(r, ['appending'])

    _, r = self.anagrams2.get_anagrams("appendix")
    self.assertEqual(r, ['appendix'])

    _, r = self.anagrams2.get_anagrams("appendixes")
    self.assertEqual(r, ['appendixes'])

    _, r = self.anagrams2.get_anagrams("appends")
    self.assertEqual(r, ['appends', 'snapped'])

    _, r = self.anagrams2.get_anagrams("appertain")
    self.assertEqual(r, ['appertain'])

    _, r = self.anagrams2.get_anagrams("appertains")
    self.assertEqual(r, ['appertains'])

    _, r = self.anagrams2.get_anagrams("appetite")
    self.assertEqual(r, ['appetite'])

    _, r = self.anagrams2.get_anagrams("appetites")
    self.assertEqual(r, ['appetites'])

    _, r = self.anagrams2.get_anagrams("appetizer")
    self.assertEqual(r, ['appetizer'])

    _, r = self.anagrams2.get_anagrams("appetizing")
    self.assertEqual(r, ['appetizing'])

    _, r = self.anagrams2.get_anagrams("appia")
    self.assertEqual(r, ['appia'])

    _, r = self.anagrams2.get_anagrams("appian")
    self.assertEqual(r, ['appian'])

    _, r = self.anagrams2.get_anagrams("applaud")
    self.assertEqual(r, ['applaud'])

    _, r = self.anagrams2.get_anagrams("applauded")
    self.assertEqual(r, ['applauded'])

    _, r = self.anagrams2.get_anagrams("applauding")
    self.assertEqual(r, ['applauding'])

    _, r = self.anagrams2.get_anagrams("applauds")
    self.assertEqual(r, ['applauds'])

    _, r = self.anagrams2.get_anagrams("applause")
    self.assertEqual(r, ['applause'])

    _, r = self.anagrams2.get_anagrams("apple")
    self.assertEqual(r, ['apple'])

    _, r = self.anagrams2.get_anagrams("appleby")
    self.assertEqual(r, ['appleby'])

    _, r = self.anagrams2.get_anagrams("applejack")
    self.assertEqual(r, ['applejack'])

    _, r = self.anagrams2.get_anagrams("apples")
    self.assertEqual(r, ['apples'])

    _, r = self.anagrams2.get_anagrams("appleton")
    self.assertEqual(r, ['appleton'])

    _, r = self.anagrams2.get_anagrams("appliance")
    self.assertEqual(r, ['appliance'])

    _, r = self.anagrams2.get_anagrams("appliances")
    self.assertEqual(r, ['appliances'])

    _, r = self.anagrams2.get_anagrams("applicability")
    self.assertEqual(r, ['applicability'])

    _, r = self.anagrams2.get_anagrams("applicable")
    self.assertEqual(r, ['applicable'])

    _, r = self.anagrams2.get_anagrams("applicant")
    self.assertEqual(r, ['applicant'])

    _, r = self.anagrams2.get_anagrams("applicants")
    self.assertEqual(r, ['applicants'])

    _, r = self.anagrams2.get_anagrams("application")
    self.assertEqual(r, ['application'])

    _, r = self.anagrams2.get_anagrams("applications")
    self.assertEqual(r, ['applications'])

    _, r = self.anagrams2.get_anagrams("applicative")
    self.assertEqual(r, ['applicative'])

    _, r = self.anagrams2.get_anagrams("applicatively")
    self.assertEqual(r, ['applicatively'])

    _, r = self.anagrams2.get_anagrams("applicator")
    self.assertEqual(r, ['applicator'])

    _, r = self.anagrams2.get_anagrams("applicators")
    self.assertEqual(r, ['applicators'])

    _, r = self.anagrams2.get_anagrams("applied")
    self.assertEqual(r, ['applied'])

    _, r = self.anagrams2.get_anagrams("applier")
    self.assertEqual(r, ['applier'])

    _, r = self.anagrams2.get_anagrams("appliers")
    self.assertEqual(r, ['appliers'])

    _, r = self.anagrams2.get_anagrams("applies")
    self.assertEqual(r, ['applies'])

    _, r = self.anagrams2.get_anagrams("applique")
    self.assertEqual(r, ['applique'])

    _, r = self.anagrams2.get_anagrams("apply")
    self.assertEqual(r, ['apply'])

    _, r = self.anagrams2.get_anagrams("applying")
    self.assertEqual(r, ['applying'])

    _, r = self.anagrams2.get_anagrams("appoint")
    self.assertEqual(r, ['appoint'])

    _, r = self.anagrams2.get_anagrams("appointed")
    self.assertEqual(r, ['appointed'])

    _, r = self.anagrams2.get_anagrams("appointee")
    self.assertEqual(r, ['appointee'])

    _, r = self.anagrams2.get_anagrams("appointees")
    self.assertEqual(r, ['appointees'])

    _, r = self.anagrams2.get_anagrams("appointer")
    self.assertEqual(r, ['appointer'])

    _, r = self.anagrams2.get_anagrams("appointers")
    self.assertEqual(r, ['appointers'])

    _, r = self.anagrams2.get_anagrams("appointing")
    self.assertEqual(r, ['appointing'])

    _, r = self.anagrams2.get_anagrams("appointive")
    self.assertEqual(r, ['appointive'])

    _, r = self.anagrams2.get_anagrams("appointment")
    self.assertEqual(r, ['appointment'])

    _, r = self.anagrams2.get_anagrams("appointments")
    self.assertEqual(r, ['appointments'])

    _, r = self.anagrams2.get_anagrams("appoints")
    self.assertEqual(r, ['appoints'])

    _, r = self.anagrams2.get_anagrams("appomattox")
    self.assertEqual(r, ['appomattox'])

    _, r = self.anagrams2.get_anagrams("apportion")
    self.assertEqual(r, ['apportion'])

    _, r = self.anagrams2.get_anagrams("apportioned")
    self.assertEqual(r, ['apportioned'])

    _, r = self.anagrams2.get_anagrams("apportioning")
    self.assertEqual(r, ['apportioning'])

    _, r = self.anagrams2.get_anagrams("apportionment")
    self.assertEqual(r, ['apportionment'])

    _, r = self.anagrams2.get_anagrams("apportionments")
    self.assertEqual(r, ['apportionments'])

    _, r = self.anagrams2.get_anagrams("apportions")
    self.assertEqual(r, ['apportions'])

    _, r = self.anagrams2.get_anagrams("apposite")
    self.assertEqual(r, ['apposite'])

    _, r = self.anagrams2.get_anagrams("appraisal")
    self.assertEqual(r, ['appraisal'])

    _, r = self.anagrams2.get_anagrams("appraisals")
    self.assertEqual(r, ['appraisals'])

    _, r = self.anagrams2.get_anagrams("appraise")
    self.assertEqual(r, ['appraise'])

    _, r = self.anagrams2.get_anagrams("appraised")
    self.assertEqual(r, ['appraised', 'disappear'])

    _, r = self.anagrams2.get_anagrams("appraiser")
    self.assertEqual(r, ['appraiser'])

    _, r = self.anagrams2.get_anagrams("appraisers")
    self.assertEqual(r, ['appraisers'])

    _, r = self.anagrams2.get_anagrams("appraises")
    self.assertEqual(r, ['appraises'])

    _, r = self.anagrams2.get_anagrams("appraising")
    self.assertEqual(r, ['appraising'])

    _, r = self.anagrams2.get_anagrams("appraisingly")
    self.assertEqual(r, ['appraisingly'])

    _, r = self.anagrams2.get_anagrams("appreciable")
    self.assertEqual(r, ['appreciable'])

    _, r = self.anagrams2.get_anagrams("appreciably")
    self.assertEqual(r, ['appreciably'])

    _, r = self.anagrams2.get_anagrams("appreciate")
    self.assertEqual(r, ['appreciate'])

    _, r = self.anagrams2.get_anagrams("appreciated")
    self.assertEqual(r, ['appreciated'])

    _, r = self.anagrams2.get_anagrams("appreciates")
    self.assertEqual(r, ['appreciates'])

    _, r = self.anagrams2.get_anagrams("appreciating")
    self.assertEqual(r, ['appreciating'])

    _, r = self.anagrams2.get_anagrams("appreciation")
    self.assertEqual(r, ['appreciation'])

    _, r = self.anagrams2.get_anagrams("appreciations")
    self.assertEqual(r, ['appreciations'])

    _, r = self.anagrams2.get_anagrams("appreciative")
    self.assertEqual(r, ['appreciative'])

    _, r = self.anagrams2.get_anagrams("appreciatively")
    self.assertEqual(r, ['appreciatively'])

    _, r = self.anagrams2.get_anagrams("apprehend")
    self.assertEqual(r, ['apprehend'])

    _, r = self.anagrams2.get_anagrams("apprehended")
    self.assertEqual(r, ['apprehended'])

    _, r = self.anagrams2.get_anagrams("apprehensible")
    self.assertEqual(r, ['apprehensible'])

    _, r = self.anagrams2.get_anagrams("apprehension")
    self.assertEqual(r, ['apprehension'])

    _, r = self.anagrams2.get_anagrams("apprehensions")
    self.assertEqual(r, ['apprehensions'])

    _, r = self.anagrams2.get_anagrams("apprehensive")
    self.assertEqual(r, ['apprehensive'])

    _, r = self.anagrams2.get_anagrams("apprehensively")
    self.assertEqual(r, ['apprehensively'])

    _, r = self.anagrams2.get_anagrams("apprehensiveness")
    self.assertEqual(r, ['apprehensiveness'])

    _, r = self.anagrams2.get_anagrams("apprentice")
    self.assertEqual(r, ['apprentice'])

    _, r = self.anagrams2.get_anagrams("apprenticed")
    self.assertEqual(r, ['apprenticed'])

    _, r = self.anagrams2.get_anagrams("apprentices")
    self.assertEqual(r, ['apprentices'])

    _, r = self.anagrams2.get_anagrams("apprenticeship")
    self.assertEqual(r, ['apprenticeship'])

    _, r = self.anagrams2.get_anagrams("apprise")
    self.assertEqual(r, ['apprise'])

    _, r = self.anagrams2.get_anagrams("apprised")
    self.assertEqual(r, ['apprised'])

    _, r = self.anagrams2.get_anagrams("apprises")
    self.assertEqual(r, ['apprises'])

    _, r = self.anagrams2.get_anagrams("apprising")
    self.assertEqual(r, ['apprising'])

    _, r = self.anagrams2.get_anagrams("approach")
    self.assertEqual(r, ['approach'])

    _, r = self.anagrams2.get_anagrams("approachability")
    self.assertEqual(r, ['approachability'])

    _, r = self.anagrams2.get_anagrams("approachable")
    self.assertEqual(r, ['approachable'])

    _, r = self.anagrams2.get_anagrams("approached")
    self.assertEqual(r, ['approached'])

    _, r = self.anagrams2.get_anagrams("approacher")
    self.assertEqual(r, ['approacher'])

    _, r = self.anagrams2.get_anagrams("approachers")
    self.assertEqual(r, ['approachers'])

    _, r = self.anagrams2.get_anagrams("approaches")
    self.assertEqual(r, ['approaches'])

    _, r = self.anagrams2.get_anagrams("approaching")
    self.assertEqual(r, ['approaching'])

    _, r = self.anagrams2.get_anagrams("approbate")
    self.assertEqual(r, ['approbate'])

    _, r = self.anagrams2.get_anagrams("approbation")
    self.assertEqual(r, ['approbation'])

    _, r = self.anagrams2.get_anagrams("appropriate")
    self.assertEqual(r, ['appropriate'])

    _, r = self.anagrams2.get_anagrams("appropriated")
    self.assertEqual(r, ['appropriated'])

    _, r = self.anagrams2.get_anagrams("appropriately")
    self.assertEqual(r, ['appropriately'])

    _, r = self.anagrams2.get_anagrams("appropriateness")
    self.assertEqual(r, ['appropriateness'])

    _, r = self.anagrams2.get_anagrams("appropriates")
    self.assertEqual(r, ['appropriates'])

    _, r = self.anagrams2.get_anagrams("appropriating")
    self.assertEqual(r, ['appropriating'])

    _, r = self.anagrams2.get_anagrams("appropriation")
    self.assertEqual(r, ['appropriation'])

    _, r = self.anagrams2.get_anagrams("appropriations")
    self.assertEqual(r, ['appropriations'])

    _, r = self.anagrams2.get_anagrams("appropriator")
    self.assertEqual(r, ['appropriator'])

    _, r = self.anagrams2.get_anagrams("appropriators")
    self.assertEqual(r, ['appropriators'])

    _, r = self.anagrams2.get_anagrams("approval")
    self.assertEqual(r, ['approval'])

    _, r = self.anagrams2.get_anagrams("approvals")
    self.assertEqual(r, ['approvals'])

    _, r = self.anagrams2.get_anagrams("approve")
    self.assertEqual(r, ['approve'])

    _, r = self.anagrams2.get_anagrams("approved")
    self.assertEqual(r, ['approved'])

    _, r = self.anagrams2.get_anagrams("approver")
    self.assertEqual(r, ['approver'])

    _, r = self.anagrams2.get_anagrams("approvers")
    self.assertEqual(r, ['approvers'])

    _, r = self.anagrams2.get_anagrams("approves")
    self.assertEqual(r, ['approves'])

    _, r = self.anagrams2.get_anagrams("approving")
    self.assertEqual(r, ['approving'])

    _, r = self.anagrams2.get_anagrams("approvingly")
    self.assertEqual(r, ['approvingly'])

    _, r = self.anagrams2.get_anagrams("approximate")
    self.assertEqual(r, ['approximate'])

    _, r = self.anagrams2.get_anagrams("approximated")
    self.assertEqual(r, ['approximated'])

    _, r = self.anagrams2.get_anagrams("approximately")
    self.assertEqual(r, ['approximately'])

    _, r = self.anagrams2.get_anagrams("approximates")
    self.assertEqual(r, ['approximates'])

    _, r = self.anagrams2.get_anagrams("approximating")
    self.assertEqual(r, ['approximating'])

    _, r = self.anagrams2.get_anagrams("approximation")
    self.assertEqual(r, ['approximation'])

    _, r = self.anagrams2.get_anagrams("approximations")
    self.assertEqual(r, ['approximations'])

    _, r = self.anagrams2.get_anagrams("appurtenance")
    self.assertEqual(r, ['appurtenance'])

    _, r = self.anagrams2.get_anagrams("appurtenances")
    self.assertEqual(r, ['appurtenances'])

    _, r = self.anagrams2.get_anagrams("apricot")
    self.assertEqual(r, ['apricot'])

    _, r = self.anagrams2.get_anagrams("apricots")
    self.assertEqual(r, ['apricots'])

    _, r = self.anagrams2.get_anagrams("april")
    self.assertEqual(r, ['april'])

    _, r = self.anagrams2.get_anagrams("aprils")
    self.assertEqual(r, ['aprils', 'spiral'])

    _, r = self.anagrams2.get_anagrams("apron")
    self.assertEqual(r, ['apron'])

    _, r = self.anagrams2.get_anagrams("aprons")
    self.assertEqual(r, ['aprons', 'parson'])

    _, r = self.anagrams2.get_anagrams("apropos")
    self.assertEqual(r, ['apropos'])

    _, r = self.anagrams2.get_anagrams("apse")
    self.assertEqual(r, ['apes', 'apse', 'peas'])

    _, r = self.anagrams2.get_anagrams("apsis")
    self.assertEqual(r, ['apsis'])

    _, r = self.anagrams2.get_anagrams("apt")
    self.assertEqual(r, ['apt', 'pat', 'tap'])

    _, r = self.anagrams2.get_anagrams("aptitude")
    self.assertEqual(r, ['aptitude'])

    _, r = self.anagrams2.get_anagrams("aptitudes")
    self.assertEqual(r, ['aptitudes'])

    _, r = self.anagrams2.get_anagrams("aptly")
    self.assertEqual(r, ['aptly'])

    _, r = self.anagrams2.get_anagrams("aptness")
    self.assertEqual(r, ['aptness'])

    _, r = self.anagrams2.get_anagrams("aqua")
    self.assertEqual(r, ['aqua'])

    _, r = self.anagrams2.get_anagrams("aquaria")
    self.assertEqual(r, ['aquaria'])

    _, r = self.anagrams2.get_anagrams("aquarium")
    self.assertEqual(r, ['aquarium'])

    _, r = self.anagrams2.get_anagrams("aquarius")
    self.assertEqual(r, ['aquarius'])

    _, r = self.anagrams2.get_anagrams("aquatic")
    self.assertEqual(r, ['aquatic'])

    _, r = self.anagrams2.get_anagrams("aqueduct")
    self.assertEqual(r, ['aqueduct'])

    _, r = self.anagrams2.get_anagrams("aqueducts")
    self.assertEqual(r, ['aqueducts'])

    _, r = self.anagrams2.get_anagrams("aqueous")
    self.assertEqual(r, ['aqueous'])

    _, r = self.anagrams2.get_anagrams("aquifer")
    self.assertEqual(r, ['aquifer'])

    _, r = self.anagrams2.get_anagrams("aquifers")
    self.assertEqual(r, ['aquifers'])

    _, r = self.anagrams2.get_anagrams("aquila")
    self.assertEqual(r, ['aquila'])

    _, r = self.anagrams2.get_anagrams("aquinas")
    self.assertEqual(r, ['aquinas'])

    _, r = self.anagrams2.get_anagrams("arab")
    self.assertEqual(r, ['arab'])

    _, r = self.anagrams2.get_anagrams("arabesque")
    self.assertEqual(r, ['arabesque'])

    _, r = self.anagrams2.get_anagrams("arabia")
    self.assertEqual(r, ['arabia'])

    _, r = self.anagrams2.get_anagrams("arabian")
    self.assertEqual(r, ['arabian'])

    _, r = self.anagrams2.get_anagrams("arabianize")
    self.assertEqual(r, ['arabianize'])

    _, r = self.anagrams2.get_anagrams("arabianizes")
    self.assertEqual(r, ['arabianizes'])

    _, r = self.anagrams2.get_anagrams("arabians")
    self.assertEqual(r, ['arabians'])

    _, r = self.anagrams2.get_anagrams("arabic")
    self.assertEqual(r, ['arabic'])

    _, r = self.anagrams2.get_anagrams("arabicize")
    self.assertEqual(r, ['arabicize'])

    _, r = self.anagrams2.get_anagrams("arabicizes")
    self.assertEqual(r, ['arabicizes'])

    _, r = self.anagrams2.get_anagrams("arable")
    self.assertEqual(r, ['arable'])

    _, r = self.anagrams2.get_anagrams("arabs")
    self.assertEqual(r, ['arabs'])

    _, r = self.anagrams2.get_anagrams("araby")
    self.assertEqual(r, ['araby'])

    _, r = self.anagrams2.get_anagrams("arachne")
    self.assertEqual(r, ['arachne'])

    _, r = self.anagrams2.get_anagrams("arachnid")
    self.assertEqual(r, ['arachnid'])

    _, r = self.anagrams2.get_anagrams("arachnids")
    self.assertEqual(r, ['arachnids'])

    _, r = self.anagrams2.get_anagrams("aramco")
    self.assertEqual(r, ['aramco'])

    _, r = self.anagrams2.get_anagrams("arapaho")
    self.assertEqual(r, ['arapaho'])

    _, r = self.anagrams2.get_anagrams("arbiter")
    self.assertEqual(r, ['arbiter'])

    _, r = self.anagrams2.get_anagrams("arbiters")
    self.assertEqual(r, ['arbiters'])

    _, r = self.anagrams2.get_anagrams("arbitrarily")
    self.assertEqual(r, ['arbitrarily'])

    _, r = self.anagrams2.get_anagrams("arbitrariness")
    self.assertEqual(r, ['arbitrariness'])

    _, r = self.anagrams2.get_anagrams("arbitrary")
    self.assertEqual(r, ['arbitrary'])

    _, r = self.anagrams2.get_anagrams("arbitrate")
    self.assertEqual(r, ['arbitrate'])

    _, r = self.anagrams2.get_anagrams("arbitrated")
    self.assertEqual(r, ['arbitrated'])

    _, r = self.anagrams2.get_anagrams("arbitrates")
    self.assertEqual(r, ['arbitrates'])

    _, r = self.anagrams2.get_anagrams("arbitrating")
    self.assertEqual(r, ['arbitrating'])

    _, r = self.anagrams2.get_anagrams("arbitration")
    self.assertEqual(r, ['arbitration'])

    _, r = self.anagrams2.get_anagrams("arbitrator")
    self.assertEqual(r, ['arbitrator'])

    _, r = self.anagrams2.get_anagrams("arbitrators")
    self.assertEqual(r, ['arbitrators'])

    _, r = self.anagrams2.get_anagrams("arbor")
    self.assertEqual(r, ['arbor'])

    _, r = self.anagrams2.get_anagrams("arboreal")
    self.assertEqual(r, ['arboreal'])

    _, r = self.anagrams2.get_anagrams("arbors")
    self.assertEqual(r, ['arbors'])

    _, r = self.anagrams2.get_anagrams("arc")
    self.assertEqual(r, ['arc', 'car'])

    _, r = self.anagrams2.get_anagrams("arcade")
    self.assertEqual(r, ['arcade'])

    _, r = self.anagrams2.get_anagrams("arcaded")
    self.assertEqual(r, ['arcaded'])

    _, r = self.anagrams2.get_anagrams("arcades")
    self.assertEqual(r, ['arcades'])

    _, r = self.anagrams2.get_anagrams("arcadia")
    self.assertEqual(r, ['arcadia'])

    _, r = self.anagrams2.get_anagrams("arcadian")
    self.assertEqual(r, ['arcadian'])

    _, r = self.anagrams2.get_anagrams("arcane")
    self.assertEqual(r, ['arcane'])

    _, r = self.anagrams2.get_anagrams("arced")
    self.assertEqual(r, ['arced', 'cared', 'cedar', 'raced'])

    _, r = self.anagrams2.get_anagrams("arch")
    self.assertEqual(r, ['arch', 'char'])

    _, r = self.anagrams2.get_anagrams("archaic")
    self.assertEqual(r, ['archaic'])

    _, r = self.anagrams2.get_anagrams("archaically")
    self.assertEqual(r, ['archaically'])

    _, r = self.anagrams2.get_anagrams("archaicness")
    self.assertEqual(r, ['archaicness'])

    _, r = self.anagrams2.get_anagrams("archaism")
    self.assertEqual(r, ['archaism', 'charisma'])

    _, r = self.anagrams2.get_anagrams("archaize")
    self.assertEqual(r, ['archaize'])

    _, r = self.anagrams2.get_anagrams("archangel")
    self.assertEqual(r, ['archangel'])

    _, r = self.anagrams2.get_anagrams("archangels")
    self.assertEqual(r, ['archangels'])

    _, r = self.anagrams2.get_anagrams("archbishop")
    self.assertEqual(r, ['archbishop'])

    _, r = self.anagrams2.get_anagrams("archdiocese")
    self.assertEqual(r, ['archdiocese'])

    _, r = self.anagrams2.get_anagrams("archdioceses")
    self.assertEqual(r, ['archdioceses'])

    _, r = self.anagrams2.get_anagrams("arched")
    self.assertEqual(r, ['arched'])

    _, r = self.anagrams2.get_anagrams("archenemy")
    self.assertEqual(r, ['archenemy'])

    _, r = self.anagrams2.get_anagrams("archeological")
    self.assertEqual(r, ['archeological'])

    _, r = self.anagrams2.get_anagrams("archeologist")
    self.assertEqual(r, ['archeologist'])

    _, r = self.anagrams2.get_anagrams("archeology")
    self.assertEqual(r, ['archeology'])

    _, r = self.anagrams2.get_anagrams("archer")
    self.assertEqual(r, ['archer'])

    _, r = self.anagrams2.get_anagrams("archers")
    self.assertEqual(r, ['archers', 'crasher'])

    _, r = self.anagrams2.get_anagrams("archery")
    self.assertEqual(r, ['archery'])

    _, r = self.anagrams2.get_anagrams("arches")
    self.assertEqual(r, ['arches', 'casher', 'chaser', 'search'])

    _, r = self.anagrams2.get_anagrams("archetype")
    self.assertEqual(r, ['archetype'])

    _, r = self.anagrams2.get_anagrams("archfool")
    self.assertEqual(r, ['archfool'])

    _, r = self.anagrams2.get_anagrams("archibald")
    self.assertEqual(r, ['archibald'])

    _, r = self.anagrams2.get_anagrams("archie")
    self.assertEqual(r, ['archie'])

    _, r = self.anagrams2.get_anagrams("archimedes")
    self.assertEqual(r, ['archimedes'])

    _, r = self.anagrams2.get_anagrams("arching")
    self.assertEqual(r, ['arching', 'chagrin'])

    _, r = self.anagrams2.get_anagrams("archipelago")
    self.assertEqual(r, ['archipelago'])

    _, r = self.anagrams2.get_anagrams("archipelagoes")
    self.assertEqual(r, ['archipelagoes'])

    _, r = self.anagrams2.get_anagrams("architect")
    self.assertEqual(r, ['architect'])

    _, r = self.anagrams2.get_anagrams("architectonic")
    self.assertEqual(r, ['architectonic'])

    _, r = self.anagrams2.get_anagrams("architects")
    self.assertEqual(r, ['architects'])

    _, r = self.anagrams2.get_anagrams("architectural")
    self.assertEqual(r, ['architectural'])

    _, r = self.anagrams2.get_anagrams("architecturally")
    self.assertEqual(r, ['architecturally'])

    _, r = self.anagrams2.get_anagrams("architecture")
    self.assertEqual(r, ['architecture'])

    _, r = self.anagrams2.get_anagrams("architectures")
    self.assertEqual(r, ['architectures'])

    _, r = self.anagrams2.get_anagrams("archival")
    self.assertEqual(r, ['archival'])

    _, r = self.anagrams2.get_anagrams("archive")
    self.assertEqual(r, ['archive'])

    _, r = self.anagrams2.get_anagrams("archived")
    self.assertEqual(r, ['archived'])

    _, r = self.anagrams2.get_anagrams("archiver")
    self.assertEqual(r, ['archiver'])

    _, r = self.anagrams2.get_anagrams("archivers")
    self.assertEqual(r, ['archivers'])

    _, r = self.anagrams2.get_anagrams("archives")
    self.assertEqual(r, ['archives'])

    _, r = self.anagrams2.get_anagrams("archiving")
    self.assertEqual(r, ['archiving'])

    _, r = self.anagrams2.get_anagrams("archivist")
    self.assertEqual(r, ['archivist'])

    _, r = self.anagrams2.get_anagrams("archly")
    self.assertEqual(r, ['archly'])

    _, r = self.anagrams2.get_anagrams("arcing")
    self.assertEqual(r, ['arcing', 'caring', 'racing'])

    _, r = self.anagrams2.get_anagrams("arclike")
    self.assertEqual(r, ['arclike'])

    _, r = self.anagrams2.get_anagrams("arco")
    self.assertEqual(r, ['arco'])

    _, r = self.anagrams2.get_anagrams("arcs")
    self.assertEqual(r, ['arcs', 'cars', 'scar'])

    _, r = self.anagrams2.get_anagrams("arcsine")
    self.assertEqual(r, ['arcsine', 'arsenic'])

    _, r = self.anagrams2.get_anagrams("arctangent")
    self.assertEqual(r, ['arctangent'])

    _, r = self.anagrams2.get_anagrams("arctic")
    self.assertEqual(r, ['arctic'])

    _, r = self.anagrams2.get_anagrams("arcturus")
    self.assertEqual(r, ['arcturus'])

    _, r = self.anagrams2.get_anagrams("arden")
    self.assertEqual(r, ['andre', 'arden'])

    _, r = self.anagrams2.get_anagrams("ardent")
    self.assertEqual(r, ['ardent', 'ranted'])

    _, r = self.anagrams2.get_anagrams("ardently")
    self.assertEqual(r, ['ardently'])

    _, r = self.anagrams2.get_anagrams("ardor")
    self.assertEqual(r, ['ardor'])

    _, r = self.anagrams2.get_anagrams("arduous")
    self.assertEqual(r, ['arduous'])

    _, r = self.anagrams2.get_anagrams("arduously")
    self.assertEqual(r, ['arduously'])

    _, r = self.anagrams2.get_anagrams("arduousness")
    self.assertEqual(r, ['arduousness'])

    _, r = self.anagrams2.get_anagrams("are")
    self.assertEqual(r, ['are', 'ear', 'era', 'rae'])

    _, r = self.anagrams2.get_anagrams("area")
    self.assertEqual(r, ['area'])

    _, r = self.anagrams2.get_anagrams("areas")
    self.assertEqual(r, ['areas'])

    _, r = self.anagrams2.get_anagrams("arena")
    self.assertEqual(r, ['arena'])

    _, r = self.anagrams2.get_anagrams("arenas")
    self.assertEqual(r, ['arenas'])

    _, r = self.anagrams2.get_anagrams("arequipa")
    self.assertEqual(r, ['arequipa'])

    _, r = self.anagrams2.get_anagrams("ares")
    self.assertEqual(r, ['ares', 'ears', 'eras', 'sear'])

    _, r = self.anagrams2.get_anagrams("argentina")
    self.assertEqual(r, ['argentina'])

    _, r = self.anagrams2.get_anagrams("argentinian")
    self.assertEqual(r, ['argentinian'])

    _, r = self.anagrams2.get_anagrams("argive")
    self.assertEqual(r, ['argive'])

    _, r = self.anagrams2.get_anagrams("argo")
    self.assertEqual(r, ['argo'])

    _, r = self.anagrams2.get_anagrams("argon")
    self.assertEqual(r, ['argon', 'groan', 'organ'])

    _, r = self.anagrams2.get_anagrams("argonaut")
    self.assertEqual(r, ['argonaut'])

    _, r = self.anagrams2.get_anagrams("argonauts")
    self.assertEqual(r, ['argonauts'])

    _, r = self.anagrams2.get_anagrams("argonne")
    self.assertEqual(r, ['argonne'])

    _, r = self.anagrams2.get_anagrams("argos")
    self.assertEqual(r, ['argos'])

    _, r = self.anagrams2.get_anagrams("argot")
    self.assertEqual(r, ['argot', 'gator'])

    _, r = self.anagrams2.get_anagrams("arguable")
    self.assertEqual(r, ['arguable'])

    _, r = self.anagrams2.get_anagrams("arguably")
    self.assertEqual(r, ['arguably'])

    _, r = self.anagrams2.get_anagrams("argue")
    self.assertEqual(r, ['argue', 'auger'])

    _, r = self.anagrams2.get_anagrams("argued")
    self.assertEqual(r, ['argued'])

    _, r = self.anagrams2.get_anagrams("arguer")
    self.assertEqual(r, ['arguer'])

    _, r = self.anagrams2.get_anagrams("arguers")
    self.assertEqual(r, ['arguers'])

    _, r = self.anagrams2.get_anagrams("argues")
    self.assertEqual(r, ['argues', 'augers'])

    _, r = self.anagrams2.get_anagrams("arguing")
    self.assertEqual(r, ['arguing'])

    _, r = self.anagrams2.get_anagrams("argument")
    self.assertEqual(r, ['argument'])

    _, r = self.anagrams2.get_anagrams("argumentation")
    self.assertEqual(r, ['argumentation'])

    _, r = self.anagrams2.get_anagrams("argumentative")
    self.assertEqual(r, ['argumentative'])

    _, r = self.anagrams2.get_anagrams("arguments")
    self.assertEqual(r, ['arguments'])

    _, r = self.anagrams2.get_anagrams("argus")
    self.assertEqual(r, ['argus', 'sugar'])

    _, r = self.anagrams2.get_anagrams("ariadne")
    self.assertEqual(r, ['ariadne'])

    _, r = self.anagrams2.get_anagrams("arianism")
    self.assertEqual(r, ['arianism'])

    _, r = self.anagrams2.get_anagrams("arianist")
    self.assertEqual(r, ['arianist'])

    _, r = self.anagrams2.get_anagrams("arianists")
    self.assertEqual(r, ['arianists'])

    _, r = self.anagrams2.get_anagrams("arid")
    self.assertEqual(r, ['arid', 'raid'])

    _, r = self.anagrams2.get_anagrams("aridity")
    self.assertEqual(r, ['aridity'])

    _, r = self.anagrams2.get_anagrams("aries")
    self.assertEqual(r, ['aires', 'aries', 'arise', 'raise'])

    _, r = self.anagrams2.get_anagrams("aright")
    self.assertEqual(r, ['aright'])

    _, r = self.anagrams2.get_anagrams("arise")
    self.assertEqual(r, ['aires', 'aries', 'arise', 'raise'])

    _, r = self.anagrams2.get_anagrams("arisen")
    self.assertEqual(r, ['arisen', 'arsine'])

    _, r = self.anagrams2.get_anagrams("ariser")
    self.assertEqual(r, ['airers', 'ariser', 'raiser', 'sierra'])

    _, r = self.anagrams2.get_anagrams("arises")
    self.assertEqual(r, ['arises', 'raises'])

    _, r = self.anagrams2.get_anagrams("arising")
    self.assertEqual(r, ['airings', 'arising', 'raising'])

    _, r = self.anagrams2.get_anagrams("arisings")
    self.assertEqual(r, ['arisings'])

    _, r = self.anagrams2.get_anagrams("aristocracy")
    self.assertEqual(r, ['aristocracy'])

    _, r = self.anagrams2.get_anagrams("aristocrat")
    self.assertEqual(r, ['aristocrat'])

    _, r = self.anagrams2.get_anagrams("aristocratic")
    self.assertEqual(r, ['aristocratic'])

    _, r = self.anagrams2.get_anagrams("aristocratically")
    self.assertEqual(r, ['aristocratically'])

    _, r = self.anagrams2.get_anagrams("aristocrats")
    self.assertEqual(r, ['aristocrats'])

    _, r = self.anagrams2.get_anagrams("aristotelian")
    self.assertEqual(r, ['aristotelian'])

    _, r = self.anagrams2.get_anagrams("aristotle")
    self.assertEqual(r, ['aristotle'])

    _, r = self.anagrams2.get_anagrams("arithmetic")
    self.assertEqual(r, ['arithmetic'])

    _, r = self.anagrams2.get_anagrams("arithmetical")
    self.assertEqual(r, ['arithmetical'])

    _, r = self.anagrams2.get_anagrams("arithmetically")
    self.assertEqual(r, ['arithmetically'])

    _, r = self.anagrams2.get_anagrams("arithmetics")
    self.assertEqual(r, ['arithmetics'])

    _, r = self.anagrams2.get_anagrams("arithmetize")
    self.assertEqual(r, ['arithmetize'])

    _, r = self.anagrams2.get_anagrams("arithmetized")
    self.assertEqual(r, ['arithmetized'])

    _, r = self.anagrams2.get_anagrams("arithmetizes")
    self.assertEqual(r, ['arithmetizes'])

    _, r = self.anagrams2.get_anagrams("arizona")
    self.assertEqual(r, ['arizona'])

    _, r = self.anagrams2.get_anagrams("ark")
    self.assertEqual(r, ['ark'])

    _, r = self.anagrams2.get_anagrams("arkansan")
    self.assertEqual(r, ['arkansan'])

    _, r = self.anagrams2.get_anagrams("arkansas")
    self.assertEqual(r, ['arkansas'])

    _, r = self.anagrams2.get_anagrams("arlen")
    self.assertEqual(r, ['arlen', 'learn', 'renal'])

    _, r = self.anagrams2.get_anagrams("arlene")
    self.assertEqual(r, ['arlene', 'leaner'])

    _, r = self.anagrams2.get_anagrams("arlington")
    self.assertEqual(r, ['arlington'])

    _, r = self.anagrams2.get_anagrams("arm")
    self.assertEqual(r, ['arm', 'ram'])

    _, r = self.anagrams2.get_anagrams("armada")
    self.assertEqual(r, ['armada', 'ramada'])

    _, r = self.anagrams2.get_anagrams("armadillo")
    self.assertEqual(r, ['armadillo'])

    _, r = self.anagrams2.get_anagrams("armadillos")
    self.assertEqual(r, ['armadillos'])

    _, r = self.anagrams2.get_anagrams("armageddon")
    self.assertEqual(r, ['armageddon'])

    _, r = self.anagrams2.get_anagrams("armagnac")
    self.assertEqual(r, ['armagnac'])

    _, r = self.anagrams2.get_anagrams("armament")
    self.assertEqual(r, ['armament'])

    _, r = self.anagrams2.get_anagrams("armaments")
    self.assertEqual(r, ['armaments'])

    _, r = self.anagrams2.get_anagrams("armata")
    self.assertEqual(r, ['armata'])

    _, r = self.anagrams2.get_anagrams("armchair")
    self.assertEqual(r, ['armchair'])

    _, r = self.anagrams2.get_anagrams("armchairs")
    self.assertEqual(r, ['armchairs'])

    _, r = self.anagrams2.get_anagrams("armco")
    self.assertEqual(r, ['armco', 'macro', 'marco'])

    _, r = self.anagrams2.get_anagrams("armed")
    self.assertEqual(r, ['armed', 'dream'])

    _, r = self.anagrams2.get_anagrams("armenia")
    self.assertEqual(r, ['armenia'])

    _, r = self.anagrams2.get_anagrams("armenian")
    self.assertEqual(r, ['armenian', 'marianne'])

    _, r = self.anagrams2.get_anagrams("armer")
    self.assertEqual(r, ['armer'])

    _, r = self.anagrams2.get_anagrams("armers")
    self.assertEqual(r, ['armers'])

    _, r = self.anagrams2.get_anagrams("armful")
    self.assertEqual(r, ['armful'])

    _, r = self.anagrams2.get_anagrams("armhole")
    self.assertEqual(r, ['armhole'])

    _, r = self.anagrams2.get_anagrams("armies")
    self.assertEqual(r, ['aimers', 'armies'])

    _, r = self.anagrams2.get_anagrams("arming")
    self.assertEqual(r, ['arming', 'ingram', 'margin'])

    _, r = self.anagrams2.get_anagrams("armistice")
    self.assertEqual(r, ['armistice'])

    _, r = self.anagrams2.get_anagrams("armload")
    self.assertEqual(r, ['armload'])

    _, r = self.anagrams2.get_anagrams("armonk")
    self.assertEqual(r, ['armonk'])

    _, r = self.anagrams2.get_anagrams("armor")
    self.assertEqual(r, ['armor'])

    _, r = self.anagrams2.get_anagrams("armored")
    self.assertEqual(r, ['armored'])

    _, r = self.anagrams2.get_anagrams("armorer")
    self.assertEqual(r, ['armorer'])

    _, r = self.anagrams2.get_anagrams("armory")
    self.assertEqual(r, ['armory'])

    _, r = self.anagrams2.get_anagrams("armour")
    self.assertEqual(r, ['armour'])

    _, r = self.anagrams2.get_anagrams("armpit")
    self.assertEqual(r, ['armpit', 'impart'])

    _, r = self.anagrams2.get_anagrams("armpits")
    self.assertEqual(r, ['armpits', 'imparts'])

    _, r = self.anagrams2.get_anagrams("arms")
    self.assertEqual(r, ['arms', 'mars', 'rams'])

    _, r = self.anagrams2.get_anagrams("armstrong")
    self.assertEqual(r, ['armstrong'])

    _, r = self.anagrams2.get_anagrams("army")
    self.assertEqual(r, ['army', 'mary', 'myra'])

    _, r = self.anagrams2.get_anagrams("arnold")
    self.assertEqual(r, ['arnold', 'roland', 'ronald'])

    _, r = self.anagrams2.get_anagrams("aroma")
    self.assertEqual(r, ['aroma'])

    _, r = self.anagrams2.get_anagrams("aromas")
    self.assertEqual(r, ['aromas'])

    _, r = self.anagrams2.get_anagrams("aromatic")
    self.assertEqual(r, ['aromatic'])

    _, r = self.anagrams2.get_anagrams("arose")
    self.assertEqual(r, ['arose'])

    _, r = self.anagrams2.get_anagrams("around")
    self.assertEqual(r, ['around'])

    _, r = self.anagrams2.get_anagrams("arousal")
    self.assertEqual(r, ['arousal'])

    _, r = self.anagrams2.get_anagrams("arouse")
    self.assertEqual(r, ['arouse'])

    _, r = self.anagrams2.get_anagrams("aroused")
    self.assertEqual(r, ['aroused'])

    _, r = self.anagrams2.get_anagrams("arouses")
    self.assertEqual(r, ['arouses'])

    _, r = self.anagrams2.get_anagrams("arousing")
    self.assertEqual(r, ['arousing'])

    _, r = self.anagrams2.get_anagrams("arpa")
    self.assertEqual(r, ['arpa'])

    _, r = self.anagrams2.get_anagrams("arpanet")
    self.assertEqual(r, ['arpanet', 'arpanet'])

    _, r = self.anagrams2.get_anagrams("arpanet")
    self.assertEqual(r, ['arpanet', 'arpanet'])

    _, r = self.anagrams2.get_anagrams("arpeggio")
    self.assertEqual(r, ['arpeggio'])

    _, r = self.anagrams2.get_anagrams("arpeggios")
    self.assertEqual(r, ['arpeggios'])

    _, r = self.anagrams2.get_anagrams("arrack")
    self.assertEqual(r, ['arrack'])

    _, r = self.anagrams2.get_anagrams("arragon")
    self.assertEqual(r, ['arragon'])

    _, r = self.anagrams2.get_anagrams("arraign")
    self.assertEqual(r, ['arraign'])

    _, r = self.anagrams2.get_anagrams("arraigned")
    self.assertEqual(r, ['arraigned'])

    _, r = self.anagrams2.get_anagrams("arraigning")
    self.assertEqual(r, ['arraigning'])

    _, r = self.anagrams2.get_anagrams("arraignment")
    self.assertEqual(r, ['arraignment'])

    _, r = self.anagrams2.get_anagrams("arraignments")
    self.assertEqual(r, ['arraignments'])

    _, r = self.anagrams2.get_anagrams("arraigns")
    self.assertEqual(r, ['arraigns'])

    _, r = self.anagrams2.get_anagrams("arrange")
    self.assertEqual(r, ['arrange'])

    _, r = self.anagrams2.get_anagrams("arranged")
    self.assertEqual(r, ['arranged'])

    _, r = self.anagrams2.get_anagrams("arrangement")
    self.assertEqual(r, ['arrangement'])

    _, r = self.anagrams2.get_anagrams("arrangements")
    self.assertEqual(r, ['arrangements'])

    _, r = self.anagrams2.get_anagrams("arranger")
    self.assertEqual(r, ['arranger'])

    _, r = self.anagrams2.get_anagrams("arrangers")
    self.assertEqual(r, ['arrangers'])

    _, r = self.anagrams2.get_anagrams("arranges")
    self.assertEqual(r, ['arranges'])

    _, r = self.anagrams2.get_anagrams("arranging")
    self.assertEqual(r, ['arranging'])

    _, r = self.anagrams2.get_anagrams("arrant")
    self.assertEqual(r, ['arrant'])

    _, r = self.anagrams2.get_anagrams("array")
    self.assertEqual(r, ['array'])

    _, r = self.anagrams2.get_anagrams("arrayed")
    self.assertEqual(r, ['arrayed'])

    _, r = self.anagrams2.get_anagrams("arrays")
    self.assertEqual(r, ['arrays'])

    _, r = self.anagrams2.get_anagrams("arrears")
    self.assertEqual(r, ['arrears'])

    _, r = self.anagrams2.get_anagrams("arrest")
    self.assertEqual(r, ['arrest', 'rarest', 'raster', 'raters', 'sartre', 'starer'])

    _, r = self.anagrams2.get_anagrams("arrested")
    self.assertEqual(r, ['arrested'])

    _, r = self.anagrams2.get_anagrams("arrester")
    self.assertEqual(r, ['arrester', 'rearrest'])

    _, r = self.anagrams2.get_anagrams("arresters")
    self.assertEqual(r, ['arresters'])

    _, r = self.anagrams2.get_anagrams("arresting")
    self.assertEqual(r, ['arresting'])

    _, r = self.anagrams2.get_anagrams("arrestingly")
    self.assertEqual(r, ['arrestingly'])

    _, r = self.anagrams2.get_anagrams("arrestor")
    self.assertEqual(r, ['arrestor'])

    _, r = self.anagrams2.get_anagrams("arrestors")
    self.assertEqual(r, ['arrestors'])

    _, r = self.anagrams2.get_anagrams("arrests")
    self.assertEqual(r, ['arrests'])

    _, r = self.anagrams2.get_anagrams("arrhenius")
    self.assertEqual(r, ['arrhenius'])

    _, r = self.anagrams2.get_anagrams("arrival")
    self.assertEqual(r, ['arrival'])

    _, r = self.anagrams2.get_anagrams("arrivals")
    self.assertEqual(r, ['arrivals'])

    _, r = self.anagrams2.get_anagrams("arrive")
    self.assertEqual(r, ['arrive'])

    _, r = self.anagrams2.get_anagrams("arrived")
    self.assertEqual(r, ['arrived'])

    _, r = self.anagrams2.get_anagrams("arrives")
    self.assertEqual(r, ['arrives'])

    _, r = self.anagrams2.get_anagrams("arriving")
    self.assertEqual(r, ['arriving'])

    _, r = self.anagrams2.get_anagrams("arrogance")
    self.assertEqual(r, ['arrogance'])

    _, r = self.anagrams2.get_anagrams("arrogant")
    self.assertEqual(r, ['arrogant'])

    _, r = self.anagrams2.get_anagrams("arrogantly")
    self.assertEqual(r, ['arrogantly'])

    _, r = self.anagrams2.get_anagrams("arrogate")
    self.assertEqual(r, ['arrogate'])

    _, r = self.anagrams2.get_anagrams("arrogated")
    self.assertEqual(r, ['arrogated'])

    _, r = self.anagrams2.get_anagrams("arrogates")
    self.assertEqual(r, ['arrogates'])

    _, r = self.anagrams2.get_anagrams("arrogating")
    self.assertEqual(r, ['arrogating'])

    _, r = self.anagrams2.get_anagrams("arrogation")
    self.assertEqual(r, ['arrogation'])

    _, r = self.anagrams2.get_anagrams("arrow")
    self.assertEqual(r, ['arrow'])

    _, r = self.anagrams2.get_anagrams("arrowed")
    self.assertEqual(r, ['arrowed'])

    _, r = self.anagrams2.get_anagrams("arrowhead")
    self.assertEqual(r, ['arrowhead'])

    _, r = self.anagrams2.get_anagrams("arrowheads")
    self.assertEqual(r, ['arrowheads'])

    _, r = self.anagrams2.get_anagrams("arrows")
    self.assertEqual(r, ['arrows'])

    _, r = self.anagrams2.get_anagrams("arroyo")
    self.assertEqual(r, ['arroyo'])

    _, r = self.anagrams2.get_anagrams("arroyos")
    self.assertEqual(r, ['arroyos'])

    _, r = self.anagrams2.get_anagrams("arsenal")
    self.assertEqual(r, ['arsenal'])

    _, r = self.anagrams2.get_anagrams("arsenals")
    self.assertEqual(r, ['arsenals'])

    _, r = self.anagrams2.get_anagrams("arsenic")
    self.assertEqual(r, ['arcsine', 'arsenic'])

    _, r = self.anagrams2.get_anagrams("arsine")
    self.assertEqual(r, ['arisen', 'arsine'])

    _, r = self.anagrams2.get_anagrams("arson")
    self.assertEqual(r, ['arson', 'sonar'])

    _, r = self.anagrams2.get_anagrams("art")
    self.assertEqual(r, ['art', 'rat', 'tar'])

    _, r = self.anagrams2.get_anagrams("artemia")
    self.assertEqual(r, ['artemia'])

    _, r = self.anagrams2.get_anagrams("artemis")
    self.assertEqual(r, ['artemis'])

    _, r = self.anagrams2.get_anagrams("arterial")
    self.assertEqual(r, ['arterial'])

    _, r = self.anagrams2.get_anagrams("arteries")
    self.assertEqual(r, ['arteries'])

    _, r = self.anagrams2.get_anagrams("arteriolar")
    self.assertEqual(r, ['arteriolar'])

    _, r = self.anagrams2.get_anagrams("arteriole")
    self.assertEqual(r, ['arteriole'])

    _, r = self.anagrams2.get_anagrams("arterioles")
    self.assertEqual(r, ['arterioles'])

    _, r = self.anagrams2.get_anagrams("arteriosclerosis")
    self.assertEqual(r, ['arteriosclerosis'])

    _, r = self.anagrams2.get_anagrams("artery")
    self.assertEqual(r, ['artery'])

    _, r = self.anagrams2.get_anagrams("artful")
    self.assertEqual(r, ['artful'])

    _, r = self.anagrams2.get_anagrams("artfully")
    self.assertEqual(r, ['artfully'])

    _, r = self.anagrams2.get_anagrams("artfulness")
    self.assertEqual(r, ['artfulness'])

    _, r = self.anagrams2.get_anagrams("arthritis")
    self.assertEqual(r, ['arthritis'])

    _, r = self.anagrams2.get_anagrams("arthropod")
    self.assertEqual(r, ['arthropod'])

    _, r = self.anagrams2.get_anagrams("arthropods")
    self.assertEqual(r, ['arthropods'])

    _, r = self.anagrams2.get_anagrams("arthur")
    self.assertEqual(r, ['arthur'])

    _, r = self.anagrams2.get_anagrams("artichoke")
    self.assertEqual(r, ['artichoke'])

    _, r = self.anagrams2.get_anagrams("artichokes")
    self.assertEqual(r, ['artichokes'])

    _, r = self.anagrams2.get_anagrams("article")
    self.assertEqual(r, ['article', 'recital'])

    _, r = self.anagrams2.get_anagrams("articles")
    self.assertEqual(r, ['articles', 'recitals'])

    _, r = self.anagrams2.get_anagrams("articulate")
    self.assertEqual(r, ['articulate'])

    _, r = self.anagrams2.get_anagrams("articulated")
    self.assertEqual(r, ['articulated'])

    _, r = self.anagrams2.get_anagrams("articulately")
    self.assertEqual(r, ['articulately'])

    _, r = self.anagrams2.get_anagrams("articulateness")
    self.assertEqual(r, ['articulateness'])

    _, r = self.anagrams2.get_anagrams("articulates")
    self.assertEqual(r, ['articulates'])

    _, r = self.anagrams2.get_anagrams("articulating")
    self.assertEqual(r, ['articulating'])

    _, r = self.anagrams2.get_anagrams("articulation")
    self.assertEqual(r, ['articulation'])

    _, r = self.anagrams2.get_anagrams("articulations")
    self.assertEqual(r, ['articulations'])

    _, r = self.anagrams2.get_anagrams("articulator")
    self.assertEqual(r, ['articulator'])

    _, r = self.anagrams2.get_anagrams("articulators")
    self.assertEqual(r, ['articulators'])

    _, r = self.anagrams2.get_anagrams("articulatory")
    self.assertEqual(r, ['articulatory'])

    _, r = self.anagrams2.get_anagrams("artie")
    self.assertEqual(r, ['artie', 'irate'])

    _, r = self.anagrams2.get_anagrams("artifact")
    self.assertEqual(r, ['artifact'])

    _, r = self.anagrams2.get_anagrams("artifacts")
    self.assertEqual(r, ['artifacts'])

    _, r = self.anagrams2.get_anagrams("artifice")
    self.assertEqual(r, ['artifice'])

    _, r = self.anagrams2.get_anagrams("artificer")
    self.assertEqual(r, ['artificer'])

    _, r = self.anagrams2.get_anagrams("artifices")
    self.assertEqual(r, ['artifices'])

    _, r = self.anagrams2.get_anagrams("artificial")
    self.assertEqual(r, ['artificial'])

    _, r = self.anagrams2.get_anagrams("artificialities")
    self.assertEqual(r, ['artificialities'])

    _, r = self.anagrams2.get_anagrams("artificiality")
    self.assertEqual(r, ['artificiality'])

    _, r = self.anagrams2.get_anagrams("artificially")
    self.assertEqual(r, ['artificially'])

    _, r = self.anagrams2.get_anagrams("artificialness")
    self.assertEqual(r, ['artificialness'])

    _, r = self.anagrams2.get_anagrams("artillerist")
    self.assertEqual(r, ['artillerist'])

    _, r = self.anagrams2.get_anagrams("artillery")
    self.assertEqual(r, ['artillery'])

    _, r = self.anagrams2.get_anagrams("artisan")
    self.assertEqual(r, ['artisan', 'sinatra'])

    _, r = self.anagrams2.get_anagrams("artisans")
    self.assertEqual(r, ['artisans'])

    _, r = self.anagrams2.get_anagrams("artist")
    self.assertEqual(r, ['artist', 'strait', 'traits'])

    _, r = self.anagrams2.get_anagrams("artistic")
    self.assertEqual(r, ['artistic'])

    _, r = self.anagrams2.get_anagrams("artistically")
    self.assertEqual(r, ['artistically'])

    _, r = self.anagrams2.get_anagrams("artistry")
    self.assertEqual(r, ['artistry'])

    _, r = self.anagrams2.get_anagrams("artists")
    self.assertEqual(r, ['artists', 'straits'])

    _, r = self.anagrams2.get_anagrams("artless")
    self.assertEqual(r, ['artless', 'salters'])

    _, r = self.anagrams2.get_anagrams("arts")
    self.assertEqual(r, ['arts', 'rats', 'star'])

    _, r = self.anagrams2.get_anagrams("arturo")
    self.assertEqual(r, ['arturo'])

    _, r = self.anagrams2.get_anagrams("artwork")
    self.assertEqual(r, ['artwork'])

    _, r = self.anagrams2.get_anagrams("aruba")
    self.assertEqual(r, ['aruba'])

    _, r = self.anagrams2.get_anagrams("aryan")
    self.assertEqual(r, ['aryan'])

    _, r = self.anagrams2.get_anagrams("aryans")
    self.assertEqual(r, ['aryans'])

    _, r = self.anagrams2.get_anagrams("as")
    self.assertEqual(r, ['as'])

    _, r = self.anagrams2.get_anagrams("asbestos")
    self.assertEqual(r, ['asbestos'])

    _, r = self.anagrams2.get_anagrams("ascend")
    self.assertEqual(r, ['ascend', 'dances'])

    _, r = self.anagrams2.get_anagrams("ascendancy")
    self.assertEqual(r, ['ascendancy'])

    _, r = self.anagrams2.get_anagrams("ascendant")
    self.assertEqual(r, ['ascendant'])

    _, r = self.anagrams2.get_anagrams("ascended")
    self.assertEqual(r, ['ascended'])

    _, r = self.anagrams2.get_anagrams("ascendency")
    self.assertEqual(r, ['ascendency'])

    _, r = self.anagrams2.get_anagrams("ascendent")
    self.assertEqual(r, ['ascendent'])

    _, r = self.anagrams2.get_anagrams("ascender")
    self.assertEqual(r, ['ascender'])

    _, r = self.anagrams2.get_anagrams("ascenders")
    self.assertEqual(r, ['ascenders'])

    _, r = self.anagrams2.get_anagrams("ascending")
    self.assertEqual(r, ['ascending'])

    _, r = self.anagrams2.get_anagrams("ascends")
    self.assertEqual(r, ['ascends'])

    _, r = self.anagrams2.get_anagrams("ascension")
    self.assertEqual(r, ['ascension'])

    _, r = self.anagrams2.get_anagrams("ascensions")
    self.assertEqual(r, ['ascensions'])

    _, r = self.anagrams2.get_anagrams("ascent")
    self.assertEqual(r, ['ascent', 'enacts', 'secant'])

    _, r = self.anagrams2.get_anagrams("ascertain")
    self.assertEqual(r, ['ascertain', 'cartesian', 'sectarian'])

    _, r = self.anagrams2.get_anagrams("ascertainable")
    self.assertEqual(r, ['ascertainable'])

    _, r = self.anagrams2.get_anagrams("ascertained")
    self.assertEqual(r, ['ascertained'])

    _, r = self.anagrams2.get_anagrams("ascertaining")
    self.assertEqual(r, ['ascertaining'])

    _, r = self.anagrams2.get_anagrams("ascertains")
    self.assertEqual(r, ['ascertains'])

    _, r = self.anagrams2.get_anagrams("ascetic")
    self.assertEqual(r, ['ascetic'])

    _, r = self.anagrams2.get_anagrams("asceticism")
    self.assertEqual(r, ['asceticism'])

    _, r = self.anagrams2.get_anagrams("ascetics")
    self.assertEqual(r, ['ascetics'])

    _, r = self.anagrams2.get_anagrams("ascii")
    self.assertEqual(r, ['ascii'])

    _, r = self.anagrams2.get_anagrams("ascot")
    self.assertEqual(r, ['ascot', 'coast', 'coats', 'costa', 'tosca'])

    _, r = self.anagrams2.get_anagrams("ascribable")
    self.assertEqual(r, ['ascribable'])

    _, r = self.anagrams2.get_anagrams("ascribe")
    self.assertEqual(r, ['ascribe'])

    _, r = self.anagrams2.get_anagrams("ascribed")
    self.assertEqual(r, ['ascribed'])

    _, r = self.anagrams2.get_anagrams("ascribes")
    self.assertEqual(r, ['ascribes'])

    _, r = self.anagrams2.get_anagrams("ascribing")
    self.assertEqual(r, ['ascribing'])

    _, r = self.anagrams2.get_anagrams("ascription")
    self.assertEqual(r, ['ascription'])

    _, r = self.anagrams2.get_anagrams("aseptic")
    self.assertEqual(r, ['aseptic'])

    _, r = self.anagrams2.get_anagrams("ash")
    self.assertEqual(r, ['ash', 'has'])

    _, r = self.anagrams2.get_anagrams("ashamed")
    self.assertEqual(r, ['ashamed'])

    _, r = self.anagrams2.get_anagrams("ashamedly")
    self.assertEqual(r, ['ashamedly'])

    _, r = self.anagrams2.get_anagrams("ashen")
    self.assertEqual(r, ['ashen'])

    _, r = self.anagrams2.get_anagrams("asher")
    self.assertEqual(r, ['asher', 'hares', 'hears', 'share', 'shear'])

    _, r = self.anagrams2.get_anagrams("ashes")
    self.assertEqual(r, ['ashes'])

    _, r = self.anagrams2.get_anagrams("asheville")
    self.assertEqual(r, ['asheville'])

    _, r = self.anagrams2.get_anagrams("ashland")
    self.assertEqual(r, ['ashland'])

    _, r = self.anagrams2.get_anagrams("ashley")
    self.assertEqual(r, ['ashley', 'halsey'])

    _, r = self.anagrams2.get_anagrams("ashman")
    self.assertEqual(r, ['ashman'])

    _, r = self.anagrams2.get_anagrams("ashmolean")
    self.assertEqual(r, ['ashmolean'])

    _, r = self.anagrams2.get_anagrams("ashore")
    self.assertEqual(r, ['ashore', 'hoarse'])

    _, r = self.anagrams2.get_anagrams("ashtray")
    self.assertEqual(r, ['ashtray'])

    _, r = self.anagrams2.get_anagrams("ashtrays")
    self.assertEqual(r, ['ashtrays'])

    _, r = self.anagrams2.get_anagrams("asia")
    self.assertEqual(r, ['asia'])

    _, r = self.anagrams2.get_anagrams("asian")
    self.assertEqual(r, ['asian'])

    _, r = self.anagrams2.get_anagrams("asians")
    self.assertEqual(r, ['asians'])

    _, r = self.anagrams2.get_anagrams("asiatic")
    self.assertEqual(r, ['asiatic'])

    _, r = self.anagrams2.get_anagrams("asiaticization")
    self.assertEqual(r, ['asiaticization'])

    _, r = self.anagrams2.get_anagrams("asiaticizations")
    self.assertEqual(r, ['asiaticizations'])

    _, r = self.anagrams2.get_anagrams("asiaticize")
    self.assertEqual(r, ['asiaticize'])

    _, r = self.anagrams2.get_anagrams("asiaticizes")
    self.assertEqual(r, ['asiaticizes'])

    _, r = self.anagrams2.get_anagrams("asiatics")
    self.assertEqual(r, ['asiatics'])

    _, r = self.anagrams2.get_anagrams("aside")
    self.assertEqual(r, ['aides', 'aside', 'ideas', 'sadie'])

    _, r = self.anagrams2.get_anagrams("asilomar")
    self.assertEqual(r, ['asilomar'])

    _, r = self.anagrams2.get_anagrams("asinine")
    self.assertEqual(r, ['asinine'])

    _, r = self.anagrams2.get_anagrams("ask")
    self.assertEqual(r, ['ask'])

    _, r = self.anagrams2.get_anagrams("askance")
    self.assertEqual(r, ['askance'])

    _, r = self.anagrams2.get_anagrams("asked")
    self.assertEqual(r, ['asked'])

    _, r = self.anagrams2.get_anagrams("asker")
    self.assertEqual(r, ['akers', 'asker', 'rakes'])

    _, r = self.anagrams2.get_anagrams("askers")
    self.assertEqual(r, ['askers'])

    _, r = self.anagrams2.get_anagrams("askew")
    self.assertEqual(r, ['askew', 'wakes'])

    _, r = self.anagrams2.get_anagrams("asking")
    self.assertEqual(r, ['asking'])

    _, r = self.anagrams2.get_anagrams("asks")
    self.assertEqual(r, ['asks'])

    _, r = self.anagrams2.get_anagrams("asleep")
    self.assertEqual(r, ['asleep', 'elapse', 'please'])

    _, r = self.anagrams2.get_anagrams("asocial")
    self.assertEqual(r, ['asocial'])

    _, r = self.anagrams2.get_anagrams("asp")
    self.assertEqual(r, ['asp', 'sap', 'spa'])

    _, r = self.anagrams2.get_anagrams("asparagus")
    self.assertEqual(r, ['asparagus'])

    _, r = self.anagrams2.get_anagrams("aspect")
    self.assertEqual(r, ['aspect'])

    _, r = self.anagrams2.get_anagrams("aspects")
    self.assertEqual(r, ['aspects'])

    _, r = self.anagrams2.get_anagrams("aspen")
    self.assertEqual(r, ['aspen', 'panes'])

    _, r = self.anagrams2.get_anagrams("aspersion")
    self.assertEqual(r, ['aspersion'])

    _, r = self.anagrams2.get_anagrams("aspersions")
    self.assertEqual(r, ['aspersions'])

    _, r = self.anagrams2.get_anagrams("asphalt")
    self.assertEqual(r, ['asphalt'])

    _, r = self.anagrams2.get_anagrams("asphyxia")
    self.assertEqual(r, ['asphyxia'])

    _, r = self.anagrams2.get_anagrams("aspic")
    self.assertEqual(r, ['aspic', 'picas', 'spica'])

    _, r = self.anagrams2.get_anagrams("aspirant")
    self.assertEqual(r, ['aspirant', 'partisan'])

    _, r = self.anagrams2.get_anagrams("aspirants")
    self.assertEqual(r, ['aspirants', 'partisans'])

    _, r = self.anagrams2.get_anagrams("aspirate")
    self.assertEqual(r, ['aspirate', 'parasite'])

    _, r = self.anagrams2.get_anagrams("aspirated")
    self.assertEqual(r, ['aspirated', 'disparate'])

    _, r = self.anagrams2.get_anagrams("aspirates")
    self.assertEqual(r, ['aspirates', 'parasites'])

    _, r = self.anagrams2.get_anagrams("aspirating")
    self.assertEqual(r, ['aspirating'])

    _, r = self.anagrams2.get_anagrams("aspiration")
    self.assertEqual(r, ['aspiration'])

    _, r = self.anagrams2.get_anagrams("aspirations")
    self.assertEqual(r, ['aspirations'])

    _, r = self.anagrams2.get_anagrams("aspirator")
    self.assertEqual(r, ['aspirator'])

    _, r = self.anagrams2.get_anagrams("aspirators")
    self.assertEqual(r, ['aspirators'])

    _, r = self.anagrams2.get_anagrams("aspire")
    self.assertEqual(r, ['aspire', 'persia', 'praise'])

    _, r = self.anagrams2.get_anagrams("aspired")
    self.assertEqual(r, ['aspired', 'despair', 'diapers', 'praised'])

    _, r = self.anagrams2.get_anagrams("aspires")
    self.assertEqual(r, ['aspires', 'praises'])

    _, r = self.anagrams2.get_anagrams("aspirin")
    self.assertEqual(r, ['aspirin'])

    _, r = self.anagrams2.get_anagrams("aspiring")
    self.assertEqual(r, ['aspiring', 'pairings', 'praising'])

    _, r = self.anagrams2.get_anagrams("aspirins")
    self.assertEqual(r, ['aspirins'])

    _, r = self.anagrams2.get_anagrams("ass")
    self.assertEqual(r, ['ass'])

    _, r = self.anagrams2.get_anagrams("assail")
    self.assertEqual(r, ['assail'])

    _, r = self.anagrams2.get_anagrams("assailant")
    self.assertEqual(r, ['alsatians', 'assailant'])

    _, r = self.anagrams2.get_anagrams("assailants")
    self.assertEqual(r, ['assailants'])

    _, r = self.anagrams2.get_anagrams("assailed")
    self.assertEqual(r, ['assailed'])

    _, r = self.anagrams2.get_anagrams("assailing")
    self.assertEqual(r, ['assailing'])

    _, r = self.anagrams2.get_anagrams("assails")
    self.assertEqual(r, ['assails'])

    _, r = self.anagrams2.get_anagrams("assam")
    self.assertEqual(r, ['amass', 'assam'])

    _, r = self.anagrams2.get_anagrams("assassin")
    self.assertEqual(r, ['assassin'])

    _, r = self.anagrams2.get_anagrams("assassinate")
    self.assertEqual(r, ['assassinate'])

    _, r = self.anagrams2.get_anagrams("assassinated")
    self.assertEqual(r, ['assassinated'])

    _, r = self.anagrams2.get_anagrams("assassinates")
    self.assertEqual(r, ['assassinates'])

    _, r = self.anagrams2.get_anagrams("assassinating")
    self.assertEqual(r, ['assassinating'])

    _, r = self.anagrams2.get_anagrams("assassination")
    self.assertEqual(r, ['assassination'])

    _, r = self.anagrams2.get_anagrams("assassinations")
    self.assertEqual(r, ['assassinations'])

    _, r = self.anagrams2.get_anagrams("assassins")
    self.assertEqual(r, ['assassins'])

    _, r = self.anagrams2.get_anagrams("assault")
    self.assertEqual(r, ['assault'])

    _, r = self.anagrams2.get_anagrams("assaulted")
    self.assertEqual(r, ['assaulted'])

    _, r = self.anagrams2.get_anagrams("assaulting")
    self.assertEqual(r, ['assaulting'])

    _, r = self.anagrams2.get_anagrams("assaults")
    self.assertEqual(r, ['assaults'])

    _, r = self.anagrams2.get_anagrams("assay")
    self.assertEqual(r, ['assay'])

    _, r = self.anagrams2.get_anagrams("assayed")
    self.assertEqual(r, ['assayed'])

    _, r = self.anagrams2.get_anagrams("assaying")
    self.assertEqual(r, ['assaying'])

    _, r = self.anagrams2.get_anagrams("assemblage")
    self.assertEqual(r, ['assemblage'])

    _, r = self.anagrams2.get_anagrams("assemblages")
    self.assertEqual(r, ['assemblages'])

    _, r = self.anagrams2.get_anagrams("assemble")
    self.assertEqual(r, ['assemble'])

    _, r = self.anagrams2.get_anagrams("assembled")
    self.assertEqual(r, ['assembled'])

    _, r = self.anagrams2.get_anagrams("assembler")
    self.assertEqual(r, ['assembler'])

    _, r = self.anagrams2.get_anagrams("assemblers")
    self.assertEqual(r, ['assemblers'])

    _, r = self.anagrams2.get_anagrams("assembles")
    self.assertEqual(r, ['assembles'])

    _, r = self.anagrams2.get_anagrams("assemblies")
    self.assertEqual(r, ['assemblies'])

    _, r = self.anagrams2.get_anagrams("assembling")
    self.assertEqual(r, ['assembling'])

    _, r = self.anagrams2.get_anagrams("assembly")
    self.assertEqual(r, ['assembly'])

    _, r = self.anagrams2.get_anagrams("assent")
    self.assertEqual(r, ['assent', 'sanest'])

    _, r = self.anagrams2.get_anagrams("assented")
    self.assertEqual(r, ['assented'])

    _, r = self.anagrams2.get_anagrams("assenter")
    self.assertEqual(r, ['assenter'])

    _, r = self.anagrams2.get_anagrams("assenting")
    self.assertEqual(r, ['assenting'])

    _, r = self.anagrams2.get_anagrams("assents")
    self.assertEqual(r, ['assents'])

    _, r = self.anagrams2.get_anagrams("assert")
    self.assertEqual(r, ['assert', 'asters', 'stares'])

    _, r = self.anagrams2.get_anagrams("asserted")
    self.assertEqual(r, ['asserted'])

    _, r = self.anagrams2.get_anagrams("asserter")
    self.assertEqual(r, ['asserter'])

    _, r = self.anagrams2.get_anagrams("asserters")
    self.assertEqual(r, ['asserters'])

    _, r = self.anagrams2.get_anagrams("asserting")
    self.assertEqual(r, ['asserting'])

    _, r = self.anagrams2.get_anagrams("assertion")
    self.assertEqual(r, ['assertion'])

    _, r = self.anagrams2.get_anagrams("assertions")
    self.assertEqual(r, ['assertions'])

    _, r = self.anagrams2.get_anagrams("assertive")
    self.assertEqual(r, ['assertive'])

    _, r = self.anagrams2.get_anagrams("assertively")
    self.assertEqual(r, ['assertively'])

    _, r = self.anagrams2.get_anagrams("assertiveness")
    self.assertEqual(r, ['assertiveness'])

    _, r = self.anagrams2.get_anagrams("asserts")
    self.assertEqual(r, ['asserts'])

    _, r = self.anagrams2.get_anagrams("asses")
    self.assertEqual(r, ['asses'])

    _, r = self.anagrams2.get_anagrams("assess")
    self.assertEqual(r, ['assess'])

    _, r = self.anagrams2.get_anagrams("assessed")
    self.assertEqual(r, ['assessed'])

    _, r = self.anagrams2.get_anagrams("assesses")
    self.assertEqual(r, ['assesses'])

    _, r = self.anagrams2.get_anagrams("assessing")
    self.assertEqual(r, ['assessing'])

    _, r = self.anagrams2.get_anagrams("assessment")
    self.assertEqual(r, ['assessment'])

    _, r = self.anagrams2.get_anagrams("assessments")
    self.assertEqual(r, ['assessments'])

    _, r = self.anagrams2.get_anagrams("assessor")
    self.assertEqual(r, ['assessor'])

    _, r = self.anagrams2.get_anagrams("assessors")
    self.assertEqual(r, ['assessors'])

    _, r = self.anagrams2.get_anagrams("asset")
    self.assertEqual(r, ['asset', 'sates', 'seats'])

    _, r = self.anagrams2.get_anagrams("assets")
    self.assertEqual(r, ['assets'])

    _, r = self.anagrams2.get_anagrams("assiduity")
    self.assertEqual(r, ['assiduity'])

    _, r = self.anagrams2.get_anagrams("assiduous")
    self.assertEqual(r, ['assiduous'])

    _, r = self.anagrams2.get_anagrams("assiduously")
    self.assertEqual(r, ['assiduously'])

    _, r = self.anagrams2.get_anagrams("assign")
    self.assertEqual(r, ['assign'])

    _, r = self.anagrams2.get_anagrams("assignable")
    self.assertEqual(r, ['assignable'])

    _, r = self.anagrams2.get_anagrams("assigned")
    self.assertEqual(r, ['assigned'])

    _, r = self.anagrams2.get_anagrams("assignee")
    self.assertEqual(r, ['assignee'])

    _, r = self.anagrams2.get_anagrams("assignees")
    self.assertEqual(r, ['assignees'])

    _, r = self.anagrams2.get_anagrams("assigner")
    self.assertEqual(r, ['assigner', 'reassign'])

    _, r = self.anagrams2.get_anagrams("assigners")
    self.assertEqual(r, ['assigners', 'reassigns'])

    _, r = self.anagrams2.get_anagrams("assigning")
    self.assertEqual(r, ['assigning'])

    _, r = self.anagrams2.get_anagrams("assignment")
    self.assertEqual(r, ['assignment'])

    _, r = self.anagrams2.get_anagrams("assignments")
    self.assertEqual(r, ['assignments'])

    _, r = self.anagrams2.get_anagrams("assigns")
    self.assertEqual(r, ['assigns'])

    _, r = self.anagrams2.get_anagrams("assimilate")
    self.assertEqual(r, ['assimilate'])

    _, r = self.anagrams2.get_anagrams("assimilated")
    self.assertEqual(r, ['assimilated'])

    _, r = self.anagrams2.get_anagrams("assimilates")
    self.assertEqual(r, ['assimilates'])

    _, r = self.anagrams2.get_anagrams("assimilating")
    self.assertEqual(r, ['assimilating'])

    _, r = self.anagrams2.get_anagrams("assimilation")
    self.assertEqual(r, ['assimilation'])

    _, r = self.anagrams2.get_anagrams("assimilations")
    self.assertEqual(r, ['assimilations'])

    _, r = self.anagrams2.get_anagrams("assist")
    self.assertEqual(r, ['assist'])

    _, r = self.anagrams2.get_anagrams("assistance")
    self.assertEqual(r, ['assistance'])

    _, r = self.anagrams2.get_anagrams("assistances")
    self.assertEqual(r, ['assistances'])

    _, r = self.anagrams2.get_anagrams("assistant")
    self.assertEqual(r, ['assistant'])

    _, r = self.anagrams2.get_anagrams("assistants")
    self.assertEqual(r, ['assistants'])

    _, r = self.anagrams2.get_anagrams("assistantship")
    self.assertEqual(r, ['assistantship'])

    _, r = self.anagrams2.get_anagrams("assistantships")
    self.assertEqual(r, ['assistantships'])

    _, r = self.anagrams2.get_anagrams("assisted")
    self.assertEqual(r, ['assisted'])

    _, r = self.anagrams2.get_anagrams("assisting")
    self.assertEqual(r, ['assisting'])

    _, r = self.anagrams2.get_anagrams("assists")
    self.assertEqual(r, ['assists'])

    _, r = self.anagrams2.get_anagrams("associate")
    self.assertEqual(r, ['associate'])

    _, r = self.anagrams2.get_anagrams("associated")
    self.assertEqual(r, ['associated'])

    _, r = self.anagrams2.get_anagrams("associates")
    self.assertEqual(r, ['associates'])

    _, r = self.anagrams2.get_anagrams("associating")
    self.assertEqual(r, ['associating'])

    _, r = self.anagrams2.get_anagrams("association")
    self.assertEqual(r, ['association'])

    _, r = self.anagrams2.get_anagrams("associational")
    self.assertEqual(r, ['associational'])

    _, r = self.anagrams2.get_anagrams("associations")
    self.assertEqual(r, ['associations'])

    _, r = self.anagrams2.get_anagrams("associative")
    self.assertEqual(r, ['associative'])

    _, r = self.anagrams2.get_anagrams("associatively")
    self.assertEqual(r, ['associatively'])

    _, r = self.anagrams2.get_anagrams("associativity")
    self.assertEqual(r, ['associativity'])

    _, r = self.anagrams2.get_anagrams("associator")
    self.assertEqual(r, ['associator'])

    _, r = self.anagrams2.get_anagrams("associators")
    self.assertEqual(r, ['associators'])

    _, r = self.anagrams2.get_anagrams("assonance")
    self.assertEqual(r, ['assonance'])

    _, r = self.anagrams2.get_anagrams("assonant")
    self.assertEqual(r, ['assonant'])

    _, r = self.anagrams2.get_anagrams("assort")
    self.assertEqual(r, ['assort', 'roasts'])

    _, r = self.anagrams2.get_anagrams("assorted")
    self.assertEqual(r, ['assorted'])

    _, r = self.anagrams2.get_anagrams("assortment")
    self.assertEqual(r, ['assortment'])

    _, r = self.anagrams2.get_anagrams("assortments")
    self.assertEqual(r, ['assortments'])

    _, r = self.anagrams2.get_anagrams("assorts")
    self.assertEqual(r, ['assorts'])

    _, r = self.anagrams2.get_anagrams("assuage")
    self.assertEqual(r, ['assuage', 'sausage'])

    _, r = self.anagrams2.get_anagrams("assuaged")
    self.assertEqual(r, ['assuaged'])

    _, r = self.anagrams2.get_anagrams("assuages")
    self.assertEqual(r, ['assuages', 'sausages'])

    _, r = self.anagrams2.get_anagrams("assume")
    self.assertEqual(r, ['amuses', 'assume'])

    _, r = self.anagrams2.get_anagrams("assumed")
    self.assertEqual(r, ['assumed'])

    _, r = self.anagrams2.get_anagrams("assumes")
    self.assertEqual(r, ['assumes'])

    _, r = self.anagrams2.get_anagrams("assuming")
    self.assertEqual(r, ['assuming'])

    _, r = self.anagrams2.get_anagrams("assumption")
    self.assertEqual(r, ['assumption'])

    _, r = self.anagrams2.get_anagrams("assumptions")
    self.assertEqual(r, ['assumptions'])

    _, r = self.anagrams2.get_anagrams("assurance")
    self.assertEqual(r, ['assurance'])

    _, r = self.anagrams2.get_anagrams("assurances")
    self.assertEqual(r, ['assurances'])

    _, r = self.anagrams2.get_anagrams("assure")
    self.assertEqual(r, ['assure'])

    _, r = self.anagrams2.get_anagrams("assured")
    self.assertEqual(r, ['assured'])

    _, r = self.anagrams2.get_anagrams("assuredly")
    self.assertEqual(r, ['assuredly'])

    _, r = self.anagrams2.get_anagrams("assurer")
    self.assertEqual(r, ['assurer'])

    _, r = self.anagrams2.get_anagrams("assurers")
    self.assertEqual(r, ['assurers'])

    _, r = self.anagrams2.get_anagrams("assures")
    self.assertEqual(r, ['assures'])

    _, r = self.anagrams2.get_anagrams("assuring")
    self.assertEqual(r, ['assuring'])

    _, r = self.anagrams2.get_anagrams("assuringly")
    self.assertEqual(r, ['assuringly'])

    _, r = self.anagrams2.get_anagrams("assyria")
    self.assertEqual(r, ['assyria'])

    _, r = self.anagrams2.get_anagrams("assyrian")
    self.assertEqual(r, ['assyrian'])

    _, r = self.anagrams2.get_anagrams("assyrianize")
    self.assertEqual(r, ['assyrianize'])

    _, r = self.anagrams2.get_anagrams("assyrianizes")
    self.assertEqual(r, ['assyrianizes'])

    _, r = self.anagrams2.get_anagrams("assyriology")
    self.assertEqual(r, ['assyriology'])

    _, r = self.anagrams2.get_anagrams("astaire")
    self.assertEqual(r, ['astaire'])

    _, r = self.anagrams2.get_anagrams("astaires")
    self.assertEqual(r, ['astaires'])

    _, r = self.anagrams2.get_anagrams("astarte")
    self.assertEqual(r, ['astarte'])

    _, r = self.anagrams2.get_anagrams("astatine")
    self.assertEqual(r, ['astatine'])

    _, r = self.anagrams2.get_anagrams("aster")
    self.assertEqual(r, ['aster', 'rates', 'stare', 'tears'])

    _, r = self.anagrams2.get_anagrams("asterisk")
    self.assertEqual(r, ['asterisk'])

    _, r = self.anagrams2.get_anagrams("asterisks")
    self.assertEqual(r, ['asterisks'])

    _, r = self.anagrams2.get_anagrams("asteroid")
    self.assertEqual(r, ['asteroid'])

    _, r = self.anagrams2.get_anagrams("asteroidal")
    self.assertEqual(r, ['asteroidal'])

    _, r = self.anagrams2.get_anagrams("asteroids")
    self.assertEqual(r, ['asteroids'])

    _, r = self.anagrams2.get_anagrams("asters")
    self.assertEqual(r, ['assert', 'asters', 'stares'])

    _, r = self.anagrams2.get_anagrams("asthma")
    self.assertEqual(r, ['asthma'])

    _, r = self.anagrams2.get_anagrams("aston")
    self.assertEqual(r, ['aston', 'natos', 'santo'])

    _, r = self.anagrams2.get_anagrams("astonish")
    self.assertEqual(r, ['astonish'])

    _, r = self.anagrams2.get_anagrams("astonished")
    self.assertEqual(r, ['astonished'])

    _, r = self.anagrams2.get_anagrams("astonishes")
    self.assertEqual(r, ['astonishes'])

    _, r = self.anagrams2.get_anagrams("astonishing")
    self.assertEqual(r, ['astonishing'])

    _, r = self.anagrams2.get_anagrams("astonishingly")
    self.assertEqual(r, ['astonishingly'])

    _, r = self.anagrams2.get_anagrams("astonishment")
    self.assertEqual(r, ['astonishment'])

    _, r = self.anagrams2.get_anagrams("astor")
    self.assertEqual(r, ['astor', 'roast'])

    _, r = self.anagrams2.get_anagrams("astoria")
    self.assertEqual(r, ['astoria'])

    _, r = self.anagrams2.get_anagrams("astound")
    self.assertEqual(r, ['astound'])

    _, r = self.anagrams2.get_anagrams("astounded")
    self.assertEqual(r, ['astounded'])

    _, r = self.anagrams2.get_anagrams("astounding")
    self.assertEqual(r, ['astounding'])

    _, r = self.anagrams2.get_anagrams("astounds")
    self.assertEqual(r, ['astounds'])

    _, r = self.anagrams2.get_anagrams("astral")
    self.assertEqual(r, ['altars', 'astral'])

    _, r = self.anagrams2.get_anagrams("astray")
    self.assertEqual(r, ['astray'])

    _, r = self.anagrams2.get_anagrams("astride")
    self.assertEqual(r, ['astride'])

    _, r = self.anagrams2.get_anagrams("astringency")
    self.assertEqual(r, ['astringency'])

    _, r = self.anagrams2.get_anagrams("astringent")
    self.assertEqual(r, ['astringent'])

    _, r = self.anagrams2.get_anagrams("astrology")
    self.assertEqual(r, ['astrology'])

    _, r = self.anagrams2.get_anagrams("astronaut")
    self.assertEqual(r, ['astronaut'])

    _, r = self.anagrams2.get_anagrams("astronautics")
    self.assertEqual(r, ['astronautics'])

    _, r = self.anagrams2.get_anagrams("astronauts")
    self.assertEqual(r, ['astronauts'])

    _, r = self.anagrams2.get_anagrams("astronomer")
    self.assertEqual(r, ['astronomer'])

    _, r = self.anagrams2.get_anagrams("astronomers")
    self.assertEqual(r, ['astronomers'])

    _, r = self.anagrams2.get_anagrams("astronomical")
    self.assertEqual(r, ['astronomical'])

    _, r = self.anagrams2.get_anagrams("astronomically")
    self.assertEqual(r, ['astronomically'])

    _, r = self.anagrams2.get_anagrams("astronomy")
    self.assertEqual(r, ['astronomy'])

    _, r = self.anagrams2.get_anagrams("astrophysical")
    self.assertEqual(r, ['astrophysical'])

    _, r = self.anagrams2.get_anagrams("astrophysics")
    self.assertEqual(r, ['astrophysics'])

    _, r = self.anagrams2.get_anagrams("astute")
    self.assertEqual(r, ['astute', 'statue'])

    _, r = self.anagrams2.get_anagrams("astutely")
    self.assertEqual(r, ['astutely'])

    _, r = self.anagrams2.get_anagrams("astuteness")
    self.assertEqual(r, ['astuteness'])

    _, r = self.anagrams2.get_anagrams("asuncion")
    self.assertEqual(r, ['asuncion'])

    _, r = self.anagrams2.get_anagrams("asunder")
    self.assertEqual(r, ['asunder'])

    _, r = self.anagrams2.get_anagrams("asylum")
    self.assertEqual(r, ['asylum'])

    _, r = self.anagrams2.get_anagrams("asymmetric")
    self.assertEqual(r, ['asymmetric'])

    _, r = self.anagrams2.get_anagrams("asymmetrically")
    self.assertEqual(r, ['asymmetrically'])

    _, r = self.anagrams2.get_anagrams("asymmetry")
    self.assertEqual(r, ['asymmetry'])

    _, r = self.anagrams2.get_anagrams("asymptomatically")
    self.assertEqual(r, ['asymptomatically'])

    _, r = self.anagrams2.get_anagrams("asymptote")
    self.assertEqual(r, ['asymptote'])

    _, r = self.anagrams2.get_anagrams("asymptotes")
    self.assertEqual(r, ['asymptotes'])

    _, r = self.anagrams2.get_anagrams("asymptotic")
    self.assertEqual(r, ['asymptotic'])

    _, r = self.anagrams2.get_anagrams("asymptotically")
    self.assertEqual(r, ['asymptotically'])

    _, r = self.anagrams2.get_anagrams("asynchronism")
    self.assertEqual(r, ['asynchronism'])

    _, r = self.anagrams2.get_anagrams("asynchronous")
    self.assertEqual(r, ['asynchronous'])

    _, r = self.anagrams2.get_anagrams("asynchronously")
    self.assertEqual(r, ['asynchronously'])

    _, r = self.anagrams2.get_anagrams("asynchrony")
    self.assertEqual(r, ['asynchrony'])

    _, r = self.anagrams2.get_anagrams("at")
    self.assertEqual(r, ['at'])

    _, r = self.anagrams2.get_anagrams("atalanta")
    self.assertEqual(r, ['atalanta'])

    _, r = self.anagrams2.get_anagrams("atari")
    self.assertEqual(r, ['atari'])

    _, r = self.anagrams2.get_anagrams("atavistic")
    self.assertEqual(r, ['atavistic'])

    _, r = self.anagrams2.get_anagrams("atchison")
    self.assertEqual(r, ['atchison'])

    _, r = self.anagrams2.get_anagrams("ate")
    self.assertEqual(r, ['ate', 'eat', 'tea'])

    _, r = self.anagrams2.get_anagrams("atemporal")
    self.assertEqual(r, ['atemporal'])

    _, r = self.anagrams2.get_anagrams("athabascan")
    self.assertEqual(r, ['athabascan'])

    _, r = self.anagrams2.get_anagrams("atheism")
    self.assertEqual(r, ['atheism'])

    _, r = self.anagrams2.get_anagrams("atheist")
    self.assertEqual(r, ['atheist'])

    _, r = self.anagrams2.get_anagrams("atheistic")
    self.assertEqual(r, ['atheistic'])

    _, r = self.anagrams2.get_anagrams("atheists")
    self.assertEqual(r, ['atheists'])

    _, r = self.anagrams2.get_anagrams("athena")
    self.assertEqual(r, ['athena'])

    _, r = self.anagrams2.get_anagrams("athenian")
    self.assertEqual(r, ['athenian'])

    _, r = self.anagrams2.get_anagrams("athenians")
    self.assertEqual(r, ['athenians'])

    _, r = self.anagrams2.get_anagrams("athens")
    self.assertEqual(r, ['athens', 'hasten'])

    _, r = self.anagrams2.get_anagrams("atherosclerosis")
    self.assertEqual(r, ['atherosclerosis'])

    _, r = self.anagrams2.get_anagrams("athlete")
    self.assertEqual(r, ['athlete'])

    _, r = self.anagrams2.get_anagrams("athletes")
    self.assertEqual(r, ['athletes'])

    _, r = self.anagrams2.get_anagrams("athletic")
    self.assertEqual(r, ['athletic'])

    _, r = self.anagrams2.get_anagrams("athleticism")
    self.assertEqual(r, ['athleticism'])

    _, r = self.anagrams2.get_anagrams("athletics")
    self.assertEqual(r, ['athletics'])

    _, r = self.anagrams2.get_anagrams("atkins")
    self.assertEqual(r, ['atkins'])

    _, r = self.anagrams2.get_anagrams("atkinson")
    self.assertEqual(r, ['atkinson'])

    _, r = self.anagrams2.get_anagrams("atlanta")
    self.assertEqual(r, ['atlanta'])

    _, r = self.anagrams2.get_anagrams("atlantic")
    self.assertEqual(r, ['atlantic'])

    _, r = self.anagrams2.get_anagrams("atlantica")
    self.assertEqual(r, ['atlantica'])

    _, r = self.anagrams2.get_anagrams("atlantis")
    self.assertEqual(r, ['atlantis'])

    _, r = self.anagrams2.get_anagrams("atlas")
    self.assertEqual(r, ['atlas'])

    _, r = self.anagrams2.get_anagrams("atmosphere")
    self.assertEqual(r, ['atmosphere'])

    _, r = self.anagrams2.get_anagrams("atmospheres")
    self.assertEqual(r, ['atmospheres'])

    _, r = self.anagrams2.get_anagrams("atmospheric")
    self.assertEqual(r, ['atmospheric'])

    _, r = self.anagrams2.get_anagrams("atoll")
    self.assertEqual(r, ['allot', 'atoll'])

    _, r = self.anagrams2.get_anagrams("atolls")
    self.assertEqual(r, ['allots', 'atolls'])

    _, r = self.anagrams2.get_anagrams("atom")
    self.assertEqual(r, ['atom', 'moat'])

    _, r = self.anagrams2.get_anagrams("atomic")
    self.assertEqual(r, ['atomic'])

    _, r = self.anagrams2.get_anagrams("atomically")
    self.assertEqual(r, ['atomically'])

    _, r = self.anagrams2.get_anagrams("atomics")
    self.assertEqual(r, ['atomics', 'somatic'])

    _, r = self.anagrams2.get_anagrams("atomization")
    self.assertEqual(r, ['atomization'])

    _, r = self.anagrams2.get_anagrams("atomize")
    self.assertEqual(r, ['atomize'])

    _, r = self.anagrams2.get_anagrams("atomized")
    self.assertEqual(r, ['atomized'])

    _, r = self.anagrams2.get_anagrams("atomizes")
    self.assertEqual(r, ['atomizes'])

    _, r = self.anagrams2.get_anagrams("atomizing")
    self.assertEqual(r, ['atomizing'])

    _, r = self.anagrams2.get_anagrams("atoms")
    self.assertEqual(r, ['atoms', 'moats'])

    _, r = self.anagrams2.get_anagrams("atonal")
    self.assertEqual(r, ['atonal'])

    _, r = self.anagrams2.get_anagrams("atonally")
    self.assertEqual(r, ['atonally'])

    _, r = self.anagrams2.get_anagrams("atone")
    self.assertEqual(r, ['atone', 'eaton', 'oaten'])

    _, r = self.anagrams2.get_anagrams("atoned")
    self.assertEqual(r, ['atoned', 'donate'])

    _, r = self.anagrams2.get_anagrams("atonement")
    self.assertEqual(r, ['atonement'])

    _, r = self.anagrams2.get_anagrams("atones")
    self.assertEqual(r, ['atones'])

    _, r = self.anagrams2.get_anagrams("atop")
    self.assertEqual(r, ['atop'])

    _, r = self.anagrams2.get_anagrams("atreus")
    self.assertEqual(r, ['atreus'])

    _, r = self.anagrams2.get_anagrams("atrocious")
    self.assertEqual(r, ['atrocious'])

    _, r = self.anagrams2.get_anagrams("atrociously")
    self.assertEqual(r, ['atrociously'])

    _, r = self.anagrams2.get_anagrams("atrocities")
    self.assertEqual(r, ['atrocities'])

    _, r = self.anagrams2.get_anagrams("atrocity")
    self.assertEqual(r, ['atrocity'])

    _, r = self.anagrams2.get_anagrams("atrophic")
    self.assertEqual(r, ['atrophic'])

    _, r = self.anagrams2.get_anagrams("atrophied")
    self.assertEqual(r, ['aphrodite', 'atrophied'])

    _, r = self.anagrams2.get_anagrams("atrophies")
    self.assertEqual(r, ['atrophies'])

    _, r = self.anagrams2.get_anagrams("atrophy")
    self.assertEqual(r, ['atrophy'])

    _, r = self.anagrams2.get_anagrams("atrophying")
    self.assertEqual(r, ['atrophying'])

    _, r = self.anagrams2.get_anagrams("atropos")
    self.assertEqual(r, ['atropos'])

    _, r = self.anagrams2.get_anagrams("attach")
    self.assertEqual(r, ['attach'])

    _, r = self.anagrams2.get_anagrams("attache")
    self.assertEqual(r, ['attache'])

    _, r = self.anagrams2.get_anagrams("attached")
    self.assertEqual(r, ['attached'])

    _, r = self.anagrams2.get_anagrams("attacher")
    self.assertEqual(r, ['attacher'])

    _, r = self.anagrams2.get_anagrams("attachers")
    self.assertEqual(r, ['attachers'])

    _, r = self.anagrams2.get_anagrams("attaches")
    self.assertEqual(r, ['attaches'])

    _, r = self.anagrams2.get_anagrams("attaching")
    self.assertEqual(r, ['attaching'])

    _, r = self.anagrams2.get_anagrams("attachment")
    self.assertEqual(r, ['attachment'])

    _, r = self.anagrams2.get_anagrams("attachments")
    self.assertEqual(r, ['attachments'])

    _, r = self.anagrams2.get_anagrams("attack")
    self.assertEqual(r, ['attack'])

    _, r = self.anagrams2.get_anagrams("attackable")
    self.assertEqual(r, ['attackable'])

    _, r = self.anagrams2.get_anagrams("attacked")
    self.assertEqual(r, ['attacked'])

    _, r = self.anagrams2.get_anagrams("attacker")
    self.assertEqual(r, ['attacker'])

    _, r = self.anagrams2.get_anagrams("attackers")
    self.assertEqual(r, ['attackers'])

    _, r = self.anagrams2.get_anagrams("attacking")
    self.assertEqual(r, ['attacking'])

    _, r = self.anagrams2.get_anagrams("attacks")
    self.assertEqual(r, ['attacks'])

    _, r = self.anagrams2.get_anagrams("attain")
    self.assertEqual(r, ['attain'])

    _, r = self.anagrams2.get_anagrams("attainable")
    self.assertEqual(r, ['attainable'])

    _, r = self.anagrams2.get_anagrams("attainably")
    self.assertEqual(r, ['attainably'])

    _, r = self.anagrams2.get_anagrams("attained")
    self.assertEqual(r, ['attained'])

    _, r = self.anagrams2.get_anagrams("attainer")
    self.assertEqual(r, ['attainer'])

    _, r = self.anagrams2.get_anagrams("attainers")
    self.assertEqual(r, ['attainers'])

    _, r = self.anagrams2.get_anagrams("attaining")
    self.assertEqual(r, ['attaining'])

    _, r = self.anagrams2.get_anagrams("attainment")
    self.assertEqual(r, ['attainment'])

    _, r = self.anagrams2.get_anagrams("attainments")
    self.assertEqual(r, ['attainments'])

    _, r = self.anagrams2.get_anagrams("attains")
    self.assertEqual(r, ['attains'])

    _, r = self.anagrams2.get_anagrams("attempt")
    self.assertEqual(r, ['attempt'])

    _, r = self.anagrams2.get_anagrams("attempted")
    self.assertEqual(r, ['attempted'])

    _, r = self.anagrams2.get_anagrams("attempter")
    self.assertEqual(r, ['attempter'])

    _, r = self.anagrams2.get_anagrams("attempters")
    self.assertEqual(r, ['attempters'])

    _, r = self.anagrams2.get_anagrams("attempting")
    self.assertEqual(r, ['attempting'])

    _, r = self.anagrams2.get_anagrams("attempts")
    self.assertEqual(r, ['attempts'])

    _, r = self.anagrams2.get_anagrams("attend")
    self.assertEqual(r, ['attend'])

    _, r = self.anagrams2.get_anagrams("attendance")
    self.assertEqual(r, ['attendance'])

    _, r = self.anagrams2.get_anagrams("attendances")
    self.assertEqual(r, ['attendances'])

    _, r = self.anagrams2.get_anagrams("attendant")
    self.assertEqual(r, ['attendant'])

    _, r = self.anagrams2.get_anagrams("attendants")
    self.assertEqual(r, ['attendants'])

    _, r = self.anagrams2.get_anagrams("attended")
    self.assertEqual(r, ['attended'])

    _, r = self.anagrams2.get_anagrams("attendee")
    self.assertEqual(r, ['attendee'])

    _, r = self.anagrams2.get_anagrams("attendees")
    self.assertEqual(r, ['attendees'])

    _, r = self.anagrams2.get_anagrams("attender")
    self.assertEqual(r, ['attender'])

    _, r = self.anagrams2.get_anagrams("attenders")
    self.assertEqual(r, ['attenders'])

    _, r = self.anagrams2.get_anagrams("attending")
    self.assertEqual(r, ['attending'])

    _, r = self.anagrams2.get_anagrams("attends")
    self.assertEqual(r, ['attends'])

    _, r = self.anagrams2.get_anagrams("attention")
    self.assertEqual(r, ['attention'])

    _, r = self.anagrams2.get_anagrams("attentional")
    self.assertEqual(r, ['attentional'])

    _, r = self.anagrams2.get_anagrams("attentionality")
    self.assertEqual(r, ['attentionality'])

    _, r = self.anagrams2.get_anagrams("attentions")
    self.assertEqual(r, ['attentions'])

    _, r = self.anagrams2.get_anagrams("attentive")
    self.assertEqual(r, ['attentive', 'tentative'])

    _, r = self.anagrams2.get_anagrams("attentively")
    self.assertEqual(r, ['attentively', 'tentatively'])

    _, r = self.anagrams2.get_anagrams("attentiveness")
    self.assertEqual(r, ['attentiveness'])

    _, r = self.anagrams2.get_anagrams("attenuate")
    self.assertEqual(r, ['attenuate'])

    _, r = self.anagrams2.get_anagrams("attenuated")
    self.assertEqual(r, ['attenuated'])

    _, r = self.anagrams2.get_anagrams("attenuates")
    self.assertEqual(r, ['attenuates'])

    _, r = self.anagrams2.get_anagrams("attenuating")
    self.assertEqual(r, ['attenuating'])

    _, r = self.anagrams2.get_anagrams("attenuation")
    self.assertEqual(r, ['attenuation'])

    _, r = self.anagrams2.get_anagrams("attenuator")
    self.assertEqual(r, ['attenuator'])

    _, r = self.anagrams2.get_anagrams("attenuators")
    self.assertEqual(r, ['attenuators'])

    _, r = self.anagrams2.get_anagrams("attest")
    self.assertEqual(r, ['attest'])

    _, r = self.anagrams2.get_anagrams("attested")
    self.assertEqual(r, ['attested'])

    _, r = self.anagrams2.get_anagrams("attesting")
    self.assertEqual(r, ['attesting'])

    _, r = self.anagrams2.get_anagrams("attests")
    self.assertEqual(r, ['attests'])

    _, r = self.anagrams2.get_anagrams("attic")
    self.assertEqual(r, ['attic', 'tacit'])

    _, r = self.anagrams2.get_anagrams("attica")
    self.assertEqual(r, ['attica'])

    _, r = self.anagrams2.get_anagrams("attics")
    self.assertEqual(r, ['attics', 'static'])

    _, r = self.anagrams2.get_anagrams("attire")
    self.assertEqual(r, ['attire'])

    _, r = self.anagrams2.get_anagrams("attired")
    self.assertEqual(r, ['attired'])

    _, r = self.anagrams2.get_anagrams("attires")
    self.assertEqual(r, ['attires'])

    _, r = self.anagrams2.get_anagrams("attiring")
    self.assertEqual(r, ['attiring'])

    _, r = self.anagrams2.get_anagrams("attitude")
    self.assertEqual(r, ['attitude'])

    _, r = self.anagrams2.get_anagrams("attitudes")
    self.assertEqual(r, ['attitudes'])

    _, r = self.anagrams2.get_anagrams("attitudinal")
    self.assertEqual(r, ['attitudinal'])

    _, r = self.anagrams2.get_anagrams("attlee")
    self.assertEqual(r, ['attlee'])

    _, r = self.anagrams2.get_anagrams("attorney")
    self.assertEqual(r, ['attorney'])

    _, r = self.anagrams2.get_anagrams("attorneys")
    self.assertEqual(r, ['attorneys'])

    _, r = self.anagrams2.get_anagrams("attract")
    self.assertEqual(r, ['attract'])

    _, r = self.anagrams2.get_anagrams("attracted")
    self.assertEqual(r, ['attracted'])

    _, r = self.anagrams2.get_anagrams("attracting")
    self.assertEqual(r, ['attracting'])

    _, r = self.anagrams2.get_anagrams("attraction")
    self.assertEqual(r, ['attraction'])

    _, r = self.anagrams2.get_anagrams("attractions")
    self.assertEqual(r, ['attractions'])

    _, r = self.anagrams2.get_anagrams("attractive")
    self.assertEqual(r, ['attractive'])

    _, r = self.anagrams2.get_anagrams("attractively")
    self.assertEqual(r, ['attractively'])

    _, r = self.anagrams2.get_anagrams("attractiveness")
    self.assertEqual(r, ['attractiveness'])

    _, r = self.anagrams2.get_anagrams("attractor")
    self.assertEqual(r, ['attractor'])

    _, r = self.anagrams2.get_anagrams("attractors")
    self.assertEqual(r, ['attractors'])

    _, r = self.anagrams2.get_anagrams("attracts")
    self.assertEqual(r, ['attracts'])

    _, r = self.anagrams2.get_anagrams("attributable")
    self.assertEqual(r, ['attributable'])

    _, r = self.anagrams2.get_anagrams("attribute")
    self.assertEqual(r, ['attribute'])

    _, r = self.anagrams2.get_anagrams("attributed")
    self.assertEqual(r, ['attributed'])

    _, r = self.anagrams2.get_anagrams("attributes")
    self.assertEqual(r, ['attributes'])

    _, r = self.anagrams2.get_anagrams("attributing")
    self.assertEqual(r, ['attributing'])

    _, r = self.anagrams2.get_anagrams("attribution")
    self.assertEqual(r, ['attribution'])

    _, r = self.anagrams2.get_anagrams("attributions")
    self.assertEqual(r, ['attributions'])

    _, r = self.anagrams2.get_anagrams("attributive")
    self.assertEqual(r, ['attributive'])

    _, r = self.anagrams2.get_anagrams("attributively")
    self.assertEqual(r, ['attributively'])

    _, r = self.anagrams2.get_anagrams("attrition")
    self.assertEqual(r, ['attrition'])

    _, r = self.anagrams2.get_anagrams("attune")
    self.assertEqual(r, ['attune', 'nutate'])

    _, r = self.anagrams2.get_anagrams("attuned")
    self.assertEqual(r, ['attuned', 'taunted'])

    _, r = self.anagrams2.get_anagrams("attunes")
    self.assertEqual(r, ['attunes'])

    _, r = self.anagrams2.get_anagrams("attuning")
    self.assertEqual(r, ['attuning', 'taunting'])

    _, r = self.anagrams2.get_anagrams("atwater")
    self.assertEqual(r, ['atwater'])

    _, r = self.anagrams2.get_anagrams("atwood")
    self.assertEqual(r, ['atwood'])

    _, r = self.anagrams2.get_anagrams("atypical")
    self.assertEqual(r, ['atypical'])

    _, r = self.anagrams2.get_anagrams("atypically")
    self.assertEqual(r, ['atypically'])

    _, r = self.anagrams2.get_anagrams("auberge")
    self.assertEqual(r, ['auberge'])

    _, r = self.anagrams2.get_anagrams("aubrey")
    self.assertEqual(r, ['aubrey'])

    _, r = self.anagrams2.get_anagrams("auburn")
    self.assertEqual(r, ['auburn'])

    _, r = self.anagrams2.get_anagrams("auckland")
    self.assertEqual(r, ['auckland'])

    _, r = self.anagrams2.get_anagrams("auction")
    self.assertEqual(r, ['auction', 'caution'])

    _, r = self.anagrams2.get_anagrams("auctioneer")
    self.assertEqual(r, ['auctioneer'])

    _, r = self.anagrams2.get_anagrams("auctioneers")
    self.assertEqual(r, ['auctioneers'])

    _, r = self.anagrams2.get_anagrams("audacious")
    self.assertEqual(r, ['audacious'])

    _, r = self.anagrams2.get_anagrams("audaciously")
    self.assertEqual(r, ['audaciously'])

    _, r = self.anagrams2.get_anagrams("audaciousness")
    self.assertEqual(r, ['audaciousness'])

    _, r = self.anagrams2.get_anagrams("audacity")
    self.assertEqual(r, ['audacity'])

    _, r = self.anagrams2.get_anagrams("audible")
    self.assertEqual(r, ['audible'])

    _, r = self.anagrams2.get_anagrams("audibly")
    self.assertEqual(r, ['audibly'])

    _, r = self.anagrams2.get_anagrams("audience")
    self.assertEqual(r, ['audience'])

    _, r = self.anagrams2.get_anagrams("audiences")
    self.assertEqual(r, ['audiences'])

    _, r = self.anagrams2.get_anagrams("audio")
    self.assertEqual(r, ['audio'])

    _, r = self.anagrams2.get_anagrams("audiogram")
    self.assertEqual(r, ['audiogram'])

    _, r = self.anagrams2.get_anagrams("audiograms")
    self.assertEqual(r, ['audiograms'])

    _, r = self.anagrams2.get_anagrams("audiological")
    self.assertEqual(r, ['audiological'])

    _, r = self.anagrams2.get_anagrams("audiologist")
    self.assertEqual(r, ['audiologist'])

    _, r = self.anagrams2.get_anagrams("audiologists")
    self.assertEqual(r, ['audiologists'])

    _, r = self.anagrams2.get_anagrams("audiology")
    self.assertEqual(r, ['audiology'])

    _, r = self.anagrams2.get_anagrams("audiometer")
    self.assertEqual(r, ['audiometer'])

    _, r = self.anagrams2.get_anagrams("audiometers")
    self.assertEqual(r, ['audiometers'])

    _, r = self.anagrams2.get_anagrams("audiometric")
    self.assertEqual(r, ['audiometric'])

    _, r = self.anagrams2.get_anagrams("audiometry")
    self.assertEqual(r, ['audiometry'])

    _, r = self.anagrams2.get_anagrams("audit")
    self.assertEqual(r, ['audit'])

    _, r = self.anagrams2.get_anagrams("audited")
    self.assertEqual(r, ['audited'])

    _, r = self.anagrams2.get_anagrams("auditing")
    self.assertEqual(r, ['auditing'])

    _, r = self.anagrams2.get_anagrams("audition")
    self.assertEqual(r, ['audition'])

    _, r = self.anagrams2.get_anagrams("auditioned")
    self.assertEqual(r, ['auditioned'])

    _, r = self.anagrams2.get_anagrams("auditioning")
    self.assertEqual(r, ['auditioning'])

    _, r = self.anagrams2.get_anagrams("auditions")
    self.assertEqual(r, ['auditions'])

    _, r = self.anagrams2.get_anagrams("auditor")
    self.assertEqual(r, ['auditor'])

    _, r = self.anagrams2.get_anagrams("auditorium")
    self.assertEqual(r, ['auditorium'])

    _, r = self.anagrams2.get_anagrams("auditors")
    self.assertEqual(r, ['auditors'])

    _, r = self.anagrams2.get_anagrams("auditory")
    self.assertEqual(r, ['auditory'])

    _, r = self.anagrams2.get_anagrams("audits")
    self.assertEqual(r, ['audits'])

    _, r = self.anagrams2.get_anagrams("audrey")
    self.assertEqual(r, ['audrey'])

    _, r = self.anagrams2.get_anagrams("audubon")
    self.assertEqual(r, ['audubon'])

    _, r = self.anagrams2.get_anagrams("auerbach")
    self.assertEqual(r, ['auerbach'])

    _, r = self.anagrams2.get_anagrams("augean")
    self.assertEqual(r, ['augean'])

    _, r = self.anagrams2.get_anagrams("auger")
    self.assertEqual(r, ['argue', 'auger'])

    _, r = self.anagrams2.get_anagrams("augers")
    self.assertEqual(r, ['argues', 'augers'])

    _, r = self.anagrams2.get_anagrams("aught")
    self.assertEqual(r, ['aught'])

    _, r = self.anagrams2.get_anagrams("augment")
    self.assertEqual(r, ['augment'])

    _, r = self.anagrams2.get_anagrams("augmentation")
    self.assertEqual(r, ['augmentation'])

    _, r = self.anagrams2.get_anagrams("augmented")
    self.assertEqual(r, ['augmented'])

    _, r = self.anagrams2.get_anagrams("augmenting")
    self.assertEqual(r, ['augmenting'])

    _, r = self.anagrams2.get_anagrams("augments")
    self.assertEqual(r, ['augments'])

    _, r = self.anagrams2.get_anagrams("augur")
    self.assertEqual(r, ['augur'])

    _, r = self.anagrams2.get_anagrams("augurs")
    self.assertEqual(r, ['augurs'])

    _, r = self.anagrams2.get_anagrams("august")
    self.assertEqual(r, ['august'])

    _, r = self.anagrams2.get_anagrams("augusta")
    self.assertEqual(r, ['augusta'])

    _, r = self.anagrams2.get_anagrams("augustan")
    self.assertEqual(r, ['augustan'])

    _, r = self.anagrams2.get_anagrams("augustine")
    self.assertEqual(r, ['augustine'])

    _, r = self.anagrams2.get_anagrams("augustly")
    self.assertEqual(r, ['augustly'])

    _, r = self.anagrams2.get_anagrams("augustness")
    self.assertEqual(r, ['augustness'])

    _, r = self.anagrams2.get_anagrams("augustus")
    self.assertEqual(r, ['augustus'])

    _, r = self.anagrams2.get_anagrams("aunt")
    self.assertEqual(r, ['aunt'])

    _, r = self.anagrams2.get_anagrams("aunts")
    self.assertEqual(r, ['aunts'])

    _, r = self.anagrams2.get_anagrams("aura")
    self.assertEqual(r, ['aura'])

    _, r = self.anagrams2.get_anagrams("aural")
    self.assertEqual(r, ['aural'])

    _, r = self.anagrams2.get_anagrams("aurally")
    self.assertEqual(r, ['aurally'])

    _, r = self.anagrams2.get_anagrams("auras")
    self.assertEqual(r, ['auras'])

    _, r = self.anagrams2.get_anagrams("aurelius")
    self.assertEqual(r, ['aurelius'])

    _, r = self.anagrams2.get_anagrams("aureole")
    self.assertEqual(r, ['aureole'])

    _, r = self.anagrams2.get_anagrams("aureomycin")
    self.assertEqual(r, ['aureomycin'])

    _, r = self.anagrams2.get_anagrams("auriga")
    self.assertEqual(r, ['auriga'])

    _, r = self.anagrams2.get_anagrams("aurora")
    self.assertEqual(r, ['aurora'])

    _, r = self.anagrams2.get_anagrams("auschwitz")
    self.assertEqual(r, ['auschwitz'])

    _, r = self.anagrams2.get_anagrams("auscultate")
    self.assertEqual(r, ['auscultate'])

    _, r = self.anagrams2.get_anagrams("auscultated")
    self.assertEqual(r, ['auscultated'])

    _, r = self.anagrams2.get_anagrams("auscultates")
    self.assertEqual(r, ['auscultates'])

    _, r = self.anagrams2.get_anagrams("auscultating")
    self.assertEqual(r, ['auscultating'])

    _, r = self.anagrams2.get_anagrams("auscultation")
    self.assertEqual(r, ['auscultation'])

    _, r = self.anagrams2.get_anagrams("auscultations")
    self.assertEqual(r, ['auscultations'])

    _, r = self.anagrams2.get_anagrams("auspice")
    self.assertEqual(r, ['auspice'])

    _, r = self.anagrams2.get_anagrams("auspices")
    self.assertEqual(r, ['auspices'])

    _, r = self.anagrams2.get_anagrams("auspicious")
    self.assertEqual(r, ['auspicious'])

    _, r = self.anagrams2.get_anagrams("auspiciously")
    self.assertEqual(r, ['auspiciously'])

    _, r = self.anagrams2.get_anagrams("austere")
    self.assertEqual(r, ['austere'])

    _, r = self.anagrams2.get_anagrams("austerely")
    self.assertEqual(r, ['austerely'])

    _, r = self.anagrams2.get_anagrams("austerity")
    self.assertEqual(r, ['austerity'])

    _, r = self.anagrams2.get_anagrams("austin")
    self.assertEqual(r, ['austin'])

    _, r = self.anagrams2.get_anagrams("australia")
    self.assertEqual(r, ['australia'])

    _, r = self.anagrams2.get_anagrams("australian")
    self.assertEqual(r, ['australian', 'saturnalia'])

    _, r = self.anagrams2.get_anagrams("australianize")
    self.assertEqual(r, ['australianize'])

    _, r = self.anagrams2.get_anagrams("australianizes")
    self.assertEqual(r, ['australianizes'])

    _, r = self.anagrams2.get_anagrams("australis")
    self.assertEqual(r, ['australis'])

    _, r = self.anagrams2.get_anagrams("austria")
    self.assertEqual(r, ['austria'])

    _, r = self.anagrams2.get_anagrams("austrian")
    self.assertEqual(r, ['austrian'])

    _, r = self.anagrams2.get_anagrams("austrianize")
    self.assertEqual(r, ['austrianize'])

    _, r = self.anagrams2.get_anagrams("austrianizes")
    self.assertEqual(r, ['austrianizes'])

    _, r = self.anagrams2.get_anagrams("authentic")
    self.assertEqual(r, ['authentic'])

    _, r = self.anagrams2.get_anagrams("authentically")
    self.assertEqual(r, ['authentically'])

    _, r = self.anagrams2.get_anagrams("authenticate")
    self.assertEqual(r, ['authenticate'])

    _, r = self.anagrams2.get_anagrams("authenticated")
    self.assertEqual(r, ['authenticated'])

    _, r = self.anagrams2.get_anagrams("authenticates")
    self.assertEqual(r, ['authenticates'])

    _, r = self.anagrams2.get_anagrams("authenticating")
    self.assertEqual(r, ['authenticating'])

    _, r = self.anagrams2.get_anagrams("authentication")
    self.assertEqual(r, ['authentication'])

    _, r = self.anagrams2.get_anagrams("authentications")
    self.assertEqual(r, ['authentications'])

    _, r = self.anagrams2.get_anagrams("authenticator")
    self.assertEqual(r, ['authenticator'])

    _, r = self.anagrams2.get_anagrams("authenticators")
    self.assertEqual(r, ['authenticators'])

    _, r = self.anagrams2.get_anagrams("authenticity")
    self.assertEqual(r, ['authenticity'])

    _, r = self.anagrams2.get_anagrams("author")
    self.assertEqual(r, ['author'])

    _, r = self.anagrams2.get_anagrams("authored")
    self.assertEqual(r, ['authored'])

    _, r = self.anagrams2.get_anagrams("authoring")
    self.assertEqual(r, ['authoring'])

    _, r = self.anagrams2.get_anagrams("authoritarian")
    self.assertEqual(r, ['authoritarian'])

    _, r = self.anagrams2.get_anagrams("authoritarianism")
    self.assertEqual(r, ['authoritarianism'])

    _, r = self.anagrams2.get_anagrams("authoritative")
    self.assertEqual(r, ['authoritative'])

    _, r = self.anagrams2.get_anagrams("authoritatively")
    self.assertEqual(r, ['authoritatively'])

    _, r = self.anagrams2.get_anagrams("authorities")
    self.assertEqual(r, ['authorities'])

    _, r = self.anagrams2.get_anagrams("authority")
    self.assertEqual(r, ['authority'])

    _, r = self.anagrams2.get_anagrams("authorization")
    self.assertEqual(r, ['authorization'])

    _, r = self.anagrams2.get_anagrams("authorizations")
    self.assertEqual(r, ['authorizations'])

    _, r = self.anagrams2.get_anagrams("authorize")
    self.assertEqual(r, ['authorize'])

    _, r = self.anagrams2.get_anagrams("authorized")
    self.assertEqual(r, ['authorized'])

    _, r = self.anagrams2.get_anagrams("authorizer")
    self.assertEqual(r, ['authorizer'])

    _, r = self.anagrams2.get_anagrams("authorizers")
    self.assertEqual(r, ['authorizers'])

    _, r = self.anagrams2.get_anagrams("authorizes")
    self.assertEqual(r, ['authorizes'])

    _, r = self.anagrams2.get_anagrams("authorizing")
    self.assertEqual(r, ['authorizing'])

    _, r = self.anagrams2.get_anagrams("authors")
    self.assertEqual(r, ['authors'])

    _, r = self.anagrams2.get_anagrams("authorship")
    self.assertEqual(r, ['authorship'])

    _, r = self.anagrams2.get_anagrams("autism")
    self.assertEqual(r, ['autism'])

    _, r = self.anagrams2.get_anagrams("autistic")
    self.assertEqual(r, ['autistic'])

    _, r = self.anagrams2.get_anagrams("auto")
    self.assertEqual(r, ['auto'])

    _, r = self.anagrams2.get_anagrams("autobiographic")
    self.assertEqual(r, ['autobiographic'])

    _, r = self.anagrams2.get_anagrams("autobiographical")
    self.assertEqual(r, ['autobiographical'])

    _, r = self.anagrams2.get_anagrams("autobiographies")
    self.assertEqual(r, ['autobiographies'])

    _, r = self.anagrams2.get_anagrams("autobiography")
    self.assertEqual(r, ['autobiography'])

    _, r = self.anagrams2.get_anagrams("autocollimator")
    self.assertEqual(r, ['autocollimator'])

    _, r = self.anagrams2.get_anagrams("autocorrelate")
    self.assertEqual(r, ['autocorrelate'])

    _, r = self.anagrams2.get_anagrams("autocorrelation")
    self.assertEqual(r, ['autocorrelation'])

    _, r = self.anagrams2.get_anagrams("autocracies")
    self.assertEqual(r, ['autocracies'])

    _, r = self.anagrams2.get_anagrams("autocracy")
    self.assertEqual(r, ['autocracy'])

    _, r = self.anagrams2.get_anagrams("autocrat")
    self.assertEqual(r, ['actuator', 'autocrat'])

    _, r = self.anagrams2.get_anagrams("autocratic")
    self.assertEqual(r, ['autocratic'])

    _, r = self.anagrams2.get_anagrams("autocratically")
    self.assertEqual(r, ['autocratically'])

    _, r = self.anagrams2.get_anagrams("autocrats")
    self.assertEqual(r, ['actuators', 'autocrats'])

    _, r = self.anagrams2.get_anagrams("autodecrement")
    self.assertEqual(r, ['autodecrement'])

    _, r = self.anagrams2.get_anagrams("autodecremented")
    self.assertEqual(r, ['autodecremented'])

    _, r = self.anagrams2.get_anagrams("autodecrements")
    self.assertEqual(r, ['autodecrements'])

    _, r = self.anagrams2.get_anagrams("autodialer")
    self.assertEqual(r, ['autodialer'])

    _, r = self.anagrams2.get_anagrams("autofluorescence")
    self.assertEqual(r, ['autofluorescence'])

    _, r = self.anagrams2.get_anagrams("autograph")
    self.assertEqual(r, ['autograph'])

    _, r = self.anagrams2.get_anagrams("autographed")
    self.assertEqual(r, ['autographed'])

    _, r = self.anagrams2.get_anagrams("autographing")
    self.assertEqual(r, ['autographing'])

    _, r = self.anagrams2.get_anagrams("autographs")
    self.assertEqual(r, ['autographs'])

    _, r = self.anagrams2.get_anagrams("autoincrement")
    self.assertEqual(r, ['autoincrement'])

    _, r = self.anagrams2.get_anagrams("autoincremented")
    self.assertEqual(r, ['autoincremented'])

    _, r = self.anagrams2.get_anagrams("autoincrements")
    self.assertEqual(r, ['autoincrements'])

    _, r = self.anagrams2.get_anagrams("autoindex")
    self.assertEqual(r, ['autoindex'])

    _, r = self.anagrams2.get_anagrams("autoindexing")
    self.assertEqual(r, ['autoindexing'])

    _, r = self.anagrams2.get_anagrams("automata")
    self.assertEqual(r, ['automata'])

    _, r = self.anagrams2.get_anagrams("automate")
    self.assertEqual(r, ['automate'])

    _, r = self.anagrams2.get_anagrams("automated")
    self.assertEqual(r, ['automated'])

    _, r = self.anagrams2.get_anagrams("automates")
    self.assertEqual(r, ['automates'])

    _, r = self.anagrams2.get_anagrams("automatic")
    self.assertEqual(r, ['automatic'])

    _, r = self.anagrams2.get_anagrams("automatically")
    self.assertEqual(r, ['automatically'])

    _, r = self.anagrams2.get_anagrams("automating")
    self.assertEqual(r, ['automating'])

    _, r = self.anagrams2.get_anagrams("automation")
    self.assertEqual(r, ['automation'])

    _, r = self.anagrams2.get_anagrams("automaton")
    self.assertEqual(r, ['automaton'])

    _, r = self.anagrams2.get_anagrams("automobile")
    self.assertEqual(r, ['automobile'])

    _, r = self.anagrams2.get_anagrams("automobiles")
    self.assertEqual(r, ['automobiles'])

    _, r = self.anagrams2.get_anagrams("automotive")
    self.assertEqual(r, ['automotive'])

    _, r = self.anagrams2.get_anagrams("autonavigator")
    self.assertEqual(r, ['autonavigator'])

    _, r = self.anagrams2.get_anagrams("autonavigators")
    self.assertEqual(r, ['autonavigators'])

    _, r = self.anagrams2.get_anagrams("autonomic")
    self.assertEqual(r, ['autonomic'])

    _, r = self.anagrams2.get_anagrams("autonomous")
    self.assertEqual(r, ['autonomous'])

    _, r = self.anagrams2.get_anagrams("autonomously")
    self.assertEqual(r, ['autonomously'])

    _, r = self.anagrams2.get_anagrams("autonomy")
    self.assertEqual(r, ['autonomy'])

    _, r = self.anagrams2.get_anagrams("autopilot")
    self.assertEqual(r, ['autopilot'])

    _, r = self.anagrams2.get_anagrams("autopilots")
    self.assertEqual(r, ['autopilots'])

    _, r = self.anagrams2.get_anagrams("autopsied")
    self.assertEqual(r, ['autopsied'])

    _, r = self.anagrams2.get_anagrams("autopsies")
    self.assertEqual(r, ['autopsies'])

    _, r = self.anagrams2.get_anagrams("autopsy")
    self.assertEqual(r, ['autopsy'])

    _, r = self.anagrams2.get_anagrams("autoregressive")
    self.assertEqual(r, ['autoregressive'])

    _, r = self.anagrams2.get_anagrams("autos")
    self.assertEqual(r, ['autos'])

    _, r = self.anagrams2.get_anagrams("autosuggestibility")
    self.assertEqual(r, ['autosuggestibility'])

    _, r = self.anagrams2.get_anagrams("autotransformer")
    self.assertEqual(r, ['autotransformer'])

    _, r = self.anagrams2.get_anagrams("autumn")
    self.assertEqual(r, ['autumn'])

    _, r = self.anagrams2.get_anagrams("autumnal")
    self.assertEqual(r, ['autumnal'])

    _, r = self.anagrams2.get_anagrams("autumns")
    self.assertEqual(r, ['autumns'])

    _, r = self.anagrams2.get_anagrams("auxiliaries")
    self.assertEqual(r, ['auxiliaries'])

    _, r = self.anagrams2.get_anagrams("auxiliary")
    self.assertEqual(r, ['auxiliary'])

    _, r = self.anagrams2.get_anagrams("avail")
    self.assertEqual(r, ['avail'])

    _, r = self.anagrams2.get_anagrams("availabilities")
    self.assertEqual(r, ['availabilities'])

    _, r = self.anagrams2.get_anagrams("availability")
    self.assertEqual(r, ['availability'])

    _, r = self.anagrams2.get_anagrams("available")
    self.assertEqual(r, ['available'])

    _, r = self.anagrams2.get_anagrams("availably")
    self.assertEqual(r, ['availably'])

    _, r = self.anagrams2.get_anagrams("availed")
    self.assertEqual(r, ['availed'])

    _, r = self.anagrams2.get_anagrams("availer")
    self.assertEqual(r, ['availer'])

    _, r = self.anagrams2.get_anagrams("availers")
    self.assertEqual(r, ['availers'])

    _, r = self.anagrams2.get_anagrams("availing")
    self.assertEqual(r, ['availing'])

    _, r = self.anagrams2.get_anagrams("avails")
    self.assertEqual(r, ['avails', 'saliva'])

    _, r = self.anagrams2.get_anagrams("avalanche")
    self.assertEqual(r, ['avalanche'])

    _, r = self.anagrams2.get_anagrams("avalanched")
    self.assertEqual(r, ['avalanched'])

    _, r = self.anagrams2.get_anagrams("avalanches")
    self.assertEqual(r, ['avalanches'])

    _, r = self.anagrams2.get_anagrams("avalanching")
    self.assertEqual(r, ['avalanching'])

    _, r = self.anagrams2.get_anagrams("avant")
    self.assertEqual(r, ['avant'])

    _, r = self.anagrams2.get_anagrams("avarice")
    self.assertEqual(r, ['avarice'])

    _, r = self.anagrams2.get_anagrams("avaricious")
    self.assertEqual(r, ['avaricious'])

    _, r = self.anagrams2.get_anagrams("avariciously")
    self.assertEqual(r, ['avariciously'])

    _, r = self.anagrams2.get_anagrams("avenge")
    self.assertEqual(r, ['avenge', 'geneva'])

    _, r = self.anagrams2.get_anagrams("avenged")
    self.assertEqual(r, ['avenged'])

    _, r = self.anagrams2.get_anagrams("avenger")
    self.assertEqual(r, ['avenger', 'engrave'])

    _, r = self.anagrams2.get_anagrams("avenges")
    self.assertEqual(r, ['avenges'])

    _, r = self.anagrams2.get_anagrams("avenging")
    self.assertEqual(r, ['avenging'])

    _, r = self.anagrams2.get_anagrams("aventine")
    self.assertEqual(r, ['aventine', 'venetian'])

    _, r = self.anagrams2.get_anagrams("aventino")
    self.assertEqual(r, ['aventino', 'innovate'])

    _, r = self.anagrams2.get_anagrams("avenue")
    self.assertEqual(r, ['avenue'])

    _, r = self.anagrams2.get_anagrams("avenues")
    self.assertEqual(r, ['avenues'])

    _, r = self.anagrams2.get_anagrams("aver")
    self.assertEqual(r, ['aver', 'rave', 'vera'])

    _, r = self.anagrams2.get_anagrams("average")
    self.assertEqual(r, ['average'])

    _, r = self.anagrams2.get_anagrams("averaged")
    self.assertEqual(r, ['averaged'])

    _, r = self.anagrams2.get_anagrams("averages")
    self.assertEqual(r, ['averages'])

    _, r = self.anagrams2.get_anagrams("averaging")
    self.assertEqual(r, ['averaging'])

    _, r = self.anagrams2.get_anagrams("avernus")
    self.assertEqual(r, ['avernus'])

    _, r = self.anagrams2.get_anagrams("averred")
    self.assertEqual(r, ['averred'])

    _, r = self.anagrams2.get_anagrams("averrer")
    self.assertEqual(r, ['averrer'])

    _, r = self.anagrams2.get_anagrams("averring")
    self.assertEqual(r, ['averring'])

    _, r = self.anagrams2.get_anagrams("avers")
    self.assertEqual(r, ['avers', 'raves', 'saver', 'versa'])

    _, r = self.anagrams2.get_anagrams("averse")
    self.assertEqual(r, ['averse'])

    _, r = self.anagrams2.get_anagrams("aversion")
    self.assertEqual(r, ['aversion'])

    _, r = self.anagrams2.get_anagrams("aversions")
    self.assertEqual(r, ['aversions'])

    _, r = self.anagrams2.get_anagrams("avert")
    self.assertEqual(r, ['avert'])

    _, r = self.anagrams2.get_anagrams("averted")
    self.assertEqual(r, ['averted'])

    _, r = self.anagrams2.get_anagrams("averting")
    self.assertEqual(r, ['averting'])

    _, r = self.anagrams2.get_anagrams("averts")
    self.assertEqual(r, ['averts', 'starve', 'vaster'])

    _, r = self.anagrams2.get_anagrams("avery")
    self.assertEqual(r, ['avery'])

    _, r = self.anagrams2.get_anagrams("avesta")
    self.assertEqual(r, ['avesta'])

    _, r = self.anagrams2.get_anagrams("avian")
    self.assertEqual(r, ['avian'])

    _, r = self.anagrams2.get_anagrams("aviaries")
    self.assertEqual(r, ['aviaries'])

    _, r = self.anagrams2.get_anagrams("aviary")
    self.assertEqual(r, ['aviary'])

    _, r = self.anagrams2.get_anagrams("aviation")
    self.assertEqual(r, ['aviation'])

    _, r = self.anagrams2.get_anagrams("aviator")
    self.assertEqual(r, ['aviator'])

    _, r = self.anagrams2.get_anagrams("aviators")
    self.assertEqual(r, ['aviators'])

    _, r = self.anagrams2.get_anagrams("avid")
    self.assertEqual(r, ['avid', 'vida'])

    _, r = self.anagrams2.get_anagrams("avidity")
    self.assertEqual(r, ['avidity'])

    _, r = self.anagrams2.get_anagrams("avidly")
    self.assertEqual(r, ['avidly'])

    _, r = self.anagrams2.get_anagrams("avignon")
    self.assertEqual(r, ['avignon'])

    _, r = self.anagrams2.get_anagrams("avionic")
    self.assertEqual(r, ['avionic'])

    _, r = self.anagrams2.get_anagrams("avionics")
    self.assertEqual(r, ['avionics'])

    _, r = self.anagrams2.get_anagrams("avis")
    self.assertEqual(r, ['avis', 'siva', 'visa'])

    _, r = self.anagrams2.get_anagrams("aviv")
    self.assertEqual(r, ['aviv'])

    _, r = self.anagrams2.get_anagrams("avocado")
    self.assertEqual(r, ['avocado'])

    _, r = self.anagrams2.get_anagrams("avocados")
    self.assertEqual(r, ['avocados'])

    _, r = self.anagrams2.get_anagrams("avocation")
    self.assertEqual(r, ['avocation'])

    _, r = self.anagrams2.get_anagrams("avocations")
    self.assertEqual(r, ['avocations'])

    _, r = self.anagrams2.get_anagrams("avogadro")
    self.assertEqual(r, ['avogadro'])

    _, r = self.anagrams2.get_anagrams("avoid")
    self.assertEqual(r, ['avoid'])

    _, r = self.anagrams2.get_anagrams("avoidable")
    self.assertEqual(r, ['avoidable'])

    _, r = self.anagrams2.get_anagrams("avoidably")
    self.assertEqual(r, ['avoidably'])

    _, r = self.anagrams2.get_anagrams("avoidance")
    self.assertEqual(r, ['avoidance'])

    _, r = self.anagrams2.get_anagrams("avoided")
    self.assertEqual(r, ['avoided'])

    _, r = self.anagrams2.get_anagrams("avoider")
    self.assertEqual(r, ['avoider'])

    _, r = self.anagrams2.get_anagrams("avoiders")
    self.assertEqual(r, ['avoiders'])

    _, r = self.anagrams2.get_anagrams("avoiding")
    self.assertEqual(r, ['avoiding'])

    _, r = self.anagrams2.get_anagrams("avoids")
    self.assertEqual(r, ['avoids'])

    _, r = self.anagrams2.get_anagrams("avon")
    self.assertEqual(r, ['avon'])

    _, r = self.anagrams2.get_anagrams("avouch")
    self.assertEqual(r, ['avouch'])

    _, r = self.anagrams2.get_anagrams("avow")
    self.assertEqual(r, ['avow'])

    _, r = self.anagrams2.get_anagrams("avowal")
    self.assertEqual(r, ['avowal'])

    _, r = self.anagrams2.get_anagrams("avowed")
    self.assertEqual(r, ['avowed'])

    _, r = self.anagrams2.get_anagrams("avows")
    self.assertEqual(r, ['avows'])

    _, r = self.anagrams2.get_anagrams("await")
    self.assertEqual(r, ['await'])

    _, r = self.anagrams2.get_anagrams("awaited")
    self.assertEqual(r, ['awaited'])

    _, r = self.anagrams2.get_anagrams("awaiting")
    self.assertEqual(r, ['awaiting'])

    _, r = self.anagrams2.get_anagrams("awaits")
    self.assertEqual(r, ['awaits'])

    _, r = self.anagrams2.get_anagrams("awake")
    self.assertEqual(r, ['awake'])

    _, r = self.anagrams2.get_anagrams("awaken")
    self.assertEqual(r, ['awaken'])

    _, r = self.anagrams2.get_anagrams("awakened")
    self.assertEqual(r, ['awakened'])

    _, r = self.anagrams2.get_anagrams("awakening")
    self.assertEqual(r, ['awakening'])

    _, r = self.anagrams2.get_anagrams("awakens")
    self.assertEqual(r, ['awakens'])

    _, r = self.anagrams2.get_anagrams("awakes")
    self.assertEqual(r, ['awakes'])

    _, r = self.anagrams2.get_anagrams("awaking")
    self.assertEqual(r, ['awaking'])

    _, r = self.anagrams2.get_anagrams("award")
    self.assertEqual(r, ['award'])

    _, r = self.anagrams2.get_anagrams("awarded")
    self.assertEqual(r, ['awarded'])

    _, r = self.anagrams2.get_anagrams("awarder")
    self.assertEqual(r, ['awarder'])

    _, r = self.anagrams2.get_anagrams("awarders")
    self.assertEqual(r, ['awarders'])

    _, r = self.anagrams2.get_anagrams("awarding")
    self.assertEqual(r, ['awarding'])

    _, r = self.anagrams2.get_anagrams("awards")
    self.assertEqual(r, ['awards'])

    _, r = self.anagrams2.get_anagrams("aware")
    self.assertEqual(r, ['aware'])

    _, r = self.anagrams2.get_anagrams("awareness")
    self.assertEqual(r, ['awareness'])

    _, r = self.anagrams2.get_anagrams("awash")
    self.assertEqual(r, ['awash'])

    _, r = self.anagrams2.get_anagrams("away")
    self.assertEqual(r, ['away'])

    _, r = self.anagrams2.get_anagrams("awe")
    self.assertEqual(r, ['awe'])

    _, r = self.anagrams2.get_anagrams("awed")
    self.assertEqual(r, ['awed', 'wade'])

    _, r = self.anagrams2.get_anagrams("awesome")
    self.assertEqual(r, ['awesome'])

    _, r = self.anagrams2.get_anagrams("awful")
    self.assertEqual(r, ['awful'])

    _, r = self.anagrams2.get_anagrams("awfully")
    self.assertEqual(r, ['awfully'])

    _, r = self.anagrams2.get_anagrams("awfulness")
    self.assertEqual(r, ['awfulness'])

    _, r = self.anagrams2.get_anagrams("awhile")
    self.assertEqual(r, ['awhile'])

    _, r = self.anagrams2.get_anagrams("awkward")
    self.assertEqual(r, ['awkward'])

    _, r = self.anagrams2.get_anagrams("awkwardly")
    self.assertEqual(r, ['awkwardly'])

    _, r = self.anagrams2.get_anagrams("awkwardness")
    self.assertEqual(r, ['awkwardness'])

    _, r = self.anagrams2.get_anagrams("awl")
    self.assertEqual(r, ['awl', 'law'])

    _, r = self.anagrams2.get_anagrams("awls")
    self.assertEqual(r, ['awls', 'laws'])

    _, r = self.anagrams2.get_anagrams("awning")
    self.assertEqual(r, ['awning', 'waning'])

    _, r = self.anagrams2.get_anagrams("awnings")
    self.assertEqual(r, ['awnings'])

    _, r = self.anagrams2.get_anagrams("awoke")
    self.assertEqual(r, ['awoke'])

    _, r = self.anagrams2.get_anagrams("awry")
    self.assertEqual(r, ['awry', 'wary'])

    _, r = self.anagrams2.get_anagrams("ax")
    self.assertEqual(r, ['ax'])

    _, r = self.anagrams2.get_anagrams("axed")
    self.assertEqual(r, ['axed'])

    _, r = self.anagrams2.get_anagrams("axel")
    self.assertEqual(r, ['alex', 'axel', 'axle'])

    _, r = self.anagrams2.get_anagrams("axer")
    self.assertEqual(r, ['axer'])

    _, r = self.anagrams2.get_anagrams("axers")
    self.assertEqual(r, ['axers'])

    _, r = self.anagrams2.get_anagrams("axes")
    self.assertEqual(r, ['axes'])

    _, r = self.anagrams2.get_anagrams("axial")
    self.assertEqual(r, ['axial'])

    _, r = self.anagrams2.get_anagrams("axially")
    self.assertEqual(r, ['axially'])

    _, r = self.anagrams2.get_anagrams("axing")
    self.assertEqual(r, ['axing'])

    _, r = self.anagrams2.get_anagrams("axiological")
    self.assertEqual(r, ['axiological'])

    _, r = self.anagrams2.get_anagrams("axiom")
    self.assertEqual(r, ['axiom'])

    _, r = self.anagrams2.get_anagrams("axiomatic")
    self.assertEqual(r, ['axiomatic'])

    _, r = self.anagrams2.get_anagrams("axiomatically")
    self.assertEqual(r, ['axiomatically'])

    _, r = self.anagrams2.get_anagrams("axiomatization")
    self.assertEqual(r, ['axiomatization'])

    _, r = self.anagrams2.get_anagrams("axiomatizations")
    self.assertEqual(r, ['axiomatizations'])

    _, r = self.anagrams2.get_anagrams("axiomatize")
    self.assertEqual(r, ['axiomatize'])

    _, r = self.anagrams2.get_anagrams("axiomatized")
    self.assertEqual(r, ['axiomatized'])

    _, r = self.anagrams2.get_anagrams("axiomatizes")
    self.assertEqual(r, ['axiomatizes'])

    _, r = self.anagrams2.get_anagrams("axiomatizing")
    self.assertEqual(r, ['axiomatizing'])

    _, r = self.anagrams2.get_anagrams("axioms")
    self.assertEqual(r, ['axioms'])

    _, r = self.anagrams2.get_anagrams("axis")
    self.assertEqual(r, ['axis'])

    _, r = self.anagrams2.get_anagrams("axle")
    self.assertEqual(r, ['alex', 'axel', 'axle'])

    _, r = self.anagrams2.get_anagrams("axles")
    self.assertEqual(r, ['axles'])

    _, r = self.anagrams2.get_anagrams("axolotl")
    self.assertEqual(r, ['axolotl'])

    _, r = self.anagrams2.get_anagrams("axolotls")
    self.assertEqual(r, ['axolotls'])

    _, r = self.anagrams2.get_anagrams("axon")
    self.assertEqual(r, ['axon'])

    _, r = self.anagrams2.get_anagrams("axons")
    self.assertEqual(r, ['axons', 'saxon'])

    _, r = self.anagrams2.get_anagrams("aye")
    self.assertEqual(r, ['aye', 'yea'])

    _, r = self.anagrams2.get_anagrams("ayers")
    self.assertEqual(r, ['ayers', 'sayer', 'years'])

    _, r = self.anagrams2.get_anagrams("ayes")
    self.assertEqual(r, ['ayes', 'easy', 'yeas'])

    _, r = self.anagrams2.get_anagrams("aylesbury")
    self.assertEqual(r, ['aylesbury'])

    _, r = self.anagrams2.get_anagrams("azalea")
    self.assertEqual(r, ['azalea'])

    _, r = self.anagrams2.get_anagrams("azaleas")
    self.assertEqual(r, ['azaleas'])

    _, r = self.anagrams2.get_anagrams("azerbaijan")
    self.assertEqual(r, ['azerbaijan'])

    _, r = self.anagrams2.get_anagrams("azimuth")
    self.assertEqual(r, ['azimuth'])

    _, r = self.anagrams2.get_anagrams("azimuths")
    self.assertEqual(r, ['azimuths'])

    _, r = self.anagrams2.get_anagrams("azores")
    self.assertEqual(r, ['azores'])

    _, r = self.anagrams2.get_anagrams("aztec")
    self.assertEqual(r, ['aztec'])

    _, r = self.anagrams2.get_anagrams("aztecan")
    self.assertEqual(r, ['aztecan'])

    _, r = self.anagrams2.get_anagrams("azure")
    self.assertEqual(r, ['azure'])

    _, r = self.anagrams2.get_anagrams("babbage")
    self.assertEqual(r, ['babbage'])

    _, r = self.anagrams2.get_anagrams("babble")
    self.assertEqual(r, ['babble'])

    _, r = self.anagrams2.get_anagrams("babbled")
    self.assertEqual(r, ['babbled', 'blabbed'])

    _, r = self.anagrams2.get_anagrams("babbles")
    self.assertEqual(r, ['babbles'])

    _, r = self.anagrams2.get_anagrams("babbling")
    self.assertEqual(r, ['babbling', 'blabbing'])

    _, r = self.anagrams2.get_anagrams("babcock")
    self.assertEqual(r, ['babcock'])

    _, r = self.anagrams2.get_anagrams("babe")
    self.assertEqual(r, ['abbe', 'babe'])

    _, r = self.anagrams2.get_anagrams("babel")
    self.assertEqual(r, ['babel'])

    _, r = self.anagrams2.get_anagrams("babelize")
    self.assertEqual(r, ['babelize'])

    _, r = self.anagrams2.get_anagrams("babelizes")
    self.assertEqual(r, ['babelizes'])

    _, r = self.anagrams2.get_anagrams("babes")
    self.assertEqual(r, ['babes'])

    _, r = self.anagrams2.get_anagrams("babied")
    self.assertEqual(r, ['babied'])

    _, r = self.anagrams2.get_anagrams("babies")
    self.assertEqual(r, ['babies'])

    _, r = self.anagrams2.get_anagrams("babka")
    self.assertEqual(r, ['babka'])

    _, r = self.anagrams2.get_anagrams("baboon")
    self.assertEqual(r, ['baboon'])

    _, r = self.anagrams2.get_anagrams("baboons")
    self.assertEqual(r, ['baboons'])

    _, r = self.anagrams2.get_anagrams("babul")
    self.assertEqual(r, ['babul', 'bulba'])

    _, r = self.anagrams2.get_anagrams("baby")
    self.assertEqual(r, ['abby', 'baby'])

    _, r = self.anagrams2.get_anagrams("babyhood")
    self.assertEqual(r, ['babyhood'])

    _, r = self.anagrams2.get_anagrams("babying")
    self.assertEqual(r, ['babying'])

    _, r = self.anagrams2.get_anagrams("babyish")
    self.assertEqual(r, ['babyish'])

    _, r = self.anagrams2.get_anagrams("babylon")
    self.assertEqual(r, ['babylon'])

    _, r = self.anagrams2.get_anagrams("babylonian")
    self.assertEqual(r, ['babylonian'])

    _, r = self.anagrams2.get_anagrams("babylonians")
    self.assertEqual(r, ['babylonians'])

    _, r = self.anagrams2.get_anagrams("babylonize")
    self.assertEqual(r, ['babylonize'])

    _, r = self.anagrams2.get_anagrams("babylonizes")
    self.assertEqual(r, ['babylonizes'])

    _, r = self.anagrams2.get_anagrams("babysit")
    self.assertEqual(r, ['babysit'])

    _, r = self.anagrams2.get_anagrams("babysitting")
    self.assertEqual(r, ['babysitting'])

    _, r = self.anagrams2.get_anagrams("baccalaureate")
    self.assertEqual(r, ['baccalaureate'])

    _, r = self.anagrams2.get_anagrams("bacchus")
    self.assertEqual(r, ['bacchus'])

    _, r = self.anagrams2.get_anagrams("bach")
    self.assertEqual(r, ['bach'])

    _, r = self.anagrams2.get_anagrams("bachelor")
    self.assertEqual(r, ['bachelor'])

    _, r = self.anagrams2.get_anagrams("bachelors")
    self.assertEqual(r, ['bachelors'])

    _, r = self.anagrams2.get_anagrams("bacilli")
    self.assertEqual(r, ['bacilli'])

    _, r = self.anagrams2.get_anagrams("bacillus")
    self.assertEqual(r, ['bacillus'])

    _, r = self.anagrams2.get_anagrams("back")
    self.assertEqual(r, ['back'])

    _, r = self.anagrams2.get_anagrams("backache")
    self.assertEqual(r, ['backache'])

    _, r = self.anagrams2.get_anagrams("backaches")
    self.assertEqual(r, ['backaches'])

    _, r = self.anagrams2.get_anagrams("backarrow")
    self.assertEqual(r, ['backarrow'])

    _, r = self.anagrams2.get_anagrams("backbend")
    self.assertEqual(r, ['backbend'])

    _, r = self.anagrams2.get_anagrams("backbends")
    self.assertEqual(r, ['backbends'])

    _, r = self.anagrams2.get_anagrams("backboard")
    self.assertEqual(r, ['backboard'])

    _, r = self.anagrams2.get_anagrams("backbone")
    self.assertEqual(r, ['backbone'])

    _, r = self.anagrams2.get_anagrams("backbones")
    self.assertEqual(r, ['backbones'])

    _, r = self.anagrams2.get_anagrams("backdrop")
    self.assertEqual(r, ['backdrop'])

    _, r = self.anagrams2.get_anagrams("backdrops")
    self.assertEqual(r, ['backdrops'])

    _, r = self.anagrams2.get_anagrams("backed")
    self.assertEqual(r, ['backed'])

    _, r = self.anagrams2.get_anagrams("backer")
    self.assertEqual(r, ['backer'])

    _, r = self.anagrams2.get_anagrams("backers")
    self.assertEqual(r, ['backers'])

    _, r = self.anagrams2.get_anagrams("backfill")
    self.assertEqual(r, ['backfill'])

    _, r = self.anagrams2.get_anagrams("backfiring")
    self.assertEqual(r, ['backfiring'])

    _, r = self.anagrams2.get_anagrams("background")
    self.assertEqual(r, ['background'])

    _, r = self.anagrams2.get_anagrams("backgrounds")
    self.assertEqual(r, ['backgrounds'])

    _, r = self.anagrams2.get_anagrams("backhand")
    self.assertEqual(r, ['backhand'])

    _, r = self.anagrams2.get_anagrams("backing")
    self.assertEqual(r, ['backing'])

    _, r = self.anagrams2.get_anagrams("backlash")
    self.assertEqual(r, ['backlash'])

    _, r = self.anagrams2.get_anagrams("backlog")
    self.assertEqual(r, ['backlog'])

    _, r = self.anagrams2.get_anagrams("backlogged")
    self.assertEqual(r, ['backlogged'])

    _, r = self.anagrams2.get_anagrams("backlogs")
    self.assertEqual(r, ['backlogs'])

    _, r = self.anagrams2.get_anagrams("backorder")
    self.assertEqual(r, ['backorder'])

    _, r = self.anagrams2.get_anagrams("backpack")
    self.assertEqual(r, ['backpack'])

    _, r = self.anagrams2.get_anagrams("backpacks")
    self.assertEqual(r, ['backpacks'])

    _, r = self.anagrams2.get_anagrams("backplane")
    self.assertEqual(r, ['backplane'])

    _, r = self.anagrams2.get_anagrams("backplanes")
    self.assertEqual(r, ['backplanes'])

    _, r = self.anagrams2.get_anagrams("backplate")
    self.assertEqual(r, ['backplate'])

    _, r = self.anagrams2.get_anagrams("backs")
    self.assertEqual(r, ['backs'])

    _, r = self.anagrams2.get_anagrams("backscatter")
    self.assertEqual(r, ['backscatter'])

    _, r = self.anagrams2.get_anagrams("backscattered")
    self.assertEqual(r, ['backscattered'])

    _, r = self.anagrams2.get_anagrams("backscattering")
    self.assertEqual(r, ['backscattering'])

    _, r = self.anagrams2.get_anagrams("backscatters")
    self.assertEqual(r, ['backscatters'])

    _, r = self.anagrams2.get_anagrams("backside")
    self.assertEqual(r, ['backside'])

    _, r = self.anagrams2.get_anagrams("backslash")
    self.assertEqual(r, ['backslash'])

    _, r = self.anagrams2.get_anagrams("backslashes")
    self.assertEqual(r, ['backslashes'])

    _, r = self.anagrams2.get_anagrams("backspace")
    self.assertEqual(r, ['backspace'])

    _, r = self.anagrams2.get_anagrams("backspaced")
    self.assertEqual(r, ['backspaced'])

    _, r = self.anagrams2.get_anagrams("backspaces")
    self.assertEqual(r, ['backspaces'])

    _, r = self.anagrams2.get_anagrams("backspacing")
    self.assertEqual(r, ['backspacing'])

    _, r = self.anagrams2.get_anagrams("backstage")
    self.assertEqual(r, ['backstage'])

    _, r = self.anagrams2.get_anagrams("backstairs")
    self.assertEqual(r, ['backstairs'])

    _, r = self.anagrams2.get_anagrams("backstitch")
    self.assertEqual(r, ['backstitch'])

    _, r = self.anagrams2.get_anagrams("backstitched")
    self.assertEqual(r, ['backstitched'])

    _, r = self.anagrams2.get_anagrams("backstitches")
    self.assertEqual(r, ['backstitches'])

    _, r = self.anagrams2.get_anagrams("backstitching")
    self.assertEqual(r, ['backstitching'])

    _, r = self.anagrams2.get_anagrams("backstop")
    self.assertEqual(r, ['backstop'])

    _, r = self.anagrams2.get_anagrams("backtrack")
    self.assertEqual(r, ['backtrack'])

    _, r = self.anagrams2.get_anagrams("backtracked")
    self.assertEqual(r, ['backtracked'])

    _, r = self.anagrams2.get_anagrams("backtracker")
    self.assertEqual(r, ['backtracker'])

    _, r = self.anagrams2.get_anagrams("backtrackers")
    self.assertEqual(r, ['backtrackers'])

    _, r = self.anagrams2.get_anagrams("backtracking")
    self.assertEqual(r, ['backtracking'])

    _, r = self.anagrams2.get_anagrams("backtracks")
    self.assertEqual(r, ['backtracks'])

    _, r = self.anagrams2.get_anagrams("backup")
    self.assertEqual(r, ['backup'])

    _, r = self.anagrams2.get_anagrams("backups")
    self.assertEqual(r, ['backups'])

    _, r = self.anagrams2.get_anagrams("backus")
    self.assertEqual(r, ['backus'])

    _, r = self.anagrams2.get_anagrams("backward")
    self.assertEqual(r, ['backward', 'drawback'])

    _, r = self.anagrams2.get_anagrams("backwardness")
    self.assertEqual(r, ['backwardness'])

    _, r = self.anagrams2.get_anagrams("backwards")
    self.assertEqual(r, ['backwards', 'drawbacks'])

    _, r = self.anagrams2.get_anagrams("backwater")
    self.assertEqual(r, ['backwater'])

    _, r = self.anagrams2.get_anagrams("backwaters")
    self.assertEqual(r, ['backwaters'])

    _, r = self.anagrams2.get_anagrams("backwoods")
    self.assertEqual(r, ['backwoods'])

    _, r = self.anagrams2.get_anagrams("backyard")
    self.assertEqual(r, ['backyard'])

    _, r = self.anagrams2.get_anagrams("backyards")
    self.assertEqual(r, ['backyards'])

    _, r = self.anagrams2.get_anagrams("bacon")
    self.assertEqual(r, ['bacon'])

    _, r = self.anagrams2.get_anagrams("bacteria")
    self.assertEqual(r, ['bacteria'])

    _, r = self.anagrams2.get_anagrams("bacterial")
    self.assertEqual(r, ['bacterial', 'calibrate'])

    _, r = self.anagrams2.get_anagrams("bacterium")
    self.assertEqual(r, ['bacterium'])

    _, r = self.anagrams2.get_anagrams("bad")
    self.assertEqual(r, ['bad'])

    _, r = self.anagrams2.get_anagrams("bade")
    self.assertEqual(r, ['abed', 'bade', 'bead'])

    _, r = self.anagrams2.get_anagrams("baden")
    self.assertEqual(r, ['baden'])

    _, r = self.anagrams2.get_anagrams("badge")
    self.assertEqual(r, ['badge'])

    _, r = self.anagrams2.get_anagrams("badger")
    self.assertEqual(r, ['badger', 'garbed'])

    _, r = self.anagrams2.get_anagrams("badgered")
    self.assertEqual(r, ['badgered'])

    _, r = self.anagrams2.get_anagrams("badgering")
    self.assertEqual(r, ['badgering'])

    _, r = self.anagrams2.get_anagrams("badgers")
    self.assertEqual(r, ['badgers'])

    _, r = self.anagrams2.get_anagrams("badges")
    self.assertEqual(r, ['badges'])

    _, r = self.anagrams2.get_anagrams("badlands")
    self.assertEqual(r, ['badlands'])

    _, r = self.anagrams2.get_anagrams("badly")
    self.assertEqual(r, ['badly'])

    _, r = self.anagrams2.get_anagrams("badminton")
    self.assertEqual(r, ['badminton'])

    _, r = self.anagrams2.get_anagrams("badness")
    self.assertEqual(r, ['badness'])

    _, r = self.anagrams2.get_anagrams("baffin")
    self.assertEqual(r, ['baffin'])

    _, r = self.anagrams2.get_anagrams("baffle")
    self.assertEqual(r, ['baffle'])

    _, r = self.anagrams2.get_anagrams("baffled")
    self.assertEqual(r, ['baffled'])

    _, r = self.anagrams2.get_anagrams("baffler")
    self.assertEqual(r, ['baffler'])

    _, r = self.anagrams2.get_anagrams("bafflers")
    self.assertEqual(r, ['bafflers'])

    _, r = self.anagrams2.get_anagrams("baffling")
    self.assertEqual(r, ['baffling'])

    _, r = self.anagrams2.get_anagrams("bag")
    self.assertEqual(r, ['bag', 'gab'])

    _, r = self.anagrams2.get_anagrams("bagatelle")
    self.assertEqual(r, ['bagatelle'])

    _, r = self.anagrams2.get_anagrams("bagatelles")
    self.assertEqual(r, ['bagatelles'])

    _, r = self.anagrams2.get_anagrams("bagel")
    self.assertEqual(r, ['bagel', 'gable'])

    _, r = self.anagrams2.get_anagrams("bagels")
    self.assertEqual(r, ['bagels', 'gables'])

    _, r = self.anagrams2.get_anagrams("baggage")
    self.assertEqual(r, ['baggage'])

    _, r = self.anagrams2.get_anagrams("bagged")
    self.assertEqual(r, ['bagged'])

    _, r = self.anagrams2.get_anagrams("bagger")
    self.assertEqual(r, ['bagger', 'beggar'])

    _, r = self.anagrams2.get_anagrams("baggers")
    self.assertEqual(r, ['baggers', 'beggars'])

    _, r = self.anagrams2.get_anagrams("bagging")
    self.assertEqual(r, ['bagging'])

    _, r = self.anagrams2.get_anagrams("baggy")
    self.assertEqual(r, ['baggy'])

    _, r = self.anagrams2.get_anagrams("baghdad")
    self.assertEqual(r, ['baghdad'])

    _, r = self.anagrams2.get_anagrams("bagley")
    self.assertEqual(r, ['bagley'])

    _, r = self.anagrams2.get_anagrams("bagpipe")
    self.assertEqual(r, ['bagpipe'])

    _, r = self.anagrams2.get_anagrams("bagpipes")
    self.assertEqual(r, ['bagpipes'])

    _, r = self.anagrams2.get_anagrams("bagrodia")
    self.assertEqual(r, ['bagrodia'])

    _, r = self.anagrams2.get_anagrams("bagrodias")
    self.assertEqual(r, ['bagrodias'])

    _, r = self.anagrams2.get_anagrams("bags")
    self.assertEqual(r, ['bags'])

    _, r = self.anagrams2.get_anagrams("bah")
    self.assertEqual(r, ['bah'])

    _, r = self.anagrams2.get_anagrams("bahama")
    self.assertEqual(r, ['bahama'])

    _, r = self.anagrams2.get_anagrams("bahamas")
    self.assertEqual(r, ['bahamas'])

    _, r = self.anagrams2.get_anagrams("bahrein")
    self.assertEqual(r, ['bahrein'])

    _, r = self.anagrams2.get_anagrams("bail")
    self.assertEqual(r, ['bail', 'bali'])

    _, r = self.anagrams2.get_anagrams("bailey")
    self.assertEqual(r, ['bailey'])

    _, r = self.anagrams2.get_anagrams("baileys")
    self.assertEqual(r, ['baileys'])

    _, r = self.anagrams2.get_anagrams("bailiff")
    self.assertEqual(r, ['bailiff'])

    _, r = self.anagrams2.get_anagrams("bailiffs")
    self.assertEqual(r, ['bailiffs'])

    _, r = self.anagrams2.get_anagrams("bailing")
    self.assertEqual(r, ['bailing'])

    _, r = self.anagrams2.get_anagrams("baird")
    self.assertEqual(r, ['baird', 'braid', 'rabid'])

    _, r = self.anagrams2.get_anagrams("bairdi")
    self.assertEqual(r, ['bairdi'])

    _, r = self.anagrams2.get_anagrams("bairn")
    self.assertEqual(r, ['bairn', 'brain', 'brian', 'rabin'])

    _, r = self.anagrams2.get_anagrams("bait")
    self.assertEqual(r, ['bait'])

    _, r = self.anagrams2.get_anagrams("baited")
    self.assertEqual(r, ['baited'])

    _, r = self.anagrams2.get_anagrams("baiter")
    self.assertEqual(r, ['baiter'])

    _, r = self.anagrams2.get_anagrams("baiting")
    self.assertEqual(r, ['baiting'])

    _, r = self.anagrams2.get_anagrams("baits")
    self.assertEqual(r, ['baits'])

    _, r = self.anagrams2.get_anagrams("baja")
    self.assertEqual(r, ['baja'])

    _, r = self.anagrams2.get_anagrams("bake")
    self.assertEqual(r, ['bake', 'beak'])

    _, r = self.anagrams2.get_anagrams("baked")
    self.assertEqual(r, ['baked'])

    _, r = self.anagrams2.get_anagrams("bakelite")
    self.assertEqual(r, ['bakelite'])

    _, r = self.anagrams2.get_anagrams("baker")
    self.assertEqual(r, ['baker', 'brake', 'break'])

    _, r = self.anagrams2.get_anagrams("bakeries")
    self.assertEqual(r, ['bakeries'])

    _, r = self.anagrams2.get_anagrams("bakers")
    self.assertEqual(r, ['bakers', 'brakes', 'breaks'])

    _, r = self.anagrams2.get_anagrams("bakersfield")
    self.assertEqual(r, ['bakersfield'])

    _, r = self.anagrams2.get_anagrams("bakery")
    self.assertEqual(r, ['bakery'])

    _, r = self.anagrams2.get_anagrams("bakes")
    self.assertEqual(r, ['bakes', 'beaks'])

    _, r = self.anagrams2.get_anagrams("bakhtiari")
    self.assertEqual(r, ['bakhtiari'])

    _, r = self.anagrams2.get_anagrams("baking")
    self.assertEqual(r, ['baking'])

    _, r = self.anagrams2.get_anagrams("baklava")
    self.assertEqual(r, ['baklava'])

    _, r = self.anagrams2.get_anagrams("baku")
    self.assertEqual(r, ['baku'])

    _, r = self.anagrams2.get_anagrams("balalaika")
    self.assertEqual(r, ['balalaika'])

    _, r = self.anagrams2.get_anagrams("balalaikas")
    self.assertEqual(r, ['balalaikas'])

    _, r = self.anagrams2.get_anagrams("balance")
    self.assertEqual(r, ['balance'])

    _, r = self.anagrams2.get_anagrams("balanced")
    self.assertEqual(r, ['balanced'])

    _, r = self.anagrams2.get_anagrams("balancer")
    self.assertEqual(r, ['balancer'])

    _, r = self.anagrams2.get_anagrams("balancers")
    self.assertEqual(r, ['balancers'])

    _, r = self.anagrams2.get_anagrams("balances")
    self.assertEqual(r, ['balances'])

    _, r = self.anagrams2.get_anagrams("balancing")
    self.assertEqual(r, ['balancing'])

    _, r = self.anagrams2.get_anagrams("balboa")
    self.assertEqual(r, ['balboa'])

    _, r = self.anagrams2.get_anagrams("balconies")
    self.assertEqual(r, ['balconies'])

    _, r = self.anagrams2.get_anagrams("balcony")
    self.assertEqual(r, ['balcony'])

    _, r = self.anagrams2.get_anagrams("bald")
    self.assertEqual(r, ['bald'])

    _, r = self.anagrams2.get_anagrams("balding")
    self.assertEqual(r, ['balding'])

    _, r = self.anagrams2.get_anagrams("baldly")
    self.assertEqual(r, ['baldly'])

    _, r = self.anagrams2.get_anagrams("baldness")
    self.assertEqual(r, ['baldness'])

    _, r = self.anagrams2.get_anagrams("baldwin")
    self.assertEqual(r, ['baldwin'])

    _, r = self.anagrams2.get_anagrams("bale")
    self.assertEqual(r, ['abel', 'able', 'bale', 'bela', 'elba'])

    _, r = self.anagrams2.get_anagrams("baleful")
    self.assertEqual(r, ['baleful'])

    _, r = self.anagrams2.get_anagrams("baler")
    self.assertEqual(r, ['abler', 'baler', 'blare', 'blear'])

    _, r = self.anagrams2.get_anagrams("bales")
    self.assertEqual(r, ['bales', 'basel', 'blase', 'sable'])

    _, r = self.anagrams2.get_anagrams("balfour")
    self.assertEqual(r, ['balfour'])

    _, r = self.anagrams2.get_anagrams("bali")
    self.assertEqual(r, ['bail', 'bali'])

    _, r = self.anagrams2.get_anagrams("balinese")
    self.assertEqual(r, ['balinese', 'baseline'])

    _, r = self.anagrams2.get_anagrams("balk")
    self.assertEqual(r, ['balk'])

    _, r = self.anagrams2.get_anagrams("balkan")
    self.assertEqual(r, ['balkan'])

    _, r = self.anagrams2.get_anagrams("balkanization")
    self.assertEqual(r, ['balkanization'])

    _, r = self.anagrams2.get_anagrams("balkanizations")
    self.assertEqual(r, ['balkanizations'])

    _, r = self.anagrams2.get_anagrams("balkanize")
    self.assertEqual(r, ['balkanize'])

    _, r = self.anagrams2.get_anagrams("balkanized")
    self.assertEqual(r, ['balkanized'])

    _, r = self.anagrams2.get_anagrams("balkanizes")
    self.assertEqual(r, ['balkanizes'])

    _, r = self.anagrams2.get_anagrams("balkanizing")
    self.assertEqual(r, ['balkanizing'])

    _, r = self.anagrams2.get_anagrams("balkans")
    self.assertEqual(r, ['balkans'])

    _, r = self.anagrams2.get_anagrams("balked")
    self.assertEqual(r, ['balked', 'dekalb'])

    _, r = self.anagrams2.get_anagrams("balkiness")
    self.assertEqual(r, ['balkiness'])

    _, r = self.anagrams2.get_anagrams("balking")
    self.assertEqual(r, ['balking'])

    _, r = self.anagrams2.get_anagrams("balks")
    self.assertEqual(r, ['balks'])

    _, r = self.anagrams2.get_anagrams("balky")
    self.assertEqual(r, ['balky'])

    _, r = self.anagrams2.get_anagrams("ball")
    self.assertEqual(r, ['ball'])

    _, r = self.anagrams2.get_anagrams("ballad")
    self.assertEqual(r, ['ballad'])

    _, r = self.anagrams2.get_anagrams("ballads")
    self.assertEqual(r, ['ballads'])

    _, r = self.anagrams2.get_anagrams("ballard")
    self.assertEqual(r, ['ballard'])

    _, r = self.anagrams2.get_anagrams("ballards")
    self.assertEqual(r, ['ballards'])

    _, r = self.anagrams2.get_anagrams("ballast")
    self.assertEqual(r, ['ballast'])

    _, r = self.anagrams2.get_anagrams("ballasts")
    self.assertEqual(r, ['ballasts'])

    _, r = self.anagrams2.get_anagrams("balled")
    self.assertEqual(r, ['balled'])

    _, r = self.anagrams2.get_anagrams("baller")
    self.assertEqual(r, ['baller'])

    _, r = self.anagrams2.get_anagrams("ballerina")
    self.assertEqual(r, ['ballerina'])

    _, r = self.anagrams2.get_anagrams("ballerinas")
    self.assertEqual(r, ['ballerinas'])

    _, r = self.anagrams2.get_anagrams("ballers")
    self.assertEqual(r, ['ballers'])

    _, r = self.anagrams2.get_anagrams("ballet")
    self.assertEqual(r, ['ballet'])

    _, r = self.anagrams2.get_anagrams("ballets")
    self.assertEqual(r, ['ballets'])

    _, r = self.anagrams2.get_anagrams("ballgown")
    self.assertEqual(r, ['ballgown'])

    _, r = self.anagrams2.get_anagrams("balling")
    self.assertEqual(r, ['balling'])

    _, r = self.anagrams2.get_anagrams("ballistic")
    self.assertEqual(r, ['ballistic'])

    _, r = self.anagrams2.get_anagrams("ballistics")
    self.assertEqual(r, ['ballistics'])

    _, r = self.anagrams2.get_anagrams("balloon")
    self.assertEqual(r, ['balloon'])

    _, r = self.anagrams2.get_anagrams("ballooned")
    self.assertEqual(r, ['ballooned'])

    _, r = self.anagrams2.get_anagrams("ballooner")
    self.assertEqual(r, ['ballooner'])

    _, r = self.anagrams2.get_anagrams("ballooners")
    self.assertEqual(r, ['ballooners'])

    _, r = self.anagrams2.get_anagrams("ballooning")
    self.assertEqual(r, ['ballooning'])

    _, r = self.anagrams2.get_anagrams("balloons")
    self.assertEqual(r, ['balloons'])

    _, r = self.anagrams2.get_anagrams("ballot")
    self.assertEqual(r, ['ballot'])

    _, r = self.anagrams2.get_anagrams("ballots")
    self.assertEqual(r, ['ballots'])

    _, r = self.anagrams2.get_anagrams("ballpark")
    self.assertEqual(r, ['ballpark'])

    _, r = self.anagrams2.get_anagrams("ballparks")
    self.assertEqual(r, ['ballparks'])

    _, r = self.anagrams2.get_anagrams("ballplayer")
    self.assertEqual(r, ['ballplayer'])

    _, r = self.anagrams2.get_anagrams("ballplayers")
    self.assertEqual(r, ['ballplayers'])

    _, r = self.anagrams2.get_anagrams("ballroom")
    self.assertEqual(r, ['ballroom'])

    _, r = self.anagrams2.get_anagrams("ballrooms")
    self.assertEqual(r, ['ballrooms'])

    _, r = self.anagrams2.get_anagrams("balls")
    self.assertEqual(r, ['balls'])

    _, r = self.anagrams2.get_anagrams("ballyhoo")
    self.assertEqual(r, ['ballyhoo'])

    _, r = self.anagrams2.get_anagrams("balm")
    self.assertEqual(r, ['balm', 'lamb'])

    _, r = self.anagrams2.get_anagrams("balms")
    self.assertEqual(r, ['balms', 'lambs'])

    _, r = self.anagrams2.get_anagrams("balmy")
    self.assertEqual(r, ['balmy'])

    _, r = self.anagrams2.get_anagrams("balsa")
    self.assertEqual(r, ['balsa', 'basal'])

    _, r = self.anagrams2.get_anagrams("balsam")
    self.assertEqual(r, ['balsam'])

    _, r = self.anagrams2.get_anagrams("baltic")
    self.assertEqual(r, ['baltic'])

    _, r = self.anagrams2.get_anagrams("baltimore")
    self.assertEqual(r, ['baltimore'])

    _, r = self.anagrams2.get_anagrams("baltimorean")
    self.assertEqual(r, ['baltimorean'])

    _, r = self.anagrams2.get_anagrams("balustrade")
    self.assertEqual(r, ['balustrade'])

    _, r = self.anagrams2.get_anagrams("balustrades")
    self.assertEqual(r, ['balustrades'])

    _, r = self.anagrams2.get_anagrams("balzac")
    self.assertEqual(r, ['balzac'])

    _, r = self.anagrams2.get_anagrams("bamako")
    self.assertEqual(r, ['bamako'])

    _, r = self.anagrams2.get_anagrams("bamberger")
    self.assertEqual(r, ['bamberger'])

    _, r = self.anagrams2.get_anagrams("bambi")
    self.assertEqual(r, ['bambi'])

    _, r = self.anagrams2.get_anagrams("bamboo")
    self.assertEqual(r, ['bamboo'])

    _, r = self.anagrams2.get_anagrams("ban")
    self.assertEqual(r, ['ban', 'nab'])

    _, r = self.anagrams2.get_anagrams("banach")
    self.assertEqual(r, ['banach'])

    _, r = self.anagrams2.get_anagrams("banal")
    self.assertEqual(r, ['banal', 'laban', 'nabla'])

    _, r = self.anagrams2.get_anagrams("banally")
    self.assertEqual(r, ['banally'])

    _, r = self.anagrams2.get_anagrams("banana")
    self.assertEqual(r, ['banana'])

    _, r = self.anagrams2.get_anagrams("bananas")
    self.assertEqual(r, ['bananas'])

    _, r = self.anagrams2.get_anagrams("banbury")
    self.assertEqual(r, ['banbury'])

    _, r = self.anagrams2.get_anagrams("bancroft")
    self.assertEqual(r, ['bancroft'])

    _, r = self.anagrams2.get_anagrams("band")
    self.assertEqual(r, ['band'])

    _, r = self.anagrams2.get_anagrams("bandage")
    self.assertEqual(r, ['bandage'])

    _, r = self.anagrams2.get_anagrams("bandaged")
    self.assertEqual(r, ['bandaged'])

    _, r = self.anagrams2.get_anagrams("bandages")
    self.assertEqual(r, ['bandages'])

    _, r = self.anagrams2.get_anagrams("bandaging")
    self.assertEqual(r, ['bandaging'])

    _, r = self.anagrams2.get_anagrams("banded")
    self.assertEqual(r, ['banded'])

    _, r = self.anagrams2.get_anagrams("bandied")
    self.assertEqual(r, ['bandied'])

    _, r = self.anagrams2.get_anagrams("bandies")
    self.assertEqual(r, ['bandies'])

    _, r = self.anagrams2.get_anagrams("banding")
    self.assertEqual(r, ['banding'])

    _, r = self.anagrams2.get_anagrams("bandit")
    self.assertEqual(r, ['bandit'])

    _, r = self.anagrams2.get_anagrams("bandits")
    self.assertEqual(r, ['bandits'])

    _, r = self.anagrams2.get_anagrams("bandpass")
    self.assertEqual(r, ['bandpass'])

    _, r = self.anagrams2.get_anagrams("bands")
    self.assertEqual(r, ['bands'])

    _, r = self.anagrams2.get_anagrams("bandstand")
    self.assertEqual(r, ['bandstand'])

    _, r = self.anagrams2.get_anagrams("bandstands")
    self.assertEqual(r, ['bandstands'])

    _, r = self.anagrams2.get_anagrams("bandwagon")
    self.assertEqual(r, ['bandwagon'])

    _, r = self.anagrams2.get_anagrams("bandwagons")
    self.assertEqual(r, ['bandwagons'])

    _, r = self.anagrams2.get_anagrams("bandwidth")
    self.assertEqual(r, ['bandwidth'])

    _, r = self.anagrams2.get_anagrams("bandwidths")
    self.assertEqual(r, ['bandwidths'])

    _, r = self.anagrams2.get_anagrams("bandy")
    self.assertEqual(r, ['bandy'])

    _, r = self.anagrams2.get_anagrams("bandying")
    self.assertEqual(r, ['bandying'])

    _, r = self.anagrams2.get_anagrams("bane")
    self.assertEqual(r, ['bane', 'bean'])

    _, r = self.anagrams2.get_anagrams("baneful")
    self.assertEqual(r, ['baneful'])

    _, r = self.anagrams2.get_anagrams("bang")
    self.assertEqual(r, ['bang'])

    _, r = self.anagrams2.get_anagrams("banged")
    self.assertEqual(r, ['banged'])

    _, r = self.anagrams2.get_anagrams("banging")
    self.assertEqual(r, ['banging'])

    _, r = self.anagrams2.get_anagrams("bangladesh")
    self.assertEqual(r, ['bangladesh'])

    _, r = self.anagrams2.get_anagrams("bangle")
    self.assertEqual(r, ['bangle', 'bengal'])

    _, r = self.anagrams2.get_anagrams("bangles")
    self.assertEqual(r, ['bangles'])

    _, r = self.anagrams2.get_anagrams("bangor")
    self.assertEqual(r, ['bangor'])

    _, r = self.anagrams2.get_anagrams("bangs")
    self.assertEqual(r, ['bangs'])

    _, r = self.anagrams2.get_anagrams("bangui")
    self.assertEqual(r, ['bangui'])

    _, r = self.anagrams2.get_anagrams("banish")
    self.assertEqual(r, ['banish'])

    _, r = self.anagrams2.get_anagrams("banished")
    self.assertEqual(r, ['banished'])

    _, r = self.anagrams2.get_anagrams("banishes")
    self.assertEqual(r, ['banishes'])

    _, r = self.anagrams2.get_anagrams("banishing")
    self.assertEqual(r, ['banishing'])

    _, r = self.anagrams2.get_anagrams("banishment")
    self.assertEqual(r, ['banishment'])

    _, r = self.anagrams2.get_anagrams("banister")
    self.assertEqual(r, ['banister'])

    _, r = self.anagrams2.get_anagrams("banisters")
    self.assertEqual(r, ['banisters'])

    _, r = self.anagrams2.get_anagrams("banjo")
    self.assertEqual(r, ['banjo'])

    _, r = self.anagrams2.get_anagrams("banjos")
    self.assertEqual(r, ['banjos'])

    _, r = self.anagrams2.get_anagrams("bank")
    self.assertEqual(r, ['bank'])

    _, r = self.anagrams2.get_anagrams("banked")
    self.assertEqual(r, ['banked'])

    _, r = self.anagrams2.get_anagrams("banker")
    self.assertEqual(r, ['banker'])

    _, r = self.anagrams2.get_anagrams("bankers")
    self.assertEqual(r, ['bankers'])

    _, r = self.anagrams2.get_anagrams("banking")
    self.assertEqual(r, ['banking'])

    _, r = self.anagrams2.get_anagrams("bankrupt")
    self.assertEqual(r, ['bankrupt'])

    _, r = self.anagrams2.get_anagrams("bankruptcies")
    self.assertEqual(r, ['bankruptcies'])

    _, r = self.anagrams2.get_anagrams("bankruptcy")
    self.assertEqual(r, ['bankruptcy'])

    _, r = self.anagrams2.get_anagrams("bankrupted")
    self.assertEqual(r, ['bankrupted'])

    _, r = self.anagrams2.get_anagrams("bankrupting")
    self.assertEqual(r, ['bankrupting'])

    _, r = self.anagrams2.get_anagrams("bankrupts")
    self.assertEqual(r, ['bankrupts'])

    _, r = self.anagrams2.get_anagrams("banks")
    self.assertEqual(r, ['banks'])

    _, r = self.anagrams2.get_anagrams("banned")
    self.assertEqual(r, ['banned'])

    _, r = self.anagrams2.get_anagrams("banner")
    self.assertEqual(r, ['banner'])

    _, r = self.anagrams2.get_anagrams("banners")
    self.assertEqual(r, ['banners'])

    _, r = self.anagrams2.get_anagrams("banning")
    self.assertEqual(r, ['banning'])

    _, r = self.anagrams2.get_anagrams("banquet")
    self.assertEqual(r, ['banquet'])

    _, r = self.anagrams2.get_anagrams("banqueting")
    self.assertEqual(r, ['banqueting'])

    _, r = self.anagrams2.get_anagrams("banquetings")
    self.assertEqual(r, ['banquetings'])

    _, r = self.anagrams2.get_anagrams("banquets")
    self.assertEqual(r, ['banquets'])

    _, r = self.anagrams2.get_anagrams("bans")
    self.assertEqual(r, ['bans'])

    _, r = self.anagrams2.get_anagrams("banshee")
    self.assertEqual(r, ['banshee'])

    _, r = self.anagrams2.get_anagrams("banshees")
    self.assertEqual(r, ['banshees'])

    _, r = self.anagrams2.get_anagrams("bantam")
    self.assertEqual(r, ['bantam'])

    _, r = self.anagrams2.get_anagrams("banter")
    self.assertEqual(r, ['banter', 'barnet'])

    _, r = self.anagrams2.get_anagrams("bantered")
    self.assertEqual(r, ['bantered'])

    _, r = self.anagrams2.get_anagrams("bantering")
    self.assertEqual(r, ['bantering'])

    _, r = self.anagrams2.get_anagrams("banters")
    self.assertEqual(r, ['banters'])

    _, r = self.anagrams2.get_anagrams("bantu")
    self.assertEqual(r, ['bantu'])

    _, r = self.anagrams2.get_anagrams("bantus")
    self.assertEqual(r, ['bantus'])

    _, r = self.anagrams2.get_anagrams("baptism")
    self.assertEqual(r, ['baptism'])

    _, r = self.anagrams2.get_anagrams("baptismal")
    self.assertEqual(r, ['baptismal'])

    _, r = self.anagrams2.get_anagrams("baptisms")
    self.assertEqual(r, ['baptisms'])

    _, r = self.anagrams2.get_anagrams("baptist")
    self.assertEqual(r, ['baptist'])

    _, r = self.anagrams2.get_anagrams("baptiste")
    self.assertEqual(r, ['baptiste'])

    _, r = self.anagrams2.get_anagrams("baptistery")
    self.assertEqual(r, ['baptistery'])

    _, r = self.anagrams2.get_anagrams("baptistries")
    self.assertEqual(r, ['baptistries'])

    _, r = self.anagrams2.get_anagrams("baptistry")
    self.assertEqual(r, ['baptistry'])

    _, r = self.anagrams2.get_anagrams("baptists")
    self.assertEqual(r, ['baptists'])

    _, r = self.anagrams2.get_anagrams("baptize")
    self.assertEqual(r, ['baptize'])

    _, r = self.anagrams2.get_anagrams("baptized")
    self.assertEqual(r, ['baptized'])

    _, r = self.anagrams2.get_anagrams("baptizes")
    self.assertEqual(r, ['baptizes'])

    _, r = self.anagrams2.get_anagrams("baptizing")
    self.assertEqual(r, ['baptizing'])

    _, r = self.anagrams2.get_anagrams("bar")
    self.assertEqual(r, ['bar', 'bra'])

    _, r = self.anagrams2.get_anagrams("barb")
    self.assertEqual(r, ['barb'])

    _, r = self.anagrams2.get_anagrams("barbados")
    self.assertEqual(r, ['barbados'])

    _, r = self.anagrams2.get_anagrams("barbara")
    self.assertEqual(r, ['barbara'])

    _, r = self.anagrams2.get_anagrams("barbarian")
    self.assertEqual(r, ['barbarian'])

    _, r = self.anagrams2.get_anagrams("barbarians")
    self.assertEqual(r, ['barbarians'])

    _, r = self.anagrams2.get_anagrams("barbaric")
    self.assertEqual(r, ['barbaric'])

    _, r = self.anagrams2.get_anagrams("barbarism")
    self.assertEqual(r, ['barbarism'])

    _, r = self.anagrams2.get_anagrams("barbarities")
    self.assertEqual(r, ['barbarities'])

    _, r = self.anagrams2.get_anagrams("barbarity")
    self.assertEqual(r, ['barbarity'])

    _, r = self.anagrams2.get_anagrams("barbarous")
    self.assertEqual(r, ['barbarous'])

    _, r = self.anagrams2.get_anagrams("barbarously")
    self.assertEqual(r, ['barbarously'])

    _, r = self.anagrams2.get_anagrams("barbecue")
    self.assertEqual(r, ['barbecue'])

    _, r = self.anagrams2.get_anagrams("barbecued")
    self.assertEqual(r, ['barbecued'])

    _, r = self.anagrams2.get_anagrams("barbecues")
    self.assertEqual(r, ['barbecues'])

    _, r = self.anagrams2.get_anagrams("barbed")
    self.assertEqual(r, ['barbed'])

    _, r = self.anagrams2.get_anagrams("barbell")
    self.assertEqual(r, ['barbell'])

    _, r = self.anagrams2.get_anagrams("barbells")
    self.assertEqual(r, ['barbells'])

    _, r = self.anagrams2.get_anagrams("barber")
    self.assertEqual(r, ['barber'])

    _, r = self.anagrams2.get_anagrams("barbital")
    self.assertEqual(r, ['barbital'])

    _, r = self.anagrams2.get_anagrams("barbiturate")
    self.assertEqual(r, ['barbiturate'])

    _, r = self.anagrams2.get_anagrams("barbiturates")
    self.assertEqual(r, ['barbiturates'])

    _, r = self.anagrams2.get_anagrams("barbour")
    self.assertEqual(r, ['barbour'])

    _, r = self.anagrams2.get_anagrams("barbs")
    self.assertEqual(r, ['barbs'])

    _, r = self.anagrams2.get_anagrams("barcelona")
    self.assertEqual(r, ['barcelona'])

    _, r = self.anagrams2.get_anagrams("barclay")
    self.assertEqual(r, ['barclay'])

    _, r = self.anagrams2.get_anagrams("bard")
    self.assertEqual(r, ['bard', 'drab'])

    _, r = self.anagrams2.get_anagrams("bards")
    self.assertEqual(r, ['bards'])

    _, r = self.anagrams2.get_anagrams("bare")
    self.assertEqual(r, ['bare', 'bear', 'brae'])

    _, r = self.anagrams2.get_anagrams("bared")
    self.assertEqual(r, ['bared', 'beard', 'bread', 'debar', 'debra'])

    _, r = self.anagrams2.get_anagrams("barefaced")
    self.assertEqual(r, ['barefaced'])

    _, r = self.anagrams2.get_anagrams("barefoot")
    self.assertEqual(r, ['barefoot'])

    _, r = self.anagrams2.get_anagrams("barefooted")
    self.assertEqual(r, ['barefooted'])

    _, r = self.anagrams2.get_anagrams("barely")
    self.assertEqual(r, ['barely', 'barley', 'bleary'])

    _, r = self.anagrams2.get_anagrams("bareness")
    self.assertEqual(r, ['bareness'])

    _, r = self.anagrams2.get_anagrams("barer")
    self.assertEqual(r, ['barer', 'berra'])

    _, r = self.anagrams2.get_anagrams("bares")
    self.assertEqual(r, ['bares', 'baser', 'bears', 'braes', 'saber'])

    _, r = self.anagrams2.get_anagrams("barest")
    self.assertEqual(r, ['barest', 'breast'])

    _, r = self.anagrams2.get_anagrams("barflies")
    self.assertEqual(r, ['barflies'])

    _, r = self.anagrams2.get_anagrams("barfly")
    self.assertEqual(r, ['barfly'])

    _, r = self.anagrams2.get_anagrams("bargain")
    self.assertEqual(r, ['bargain'])

    _, r = self.anagrams2.get_anagrams("bargained")
    self.assertEqual(r, ['bargained', 'gabardine'])

    _, r = self.anagrams2.get_anagrams("bargaining")
    self.assertEqual(r, ['bargaining'])

    _, r = self.anagrams2.get_anagrams("bargains")
    self.assertEqual(r, ['bargains'])

    _, r = self.anagrams2.get_anagrams("barge")
    self.assertEqual(r, ['barge'])

    _, r = self.anagrams2.get_anagrams("barges")
    self.assertEqual(r, ['barges'])

    _, r = self.anagrams2.get_anagrams("barging")
    self.assertEqual(r, ['barging'])

    _, r = self.anagrams2.get_anagrams("barhop")
    self.assertEqual(r, ['barhop'])

    _, r = self.anagrams2.get_anagrams("baring")
    self.assertEqual(r, ['baring'])

    _, r = self.anagrams2.get_anagrams("baritone")
    self.assertEqual(r, ['baritone'])

    _, r = self.anagrams2.get_anagrams("baritones")
    self.assertEqual(r, ['baritones'])

    _, r = self.anagrams2.get_anagrams("barium")
    self.assertEqual(r, ['barium'])

    _, r = self.anagrams2.get_anagrams("bark")
    self.assertEqual(r, ['bark'])

    _, r = self.anagrams2.get_anagrams("barked")
    self.assertEqual(r, ['barked', 'braked'])

    _, r = self.anagrams2.get_anagrams("barker")
    self.assertEqual(r, ['barker'])

    _, r = self.anagrams2.get_anagrams("barkers")
    self.assertEqual(r, ['barkers'])

    _, r = self.anagrams2.get_anagrams("barking")
    self.assertEqual(r, ['barking', 'braking'])

    _, r = self.anagrams2.get_anagrams("barks")
    self.assertEqual(r, ['barks'])

    _, r = self.anagrams2.get_anagrams("barley")
    self.assertEqual(r, ['barely', 'barley', 'bleary'])

    _, r = self.anagrams2.get_anagrams("barlow")
    self.assertEqual(r, ['barlow'])

    _, r = self.anagrams2.get_anagrams("barn")
    self.assertEqual(r, ['barn', 'bran'])

    _, r = self.anagrams2.get_anagrams("barnabas")
    self.assertEqual(r, ['barnabas'])

    _, r = self.anagrams2.get_anagrams("barnard")
    self.assertEqual(r, ['barnard'])

    _, r = self.anagrams2.get_anagrams("barnes")
    self.assertEqual(r, ['barnes'])

    _, r = self.anagrams2.get_anagrams("barnet")
    self.assertEqual(r, ['banter', 'barnet'])

    _, r = self.anagrams2.get_anagrams("barnett")
    self.assertEqual(r, ['barnett'])

    _, r = self.anagrams2.get_anagrams("barney")
    self.assertEqual(r, ['barney', 'nearby'])

    _, r = self.anagrams2.get_anagrams("barnhard")
    self.assertEqual(r, ['barnhard'])

    _, r = self.anagrams2.get_anagrams("barns")
    self.assertEqual(r, ['barns'])

    _, r = self.anagrams2.get_anagrams("barnstorm")
    self.assertEqual(r, ['barnstorm'])

    _, r = self.anagrams2.get_anagrams("barnstormed")
    self.assertEqual(r, ['barnstormed'])

    _, r = self.anagrams2.get_anagrams("barnstorming")
    self.assertEqual(r, ['barnstorming'])

    _, r = self.anagrams2.get_anagrams("barnstorms")
    self.assertEqual(r, ['barnstorms'])

    _, r = self.anagrams2.get_anagrams("barnum")
    self.assertEqual(r, ['barnum'])

    _, r = self.anagrams2.get_anagrams("barnyard")
    self.assertEqual(r, ['barnyard'])

    _, r = self.anagrams2.get_anagrams("barnyards")
    self.assertEqual(r, ['barnyards'])

    _, r = self.anagrams2.get_anagrams("barometer")
    self.assertEqual(r, ['barometer'])

    _, r = self.anagrams2.get_anagrams("barometers")
    self.assertEqual(r, ['barometers'])

    _, r = self.anagrams2.get_anagrams("barometric")
    self.assertEqual(r, ['barometric'])

    _, r = self.anagrams2.get_anagrams("baron")
    self.assertEqual(r, ['baron'])

    _, r = self.anagrams2.get_anagrams("baroness")
    self.assertEqual(r, ['baroness'])

    _, r = self.anagrams2.get_anagrams("baronial")
    self.assertEqual(r, ['baronial'])

    _, r = self.anagrams2.get_anagrams("baronies")
    self.assertEqual(r, ['baronies'])

    _, r = self.anagrams2.get_anagrams("barons")
    self.assertEqual(r, ['barons'])

    _, r = self.anagrams2.get_anagrams("barony")
    self.assertEqual(r, ['barony'])

    _, r = self.anagrams2.get_anagrams("baroque")
    self.assertEqual(r, ['baroque'])

    _, r = self.anagrams2.get_anagrams("baroqueness")
    self.assertEqual(r, ['baroqueness'])

    _, r = self.anagrams2.get_anagrams("barr")
    self.assertEqual(r, ['barr'])

    _, r = self.anagrams2.get_anagrams("barrack")
    self.assertEqual(r, ['barrack'])

    _, r = self.anagrams2.get_anagrams("barracks")
    self.assertEqual(r, ['barracks'])

    _, r = self.anagrams2.get_anagrams("barrage")
    self.assertEqual(r, ['barrage'])

    _, r = self.anagrams2.get_anagrams("barrages")
    self.assertEqual(r, ['barrages'])

    _, r = self.anagrams2.get_anagrams("barred")
    self.assertEqual(r, ['barred'])

    _, r = self.anagrams2.get_anagrams("barrel")
    self.assertEqual(r, ['barrel'])

    _, r = self.anagrams2.get_anagrams("barrelled")
    self.assertEqual(r, ['barrelled'])

    _, r = self.anagrams2.get_anagrams("barrelling")
    self.assertEqual(r, ['barrelling'])

    _, r = self.anagrams2.get_anagrams("barrels")
    self.assertEqual(r, ['barrels'])

    _, r = self.anagrams2.get_anagrams("barren")
    self.assertEqual(r, ['barren'])

    _, r = self.anagrams2.get_anagrams("barrenness")
    self.assertEqual(r, ['barrenness'])

    _, r = self.anagrams2.get_anagrams("barrett")
    self.assertEqual(r, ['barrett'])

    _, r = self.anagrams2.get_anagrams("barricade")
    self.assertEqual(r, ['barricade'])

    _, r = self.anagrams2.get_anagrams("barricades")
    self.assertEqual(r, ['barricades'])

    _, r = self.anagrams2.get_anagrams("barrier")
    self.assertEqual(r, ['barrier'])

    _, r = self.anagrams2.get_anagrams("barriers")
    self.assertEqual(r, ['barriers'])

    _, r = self.anagrams2.get_anagrams("barring")
    self.assertEqual(r, ['barring'])

    _, r = self.anagrams2.get_anagrams("barringer")
    self.assertEqual(r, ['barringer'])

    _, r = self.anagrams2.get_anagrams("barrington")
    self.assertEqual(r, ['barrington'])

    _, r = self.anagrams2.get_anagrams("barron")
    self.assertEqual(r, ['barron'])

    _, r = self.anagrams2.get_anagrams("barrow")
    self.assertEqual(r, ['barrow'])

    _, r = self.anagrams2.get_anagrams("barry")
    self.assertEqual(r, ['barry'])

    _, r = self.anagrams2.get_anagrams("barrymore")
    self.assertEqual(r, ['barrymore'])

    _, r = self.anagrams2.get_anagrams("barrymores")
    self.assertEqual(r, ['barrymores'])

    _, r = self.anagrams2.get_anagrams("bars")
    self.assertEqual(r, ['bars', 'bras'])

    _, r = self.anagrams2.get_anagrams("barstow")
    self.assertEqual(r, ['barstow'])

    _, r = self.anagrams2.get_anagrams("bart")
    self.assertEqual(r, ['bart', 'brat'])

    _, r = self.anagrams2.get_anagrams("bartender")
    self.assertEqual(r, ['bartender'])

    _, r = self.anagrams2.get_anagrams("bartenders")
    self.assertEqual(r, ['bartenders'])

    _, r = self.anagrams2.get_anagrams("barter")
    self.assertEqual(r, ['barter'])

    _, r = self.anagrams2.get_anagrams("bartered")
    self.assertEqual(r, ['bartered'])

    _, r = self.anagrams2.get_anagrams("bartering")
    self.assertEqual(r, ['bartering'])

    _, r = self.anagrams2.get_anagrams("barters")
    self.assertEqual(r, ['barters'])

    _, r = self.anagrams2.get_anagrams("barth")
    self.assertEqual(r, ['barth'])

    _, r = self.anagrams2.get_anagrams("bartholomew")
    self.assertEqual(r, ['bartholomew'])

    _, r = self.anagrams2.get_anagrams("bartlett")
    self.assertEqual(r, ['bartlett'])

    _, r = self.anagrams2.get_anagrams("bartok")
    self.assertEqual(r, ['bartok'])

    _, r = self.anagrams2.get_anagrams("barton")
    self.assertEqual(r, ['barton'])

    _, r = self.anagrams2.get_anagrams("basal")
    self.assertEqual(r, ['balsa', 'basal'])

    _, r = self.anagrams2.get_anagrams("basalt")
    self.assertEqual(r, ['basalt'])

    _, r = self.anagrams2.get_anagrams("bascom")
    self.assertEqual(r, ['bascom'])

    _, r = self.anagrams2.get_anagrams("base")
    self.assertEqual(r, ['base'])

    _, r = self.anagrams2.get_anagrams("baseball")
    self.assertEqual(r, ['baseball'])

    _, r = self.anagrams2.get_anagrams("baseballs")
    self.assertEqual(r, ['baseballs'])

    _, r = self.anagrams2.get_anagrams("baseband")
    self.assertEqual(r, ['baseband'])

    _, r = self.anagrams2.get_anagrams("baseboard")
    self.assertEqual(r, ['baseboard'])

    _, r = self.anagrams2.get_anagrams("baseboards")
    self.assertEqual(r, ['baseboards'])

    _, r = self.anagrams2.get_anagrams("based")
    self.assertEqual(r, ['based', 'beads'])

    _, r = self.anagrams2.get_anagrams("basel")
    self.assertEqual(r, ['bales', 'basel', 'blase', 'sable'])

    _, r = self.anagrams2.get_anagrams("baseless")
    self.assertEqual(r, ['baseless'])

    _, r = self.anagrams2.get_anagrams("baseline")
    self.assertEqual(r, ['balinese', 'baseline'])

    _, r = self.anagrams2.get_anagrams("baselines")
    self.assertEqual(r, ['baselines'])

    _, r = self.anagrams2.get_anagrams("basely")
    self.assertEqual(r, ['basely', 'belays'])

    _, r = self.anagrams2.get_anagrams("baseman")
    self.assertEqual(r, ['baseman'])

    _, r = self.anagrams2.get_anagrams("basement")
    self.assertEqual(r, ['basement'])

    _, r = self.anagrams2.get_anagrams("basements")
    self.assertEqual(r, ['basements'])

    _, r = self.anagrams2.get_anagrams("baseness")
    self.assertEqual(r, ['baseness'])

    _, r = self.anagrams2.get_anagrams("baser")
    self.assertEqual(r, ['bares', 'baser', 'bears', 'braes', 'saber'])

    _, r = self.anagrams2.get_anagrams("bases")
    self.assertEqual(r, ['bases'])

    _, r = self.anagrams2.get_anagrams("bash")
    self.assertEqual(r, ['bash'])

    _, r = self.anagrams2.get_anagrams("bashed")
    self.assertEqual(r, ['bashed'])

    _, r = self.anagrams2.get_anagrams("bashes")
    self.assertEqual(r, ['bashes'])

    _, r = self.anagrams2.get_anagrams("bashful")
    self.assertEqual(r, ['bashful'])

    _, r = self.anagrams2.get_anagrams("bashfulness")
    self.assertEqual(r, ['bashfulness'])

    _, r = self.anagrams2.get_anagrams("bashing")
    self.assertEqual(r, ['bashing'])

    _, r = self.anagrams2.get_anagrams("basic")
    self.assertEqual(r, ['basic', 'basic', 'basic'])

    _, r = self.anagrams2.get_anagrams("basic")
    self.assertEqual(r, ['basic', 'basic', 'basic'])

    _, r = self.anagrams2.get_anagrams("basic")
    self.assertEqual(r, ['basic', 'basic', 'basic'])

    _, r = self.anagrams2.get_anagrams("basically")
    self.assertEqual(r, ['basically'])

    _, r = self.anagrams2.get_anagrams("basics")
    self.assertEqual(r, ['basics'])

    _, r = self.anagrams2.get_anagrams("basie")
    self.assertEqual(r, ['basie'])

    _, r = self.anagrams2.get_anagrams("basil")
    self.assertEqual(r, ['basil'])

    _, r = self.anagrams2.get_anagrams("basin")
    self.assertEqual(r, ['basin'])

    _, r = self.anagrams2.get_anagrams("basing")
    self.assertEqual(r, ['basing'])

    _, r = self.anagrams2.get_anagrams("basins")
    self.assertEqual(r, ['basins'])

    _, r = self.anagrams2.get_anagrams("basis")
    self.assertEqual(r, ['basis'])

    _, r = self.anagrams2.get_anagrams("bask")
    self.assertEqual(r, ['bask'])

    _, r = self.anagrams2.get_anagrams("basked")
    self.assertEqual(r, ['basked'])

    _, r = self.anagrams2.get_anagrams("basket")
    self.assertEqual(r, ['basket'])

    _, r = self.anagrams2.get_anagrams("basketball")
    self.assertEqual(r, ['basketball'])

    _, r = self.anagrams2.get_anagrams("basketballs")
    self.assertEqual(r, ['basketballs'])

    _, r = self.anagrams2.get_anagrams("baskets")
    self.assertEqual(r, ['baskets'])

    _, r = self.anagrams2.get_anagrams("basking")
    self.assertEqual(r, ['basking'])

    _, r = self.anagrams2.get_anagrams("basque")
    self.assertEqual(r, ['basque'])

    _, r = self.anagrams2.get_anagrams("bass")
    self.assertEqual(r, ['bass'])

    _, r = self.anagrams2.get_anagrams("basses")
    self.assertEqual(r, ['basses'])

    _, r = self.anagrams2.get_anagrams("basset")
    self.assertEqual(r, ['basset', 'bastes', 'beasts'])

    _, r = self.anagrams2.get_anagrams("bassett")
    self.assertEqual(r, ['bassett'])

    _, r = self.anagrams2.get_anagrams("bassinet")
    self.assertEqual(r, ['bassinet'])

    _, r = self.anagrams2.get_anagrams("bassinets")
    self.assertEqual(r, ['bassinets'])

    _, r = self.anagrams2.get_anagrams("bastard")
    self.assertEqual(r, ['bastard'])

    _, r = self.anagrams2.get_anagrams("bastards")
    self.assertEqual(r, ['bastards'])

    _, r = self.anagrams2.get_anagrams("baste")
    self.assertEqual(r, ['abets', 'baste', 'bates', 'beast', 'beats'])

    _, r = self.anagrams2.get_anagrams("basted")
    self.assertEqual(r, ['basted'])

    _, r = self.anagrams2.get_anagrams("bastes")
    self.assertEqual(r, ['basset', 'bastes', 'beasts'])

    _, r = self.anagrams2.get_anagrams("basting")
    self.assertEqual(r, ['basting'])

    _, r = self.anagrams2.get_anagrams("bastion")
    self.assertEqual(r, ['bastion', 'obtains'])

    _, r = self.anagrams2.get_anagrams("bastions")
    self.assertEqual(r, ['bastions'])

    _, r = self.anagrams2.get_anagrams("bat")
    self.assertEqual(r, ['bat', 'tab'])

    _, r = self.anagrams2.get_anagrams("batavia")
    self.assertEqual(r, ['batavia'])

    _, r = self.anagrams2.get_anagrams("batch")
    self.assertEqual(r, ['batch'])

    _, r = self.anagrams2.get_anagrams("batched")
    self.assertEqual(r, ['batched'])

    _, r = self.anagrams2.get_anagrams("batchelder")
    self.assertEqual(r, ['batchelder'])

    _, r = self.anagrams2.get_anagrams("batches")
    self.assertEqual(r, ['batches'])

    _, r = self.anagrams2.get_anagrams("bateman")
    self.assertEqual(r, ['bateman'])

    _, r = self.anagrams2.get_anagrams("bates")
    self.assertEqual(r, ['abets', 'baste', 'bates', 'beast', 'beats'])

    _, r = self.anagrams2.get_anagrams("bath")
    self.assertEqual(r, ['bath'])

    _, r = self.anagrams2.get_anagrams("bathe")
    self.assertEqual(r, ['bathe'])

    _, r = self.anagrams2.get_anagrams("bathed")
    self.assertEqual(r, ['bathed'])

    _, r = self.anagrams2.get_anagrams("bather")
    self.assertEqual(r, ['bather', 'bertha', 'breath'])

    _, r = self.anagrams2.get_anagrams("bathers")
    self.assertEqual(r, ['bathers', 'breaths'])

    _, r = self.anagrams2.get_anagrams("bathes")
    self.assertEqual(r, ['bathes'])

    _, r = self.anagrams2.get_anagrams("bathing")
    self.assertEqual(r, ['bathing'])

    _, r = self.anagrams2.get_anagrams("bathos")
    self.assertEqual(r, ['bathos'])

    _, r = self.anagrams2.get_anagrams("bathrobe")
    self.assertEqual(r, ['bathrobe'])

    _, r = self.anagrams2.get_anagrams("bathrobes")
    self.assertEqual(r, ['bathrobes'])

    _, r = self.anagrams2.get_anagrams("bathroom")
    self.assertEqual(r, ['bathroom'])

    _, r = self.anagrams2.get_anagrams("bathrooms")
    self.assertEqual(r, ['bathrooms'])

    _, r = self.anagrams2.get_anagrams("baths")
    self.assertEqual(r, ['baths'])

    _, r = self.anagrams2.get_anagrams("bathtub")
    self.assertEqual(r, ['bathtub'])

    _, r = self.anagrams2.get_anagrams("bathtubs")
    self.assertEqual(r, ['bathtubs'])

    _, r = self.anagrams2.get_anagrams("bathurst")
    self.assertEqual(r, ['bathurst'])

    _, r = self.anagrams2.get_anagrams("batista")
    self.assertEqual(r, ['batista'])

    _, r = self.anagrams2.get_anagrams("baton")
    self.assertEqual(r, ['baton'])

    _, r = self.anagrams2.get_anagrams("batons")
    self.assertEqual(r, ['batons'])

    _, r = self.anagrams2.get_anagrams("bator")
    self.assertEqual(r, ['abort', 'bator'])

    _, r = self.anagrams2.get_anagrams("bats")
    self.assertEqual(r, ['bats', 'stab', 'tabs'])

    _, r = self.anagrams2.get_anagrams("battalion")
    self.assertEqual(r, ['battalion'])

    _, r = self.anagrams2.get_anagrams("battalions")
    self.assertEqual(r, ['battalions'])

    _, r = self.anagrams2.get_anagrams("batted")
    self.assertEqual(r, ['batted'])

    _, r = self.anagrams2.get_anagrams("battelle")
    self.assertEqual(r, ['battelle'])

    _, r = self.anagrams2.get_anagrams("batten")
    self.assertEqual(r, ['batten'])

    _, r = self.anagrams2.get_anagrams("battens")
    self.assertEqual(r, ['battens'])

    _, r = self.anagrams2.get_anagrams("batter")
    self.assertEqual(r, ['batter'])

    _, r = self.anagrams2.get_anagrams("battered")
    self.assertEqual(r, ['battered'])

    _, r = self.anagrams2.get_anagrams("batteries")
    self.assertEqual(r, ['batteries'])

    _, r = self.anagrams2.get_anagrams("battering")
    self.assertEqual(r, ['battering'])

    _, r = self.anagrams2.get_anagrams("batters")
    self.assertEqual(r, ['batters'])

    _, r = self.anagrams2.get_anagrams("battery")
    self.assertEqual(r, ['battery'])

    _, r = self.anagrams2.get_anagrams("batting")
    self.assertEqual(r, ['batting'])

    _, r = self.anagrams2.get_anagrams("battle")
    self.assertEqual(r, ['battle', 'tablet'])

    _, r = self.anagrams2.get_anagrams("battled")
    self.assertEqual(r, ['battled'])

    _, r = self.anagrams2.get_anagrams("battlefield")
    self.assertEqual(r, ['battlefield'])

    _, r = self.anagrams2.get_anagrams("battlefields")
    self.assertEqual(r, ['battlefields'])

    _, r = self.anagrams2.get_anagrams("battlefront")
    self.assertEqual(r, ['battlefront'])

    _, r = self.anagrams2.get_anagrams("battlefronts")
    self.assertEqual(r, ['battlefronts'])

    _, r = self.anagrams2.get_anagrams("battleground")
    self.assertEqual(r, ['battleground'])

    _, r = self.anagrams2.get_anagrams("battlegrounds")
    self.assertEqual(r, ['battlegrounds'])

    _, r = self.anagrams2.get_anagrams("battlement")
    self.assertEqual(r, ['battlement'])

    _, r = self.anagrams2.get_anagrams("battlements")
    self.assertEqual(r, ['battlements'])

    _, r = self.anagrams2.get_anagrams("battler")
    self.assertEqual(r, ['battler'])

    _, r = self.anagrams2.get_anagrams("battlers")
    self.assertEqual(r, ['battlers'])

    _, r = self.anagrams2.get_anagrams("battles")
    self.assertEqual(r, ['battles', 'tablets'])

    _, r = self.anagrams2.get_anagrams("battleship")
    self.assertEqual(r, ['battleship'])

    _, r = self.anagrams2.get_anagrams("battleships")
    self.assertEqual(r, ['battleships'])

    _, r = self.anagrams2.get_anagrams("battling")
    self.assertEqual(r, ['battling'])

    _, r = self.anagrams2.get_anagrams("bauble")
    self.assertEqual(r, ['bauble'])

    _, r = self.anagrams2.get_anagrams("baubles")
    self.assertEqual(r, ['baubles'])

    _, r = self.anagrams2.get_anagrams("baud")
    self.assertEqual(r, ['baud'])

    _, r = self.anagrams2.get_anagrams("baudelaire")
    self.assertEqual(r, ['baudelaire'])

    _, r = self.anagrams2.get_anagrams("bauer")
    self.assertEqual(r, ['bauer'])

    _, r = self.anagrams2.get_anagrams("bauhaus")
    self.assertEqual(r, ['bauhaus'])

    _, r = self.anagrams2.get_anagrams("bausch")
    self.assertEqual(r, ['bausch'])

    _, r = self.anagrams2.get_anagrams("bauxite")
    self.assertEqual(r, ['bauxite'])

    _, r = self.anagrams2.get_anagrams("bavaria")
    self.assertEqual(r, ['bavaria'])

    _, r = self.anagrams2.get_anagrams("bavarian")
    self.assertEqual(r, ['bavarian'])

    _, r = self.anagrams2.get_anagrams("bawdy")
    self.assertEqual(r, ['bawdy'])

    _, r = self.anagrams2.get_anagrams("bawl")
    self.assertEqual(r, ['bawl'])

    _, r = self.anagrams2.get_anagrams("bawled")
    self.assertEqual(r, ['bawled'])

    _, r = self.anagrams2.get_anagrams("bawling")
    self.assertEqual(r, ['bawling'])

    _, r = self.anagrams2.get_anagrams("bawls")
    self.assertEqual(r, ['bawls'])

    _, r = self.anagrams2.get_anagrams("baxter")
    self.assertEqual(r, ['baxter'])

    _, r = self.anagrams2.get_anagrams("bay")
    self.assertEqual(r, ['bay'])

    _, r = self.anagrams2.get_anagrams("bayda")
    self.assertEqual(r, ['bayda'])

    _, r = self.anagrams2.get_anagrams("bayed")
    self.assertEqual(r, ['bayed', 'beady'])

    _, r = self.anagrams2.get_anagrams("bayes")
    self.assertEqual(r, ['bayes'])

    _, r = self.anagrams2.get_anagrams("bayesian")
    self.assertEqual(r, ['bayesian'])

    _, r = self.anagrams2.get_anagrams("baying")
    self.assertEqual(r, ['baying'])

    _, r = self.anagrams2.get_anagrams("baylor")
    self.assertEqual(r, ['baylor'])

    _, r = self.anagrams2.get_anagrams("bayonet")
    self.assertEqual(r, ['bayonet'])

    _, r = self.anagrams2.get_anagrams("bayonets")
    self.assertEqual(r, ['bayonets'])

    _, r = self.anagrams2.get_anagrams("bayonne")
    self.assertEqual(r, ['bayonne'])

    _, r = self.anagrams2.get_anagrams("bayou")
    self.assertEqual(r, ['bayou'])

    _, r = self.anagrams2.get_anagrams("bayous")
    self.assertEqual(r, ['bayous'])

    _, r = self.anagrams2.get_anagrams("bayport")
    self.assertEqual(r, ['bayport'])

    _, r = self.anagrams2.get_anagrams("bayreuth")
    self.assertEqual(r, ['bayreuth'])

    _, r = self.anagrams2.get_anagrams("bays")
    self.assertEqual(r, ['bays'])

    _, r = self.anagrams2.get_anagrams("bazaar")
    self.assertEqual(r, ['bazaar'])

    _, r = self.anagrams2.get_anagrams("bazaars")
    self.assertEqual(r, ['bazaars'])

    _, r = self.anagrams2.get_anagrams("be")
    self.assertEqual(r, ['be'])

    _, r = self.anagrams2.get_anagrams("beach")
    self.assertEqual(r, ['beach'])

    _, r = self.anagrams2.get_anagrams("beached")
    self.assertEqual(r, ['beached'])

    _, r = self.anagrams2.get_anagrams("beaches")
    self.assertEqual(r, ['beaches'])

    _, r = self.anagrams2.get_anagrams("beachhead")
    self.assertEqual(r, ['beachhead'])

    _, r = self.anagrams2.get_anagrams("beachheads")
    self.assertEqual(r, ['beachheads'])

    _, r = self.anagrams2.get_anagrams("beaching")
    self.assertEqual(r, ['beaching'])

    _, r = self.anagrams2.get_anagrams("beacon")
    self.assertEqual(r, ['beacon'])

    _, r = self.anagrams2.get_anagrams("beacons")
    self.assertEqual(r, ['beacons'])

    _, r = self.anagrams2.get_anagrams("bead")
    self.assertEqual(r, ['abed', 'bade', 'bead'])

    _, r = self.anagrams2.get_anagrams("beaded")
    self.assertEqual(r, ['beaded'])

    _, r = self.anagrams2.get_anagrams("beading")
    self.assertEqual(r, ['beading'])

    _, r = self.anagrams2.get_anagrams("beadle")
    self.assertEqual(r, ['beadle'])

    _, r = self.anagrams2.get_anagrams("beadles")
    self.assertEqual(r, ['beadles'])

    _, r = self.anagrams2.get_anagrams("beads")
    self.assertEqual(r, ['based', 'beads'])

    _, r = self.anagrams2.get_anagrams("beady")
    self.assertEqual(r, ['bayed', 'beady'])

    _, r = self.anagrams2.get_anagrams("beagle")
    self.assertEqual(r, ['beagle'])

    _, r = self.anagrams2.get_anagrams("beagles")
    self.assertEqual(r, ['beagles'])

    _, r = self.anagrams2.get_anagrams("beak")
    self.assertEqual(r, ['bake', 'beak'])

    _, r = self.anagrams2.get_anagrams("beaked")
    self.assertEqual(r, ['beaked'])

    _, r = self.anagrams2.get_anagrams("beaker")
    self.assertEqual(r, ['beaker'])

    _, r = self.anagrams2.get_anagrams("beakers")
    self.assertEqual(r, ['beakers'])

    _, r = self.anagrams2.get_anagrams("beaks")
    self.assertEqual(r, ['bakes', 'beaks'])

    _, r = self.anagrams2.get_anagrams("beam")
    self.assertEqual(r, ['beam'])

    _, r = self.anagrams2.get_anagrams("beamed")
    self.assertEqual(r, ['beamed'])

    _, r = self.anagrams2.get_anagrams("beamer")
    self.assertEqual(r, ['beamer'])

    _, r = self.anagrams2.get_anagrams("beamers")
    self.assertEqual(r, ['beamers'])

    _, r = self.anagrams2.get_anagrams("beaming")
    self.assertEqual(r, ['beaming'])

    _, r = self.anagrams2.get_anagrams("beams")
    self.assertEqual(r, ['beams'])

    _, r = self.anagrams2.get_anagrams("bean")
    self.assertEqual(r, ['bane', 'bean'])

    _, r = self.anagrams2.get_anagrams("beanbag")
    self.assertEqual(r, ['beanbag'])

    _, r = self.anagrams2.get_anagrams("beaned")
    self.assertEqual(r, ['beaned'])

    _, r = self.anagrams2.get_anagrams("beaner")
    self.assertEqual(r, ['beaner'])

    _, r = self.anagrams2.get_anagrams("beaners")
    self.assertEqual(r, ['beaners', 'benares'])

    _, r = self.anagrams2.get_anagrams("beaning")
    self.assertEqual(r, ['beaning'])

    _, r = self.anagrams2.get_anagrams("beans")
    self.assertEqual(r, ['beans'])

    _, r = self.anagrams2.get_anagrams("bear")
    self.assertEqual(r, ['bare', 'bear', 'brae'])

    _, r = self.anagrams2.get_anagrams("bearable")
    self.assertEqual(r, ['bearable'])

    _, r = self.anagrams2.get_anagrams("bearably")
    self.assertEqual(r, ['bearably'])

    _, r = self.anagrams2.get_anagrams("beard")
    self.assertEqual(r, ['bared', 'beard', 'bread', 'debar', 'debra'])

    _, r = self.anagrams2.get_anagrams("bearded")
    self.assertEqual(r, ['bearded', 'breaded'])

    _, r = self.anagrams2.get_anagrams("beardless")
    self.assertEqual(r, ['beardless'])

    _, r = self.anagrams2.get_anagrams("beards")
    self.assertEqual(r, ['beards', 'breads'])

    _, r = self.anagrams2.get_anagrams("beardsley")
    self.assertEqual(r, ['beardsley'])

    _, r = self.anagrams2.get_anagrams("bearer")
    self.assertEqual(r, ['bearer'])

    _, r = self.anagrams2.get_anagrams("bearers")
    self.assertEqual(r, ['bearers'])

    _, r = self.anagrams2.get_anagrams("bearing")
    self.assertEqual(r, ['bearing'])

    _, r = self.anagrams2.get_anagrams("bearings")
    self.assertEqual(r, ['bearings'])

    _, r = self.anagrams2.get_anagrams("bearish")
    self.assertEqual(r, ['bearish'])

    _, r = self.anagrams2.get_anagrams("bears")
    self.assertEqual(r, ['bares', 'baser', 'bears', 'braes', 'saber'])

    _, r = self.anagrams2.get_anagrams("beast")
    self.assertEqual(r, ['abets', 'baste', 'bates', 'beast', 'beats'])

    _, r = self.anagrams2.get_anagrams("beastly")
    self.assertEqual(r, ['beastly'])

    _, r = self.anagrams2.get_anagrams("beasts")
    self.assertEqual(r, ['basset', 'bastes', 'beasts'])

    _, r = self.anagrams2.get_anagrams("beat")
    self.assertEqual(r, ['abet', 'beat', 'beta'])

    _, r = self.anagrams2.get_anagrams("beatable")
    self.assertEqual(r, ['beatable'])

    _, r = self.anagrams2.get_anagrams("beatably")
    self.assertEqual(r, ['beatably'])

    _, r = self.anagrams2.get_anagrams("beaten")
    self.assertEqual(r, ['beaten'])

    _, r = self.anagrams2.get_anagrams("beater")
    self.assertEqual(r, ['beater', 'berate', 'rebate'])

    _, r = self.anagrams2.get_anagrams("beaters")
    self.assertEqual(r, ['beaters', 'berates', 'rebates'])

    _, r = self.anagrams2.get_anagrams("beatific")
    self.assertEqual(r, ['beatific'])

    _, r = self.anagrams2.get_anagrams("beatification")
    self.assertEqual(r, ['beatification'])

    _, r = self.anagrams2.get_anagrams("beatify")
    self.assertEqual(r, ['beatify'])

    _, r = self.anagrams2.get_anagrams("beating")
    self.assertEqual(r, ['beating'])

    _, r = self.anagrams2.get_anagrams("beatings")
    self.assertEqual(r, ['beatings'])

    _, r = self.anagrams2.get_anagrams("beatitude")
    self.assertEqual(r, ['beatitude'])

    _, r = self.anagrams2.get_anagrams("beatitudes")
    self.assertEqual(r, ['beatitudes'])

    _, r = self.anagrams2.get_anagrams("beatnik")
    self.assertEqual(r, ['beatnik'])

    _, r = self.anagrams2.get_anagrams("beatniks")
    self.assertEqual(r, ['beatniks'])

    _, r = self.anagrams2.get_anagrams("beatrice")
    self.assertEqual(r, ['beatrice'])

    _, r = self.anagrams2.get_anagrams("beats")
    self.assertEqual(r, ['abets', 'baste', 'bates', 'beast', 'beats'])

    _, r = self.anagrams2.get_anagrams("beau")
    self.assertEqual(r, ['beau'])

    _, r = self.anagrams2.get_anagrams("beauchamps")
    self.assertEqual(r, ['beauchamps'])

    _, r = self.anagrams2.get_anagrams("beaujolais")
    self.assertEqual(r, ['beaujolais'])

    _, r = self.anagrams2.get_anagrams("beaumont")
    self.assertEqual(r, ['beaumont'])

    _, r = self.anagrams2.get_anagrams("beauregard")
    self.assertEqual(r, ['beauregard'])

    _, r = self.anagrams2.get_anagrams("beaus")
    self.assertEqual(r, ['abuse', 'beaus'])

    _, r = self.anagrams2.get_anagrams("beauteous")
    self.assertEqual(r, ['beauteous'])

    _, r = self.anagrams2.get_anagrams("beauteously")
    self.assertEqual(r, ['beauteously'])

    _, r = self.anagrams2.get_anagrams("beauties")
    self.assertEqual(r, ['beauties'])

    _, r = self.anagrams2.get_anagrams("beautifications")
    self.assertEqual(r, ['beautifications'])

    _, r = self.anagrams2.get_anagrams("beautified")
    self.assertEqual(r, ['beautified'])

    _, r = self.anagrams2.get_anagrams("beautifier")
    self.assertEqual(r, ['beautifier'])

    _, r = self.anagrams2.get_anagrams("beautifiers")
    self.assertEqual(r, ['beautifiers'])

    _, r = self.anagrams2.get_anagrams("beautifies")
    self.assertEqual(r, ['beautifies'])

    _, r = self.anagrams2.get_anagrams("beautiful")
    self.assertEqual(r, ['beautiful'])

    _, r = self.anagrams2.get_anagrams("beautifully")
    self.assertEqual(r, ['beautifully'])

    _, r = self.anagrams2.get_anagrams("beautify")
    self.assertEqual(r, ['beautify'])

    _, r = self.anagrams2.get_anagrams("beautifying")
    self.assertEqual(r, ['beautifying'])

    _, r = self.anagrams2.get_anagrams("beauty")
    self.assertEqual(r, ['beauty'])

    _, r = self.anagrams2.get_anagrams("beaver")
    self.assertEqual(r, ['beaver'])

    _, r = self.anagrams2.get_anagrams("beavers")
    self.assertEqual(r, ['beavers'])

    _, r = self.anagrams2.get_anagrams("beaverton")
    self.assertEqual(r, ['beaverton'])

    _, r = self.anagrams2.get_anagrams("becalm")
    self.assertEqual(r, ['becalm'])

    _, r = self.anagrams2.get_anagrams("becalmed")
    self.assertEqual(r, ['becalmed'])

    _, r = self.anagrams2.get_anagrams("becalming")
    self.assertEqual(r, ['becalming'])

    _, r = self.anagrams2.get_anagrams("becalms")
    self.assertEqual(r, ['becalms'])

    _, r = self.anagrams2.get_anagrams("became")
    self.assertEqual(r, ['became'])

    _, r = self.anagrams2.get_anagrams("because")
    self.assertEqual(r, ['because'])

    _, r = self.anagrams2.get_anagrams("bechtel")
    self.assertEqual(r, ['bechtel'])

    _, r = self.anagrams2.get_anagrams("beck")
    self.assertEqual(r, ['beck'])

    _, r = self.anagrams2.get_anagrams("becker")
    self.assertEqual(r, ['becker'])

    _, r = self.anagrams2.get_anagrams("beckman")
    self.assertEqual(r, ['beckman'])

    _, r = self.anagrams2.get_anagrams("beckon")
    self.assertEqual(r, ['beckon'])

    _, r = self.anagrams2.get_anagrams("beckoned")
    self.assertEqual(r, ['beckoned'])

    _, r = self.anagrams2.get_anagrams("beckoning")
    self.assertEqual(r, ['beckoning'])

    _, r = self.anagrams2.get_anagrams("beckons")
    self.assertEqual(r, ['beckons'])

    _, r = self.anagrams2.get_anagrams("becky")
    self.assertEqual(r, ['becky'])

    _, r = self.anagrams2.get_anagrams("become")
    self.assertEqual(r, ['become'])

    _, r = self.anagrams2.get_anagrams("becomes")
    self.assertEqual(r, ['becomes'])

    _, r = self.anagrams2.get_anagrams("becoming")
    self.assertEqual(r, ['becoming'])

    _, r = self.anagrams2.get_anagrams("becomingly")
    self.assertEqual(r, ['becomingly'])

    _, r = self.anagrams2.get_anagrams("bed")
    self.assertEqual(r, ['bed'])

    _, r = self.anagrams2.get_anagrams("bedazzle")
    self.assertEqual(r, ['bedazzle'])

    _, r = self.anagrams2.get_anagrams("bedazzled")
    self.assertEqual(r, ['bedazzled'])

    _, r = self.anagrams2.get_anagrams("bedazzlement")
    self.assertEqual(r, ['bedazzlement'])

    _, r = self.anagrams2.get_anagrams("bedazzles")
    self.assertEqual(r, ['bedazzles'])

    _, r = self.anagrams2.get_anagrams("bedazzling")
    self.assertEqual(r, ['bedazzling'])

    _, r = self.anagrams2.get_anagrams("bedbug")
    self.assertEqual(r, ['bedbug'])

    _, r = self.anagrams2.get_anagrams("bedbugs")
    self.assertEqual(r, ['bedbugs'])

    _, r = self.anagrams2.get_anagrams("bedded")
    self.assertEqual(r, ['bedded'])

    _, r = self.anagrams2.get_anagrams("bedder")
    self.assertEqual(r, ['bedder'])

    _, r = self.anagrams2.get_anagrams("bedders")
    self.assertEqual(r, ['bedders'])

    _, r = self.anagrams2.get_anagrams("bedding")
    self.assertEqual(r, ['bedding'])

    _, r = self.anagrams2.get_anagrams("bedevil")
    self.assertEqual(r, ['bedevil'])

    _, r = self.anagrams2.get_anagrams("bedeviled")
    self.assertEqual(r, ['bedeviled'])

    _, r = self.anagrams2.get_anagrams("bedeviling")
    self.assertEqual(r, ['bedeviling'])

    _, r = self.anagrams2.get_anagrams("bedevils")
    self.assertEqual(r, ['bedevils'])

    _, r = self.anagrams2.get_anagrams("bedfast")
    self.assertEqual(r, ['bedfast'])

    _, r = self.anagrams2.get_anagrams("bedford")
    self.assertEqual(r, ['bedford'])

    _, r = self.anagrams2.get_anagrams("bedlam")
    self.assertEqual(r, ['ambled', 'bedlam', 'blamed'])

    _, r = self.anagrams2.get_anagrams("bedpost")
    self.assertEqual(r, ['bedpost'])

    _, r = self.anagrams2.get_anagrams("bedposts")
    self.assertEqual(r, ['bedposts'])

    _, r = self.anagrams2.get_anagrams("bedraggle")
    self.assertEqual(r, ['bedraggle'])

    _, r = self.anagrams2.get_anagrams("bedraggled")
    self.assertEqual(r, ['bedraggled'])

    _, r = self.anagrams2.get_anagrams("bedridden")
    self.assertEqual(r, ['bedridden'])

    _, r = self.anagrams2.get_anagrams("bedrock")
    self.assertEqual(r, ['bedrock'])

    _, r = self.anagrams2.get_anagrams("bedroom")
    self.assertEqual(r, ['bedroom', 'boredom'])

    _, r = self.anagrams2.get_anagrams("bedrooms")
    self.assertEqual(r, ['bedrooms'])

    _, r = self.anagrams2.get_anagrams("beds")
    self.assertEqual(r, ['beds'])

    _, r = self.anagrams2.get_anagrams("bedside")
    self.assertEqual(r, ['bedside'])

    _, r = self.anagrams2.get_anagrams("bedspread")
    self.assertEqual(r, ['bedspread'])

    _, r = self.anagrams2.get_anagrams("bedspreads")
    self.assertEqual(r, ['bedspreads'])

    _, r = self.anagrams2.get_anagrams("bedspring")
    self.assertEqual(r, ['bedspring'])

    _, r = self.anagrams2.get_anagrams("bedsprings")
    self.assertEqual(r, ['bedsprings'])

    _, r = self.anagrams2.get_anagrams("bedstead")
    self.assertEqual(r, ['bedstead'])

    _, r = self.anagrams2.get_anagrams("bedsteads")
    self.assertEqual(r, ['bedsteads'])

    _, r = self.anagrams2.get_anagrams("bedtime")
    self.assertEqual(r, ['bedtime'])

    _, r = self.anagrams2.get_anagrams("bee")
    self.assertEqual(r, ['bee'])

    _, r = self.anagrams2.get_anagrams("beebe")
    self.assertEqual(r, ['beebe'])

    _, r = self.anagrams2.get_anagrams("beech")
    self.assertEqual(r, ['beech'])

    _, r = self.anagrams2.get_anagrams("beecham")
    self.assertEqual(r, ['beecham'])

    _, r = self.anagrams2.get_anagrams("beechen")
    self.assertEqual(r, ['beechen'])

    _, r = self.anagrams2.get_anagrams("beecher")
    self.assertEqual(r, ['beecher'])

    _, r = self.anagrams2.get_anagrams("beef")
    self.assertEqual(r, ['beef'])

    _, r = self.anagrams2.get_anagrams("beefed")
    self.assertEqual(r, ['beefed'])

    _, r = self.anagrams2.get_anagrams("beefer")
    self.assertEqual(r, ['beefer'])

    _, r = self.anagrams2.get_anagrams("beefers")
    self.assertEqual(r, ['beefers'])

    _, r = self.anagrams2.get_anagrams("beefing")
    self.assertEqual(r, ['beefing'])

    _, r = self.anagrams2.get_anagrams("beefs")
    self.assertEqual(r, ['beefs'])

    _, r = self.anagrams2.get_anagrams("beefsteak")
    self.assertEqual(r, ['beefsteak'])

    _, r = self.anagrams2.get_anagrams("beefy")
    self.assertEqual(r, ['beefy'])

    _, r = self.anagrams2.get_anagrams("beehive")
    self.assertEqual(r, ['beehive'])

    _, r = self.anagrams2.get_anagrams("beehives")
    self.assertEqual(r, ['beehives'])

    _, r = self.anagrams2.get_anagrams("been")
    self.assertEqual(r, ['been', 'eben'])

    _, r = self.anagrams2.get_anagrams("beep")
    self.assertEqual(r, ['beep'])

    _, r = self.anagrams2.get_anagrams("beeps")
    self.assertEqual(r, ['beeps'])

    _, r = self.anagrams2.get_anagrams("beer")
    self.assertEqual(r, ['beer'])

    _, r = self.anagrams2.get_anagrams("beers")
    self.assertEqual(r, ['beers'])

    _, r = self.anagrams2.get_anagrams("bees")
    self.assertEqual(r, ['bees'])

    _, r = self.anagrams2.get_anagrams("beet")
    self.assertEqual(r, ['beet'])

    _, r = self.anagrams2.get_anagrams("beethoven")
    self.assertEqual(r, ['beethoven'])

    _, r = self.anagrams2.get_anagrams("beetle")
    self.assertEqual(r, ['beetle'])

    _, r = self.anagrams2.get_anagrams("beetled")
    self.assertEqual(r, ['beetled'])

    _, r = self.anagrams2.get_anagrams("beetles")
    self.assertEqual(r, ['beetles'])

    _, r = self.anagrams2.get_anagrams("beetling")
    self.assertEqual(r, ['beetling'])

    _, r = self.anagrams2.get_anagrams("beets")
    self.assertEqual(r, ['beets', 'beset'])

    _, r = self.anagrams2.get_anagrams("befall")
    self.assertEqual(r, ['befall'])

    _, r = self.anagrams2.get_anagrams("befallen")
    self.assertEqual(r, ['befallen'])

    _, r = self.anagrams2.get_anagrams("befalling")
    self.assertEqual(r, ['befalling'])

    _, r = self.anagrams2.get_anagrams("befalls")
    self.assertEqual(r, ['befalls'])

    _, r = self.anagrams2.get_anagrams("befell")
    self.assertEqual(r, ['befell'])

    _, r = self.anagrams2.get_anagrams("befit")
    self.assertEqual(r, ['befit'])

    _, r = self.anagrams2.get_anagrams("befits")
    self.assertEqual(r, ['befits'])

    _, r = self.anagrams2.get_anagrams("befitted")
    self.assertEqual(r, ['befitted'])

    _, r = self.anagrams2.get_anagrams("befitting")
    self.assertEqual(r, ['befitting'])

    _, r = self.anagrams2.get_anagrams("befog")
    self.assertEqual(r, ['befog'])

    _, r = self.anagrams2.get_anagrams("befogged")
    self.assertEqual(r, ['befogged'])

    _, r = self.anagrams2.get_anagrams("befogging")
    self.assertEqual(r, ['befogging'])

    _, r = self.anagrams2.get_anagrams("before")
    self.assertEqual(r, ['before'])

    _, r = self.anagrams2.get_anagrams("beforehand")
    self.assertEqual(r, ['beforehand'])

    _, r = self.anagrams2.get_anagrams("befoul")
    self.assertEqual(r, ['befoul'])

    _, r = self.anagrams2.get_anagrams("befouled")
    self.assertEqual(r, ['befouled'])

    _, r = self.anagrams2.get_anagrams("befouling")
    self.assertEqual(r, ['befouling'])

    _, r = self.anagrams2.get_anagrams("befouls")
    self.assertEqual(r, ['befouls'])

    _, r = self.anagrams2.get_anagrams("befriend")
    self.assertEqual(r, ['befriend'])

    _, r = self.anagrams2.get_anagrams("befriended")
    self.assertEqual(r, ['befriended'])

    _, r = self.anagrams2.get_anagrams("befriending")
    self.assertEqual(r, ['befriending'])

    _, r = self.anagrams2.get_anagrams("befriends")
    self.assertEqual(r, ['befriends'])

    _, r = self.anagrams2.get_anagrams("befuddle")
    self.assertEqual(r, ['befuddle'])

    _, r = self.anagrams2.get_anagrams("befuddled")
    self.assertEqual(r, ['befuddled'])

    _, r = self.anagrams2.get_anagrams("befuddles")
    self.assertEqual(r, ['befuddles'])

    _, r = self.anagrams2.get_anagrams("befuddling")
    self.assertEqual(r, ['befuddling'])

    _, r = self.anagrams2.get_anagrams("beg")
    self.assertEqual(r, ['beg'])

    _, r = self.anagrams2.get_anagrams("began")
    self.assertEqual(r, ['began'])

    _, r = self.anagrams2.get_anagrams("beget")
    self.assertEqual(r, ['beget'])

    _, r = self.anagrams2.get_anagrams("begets")
    self.assertEqual(r, ['begets'])

    _, r = self.anagrams2.get_anagrams("begetting")
    self.assertEqual(r, ['begetting'])

    _, r = self.anagrams2.get_anagrams("beggar")
    self.assertEqual(r, ['bagger', 'beggar'])

    _, r = self.anagrams2.get_anagrams("beggarly")
    self.assertEqual(r, ['beggarly'])

    _, r = self.anagrams2.get_anagrams("beggars")
    self.assertEqual(r, ['baggers', 'beggars'])

    _, r = self.anagrams2.get_anagrams("beggary")
    self.assertEqual(r, ['beggary'])

    _, r = self.anagrams2.get_anagrams("begged")
    self.assertEqual(r, ['begged'])

    _, r = self.anagrams2.get_anagrams("begging")
    self.assertEqual(r, ['begging'])

    _, r = self.anagrams2.get_anagrams("begin")
    self.assertEqual(r, ['begin', 'being', 'binge'])

    _, r = self.anagrams2.get_anagrams("beginner")
    self.assertEqual(r, ['beginner'])

    _, r = self.anagrams2.get_anagrams("beginners")
    self.assertEqual(r, ['beginners'])

    _, r = self.anagrams2.get_anagrams("beginning")
    self.assertEqual(r, ['beginning'])

    _, r = self.anagrams2.get_anagrams("beginnings")
    self.assertEqual(r, ['beginnings'])

    _, r = self.anagrams2.get_anagrams("begins")
    self.assertEqual(r, ['begins', 'beings', 'binges'])

    _, r = self.anagrams2.get_anagrams("begot")
    self.assertEqual(r, ['begot'])

    _, r = self.anagrams2.get_anagrams("begotten")
    self.assertEqual(r, ['begotten'])

    _, r = self.anagrams2.get_anagrams("begrudge")
    self.assertEqual(r, ['begrudge', 'debugger'])

    _, r = self.anagrams2.get_anagrams("begrudged")
    self.assertEqual(r, ['begrudged'])

    _, r = self.anagrams2.get_anagrams("begrudges")
    self.assertEqual(r, ['begrudges', 'debuggers'])

    _, r = self.anagrams2.get_anagrams("begrudging")
    self.assertEqual(r, ['begrudging'])

    _, r = self.anagrams2.get_anagrams("begrudgingly")
    self.assertEqual(r, ['begrudgingly'])

    _, r = self.anagrams2.get_anagrams("begs")
    self.assertEqual(r, ['begs'])

    _, r = self.anagrams2.get_anagrams("beguile")
    self.assertEqual(r, ['beguile'])

    _, r = self.anagrams2.get_anagrams("beguiled")
    self.assertEqual(r, ['beguiled'])

    _, r = self.anagrams2.get_anagrams("beguiles")
    self.assertEqual(r, ['beguiles'])

    _, r = self.anagrams2.get_anagrams("beguiling")
    self.assertEqual(r, ['beguiling'])

    _, r = self.anagrams2.get_anagrams("begun")
    self.assertEqual(r, ['begun'])

    _, r = self.anagrams2.get_anagrams("behalf")
    self.assertEqual(r, ['behalf'])

    _, r = self.anagrams2.get_anagrams("behave")
    self.assertEqual(r, ['behave'])

    _, r = self.anagrams2.get_anagrams("behaved")
    self.assertEqual(r, ['behaved'])

    _, r = self.anagrams2.get_anagrams("behaves")
    self.assertEqual(r, ['behaves'])

    _, r = self.anagrams2.get_anagrams("behaving")
    self.assertEqual(r, ['behaving'])

    _, r = self.anagrams2.get_anagrams("behavior")
    self.assertEqual(r, ['behavior'])

    _, r = self.anagrams2.get_anagrams("behavioral")
    self.assertEqual(r, ['behavioral'])

    _, r = self.anagrams2.get_anagrams("behaviorally")
    self.assertEqual(r, ['behaviorally'])

    _, r = self.anagrams2.get_anagrams("behaviorism")
    self.assertEqual(r, ['behaviorism'])

    _, r = self.anagrams2.get_anagrams("behavioristic")
    self.assertEqual(r, ['behavioristic'])

    _, r = self.anagrams2.get_anagrams("behaviors")
    self.assertEqual(r, ['behaviors'])

    _, r = self.anagrams2.get_anagrams("behead")
    self.assertEqual(r, ['behead'])

    _, r = self.anagrams2.get_anagrams("beheading")
    self.assertEqual(r, ['beheading'])

    _, r = self.anagrams2.get_anagrams("beheld")
    self.assertEqual(r, ['beheld'])

    _, r = self.anagrams2.get_anagrams("behemoth")
    self.assertEqual(r, ['behemoth'])

    _, r = self.anagrams2.get_anagrams("behemoths")
    self.assertEqual(r, ['behemoths'])

    _, r = self.anagrams2.get_anagrams("behest")
    self.assertEqual(r, ['behest', 'thebes'])

    _, r = self.anagrams2.get_anagrams("behind")
    self.assertEqual(r, ['behind'])

    _, r = self.anagrams2.get_anagrams("behold")
    self.assertEqual(r, ['behold'])

    _, r = self.anagrams2.get_anagrams("beholden")
    self.assertEqual(r, ['beholden'])

    _, r = self.anagrams2.get_anagrams("beholder")
    self.assertEqual(r, ['beholder'])

    _, r = self.anagrams2.get_anagrams("beholders")
    self.assertEqual(r, ['beholders'])

    _, r = self.anagrams2.get_anagrams("beholding")
    self.assertEqual(r, ['beholding'])

    _, r = self.anagrams2.get_anagrams("beholds")
    self.assertEqual(r, ['beholds'])

    _, r = self.anagrams2.get_anagrams("behoove")
    self.assertEqual(r, ['behoove'])

    _, r = self.anagrams2.get_anagrams("behooves")
    self.assertEqual(r, ['behooves'])

    _, r = self.anagrams2.get_anagrams("beige")
    self.assertEqual(r, ['beige'])

    _, r = self.anagrams2.get_anagrams("beijing")
    self.assertEqual(r, ['beijing'])

    _, r = self.anagrams2.get_anagrams("being")
    self.assertEqual(r, ['begin', 'being', 'binge'])

    _, r = self.anagrams2.get_anagrams("beings")
    self.assertEqual(r, ['begins', 'beings', 'binges'])

    _, r = self.anagrams2.get_anagrams("beirut")
    self.assertEqual(r, ['beirut'])

    _, r = self.anagrams2.get_anagrams("bela")
    self.assertEqual(r, ['abel', 'able', 'bale', 'bela', 'elba'])

    _, r = self.anagrams2.get_anagrams("belabor")
    self.assertEqual(r, ['belabor'])

    _, r = self.anagrams2.get_anagrams("belabored")
    self.assertEqual(r, ['belabored'])

    _, r = self.anagrams2.get_anagrams("belaboring")
    self.assertEqual(r, ['belaboring'])

    _, r = self.anagrams2.get_anagrams("belabors")
    self.assertEqual(r, ['belabors'])

    _, r = self.anagrams2.get_anagrams("belated")
    self.assertEqual(r, ['belated'])

    _, r = self.anagrams2.get_anagrams("belatedly")
    self.assertEqual(r, ['belatedly'])

    _, r = self.anagrams2.get_anagrams("belay")
    self.assertEqual(r, ['belay'])

    _, r = self.anagrams2.get_anagrams("belayed")
    self.assertEqual(r, ['belayed'])

    _, r = self.anagrams2.get_anagrams("belaying")
    self.assertEqual(r, ['belaying'])

    _, r = self.anagrams2.get_anagrams("belays")
    self.assertEqual(r, ['basely', 'belays'])

    _, r = self.anagrams2.get_anagrams("belch")
    self.assertEqual(r, ['belch'])

    _, r = self.anagrams2.get_anagrams("belched")
    self.assertEqual(r, ['belched'])

    _, r = self.anagrams2.get_anagrams("belches")
    self.assertEqual(r, ['belches'])

    _, r = self.anagrams2.get_anagrams("belching")
    self.assertEqual(r, ['belching'])

    _, r = self.anagrams2.get_anagrams("belfast")
    self.assertEqual(r, ['belfast'])

    _, r = self.anagrams2.get_anagrams("belfries")
    self.assertEqual(r, ['belfries'])

    _, r = self.anagrams2.get_anagrams("belfry")
    self.assertEqual(r, ['belfry'])

    _, r = self.anagrams2.get_anagrams("belgian")
    self.assertEqual(r, ['algenib', 'belgian', 'bengali'])

    _, r = self.anagrams2.get_anagrams("belgians")
    self.assertEqual(r, ['belgians', 'singable'])

    _, r = self.anagrams2.get_anagrams("belgium")
    self.assertEqual(r, ['belgium'])

    _, r = self.anagrams2.get_anagrams("belgrade")
    self.assertEqual(r, ['belgrade'])

    _, r = self.anagrams2.get_anagrams("belie")
    self.assertEqual(r, ['belie'])

    _, r = self.anagrams2.get_anagrams("belied")
    self.assertEqual(r, ['belied', 'edible'])

    _, r = self.anagrams2.get_anagrams("belief")
    self.assertEqual(r, ['belief'])

    _, r = self.anagrams2.get_anagrams("beliefs")
    self.assertEqual(r, ['beliefs'])

    _, r = self.anagrams2.get_anagrams("belies")
    self.assertEqual(r, ['belies'])

    _, r = self.anagrams2.get_anagrams("believable")
    self.assertEqual(r, ['believable'])

    _, r = self.anagrams2.get_anagrams("believably")
    self.assertEqual(r, ['believably'])

    _, r = self.anagrams2.get_anagrams("believe")
    self.assertEqual(r, ['believe'])

    _, r = self.anagrams2.get_anagrams("believed")
    self.assertEqual(r, ['believed'])

    _, r = self.anagrams2.get_anagrams("believer")
    self.assertEqual(r, ['believer'])

    _, r = self.anagrams2.get_anagrams("believers")
    self.assertEqual(r, ['believers'])

    _, r = self.anagrams2.get_anagrams("believes")
    self.assertEqual(r, ['believes'])

    _, r = self.anagrams2.get_anagrams("believing")
    self.assertEqual(r, ['believing'])

    _, r = self.anagrams2.get_anagrams("belittle")
    self.assertEqual(r, ['belittle'])

    _, r = self.anagrams2.get_anagrams("belittled")
    self.assertEqual(r, ['belittled'])

    _, r = self.anagrams2.get_anagrams("belittles")
    self.assertEqual(r, ['belittles'])

    _, r = self.anagrams2.get_anagrams("belittling")
    self.assertEqual(r, ['belittling'])

    _, r = self.anagrams2.get_anagrams("belize")
    self.assertEqual(r, ['belize'])

    _, r = self.anagrams2.get_anagrams("bell")
    self.assertEqual(r, ['bell'])

    _, r = self.anagrams2.get_anagrams("bella")
    self.assertEqual(r, ['bella', 'label'])

    _, r = self.anagrams2.get_anagrams("bellamy")
    self.assertEqual(r, ['bellamy'])

    _, r = self.anagrams2.get_anagrams("bellatrix")
    self.assertEqual(r, ['bellatrix'])

    _, r = self.anagrams2.get_anagrams("bellboy")
    self.assertEqual(r, ['bellboy'])

    _, r = self.anagrams2.get_anagrams("bellboys")
    self.assertEqual(r, ['bellboys'])

    _, r = self.anagrams2.get_anagrams("belle")
    self.assertEqual(r, ['belle'])

    _, r = self.anagrams2.get_anagrams("belles")
    self.assertEqual(r, ['belles'])

    _, r = self.anagrams2.get_anagrams("belleville")
    self.assertEqual(r, ['belleville'])

    _, r = self.anagrams2.get_anagrams("bellhop")
    self.assertEqual(r, ['bellhop'])

    _, r = self.anagrams2.get_anagrams("bellhops")
    self.assertEqual(r, ['bellhops'])

    _, r = self.anagrams2.get_anagrams("bellicose")
    self.assertEqual(r, ['bellicose'])

    _, r = self.anagrams2.get_anagrams("bellicosity")
    self.assertEqual(r, ['bellicosity'])

    _, r = self.anagrams2.get_anagrams("bellies")
    self.assertEqual(r, ['bellies'])

    _, r = self.anagrams2.get_anagrams("belligerence")
    self.assertEqual(r, ['belligerence'])

    _, r = self.anagrams2.get_anagrams("belligerent")
    self.assertEqual(r, ['belligerent'])

    _, r = self.anagrams2.get_anagrams("belligerently")
    self.assertEqual(r, ['belligerently'])

    _, r = self.anagrams2.get_anagrams("belligerents")
    self.assertEqual(r, ['belligerents'])

    _, r = self.anagrams2.get_anagrams("bellingham")
    self.assertEqual(r, ['bellingham'])

    _, r = self.anagrams2.get_anagrams("bellini")
    self.assertEqual(r, ['bellini'])

    _, r = self.anagrams2.get_anagrams("bellman")
    self.assertEqual(r, ['bellman'])

    _, r = self.anagrams2.get_anagrams("bellmen")
    self.assertEqual(r, ['bellmen'])

    _, r = self.anagrams2.get_anagrams("bellovin")
    self.assertEqual(r, ['bellovin'])

    _, r = self.anagrams2.get_anagrams("bellow")
    self.assertEqual(r, ['bellow'])

    _, r = self.anagrams2.get_anagrams("bellowed")
    self.assertEqual(r, ['bellowed'])

    _, r = self.anagrams2.get_anagrams("bellowing")
    self.assertEqual(r, ['bellowing'])

    _, r = self.anagrams2.get_anagrams("bellows")
    self.assertEqual(r, ['bellows', 'boswell'])

    _, r = self.anagrams2.get_anagrams("bells")
    self.assertEqual(r, ['bells'])

    _, r = self.anagrams2.get_anagrams("bellum")
    self.assertEqual(r, ['bellum'])

    _, r = self.anagrams2.get_anagrams("bellwether")
    self.assertEqual(r, ['bellwether'])

    _, r = self.anagrams2.get_anagrams("bellwethers")
    self.assertEqual(r, ['bellwethers'])

    _, r = self.anagrams2.get_anagrams("bellwood")
    self.assertEqual(r, ['bellwood'])

    _, r = self.anagrams2.get_anagrams("belly")
    self.assertEqual(r, ['belly'])

    _, r = self.anagrams2.get_anagrams("bellyache")
    self.assertEqual(r, ['bellyache'])

    _, r = self.anagrams2.get_anagrams("bellyfull")
    self.assertEqual(r, ['bellyfull'])

    _, r = self.anagrams2.get_anagrams("belmont")
    self.assertEqual(r, ['belmont'])

    _, r = self.anagrams2.get_anagrams("beloit")
    self.assertEqual(r, ['beloit'])

    _, r = self.anagrams2.get_anagrams("belong")
    self.assertEqual(r, ['belong'])

    _, r = self.anagrams2.get_anagrams("belonged")
    self.assertEqual(r, ['belonged'])

    _, r = self.anagrams2.get_anagrams("belonging")
    self.assertEqual(r, ['belonging'])

    _, r = self.anagrams2.get_anagrams("belongings")
    self.assertEqual(r, ['belongings'])

    _, r = self.anagrams2.get_anagrams("belongs")
    self.assertEqual(r, ['belongs'])

    _, r = self.anagrams2.get_anagrams("beloved")
    self.assertEqual(r, ['beloved'])

    _, r = self.anagrams2.get_anagrams("below")
    self.assertEqual(r, ['below', 'bowel', 'elbow'])

    _, r = self.anagrams2.get_anagrams("belshazzar")
    self.assertEqual(r, ['belshazzar'])

    _, r = self.anagrams2.get_anagrams("belt")
    self.assertEqual(r, ['belt'])

    _, r = self.anagrams2.get_anagrams("belted")
    self.assertEqual(r, ['belted'])

    _, r = self.anagrams2.get_anagrams("belting")
    self.assertEqual(r, ['belting'])

    _, r = self.anagrams2.get_anagrams("belton")
    self.assertEqual(r, ['belton'])

    _, r = self.anagrams2.get_anagrams("belts")
    self.assertEqual(r, ['belts'])

    _, r = self.anagrams2.get_anagrams("beltsville")
    self.assertEqual(r, ['beltsville'])

    _, r = self.anagrams2.get_anagrams("belushi")
    self.assertEqual(r, ['belushi'])

    _, r = self.anagrams2.get_anagrams("bely")
    self.assertEqual(r, ['bely'])

    _, r = self.anagrams2.get_anagrams("belying")
    self.assertEqual(r, ['belying'])

    _, r = self.anagrams2.get_anagrams("bemoan")
    self.assertEqual(r, ['bemoan'])

    _, r = self.anagrams2.get_anagrams("bemoaned")
    self.assertEqual(r, ['bemoaned'])

    _, r = self.anagrams2.get_anagrams("bemoaning")
    self.assertEqual(r, ['bemoaning'])

    _, r = self.anagrams2.get_anagrams("bemoans")
    self.assertEqual(r, ['bemoans'])

    _, r = self.anagrams2.get_anagrams("ben")
    self.assertEqual(r, ['ben'])

    _, r = self.anagrams2.get_anagrams("benares")
    self.assertEqual(r, ['beaners', 'benares'])

    _, r = self.anagrams2.get_anagrams("bench")
    self.assertEqual(r, ['bench'])

    _, r = self.anagrams2.get_anagrams("benched")
    self.assertEqual(r, ['benched'])

    _, r = self.anagrams2.get_anagrams("benches")
    self.assertEqual(r, ['benches'])

    _, r = self.anagrams2.get_anagrams("benchmark")
    self.assertEqual(r, ['benchmark'])

    _, r = self.anagrams2.get_anagrams("benchmarking")
    self.assertEqual(r, ['benchmarking'])

    _, r = self.anagrams2.get_anagrams("benchmarks")
    self.assertEqual(r, ['benchmarks'])

    _, r = self.anagrams2.get_anagrams("bend")
    self.assertEqual(r, ['bend'])

    _, r = self.anagrams2.get_anagrams("bendable")
    self.assertEqual(r, ['bendable'])

    _, r = self.anagrams2.get_anagrams("bender")
    self.assertEqual(r, ['bender'])

    _, r = self.anagrams2.get_anagrams("benders")
    self.assertEqual(r, ['benders'])

    _, r = self.anagrams2.get_anagrams("bending")
    self.assertEqual(r, ['bending'])

    _, r = self.anagrams2.get_anagrams("bendix")
    self.assertEqual(r, ['bendix'])

    _, r = self.anagrams2.get_anagrams("bends")
    self.assertEqual(r, ['bends'])

    _, r = self.anagrams2.get_anagrams("beneath")
    self.assertEqual(r, ['beneath'])

    _, r = self.anagrams2.get_anagrams("benedict")
    self.assertEqual(r, ['benedict'])

    _, r = self.anagrams2.get_anagrams("benedictine")
    self.assertEqual(r, ['benedictine'])

    _, r = self.anagrams2.get_anagrams("benediction")
    self.assertEqual(r, ['benediction'])

    _, r = self.anagrams2.get_anagrams("benedictions")
    self.assertEqual(r, ['benedictions'])

    _, r = self.anagrams2.get_anagrams("benedikt")
    self.assertEqual(r, ['benedikt'])

    _, r = self.anagrams2.get_anagrams("benefactor")
    self.assertEqual(r, ['benefactor'])

    _, r = self.anagrams2.get_anagrams("benefactors")
    self.assertEqual(r, ['benefactors'])

    _, r = self.anagrams2.get_anagrams("beneficence")
    self.assertEqual(r, ['beneficence'])

    _, r = self.anagrams2.get_anagrams("beneficences")
    self.assertEqual(r, ['beneficences'])

    _, r = self.anagrams2.get_anagrams("beneficent")
    self.assertEqual(r, ['beneficent'])

    _, r = self.anagrams2.get_anagrams("beneficial")
    self.assertEqual(r, ['beneficial'])

    _, r = self.anagrams2.get_anagrams("beneficially")
    self.assertEqual(r, ['beneficially'])

    _, r = self.anagrams2.get_anagrams("beneficiaries")
    self.assertEqual(r, ['beneficiaries'])

    _, r = self.anagrams2.get_anagrams("beneficiary")
    self.assertEqual(r, ['beneficiary'])

    _, r = self.anagrams2.get_anagrams("benefit")
    self.assertEqual(r, ['benefit'])

    _, r = self.anagrams2.get_anagrams("benefited")
    self.assertEqual(r, ['benefited'])

    _, r = self.anagrams2.get_anagrams("benefiting")
    self.assertEqual(r, ['benefiting'])

    _, r = self.anagrams2.get_anagrams("benefits")
    self.assertEqual(r, ['benefits'])

    _, r = self.anagrams2.get_anagrams("benefitted")
    self.assertEqual(r, ['benefitted'])

    _, r = self.anagrams2.get_anagrams("benefitting")
    self.assertEqual(r, ['benefitting'])

    _, r = self.anagrams2.get_anagrams("benelux")
    self.assertEqual(r, ['benelux'])

    _, r = self.anagrams2.get_anagrams("benevolence")
    self.assertEqual(r, ['benevolence'])

    _, r = self.anagrams2.get_anagrams("benevolent")
    self.assertEqual(r, ['benevolent'])

    _, r = self.anagrams2.get_anagrams("bengal")
    self.assertEqual(r, ['bangle', 'bengal'])

    _, r = self.anagrams2.get_anagrams("bengali")
    self.assertEqual(r, ['algenib', 'belgian', 'bengali'])

    _, r = self.anagrams2.get_anagrams("benighted")
    self.assertEqual(r, ['benighted'])

    _, r = self.anagrams2.get_anagrams("benign")
    self.assertEqual(r, ['benign'])

    _, r = self.anagrams2.get_anagrams("benignly")
    self.assertEqual(r, ['benignly'])

    _, r = self.anagrams2.get_anagrams("benjamin")
    self.assertEqual(r, ['benjamin'])

    _, r = self.anagrams2.get_anagrams("bennett")
    self.assertEqual(r, ['bennett'])

    _, r = self.anagrams2.get_anagrams("bennington")
    self.assertEqual(r, ['bennington'])

    _, r = self.anagrams2.get_anagrams("benny")
    self.assertEqual(r, ['benny'])

    _, r = self.anagrams2.get_anagrams("benson")
    self.assertEqual(r, ['benson'])

    _, r = self.anagrams2.get_anagrams("bent")
    self.assertEqual(r, ['bent'])

    _, r = self.anagrams2.get_anagrams("bentham")
    self.assertEqual(r, ['bentham'])

    _, r = self.anagrams2.get_anagrams("bentley")
    self.assertEqual(r, ['bentley'])

    _, r = self.anagrams2.get_anagrams("bentleys")
    self.assertEqual(r, ['bentleys'])

    _, r = self.anagrams2.get_anagrams("benton")
    self.assertEqual(r, ['benton', 'bonnet'])

    _, r = self.anagrams2.get_anagrams("benz")
    self.assertEqual(r, ['benz'])

    _, r = self.anagrams2.get_anagrams("benzedrine")
    self.assertEqual(r, ['benzedrine'])

    _, r = self.anagrams2.get_anagrams("benzene")
    self.assertEqual(r, ['benzene'])

    _, r = self.anagrams2.get_anagrams("beograd")
    self.assertEqual(r, ['beograd'])

    _, r = self.anagrams2.get_anagrams("beowulf")
    self.assertEqual(r, ['beowulf'])

    _, r = self.anagrams2.get_anagrams("bequeath")
    self.assertEqual(r, ['bequeath'])

    _, r = self.anagrams2.get_anagrams("bequeathal")
    self.assertEqual(r, ['bequeathal'])

    _, r = self.anagrams2.get_anagrams("bequeathed")
    self.assertEqual(r, ['bequeathed'])

    _, r = self.anagrams2.get_anagrams("bequeathing")
    self.assertEqual(r, ['bequeathing'])

    _, r = self.anagrams2.get_anagrams("bequeaths")
    self.assertEqual(r, ['bequeaths'])

    _, r = self.anagrams2.get_anagrams("bequest")
    self.assertEqual(r, ['bequest'])

    _, r = self.anagrams2.get_anagrams("bequests")
    self.assertEqual(r, ['bequests'])

    _, r = self.anagrams2.get_anagrams("berate")
    self.assertEqual(r, ['beater', 'berate', 'rebate'])

    _, r = self.anagrams2.get_anagrams("berated")
    self.assertEqual(r, ['berated', 'debater'])

    _, r = self.anagrams2.get_anagrams("berates")
    self.assertEqual(r, ['beaters', 'berates', 'rebates'])

    _, r = self.anagrams2.get_anagrams("berating")
    self.assertEqual(r, ['berating'])

    _, r = self.anagrams2.get_anagrams("berea")
    self.assertEqual(r, ['berea'])

    _, r = self.anagrams2.get_anagrams("bereave")
    self.assertEqual(r, ['bereave'])

    _, r = self.anagrams2.get_anagrams("bereaved")
    self.assertEqual(r, ['bereaved'])

    _, r = self.anagrams2.get_anagrams("bereavement")
    self.assertEqual(r, ['bereavement'])

    _, r = self.anagrams2.get_anagrams("bereavements")
    self.assertEqual(r, ['bereavements'])

    _, r = self.anagrams2.get_anagrams("bereaves")
    self.assertEqual(r, ['bereaves'])

    _, r = self.anagrams2.get_anagrams("bereaving")
    self.assertEqual(r, ['bereaving'])

    _, r = self.anagrams2.get_anagrams("bereft")
    self.assertEqual(r, ['bereft'])

    _, r = self.anagrams2.get_anagrams("berenices")
    self.assertEqual(r, ['berenices'])

    _, r = self.anagrams2.get_anagrams("beresford")
    self.assertEqual(r, ['beresford'])

    _, r = self.anagrams2.get_anagrams("beret")
    self.assertEqual(r, ['beret'])

    _, r = self.anagrams2.get_anagrams("berets")
    self.assertEqual(r, ['berets'])

    _, r = self.anagrams2.get_anagrams("bergen")
    self.assertEqual(r, ['bergen'])

    _, r = self.anagrams2.get_anagrams("bergland")
    self.assertEqual(r, ['bergland'])

    _, r = self.anagrams2.get_anagrams("berglund")
    self.assertEqual(r, ['berglund', 'lundberg'])

    _, r = self.anagrams2.get_anagrams("bergman")
    self.assertEqual(r, ['bergman'])

    _, r = self.anagrams2.get_anagrams("bergson")
    self.assertEqual(r, ['bergson'])

    _, r = self.anagrams2.get_anagrams("bergsten")
    self.assertEqual(r, ['bergsten'])

    _, r = self.anagrams2.get_anagrams("bergstrom")
    self.assertEqual(r, ['bergstrom', 'stromberg'])

    _, r = self.anagrams2.get_anagrams("beribboned")
    self.assertEqual(r, ['beribboned'])

    _, r = self.anagrams2.get_anagrams("beriberi")
    self.assertEqual(r, ['beriberi'])

    _, r = self.anagrams2.get_anagrams("beringer")
    self.assertEqual(r, ['beringer'])

    _, r = self.anagrams2.get_anagrams("berkeley")
    self.assertEqual(r, ['berkeley'])

    _, r = self.anagrams2.get_anagrams("berkelium")
    self.assertEqual(r, ['berkelium'])

    _, r = self.anagrams2.get_anagrams("berkowitz")
    self.assertEqual(r, ['berkowitz'])

    _, r = self.anagrams2.get_anagrams("berkshire")
    self.assertEqual(r, ['berkshire'])

    _, r = self.anagrams2.get_anagrams("berkshires")
    self.assertEqual(r, ['berkshires'])

    _, r = self.anagrams2.get_anagrams("berlin")
    self.assertEqual(r, ['berlin'])

    _, r = self.anagrams2.get_anagrams("berliner")
    self.assertEqual(r, ['berliner'])

    _, r = self.anagrams2.get_anagrams("berliners")
    self.assertEqual(r, ['berliners'])

    _, r = self.anagrams2.get_anagrams("berlinize")
    self.assertEqual(r, ['berlinize'])

    _, r = self.anagrams2.get_anagrams("berlinizes")
    self.assertEqual(r, ['berlinizes'])

    _, r = self.anagrams2.get_anagrams("berlioz")
    self.assertEqual(r, ['berlioz'])

    _, r = self.anagrams2.get_anagrams("berlitz")
    self.assertEqual(r, ['berlitz'])

    _, r = self.anagrams2.get_anagrams("berman")
    self.assertEqual(r, ['berman'])

    _, r = self.anagrams2.get_anagrams("bermuda")
    self.assertEqual(r, ['bermuda'])

    _, r = self.anagrams2.get_anagrams("bern")
    self.assertEqual(r, ['bern'])

    _, r = self.anagrams2.get_anagrams("bernadine")
    self.assertEqual(r, ['bernadine'])

    _, r = self.anagrams2.get_anagrams("bernard")
    self.assertEqual(r, ['bernard'])

    _, r = self.anagrams2.get_anagrams("bernardine")
    self.assertEqual(r, ['bernardine'])

    _, r = self.anagrams2.get_anagrams("bernardino")
    self.assertEqual(r, ['bernardino'])

    _, r = self.anagrams2.get_anagrams("bernardo")
    self.assertEqual(r, ['bernardo', 'dearborn'])

    _, r = self.anagrams2.get_anagrams("berne")
    self.assertEqual(r, ['berne'])

    _, r = self.anagrams2.get_anagrams("bernet")
    self.assertEqual(r, ['bernet'])

    _, r = self.anagrams2.get_anagrams("bernhard")
    self.assertEqual(r, ['bernhard'])

    _, r = self.anagrams2.get_anagrams("bernice")
    self.assertEqual(r, ['bernice'])

    _, r = self.anagrams2.get_anagrams("bernie")
    self.assertEqual(r, ['bernie'])

    _, r = self.anagrams2.get_anagrams("berniece")
    self.assertEqual(r, ['berniece'])

    _, r = self.anagrams2.get_anagrams("bernini")
    self.assertEqual(r, ['bernini'])

    _, r = self.anagrams2.get_anagrams("bernoulli")
    self.assertEqual(r, ['bernoulli'])

    _, r = self.anagrams2.get_anagrams("bernstein")
    self.assertEqual(r, ['bernstein'])

    _, r = self.anagrams2.get_anagrams("berra")
    self.assertEqual(r, ['barer', 'berra'])

    _, r = self.anagrams2.get_anagrams("berries")
    self.assertEqual(r, ['berries'])

    _, r = self.anagrams2.get_anagrams("berry")
    self.assertEqual(r, ['berry'])

    _, r = self.anagrams2.get_anagrams("berserk")
    self.assertEqual(r, ['berserk'])

    _, r = self.anagrams2.get_anagrams("bert")
    self.assertEqual(r, ['bert'])

    _, r = self.anagrams2.get_anagrams("berth")
    self.assertEqual(r, ['berth'])

    _, r = self.anagrams2.get_anagrams("bertha")
    self.assertEqual(r, ['bather', 'bertha', 'breath'])

    _, r = self.anagrams2.get_anagrams("berths")
    self.assertEqual(r, ['berths'])

    _, r = self.anagrams2.get_anagrams("bertie")
    self.assertEqual(r, ['bertie'])

    _, r = self.anagrams2.get_anagrams("bertram")
    self.assertEqual(r, ['bertram'])

    _, r = self.anagrams2.get_anagrams("bertrand")
    self.assertEqual(r, ['bertrand'])

    _, r = self.anagrams2.get_anagrams("berwick")
    self.assertEqual(r, ['berwick'])

    _, r = self.anagrams2.get_anagrams("beryl")
    self.assertEqual(r, ['beryl'])

    _, r = self.anagrams2.get_anagrams("beryllium")
    self.assertEqual(r, ['beryllium'])

    _, r = self.anagrams2.get_anagrams("beseech")
    self.assertEqual(r, ['beseech'])

    _, r = self.anagrams2.get_anagrams("beseeches")
    self.assertEqual(r, ['beseeches'])

    _, r = self.anagrams2.get_anagrams("beseeching")
    self.assertEqual(r, ['beseeching'])

    _, r = self.anagrams2.get_anagrams("beset")
    self.assertEqual(r, ['beets', 'beset'])

    _, r = self.anagrams2.get_anagrams("besets")
    self.assertEqual(r, ['besets'])

    _, r = self.anagrams2.get_anagrams("besetting")
    self.assertEqual(r, ['besetting'])

    _, r = self.anagrams2.get_anagrams("beside")
    self.assertEqual(r, ['beside'])

    _, r = self.anagrams2.get_anagrams("besides")
    self.assertEqual(r, ['besides'])

    _, r = self.anagrams2.get_anagrams("besiege")
    self.assertEqual(r, ['besiege'])

    _, r = self.anagrams2.get_anagrams("besieged")
    self.assertEqual(r, ['besieged'])

    _, r = self.anagrams2.get_anagrams("besieger")
    self.assertEqual(r, ['besieger'])

    _, r = self.anagrams2.get_anagrams("besiegers")
    self.assertEqual(r, ['besiegers'])

    _, r = self.anagrams2.get_anagrams("besieging")
    self.assertEqual(r, ['besieging'])

    _, r = self.anagrams2.get_anagrams("besmirch")
    self.assertEqual(r, ['besmirch'])

    _, r = self.anagrams2.get_anagrams("besmirched")
    self.assertEqual(r, ['besmirched'])

    _, r = self.anagrams2.get_anagrams("besmirches")
    self.assertEqual(r, ['besmirches'])

    _, r = self.anagrams2.get_anagrams("besmirching")
    self.assertEqual(r, ['besmirching'])

    _, r = self.anagrams2.get_anagrams("besotted")
    self.assertEqual(r, ['besotted'])

    _, r = self.anagrams2.get_anagrams("besotter")
    self.assertEqual(r, ['besotter'])

    _, r = self.anagrams2.get_anagrams("besotting")
    self.assertEqual(r, ['besotting'])

    _, r = self.anagrams2.get_anagrams("besought")
    self.assertEqual(r, ['besought'])

    _, r = self.anagrams2.get_anagrams("bespeak")
    self.assertEqual(r, ['bespeak'])

    _, r = self.anagrams2.get_anagrams("bespeaks")
    self.assertEqual(r, ['bespeaks'])

    _, r = self.anagrams2.get_anagrams("bespectacled")
    self.assertEqual(r, ['bespectacled'])

    _, r = self.anagrams2.get_anagrams("bespoke")
    self.assertEqual(r, ['bespoke'])

    _, r = self.anagrams2.get_anagrams("bess")
    self.assertEqual(r, ['bess'])

    _, r = self.anagrams2.get_anagrams("bessel")
    self.assertEqual(r, ['bessel'])

    _, r = self.anagrams2.get_anagrams("bessemer")
    self.assertEqual(r, ['bessemer'])

    _, r = self.anagrams2.get_anagrams("bessemerize")
    self.assertEqual(r, ['bessemerize'])

    _, r = self.anagrams2.get_anagrams("bessemerizes")
    self.assertEqual(r, ['bessemerizes'])

    _, r = self.anagrams2.get_anagrams("bessie")
    self.assertEqual(r, ['bessie'])

    _, r = self.anagrams2.get_anagrams("best")
    self.assertEqual(r, ['best', 'bets'])

    _, r = self.anagrams2.get_anagrams("bested")
    self.assertEqual(r, ['bested'])

    _, r = self.anagrams2.get_anagrams("bestial")
    self.assertEqual(r, ['bestial', 'stabile'])

    _, r = self.anagrams2.get_anagrams("besting")
    self.assertEqual(r, ['besting'])

    _, r = self.anagrams2.get_anagrams("bestir")
    self.assertEqual(r, ['bestir', 'biters', 'tribes'])

    _, r = self.anagrams2.get_anagrams("bestirring")
    self.assertEqual(r, ['bestirring'])

    _, r = self.anagrams2.get_anagrams("bestow")
    self.assertEqual(r, ['bestow'])

    _, r = self.anagrams2.get_anagrams("bestowal")
    self.assertEqual(r, ['bestowal'])

    _, r = self.anagrams2.get_anagrams("bestowed")
    self.assertEqual(r, ['bestowed'])

    _, r = self.anagrams2.get_anagrams("bests")
    self.assertEqual(r, ['bests'])

    _, r = self.anagrams2.get_anagrams("bestseller")
    self.assertEqual(r, ['bestseller'])

    _, r = self.anagrams2.get_anagrams("bestsellers")
    self.assertEqual(r, ['bestsellers'])

    _, r = self.anagrams2.get_anagrams("bestselling")
    self.assertEqual(r, ['bestselling'])

    _, r = self.anagrams2.get_anagrams("bet")
    self.assertEqual(r, ['bet'])

    _, r = self.anagrams2.get_anagrams("beta")
    self.assertEqual(r, ['abet', 'beat', 'beta'])

    _, r = self.anagrams2.get_anagrams("betatron")
    self.assertEqual(r, ['betatron'])

    _, r = self.anagrams2.get_anagrams("betel")
    self.assertEqual(r, ['betel'])

    _, r = self.anagrams2.get_anagrams("betelgeuse")
    self.assertEqual(r, ['betelgeuse'])

    _, r = self.anagrams2.get_anagrams("bethesda")
    self.assertEqual(r, ['bethesda'])

    _, r = self.anagrams2.get_anagrams("bethlehem")
    self.assertEqual(r, ['bethlehem'])

    _, r = self.anagrams2.get_anagrams("betide")
    self.assertEqual(r, ['betide'])

    _, r = self.anagrams2.get_anagrams("betray")
    self.assertEqual(r, ['betray'])

    _, r = self.anagrams2.get_anagrams("betrayal")
    self.assertEqual(r, ['betrayal'])

    _, r = self.anagrams2.get_anagrams("betrayed")
    self.assertEqual(r, ['betrayed'])

    _, r = self.anagrams2.get_anagrams("betrayer")
    self.assertEqual(r, ['betrayer'])

    _, r = self.anagrams2.get_anagrams("betraying")
    self.assertEqual(r, ['betraying'])

    _, r = self.anagrams2.get_anagrams("betrays")
    self.assertEqual(r, ['betrays'])

    _, r = self.anagrams2.get_anagrams("betroth")
    self.assertEqual(r, ['betroth'])

    _, r = self.anagrams2.get_anagrams("betrothal")
    self.assertEqual(r, ['betrothal'])

    _, r = self.anagrams2.get_anagrams("betrothed")
    self.assertEqual(r, ['betrothed'])

    _, r = self.anagrams2.get_anagrams("bets")
    self.assertEqual(r, ['best', 'bets'])

    _, r = self.anagrams2.get_anagrams("betsey")
    self.assertEqual(r, ['betsey'])

    _, r = self.anagrams2.get_anagrams("betsy")
    self.assertEqual(r, ['betsy', 'bytes'])

    _, r = self.anagrams2.get_anagrams("bette")
    self.assertEqual(r, ['bette'])

    _, r = self.anagrams2.get_anagrams("better")
    self.assertEqual(r, ['better'])

    _, r = self.anagrams2.get_anagrams("bettered")
    self.assertEqual(r, ['bettered'])

    _, r = self.anagrams2.get_anagrams("bettering")
    self.assertEqual(r, ['bettering'])

    _, r = self.anagrams2.get_anagrams("betterment")
    self.assertEqual(r, ['betterment'])

    _, r = self.anagrams2.get_anagrams("betterments")
    self.assertEqual(r, ['betterments'])

    _, r = self.anagrams2.get_anagrams("betters")
    self.assertEqual(r, ['betters'])

    _, r = self.anagrams2.get_anagrams("betties")
    self.assertEqual(r, ['betties'])

    _, r = self.anagrams2.get_anagrams("betting")
    self.assertEqual(r, ['betting'])

    _, r = self.anagrams2.get_anagrams("betty")
    self.assertEqual(r, ['betty'])

    _, r = self.anagrams2.get_anagrams("between")
    self.assertEqual(r, ['between'])

    _, r = self.anagrams2.get_anagrams("betwixt")
    self.assertEqual(r, ['betwixt'])

    _, r = self.anagrams2.get_anagrams("bevel")
    self.assertEqual(r, ['bevel'])

    _, r = self.anagrams2.get_anagrams("beveled")
    self.assertEqual(r, ['beveled'])

    _, r = self.anagrams2.get_anagrams("beveling")
    self.assertEqual(r, ['beveling'])

    _, r = self.anagrams2.get_anagrams("bevels")
    self.assertEqual(r, ['bevels'])

    _, r = self.anagrams2.get_anagrams("beverage")
    self.assertEqual(r, ['beverage'])

    _, r = self.anagrams2.get_anagrams("beverages")
    self.assertEqual(r, ['beverages'])

    _, r = self.anagrams2.get_anagrams("beverly")
    self.assertEqual(r, ['beverly'])

    _, r = self.anagrams2.get_anagrams("bevy")
    self.assertEqual(r, ['bevy'])

    _, r = self.anagrams2.get_anagrams("bewail")
    self.assertEqual(r, ['bewail'])

    _, r = self.anagrams2.get_anagrams("bewailed")
    self.assertEqual(r, ['bewailed'])

    _, r = self.anagrams2.get_anagrams("bewailing")
    self.assertEqual(r, ['bewailing'])

    _, r = self.anagrams2.get_anagrams("bewails")
    self.assertEqual(r, ['bewails'])

    _, r = self.anagrams2.get_anagrams("beware")
    self.assertEqual(r, ['beware'])

    _, r = self.anagrams2.get_anagrams("bewhiskered")
    self.assertEqual(r, ['bewhiskered'])

    _, r = self.anagrams2.get_anagrams("bewilder")
    self.assertEqual(r, ['bewilder'])

    _, r = self.anagrams2.get_anagrams("bewildered")
    self.assertEqual(r, ['bewildered'])

    _, r = self.anagrams2.get_anagrams("bewildering")
    self.assertEqual(r, ['bewildering'])

    _, r = self.anagrams2.get_anagrams("bewilderingly")
    self.assertEqual(r, ['bewilderingly'])

    _, r = self.anagrams2.get_anagrams("bewilderment")
    self.assertEqual(r, ['bewilderment'])

    _, r = self.anagrams2.get_anagrams("bewilders")
    self.assertEqual(r, ['bewilders'])

    _, r = self.anagrams2.get_anagrams("bewitch")
    self.assertEqual(r, ['bewitch'])

    _, r = self.anagrams2.get_anagrams("bewitched")
    self.assertEqual(r, ['bewitched'])

    _, r = self.anagrams2.get_anagrams("bewitches")
    self.assertEqual(r, ['bewitches'])

    _, r = self.anagrams2.get_anagrams("bewitching")
    self.assertEqual(r, ['bewitching'])

    _, r = self.anagrams2.get_anagrams("beyond")
    self.assertEqual(r, ['beyond'])

    _, r = self.anagrams2.get_anagrams("bhagavad-gita")
    self.assertEqual(r, ['bhagavad-gita'])

    _, r = self.anagrams2.get_anagrams("bhutan")
    self.assertEqual(r, ['bhutan', 'thuban'])

    _, r = self.anagrams2.get_anagrams("bialystok")
    self.assertEqual(r, ['bialystok'])

    _, r = self.anagrams2.get_anagrams("bianco")
    self.assertEqual(r, ['bianco'])

    _, r = self.anagrams2.get_anagrams("biannual")
    self.assertEqual(r, ['biannual'])

    _, r = self.anagrams2.get_anagrams("bias")
    self.assertEqual(r, ['bias'])

    _, r = self.anagrams2.get_anagrams("biased")
    self.assertEqual(r, ['abides', 'biased'])

    _, r = self.anagrams2.get_anagrams("biases")
    self.assertEqual(r, ['biases'])

    _, r = self.anagrams2.get_anagrams("biasing")
    self.assertEqual(r, ['biasing'])

    _, r = self.anagrams2.get_anagrams("bib")
    self.assertEqual(r, ['bib'])

    _, r = self.anagrams2.get_anagrams("bibbed")
    self.assertEqual(r, ['bibbed'])

    _, r = self.anagrams2.get_anagrams("bibbing")
    self.assertEqual(r, ['bibbing'])

    _, r = self.anagrams2.get_anagrams("bible")
    self.assertEqual(r, ['bible'])

    _, r = self.anagrams2.get_anagrams("bibles")
    self.assertEqual(r, ['bibles'])

    _, r = self.anagrams2.get_anagrams("biblical")
    self.assertEqual(r, ['biblical'])

    _, r = self.anagrams2.get_anagrams("biblically")
    self.assertEqual(r, ['biblically'])

    _, r = self.anagrams2.get_anagrams("bibliographic")
    self.assertEqual(r, ['bibliographic'])

    _, r = self.anagrams2.get_anagrams("bibliographical")
    self.assertEqual(r, ['bibliographical'])

    _, r = self.anagrams2.get_anagrams("bibliographies")
    self.assertEqual(r, ['bibliographies'])

    _, r = self.anagrams2.get_anagrams("bibliography")
    self.assertEqual(r, ['bibliography'])

    _, r = self.anagrams2.get_anagrams("bibliophile")
    self.assertEqual(r, ['bibliophile'])

    _, r = self.anagrams2.get_anagrams("bibs")
    self.assertEqual(r, ['bibs'])

    _, r = self.anagrams2.get_anagrams("bicameral")
    self.assertEqual(r, ['bicameral'])

    _, r = self.anagrams2.get_anagrams("bicarbonate")
    self.assertEqual(r, ['bicarbonate'])

    _, r = self.anagrams2.get_anagrams("bicentennial")
    self.assertEqual(r, ['bicentennial'])

    _, r = self.anagrams2.get_anagrams("bicep")
    self.assertEqual(r, ['bicep'])

    _, r = self.anagrams2.get_anagrams("biceps")
    self.assertEqual(r, ['biceps'])

    _, r = self.anagrams2.get_anagrams("bicker")
    self.assertEqual(r, ['bicker'])

    _, r = self.anagrams2.get_anagrams("bickered")
    self.assertEqual(r, ['bickered'])

    _, r = self.anagrams2.get_anagrams("bickering")
    self.assertEqual(r, ['bickering'])

    _, r = self.anagrams2.get_anagrams("bickers")
    self.assertEqual(r, ['bickers'])

    _, r = self.anagrams2.get_anagrams("biconcave")
    self.assertEqual(r, ['biconcave'])

    _, r = self.anagrams2.get_anagrams("biconnected")
    self.assertEqual(r, ['biconnected'])

    _, r = self.anagrams2.get_anagrams("biconvex")
    self.assertEqual(r, ['biconvex'])

    _, r = self.anagrams2.get_anagrams("bicycle")
    self.assertEqual(r, ['bicycle'])

    _, r = self.anagrams2.get_anagrams("bicycled")
    self.assertEqual(r, ['bicycled'])

    _, r = self.anagrams2.get_anagrams("bicycler")
    self.assertEqual(r, ['bicycler'])

    _, r = self.anagrams2.get_anagrams("bicyclers")
    self.assertEqual(r, ['bicyclers'])

    _, r = self.anagrams2.get_anagrams("bicycles")
    self.assertEqual(r, ['bicycles'])

    _, r = self.anagrams2.get_anagrams("bicycling")
    self.assertEqual(r, ['bicycling'])

    _, r = self.anagrams2.get_anagrams("bid")
    self.assertEqual(r, ['bid'])

    _, r = self.anagrams2.get_anagrams("biddable")
    self.assertEqual(r, ['biddable'])

    _, r = self.anagrams2.get_anagrams("bidden")
    self.assertEqual(r, ['bidden'])

    _, r = self.anagrams2.get_anagrams("bidder")
    self.assertEqual(r, ['bidder'])

    _, r = self.anagrams2.get_anagrams("bidders")
    self.assertEqual(r, ['bidders'])

    _, r = self.anagrams2.get_anagrams("biddies")
    self.assertEqual(r, ['biddies'])

    _, r = self.anagrams2.get_anagrams("bidding")
    self.assertEqual(r, ['bidding'])

    _, r = self.anagrams2.get_anagrams("biddle")
    self.assertEqual(r, ['biddle'])

    _, r = self.anagrams2.get_anagrams("biddy")
    self.assertEqual(r, ['biddy'])

    _, r = self.anagrams2.get_anagrams("bide")
    self.assertEqual(r, ['bide'])

    _, r = self.anagrams2.get_anagrams("bidirectional")
    self.assertEqual(r, ['bidirectional'])

    _, r = self.anagrams2.get_anagrams("bids")
    self.assertEqual(r, ['bids'])

    _, r = self.anagrams2.get_anagrams("bien")
    self.assertEqual(r, ['bien'])

    _, r = self.anagrams2.get_anagrams("biennial")
    self.assertEqual(r, ['biennial'])

    _, r = self.anagrams2.get_anagrams("biennium")
    self.assertEqual(r, ['biennium'])

    _, r = self.anagrams2.get_anagrams("bienville")
    self.assertEqual(r, ['bienville'])

    _, r = self.anagrams2.get_anagrams("bier")
    self.assertEqual(r, ['bier', 'brie'])

    _, r = self.anagrams2.get_anagrams("bierce")
    self.assertEqual(r, ['bierce'])

    _, r = self.anagrams2.get_anagrams("bifocal")
    self.assertEqual(r, ['bifocal'])

    _, r = self.anagrams2.get_anagrams("bifocals")
    self.assertEqual(r, ['bifocals'])

    _, r = self.anagrams2.get_anagrams("bifurcate")
    self.assertEqual(r, ['bifurcate'])

    _, r = self.anagrams2.get_anagrams("big")
    self.assertEqual(r, ['big'])

    _, r = self.anagrams2.get_anagrams("bigelow")
    self.assertEqual(r, ['bigelow'])

    _, r = self.anagrams2.get_anagrams("bigger")
    self.assertEqual(r, ['bigger'])

    _, r = self.anagrams2.get_anagrams("biggest")
    self.assertEqual(r, ['biggest'])

    _, r = self.anagrams2.get_anagrams("biggs")
    self.assertEqual(r, ['biggs'])

    _, r = self.anagrams2.get_anagrams("bight")
    self.assertEqual(r, ['bight'])

    _, r = self.anagrams2.get_anagrams("bights")
    self.assertEqual(r, ['bights'])

    _, r = self.anagrams2.get_anagrams("bigness")
    self.assertEqual(r, ['bigness'])

    _, r = self.anagrams2.get_anagrams("bigot")
    self.assertEqual(r, ['bigot'])

    _, r = self.anagrams2.get_anagrams("bigoted")
    self.assertEqual(r, ['bigoted'])

    _, r = self.anagrams2.get_anagrams("bigotry")
    self.assertEqual(r, ['bigotry'])

    _, r = self.anagrams2.get_anagrams("bigots")
    self.assertEqual(r, ['bigots'])

    _, r = self.anagrams2.get_anagrams("biharmonic")
    self.assertEqual(r, ['biharmonic'])

    _, r = self.anagrams2.get_anagrams("bijection")
    self.assertEqual(r, ['bijection'])

    _, r = self.anagrams2.get_anagrams("bijections")
    self.assertEqual(r, ['bijections'])

    _, r = self.anagrams2.get_anagrams("bijective")
    self.assertEqual(r, ['bijective'])

    _, r = self.anagrams2.get_anagrams("bijectively")
    self.assertEqual(r, ['bijectively'])

    _, r = self.anagrams2.get_anagrams("bike")
    self.assertEqual(r, ['bike'])

    _, r = self.anagrams2.get_anagrams("bikes")
    self.assertEqual(r, ['bikes'])

    _, r = self.anagrams2.get_anagrams("biking")
    self.assertEqual(r, ['biking'])

    _, r = self.anagrams2.get_anagrams("bikini")
    self.assertEqual(r, ['bikini'])

    _, r = self.anagrams2.get_anagrams("bikinis")
    self.assertEqual(r, ['bikinis'])

    _, r = self.anagrams2.get_anagrams("bilabial")
    self.assertEqual(r, ['bilabial'])

    _, r = self.anagrams2.get_anagrams("bilateral")
    self.assertEqual(r, ['bilateral'])

    _, r = self.anagrams2.get_anagrams("bilaterally")
    self.assertEqual(r, ['bilaterally'])

    _, r = self.anagrams2.get_anagrams("bilbao")
    self.assertEqual(r, ['bilbao'])

    _, r = self.anagrams2.get_anagrams("bilbo")
    self.assertEqual(r, ['bilbo'])

    _, r = self.anagrams2.get_anagrams("bile")
    self.assertEqual(r, ['bile'])

    _, r = self.anagrams2.get_anagrams("bilge")
    self.assertEqual(r, ['bilge'])

    _, r = self.anagrams2.get_anagrams("bilges")
    self.assertEqual(r, ['bilges'])

    _, r = self.anagrams2.get_anagrams("bilinear")
    self.assertEqual(r, ['bilinear'])

    _, r = self.anagrams2.get_anagrams("bilingual")
    self.assertEqual(r, ['bilingual'])

    _, r = self.anagrams2.get_anagrams("bilk")
    self.assertEqual(r, ['bilk'])

    _, r = self.anagrams2.get_anagrams("bilked")
    self.assertEqual(r, ['bilked'])

    _, r = self.anagrams2.get_anagrams("bilking")
    self.assertEqual(r, ['bilking'])

    _, r = self.anagrams2.get_anagrams("bilks")
    self.assertEqual(r, ['bilks'])

    _, r = self.anagrams2.get_anagrams("bill")
    self.assertEqual(r, ['bill'])

    _, r = self.anagrams2.get_anagrams("billboard")
    self.assertEqual(r, ['billboard'])

    _, r = self.anagrams2.get_anagrams("billboards")
    self.assertEqual(r, ['billboards'])

    _, r = self.anagrams2.get_anagrams("billed")
    self.assertEqual(r, ['billed'])

    _, r = self.anagrams2.get_anagrams("biller")
    self.assertEqual(r, ['biller'])

    _, r = self.anagrams2.get_anagrams("billers")
    self.assertEqual(r, ['billers'])

    _, r = self.anagrams2.get_anagrams("billet")
    self.assertEqual(r, ['billet'])

    _, r = self.anagrams2.get_anagrams("billeted")
    self.assertEqual(r, ['billeted'])

    _, r = self.anagrams2.get_anagrams("billeting")
    self.assertEqual(r, ['billeting'])

    _, r = self.anagrams2.get_anagrams("billets")
    self.assertEqual(r, ['billets'])

    _, r = self.anagrams2.get_anagrams("billiard")
    self.assertEqual(r, ['billiard'])

    _, r = self.anagrams2.get_anagrams("billiards")
    self.assertEqual(r, ['billiards'])

    _, r = self.anagrams2.get_anagrams("billie")
    self.assertEqual(r, ['billie'])

    _, r = self.anagrams2.get_anagrams("billiken")
    self.assertEqual(r, ['billiken'])

    _, r = self.anagrams2.get_anagrams("billikens")
    self.assertEqual(r, ['billikens'])

    _, r = self.anagrams2.get_anagrams("billing")
    self.assertEqual(r, ['billing'])

    _, r = self.anagrams2.get_anagrams("billings")
    self.assertEqual(r, ['billings'])

    _, r = self.anagrams2.get_anagrams("billion")
    self.assertEqual(r, ['billion'])

    _, r = self.anagrams2.get_anagrams("billions")
    self.assertEqual(r, ['billions'])

    _, r = self.anagrams2.get_anagrams("billionth")
    self.assertEqual(r, ['billionth'])

    _, r = self.anagrams2.get_anagrams("billow")
    self.assertEqual(r, ['billow'])

    _, r = self.anagrams2.get_anagrams("billowed")
    self.assertEqual(r, ['billowed'])

    _, r = self.anagrams2.get_anagrams("billows")
    self.assertEqual(r, ['billows'])

    _, r = self.anagrams2.get_anagrams("bills")
    self.assertEqual(r, ['bills'])

    _, r = self.anagrams2.get_anagrams("biltmore")
    self.assertEqual(r, ['biltmore'])

    _, r = self.anagrams2.get_anagrams("bimetallic")
    self.assertEqual(r, ['bimetallic'])

    _, r = self.anagrams2.get_anagrams("bimetallism")
    self.assertEqual(r, ['bimetallism'])

    _, r = self.anagrams2.get_anagrams("bimini")
    self.assertEqual(r, ['bimini'])

    _, r = self.anagrams2.get_anagrams("bimodal")
    self.assertEqual(r, ['bimodal'])

    _, r = self.anagrams2.get_anagrams("bimolecular")
    self.assertEqual(r, ['bimolecular'])

    _, r = self.anagrams2.get_anagrams("bimonthlies")
    self.assertEqual(r, ['bimonthlies'])

    _, r = self.anagrams2.get_anagrams("bimonthly")
    self.assertEqual(r, ['bimonthly'])

    _, r = self.anagrams2.get_anagrams("bin")
    self.assertEqual(r, ['bin', 'ibn'])

    _, r = self.anagrams2.get_anagrams("binaries")
    self.assertEqual(r, ['binaries', 'siberian'])

    _, r = self.anagrams2.get_anagrams("binary")
    self.assertEqual(r, ['binary', 'brainy'])

    _, r = self.anagrams2.get_anagrams("binaural")
    self.assertEqual(r, ['binaural'])

    _, r = self.anagrams2.get_anagrams("bind")
    self.assertEqual(r, ['bind'])

    _, r = self.anagrams2.get_anagrams("binder")
    self.assertEqual(r, ['binder', 'rebind'])

    _, r = self.anagrams2.get_anagrams("binders")
    self.assertEqual(r, ['binders', 'rebinds'])

    _, r = self.anagrams2.get_anagrams("binding")
    self.assertEqual(r, ['binding'])

    _, r = self.anagrams2.get_anagrams("bindings")
    self.assertEqual(r, ['bindings'])

    _, r = self.anagrams2.get_anagrams("binds")
    self.assertEqual(r, ['binds'])

    _, r = self.anagrams2.get_anagrams("bing")
    self.assertEqual(r, ['bing'])

    _, r = self.anagrams2.get_anagrams("binge")
    self.assertEqual(r, ['begin', 'being', 'binge'])

    _, r = self.anagrams2.get_anagrams("binges")
    self.assertEqual(r, ['begins', 'beings', 'binges'])

    _, r = self.anagrams2.get_anagrams("bingham")
    self.assertEqual(r, ['bingham'])

    _, r = self.anagrams2.get_anagrams("binghamton")
    self.assertEqual(r, ['binghamton'])

    _, r = self.anagrams2.get_anagrams("bingo")
    self.assertEqual(r, ['bingo'])

    _, r = self.anagrams2.get_anagrams("bini")
    self.assertEqual(r, ['bini'])

    _, r = self.anagrams2.get_anagrams("binocular")
    self.assertEqual(r, ['binocular'])

    _, r = self.anagrams2.get_anagrams("binoculars")
    self.assertEqual(r, ['binoculars'])

    _, r = self.anagrams2.get_anagrams("binomial")
    self.assertEqual(r, ['binomial'])

    _, r = self.anagrams2.get_anagrams("bins")
    self.assertEqual(r, ['bins'])

    _, r = self.anagrams2.get_anagrams("binuclear")
    self.assertEqual(r, ['binuclear', 'incurable'])

    _, r = self.anagrams2.get_anagrams("biochemical")
    self.assertEqual(r, ['biochemical'])

    _, r = self.anagrams2.get_anagrams("biochemist")
    self.assertEqual(r, ['biochemist'])

    _, r = self.anagrams2.get_anagrams("biochemistry")
    self.assertEqual(r, ['biochemistry'])

    _, r = self.anagrams2.get_anagrams("biofeedback")
    self.assertEqual(r, ['biofeedback'])

    _, r = self.anagrams2.get_anagrams("biographer")
    self.assertEqual(r, ['biographer'])

    _, r = self.anagrams2.get_anagrams("biographers")
    self.assertEqual(r, ['biographers'])

    _, r = self.anagrams2.get_anagrams("biographic")
    self.assertEqual(r, ['biographic'])

    _, r = self.anagrams2.get_anagrams("biographical")
    self.assertEqual(r, ['biographical'])

    _, r = self.anagrams2.get_anagrams("biographically")
    self.assertEqual(r, ['biographically'])

    _, r = self.anagrams2.get_anagrams("biographies")
    self.assertEqual(r, ['biographies'])

    _, r = self.anagrams2.get_anagrams("biography")
    self.assertEqual(r, ['biography'])

    _, r = self.anagrams2.get_anagrams("biological")
    self.assertEqual(r, ['biological'])

    _, r = self.anagrams2.get_anagrams("biologically")
    self.assertEqual(r, ['biologically'])

    _, r = self.anagrams2.get_anagrams("biologist")
    self.assertEqual(r, ['biologist'])

    _, r = self.anagrams2.get_anagrams("biologists")
    self.assertEqual(r, ['biologists'])

    _, r = self.anagrams2.get_anagrams("biology")
    self.assertEqual(r, ['biology'])

    _, r = self.anagrams2.get_anagrams("biomedical")
    self.assertEqual(r, ['biomedical'])

    _, r = self.anagrams2.get_anagrams("biomedicine")
    self.assertEqual(r, ['biomedicine'])

    _, r = self.anagrams2.get_anagrams("biophysical")
    self.assertEqual(r, ['biophysical'])

    _, r = self.anagrams2.get_anagrams("biophysicist")
    self.assertEqual(r, ['biophysicist'])

    _, r = self.anagrams2.get_anagrams("biophysics")
    self.assertEqual(r, ['biophysics'])

    _, r = self.anagrams2.get_anagrams("biopsies")
    self.assertEqual(r, ['biopsies'])

    _, r = self.anagrams2.get_anagrams("biopsy")
    self.assertEqual(r, ['biopsy'])

    _, r = self.anagrams2.get_anagrams("bioscience")
    self.assertEqual(r, ['bioscience'])

    _, r = self.anagrams2.get_anagrams("biosphere")
    self.assertEqual(r, ['biosphere'])

    _, r = self.anagrams2.get_anagrams("biostatistic")
    self.assertEqual(r, ['biostatistic'])

    _, r = self.anagrams2.get_anagrams("biosynthesize")
    self.assertEqual(r, ['biosynthesize'])

    _, r = self.anagrams2.get_anagrams("biota")
    self.assertEqual(r, ['biota'])

    _, r = self.anagrams2.get_anagrams("biotic")
    self.assertEqual(r, ['biotic'])

    _, r = self.anagrams2.get_anagrams("bipartisan")
    self.assertEqual(r, ['bipartisan'])

    _, r = self.anagrams2.get_anagrams("bipartite")
    self.assertEqual(r, ['bipartite'])

    _, r = self.anagrams2.get_anagrams("biped")
    self.assertEqual(r, ['biped'])

    _, r = self.anagrams2.get_anagrams("bipeds")
    self.assertEqual(r, ['bipeds'])

    _, r = self.anagrams2.get_anagrams("biplane")
    self.assertEqual(r, ['biplane', 'plebian'])

    _, r = self.anagrams2.get_anagrams("biplanes")
    self.assertEqual(r, ['biplanes'])

    _, r = self.anagrams2.get_anagrams("bipolar")
    self.assertEqual(r, ['bipolar', 'parboil'])

    _, r = self.anagrams2.get_anagrams("biracial")
    self.assertEqual(r, ['biracial'])

    _, r = self.anagrams2.get_anagrams("birch")
    self.assertEqual(r, ['birch'])

    _, r = self.anagrams2.get_anagrams("birchen")
    self.assertEqual(r, ['birchen'])

    _, r = self.anagrams2.get_anagrams("birches")
    self.assertEqual(r, ['birches'])

    _, r = self.anagrams2.get_anagrams("bird")
    self.assertEqual(r, ['bird'])

    _, r = self.anagrams2.get_anagrams("birdbath")
    self.assertEqual(r, ['birdbath'])

    _, r = self.anagrams2.get_anagrams("birdbaths")
    self.assertEqual(r, ['birdbaths'])

    _, r = self.anagrams2.get_anagrams("birdie")
    self.assertEqual(r, ['birdie'])

    _, r = self.anagrams2.get_anagrams("birdied")
    self.assertEqual(r, ['birdied'])

    _, r = self.anagrams2.get_anagrams("birdies")
    self.assertEqual(r, ['birdies'])

    _, r = self.anagrams2.get_anagrams("birdlike")
    self.assertEqual(r, ['birdlike'])

    _, r = self.anagrams2.get_anagrams("birds")
    self.assertEqual(r, ['birds'])

    _, r = self.anagrams2.get_anagrams("birefringence")
    self.assertEqual(r, ['birefringence'])

    _, r = self.anagrams2.get_anagrams("birefringent")
    self.assertEqual(r, ['birefringent'])

    _, r = self.anagrams2.get_anagrams("birgit")
    self.assertEqual(r, ['birgit'])

    _, r = self.anagrams2.get_anagrams("birmingham")
    self.assertEqual(r, ['birmingham'])

    _, r = self.anagrams2.get_anagrams("birminghamize")
    self.assertEqual(r, ['birminghamize'])

    _, r = self.anagrams2.get_anagrams("birminghamizes")
    self.assertEqual(r, ['birminghamizes'])

    _, r = self.anagrams2.get_anagrams("birth")
    self.assertEqual(r, ['birth'])

    _, r = self.anagrams2.get_anagrams("birthday")
    self.assertEqual(r, ['birthday'])

    _, r = self.anagrams2.get_anagrams("birthdays")
    self.assertEqual(r, ['birthdays'])

    _, r = self.anagrams2.get_anagrams("birthed")
    self.assertEqual(r, ['birthed'])

    _, r = self.anagrams2.get_anagrams("birthplace")
    self.assertEqual(r, ['birthplace'])

    _, r = self.anagrams2.get_anagrams("birthplaces")
    self.assertEqual(r, ['birthplaces'])

    _, r = self.anagrams2.get_anagrams("birthright")
    self.assertEqual(r, ['birthright'])

    _, r = self.anagrams2.get_anagrams("birthrights")
    self.assertEqual(r, ['birthrights'])

    _, r = self.anagrams2.get_anagrams("births")
    self.assertEqual(r, ['births'])

    _, r = self.anagrams2.get_anagrams("biscayne")
    self.assertEqual(r, ['biscayne'])

    _, r = self.anagrams2.get_anagrams("biscuit")
    self.assertEqual(r, ['biscuit'])

    _, r = self.anagrams2.get_anagrams("biscuits")
    self.assertEqual(r, ['biscuits'])

    _, r = self.anagrams2.get_anagrams("bisect")
    self.assertEqual(r, ['bisect'])

    _, r = self.anagrams2.get_anagrams("bisected")
    self.assertEqual(r, ['bisected'])

    _, r = self.anagrams2.get_anagrams("bisecting")
    self.assertEqual(r, ['bisecting'])

    _, r = self.anagrams2.get_anagrams("bisection")
    self.assertEqual(r, ['bisection'])

    _, r = self.anagrams2.get_anagrams("bisections")
    self.assertEqual(r, ['bisections'])

    _, r = self.anagrams2.get_anagrams("bisector")
    self.assertEqual(r, ['bisector'])

    _, r = self.anagrams2.get_anagrams("bisectors")
    self.assertEqual(r, ['bisectors'])

    _, r = self.anagrams2.get_anagrams("bisects")
    self.assertEqual(r, ['bisects'])

    _, r = self.anagrams2.get_anagrams("bishop")
    self.assertEqual(r, ['bishop'])

    _, r = self.anagrams2.get_anagrams("bishops")
    self.assertEqual(r, ['bishops'])

    _, r = self.anagrams2.get_anagrams("bismarck")
    self.assertEqual(r, ['bismarck'])

    _, r = self.anagrams2.get_anagrams("bismark")
    self.assertEqual(r, ['bismark'])

    _, r = self.anagrams2.get_anagrams("bismuth")
    self.assertEqual(r, ['bismuth'])

    _, r = self.anagrams2.get_anagrams("bison")
    self.assertEqual(r, ['bison'])

    _, r = self.anagrams2.get_anagrams("bisons")
    self.assertEqual(r, ['bisons'])

    _, r = self.anagrams2.get_anagrams("bisque")
    self.assertEqual(r, ['bisque'])

    _, r = self.anagrams2.get_anagrams("bisques")
    self.assertEqual(r, ['bisques'])

    _, r = self.anagrams2.get_anagrams("bissau")
    self.assertEqual(r, ['bissau'])

    _, r = self.anagrams2.get_anagrams("bistable")
    self.assertEqual(r, ['bistable'])

    _, r = self.anagrams2.get_anagrams("bistate")
    self.assertEqual(r, ['bistate'])

    _, r = self.anagrams2.get_anagrams("bit")
    self.assertEqual(r, ['bit'])

    _, r = self.anagrams2.get_anagrams("bitch")
    self.assertEqual(r, ['bitch'])

    _, r = self.anagrams2.get_anagrams("bitches")
    self.assertEqual(r, ['bitches'])

    _, r = self.anagrams2.get_anagrams("bite")
    self.assertEqual(r, ['bite'])

    _, r = self.anagrams2.get_anagrams("biter")
    self.assertEqual(r, ['biter', 'tiber', 'tribe'])

    _, r = self.anagrams2.get_anagrams("biters")
    self.assertEqual(r, ['bestir', 'biters', 'tribes'])

    _, r = self.anagrams2.get_anagrams("bites")
    self.assertEqual(r, ['bites'])

    _, r = self.anagrams2.get_anagrams("biting")
    self.assertEqual(r, ['biting'])

    _, r = self.anagrams2.get_anagrams("bitingly")
    self.assertEqual(r, ['bitingly'])

    _, r = self.anagrams2.get_anagrams("bitmap")
    self.assertEqual(r, ['bitmap'])

    _, r = self.anagrams2.get_anagrams("bitnet")
    self.assertEqual(r, ['bitnet', 'bitten'])

    _, r = self.anagrams2.get_anagrams("bits")
    self.assertEqual(r, ['bits'])

    _, r = self.anagrams2.get_anagrams("bitten")
    self.assertEqual(r, ['bitnet', 'bitten'])

    _, r = self.anagrams2.get_anagrams("bitter")
    self.assertEqual(r, ['bitter'])

    _, r = self.anagrams2.get_anagrams("bitterer")
    self.assertEqual(r, ['bitterer'])

    _, r = self.anagrams2.get_anagrams("bitterest")
    self.assertEqual(r, ['bitterest'])

    _, r = self.anagrams2.get_anagrams("bitterly")
    self.assertEqual(r, ['bitterly'])

    _, r = self.anagrams2.get_anagrams("bitterness")
    self.assertEqual(r, ['bitterness'])

    _, r = self.anagrams2.get_anagrams("bitternut")
    self.assertEqual(r, ['bitternut'])

    _, r = self.anagrams2.get_anagrams("bitterroot")
    self.assertEqual(r, ['bitterroot'])

    _, r = self.anagrams2.get_anagrams("bitters")
    self.assertEqual(r, ['bitters'])

    _, r = self.anagrams2.get_anagrams("bittersweet")
    self.assertEqual(r, ['bittersweet'])

    _, r = self.anagrams2.get_anagrams("bitumen")
    self.assertEqual(r, ['bitumen'])

    _, r = self.anagrams2.get_anagrams("bituminous")
    self.assertEqual(r, ['bituminous'])

    _, r = self.anagrams2.get_anagrams("bitwise")
    self.assertEqual(r, ['bitwise'])

    _, r = self.anagrams2.get_anagrams("bivalve")
    self.assertEqual(r, ['bivalve'])

    _, r = self.anagrams2.get_anagrams("bivalves")
    self.assertEqual(r, ['bivalves'])

    _, r = self.anagrams2.get_anagrams("bivariate")
    self.assertEqual(r, ['bivariate'])

    _, r = self.anagrams2.get_anagrams("bivouac")
    self.assertEqual(r, ['bivouac'])

    _, r = self.anagrams2.get_anagrams("bivouacs")
    self.assertEqual(r, ['bivouacs'])

    _, r = self.anagrams2.get_anagrams("biweekly")
    self.assertEqual(r, ['biweekly'])

    _, r = self.anagrams2.get_anagrams("bizarre")
    self.assertEqual(r, ['bizarre', 'brazier'])

    _, r = self.anagrams2.get_anagrams("bizet")
    self.assertEqual(r, ['bizet'])

    _, r = self.anagrams2.get_anagrams("blab")
    self.assertEqual(r, ['blab'])

    _, r = self.anagrams2.get_anagrams("blabbed")
    self.assertEqual(r, ['babbled', 'blabbed'])

    _, r = self.anagrams2.get_anagrams("blabbermouth")
    self.assertEqual(r, ['blabbermouth'])

    _, r = self.anagrams2.get_anagrams("blabbermouths")
    self.assertEqual(r, ['blabbermouths'])

    _, r = self.anagrams2.get_anagrams("blabbing")
    self.assertEqual(r, ['babbling', 'blabbing'])

    _, r = self.anagrams2.get_anagrams("blabs")
    self.assertEqual(r, ['blabs'])

    _, r = self.anagrams2.get_anagrams("black")
    self.assertEqual(r, ['black'])

    _, r = self.anagrams2.get_anagrams("blackberries")
    self.assertEqual(r, ['blackberries'])

    _, r = self.anagrams2.get_anagrams("blackberry")
    self.assertEqual(r, ['blackberry'])

    _, r = self.anagrams2.get_anagrams("blackbird")
    self.assertEqual(r, ['blackbird'])

    _, r = self.anagrams2.get_anagrams("blackbirds")
    self.assertEqual(r, ['blackbirds'])

    _, r = self.anagrams2.get_anagrams("blackboard")
    self.assertEqual(r, ['blackboard'])

    _, r = self.anagrams2.get_anagrams("blackboards")
    self.assertEqual(r, ['blackboards'])

    _, r = self.anagrams2.get_anagrams("blackburn")
    self.assertEqual(r, ['blackburn'])

    _, r = self.anagrams2.get_anagrams("blacked")
    self.assertEqual(r, ['blacked'])

    _, r = self.anagrams2.get_anagrams("blacken")
    self.assertEqual(r, ['blacken'])

    _, r = self.anagrams2.get_anagrams("blackened")
    self.assertEqual(r, ['blackened'])

    _, r = self.anagrams2.get_anagrams("blackening")
    self.assertEqual(r, ['blackening'])

    _, r = self.anagrams2.get_anagrams("blackens")
    self.assertEqual(r, ['blackens'])

    _, r = self.anagrams2.get_anagrams("blacker")
    self.assertEqual(r, ['blacker'])

    _, r = self.anagrams2.get_anagrams("blackest")
    self.assertEqual(r, ['blackest'])

    _, r = self.anagrams2.get_anagrams("blackfeet")
    self.assertEqual(r, ['blackfeet'])

    _, r = self.anagrams2.get_anagrams("blackfoot")
    self.assertEqual(r, ['blackfoot'])

    _, r = self.anagrams2.get_anagrams("blackfoots")
    self.assertEqual(r, ['blackfoots'])

    _, r = self.anagrams2.get_anagrams("blacking")
    self.assertEqual(r, ['blacking'])

    _, r = self.anagrams2.get_anagrams("blackjack")
    self.assertEqual(r, ['blackjack'])

    _, r = self.anagrams2.get_anagrams("blackjacks")
    self.assertEqual(r, ['blackjacks'])

    _, r = self.anagrams2.get_anagrams("blacklist")
    self.assertEqual(r, ['blacklist'])

    _, r = self.anagrams2.get_anagrams("blacklisted")
    self.assertEqual(r, ['blacklisted'])

    _, r = self.anagrams2.get_anagrams("blacklisting")
    self.assertEqual(r, ['blacklisting'])

    _, r = self.anagrams2.get_anagrams("blacklists")
    self.assertEqual(r, ['blacklists'])

    _, r = self.anagrams2.get_anagrams("blackly")
    self.assertEqual(r, ['blackly'])

    _, r = self.anagrams2.get_anagrams("blackmail")
    self.assertEqual(r, ['blackmail'])

    _, r = self.anagrams2.get_anagrams("blackmailed")
    self.assertEqual(r, ['blackmailed'])

    _, r = self.anagrams2.get_anagrams("blackmailer")
    self.assertEqual(r, ['blackmailer'])

    _, r = self.anagrams2.get_anagrams("blackmailers")
    self.assertEqual(r, ['blackmailers'])

    _, r = self.anagrams2.get_anagrams("blackmailing")
    self.assertEqual(r, ['blackmailing'])

    _, r = self.anagrams2.get_anagrams("blackmails")
    self.assertEqual(r, ['blackmails'])

    _, r = self.anagrams2.get_anagrams("blackman")
    self.assertEqual(r, ['blackman'])

    _, r = self.anagrams2.get_anagrams("blackmer")
    self.assertEqual(r, ['blackmer'])

    _, r = self.anagrams2.get_anagrams("blackness")
    self.assertEqual(r, ['blackness'])

    _, r = self.anagrams2.get_anagrams("blackout")
    self.assertEqual(r, ['blackout'])

    _, r = self.anagrams2.get_anagrams("blackouts")
    self.assertEqual(r, ['blackouts'])

    _, r = self.anagrams2.get_anagrams("blacks")
    self.assertEqual(r, ['blacks'])

    _, r = self.anagrams2.get_anagrams("blacksmith")
    self.assertEqual(r, ['blacksmith'])

    _, r = self.anagrams2.get_anagrams("blacksmiths")
    self.assertEqual(r, ['blacksmiths'])

    _, r = self.anagrams2.get_anagrams("blackstone")
    self.assertEqual(r, ['blackstone'])

    _, r = self.anagrams2.get_anagrams("blackwell")
    self.assertEqual(r, ['blackwell'])

    _, r = self.anagrams2.get_anagrams("blackwells")
    self.assertEqual(r, ['blackwells'])

    _, r = self.anagrams2.get_anagrams("bladder")
    self.assertEqual(r, ['bladder'])

    _, r = self.anagrams2.get_anagrams("bladders")
    self.assertEqual(r, ['bladders'])

    _, r = self.anagrams2.get_anagrams("blade")
    self.assertEqual(r, ['blade'])

    _, r = self.anagrams2.get_anagrams("blades")
    self.assertEqual(r, ['blades'])

    _, r = self.anagrams2.get_anagrams("blaine")
    self.assertEqual(r, ['blaine'])

    _, r = self.anagrams2.get_anagrams("blair")
    self.assertEqual(r, ['blair'])

    _, r = self.anagrams2.get_anagrams("blake")
    self.assertEqual(r, ['blake', 'bleak'])

    _, r = self.anagrams2.get_anagrams("blakey")
    self.assertEqual(r, ['blakey'])

    _, r = self.anagrams2.get_anagrams("blamable")
    self.assertEqual(r, ['blamable'])

    _, r = self.anagrams2.get_anagrams("blame")
    self.assertEqual(r, ['amble', 'blame', 'mabel'])

    _, r = self.anagrams2.get_anagrams("blamed")
    self.assertEqual(r, ['ambled', 'bedlam', 'blamed'])

    _, r = self.anagrams2.get_anagrams("blameless")
    self.assertEqual(r, ['blameless'])

    _, r = self.anagrams2.get_anagrams("blamelessness")
    self.assertEqual(r, ['blamelessness'])

    _, r = self.anagrams2.get_anagrams("blamer")
    self.assertEqual(r, ['ambler', 'blamer', 'marble', 'ramble'])

    _, r = self.anagrams2.get_anagrams("blamers")
    self.assertEqual(r, ['blamers', 'marbles', 'rambles'])

    _, r = self.anagrams2.get_anagrams("blames")
    self.assertEqual(r, ['ambles', 'blames'])

    _, r = self.anagrams2.get_anagrams("blameworthy")
    self.assertEqual(r, ['blameworthy'])

    _, r = self.anagrams2.get_anagrams("blaming")
    self.assertEqual(r, ['ambling', 'blaming'])

    _, r = self.anagrams2.get_anagrams("blanch")
    self.assertEqual(r, ['blanch'])

    _, r = self.anagrams2.get_anagrams("blanchard")
    self.assertEqual(r, ['blanchard'])

    _, r = self.anagrams2.get_anagrams("blanche")
    self.assertEqual(r, ['blanche'])

    _, r = self.anagrams2.get_anagrams("blanched")
    self.assertEqual(r, ['blanched'])

    _, r = self.anagrams2.get_anagrams("blanches")
    self.assertEqual(r, ['blanches', 'schnabel'])

    _, r = self.anagrams2.get_anagrams("blanching")
    self.assertEqual(r, ['blanching'])

    _, r = self.anagrams2.get_anagrams("bland")
    self.assertEqual(r, ['bland'])

    _, r = self.anagrams2.get_anagrams("blandly")
    self.assertEqual(r, ['blandly'])

    _, r = self.anagrams2.get_anagrams("blandness")
    self.assertEqual(r, ['blandness'])

    _, r = self.anagrams2.get_anagrams("blank")
    self.assertEqual(r, ['blank'])

    _, r = self.anagrams2.get_anagrams("blanked")
    self.assertEqual(r, ['blanked'])

    _, r = self.anagrams2.get_anagrams("blanker")
    self.assertEqual(r, ['blanker'])

    _, r = self.anagrams2.get_anagrams("blankest")
    self.assertEqual(r, ['blankest', 'blankets'])

    _, r = self.anagrams2.get_anagrams("blanket")
    self.assertEqual(r, ['blanket'])

    _, r = self.anagrams2.get_anagrams("blanketed")
    self.assertEqual(r, ['blanketed'])

    _, r = self.anagrams2.get_anagrams("blanketer")
    self.assertEqual(r, ['blanketer'])

    _, r = self.anagrams2.get_anagrams("blanketers")
    self.assertEqual(r, ['blanketers'])

    _, r = self.anagrams2.get_anagrams("blanketing")
    self.assertEqual(r, ['blanketing'])

    _, r = self.anagrams2.get_anagrams("blankets")
    self.assertEqual(r, ['blankest', 'blankets'])

    _, r = self.anagrams2.get_anagrams("blanking")
    self.assertEqual(r, ['blanking'])

    _, r = self.anagrams2.get_anagrams("blankly")
    self.assertEqual(r, ['blankly'])

    _, r = self.anagrams2.get_anagrams("blankness")
    self.assertEqual(r, ['blankness'])

    _, r = self.anagrams2.get_anagrams("blanks")
    self.assertEqual(r, ['blanks'])

    _, r = self.anagrams2.get_anagrams("blanton")
    self.assertEqual(r, ['blanton'])

    _, r = self.anagrams2.get_anagrams("blare")
    self.assertEqual(r, ['abler', 'baler', 'blare', 'blear'])

    _, r = self.anagrams2.get_anagrams("blared")
    self.assertEqual(r, ['blared'])

    _, r = self.anagrams2.get_anagrams("blares")
    self.assertEqual(r, ['blares'])

    _, r = self.anagrams2.get_anagrams("blaring")
    self.assertEqual(r, ['blaring'])

    _, r = self.anagrams2.get_anagrams("blase")
    self.assertEqual(r, ['bales', 'basel', 'blase', 'sable'])

    _, r = self.anagrams2.get_anagrams("blaspheme")
    self.assertEqual(r, ['blaspheme'])

    _, r = self.anagrams2.get_anagrams("blasphemed")
    self.assertEqual(r, ['blasphemed'])

    _, r = self.anagrams2.get_anagrams("blasphemes")
    self.assertEqual(r, ['blasphemes'])

    _, r = self.anagrams2.get_anagrams("blasphemies")
    self.assertEqual(r, ['blasphemies'])

    _, r = self.anagrams2.get_anagrams("blaspheming")
    self.assertEqual(r, ['blaspheming'])

    _, r = self.anagrams2.get_anagrams("blasphemous")
    self.assertEqual(r, ['blasphemous'])

    _, r = self.anagrams2.get_anagrams("blasphemously")
    self.assertEqual(r, ['blasphemously'])

    _, r = self.anagrams2.get_anagrams("blasphemousness")
    self.assertEqual(r, ['blasphemousness'])

    _, r = self.anagrams2.get_anagrams("blasphemy")
    self.assertEqual(r, ['blasphemy'])

    _, r = self.anagrams2.get_anagrams("blast")
    self.assertEqual(r, ['blast'])

    _, r = self.anagrams2.get_anagrams("blasted")
    self.assertEqual(r, ['blasted', 'stabled'])

    _, r = self.anagrams2.get_anagrams("blaster")
    self.assertEqual(r, ['blaster', 'stabler'])

    _, r = self.anagrams2.get_anagrams("blasters")
    self.assertEqual(r, ['blasters'])

    _, r = self.anagrams2.get_anagrams("blasting")
    self.assertEqual(r, ['blasting', 'stabling'])

    _, r = self.anagrams2.get_anagrams("blasts")
    self.assertEqual(r, ['blasts'])

    _, r = self.anagrams2.get_anagrams("blatant")
    self.assertEqual(r, ['blatant'])

    _, r = self.anagrams2.get_anagrams("blatantly")
    self.assertEqual(r, ['blatantly'])

    _, r = self.anagrams2.get_anagrams("blatz")
    self.assertEqual(r, ['blatz'])

    _, r = self.anagrams2.get_anagrams("blaze")
    self.assertEqual(r, ['blaze'])

    _, r = self.anagrams2.get_anagrams("blazed")
    self.assertEqual(r, ['blazed'])

    _, r = self.anagrams2.get_anagrams("blazer")
    self.assertEqual(r, ['blazer'])

    _, r = self.anagrams2.get_anagrams("blazers")
    self.assertEqual(r, ['blazers'])

    _, r = self.anagrams2.get_anagrams("blazes")
    self.assertEqual(r, ['blazes'])

    _, r = self.anagrams2.get_anagrams("blazing")
    self.assertEqual(r, ['blazing'])

    _, r = self.anagrams2.get_anagrams("bleach")
    self.assertEqual(r, ['bleach'])

    _, r = self.anagrams2.get_anagrams("bleached")
    self.assertEqual(r, ['bleached'])

    _, r = self.anagrams2.get_anagrams("bleacher")
    self.assertEqual(r, ['bleacher'])

    _, r = self.anagrams2.get_anagrams("bleachers")
    self.assertEqual(r, ['bleachers'])

    _, r = self.anagrams2.get_anagrams("bleaches")
    self.assertEqual(r, ['bleaches'])

    _, r = self.anagrams2.get_anagrams("bleaching")
    self.assertEqual(r, ['bleaching'])

    _, r = self.anagrams2.get_anagrams("bleak")
    self.assertEqual(r, ['blake', 'bleak'])

    _, r = self.anagrams2.get_anagrams("bleaker")
    self.assertEqual(r, ['bleaker'])

    _, r = self.anagrams2.get_anagrams("bleakly")
    self.assertEqual(r, ['bleakly'])

    _, r = self.anagrams2.get_anagrams("bleakness")
    self.assertEqual(r, ['bleakness'])

    _, r = self.anagrams2.get_anagrams("blear")
    self.assertEqual(r, ['abler', 'baler', 'blare', 'blear'])

    _, r = self.anagrams2.get_anagrams("bleary")
    self.assertEqual(r, ['barely', 'barley', 'bleary'])

    _, r = self.anagrams2.get_anagrams("bleat")
    self.assertEqual(r, ['bleat', 'table'])

    _, r = self.anagrams2.get_anagrams("bleating")
    self.assertEqual(r, ['bleating', 'tangible'])

    _, r = self.anagrams2.get_anagrams("bleats")
    self.assertEqual(r, ['ablest', 'bleats', 'stable', 'tables'])

    _, r = self.anagrams2.get_anagrams("bled")
    self.assertEqual(r, ['bled'])

    _, r = self.anagrams2.get_anagrams("bleed")
    self.assertEqual(r, ['bleed'])

    _, r = self.anagrams2.get_anagrams("bleeder")
    self.assertEqual(r, ['bleeder'])

    _, r = self.anagrams2.get_anagrams("bleeding")
    self.assertEqual(r, ['bleeding'])

    _, r = self.anagrams2.get_anagrams("bleedings")
    self.assertEqual(r, ['bleedings'])

    _, r = self.anagrams2.get_anagrams("bleeds")
    self.assertEqual(r, ['bleeds'])

    _, r = self.anagrams2.get_anagrams("bleeker")
    self.assertEqual(r, ['bleeker'])

    _, r = self.anagrams2.get_anagrams("blemish")
    self.assertEqual(r, ['blemish'])

    _, r = self.anagrams2.get_anagrams("blemishes")
    self.assertEqual(r, ['blemishes'])

    _, r = self.anagrams2.get_anagrams("blend")
    self.assertEqual(r, ['blend'])

    _, r = self.anagrams2.get_anagrams("blended")
    self.assertEqual(r, ['blended'])

    _, r = self.anagrams2.get_anagrams("blender")
    self.assertEqual(r, ['blender'])

    _, r = self.anagrams2.get_anagrams("blending")
    self.assertEqual(r, ['blending'])

    _, r = self.anagrams2.get_anagrams("blends")
    self.assertEqual(r, ['blends'])

    _, r = self.anagrams2.get_anagrams("blenheim")
    self.assertEqual(r, ['blenheim'])

    _, r = self.anagrams2.get_anagrams("bless")
    self.assertEqual(r, ['bless'])

    _, r = self.anagrams2.get_anagrams("blessed")
    self.assertEqual(r, ['blessed'])

    _, r = self.anagrams2.get_anagrams("blessing")
    self.assertEqual(r, ['blessing'])

    _, r = self.anagrams2.get_anagrams("blessings")
    self.assertEqual(r, ['blessings'])

    _, r = self.anagrams2.get_anagrams("blew")
    self.assertEqual(r, ['blew'])

    _, r = self.anagrams2.get_anagrams("blight")
    self.assertEqual(r, ['blight'])

    _, r = self.anagrams2.get_anagrams("blighted")
    self.assertEqual(r, ['blighted'])

    _, r = self.anagrams2.get_anagrams("blimp")
    self.assertEqual(r, ['blimp'])

    _, r = self.anagrams2.get_anagrams("blimps")
    self.assertEqual(r, ['blimps'])

    _, r = self.anagrams2.get_anagrams("blind")
    self.assertEqual(r, ['blind'])

    _, r = self.anagrams2.get_anagrams("blinded")
    self.assertEqual(r, ['blinded'])

    _, r = self.anagrams2.get_anagrams("blinder")
    self.assertEqual(r, ['blinder', 'brindle'])

    _, r = self.anagrams2.get_anagrams("blinders")
    self.assertEqual(r, ['blinders'])

    _, r = self.anagrams2.get_anagrams("blindfold")
    self.assertEqual(r, ['blindfold'])

    _, r = self.anagrams2.get_anagrams("blindfolded")
    self.assertEqual(r, ['blindfolded'])

    _, r = self.anagrams2.get_anagrams("blindfolding")
    self.assertEqual(r, ['blindfolding'])

    _, r = self.anagrams2.get_anagrams("blindfolds")
    self.assertEqual(r, ['blindfolds'])

    _, r = self.anagrams2.get_anagrams("blinding")
    self.assertEqual(r, ['blinding'])

    _, r = self.anagrams2.get_anagrams("blindingly")
    self.assertEqual(r, ['blindingly'])

    _, r = self.anagrams2.get_anagrams("blindly")
    self.assertEqual(r, ['blindly'])

    _, r = self.anagrams2.get_anagrams("blindness")
    self.assertEqual(r, ['blindness'])

    _, r = self.anagrams2.get_anagrams("blinds")
    self.assertEqual(r, ['blinds'])

    _, r = self.anagrams2.get_anagrams("blink")
    self.assertEqual(r, ['blink'])

    _, r = self.anagrams2.get_anagrams("blinked")
    self.assertEqual(r, ['blinked'])

    _, r = self.anagrams2.get_anagrams("blinker")
    self.assertEqual(r, ['blinker'])

    _, r = self.anagrams2.get_anagrams("blinkers")
    self.assertEqual(r, ['blinkers'])

    _, r = self.anagrams2.get_anagrams("blinking")
    self.assertEqual(r, ['blinking'])

    _, r = self.anagrams2.get_anagrams("blinks")
    self.assertEqual(r, ['blinks'])

    _, r = self.anagrams2.get_anagrams("blinn")
    self.assertEqual(r, ['blinn'])

    _, r = self.anagrams2.get_anagrams("blip")
    self.assertEqual(r, ['blip'])

    _, r = self.anagrams2.get_anagrams("blips")
    self.assertEqual(r, ['blips'])

    _, r = self.anagrams2.get_anagrams("bliss")
    self.assertEqual(r, ['bliss'])

    _, r = self.anagrams2.get_anagrams("blissful")
    self.assertEqual(r, ['blissful'])

    _, r = self.anagrams2.get_anagrams("blissfully")
    self.assertEqual(r, ['blissfully'])

    _, r = self.anagrams2.get_anagrams("blister")
    self.assertEqual(r, ['blister', 'bristle'])

    _, r = self.anagrams2.get_anagrams("blistered")
    self.assertEqual(r, ['blistered'])

    _, r = self.anagrams2.get_anagrams("blistering")
    self.assertEqual(r, ['blistering'])

    _, r = self.anagrams2.get_anagrams("blisters")
    self.assertEqual(r, ['blisters', 'bristles'])

    _, r = self.anagrams2.get_anagrams("blithe")
    self.assertEqual(r, ['blithe'])

    _, r = self.anagrams2.get_anagrams("blithely")
    self.assertEqual(r, ['blithely'])

    _, r = self.anagrams2.get_anagrams("blitz")
    self.assertEqual(r, ['blitz'])

    _, r = self.anagrams2.get_anagrams("blitzes")
    self.assertEqual(r, ['blitzes'])

    _, r = self.anagrams2.get_anagrams("blitzkrieg")
    self.assertEqual(r, ['blitzkrieg'])

    _, r = self.anagrams2.get_anagrams("blizzard")
    self.assertEqual(r, ['blizzard'])

    _, r = self.anagrams2.get_anagrams("blizzards")
    self.assertEqual(r, ['blizzards'])

    _, r = self.anagrams2.get_anagrams("bloat")
    self.assertEqual(r, ['bloat'])

    _, r = self.anagrams2.get_anagrams("bloated")
    self.assertEqual(r, ['bloated'])

    _, r = self.anagrams2.get_anagrams("bloater")
    self.assertEqual(r, ['alberto', 'bloater', 'latrobe'])

    _, r = self.anagrams2.get_anagrams("bloating")
    self.assertEqual(r, ['bloating'])

    _, r = self.anagrams2.get_anagrams("bloats")
    self.assertEqual(r, ['bloats'])

    _, r = self.anagrams2.get_anagrams("blob")
    self.assertEqual(r, ['blob'])

    _, r = self.anagrams2.get_anagrams("blobs")
    self.assertEqual(r, ['blobs'])

    _, r = self.anagrams2.get_anagrams("bloc")
    self.assertEqual(r, ['bloc'])

    _, r = self.anagrams2.get_anagrams("bloch")
    self.assertEqual(r, ['bloch'])

    _, r = self.anagrams2.get_anagrams("block")
    self.assertEqual(r, ['block'])

    _, r = self.anagrams2.get_anagrams("blockade")
    self.assertEqual(r, ['blockade'])

    _, r = self.anagrams2.get_anagrams("blockaded")
    self.assertEqual(r, ['blockaded'])

    _, r = self.anagrams2.get_anagrams("blockades")
    self.assertEqual(r, ['blockades'])

    _, r = self.anagrams2.get_anagrams("blockading")
    self.assertEqual(r, ['blockading'])

    _, r = self.anagrams2.get_anagrams("blockage")
    self.assertEqual(r, ['blockage'])

    _, r = self.anagrams2.get_anagrams("blockages")
    self.assertEqual(r, ['blockages'])

    _, r = self.anagrams2.get_anagrams("blocked")
    self.assertEqual(r, ['blocked'])

    _, r = self.anagrams2.get_anagrams("blocker")
    self.assertEqual(r, ['blocker'])

    _, r = self.anagrams2.get_anagrams("blockers")
    self.assertEqual(r, ['blockers'])

    _, r = self.anagrams2.get_anagrams("blockhouse")
    self.assertEqual(r, ['blockhouse'])

    _, r = self.anagrams2.get_anagrams("blockhouses")
    self.assertEqual(r, ['blockhouses'])

    _, r = self.anagrams2.get_anagrams("blocking")
    self.assertEqual(r, ['blocking'])

    _, r = self.anagrams2.get_anagrams("blocks")
    self.assertEqual(r, ['blocks'])

    _, r = self.anagrams2.get_anagrams("blocs")
    self.assertEqual(r, ['blocs'])

    _, r = self.anagrams2.get_anagrams("bloke")
    self.assertEqual(r, ['bloke'])

    _, r = self.anagrams2.get_anagrams("blokes")
    self.assertEqual(r, ['blokes'])

    _, r = self.anagrams2.get_anagrams("blomberg")
    self.assertEqual(r, ['blomberg'])

    _, r = self.anagrams2.get_anagrams("blomquist")
    self.assertEqual(r, ['blomquist'])

    _, r = self.anagrams2.get_anagrams("blond")
    self.assertEqual(r, ['blond'])

    _, r = self.anagrams2.get_anagrams("blonde")
    self.assertEqual(r, ['blonde'])

    _, r = self.anagrams2.get_anagrams("blondes")
    self.assertEqual(r, ['blondes'])

    _, r = self.anagrams2.get_anagrams("blonds")
    self.assertEqual(r, ['blonds'])

    _, r = self.anagrams2.get_anagrams("blood")
    self.assertEqual(r, ['blood'])

    _, r = self.anagrams2.get_anagrams("bloodbath")
    self.assertEqual(r, ['bloodbath'])

    _, r = self.anagrams2.get_anagrams("blooded")
    self.assertEqual(r, ['blooded'])

    _, r = self.anagrams2.get_anagrams("bloodhound")
    self.assertEqual(r, ['bloodhound'])

    _, r = self.anagrams2.get_anagrams("bloodhounds")
    self.assertEqual(r, ['bloodhounds'])

    _, r = self.anagrams2.get_anagrams("bloodied")
    self.assertEqual(r, ['bloodied'])

    _, r = self.anagrams2.get_anagrams("bloodiest")
    self.assertEqual(r, ['bloodiest'])

    _, r = self.anagrams2.get_anagrams("bloodless")
    self.assertEqual(r, ['bloodless'])

    _, r = self.anagrams2.get_anagrams("bloods")
    self.assertEqual(r, ['bloods'])

    _, r = self.anagrams2.get_anagrams("bloodshed")
    self.assertEqual(r, ['bloodshed'])

    _, r = self.anagrams2.get_anagrams("bloodshot")
    self.assertEqual(r, ['bloodshot'])

    _, r = self.anagrams2.get_anagrams("bloodstain")
    self.assertEqual(r, ['bloodstain'])

    _, r = self.anagrams2.get_anagrams("bloodstained")
    self.assertEqual(r, ['bloodstained'])

    _, r = self.anagrams2.get_anagrams("bloodstains")
    self.assertEqual(r, ['bloodstains'])

    _, r = self.anagrams2.get_anagrams("bloodstream")
    self.assertEqual(r, ['bloodstream'])

    _, r = self.anagrams2.get_anagrams("bloody")
    self.assertEqual(r, ['bloody'])

    _, r = self.anagrams2.get_anagrams("bloom")
    self.assertEqual(r, ['bloom'])

    _, r = self.anagrams2.get_anagrams("bloomed")
    self.assertEqual(r, ['bloomed'])

    _, r = self.anagrams2.get_anagrams("bloomers")
    self.assertEqual(r, ['bloomers'])

    _, r = self.anagrams2.get_anagrams("bloomfield")
    self.assertEqual(r, ['bloomfield'])

    _, r = self.anagrams2.get_anagrams("blooming")
    self.assertEqual(r, ['blooming'])

    _, r = self.anagrams2.get_anagrams("bloomington")
    self.assertEqual(r, ['bloomington'])

    _, r = self.anagrams2.get_anagrams("blooms")
    self.assertEqual(r, ['blooms'])

    _, r = self.anagrams2.get_anagrams("blooper")
    self.assertEqual(r, ['blooper'])

    _, r = self.anagrams2.get_anagrams("blossom")
    self.assertEqual(r, ['blossom'])

    _, r = self.anagrams2.get_anagrams("blossomed")
    self.assertEqual(r, ['blossomed'])

    _, r = self.anagrams2.get_anagrams("blossoms")
    self.assertEqual(r, ['blossoms'])

    _, r = self.anagrams2.get_anagrams("blot")
    self.assertEqual(r, ['blot', 'bolt'])

    _, r = self.anagrams2.get_anagrams("blots")
    self.assertEqual(r, ['blots', 'bolts'])

    _, r = self.anagrams2.get_anagrams("blotted")
    self.assertEqual(r, ['blotted', 'bottled'])

    _, r = self.anagrams2.get_anagrams("blotting")
    self.assertEqual(r, ['blotting', 'bottling'])

    _, r = self.anagrams2.get_anagrams("blouse")
    self.assertEqual(r, ['blouse'])

    _, r = self.anagrams2.get_anagrams("blouses")
    self.assertEqual(r, ['blouses'])

    _, r = self.anagrams2.get_anagrams("blow")
    self.assertEqual(r, ['blow', 'bowl'])

    _, r = self.anagrams2.get_anagrams("blower")
    self.assertEqual(r, ['blower', 'bowler'])

    _, r = self.anagrams2.get_anagrams("blowers")
    self.assertEqual(r, ['blowers', 'bowlers'])

    _, r = self.anagrams2.get_anagrams("blowfish")
    self.assertEqual(r, ['blowfish'])

    _, r = self.anagrams2.get_anagrams("blowing")
    self.assertEqual(r, ['blowing', 'bowling'])

    _, r = self.anagrams2.get_anagrams("blown")
    self.assertEqual(r, ['blown'])

    _, r = self.anagrams2.get_anagrams("blowout")
    self.assertEqual(r, ['blowout'])

    _, r = self.anagrams2.get_anagrams("blows")
    self.assertEqual(r, ['blows', 'bowls'])

    _, r = self.anagrams2.get_anagrams("blowup")
    self.assertEqual(r, ['blowup'])

    _, r = self.anagrams2.get_anagrams("blubber")
    self.assertEqual(r, ['blubber'])

    _, r = self.anagrams2.get_anagrams("bludgeon")
    self.assertEqual(r, ['bludgeon'])

    _, r = self.anagrams2.get_anagrams("bludgeoned")
    self.assertEqual(r, ['bludgeoned'])

    _, r = self.anagrams2.get_anagrams("bludgeoning")
    self.assertEqual(r, ['bludgeoning'])

    _, r = self.anagrams2.get_anagrams("bludgeons")
    self.assertEqual(r, ['bludgeons'])

    _, r = self.anagrams2.get_anagrams("blue")
    self.assertEqual(r, ['blue'])

    _, r = self.anagrams2.get_anagrams("blueberries")
    self.assertEqual(r, ['blueberries'])

    _, r = self.anagrams2.get_anagrams("blueberry")
    self.assertEqual(r, ['blueberry'])

    _, r = self.anagrams2.get_anagrams("bluebird")
    self.assertEqual(r, ['bluebird'])

    _, r = self.anagrams2.get_anagrams("bluebirds")
    self.assertEqual(r, ['bluebirds'])

    _, r = self.anagrams2.get_anagrams("bluebonnet")
    self.assertEqual(r, ['bluebonnet'])

    _, r = self.anagrams2.get_anagrams("bluebonnets")
    self.assertEqual(r, ['bluebonnets'])

    _, r = self.anagrams2.get_anagrams("bluefish")
    self.assertEqual(r, ['bluefish'])

    _, r = self.anagrams2.get_anagrams("blueness")
    self.assertEqual(r, ['blueness'])

    _, r = self.anagrams2.get_anagrams("blueprint")
    self.assertEqual(r, ['blueprint'])

    _, r = self.anagrams2.get_anagrams("blueprints")
    self.assertEqual(r, ['blueprints'])

    _, r = self.anagrams2.get_anagrams("bluer")
    self.assertEqual(r, ['bluer', 'ruble'])

    _, r = self.anagrams2.get_anagrams("blues")
    self.assertEqual(r, ['blues'])

    _, r = self.anagrams2.get_anagrams("bluest")
    self.assertEqual(r, ['bluest', 'bustle', 'subtle'])

    _, r = self.anagrams2.get_anagrams("bluestocking")
    self.assertEqual(r, ['bluestocking'])

    _, r = self.anagrams2.get_anagrams("bluff")
    self.assertEqual(r, ['bluff'])

    _, r = self.anagrams2.get_anagrams("bluffing")
    self.assertEqual(r, ['bluffing'])

    _, r = self.anagrams2.get_anagrams("bluffs")
    self.assertEqual(r, ['bluffs'])

    _, r = self.anagrams2.get_anagrams("bluing")
    self.assertEqual(r, ['bluing'])

    _, r = self.anagrams2.get_anagrams("bluish")
    self.assertEqual(r, ['bluish'])

    _, r = self.anagrams2.get_anagrams("blum")
    self.assertEqual(r, ['blum'])

    _, r = self.anagrams2.get_anagrams("blumenthal")
    self.assertEqual(r, ['blumenthal'])

    _, r = self.anagrams2.get_anagrams("blunder")
    self.assertEqual(r, ['blunder'])

    _, r = self.anagrams2.get_anagrams("blunderbuss")
    self.assertEqual(r, ['blunderbuss'])

    _, r = self.anagrams2.get_anagrams("blundered")
    self.assertEqual(r, ['blundered'])

    _, r = self.anagrams2.get_anagrams("blundering")
    self.assertEqual(r, ['blundering'])

    _, r = self.anagrams2.get_anagrams("blunderings")
    self.assertEqual(r, ['blunderings'])

    _, r = self.anagrams2.get_anagrams("blunders")
    self.assertEqual(r, ['blunders'])

    _, r = self.anagrams2.get_anagrams("blunt")
    self.assertEqual(r, ['blunt'])

    _, r = self.anagrams2.get_anagrams("blunted")
    self.assertEqual(r, ['blunted'])

    _, r = self.anagrams2.get_anagrams("blunter")
    self.assertEqual(r, ['blunter'])

    _, r = self.anagrams2.get_anagrams("bluntest")
    self.assertEqual(r, ['bluntest'])

    _, r = self.anagrams2.get_anagrams("blunting")
    self.assertEqual(r, ['blunting'])

    _, r = self.anagrams2.get_anagrams("bluntly")
    self.assertEqual(r, ['bluntly'])

    _, r = self.anagrams2.get_anagrams("bluntness")
    self.assertEqual(r, ['bluntness'])

    _, r = self.anagrams2.get_anagrams("blunts")
    self.assertEqual(r, ['blunts'])

    _, r = self.anagrams2.get_anagrams("blur")
    self.assertEqual(r, ['blur', 'burl'])

    _, r = self.anagrams2.get_anagrams("blurb")
    self.assertEqual(r, ['blurb'])

    _, r = self.anagrams2.get_anagrams("blurred")
    self.assertEqual(r, ['blurred'])

    _, r = self.anagrams2.get_anagrams("blurring")
    self.assertEqual(r, ['blurring'])

    _, r = self.anagrams2.get_anagrams("blurry")
    self.assertEqual(r, ['blurry'])

    _, r = self.anagrams2.get_anagrams("blurs")
    self.assertEqual(r, ['blurs'])

    _, r = self.anagrams2.get_anagrams("blurt")
    self.assertEqual(r, ['blurt'])

    _, r = self.anagrams2.get_anagrams("blurted")
    self.assertEqual(r, ['blurted'])

    _, r = self.anagrams2.get_anagrams("blurting")
    self.assertEqual(r, ['blurting'])

    _, r = self.anagrams2.get_anagrams("blurts")
    self.assertEqual(r, ['blurts'])

    _, r = self.anagrams2.get_anagrams("blush")
    self.assertEqual(r, ['blush'])

    _, r = self.anagrams2.get_anagrams("blushed")
    self.assertEqual(r, ['blushed'])

    _, r = self.anagrams2.get_anagrams("blushes")
    self.assertEqual(r, ['blushes', 'bushels'])

    _, r = self.anagrams2.get_anagrams("blushing")
    self.assertEqual(r, ['blushing'])

    _, r = self.anagrams2.get_anagrams("bluster")
    self.assertEqual(r, ['bluster', 'butlers', 'subtler'])

    _, r = self.anagrams2.get_anagrams("blustered")
    self.assertEqual(r, ['blustered'])

    _, r = self.anagrams2.get_anagrams("blustering")
    self.assertEqual(r, ['blustering'])

    _, r = self.anagrams2.get_anagrams("blusters")
    self.assertEqual(r, ['blusters'])

    _, r = self.anagrams2.get_anagrams("blustery")
    self.assertEqual(r, ['blustery'])

    _, r = self.anagrams2.get_anagrams("blythe")
    self.assertEqual(r, ['blythe'])

    _, r = self.anagrams2.get_anagrams("boa")
    self.assertEqual(r, ['abo', 'boa'])

    _, r = self.anagrams2.get_anagrams("boar")
    self.assertEqual(r, ['boar'])

    _, r = self.anagrams2.get_anagrams("board")
    self.assertEqual(r, ['board', 'broad'])

    _, r = self.anagrams2.get_anagrams("boarded")
    self.assertEqual(r, ['boarded', 'roadbed'])

    _, r = self.anagrams2.get_anagrams("boarder")
    self.assertEqual(r, ['boarder', 'broader'])

    _, r = self.anagrams2.get_anagrams("boarders")
    self.assertEqual(r, ['boarders'])

    _, r = self.anagrams2.get_anagrams("boarding")
    self.assertEqual(r, ['boarding'])

    _, r = self.anagrams2.get_anagrams("boardinghouse")
    self.assertEqual(r, ['boardinghouse'])

    _, r = self.anagrams2.get_anagrams("boardinghouses")
    self.assertEqual(r, ['boardinghouses'])

    _, r = self.anagrams2.get_anagrams("boards")
    self.assertEqual(r, ['adsorb', 'boards'])

    _, r = self.anagrams2.get_anagrams("boarsh")
    self.assertEqual(r, ['abhors', 'boarsh'])

    _, r = self.anagrams2.get_anagrams("boast")
    self.assertEqual(r, ['boast', 'boats'])

    _, r = self.anagrams2.get_anagrams("boasted")
    self.assertEqual(r, ['boasted'])

    _, r = self.anagrams2.get_anagrams("boaster")
    self.assertEqual(r, ['boaster', 'boaters', 'borates'])

    _, r = self.anagrams2.get_anagrams("boasters")
    self.assertEqual(r, ['boasters'])

    _, r = self.anagrams2.get_anagrams("boastful")
    self.assertEqual(r, ['boastful'])

    _, r = self.anagrams2.get_anagrams("boastfully")
    self.assertEqual(r, ['boastfully'])

    _, r = self.anagrams2.get_anagrams("boasting")
    self.assertEqual(r, ['boasting'])

    _, r = self.anagrams2.get_anagrams("boastings")
    self.assertEqual(r, ['boastings'])

    _, r = self.anagrams2.get_anagrams("boasts")
    self.assertEqual(r, ['boasts'])

    _, r = self.anagrams2.get_anagrams("boat")
    self.assertEqual(r, ['boat'])

    _, r = self.anagrams2.get_anagrams("boater")
    self.assertEqual(r, ['boater', 'borate'])

    _, r = self.anagrams2.get_anagrams("boaters")
    self.assertEqual(r, ['boaster', 'boaters', 'borates'])

    _, r = self.anagrams2.get_anagrams("boathouse")
    self.assertEqual(r, ['boathouse', 'houseboat'])

    _, r = self.anagrams2.get_anagrams("boathouses")
    self.assertEqual(r, ['boathouses'])

    _, r = self.anagrams2.get_anagrams("boating")
    self.assertEqual(r, ['boating'])

    _, r = self.anagrams2.get_anagrams("boatload")
    self.assertEqual(r, ['boatload'])

    _, r = self.anagrams2.get_anagrams("boatloads")
    self.assertEqual(r, ['boatloads'])

    _, r = self.anagrams2.get_anagrams("boatman")
    self.assertEqual(r, ['boatman'])

    _, r = self.anagrams2.get_anagrams("boatmen")
    self.assertEqual(r, ['boatmen'])

    _, r = self.anagrams2.get_anagrams("boats")
    self.assertEqual(r, ['boast', 'boats'])

    _, r = self.anagrams2.get_anagrams("boatsman")
    self.assertEqual(r, ['boatsman'])

    _, r = self.anagrams2.get_anagrams("boatsmen")
    self.assertEqual(r, ['boatsmen'])

    _, r = self.anagrams2.get_anagrams("boatswain")
    self.assertEqual(r, ['boatswain'])

    _, r = self.anagrams2.get_anagrams("boatswains")
    self.assertEqual(r, ['boatswains'])

    _, r = self.anagrams2.get_anagrams("boatyard")
    self.assertEqual(r, ['boatyard'])

    _, r = self.anagrams2.get_anagrams("boatyards")
    self.assertEqual(r, ['boatyards'])

    _, r = self.anagrams2.get_anagrams("bob")
    self.assertEqual(r, ['bob'])

    _, r = self.anagrams2.get_anagrams("bobbed")
    self.assertEqual(r, ['bobbed'])

    _, r = self.anagrams2.get_anagrams("bobbie")
    self.assertEqual(r, ['bobbie'])

    _, r = self.anagrams2.get_anagrams("bobbin")
    self.assertEqual(r, ['bobbin'])

    _, r = self.anagrams2.get_anagrams("bobbing")
    self.assertEqual(r, ['bobbing'])

    _, r = self.anagrams2.get_anagrams("bobbins")
    self.assertEqual(r, ['bobbins'])

    _, r = self.anagrams2.get_anagrams("bobbsey")
    self.assertEqual(r, ['bobbsey'])

    _, r = self.anagrams2.get_anagrams("bobby")
    self.assertEqual(r, ['bobby'])

    _, r = self.anagrams2.get_anagrams("bobolink")
    self.assertEqual(r, ['bobolink'])

    _, r = self.anagrams2.get_anagrams("bobolinks")
    self.assertEqual(r, ['bobolinks'])

    _, r = self.anagrams2.get_anagrams("bobrow")
    self.assertEqual(r, ['bobrow'])

    _, r = self.anagrams2.get_anagrams("bobs")
    self.assertEqual(r, ['bobs'])

    _, r = self.anagrams2.get_anagrams("bobwhite")
    self.assertEqual(r, ['bobwhite'])

    _, r = self.anagrams2.get_anagrams("bobwhites")
    self.assertEqual(r, ['bobwhites'])

    _, r = self.anagrams2.get_anagrams("boca")
    self.assertEqual(r, ['boca'])

    _, r = self.anagrams2.get_anagrams("bode")
    self.assertEqual(r, ['bode'])

    _, r = self.anagrams2.get_anagrams("bodenheim")
    self.assertEqual(r, ['bodenheim'])

    _, r = self.anagrams2.get_anagrams("bodes")
    self.assertEqual(r, ['bodes'])

    _, r = self.anagrams2.get_anagrams("bodice")
    self.assertEqual(r, ['bodice'])

    _, r = self.anagrams2.get_anagrams("bodied")
    self.assertEqual(r, ['bodied'])

    _, r = self.anagrams2.get_anagrams("bodies")
    self.assertEqual(r, ['bodies'])

    _, r = self.anagrams2.get_anagrams("bodily")
    self.assertEqual(r, ['bodily'])

    _, r = self.anagrams2.get_anagrams("bodleian")
    self.assertEqual(r, ['bodleian'])

    _, r = self.anagrams2.get_anagrams("body")
    self.assertEqual(r, ['body', 'boyd'])

    _, r = self.anagrams2.get_anagrams("bodybuilder")
    self.assertEqual(r, ['bodybuilder'])

    _, r = self.anagrams2.get_anagrams("bodybuilders")
    self.assertEqual(r, ['bodybuilders'])

    _, r = self.anagrams2.get_anagrams("bodybuilding")
    self.assertEqual(r, ['bodybuilding'])

    _, r = self.anagrams2.get_anagrams("bodyguard")
    self.assertEqual(r, ['bodyguard'])

    _, r = self.anagrams2.get_anagrams("bodyguards")
    self.assertEqual(r, ['bodyguards'])

    _, r = self.anagrams2.get_anagrams("bodyweight")
    self.assertEqual(r, ['bodyweight'])

    _, r = self.anagrams2.get_anagrams("boeing")
    self.assertEqual(r, ['boeing'])

    _, r = self.anagrams2.get_anagrams("boeotia")
    self.assertEqual(r, ['boeotia'])

    _, r = self.anagrams2.get_anagrams("boeotian")
    self.assertEqual(r, ['boeotian'])

    _, r = self.anagrams2.get_anagrams("boer")
    self.assertEqual(r, ['boer', 'bore', 'robe'])

    _, r = self.anagrams2.get_anagrams("boers")
    self.assertEqual(r, ['boers', 'bores', 'robes', 'sober'])

    _, r = self.anagrams2.get_anagrams("bog")
    self.assertEqual(r, ['bog'])

    _, r = self.anagrams2.get_anagrams("bogart")
    self.assertEqual(r, ['bogart'])

    _, r = self.anagrams2.get_anagrams("bogartian")
    self.assertEqual(r, ['bogartian'])

    _, r = self.anagrams2.get_anagrams("bogeymen")
    self.assertEqual(r, ['bogeymen'])

    _, r = self.anagrams2.get_anagrams("bogged")
    self.assertEqual(r, ['bogged'])

    _, r = self.anagrams2.get_anagrams("boggle")
    self.assertEqual(r, ['boggle'])

    _, r = self.anagrams2.get_anagrams("boggled")
    self.assertEqual(r, ['boggled'])

    _, r = self.anagrams2.get_anagrams("boggles")
    self.assertEqual(r, ['boggles'])

    _, r = self.anagrams2.get_anagrams("boggling")
    self.assertEqual(r, ['boggling'])

    _, r = self.anagrams2.get_anagrams("bogota")
    self.assertEqual(r, ['bogota', 'tobago'])

    _, r = self.anagrams2.get_anagrams("bogs")
    self.assertEqual(r, ['bogs'])

    _, r = self.anagrams2.get_anagrams("bogus")
    self.assertEqual(r, ['bogus'])

    _, r = self.anagrams2.get_anagrams("boheme")
    self.assertEqual(r, ['boheme'])

    _, r = self.anagrams2.get_anagrams("bohemia")
    self.assertEqual(r, ['bohemia'])

    _, r = self.anagrams2.get_anagrams("bohemian")
    self.assertEqual(r, ['bohemian'])

    _, r = self.anagrams2.get_anagrams("bohemianism")
    self.assertEqual(r, ['bohemianism'])

    _, r = self.anagrams2.get_anagrams("bohr")
    self.assertEqual(r, ['bohr'])

    _, r = self.anagrams2.get_anagrams("boil")
    self.assertEqual(r, ['boil'])

    _, r = self.anagrams2.get_anagrams("boiled")
    self.assertEqual(r, ['boiled'])

    _, r = self.anagrams2.get_anagrams("boiler")
    self.assertEqual(r, ['boiler'])

    _, r = self.anagrams2.get_anagrams("boilerplate")
    self.assertEqual(r, ['boilerplate'])

    _, r = self.anagrams2.get_anagrams("boilers")
    self.assertEqual(r, ['boilers'])

    _, r = self.anagrams2.get_anagrams("boiling")
    self.assertEqual(r, ['boiling'])

    _, r = self.anagrams2.get_anagrams("boils")
    self.assertEqual(r, ['boils'])

    _, r = self.anagrams2.get_anagrams("bois")
    self.assertEqual(r, ['bois'])

    _, r = self.anagrams2.get_anagrams("boise")
    self.assertEqual(r, ['boise'])

    _, r = self.anagrams2.get_anagrams("boisterous")
    self.assertEqual(r, ['boisterous'])

    _, r = self.anagrams2.get_anagrams("boisterously")
    self.assertEqual(r, ['boisterously'])

    _, r = self.anagrams2.get_anagrams("bold")
    self.assertEqual(r, ['bold'])

    _, r = self.anagrams2.get_anagrams("bolder")
    self.assertEqual(r, ['bolder'])

    _, r = self.anagrams2.get_anagrams("boldest")
    self.assertEqual(r, ['boldest'])

    _, r = self.anagrams2.get_anagrams("boldface")
    self.assertEqual(r, ['boldface'])

    _, r = self.anagrams2.get_anagrams("boldly")
    self.assertEqual(r, ['boldly'])

    _, r = self.anagrams2.get_anagrams("boldness")
    self.assertEqual(r, ['boldness'])

    _, r = self.anagrams2.get_anagrams("bolivia")
    self.assertEqual(r, ['bolivia'])

    _, r = self.anagrams2.get_anagrams("bolivian")
    self.assertEqual(r, ['bolivian'])

    _, r = self.anagrams2.get_anagrams("boll")
    self.assertEqual(r, ['boll'])

    _, r = self.anagrams2.get_anagrams("bologna")
    self.assertEqual(r, ['bologna'])

    _, r = self.anagrams2.get_anagrams("bolshevik")
    self.assertEqual(r, ['bolshevik'])

    _, r = self.anagrams2.get_anagrams("bolsheviks")
    self.assertEqual(r, ['bolsheviks'])

    _, r = self.anagrams2.get_anagrams("bolshevism")
    self.assertEqual(r, ['bolshevism'])

    _, r = self.anagrams2.get_anagrams("bolshevist")
    self.assertEqual(r, ['bolshevist'])

    _, r = self.anagrams2.get_anagrams("bolshevistic")
    self.assertEqual(r, ['bolshevistic'])

    _, r = self.anagrams2.get_anagrams("bolshoi")
    self.assertEqual(r, ['bolshoi'])

    _, r = self.anagrams2.get_anagrams("bolster")
    self.assertEqual(r, ['bolster', 'lobster'])

    _, r = self.anagrams2.get_anagrams("bolstered")
    self.assertEqual(r, ['bolstered'])

    _, r = self.anagrams2.get_anagrams("bolstering")
    self.assertEqual(r, ['bolstering', 'gilbertson'])

    _, r = self.anagrams2.get_anagrams("bolsters")
    self.assertEqual(r, ['bolsters', 'lobsters'])

    _, r = self.anagrams2.get_anagrams("bolt")
    self.assertEqual(r, ['blot', 'bolt'])

    _, r = self.anagrams2.get_anagrams("bolted")
    self.assertEqual(r, ['bolted'])

    _, r = self.anagrams2.get_anagrams("bolting")
    self.assertEqual(r, ['bolting'])

    _, r = self.anagrams2.get_anagrams("bolton")
    self.assertEqual(r, ['bolton'])

    _, r = self.anagrams2.get_anagrams("bolts")
    self.assertEqual(r, ['blots', 'bolts'])

    _, r = self.anagrams2.get_anagrams("boltzmann")
    self.assertEqual(r, ['boltzmann'])

    _, r = self.anagrams2.get_anagrams("bomb")
    self.assertEqual(r, ['bomb'])

    _, r = self.anagrams2.get_anagrams("bombard")
    self.assertEqual(r, ['bombard'])

    _, r = self.anagrams2.get_anagrams("bombarded")
    self.assertEqual(r, ['bombarded'])

    _, r = self.anagrams2.get_anagrams("bombarding")
    self.assertEqual(r, ['bombarding'])

    _, r = self.anagrams2.get_anagrams("bombardment")
    self.assertEqual(r, ['bombardment'])

    _, r = self.anagrams2.get_anagrams("bombards")
    self.assertEqual(r, ['bombards'])

    _, r = self.anagrams2.get_anagrams("bombast")
    self.assertEqual(r, ['bombast'])

    _, r = self.anagrams2.get_anagrams("bombastic")
    self.assertEqual(r, ['bombastic'])

    _, r = self.anagrams2.get_anagrams("bombay")
    self.assertEqual(r, ['bombay'])

    _, r = self.anagrams2.get_anagrams("bombed")
    self.assertEqual(r, ['bombed'])

    _, r = self.anagrams2.get_anagrams("bomber")
    self.assertEqual(r, ['bomber'])

    _, r = self.anagrams2.get_anagrams("bombers")
    self.assertEqual(r, ['bombers'])

    _, r = self.anagrams2.get_anagrams("bombing")
    self.assertEqual(r, ['bombing'])

    _, r = self.anagrams2.get_anagrams("bombings")
    self.assertEqual(r, ['bombings'])

    _, r = self.anagrams2.get_anagrams("bombproof")
    self.assertEqual(r, ['bombproof'])

    _, r = self.anagrams2.get_anagrams("bombs")
    self.assertEqual(r, ['bombs'])

    _, r = self.anagrams2.get_anagrams("bonanza")
    self.assertEqual(r, ['bonanza'])

    _, r = self.anagrams2.get_anagrams("bonanzas")
    self.assertEqual(r, ['bonanzas'])

    _, r = self.anagrams2.get_anagrams("bonaparte")
    self.assertEqual(r, ['bonaparte'])

    _, r = self.anagrams2.get_anagrams("bonaventure")
    self.assertEqual(r, ['bonaventure'])

    _, r = self.anagrams2.get_anagrams("bond")
    self.assertEqual(r, ['bond'])

    _, r = self.anagrams2.get_anagrams("bondage")
    self.assertEqual(r, ['bondage'])

    _, r = self.anagrams2.get_anagrams("bonded")
    self.assertEqual(r, ['bonded'])

    _, r = self.anagrams2.get_anagrams("bonder")
    self.assertEqual(r, ['bonder', 'borden'])

    _, r = self.anagrams2.get_anagrams("bonders")
    self.assertEqual(r, ['bonders'])

    _, r = self.anagrams2.get_anagrams("bonding")
    self.assertEqual(r, ['bonding'])

    _, r = self.anagrams2.get_anagrams("bonds")
    self.assertEqual(r, ['bonds'])

    _, r = self.anagrams2.get_anagrams("bondsman")
    self.assertEqual(r, ['bondsman'])

    _, r = self.anagrams2.get_anagrams("bondsmen")
    self.assertEqual(r, ['bondsmen'])

    _, r = self.anagrams2.get_anagrams("bone")
    self.assertEqual(r, ['bone'])

    _, r = self.anagrams2.get_anagrams("boned")
    self.assertEqual(r, ['boned'])

    _, r = self.anagrams2.get_anagrams("boner")
    self.assertEqual(r, ['boner', 'borne'])

    _, r = self.anagrams2.get_anagrams("boners")
    self.assertEqual(r, ['boners'])

    _, r = self.anagrams2.get_anagrams("bones")
    self.assertEqual(r, ['bones'])

    _, r = self.anagrams2.get_anagrams("bonfire")
    self.assertEqual(r, ['bonfire'])

    _, r = self.anagrams2.get_anagrams("bonfires")
    self.assertEqual(r, ['bonfires'])

    _, r = self.anagrams2.get_anagrams("bong")
    self.assertEqual(r, ['bong'])

    _, r = self.anagrams2.get_anagrams("bonham")
    self.assertEqual(r, ['bonham'])

    _, r = self.anagrams2.get_anagrams("boniface")
    self.assertEqual(r, ['boniface'])

    _, r = self.anagrams2.get_anagrams("boning")
    self.assertEqual(r, ['boning'])

    _, r = self.anagrams2.get_anagrams("bonn")
    self.assertEqual(r, ['bonn'])

    _, r = self.anagrams2.get_anagrams("bonnet")
    self.assertEqual(r, ['benton', 'bonnet'])

    _, r = self.anagrams2.get_anagrams("bonneted")
    self.assertEqual(r, ['bonneted'])

    _, r = self.anagrams2.get_anagrams("bonnets")
    self.assertEqual(r, ['bonnets'])

    _, r = self.anagrams2.get_anagrams("bonneville")
    self.assertEqual(r, ['bonneville'])

    _, r = self.anagrams2.get_anagrams("bonnie")
    self.assertEqual(r, ['bonnie'])

    _, r = self.anagrams2.get_anagrams("bonny")
    self.assertEqual(r, ['bonny'])

    _, r = self.anagrams2.get_anagrams("bontempo")
    self.assertEqual(r, ['bontempo'])

    _, r = self.anagrams2.get_anagrams("bonus")
    self.assertEqual(r, ['bonus', 'bosun'])

    _, r = self.anagrams2.get_anagrams("bonuses")
    self.assertEqual(r, ['bonuses'])

    _, r = self.anagrams2.get_anagrams("bony")
    self.assertEqual(r, ['bony'])

    _, r = self.anagrams2.get_anagrams("boo")
    self.assertEqual(r, ['boo'])

    _, r = self.anagrams2.get_anagrams("boob")
    self.assertEqual(r, ['boob'])

    _, r = self.anagrams2.get_anagrams("booboo")
    self.assertEqual(r, ['booboo'])

    _, r = self.anagrams2.get_anagrams("booby")
    self.assertEqual(r, ['booby'])

    _, r = self.anagrams2.get_anagrams("book")
    self.assertEqual(r, ['book'])

    _, r = self.anagrams2.get_anagrams("bookcase")
    self.assertEqual(r, ['bookcase'])

    _, r = self.anagrams2.get_anagrams("bookcases")
    self.assertEqual(r, ['bookcases'])

    _, r = self.anagrams2.get_anagrams("booked")
    self.assertEqual(r, ['booked'])

    _, r = self.anagrams2.get_anagrams("booker")
    self.assertEqual(r, ['booker', 'brooke'])

    _, r = self.anagrams2.get_anagrams("bookers")
    self.assertEqual(r, ['bookers'])

    _, r = self.anagrams2.get_anagrams("bookie")
    self.assertEqual(r, ['bookie'])

    _, r = self.anagrams2.get_anagrams("bookies")
    self.assertEqual(r, ['bookies'])

    _, r = self.anagrams2.get_anagrams("booking")
    self.assertEqual(r, ['booking'])

    _, r = self.anagrams2.get_anagrams("bookings")
    self.assertEqual(r, ['bookings'])

    _, r = self.anagrams2.get_anagrams("bookish")
    self.assertEqual(r, ['bookish'])

    _, r = self.anagrams2.get_anagrams("bookkeeper")
    self.assertEqual(r, ['bookkeeper'])

    _, r = self.anagrams2.get_anagrams("bookkeepers")
    self.assertEqual(r, ['bookkeepers'])

    _, r = self.anagrams2.get_anagrams("bookkeeping")
    self.assertEqual(r, ['bookkeeping'])

    _, r = self.anagrams2.get_anagrams("booklet")
    self.assertEqual(r, ['booklet'])

    _, r = self.anagrams2.get_anagrams("booklets")
    self.assertEqual(r, ['booklets'])

    _, r = self.anagrams2.get_anagrams("bookmark")
    self.assertEqual(r, ['bookmark'])

    _, r = self.anagrams2.get_anagrams("books")
    self.assertEqual(r, ['books'])

    _, r = self.anagrams2.get_anagrams("bookseller")
    self.assertEqual(r, ['bookseller'])

    _, r = self.anagrams2.get_anagrams("booksellers")
    self.assertEqual(r, ['booksellers'])

    _, r = self.anagrams2.get_anagrams("bookshelf")
    self.assertEqual(r, ['bookshelf'])

    _, r = self.anagrams2.get_anagrams("bookshelves")
    self.assertEqual(r, ['bookshelves'])

    _, r = self.anagrams2.get_anagrams("bookstore")
    self.assertEqual(r, ['bookstore'])

    _, r = self.anagrams2.get_anagrams("bookstores")
    self.assertEqual(r, ['bookstores'])

    _, r = self.anagrams2.get_anagrams("bookworm")
    self.assertEqual(r, ['bookworm'])

    _, r = self.anagrams2.get_anagrams("boolean")
    self.assertEqual(r, ['boolean'])

    _, r = self.anagrams2.get_anagrams("booleans")
    self.assertEqual(r, ['booleans'])

    _, r = self.anagrams2.get_anagrams("boom")
    self.assertEqual(r, ['boom'])

    _, r = self.anagrams2.get_anagrams("boomed")
    self.assertEqual(r, ['boomed'])

    _, r = self.anagrams2.get_anagrams("boomerang")
    self.assertEqual(r, ['boomerang'])

    _, r = self.anagrams2.get_anagrams("boomerangs")
    self.assertEqual(r, ['boomerangs'])

    _, r = self.anagrams2.get_anagrams("booming")
    self.assertEqual(r, ['booming'])

    _, r = self.anagrams2.get_anagrams("booms")
    self.assertEqual(r, ['booms', 'bosom'])

    _, r = self.anagrams2.get_anagrams("boon")
    self.assertEqual(r, ['boon'])

    _, r = self.anagrams2.get_anagrams("boone")
    self.assertEqual(r, ['boone'])

    _, r = self.anagrams2.get_anagrams("boonton")
    self.assertEqual(r, ['boonton'])

    _, r = self.anagrams2.get_anagrams("boor")
    self.assertEqual(r, ['boor'])

    _, r = self.anagrams2.get_anagrams("boorish")
    self.assertEqual(r, ['boorish'])

    _, r = self.anagrams2.get_anagrams("boors")
    self.assertEqual(r, ['boors'])

    _, r = self.anagrams2.get_anagrams("boos")
    self.assertEqual(r, ['boos'])

    _, r = self.anagrams2.get_anagrams("boost")
    self.assertEqual(r, ['boost', 'boots'])

    _, r = self.anagrams2.get_anagrams("boosted")
    self.assertEqual(r, ['boosted'])

    _, r = self.anagrams2.get_anagrams("booster")
    self.assertEqual(r, ['booster', 'reboots'])

    _, r = self.anagrams2.get_anagrams("boosting")
    self.assertEqual(r, ['boosting'])

    _, r = self.anagrams2.get_anagrams("boosts")
    self.assertEqual(r, ['boosts'])

    _, r = self.anagrams2.get_anagrams("boot")
    self.assertEqual(r, ['boot'])

    _, r = self.anagrams2.get_anagrams("bootable")
    self.assertEqual(r, ['bootable'])

    _, r = self.anagrams2.get_anagrams("booted")
    self.assertEqual(r, ['booted'])

    _, r = self.anagrams2.get_anagrams("bootes")
    self.assertEqual(r, ['bootes'])

    _, r = self.anagrams2.get_anagrams("booth")
    self.assertEqual(r, ['booth'])

    _, r = self.anagrams2.get_anagrams("booths")
    self.assertEqual(r, ['booths'])

    _, r = self.anagrams2.get_anagrams("booting")
    self.assertEqual(r, ['booting'])

    _, r = self.anagrams2.get_anagrams("bootle")
    self.assertEqual(r, ['bootle'])

    _, r = self.anagrams2.get_anagrams("bootleg")
    self.assertEqual(r, ['bootleg'])

    _, r = self.anagrams2.get_anagrams("bootlegged")
    self.assertEqual(r, ['bootlegged'])

    _, r = self.anagrams2.get_anagrams("bootlegger")
    self.assertEqual(r, ['bootlegger'])

    _, r = self.anagrams2.get_anagrams("bootleggers")
    self.assertEqual(r, ['bootleggers'])

    _, r = self.anagrams2.get_anagrams("bootlegging")
    self.assertEqual(r, ['bootlegging'])

    _, r = self.anagrams2.get_anagrams("bootlegs")
    self.assertEqual(r, ['bootlegs'])

    _, r = self.anagrams2.get_anagrams("boots")
    self.assertEqual(r, ['boost', 'boots'])

    _, r = self.anagrams2.get_anagrams("bootstrap")
    self.assertEqual(r, ['bootstrap'])

    _, r = self.anagrams2.get_anagrams("bootstrapped")
    self.assertEqual(r, ['bootstrapped'])

    _, r = self.anagrams2.get_anagrams("bootstrapping")
    self.assertEqual(r, ['bootstrapping'])

    _, r = self.anagrams2.get_anagrams("bootstraps")
    self.assertEqual(r, ['bootstraps'])

    _, r = self.anagrams2.get_anagrams("booty")
    self.assertEqual(r, ['booty'])

    _, r = self.anagrams2.get_anagrams("booze")
    self.assertEqual(r, ['booze'])

    _, r = self.anagrams2.get_anagrams("borate")
    self.assertEqual(r, ['boater', 'borate'])

    _, r = self.anagrams2.get_anagrams("borates")
    self.assertEqual(r, ['boaster', 'boaters', 'borates'])

    _, r = self.anagrams2.get_anagrams("borax")
    self.assertEqual(r, ['borax'])

    _, r = self.anagrams2.get_anagrams("bordeaux")
    self.assertEqual(r, ['bordeaux'])

    _, r = self.anagrams2.get_anagrams("bordello")
    self.assertEqual(r, ['bordello', 'doorbell'])

    _, r = self.anagrams2.get_anagrams("bordellos")
    self.assertEqual(r, ['bordellos'])

    _, r = self.anagrams2.get_anagrams("borden")
    self.assertEqual(r, ['bonder', 'borden'])

    _, r = self.anagrams2.get_anagrams("border")
    self.assertEqual(r, ['border'])

    _, r = self.anagrams2.get_anagrams("bordered")
    self.assertEqual(r, ['bordered'])

    _, r = self.anagrams2.get_anagrams("bordering")
    self.assertEqual(r, ['bordering'])

    _, r = self.anagrams2.get_anagrams("borderings")
    self.assertEqual(r, ['borderings'])

    _, r = self.anagrams2.get_anagrams("borderland")
    self.assertEqual(r, ['borderland'])

    _, r = self.anagrams2.get_anagrams("borderlands")
    self.assertEqual(r, ['borderlands'])

    _, r = self.anagrams2.get_anagrams("borderline")
    self.assertEqual(r, ['borderline'])

    _, r = self.anagrams2.get_anagrams("borders")
    self.assertEqual(r, ['borders'])

    _, r = self.anagrams2.get_anagrams("bore")
    self.assertEqual(r, ['boer', 'bore', 'robe'])

    _, r = self.anagrams2.get_anagrams("borealis")
    self.assertEqual(r, ['borealis'])

    _, r = self.anagrams2.get_anagrams("boreas")
    self.assertEqual(r, ['boreas'])

    _, r = self.anagrams2.get_anagrams("bored")
    self.assertEqual(r, ['bored', 'robed'])

    _, r = self.anagrams2.get_anagrams("boredom")
    self.assertEqual(r, ['bedroom', 'boredom'])

    _, r = self.anagrams2.get_anagrams("borer")
    self.assertEqual(r, ['borer'])

    _, r = self.anagrams2.get_anagrams("bores")
    self.assertEqual(r, ['boers', 'bores', 'robes', 'sober'])

    _, r = self.anagrams2.get_anagrams("borg")
    self.assertEqual(r, ['borg'])

    _, r = self.anagrams2.get_anagrams("boric")
    self.assertEqual(r, ['boric'])

    _, r = self.anagrams2.get_anagrams("boring")
    self.assertEqual(r, ['boring', 'robing'])

    _, r = self.anagrams2.get_anagrams("boris")
    self.assertEqual(r, ['boris'])

    _, r = self.anagrams2.get_anagrams("born")
    self.assertEqual(r, ['born'])

    _, r = self.anagrams2.get_anagrams("borne")
    self.assertEqual(r, ['boner', 'borne'])

    _, r = self.anagrams2.get_anagrams("borneo")
    self.assertEqual(r, ['borneo', 'oberon'])

    _, r = self.anagrams2.get_anagrams("boron")
    self.assertEqual(r, ['boron'])

    _, r = self.anagrams2.get_anagrams("borough")
    self.assertEqual(r, ['borough'])

    _, r = self.anagrams2.get_anagrams("boroughs")
    self.assertEqual(r, ['boroughs'])

    _, r = self.anagrams2.get_anagrams("borroughs")
    self.assertEqual(r, ['borroughs'])

    _, r = self.anagrams2.get_anagrams("borrow")
    self.assertEqual(r, ['borrow'])

    _, r = self.anagrams2.get_anagrams("borrowed")
    self.assertEqual(r, ['borrowed'])

    _, r = self.anagrams2.get_anagrams("borrower")
    self.assertEqual(r, ['borrower'])

    _, r = self.anagrams2.get_anagrams("borrowers")
    self.assertEqual(r, ['borrowers'])

    _, r = self.anagrams2.get_anagrams("borrowing")
    self.assertEqual(r, ['borrowing'])

    _, r = self.anagrams2.get_anagrams("borrows")
    self.assertEqual(r, ['borrows'])

    _, r = self.anagrams2.get_anagrams("bosch")
    self.assertEqual(r, ['bosch'])

    _, r = self.anagrams2.get_anagrams("bose")
    self.assertEqual(r, ['bose'])

    _, r = self.anagrams2.get_anagrams("bosom")
    self.assertEqual(r, ['booms', 'bosom'])

    _, r = self.anagrams2.get_anagrams("bosoms")
    self.assertEqual(r, ['bosoms'])

    _, r = self.anagrams2.get_anagrams("bosporus")
    self.assertEqual(r, ['bosporus'])

    _, r = self.anagrams2.get_anagrams("boss")
    self.assertEqual(r, ['boss', 'sobs'])

    _, r = self.anagrams2.get_anagrams("bossed")
    self.assertEqual(r, ['bossed'])

    _, r = self.anagrams2.get_anagrams("bosses")
    self.assertEqual(r, ['bosses'])

    _, r = self.anagrams2.get_anagrams("bostitch")
    self.assertEqual(r, ['bostitch'])

    _, r = self.anagrams2.get_anagrams("boston")
    self.assertEqual(r, ['boston'])

    _, r = self.anagrams2.get_anagrams("bostonian")
    self.assertEqual(r, ['bostonian'])

    _, r = self.anagrams2.get_anagrams("bostonians")
    self.assertEqual(r, ['bostonians'])

    _, r = self.anagrams2.get_anagrams("bosun")
    self.assertEqual(r, ['bonus', 'bosun'])

    _, r = self.anagrams2.get_anagrams("boswell")
    self.assertEqual(r, ['bellows', 'boswell'])

    _, r = self.anagrams2.get_anagrams("boswellize")
    self.assertEqual(r, ['boswellize'])

    _, r = self.anagrams2.get_anagrams("boswellizes")
    self.assertEqual(r, ['boswellizes'])

    _, r = self.anagrams2.get_anagrams("botanical")
    self.assertEqual(r, ['botanical'])

    _, r = self.anagrams2.get_anagrams("botanist")
    self.assertEqual(r, ['botanist'])

    _, r = self.anagrams2.get_anagrams("botanists")
    self.assertEqual(r, ['botanists'])

    _, r = self.anagrams2.get_anagrams("botany")
    self.assertEqual(r, ['botany'])

    _, r = self.anagrams2.get_anagrams("botch")
    self.assertEqual(r, ['botch'])

    _, r = self.anagrams2.get_anagrams("botched")
    self.assertEqual(r, ['botched'])

    _, r = self.anagrams2.get_anagrams("botcher")
    self.assertEqual(r, ['botcher'])

    _, r = self.anagrams2.get_anagrams("botchers")
    self.assertEqual(r, ['botchers'])

    _, r = self.anagrams2.get_anagrams("botches")
    self.assertEqual(r, ['botches'])

    _, r = self.anagrams2.get_anagrams("botching")
    self.assertEqual(r, ['botching'])

    _, r = self.anagrams2.get_anagrams("both")
    self.assertEqual(r, ['both'])

    _, r = self.anagrams2.get_anagrams("bother")
    self.assertEqual(r, ['bother'])

    _, r = self.anagrams2.get_anagrams("bothered")
    self.assertEqual(r, ['bothered'])

    _, r = self.anagrams2.get_anagrams("bothering")
    self.assertEqual(r, ['bothering'])

    _, r = self.anagrams2.get_anagrams("bothers")
    self.assertEqual(r, ['bothers'])

    _, r = self.anagrams2.get_anagrams("bothersome")
    self.assertEqual(r, ['bothersome'])

    _, r = self.anagrams2.get_anagrams("botswana")
    self.assertEqual(r, ['botswana'])

    _, r = self.anagrams2.get_anagrams("bottle")
    self.assertEqual(r, ['bottle'])

    _, r = self.anagrams2.get_anagrams("bottled")
    self.assertEqual(r, ['blotted', 'bottled'])

    _, r = self.anagrams2.get_anagrams("bottleneck")
    self.assertEqual(r, ['bottleneck'])

    _, r = self.anagrams2.get_anagrams("bottlenecks")
    self.assertEqual(r, ['bottlenecks'])

    _, r = self.anagrams2.get_anagrams("bottler")
    self.assertEqual(r, ['bottler'])

    _, r = self.anagrams2.get_anagrams("bottlers")
    self.assertEqual(r, ['bottlers'])

    _, r = self.anagrams2.get_anagrams("bottles")
    self.assertEqual(r, ['bottles'])

    _, r = self.anagrams2.get_anagrams("bottling")
    self.assertEqual(r, ['blotting', 'bottling'])

    _, r = self.anagrams2.get_anagrams("bottom")
    self.assertEqual(r, ['bottom'])

    _, r = self.anagrams2.get_anagrams("bottomed")
    self.assertEqual(r, ['bottomed'])

    _, r = self.anagrams2.get_anagrams("bottoming")
    self.assertEqual(r, ['bottoming'])

    _, r = self.anagrams2.get_anagrams("bottomless")
    self.assertEqual(r, ['bottomless'])

    _, r = self.anagrams2.get_anagrams("bottoms")
    self.assertEqual(r, ['bottoms'])

    _, r = self.anagrams2.get_anagrams("botulinus")
    self.assertEqual(r, ['botulinus'])

    _, r = self.anagrams2.get_anagrams("botulism")
    self.assertEqual(r, ['botulism'])

    _, r = self.anagrams2.get_anagrams("boucher")
    self.assertEqual(r, ['boucher'])

    _, r = self.anagrams2.get_anagrams("bouffant")
    self.assertEqual(r, ['bouffant'])

    _, r = self.anagrams2.get_anagrams("bough")
    self.assertEqual(r, ['bough'])

    _, r = self.anagrams2.get_anagrams("boughs")
    self.assertEqual(r, ['boughs'])

    _, r = self.anagrams2.get_anagrams("bought")
    self.assertEqual(r, ['bought'])

    _, r = self.anagrams2.get_anagrams("boulder")
    self.assertEqual(r, ['boulder', 'doubler'])

    _, r = self.anagrams2.get_anagrams("boulders")
    self.assertEqual(r, ['boulders', 'doublers'])

    _, r = self.anagrams2.get_anagrams("boulevard")
    self.assertEqual(r, ['boulevard'])

    _, r = self.anagrams2.get_anagrams("boulevards")
    self.assertEqual(r, ['boulevards'])

    _, r = self.anagrams2.get_anagrams("bounce")
    self.assertEqual(r, ['bounce'])

    _, r = self.anagrams2.get_anagrams("bounced")
    self.assertEqual(r, ['bounced'])

    _, r = self.anagrams2.get_anagrams("bouncer")
    self.assertEqual(r, ['bouncer'])

    _, r = self.anagrams2.get_anagrams("bounces")
    self.assertEqual(r, ['bounces'])

    _, r = self.anagrams2.get_anagrams("bouncing")
    self.assertEqual(r, ['bouncing'])

    _, r = self.anagrams2.get_anagrams("bouncy")
    self.assertEqual(r, ['bouncy'])

    _, r = self.anagrams2.get_anagrams("bound")
    self.assertEqual(r, ['bound'])

    _, r = self.anagrams2.get_anagrams("boundaries")
    self.assertEqual(r, ['boundaries'])

    _, r = self.anagrams2.get_anagrams("boundary")
    self.assertEqual(r, ['boundary'])

    _, r = self.anagrams2.get_anagrams("bounded")
    self.assertEqual(r, ['bounded'])

    _, r = self.anagrams2.get_anagrams("bounden")
    self.assertEqual(r, ['bounden'])

    _, r = self.anagrams2.get_anagrams("bounding")
    self.assertEqual(r, ['bounding'])

    _, r = self.anagrams2.get_anagrams("boundless")
    self.assertEqual(r, ['boundless'])

    _, r = self.anagrams2.get_anagrams("boundlessness")
    self.assertEqual(r, ['boundlessness'])

    _, r = self.anagrams2.get_anagrams("bounds")
    self.assertEqual(r, ['bounds'])

    _, r = self.anagrams2.get_anagrams("bounteous")
    self.assertEqual(r, ['bounteous'])

    _, r = self.anagrams2.get_anagrams("bounteously")
    self.assertEqual(r, ['bounteously'])

    _, r = self.anagrams2.get_anagrams("bounties")
    self.assertEqual(r, ['bounties'])

    _, r = self.anagrams2.get_anagrams("bountiful")
    self.assertEqual(r, ['bountiful'])

    _, r = self.anagrams2.get_anagrams("bounty")
    self.assertEqual(r, ['bounty'])

    _, r = self.anagrams2.get_anagrams("bouquet")
    self.assertEqual(r, ['bouquet'])

    _, r = self.anagrams2.get_anagrams("bouquets")
    self.assertEqual(r, ['bouquets'])

    _, r = self.anagrams2.get_anagrams("bourbaki")
    self.assertEqual(r, ['bourbaki'])

    _, r = self.anagrams2.get_anagrams("bourbon")
    self.assertEqual(r, ['bourbon'])

    _, r = self.anagrams2.get_anagrams("bourgeois")
    self.assertEqual(r, ['bourgeois'])

    _, r = self.anagrams2.get_anagrams("bourgeoisie")
    self.assertEqual(r, ['bourgeoisie'])

    _, r = self.anagrams2.get_anagrams("bourne")
    self.assertEqual(r, ['bourne'])

    _, r = self.anagrams2.get_anagrams("boustrophedon")
    self.assertEqual(r, ['boustrophedon'])

    _, r = self.anagrams2.get_anagrams("boustrophedonic")
    self.assertEqual(r, ['boustrophedonic'])

    _, r = self.anagrams2.get_anagrams("bout")
    self.assertEqual(r, ['bout'])

    _, r = self.anagrams2.get_anagrams("boutique")
    self.assertEqual(r, ['boutique'])

    _, r = self.anagrams2.get_anagrams("bouts")
    self.assertEqual(r, ['bouts'])

    _, r = self.anagrams2.get_anagrams("bouvier")
    self.assertEqual(r, ['bouvier'])

    _, r = self.anagrams2.get_anagrams("bovine")
    self.assertEqual(r, ['bovine'])

    _, r = self.anagrams2.get_anagrams("bovines")
    self.assertEqual(r, ['bovines'])

    _, r = self.anagrams2.get_anagrams("bow")
    self.assertEqual(r, ['bow'])

    _, r = self.anagrams2.get_anagrams("bowditch")
    self.assertEqual(r, ['bowditch'])

    _, r = self.anagrams2.get_anagrams("bowdlerize")
    self.assertEqual(r, ['bowdlerize'])

    _, r = self.anagrams2.get_anagrams("bowdlerized")
    self.assertEqual(r, ['bowdlerized'])

    _, r = self.anagrams2.get_anagrams("bowdlerizes")
    self.assertEqual(r, ['bowdlerizes'])

    _, r = self.anagrams2.get_anagrams("bowdlerizing")
    self.assertEqual(r, ['bowdlerizing'])

    _, r = self.anagrams2.get_anagrams("bowdoin")
    self.assertEqual(r, ['bowdoin'])

    _, r = self.anagrams2.get_anagrams("bowed")
    self.assertEqual(r, ['bowed'])

    _, r = self.anagrams2.get_anagrams("bowel")
    self.assertEqual(r, ['below', 'bowel', 'elbow'])

    _, r = self.anagrams2.get_anagrams("bowels")
    self.assertEqual(r, ['bowels', 'elbows'])

    _, r = self.anagrams2.get_anagrams("bowen")
    self.assertEqual(r, ['bowen'])

    _, r = self.anagrams2.get_anagrams("bower")
    self.assertEqual(r, ['bower'])

    _, r = self.anagrams2.get_anagrams("bowers")
    self.assertEqual(r, ['bowers', 'browse'])

    _, r = self.anagrams2.get_anagrams("bowes")
    self.assertEqual(r, ['bowes'])

    _, r = self.anagrams2.get_anagrams("bowing")
    self.assertEqual(r, ['bowing'])

    _, r = self.anagrams2.get_anagrams("bowl")
    self.assertEqual(r, ['blow', 'bowl'])

    _, r = self.anagrams2.get_anagrams("bowled")
    self.assertEqual(r, ['bowled'])

    _, r = self.anagrams2.get_anagrams("bowler")
    self.assertEqual(r, ['blower', 'bowler'])

    _, r = self.anagrams2.get_anagrams("bowlers")
    self.assertEqual(r, ['blowers', 'bowlers'])

    _, r = self.anagrams2.get_anagrams("bowline")
    self.assertEqual(r, ['bowline'])

    _, r = self.anagrams2.get_anagrams("bowlines")
    self.assertEqual(r, ['bowlines'])

    _, r = self.anagrams2.get_anagrams("bowling")
    self.assertEqual(r, ['blowing', 'bowling'])

    _, r = self.anagrams2.get_anagrams("bowls")
    self.assertEqual(r, ['blows', 'bowls'])

    _, r = self.anagrams2.get_anagrams("bowman")
    self.assertEqual(r, ['bowman'])

    _, r = self.anagrams2.get_anagrams("bows")
    self.assertEqual(r, ['bows'])

    _, r = self.anagrams2.get_anagrams("bowstring")
    self.assertEqual(r, ['bowstring'])

    _, r = self.anagrams2.get_anagrams("bowstrings")
    self.assertEqual(r, ['bowstrings'])

    _, r = self.anagrams2.get_anagrams("box")
    self.assertEqual(r, ['box'])

    _, r = self.anagrams2.get_anagrams("boxcar")
    self.assertEqual(r, ['boxcar'])

    _, r = self.anagrams2.get_anagrams("boxcars")
    self.assertEqual(r, ['boxcars'])

    _, r = self.anagrams2.get_anagrams("boxed")
    self.assertEqual(r, ['boxed'])

    _, r = self.anagrams2.get_anagrams("boxer")
    self.assertEqual(r, ['boxer'])

    _, r = self.anagrams2.get_anagrams("boxers")
    self.assertEqual(r, ['boxers'])

    _, r = self.anagrams2.get_anagrams("boxes")
    self.assertEqual(r, ['boxes'])

    _, r = self.anagrams2.get_anagrams("boxford")
    self.assertEqual(r, ['boxford'])

    _, r = self.anagrams2.get_anagrams("boxing")
    self.assertEqual(r, ['boxing'])

    _, r = self.anagrams2.get_anagrams("boxtop")
    self.assertEqual(r, ['boxtop'])

    _, r = self.anagrams2.get_anagrams("boxtops")
    self.assertEqual(r, ['boxtops'])

    _, r = self.anagrams2.get_anagrams("boxwood")
    self.assertEqual(r, ['boxwood'])

    _, r = self.anagrams2.get_anagrams("boy")
    self.assertEqual(r, ['boy'])

    _, r = self.anagrams2.get_anagrams("boyce")
    self.assertEqual(r, ['boyce'])

    _, r = self.anagrams2.get_anagrams("boycott")
    self.assertEqual(r, ['boycott'])

    _, r = self.anagrams2.get_anagrams("boycotted")
    self.assertEqual(r, ['boycotted'])

    _, r = self.anagrams2.get_anagrams("boycotts")
    self.assertEqual(r, ['boycotts'])

    _, r = self.anagrams2.get_anagrams("boyd")
    self.assertEqual(r, ['body', 'boyd'])

    _, r = self.anagrams2.get_anagrams("boyfriend")
    self.assertEqual(r, ['boyfriend'])

    _, r = self.anagrams2.get_anagrams("boyfriends")
    self.assertEqual(r, ['boyfriends'])

    _, r = self.anagrams2.get_anagrams("boyhood")
    self.assertEqual(r, ['boyhood'])

    _, r = self.anagrams2.get_anagrams("boyish")
    self.assertEqual(r, ['boyish'])

    _, r = self.anagrams2.get_anagrams("boyishness")
    self.assertEqual(r, ['boyishness'])

    _, r = self.anagrams2.get_anagrams("boyle")
    self.assertEqual(r, ['boyle'])

    _, r = self.anagrams2.get_anagrams("boylston")
    self.assertEqual(r, ['boylston'])

    _, r = self.anagrams2.get_anagrams("boys")
    self.assertEqual(r, ['boys'])

    _, r = self.anagrams2.get_anagrams("bra")
    self.assertEqual(r, ['bar', 'bra'])

    _, r = self.anagrams2.get_anagrams("brace")
    self.assertEqual(r, ['brace'])

    _, r = self.anagrams2.get_anagrams("braced")
    self.assertEqual(r, ['braced'])

    _, r = self.anagrams2.get_anagrams("bracelet")
    self.assertEqual(r, ['bracelet'])

    _, r = self.anagrams2.get_anagrams("bracelets")
    self.assertEqual(r, ['bracelets'])

    _, r = self.anagrams2.get_anagrams("braces")
    self.assertEqual(r, ['braces'])

    _, r = self.anagrams2.get_anagrams("bracing")
    self.assertEqual(r, ['bracing'])

    _, r = self.anagrams2.get_anagrams("bracket")
    self.assertEqual(r, ['bracket'])

    _, r = self.anagrams2.get_anagrams("bracketed")
    self.assertEqual(r, ['bracketed'])

    _, r = self.anagrams2.get_anagrams("bracketing")
    self.assertEqual(r, ['bracketing'])

    _, r = self.anagrams2.get_anagrams("brackets")
    self.assertEqual(r, ['brackets'])

    _, r = self.anagrams2.get_anagrams("brackish")
    self.assertEqual(r, ['brackish'])

    _, r = self.anagrams2.get_anagrams("bradbury")
    self.assertEqual(r, ['bradbury'])

    _, r = self.anagrams2.get_anagrams("bradford")
    self.assertEqual(r, ['bradford'])

    _, r = self.anagrams2.get_anagrams("bradley")
    self.assertEqual(r, ['bradley'])

    _, r = self.anagrams2.get_anagrams("bradshaw")
    self.assertEqual(r, ['bradshaw'])

    _, r = self.anagrams2.get_anagrams("brady")
    self.assertEqual(r, ['brady'])

    _, r = self.anagrams2.get_anagrams("brae")
    self.assertEqual(r, ['bare', 'bear', 'brae'])

    _, r = self.anagrams2.get_anagrams("braes")
    self.assertEqual(r, ['bares', 'baser', 'bears', 'braes', 'saber'])

    _, r = self.anagrams2.get_anagrams("brag")
    self.assertEqual(r, ['brag', 'garb', 'grab'])

    _, r = self.anagrams2.get_anagrams("bragg")
    self.assertEqual(r, ['bragg'])

    _, r = self.anagrams2.get_anagrams("bragged")
    self.assertEqual(r, ['bragged'])

    _, r = self.anagrams2.get_anagrams("bragger")
    self.assertEqual(r, ['bragger'])

    _, r = self.anagrams2.get_anagrams("bragging")
    self.assertEqual(r, ['bragging'])

    _, r = self.anagrams2.get_anagrams("brags")
    self.assertEqual(r, ['brags', 'grabs'])

    _, r = self.anagrams2.get_anagrams("brahmaputra")
    self.assertEqual(r, ['brahmaputra'])

    _, r = self.anagrams2.get_anagrams("brahms")
    self.assertEqual(r, ['brahms'])

    _, r = self.anagrams2.get_anagrams("brahmsian")
    self.assertEqual(r, ['brahmsian'])

    _, r = self.anagrams2.get_anagrams("braid")
    self.assertEqual(r, ['baird', 'braid', 'rabid'])

    _, r = self.anagrams2.get_anagrams("braided")
    self.assertEqual(r, ['braided'])

    _, r = self.anagrams2.get_anagrams("braiding")
    self.assertEqual(r, ['braiding'])

    _, r = self.anagrams2.get_anagrams("braids")
    self.assertEqual(r, ['braids'])

    _, r = self.anagrams2.get_anagrams("braille")
    self.assertEqual(r, ['braille', 'liberal'])

    _, r = self.anagrams2.get_anagrams("brain")
    self.assertEqual(r, ['bairn', 'brain', 'brian', 'rabin'])

    _, r = self.anagrams2.get_anagrams("brainard")
    self.assertEqual(r, ['brainard'])

    _, r = self.anagrams2.get_anagrams("brainards")
    self.assertEqual(r, ['brainards'])

    _, r = self.anagrams2.get_anagrams("brainchild")
    self.assertEqual(r, ['brainchild'])

    _, r = self.anagrams2.get_anagrams("brained")
    self.assertEqual(r, ['brained'])

    _, r = self.anagrams2.get_anagrams("braining")
    self.assertEqual(r, ['braining'])

    _, r = self.anagrams2.get_anagrams("brains")
    self.assertEqual(r, ['brains'])

    _, r = self.anagrams2.get_anagrams("brainstem")
    self.assertEqual(r, ['brainstem'])

    _, r = self.anagrams2.get_anagrams("brainstems")
    self.assertEqual(r, ['brainstems'])

    _, r = self.anagrams2.get_anagrams("brainstorm")
    self.assertEqual(r, ['brainstorm'])

    _, r = self.anagrams2.get_anagrams("brainstorms")
    self.assertEqual(r, ['brainstorms'])

    _, r = self.anagrams2.get_anagrams("brainwash")
    self.assertEqual(r, ['brainwash'])

    _, r = self.anagrams2.get_anagrams("brainwashed")
    self.assertEqual(r, ['brainwashed'])

    _, r = self.anagrams2.get_anagrams("brainwashes")
    self.assertEqual(r, ['brainwashes'])

    _, r = self.anagrams2.get_anagrams("brainwashing")
    self.assertEqual(r, ['brainwashing'])

    _, r = self.anagrams2.get_anagrams("brainy")
    self.assertEqual(r, ['binary', 'brainy'])

    _, r = self.anagrams2.get_anagrams("brake")
    self.assertEqual(r, ['baker', 'brake', 'break'])

    _, r = self.anagrams2.get_anagrams("braked")
    self.assertEqual(r, ['barked', 'braked'])

    _, r = self.anagrams2.get_anagrams("brakeman")
    self.assertEqual(r, ['brakeman'])

    _, r = self.anagrams2.get_anagrams("brakes")
    self.assertEqual(r, ['bakers', 'brakes', 'breaks'])

    _, r = self.anagrams2.get_anagrams("braking")
    self.assertEqual(r, ['barking', 'braking'])

    _, r = self.anagrams2.get_anagrams("bramble")
    self.assertEqual(r, ['bramble'])

    _, r = self.anagrams2.get_anagrams("brambles")
    self.assertEqual(r, ['brambles'])

    _, r = self.anagrams2.get_anagrams("brambly")
    self.assertEqual(r, ['brambly'])

    _, r = self.anagrams2.get_anagrams("bran")
    self.assertEqual(r, ['barn', 'bran'])

    _, r = self.anagrams2.get_anagrams("branch")
    self.assertEqual(r, ['branch'])

    _, r = self.anagrams2.get_anagrams("branched")
    self.assertEqual(r, ['branched'])

    _, r = self.anagrams2.get_anagrams("branches")
    self.assertEqual(r, ['branches'])

    _, r = self.anagrams2.get_anagrams("branching")
    self.assertEqual(r, ['branching'])

    _, r = self.anagrams2.get_anagrams("branchings")
    self.assertEqual(r, ['branchings'])

    _, r = self.anagrams2.get_anagrams("branchville")
    self.assertEqual(r, ['branchville'])

    _, r = self.anagrams2.get_anagrams("brand")
    self.assertEqual(r, ['brand'])

    _, r = self.anagrams2.get_anagrams("branded")
    self.assertEqual(r, ['branded'])

    _, r = self.anagrams2.get_anagrams("brandeis")
    self.assertEqual(r, ['brandeis'])

    _, r = self.anagrams2.get_anagrams("brandel")
    self.assertEqual(r, ['brandel'])

    _, r = self.anagrams2.get_anagrams("brandenburg")
    self.assertEqual(r, ['brandenburg'])

    _, r = self.anagrams2.get_anagrams("branding")
    self.assertEqual(r, ['branding'])

    _, r = self.anagrams2.get_anagrams("brandish")
    self.assertEqual(r, ['brandish'])

    _, r = self.anagrams2.get_anagrams("brandishes")
    self.assertEqual(r, ['brandishes'])

    _, r = self.anagrams2.get_anagrams("brandishing")
    self.assertEqual(r, ['brandishing'])

    _, r = self.anagrams2.get_anagrams("brandon")
    self.assertEqual(r, ['brandon'])

    _, r = self.anagrams2.get_anagrams("brands")
    self.assertEqual(r, ['brands'])

    _, r = self.anagrams2.get_anagrams("brandt")
    self.assertEqual(r, ['brandt'])

    _, r = self.anagrams2.get_anagrams("brandy")
    self.assertEqual(r, ['brandy'])

    _, r = self.anagrams2.get_anagrams("brandywine")
    self.assertEqual(r, ['brandywine'])

    _, r = self.anagrams2.get_anagrams("braniff")
    self.assertEqual(r, ['braniff'])

    _, r = self.anagrams2.get_anagrams("brannon")
    self.assertEqual(r, ['brannon'])

    _, r = self.anagrams2.get_anagrams("bras")
    self.assertEqual(r, ['bars', 'bras'])

    _, r = self.anagrams2.get_anagrams("brash")
    self.assertEqual(r, ['brash'])

    _, r = self.anagrams2.get_anagrams("brashly")
    self.assertEqual(r, ['brashly'])

    _, r = self.anagrams2.get_anagrams("brashness")
    self.assertEqual(r, ['brashness'])

    _, r = self.anagrams2.get_anagrams("brasilia")
    self.assertEqual(r, ['brasilia'])

    _, r = self.anagrams2.get_anagrams("brass")
    self.assertEqual(r, ['brass'])

    _, r = self.anagrams2.get_anagrams("brasses")
    self.assertEqual(r, ['brasses'])

    _, r = self.anagrams2.get_anagrams("brassiere")
    self.assertEqual(r, ['brassiere'])

    _, r = self.anagrams2.get_anagrams("brasstown")
    self.assertEqual(r, ['brasstown'])

    _, r = self.anagrams2.get_anagrams("brassy")
    self.assertEqual(r, ['brassy'])

    _, r = self.anagrams2.get_anagrams("brat")
    self.assertEqual(r, ['bart', 'brat'])

    _, r = self.anagrams2.get_anagrams("brats")
    self.assertEqual(r, ['brats'])

    _, r = self.anagrams2.get_anagrams("braun")
    self.assertEqual(r, ['braun', 'urban'])

    _, r = self.anagrams2.get_anagrams("bravado")
    self.assertEqual(r, ['bravado'])

    _, r = self.anagrams2.get_anagrams("brave")
    self.assertEqual(r, ['brave'])

    _, r = self.anagrams2.get_anagrams("braved")
    self.assertEqual(r, ['adverb', 'braved'])

    _, r = self.anagrams2.get_anagrams("bravely")
    self.assertEqual(r, ['bravely'])

    _, r = self.anagrams2.get_anagrams("braveness")
    self.assertEqual(r, ['braveness'])

    _, r = self.anagrams2.get_anagrams("braver")
    self.assertEqual(r, ['braver'])

    _, r = self.anagrams2.get_anagrams("bravery")
    self.assertEqual(r, ['bravery'])

    _, r = self.anagrams2.get_anagrams("braves")
    self.assertEqual(r, ['braves'])

    _, r = self.anagrams2.get_anagrams("bravest")
    self.assertEqual(r, ['bravest'])

    _, r = self.anagrams2.get_anagrams("braving")
    self.assertEqual(r, ['braving'])

    _, r = self.anagrams2.get_anagrams("bravo")
    self.assertEqual(r, ['bravo'])

    _, r = self.anagrams2.get_anagrams("bravos")
    self.assertEqual(r, ['bravos'])

    _, r = self.anagrams2.get_anagrams("brawl")
    self.assertEqual(r, ['brawl'])

    _, r = self.anagrams2.get_anagrams("brawler")
    self.assertEqual(r, ['brawler', 'warbler'])

    _, r = self.anagrams2.get_anagrams("brawling")
    self.assertEqual(r, ['brawling', 'warbling'])

    _, r = self.anagrams2.get_anagrams("brawn")
    self.assertEqual(r, ['brawn'])

    _, r = self.anagrams2.get_anagrams("bray")
    self.assertEqual(r, ['bray'])

    _, r = self.anagrams2.get_anagrams("brayed")
    self.assertEqual(r, ['brayed'])

    _, r = self.anagrams2.get_anagrams("brayer")
    self.assertEqual(r, ['brayer'])

    _, r = self.anagrams2.get_anagrams("braying")
    self.assertEqual(r, ['braying'])

    _, r = self.anagrams2.get_anagrams("brays")
    self.assertEqual(r, ['brays'])

    _, r = self.anagrams2.get_anagrams("braze")
    self.assertEqual(r, ['braze', 'zebra'])

    _, r = self.anagrams2.get_anagrams("brazed")
    self.assertEqual(r, ['brazed'])

    _, r = self.anagrams2.get_anagrams("brazen")
    self.assertEqual(r, ['brazen'])

    _, r = self.anagrams2.get_anagrams("brazenly")
    self.assertEqual(r, ['brazenly'])

    _, r = self.anagrams2.get_anagrams("brazenness")
    self.assertEqual(r, ['brazenness'])

    _, r = self.anagrams2.get_anagrams("brazes")
    self.assertEqual(r, ['brazes', 'zebras'])

    _, r = self.anagrams2.get_anagrams("brazier")
    self.assertEqual(r, ['bizarre', 'brazier'])

    _, r = self.anagrams2.get_anagrams("braziers")
    self.assertEqual(r, ['braziers'])

    _, r = self.anagrams2.get_anagrams("brazil")
    self.assertEqual(r, ['brazil'])

    _, r = self.anagrams2.get_anagrams("brazilian")
    self.assertEqual(r, ['brazilian'])

    _, r = self.anagrams2.get_anagrams("brazing")
    self.assertEqual(r, ['brazing'])

    _, r = self.anagrams2.get_anagrams("brazzaville")
    self.assertEqual(r, ['brazzaville'])

    _, r = self.anagrams2.get_anagrams("breach")
    self.assertEqual(r, ['breach'])

    _, r = self.anagrams2.get_anagrams("breached")
    self.assertEqual(r, ['breached'])

    _, r = self.anagrams2.get_anagrams("breacher")
    self.assertEqual(r, ['breacher'])

    _, r = self.anagrams2.get_anagrams("breachers")
    self.assertEqual(r, ['breachers'])

    _, r = self.anagrams2.get_anagrams("breaches")
    self.assertEqual(r, ['breaches'])

    _, r = self.anagrams2.get_anagrams("breaching")
    self.assertEqual(r, ['breaching'])

    _, r = self.anagrams2.get_anagrams("bread")
    self.assertEqual(r, ['bared', 'beard', 'bread', 'debar', 'debra'])

    _, r = self.anagrams2.get_anagrams("breadboard")
    self.assertEqual(r, ['breadboard'])

    _, r = self.anagrams2.get_anagrams("breadboards")
    self.assertEqual(r, ['breadboards'])

    _, r = self.anagrams2.get_anagrams("breadbox")
    self.assertEqual(r, ['breadbox'])

    _, r = self.anagrams2.get_anagrams("breadboxes")
    self.assertEqual(r, ['breadboxes'])

    _, r = self.anagrams2.get_anagrams("breaded")
    self.assertEqual(r, ['bearded', 'breaded'])

    _, r = self.anagrams2.get_anagrams("breading")
    self.assertEqual(r, ['breading'])

    _, r = self.anagrams2.get_anagrams("breads")
    self.assertEqual(r, ['beards', 'breads'])

    _, r = self.anagrams2.get_anagrams("breadth")
    self.assertEqual(r, ['breadth'])

    _, r = self.anagrams2.get_anagrams("breadwinner")
    self.assertEqual(r, ['breadwinner'])

    _, r = self.anagrams2.get_anagrams("breadwinners")
    self.assertEqual(r, ['breadwinners'])

    _, r = self.anagrams2.get_anagrams("break")
    self.assertEqual(r, ['baker', 'brake', 'break'])

    _, r = self.anagrams2.get_anagrams("breakable")
    self.assertEqual(r, ['breakable'])

    _, r = self.anagrams2.get_anagrams("breakables")
    self.assertEqual(r, ['breakables'])

    _, r = self.anagrams2.get_anagrams("breakage")
    self.assertEqual(r, ['breakage'])

    _, r = self.anagrams2.get_anagrams("breakaway")
    self.assertEqual(r, ['breakaway'])

    _, r = self.anagrams2.get_anagrams("breakdown")
    self.assertEqual(r, ['breakdown'])

    _, r = self.anagrams2.get_anagrams("breakdowns")
    self.assertEqual(r, ['breakdowns'])

    _, r = self.anagrams2.get_anagrams("breaker")
    self.assertEqual(r, ['breaker'])

    _, r = self.anagrams2.get_anagrams("breakers")
    self.assertEqual(r, ['breakers'])

    _, r = self.anagrams2.get_anagrams("breakfast")
    self.assertEqual(r, ['breakfast'])

    _, r = self.anagrams2.get_anagrams("breakfasted")
    self.assertEqual(r, ['breakfasted'])

    _, r = self.anagrams2.get_anagrams("breakfaster")
    self.assertEqual(r, ['breakfaster'])

    _, r = self.anagrams2.get_anagrams("breakfasters")
    self.assertEqual(r, ['breakfasters'])

    _, r = self.anagrams2.get_anagrams("breakfasting")
    self.assertEqual(r, ['breakfasting'])

    _, r = self.anagrams2.get_anagrams("breakfasts")
    self.assertEqual(r, ['breakfasts'])

    _, r = self.anagrams2.get_anagrams("breaking")
    self.assertEqual(r, ['breaking'])

    _, r = self.anagrams2.get_anagrams("breakpoint")
    self.assertEqual(r, ['breakpoint'])

    _, r = self.anagrams2.get_anagrams("breakpoints")
    self.assertEqual(r, ['breakpoints'])

    _, r = self.anagrams2.get_anagrams("breaks")
    self.assertEqual(r, ['bakers', 'brakes', 'breaks'])

    _, r = self.anagrams2.get_anagrams("breakthrough")
    self.assertEqual(r, ['breakthrough'])

    _, r = self.anagrams2.get_anagrams("breakthroughes")
    self.assertEqual(r, ['breakthroughes'])

    _, r = self.anagrams2.get_anagrams("breakthroughs")
    self.assertEqual(r, ['breakthroughs'])

    _, r = self.anagrams2.get_anagrams("breakup")
    self.assertEqual(r, ['breakup'])

    _, r = self.anagrams2.get_anagrams("breakwater")
    self.assertEqual(r, ['breakwater'])

    _, r = self.anagrams2.get_anagrams("breakwaters")
    self.assertEqual(r, ['breakwaters'])

    _, r = self.anagrams2.get_anagrams("breast")
    self.assertEqual(r, ['barest', 'breast'])

    _, r = self.anagrams2.get_anagrams("breasted")
    self.assertEqual(r, ['breasted', 'debaters'])

    _, r = self.anagrams2.get_anagrams("breasts")
    self.assertEqual(r, ['breasts'])

    _, r = self.anagrams2.get_anagrams("breastwork")
    self.assertEqual(r, ['breastwork'])

    _, r = self.anagrams2.get_anagrams("breastworks")
    self.assertEqual(r, ['breastworks'])

    _, r = self.anagrams2.get_anagrams("breath")
    self.assertEqual(r, ['bather', 'bertha', 'breath'])

    _, r = self.anagrams2.get_anagrams("breathable")
    self.assertEqual(r, ['breathable'])

    _, r = self.anagrams2.get_anagrams("breathe")
    self.assertEqual(r, ['breathe'])

    _, r = self.anagrams2.get_anagrams("breathed")
    self.assertEqual(r, ['breathed'])

    _, r = self.anagrams2.get_anagrams("breather")
    self.assertEqual(r, ['breather'])

    _, r = self.anagrams2.get_anagrams("breathers")
    self.assertEqual(r, ['breathers'])

    _, r = self.anagrams2.get_anagrams("breathes")
    self.assertEqual(r, ['breathes'])

    _, r = self.anagrams2.get_anagrams("breathing")
    self.assertEqual(r, ['breathing'])

    _, r = self.anagrams2.get_anagrams("breathless")
    self.assertEqual(r, ['breathless'])

    _, r = self.anagrams2.get_anagrams("breathlessly")
    self.assertEqual(r, ['breathlessly'])

    _, r = self.anagrams2.get_anagrams("breaths")
    self.assertEqual(r, ['bathers', 'breaths'])

    _, r = self.anagrams2.get_anagrams("breathtaking")
    self.assertEqual(r, ['breathtaking'])

    _, r = self.anagrams2.get_anagrams("breathtakingly")
    self.assertEqual(r, ['breathtakingly'])

    _, r = self.anagrams2.get_anagrams("breathy")
    self.assertEqual(r, ['breathy'])

    _, r = self.anagrams2.get_anagrams("bred")
    self.assertEqual(r, ['bred'])

    _, r = self.anagrams2.get_anagrams("breech")
    self.assertEqual(r, ['breech'])

    _, r = self.anagrams2.get_anagrams("breeches")
    self.assertEqual(r, ['breeches'])

    _, r = self.anagrams2.get_anagrams("breed")
    self.assertEqual(r, ['breed'])

    _, r = self.anagrams2.get_anagrams("breeder")
    self.assertEqual(r, ['breeder'])

    _, r = self.anagrams2.get_anagrams("breeding")
    self.assertEqual(r, ['breeding'])

    _, r = self.anagrams2.get_anagrams("breeds")
    self.assertEqual(r, ['breeds'])

    _, r = self.anagrams2.get_anagrams("breeze")
    self.assertEqual(r, ['breeze'])

    _, r = self.anagrams2.get_anagrams("breezes")
    self.assertEqual(r, ['breezes'])

    _, r = self.anagrams2.get_anagrams("breezily")
    self.assertEqual(r, ['breezily'])

    _, r = self.anagrams2.get_anagrams("breezy")
    self.assertEqual(r, ['breezy'])

    _, r = self.anagrams2.get_anagrams("bremen")
    self.assertEqual(r, ['bremen'])

    _, r = self.anagrams2.get_anagrams("bremsstrahlung")
    self.assertEqual(r, ['bremsstrahlung'])

    _, r = self.anagrams2.get_anagrams("brenda")
    self.assertEqual(r, ['brenda'])

    _, r = self.anagrams2.get_anagrams("brendan")
    self.assertEqual(r, ['brendan'])

    _, r = self.anagrams2.get_anagrams("brennan")
    self.assertEqual(r, ['brennan'])

    _, r = self.anagrams2.get_anagrams("brenner")
    self.assertEqual(r, ['brenner'])

    _, r = self.anagrams2.get_anagrams("brent")
    self.assertEqual(r, ['brent'])

    _, r = self.anagrams2.get_anagrams("bresenham")
    self.assertEqual(r, ['bresenham'])

    _, r = self.anagrams2.get_anagrams("brest")
    self.assertEqual(r, ['brest'])

    _, r = self.anagrams2.get_anagrams("brethren")
    self.assertEqual(r, ['brethren'])

    _, r = self.anagrams2.get_anagrams("breton")
    self.assertEqual(r, ['breton'])

    _, r = self.anagrams2.get_anagrams("bretons")
    self.assertEqual(r, ['bretons'])

    _, r = self.anagrams2.get_anagrams("brett")
    self.assertEqual(r, ['brett'])

    _, r = self.anagrams2.get_anagrams("breve")
    self.assertEqual(r, ['breve'])

    _, r = self.anagrams2.get_anagrams("brevet")
    self.assertEqual(r, ['brevet'])

    _, r = self.anagrams2.get_anagrams("breveted")
    self.assertEqual(r, ['breveted'])

    _, r = self.anagrams2.get_anagrams("breveting")
    self.assertEqual(r, ['breveting'])

    _, r = self.anagrams2.get_anagrams("brevets")
    self.assertEqual(r, ['brevets'])

    _, r = self.anagrams2.get_anagrams("brevity")
    self.assertEqual(r, ['brevity'])

    _, r = self.anagrams2.get_anagrams("brew")
    self.assertEqual(r, ['brew'])

    _, r = self.anagrams2.get_anagrams("brewed")
    self.assertEqual(r, ['brewed'])

    _, r = self.anagrams2.get_anagrams("brewer")
    self.assertEqual(r, ['brewer'])

    _, r = self.anagrams2.get_anagrams("breweries")
    self.assertEqual(r, ['breweries'])

    _, r = self.anagrams2.get_anagrams("brewers")
    self.assertEqual(r, ['brewers'])

    _, r = self.anagrams2.get_anagrams("brewery")
    self.assertEqual(r, ['brewery'])

    _, r = self.anagrams2.get_anagrams("brewing")
    self.assertEqual(r, ['brewing'])

    _, r = self.anagrams2.get_anagrams("brews")
    self.assertEqual(r, ['brews'])

    _, r = self.anagrams2.get_anagrams("brewster")
    self.assertEqual(r, ['brewster'])

    _, r = self.anagrams2.get_anagrams("brian")
    self.assertEqual(r, ['bairn', 'brain', 'brian', 'rabin'])

    _, r = self.anagrams2.get_anagrams("briar")
    self.assertEqual(r, ['briar'])

    _, r = self.anagrams2.get_anagrams("briars")
    self.assertEqual(r, ['briars'])

    _, r = self.anagrams2.get_anagrams("bribe")
    self.assertEqual(r, ['bribe'])

    _, r = self.anagrams2.get_anagrams("bribed")
    self.assertEqual(r, ['bribed', 'ribbed'])

    _, r = self.anagrams2.get_anagrams("briber")
    self.assertEqual(r, ['briber'])

    _, r = self.anagrams2.get_anagrams("bribers")
    self.assertEqual(r, ['bribers'])

    _, r = self.anagrams2.get_anagrams("bribery")
    self.assertEqual(r, ['bribery'])

    _, r = self.anagrams2.get_anagrams("bribes")
    self.assertEqual(r, ['bribes'])

    _, r = self.anagrams2.get_anagrams("bribing")
    self.assertEqual(r, ['bribing', 'ribbing'])

    _, r = self.anagrams2.get_anagrams("brice")
    self.assertEqual(r, ['brice'])

    _, r = self.anagrams2.get_anagrams("brick")
    self.assertEqual(r, ['brick'])

    _, r = self.anagrams2.get_anagrams("brickbat")
    self.assertEqual(r, ['brickbat'])

    _, r = self.anagrams2.get_anagrams("bricked")
    self.assertEqual(r, ['bricked'])

    _, r = self.anagrams2.get_anagrams("bricker")
    self.assertEqual(r, ['bricker'])

    _, r = self.anagrams2.get_anagrams("bricklayer")
    self.assertEqual(r, ['bricklayer'])

    _, r = self.anagrams2.get_anagrams("bricklayers")
    self.assertEqual(r, ['bricklayers'])

    _, r = self.anagrams2.get_anagrams("bricklaying")
    self.assertEqual(r, ['bricklaying'])

    _, r = self.anagrams2.get_anagrams("bricks")
    self.assertEqual(r, ['bricks'])

    _, r = self.anagrams2.get_anagrams("bridal")
    self.assertEqual(r, ['bridal', 'ribald'])

    _, r = self.anagrams2.get_anagrams("bride")
    self.assertEqual(r, ['bride'])

    _, r = self.anagrams2.get_anagrams("bridegroom")
    self.assertEqual(r, ['bridegroom'])

    _, r = self.anagrams2.get_anagrams("brides")
    self.assertEqual(r, ['brides', 'debris'])

    _, r = self.anagrams2.get_anagrams("bridesmaid")
    self.assertEqual(r, ['bridesmaid'])

    _, r = self.anagrams2.get_anagrams("bridesmaids")
    self.assertEqual(r, ['bridesmaids'])

    _, r = self.anagrams2.get_anagrams("bridewell")
    self.assertEqual(r, ['bridewell'])

    _, r = self.anagrams2.get_anagrams("bridge")
    self.assertEqual(r, ['bridge'])

    _, r = self.anagrams2.get_anagrams("bridgeable")
    self.assertEqual(r, ['bridgeable'])

    _, r = self.anagrams2.get_anagrams("bridged")
    self.assertEqual(r, ['bridged'])

    _, r = self.anagrams2.get_anagrams("bridgehead")
    self.assertEqual(r, ['bridgehead'])

    _, r = self.anagrams2.get_anagrams("bridgeheads")
    self.assertEqual(r, ['bridgeheads'])

    _, r = self.anagrams2.get_anagrams("bridgeport")
    self.assertEqual(r, ['bridgeport'])

    _, r = self.anagrams2.get_anagrams("bridges")
    self.assertEqual(r, ['bridges'])

    _, r = self.anagrams2.get_anagrams("bridget")
    self.assertEqual(r, ['bridget'])

    _, r = self.anagrams2.get_anagrams("bridgetown")
    self.assertEqual(r, ['bridgetown'])

    _, r = self.anagrams2.get_anagrams("bridgewater")
    self.assertEqual(r, ['bridgewater'])

    _, r = self.anagrams2.get_anagrams("bridgework")
    self.assertEqual(r, ['bridgework'])

    _, r = self.anagrams2.get_anagrams("bridging")
    self.assertEqual(r, ['bridging'])

    _, r = self.anagrams2.get_anagrams("bridle")
    self.assertEqual(r, ['bridle'])

    _, r = self.anagrams2.get_anagrams("bridled")
    self.assertEqual(r, ['bridled'])

    _, r = self.anagrams2.get_anagrams("bridles")
    self.assertEqual(r, ['bridles'])

    _, r = self.anagrams2.get_anagrams("bridling")
    self.assertEqual(r, ['bridling'])

    _, r = self.anagrams2.get_anagrams("brie")
    self.assertEqual(r, ['bier', 'brie'])

    _, r = self.anagrams2.get_anagrams("brief")
    self.assertEqual(r, ['brief', 'fiber'])

    _, r = self.anagrams2.get_anagrams("briefcase")
    self.assertEqual(r, ['briefcase'])

    _, r = self.anagrams2.get_anagrams("briefcases")
    self.assertEqual(r, ['briefcases'])

    _, r = self.anagrams2.get_anagrams("briefed")
    self.assertEqual(r, ['briefed', 'debrief'])

    _, r = self.anagrams2.get_anagrams("briefer")
    self.assertEqual(r, ['briefer'])

    _, r = self.anagrams2.get_anagrams("briefest")
    self.assertEqual(r, ['briefest'])

    _, r = self.anagrams2.get_anagrams("briefing")
    self.assertEqual(r, ['briefing'])

    _, r = self.anagrams2.get_anagrams("briefings")
    self.assertEqual(r, ['briefings'])

    _, r = self.anagrams2.get_anagrams("briefly")
    self.assertEqual(r, ['briefly'])

    _, r = self.anagrams2.get_anagrams("briefness")
    self.assertEqual(r, ['briefness'])

    _, r = self.anagrams2.get_anagrams("briefs")
    self.assertEqual(r, ['briefs', 'fibers'])

    _, r = self.anagrams2.get_anagrams("brien")
    self.assertEqual(r, ['brien', 'brine'])

    _, r = self.anagrams2.get_anagrams("brier")
    self.assertEqual(r, ['brier'])

    _, r = self.anagrams2.get_anagrams("brig")
    self.assertEqual(r, ['brig'])

    _, r = self.anagrams2.get_anagrams("brigade")
    self.assertEqual(r, ['abridge', 'brigade'])

    _, r = self.anagrams2.get_anagrams("brigades")
    self.assertEqual(r, ['abridges', 'brigades'])

    _, r = self.anagrams2.get_anagrams("brigadier")
    self.assertEqual(r, ['brigadier'])

    _, r = self.anagrams2.get_anagrams("brigadiers")
    self.assertEqual(r, ['brigadiers'])

    _, r = self.anagrams2.get_anagrams("brigadoon")
    self.assertEqual(r, ['brigadoon'])

    _, r = self.anagrams2.get_anagrams("brigantine")
    self.assertEqual(r, ['brigantine'])

    _, r = self.anagrams2.get_anagrams("briggs")
    self.assertEqual(r, ['briggs'])

    _, r = self.anagrams2.get_anagrams("brigham")
    self.assertEqual(r, ['brigham'])

    _, r = self.anagrams2.get_anagrams("bright")
    self.assertEqual(r, ['bright'])

    _, r = self.anagrams2.get_anagrams("brighten")
    self.assertEqual(r, ['brighten'])

    _, r = self.anagrams2.get_anagrams("brightened")
    self.assertEqual(r, ['brightened'])

    _, r = self.anagrams2.get_anagrams("brightener")
    self.assertEqual(r, ['brightener'])

    _, r = self.anagrams2.get_anagrams("brighteners")
    self.assertEqual(r, ['brighteners'])

    _, r = self.anagrams2.get_anagrams("brightening")
    self.assertEqual(r, ['brightening'])

    _, r = self.anagrams2.get_anagrams("brightens")
    self.assertEqual(r, ['brightens'])

    _, r = self.anagrams2.get_anagrams("brighter")
    self.assertEqual(r, ['brighter'])

    _, r = self.anagrams2.get_anagrams("brightest")
    self.assertEqual(r, ['brightest'])

    _, r = self.anagrams2.get_anagrams("brightly")
    self.assertEqual(r, ['brightly'])

    _, r = self.anagrams2.get_anagrams("brightness")
    self.assertEqual(r, ['brightness'])

    _, r = self.anagrams2.get_anagrams("brighton")
    self.assertEqual(r, ['brighton'])

    _, r = self.anagrams2.get_anagrams("brigs")
    self.assertEqual(r, ['brigs'])

    _, r = self.anagrams2.get_anagrams("brilliance")
    self.assertEqual(r, ['brilliance'])

    _, r = self.anagrams2.get_anagrams("brilliancy")
    self.assertEqual(r, ['brilliancy'])

    _, r = self.anagrams2.get_anagrams("brilliant")
    self.assertEqual(r, ['brilliant'])

    _, r = self.anagrams2.get_anagrams("brilliantly")
    self.assertEqual(r, ['brilliantly'])

    _, r = self.anagrams2.get_anagrams("brillouin")
    self.assertEqual(r, ['brillouin'])

    _, r = self.anagrams2.get_anagrams("brim")
    self.assertEqual(r, ['brim'])

    _, r = self.anagrams2.get_anagrams("brimful")
    self.assertEqual(r, ['brimful'])

    _, r = self.anagrams2.get_anagrams("brimmed")
    self.assertEqual(r, ['brimmed'])

    _, r = self.anagrams2.get_anagrams("brimming")
    self.assertEqual(r, ['brimming'])

    _, r = self.anagrams2.get_anagrams("brimstone")
    self.assertEqual(r, ['brimstone'])

    _, r = self.anagrams2.get_anagrams("brindisi")
    self.assertEqual(r, ['brindisi'])

    _, r = self.anagrams2.get_anagrams("brindle")
    self.assertEqual(r, ['blinder', 'brindle'])

    _, r = self.anagrams2.get_anagrams("brindled")
    self.assertEqual(r, ['brindled'])

    _, r = self.anagrams2.get_anagrams("brine")
    self.assertEqual(r, ['brien', 'brine'])

    _, r = self.anagrams2.get_anagrams("bring")
    self.assertEqual(r, ['bring'])

    _, r = self.anagrams2.get_anagrams("bringer")
    self.assertEqual(r, ['bringer'])

    _, r = self.anagrams2.get_anagrams("bringers")
    self.assertEqual(r, ['bringers'])

    _, r = self.anagrams2.get_anagrams("bringing")
    self.assertEqual(r, ['bringing'])

    _, r = self.anagrams2.get_anagrams("brings")
    self.assertEqual(r, ['brings'])

    _, r = self.anagrams2.get_anagrams("brink")
    self.assertEqual(r, ['brink'])

    _, r = self.anagrams2.get_anagrams("brinkley")
    self.assertEqual(r, ['brinkley'])

    _, r = self.anagrams2.get_anagrams("brinkmanship")
    self.assertEqual(r, ['brinkmanship'])

    _, r = self.anagrams2.get_anagrams("briny")
    self.assertEqual(r, ['briny'])

    _, r = self.anagrams2.get_anagrams("brisbane")
    self.assertEqual(r, ['brisbane'])

    _, r = self.anagrams2.get_anagrams("brisk")
    self.assertEqual(r, ['brisk'])

    _, r = self.anagrams2.get_anagrams("brisker")
    self.assertEqual(r, ['brisker'])

    _, r = self.anagrams2.get_anagrams("briskly")
    self.assertEqual(r, ['briskly'])

    _, r = self.anagrams2.get_anagrams("briskness")
    self.assertEqual(r, ['briskness'])

    _, r = self.anagrams2.get_anagrams("bristle")
    self.assertEqual(r, ['blister', 'bristle'])

    _, r = self.anagrams2.get_anagrams("bristled")
    self.assertEqual(r, ['bristled'])

    _, r = self.anagrams2.get_anagrams("bristles")
    self.assertEqual(r, ['blisters', 'bristles'])

    _, r = self.anagrams2.get_anagrams("bristling")
    self.assertEqual(r, ['bristling'])

    _, r = self.anagrams2.get_anagrams("bristol")
    self.assertEqual(r, ['bristol'])

    _, r = self.anagrams2.get_anagrams("britain")
    self.assertEqual(r, ['britain'])

    _, r = self.anagrams2.get_anagrams("britannic")
    self.assertEqual(r, ['britannic'])

    _, r = self.anagrams2.get_anagrams("britannica")
    self.assertEqual(r, ['britannica'])

    _, r = self.anagrams2.get_anagrams("britches")
    self.assertEqual(r, ['britches'])

    _, r = self.anagrams2.get_anagrams("british")
    self.assertEqual(r, ['british'])

    _, r = self.anagrams2.get_anagrams("britisher")
    self.assertEqual(r, ['britisher'])

    _, r = self.anagrams2.get_anagrams("britishly")
    self.assertEqual(r, ['britishly'])

    _, r = self.anagrams2.get_anagrams("briton")
    self.assertEqual(r, ['briton'])

    _, r = self.anagrams2.get_anagrams("britons")
    self.assertEqual(r, ['britons'])

    _, r = self.anagrams2.get_anagrams("brittany")
    self.assertEqual(r, ['brittany'])

    _, r = self.anagrams2.get_anagrams("britten")
    self.assertEqual(r, ['britten'])

    _, r = self.anagrams2.get_anagrams("brittle")
    self.assertEqual(r, ['brittle'])

    _, r = self.anagrams2.get_anagrams("brittleness")
    self.assertEqual(r, ['brittleness'])

    _, r = self.anagrams2.get_anagrams("broach")
    self.assertEqual(r, ['broach'])

    _, r = self.anagrams2.get_anagrams("broached")
    self.assertEqual(r, ['broached'])

    _, r = self.anagrams2.get_anagrams("broaches")
    self.assertEqual(r, ['broaches'])

    _, r = self.anagrams2.get_anagrams("broaching")
    self.assertEqual(r, ['broaching'])

    _, r = self.anagrams2.get_anagrams("broad")
    self.assertEqual(r, ['board', 'broad'])

    _, r = self.anagrams2.get_anagrams("broadband")
    self.assertEqual(r, ['broadband'])

    _, r = self.anagrams2.get_anagrams("broadcast")
    self.assertEqual(r, ['broadcast'])

    _, r = self.anagrams2.get_anagrams("broadcasted")
    self.assertEqual(r, ['broadcasted'])

    _, r = self.anagrams2.get_anagrams("broadcaster")
    self.assertEqual(r, ['broadcaster', 'rebroadcast'])

    _, r = self.anagrams2.get_anagrams("broadcasters")
    self.assertEqual(r, ['broadcasters', 'rebroadcasts'])

    _, r = self.anagrams2.get_anagrams("broadcasting")
    self.assertEqual(r, ['broadcasting'])

    _, r = self.anagrams2.get_anagrams("broadcastings")
    self.assertEqual(r, ['broadcastings'])

    _, r = self.anagrams2.get_anagrams("broadcasts")
    self.assertEqual(r, ['broadcasts'])

    _, r = self.anagrams2.get_anagrams("broaden")
    self.assertEqual(r, ['broaden'])

    _, r = self.anagrams2.get_anagrams("broadened")
    self.assertEqual(r, ['broadened'])

    _, r = self.anagrams2.get_anagrams("broadener")
    self.assertEqual(r, ['broadener'])

    _, r = self.anagrams2.get_anagrams("broadeners")
    self.assertEqual(r, ['broadeners'])

    _, r = self.anagrams2.get_anagrams("broadening")
    self.assertEqual(r, ['broadening'])

    _, r = self.anagrams2.get_anagrams("broadenings")
    self.assertEqual(r, ['broadenings'])

    _, r = self.anagrams2.get_anagrams("broadens")
    self.assertEqual(r, ['broadens'])

    _, r = self.anagrams2.get_anagrams("broader")
    self.assertEqual(r, ['boarder', 'broader'])

    _, r = self.anagrams2.get_anagrams("broadest")
    self.assertEqual(r, ['broadest'])

    _, r = self.anagrams2.get_anagrams("broadly")
    self.assertEqual(r, ['broadly'])

    _, r = self.anagrams2.get_anagrams("broadness")
    self.assertEqual(r, ['broadness'])

    _, r = self.anagrams2.get_anagrams("broadside")
    self.assertEqual(r, ['broadside', 'sideboard'])

    _, r = self.anagrams2.get_anagrams("broadway")
    self.assertEqual(r, ['broadway'])

    _, r = self.anagrams2.get_anagrams("brocade")
    self.assertEqual(r, ['brocade'])

    _, r = self.anagrams2.get_anagrams("brocaded")
    self.assertEqual(r, ['brocaded'])

    _, r = self.anagrams2.get_anagrams("broccoli")
    self.assertEqual(r, ['broccoli'])

    _, r = self.anagrams2.get_anagrams("brochure")
    self.assertEqual(r, ['brochure'])

    _, r = self.anagrams2.get_anagrams("brochures")
    self.assertEqual(r, ['brochures'])

    _, r = self.anagrams2.get_anagrams("brock")
    self.assertEqual(r, ['brock'])

    _, r = self.anagrams2.get_anagrams("broglie")
    self.assertEqual(r, ['broglie'])

    _, r = self.anagrams2.get_anagrams("broil")
    self.assertEqual(r, ['broil'])

    _, r = self.anagrams2.get_anagrams("broiled")
    self.assertEqual(r, ['broiled'])

    _, r = self.anagrams2.get_anagrams("broiler")
    self.assertEqual(r, ['broiler'])

    _, r = self.anagrams2.get_anagrams("broilers")
    self.assertEqual(r, ['broilers'])

    _, r = self.anagrams2.get_anagrams("broiling")
    self.assertEqual(r, ['broiling'])

    _, r = self.anagrams2.get_anagrams("broils")
    self.assertEqual(r, ['broils'])

    _, r = self.anagrams2.get_anagrams("broke")
    self.assertEqual(r, ['broke'])

    _, r = self.anagrams2.get_anagrams("broken")
    self.assertEqual(r, ['broken'])

    _, r = self.anagrams2.get_anagrams("brokenly")
    self.assertEqual(r, ['brokenly'])

    _, r = self.anagrams2.get_anagrams("brokenness")
    self.assertEqual(r, ['brokenness'])

    _, r = self.anagrams2.get_anagrams("broker")
    self.assertEqual(r, ['broker'])

    _, r = self.anagrams2.get_anagrams("brokerage")
    self.assertEqual(r, ['brokerage'])

    _, r = self.anagrams2.get_anagrams("brokers")
    self.assertEqual(r, ['brokers'])

    _, r = self.anagrams2.get_anagrams("bromfield")
    self.assertEqual(r, ['bromfield'])

    _, r = self.anagrams2.get_anagrams("bromide")
    self.assertEqual(r, ['bromide'])

    _, r = self.anagrams2.get_anagrams("bromides")
    self.assertEqual(r, ['bromides'])

    _, r = self.anagrams2.get_anagrams("bromine")
    self.assertEqual(r, ['bromine'])

    _, r = self.anagrams2.get_anagrams("bromley")
    self.assertEqual(r, ['bromley'])

    _, r = self.anagrams2.get_anagrams("bronchi")
    self.assertEqual(r, ['bronchi'])

    _, r = self.anagrams2.get_anagrams("bronchial")
    self.assertEqual(r, ['bronchial'])

    _, r = self.anagrams2.get_anagrams("bronchiole")
    self.assertEqual(r, ['bronchiole'])

    _, r = self.anagrams2.get_anagrams("bronchioles")
    self.assertEqual(r, ['bronchioles'])

    _, r = self.anagrams2.get_anagrams("bronchitis")
    self.assertEqual(r, ['bronchitis'])

    _, r = self.anagrams2.get_anagrams("bronchus")
    self.assertEqual(r, ['bronchus'])

    _, r = self.anagrams2.get_anagrams("brontosaurus")
    self.assertEqual(r, ['brontosaurus'])

    _, r = self.anagrams2.get_anagrams("bronx")
    self.assertEqual(r, ['bronx'])

    _, r = self.anagrams2.get_anagrams("bronze")
    self.assertEqual(r, ['bronze'])

    _, r = self.anagrams2.get_anagrams("bronzed")
    self.assertEqual(r, ['bronzed'])

    _, r = self.anagrams2.get_anagrams("bronzes")
    self.assertEqual(r, ['bronzes'])

    _, r = self.anagrams2.get_anagrams("brooch")
    self.assertEqual(r, ['brooch'])

    _, r = self.anagrams2.get_anagrams("brooches")
    self.assertEqual(r, ['brooches'])

    _, r = self.anagrams2.get_anagrams("brood")
    self.assertEqual(r, ['brood'])

    _, r = self.anagrams2.get_anagrams("brooder")
    self.assertEqual(r, ['brooder'])

    _, r = self.anagrams2.get_anagrams("brooding")
    self.assertEqual(r, ['brooding'])

    _, r = self.anagrams2.get_anagrams("broods")
    self.assertEqual(r, ['broods'])

    _, r = self.anagrams2.get_anagrams("brook")
    self.assertEqual(r, ['brook'])

    _, r = self.anagrams2.get_anagrams("brookdale")
    self.assertEqual(r, ['brookdale'])

    _, r = self.anagrams2.get_anagrams("brooke")
    self.assertEqual(r, ['booker', 'brooke'])

    _, r = self.anagrams2.get_anagrams("brooked")
    self.assertEqual(r, ['brooked'])

    _, r = self.anagrams2.get_anagrams("brookfield")
    self.assertEqual(r, ['brookfield'])

    _, r = self.anagrams2.get_anagrams("brookhaven")
    self.assertEqual(r, ['brookhaven'])

    _, r = self.anagrams2.get_anagrams("brookline")
    self.assertEqual(r, ['brookline'])

    _, r = self.anagrams2.get_anagrams("brooklyn")
    self.assertEqual(r, ['brooklyn'])

    _, r = self.anagrams2.get_anagrams("brookmont")
    self.assertEqual(r, ['brookmont'])

    _, r = self.anagrams2.get_anagrams("brooks")
    self.assertEqual(r, ['brooks'])

    _, r = self.anagrams2.get_anagrams("broom")
    self.assertEqual(r, ['broom'])

    _, r = self.anagrams2.get_anagrams("brooms")
    self.assertEqual(r, ['brooms'])

    _, r = self.anagrams2.get_anagrams("broomstick")
    self.assertEqual(r, ['broomstick'])

    _, r = self.anagrams2.get_anagrams("broomsticks")
    self.assertEqual(r, ['broomsticks'])

    _, r = self.anagrams2.get_anagrams("broth")
    self.assertEqual(r, ['broth', 'throb'])

    _, r = self.anagrams2.get_anagrams("brothel")
    self.assertEqual(r, ['brothel'])

    _, r = self.anagrams2.get_anagrams("brothels")
    self.assertEqual(r, ['brothels'])

    _, r = self.anagrams2.get_anagrams("brother")
    self.assertEqual(r, ['brother'])

    _, r = self.anagrams2.get_anagrams("brotherhood")
    self.assertEqual(r, ['brotherhood'])

    _, r = self.anagrams2.get_anagrams("brotherliness")
    self.assertEqual(r, ['brotherliness'])

    _, r = self.anagrams2.get_anagrams("brotherly")
    self.assertEqual(r, ['brotherly'])

    _, r = self.anagrams2.get_anagrams("brothers")
    self.assertEqual(r, ['brothers'])

    _, r = self.anagrams2.get_anagrams("brought")
    self.assertEqual(r, ['brought'])

    _, r = self.anagrams2.get_anagrams("brow")
    self.assertEqual(r, ['brow'])

    _, r = self.anagrams2.get_anagrams("browbeat")
    self.assertEqual(r, ['browbeat'])

    _, r = self.anagrams2.get_anagrams("browbeaten")
    self.assertEqual(r, ['browbeaten'])

    _, r = self.anagrams2.get_anagrams("browbeating")
    self.assertEqual(r, ['browbeating'])

    _, r = self.anagrams2.get_anagrams("browbeats")
    self.assertEqual(r, ['browbeats'])

    _, r = self.anagrams2.get_anagrams("brown")
    self.assertEqual(r, ['brown'])

    _, r = self.anagrams2.get_anagrams("browne")
    self.assertEqual(r, ['browne'])

    _, r = self.anagrams2.get_anagrams("browned")
    self.assertEqual(r, ['browned'])

    _, r = self.anagrams2.get_anagrams("brownell")
    self.assertEqual(r, ['brownell'])

    _, r = self.anagrams2.get_anagrams("browner")
    self.assertEqual(r, ['browner'])

    _, r = self.anagrams2.get_anagrams("brownest")
    self.assertEqual(r, ['brownest'])

    _, r = self.anagrams2.get_anagrams("brownian")
    self.assertEqual(r, ['brownian'])

    _, r = self.anagrams2.get_anagrams("brownie")
    self.assertEqual(r, ['brownie'])

    _, r = self.anagrams2.get_anagrams("brownies")
    self.assertEqual(r, ['brownies'])

    _, r = self.anagrams2.get_anagrams("browning")
    self.assertEqual(r, ['browning'])

    _, r = self.anagrams2.get_anagrams("brownish")
    self.assertEqual(r, ['brownish'])

    _, r = self.anagrams2.get_anagrams("brownness")
    self.assertEqual(r, ['brownness'])

    _, r = self.anagrams2.get_anagrams("browns")
    self.assertEqual(r, ['browns'])

    _, r = self.anagrams2.get_anagrams("brows")
    self.assertEqual(r, ['brows'])

    _, r = self.anagrams2.get_anagrams("browse")
    self.assertEqual(r, ['bowers', 'browse'])

    _, r = self.anagrams2.get_anagrams("browsing")
    self.assertEqual(r, ['browsing'])

    _, r = self.anagrams2.get_anagrams("bruce")
    self.assertEqual(r, ['bruce'])

    _, r = self.anagrams2.get_anagrams("bruckner")
    self.assertEqual(r, ['bruckner'])

    _, r = self.anagrams2.get_anagrams("bruegel")
    self.assertEqual(r, ['bruegel'])

    _, r = self.anagrams2.get_anagrams("bruise")
    self.assertEqual(r, ['bruise', 'buries', 'busier', 'rubies'])

    _, r = self.anagrams2.get_anagrams("bruised")
    self.assertEqual(r, ['bruised'])

    _, r = self.anagrams2.get_anagrams("bruises")
    self.assertEqual(r, ['bruises'])

    _, r = self.anagrams2.get_anagrams("bruising")
    self.assertEqual(r, ['bruising'])

    _, r = self.anagrams2.get_anagrams("brumidi")
    self.assertEqual(r, ['brumidi'])

    _, r = self.anagrams2.get_anagrams("brunch")
    self.assertEqual(r, ['brunch'])

    _, r = self.anagrams2.get_anagrams("brunches")
    self.assertEqual(r, ['brunches'])

    _, r = self.anagrams2.get_anagrams("brunette")
    self.assertEqual(r, ['brunette'])

    _, r = self.anagrams2.get_anagrams("brunhilde")
    self.assertEqual(r, ['brunhilde'])

    _, r = self.anagrams2.get_anagrams("bruno")
    self.assertEqual(r, ['bruno'])

    _, r = self.anagrams2.get_anagrams("brunswick")
    self.assertEqual(r, ['brunswick'])

    _, r = self.anagrams2.get_anagrams("brunt")
    self.assertEqual(r, ['brunt', 'burnt'])

    _, r = self.anagrams2.get_anagrams("brush")
    self.assertEqual(r, ['brush', 'shrub'])

    _, r = self.anagrams2.get_anagrams("brushed")
    self.assertEqual(r, ['brushed'])

    _, r = self.anagrams2.get_anagrams("brushes")
    self.assertEqual(r, ['brushes'])

    _, r = self.anagrams2.get_anagrams("brushfire")
    self.assertEqual(r, ['brushfire'])

    _, r = self.anagrams2.get_anagrams("brushfires")
    self.assertEqual(r, ['brushfires'])

    _, r = self.anagrams2.get_anagrams("brushing")
    self.assertEqual(r, ['brushing'])

    _, r = self.anagrams2.get_anagrams("brushlike")
    self.assertEqual(r, ['brushlike'])

    _, r = self.anagrams2.get_anagrams("brushy")
    self.assertEqual(r, ['brushy'])

    _, r = self.anagrams2.get_anagrams("brusque")
    self.assertEqual(r, ['brusque'])

    _, r = self.anagrams2.get_anagrams("brusquely")
    self.assertEqual(r, ['brusquely'])

    _, r = self.anagrams2.get_anagrams("brussels")
    self.assertEqual(r, ['brussels'])

    _, r = self.anagrams2.get_anagrams("brutal")
    self.assertEqual(r, ['brutal'])

    _, r = self.anagrams2.get_anagrams("brutalities")
    self.assertEqual(r, ['brutalities'])

    _, r = self.anagrams2.get_anagrams("brutality")
    self.assertEqual(r, ['brutality'])

    _, r = self.anagrams2.get_anagrams("brutalize")
    self.assertEqual(r, ['brutalize'])

    _, r = self.anagrams2.get_anagrams("brutalized")
    self.assertEqual(r, ['brutalized'])

    _, r = self.anagrams2.get_anagrams("brutalizes")
    self.assertEqual(r, ['brutalizes'])

    _, r = self.anagrams2.get_anagrams("brutalizing")
    self.assertEqual(r, ['brutalizing'])

    _, r = self.anagrams2.get_anagrams("brutally")
    self.assertEqual(r, ['brutally'])

    _, r = self.anagrams2.get_anagrams("brute")
    self.assertEqual(r, ['brute', 'tuber'])

    _, r = self.anagrams2.get_anagrams("brutes")
    self.assertEqual(r, ['brutes', 'buster', 'tubers'])

    _, r = self.anagrams2.get_anagrams("brutish")
    self.assertEqual(r, ['brutish'])

    _, r = self.anagrams2.get_anagrams("bruxelles")
    self.assertEqual(r, ['bruxelles'])

    _, r = self.anagrams2.get_anagrams("bryan")
    self.assertEqual(r, ['bryan'])

    _, r = self.anagrams2.get_anagrams("bryant")
    self.assertEqual(r, ['bryant'])

    _, r = self.anagrams2.get_anagrams("bryce")
    self.assertEqual(r, ['bryce'])

    _, r = self.anagrams2.get_anagrams("bryn")
    self.assertEqual(r, ['bryn'])

    _, r = self.anagrams2.get_anagrams("bubble")
    self.assertEqual(r, ['bubble'])

    _, r = self.anagrams2.get_anagrams("bubbled")
    self.assertEqual(r, ['bubbled'])

    _, r = self.anagrams2.get_anagrams("bubbles")
    self.assertEqual(r, ['bubbles'])

    _, r = self.anagrams2.get_anagrams("bubbling")
    self.assertEqual(r, ['bubbling'])

    _, r = self.anagrams2.get_anagrams("bubbly")
    self.assertEqual(r, ['bubbly'])

    _, r = self.anagrams2.get_anagrams("buchanan")
    self.assertEqual(r, ['buchanan'])

    _, r = self.anagrams2.get_anagrams("bucharest")
    self.assertEqual(r, ['bucharest'])

    _, r = self.anagrams2.get_anagrams("buchenwald")
    self.assertEqual(r, ['buchenwald'])

    _, r = self.anagrams2.get_anagrams("buchwald")
    self.assertEqual(r, ['buchwald'])

    _, r = self.anagrams2.get_anagrams("buck")
    self.assertEqual(r, ['buck'])

    _, r = self.anagrams2.get_anagrams("buckboard")
    self.assertEqual(r, ['buckboard'])

    _, r = self.anagrams2.get_anagrams("buckboards")
    self.assertEqual(r, ['buckboards'])

    _, r = self.anagrams2.get_anagrams("bucked")
    self.assertEqual(r, ['bucked'])

    _, r = self.anagrams2.get_anagrams("bucket")
    self.assertEqual(r, ['bucket'])

    _, r = self.anagrams2.get_anagrams("buckets")
    self.assertEqual(r, ['buckets'])

    _, r = self.anagrams2.get_anagrams("bucking")
    self.assertEqual(r, ['bucking'])

    _, r = self.anagrams2.get_anagrams("buckle")
    self.assertEqual(r, ['buckle'])

    _, r = self.anagrams2.get_anagrams("buckled")
    self.assertEqual(r, ['buckled'])

    _, r = self.anagrams2.get_anagrams("buckler")
    self.assertEqual(r, ['buckler'])

    _, r = self.anagrams2.get_anagrams("buckles")
    self.assertEqual(r, ['buckles'])

    _, r = self.anagrams2.get_anagrams("buckley")
    self.assertEqual(r, ['buckley'])

    _, r = self.anagrams2.get_anagrams("buckling")
    self.assertEqual(r, ['buckling'])

    _, r = self.anagrams2.get_anagrams("bucknell")
    self.assertEqual(r, ['bucknell'])

    _, r = self.anagrams2.get_anagrams("bucks")
    self.assertEqual(r, ['bucks'])

    _, r = self.anagrams2.get_anagrams("buckshot")
    self.assertEqual(r, ['buckshot'])

    _, r = self.anagrams2.get_anagrams("buckskin")
    self.assertEqual(r, ['buckskin'])

    _, r = self.anagrams2.get_anagrams("buckskins")
    self.assertEqual(r, ['buckskins'])

    _, r = self.anagrams2.get_anagrams("buckwheat")
    self.assertEqual(r, ['buckwheat'])

    _, r = self.anagrams2.get_anagrams("bucky")
    self.assertEqual(r, ['bucky'])

    _, r = self.anagrams2.get_anagrams("bucolic")
    self.assertEqual(r, ['bucolic'])

    _, r = self.anagrams2.get_anagrams("bud")
    self.assertEqual(r, ['bud', 'dub'])

    _, r = self.anagrams2.get_anagrams("budapest")
    self.assertEqual(r, ['budapest'])

    _, r = self.anagrams2.get_anagrams("budd")
    self.assertEqual(r, ['budd'])

    _, r = self.anagrams2.get_anagrams("budded")
    self.assertEqual(r, ['budded'])

    _, r = self.anagrams2.get_anagrams("buddha")
    self.assertEqual(r, ['buddha'])

    _, r = self.anagrams2.get_anagrams("buddhism")
    self.assertEqual(r, ['buddhism'])

    _, r = self.anagrams2.get_anagrams("buddhist")
    self.assertEqual(r, ['buddhist'])

    _, r = self.anagrams2.get_anagrams("buddhists")
    self.assertEqual(r, ['buddhists'])

    _, r = self.anagrams2.get_anagrams("buddies")
    self.assertEqual(r, ['buddies'])

    _, r = self.anagrams2.get_anagrams("budding")
    self.assertEqual(r, ['budding'])

    _, r = self.anagrams2.get_anagrams("buddy")
    self.assertEqual(r, ['buddy'])

    _, r = self.anagrams2.get_anagrams("budge")
    self.assertEqual(r, ['budge', 'debug'])

    _, r = self.anagrams2.get_anagrams("budged")
    self.assertEqual(r, ['budged'])

    _, r = self.anagrams2.get_anagrams("budges")
    self.assertEqual(r, ['budges', 'debugs'])

    _, r = self.anagrams2.get_anagrams("budget")
    self.assertEqual(r, ['budget'])

    _, r = self.anagrams2.get_anagrams("budgetary")
    self.assertEqual(r, ['budgetary'])

    _, r = self.anagrams2.get_anagrams("budgeted")
    self.assertEqual(r, ['budgeted'])

    _, r = self.anagrams2.get_anagrams("budgeter")
    self.assertEqual(r, ['budgeter'])

    _, r = self.anagrams2.get_anagrams("budgeters")
    self.assertEqual(r, ['budgeters'])

    _, r = self.anagrams2.get_anagrams("budgeting")
    self.assertEqual(r, ['budgeting'])

    _, r = self.anagrams2.get_anagrams("budgets")
    self.assertEqual(r, ['budgets'])

    _, r = self.anagrams2.get_anagrams("budging")
    self.assertEqual(r, ['budging'])

    _, r = self.anagrams2.get_anagrams("buds")
    self.assertEqual(r, ['buds', 'dubs'])

    _, r = self.anagrams2.get_anagrams("budweiser")
    self.assertEqual(r, ['budweiser'])

    _, r = self.anagrams2.get_anagrams("budweisers")
    self.assertEqual(r, ['budweisers'])

    _, r = self.anagrams2.get_anagrams("buehring")
    self.assertEqual(r, ['buehring'])

    _, r = self.anagrams2.get_anagrams("buena")
    self.assertEqual(r, ['buena'])

    _, r = self.anagrams2.get_anagrams("buenos")
    self.assertEqual(r, ['buenos'])

    _, r = self.anagrams2.get_anagrams("buff")
    self.assertEqual(r, ['buff'])

    _, r = self.anagrams2.get_anagrams("buffalo")
    self.assertEqual(r, ['buffalo'])

    _, r = self.anagrams2.get_anagrams("buffaloes")
    self.assertEqual(r, ['buffaloes'])

    _, r = self.anagrams2.get_anagrams("buffer")
    self.assertEqual(r, ['buffer', 'rebuff'])

    _, r = self.anagrams2.get_anagrams("buffered")
    self.assertEqual(r, ['buffered', 'rebuffed'])

    _, r = self.anagrams2.get_anagrams("buffering")
    self.assertEqual(r, ['buffering'])

    _, r = self.anagrams2.get_anagrams("buffers")
    self.assertEqual(r, ['buffers'])

    _, r = self.anagrams2.get_anagrams("buffet")
    self.assertEqual(r, ['buffet'])

    _, r = self.anagrams2.get_anagrams("buffeted")
    self.assertEqual(r, ['buffeted'])

    _, r = self.anagrams2.get_anagrams("buffeting")
    self.assertEqual(r, ['buffeting'])

    _, r = self.anagrams2.get_anagrams("buffetings")
    self.assertEqual(r, ['buffetings'])

    _, r = self.anagrams2.get_anagrams("buffets")
    self.assertEqual(r, ['buffets'])

    _, r = self.anagrams2.get_anagrams("buffoon")
    self.assertEqual(r, ['buffoon'])

    _, r = self.anagrams2.get_anagrams("buffoons")
    self.assertEqual(r, ['buffoons'])

    _, r = self.anagrams2.get_anagrams("buffs")
    self.assertEqual(r, ['buffs'])

    _, r = self.anagrams2.get_anagrams("bug")
    self.assertEqual(r, ['bug'])

    _, r = self.anagrams2.get_anagrams("bugaboo")
    self.assertEqual(r, ['bugaboo'])

    _, r = self.anagrams2.get_anagrams("bugatti")
    self.assertEqual(r, ['bugatti'])

    _, r = self.anagrams2.get_anagrams("bugeyed")
    self.assertEqual(r, ['bugeyed'])

    _, r = self.anagrams2.get_anagrams("bugged")
    self.assertEqual(r, ['bugged'])

    _, r = self.anagrams2.get_anagrams("bugger")
    self.assertEqual(r, ['bugger'])

    _, r = self.anagrams2.get_anagrams("buggers")
    self.assertEqual(r, ['buggers'])

    _, r = self.anagrams2.get_anagrams("buggies")
    self.assertEqual(r, ['buggies'])

    _, r = self.anagrams2.get_anagrams("bugging")
    self.assertEqual(r, ['bugging'])

    _, r = self.anagrams2.get_anagrams("buggy")
    self.assertEqual(r, ['buggy'])

    _, r = self.anagrams2.get_anagrams("bugle")
    self.assertEqual(r, ['bugle', 'bulge'])

    _, r = self.anagrams2.get_anagrams("bugled")
    self.assertEqual(r, ['bugled', 'bulged'])

    _, r = self.anagrams2.get_anagrams("bugler")
    self.assertEqual(r, ['bugler'])

    _, r = self.anagrams2.get_anagrams("bugles")
    self.assertEqual(r, ['bugles'])

    _, r = self.anagrams2.get_anagrams("bugling")
    self.assertEqual(r, ['bugling', 'bulging'])

    _, r = self.anagrams2.get_anagrams("bugs")
    self.assertEqual(r, ['bugs'])

    _, r = self.anagrams2.get_anagrams("buick")
    self.assertEqual(r, ['buick'])

    _, r = self.anagrams2.get_anagrams("build")
    self.assertEqual(r, ['build'])

    _, r = self.anagrams2.get_anagrams("builder")
    self.assertEqual(r, ['builder', 'rebuild'])

    _, r = self.anagrams2.get_anagrams("builders")
    self.assertEqual(r, ['builders', 'rebuilds'])

    _, r = self.anagrams2.get_anagrams("building")
    self.assertEqual(r, ['building'])

    _, r = self.anagrams2.get_anagrams("buildings")
    self.assertEqual(r, ['buildings'])

    _, r = self.anagrams2.get_anagrams("builds")
    self.assertEqual(r, ['builds'])

    _, r = self.anagrams2.get_anagrams("buildup")
    self.assertEqual(r, ['buildup'])

    _, r = self.anagrams2.get_anagrams("buildups")
    self.assertEqual(r, ['buildups'])

    _, r = self.anagrams2.get_anagrams("built")
    self.assertEqual(r, ['built'])

    _, r = self.anagrams2.get_anagrams("builtin")
    self.assertEqual(r, ['builtin'])

    _, r = self.anagrams2.get_anagrams("bujumbura")
    self.assertEqual(r, ['bujumbura'])

    _, r = self.anagrams2.get_anagrams("bulb")
    self.assertEqual(r, ['bulb'])

    _, r = self.anagrams2.get_anagrams("bulba")
    self.assertEqual(r, ['babul', 'bulba'])

    _, r = self.anagrams2.get_anagrams("bulbs")
    self.assertEqual(r, ['bulbs'])

    _, r = self.anagrams2.get_anagrams("bulgaria")
    self.assertEqual(r, ['bulgaria'])

    _, r = self.anagrams2.get_anagrams("bulgarian")
    self.assertEqual(r, ['bulgarian'])

    _, r = self.anagrams2.get_anagrams("bulge")
    self.assertEqual(r, ['bugle', 'bulge'])

    _, r = self.anagrams2.get_anagrams("bulged")
    self.assertEqual(r, ['bugled', 'bulged'])

    _, r = self.anagrams2.get_anagrams("bulging")
    self.assertEqual(r, ['bugling', 'bulging'])

    _, r = self.anagrams2.get_anagrams("bulk")
    self.assertEqual(r, ['bulk'])

    _, r = self.anagrams2.get_anagrams("bulked")
    self.assertEqual(r, ['bulked'])

    _, r = self.anagrams2.get_anagrams("bulkhead")
    self.assertEqual(r, ['bulkhead'])

    _, r = self.anagrams2.get_anagrams("bulkheads")
    self.assertEqual(r, ['bulkheads'])

    _, r = self.anagrams2.get_anagrams("bulks")
    self.assertEqual(r, ['bulks'])

    _, r = self.anagrams2.get_anagrams("bulky")
    self.assertEqual(r, ['bulky'])

    _, r = self.anagrams2.get_anagrams("bull")
    self.assertEqual(r, ['bull'])

    _, r = self.anagrams2.get_anagrams("bulldog")
    self.assertEqual(r, ['bulldog'])

    _, r = self.anagrams2.get_anagrams("bulldogs")
    self.assertEqual(r, ['bulldogs'])

    _, r = self.anagrams2.get_anagrams("bulldoze")
    self.assertEqual(r, ['bulldoze'])

    _, r = self.anagrams2.get_anagrams("bulldozed")
    self.assertEqual(r, ['bulldozed'])

    _, r = self.anagrams2.get_anagrams("bulldozer")
    self.assertEqual(r, ['bulldozer'])

    _, r = self.anagrams2.get_anagrams("bulldozes")
    self.assertEqual(r, ['bulldozes'])

    _, r = self.anagrams2.get_anagrams("bulldozing")
    self.assertEqual(r, ['bulldozing'])

    _, r = self.anagrams2.get_anagrams("bulled")
    self.assertEqual(r, ['bulled'])

    _, r = self.anagrams2.get_anagrams("bullet")
    self.assertEqual(r, ['bullet'])

    _, r = self.anagrams2.get_anagrams("bulletin")
    self.assertEqual(r, ['bulletin'])

    _, r = self.anagrams2.get_anagrams("bulletins")
    self.assertEqual(r, ['bulletins'])

    _, r = self.anagrams2.get_anagrams("bullets")
    self.assertEqual(r, ['bullets'])

    _, r = self.anagrams2.get_anagrams("bullfrog")
    self.assertEqual(r, ['bullfrog'])

    _, r = self.anagrams2.get_anagrams("bullied")
    self.assertEqual(r, ['bullied'])

    _, r = self.anagrams2.get_anagrams("bullies")
    self.assertEqual(r, ['bullies'])

    _, r = self.anagrams2.get_anagrams("bulling")
    self.assertEqual(r, ['bulling'])

    _, r = self.anagrams2.get_anagrams("bullion")
    self.assertEqual(r, ['bullion'])

    _, r = self.anagrams2.get_anagrams("bullish")
    self.assertEqual(r, ['bullish'])

    _, r = self.anagrams2.get_anagrams("bullock")
    self.assertEqual(r, ['bullock'])

    _, r = self.anagrams2.get_anagrams("bulls")
    self.assertEqual(r, ['bulls'])

    _, r = self.anagrams2.get_anagrams("bullseye")
    self.assertEqual(r, ['bullseye'])

    _, r = self.anagrams2.get_anagrams("bully")
    self.assertEqual(r, ['bully'])

    _, r = self.anagrams2.get_anagrams("bullying")
    self.assertEqual(r, ['bullying'])

    _, r = self.anagrams2.get_anagrams("bulwark")
    self.assertEqual(r, ['bulwark'])

    _, r = self.anagrams2.get_anagrams("bum")
    self.assertEqual(r, ['bum'])

    _, r = self.anagrams2.get_anagrams("bumble")
    self.assertEqual(r, ['bumble'])

    _, r = self.anagrams2.get_anagrams("bumblebee")
    self.assertEqual(r, ['bumblebee'])

    _, r = self.anagrams2.get_anagrams("bumblebees")
    self.assertEqual(r, ['bumblebees'])

    _, r = self.anagrams2.get_anagrams("bumbled")
    self.assertEqual(r, ['bumbled'])

    _, r = self.anagrams2.get_anagrams("bumbler")
    self.assertEqual(r, ['bumbler'])

    _, r = self.anagrams2.get_anagrams("bumblers")
    self.assertEqual(r, ['bumblers'])

    _, r = self.anagrams2.get_anagrams("bumbles")
    self.assertEqual(r, ['bumbles'])

    _, r = self.anagrams2.get_anagrams("bumbling")
    self.assertEqual(r, ['bumbling'])

    _, r = self.anagrams2.get_anagrams("bumbry")
    self.assertEqual(r, ['bumbry'])

    _, r = self.anagrams2.get_anagrams("bummed")
    self.assertEqual(r, ['bummed'])

    _, r = self.anagrams2.get_anagrams("bumming")
    self.assertEqual(r, ['bumming'])

    _, r = self.anagrams2.get_anagrams("bump")
    self.assertEqual(r, ['bump'])

    _, r = self.anagrams2.get_anagrams("bumped")
    self.assertEqual(r, ['bumped'])

    _, r = self.anagrams2.get_anagrams("bumper")
    self.assertEqual(r, ['bumper'])

    _, r = self.anagrams2.get_anagrams("bumpers")
    self.assertEqual(r, ['bumpers'])

    _, r = self.anagrams2.get_anagrams("bumping")
    self.assertEqual(r, ['bumping'])

    _, r = self.anagrams2.get_anagrams("bumps")
    self.assertEqual(r, ['bumps'])

    _, r = self.anagrams2.get_anagrams("bumptious")
    self.assertEqual(r, ['bumptious'])

    _, r = self.anagrams2.get_anagrams("bumptiously")
    self.assertEqual(r, ['bumptiously'])

    _, r = self.anagrams2.get_anagrams("bumptiousness")
    self.assertEqual(r, ['bumptiousness'])

    _, r = self.anagrams2.get_anagrams("bums")
    self.assertEqual(r, ['bums'])

    _, r = self.anagrams2.get_anagrams("bun")
    self.assertEqual(r, ['bun'])

    _, r = self.anagrams2.get_anagrams("bunch")
    self.assertEqual(r, ['bunch'])

    _, r = self.anagrams2.get_anagrams("bunched")
    self.assertEqual(r, ['bunched'])

    _, r = self.anagrams2.get_anagrams("bunches")
    self.assertEqual(r, ['bunches'])

    _, r = self.anagrams2.get_anagrams("bunching")
    self.assertEqual(r, ['bunching'])

    _, r = self.anagrams2.get_anagrams("bundestag")
    self.assertEqual(r, ['bundestag'])

    _, r = self.anagrams2.get_anagrams("bundle")
    self.assertEqual(r, ['bundle'])

    _, r = self.anagrams2.get_anagrams("bundled")
    self.assertEqual(r, ['bundled'])

    _, r = self.anagrams2.get_anagrams("bundles")
    self.assertEqual(r, ['bundles'])

    _, r = self.anagrams2.get_anagrams("bundling")
    self.assertEqual(r, ['bundling'])

    _, r = self.anagrams2.get_anagrams("bundoora")
    self.assertEqual(r, ['bundoora'])

    _, r = self.anagrams2.get_anagrams("bundy")
    self.assertEqual(r, ['bundy'])

    _, r = self.anagrams2.get_anagrams("bungalow")
    self.assertEqual(r, ['bungalow'])

    _, r = self.anagrams2.get_anagrams("bungalows")
    self.assertEqual(r, ['bungalows'])

    _, r = self.anagrams2.get_anagrams("bungle")
    self.assertEqual(r, ['bungle'])

    _, r = self.anagrams2.get_anagrams("bungled")
    self.assertEqual(r, ['bungled'])

    _, r = self.anagrams2.get_anagrams("bungler")
    self.assertEqual(r, ['bungler'])

    _, r = self.anagrams2.get_anagrams("bunglers")
    self.assertEqual(r, ['bunglers'])

    _, r = self.anagrams2.get_anagrams("bungles")
    self.assertEqual(r, ['bungles'])

    _, r = self.anagrams2.get_anagrams("bungling")
    self.assertEqual(r, ['bungling'])

    _, r = self.anagrams2.get_anagrams("bunion")
    self.assertEqual(r, ['bunion'])

    _, r = self.anagrams2.get_anagrams("bunions")
    self.assertEqual(r, ['bunions'])

    _, r = self.anagrams2.get_anagrams("bunk")
    self.assertEqual(r, ['bunk'])

    _, r = self.anagrams2.get_anagrams("bunker")
    self.assertEqual(r, ['bunker'])

    _, r = self.anagrams2.get_anagrams("bunkered")
    self.assertEqual(r, ['bunkered'])

    _, r = self.anagrams2.get_anagrams("bunkers")
    self.assertEqual(r, ['bunkers'])

    _, r = self.anagrams2.get_anagrams("bunkhouse")
    self.assertEqual(r, ['bunkhouse'])

    _, r = self.anagrams2.get_anagrams("bunkhouses")
    self.assertEqual(r, ['bunkhouses'])

    _, r = self.anagrams2.get_anagrams("bunkmate")
    self.assertEqual(r, ['bunkmate'])

    _, r = self.anagrams2.get_anagrams("bunkmates")
    self.assertEqual(r, ['bunkmates'])

    _, r = self.anagrams2.get_anagrams("bunks")
    self.assertEqual(r, ['bunks'])

    _, r = self.anagrams2.get_anagrams("bunnies")
    self.assertEqual(r, ['bunnies'])

    _, r = self.anagrams2.get_anagrams("bunny")
    self.assertEqual(r, ['bunny'])

    _, r = self.anagrams2.get_anagrams("buns")
    self.assertEqual(r, ['buns', 'snub'])

    _, r = self.anagrams2.get_anagrams("bunsen")
    self.assertEqual(r, ['bunsen'])

    _, r = self.anagrams2.get_anagrams("bunt")
    self.assertEqual(r, ['bunt'])

    _, r = self.anagrams2.get_anagrams("bunted")
    self.assertEqual(r, ['bunted'])

    _, r = self.anagrams2.get_anagrams("bunter")
    self.assertEqual(r, ['bunter'])

    _, r = self.anagrams2.get_anagrams("bunters")
    self.assertEqual(r, ['bunters'])

    _, r = self.anagrams2.get_anagrams("bunting")
    self.assertEqual(r, ['bunting'])

    _, r = self.anagrams2.get_anagrams("bunts")
    self.assertEqual(r, ['bunts'])

    _, r = self.anagrams2.get_anagrams("bunyan")
    self.assertEqual(r, ['bunyan'])

    _, r = self.anagrams2.get_anagrams("buoy")
    self.assertEqual(r, ['buoy'])

    _, r = self.anagrams2.get_anagrams("buoyancy")
    self.assertEqual(r, ['buoyancy'])

    _, r = self.anagrams2.get_anagrams("buoyant")
    self.assertEqual(r, ['buoyant'])

    _, r = self.anagrams2.get_anagrams("buoyed")
    self.assertEqual(r, ['buoyed'])

    _, r = self.anagrams2.get_anagrams("buoys")
    self.assertEqual(r, ['buoys'])

    _, r = self.anagrams2.get_anagrams("burbank")
    self.assertEqual(r, ['burbank'])

    _, r = self.anagrams2.get_anagrams("burch")
    self.assertEqual(r, ['burch'])

    _, r = self.anagrams2.get_anagrams("burden")
    self.assertEqual(r, ['burden', 'burned'])

    _, r = self.anagrams2.get_anagrams("burdened")
    self.assertEqual(r, ['burdened'])

    _, r = self.anagrams2.get_anagrams("burdening")
    self.assertEqual(r, ['burdening'])

    _, r = self.anagrams2.get_anagrams("burdens")
    self.assertEqual(r, ['burdens'])

    _, r = self.anagrams2.get_anagrams("burdensome")
    self.assertEqual(r, ['burdensome'])

    _, r = self.anagrams2.get_anagrams("bureau")
    self.assertEqual(r, ['bureau'])

    _, r = self.anagrams2.get_anagrams("bureaucracies")
    self.assertEqual(r, ['bureaucracies'])

    _, r = self.anagrams2.get_anagrams("bureaucracy")
    self.assertEqual(r, ['bureaucracy'])

    _, r = self.anagrams2.get_anagrams("bureaucrat")
    self.assertEqual(r, ['bureaucrat'])

    _, r = self.anagrams2.get_anagrams("bureaucratic")
    self.assertEqual(r, ['bureaucratic'])

    _, r = self.anagrams2.get_anagrams("bureaucrats")
    self.assertEqual(r, ['bureaucrats'])

    _, r = self.anagrams2.get_anagrams("bureaus")
    self.assertEqual(r, ['bureaus'])

    _, r = self.anagrams2.get_anagrams("burgeon")
    self.assertEqual(r, ['burgeon'])

    _, r = self.anagrams2.get_anagrams("burgeoned")
    self.assertEqual(r, ['burgeoned'])

    _, r = self.anagrams2.get_anagrams("burgeoning")
    self.assertEqual(r, ['burgeoning'])

    _, r = self.anagrams2.get_anagrams("burgess")
    self.assertEqual(r, ['burgess'])

    _, r = self.anagrams2.get_anagrams("burgesses")
    self.assertEqual(r, ['burgesses'])

    _, r = self.anagrams2.get_anagrams("burgher")
    self.assertEqual(r, ['burgher'])

    _, r = self.anagrams2.get_anagrams("burghers")
    self.assertEqual(r, ['burghers'])

    _, r = self.anagrams2.get_anagrams("burglar")
    self.assertEqual(r, ['burglar'])

    _, r = self.anagrams2.get_anagrams("burglaries")
    self.assertEqual(r, ['burglaries'])

    _, r = self.anagrams2.get_anagrams("burglarize")
    self.assertEqual(r, ['burglarize'])

    _, r = self.anagrams2.get_anagrams("burglarized")
    self.assertEqual(r, ['burglarized'])

    _, r = self.anagrams2.get_anagrams("burglarizes")
    self.assertEqual(r, ['burglarizes'])

    _, r = self.anagrams2.get_anagrams("burglarizing")
    self.assertEqual(r, ['burglarizing'])

    _, r = self.anagrams2.get_anagrams("burglarproof")
    self.assertEqual(r, ['burglarproof'])

    _, r = self.anagrams2.get_anagrams("burglarproofed")
    self.assertEqual(r, ['burglarproofed'])

    _, r = self.anagrams2.get_anagrams("burglarproofing")
    self.assertEqual(r, ['burglarproofing'])

    _, r = self.anagrams2.get_anagrams("burglarproofs")
    self.assertEqual(r, ['burglarproofs'])

    _, r = self.anagrams2.get_anagrams("burglars")
    self.assertEqual(r, ['burglars'])

    _, r = self.anagrams2.get_anagrams("burglary")
    self.assertEqual(r, ['burglary'])

    _, r = self.anagrams2.get_anagrams("burgundian")
    self.assertEqual(r, ['burgundian'])

    _, r = self.anagrams2.get_anagrams("burgundies")
    self.assertEqual(r, ['burgundies'])

    _, r = self.anagrams2.get_anagrams("burgundy")
    self.assertEqual(r, ['burgundy'])

    _, r = self.anagrams2.get_anagrams("burial")
    self.assertEqual(r, ['burial'])

    _, r = self.anagrams2.get_anagrams("buried")
    self.assertEqual(r, ['buried'])

    _, r = self.anagrams2.get_anagrams("buries")
    self.assertEqual(r, ['bruise', 'buries', 'busier', 'rubies'])

    _, r = self.anagrams2.get_anagrams("burke")
    self.assertEqual(r, ['burke'])

    _, r = self.anagrams2.get_anagrams("burkes")
    self.assertEqual(r, ['burkes'])

    _, r = self.anagrams2.get_anagrams("burl")
    self.assertEqual(r, ['blur', 'burl'])

    _, r = self.anagrams2.get_anagrams("burlesque")
    self.assertEqual(r, ['burlesque'])

    _, r = self.anagrams2.get_anagrams("burlesques")
    self.assertEqual(r, ['burlesques'])

    _, r = self.anagrams2.get_anagrams("burlingame")
    self.assertEqual(r, ['burlingame'])

    _, r = self.anagrams2.get_anagrams("burlington")
    self.assertEqual(r, ['burlington'])

    _, r = self.anagrams2.get_anagrams("burly")
    self.assertEqual(r, ['burly'])

    _, r = self.anagrams2.get_anagrams("burma")
    self.assertEqual(r, ['burma'])

    _, r = self.anagrams2.get_anagrams("burmese")
    self.assertEqual(r, ['burmese'])

    _, r = self.anagrams2.get_anagrams("burn")
    self.assertEqual(r, ['burn'])

    _, r = self.anagrams2.get_anagrams("burne")
    self.assertEqual(r, ['burne', 'ruben'])

    _, r = self.anagrams2.get_anagrams("burned")
    self.assertEqual(r, ['burden', 'burned'])

    _, r = self.anagrams2.get_anagrams("burner")
    self.assertEqual(r, ['burner'])

    _, r = self.anagrams2.get_anagrams("burners")
    self.assertEqual(r, ['burners'])

    _, r = self.anagrams2.get_anagrams("burnes")
    self.assertEqual(r, ['burnes', 'rubens'])

    _, r = self.anagrams2.get_anagrams("burnett")
    self.assertEqual(r, ['burnett'])

    _, r = self.anagrams2.get_anagrams("burnham")
    self.assertEqual(r, ['burnham'])

    _, r = self.anagrams2.get_anagrams("burning")
    self.assertEqual(r, ['burning'])

    _, r = self.anagrams2.get_anagrams("burningly")
    self.assertEqual(r, ['burningly'])

    _, r = self.anagrams2.get_anagrams("burnings")
    self.assertEqual(r, ['burnings'])

    _, r = self.anagrams2.get_anagrams("burnish")
    self.assertEqual(r, ['burnish'])

    _, r = self.anagrams2.get_anagrams("burnished")
    self.assertEqual(r, ['burnished'])

    _, r = self.anagrams2.get_anagrams("burnishes")
    self.assertEqual(r, ['burnishes'])

    _, r = self.anagrams2.get_anagrams("burnishing")
    self.assertEqual(r, ['burnishing'])

    _, r = self.anagrams2.get_anagrams("burns")
    self.assertEqual(r, ['burns'])

    _, r = self.anagrams2.get_anagrams("burnside")
    self.assertEqual(r, ['burnside'])

    _, r = self.anagrams2.get_anagrams("burnsides")
    self.assertEqual(r, ['burnsides', 'sideburns'])

    _, r = self.anagrams2.get_anagrams("burnt")
    self.assertEqual(r, ['brunt', 'burnt'])

    _, r = self.anagrams2.get_anagrams("burntly")
    self.assertEqual(r, ['burntly'])

    _, r = self.anagrams2.get_anagrams("burntness")
    self.assertEqual(r, ['burntness'])

    _, r = self.anagrams2.get_anagrams("burp")
    self.assertEqual(r, ['burp'])

    _, r = self.anagrams2.get_anagrams("burped")
    self.assertEqual(r, ['burped'])

    _, r = self.anagrams2.get_anagrams("burping")
    self.assertEqual(r, ['burping'])

    _, r = self.anagrams2.get_anagrams("burps")
    self.assertEqual(r, ['burps'])

    _, r = self.anagrams2.get_anagrams("burr")
    self.assertEqual(r, ['burr'])

    _, r = self.anagrams2.get_anagrams("burroughs")
    self.assertEqual(r, ['burroughs'])

    _, r = self.anagrams2.get_anagrams("burrow")
    self.assertEqual(r, ['burrow'])

    _, r = self.anagrams2.get_anagrams("burrowed")
    self.assertEqual(r, ['burrowed'])

    _, r = self.anagrams2.get_anagrams("burrower")
    self.assertEqual(r, ['burrower'])

    _, r = self.anagrams2.get_anagrams("burrowing")
    self.assertEqual(r, ['burrowing'])

    _, r = self.anagrams2.get_anagrams("burrows")
    self.assertEqual(r, ['burrows'])

    _, r = self.anagrams2.get_anagrams("burrs")
    self.assertEqual(r, ['burrs'])

    _, r = self.anagrams2.get_anagrams("bursa")
    self.assertEqual(r, ['bursa'])

    _, r = self.anagrams2.get_anagrams("bursitis")
    self.assertEqual(r, ['bursitis'])

    _, r = self.anagrams2.get_anagrams("burst")
    self.assertEqual(r, ['burst'])

    _, r = self.anagrams2.get_anagrams("burstiness")
    self.assertEqual(r, ['burstiness'])

    _, r = self.anagrams2.get_anagrams("bursting")
    self.assertEqual(r, ['bursting'])

    _, r = self.anagrams2.get_anagrams("bursts")
    self.assertEqual(r, ['bursts'])

    _, r = self.anagrams2.get_anagrams("bursty")
    self.assertEqual(r, ['bursty'])

    _, r = self.anagrams2.get_anagrams("burt")
    self.assertEqual(r, ['burt'])

    _, r = self.anagrams2.get_anagrams("burton")
    self.assertEqual(r, ['burton'])

    _, r = self.anagrams2.get_anagrams("burtt")
    self.assertEqual(r, ['burtt'])

    _, r = self.anagrams2.get_anagrams("burundi")
    self.assertEqual(r, ['burundi'])

    _, r = self.anagrams2.get_anagrams("bury")
    self.assertEqual(r, ['bury', 'ruby'])

    _, r = self.anagrams2.get_anagrams("burying")
    self.assertEqual(r, ['burying'])

    _, r = self.anagrams2.get_anagrams("bus")
    self.assertEqual(r, ['bus', 'sub'])

    _, r = self.anagrams2.get_anagrams("busboy")
    self.assertEqual(r, ['busboy'])

    _, r = self.anagrams2.get_anagrams("busboys")
    self.assertEqual(r, ['busboys'])

    _, r = self.anagrams2.get_anagrams("busch")
    self.assertEqual(r, ['busch'])

    _, r = self.anagrams2.get_anagrams("bused")
    self.assertEqual(r, ['bused'])

    _, r = self.anagrams2.get_anagrams("buses")
    self.assertEqual(r, ['buses'])

    _, r = self.anagrams2.get_anagrams("bush")
    self.assertEqual(r, ['bush', 'hubs'])

    _, r = self.anagrams2.get_anagrams("bushel")
    self.assertEqual(r, ['bushel'])

    _, r = self.anagrams2.get_anagrams("bushels")
    self.assertEqual(r, ['blushes', 'bushels'])

    _, r = self.anagrams2.get_anagrams("bushes")
    self.assertEqual(r, ['bushes'])

    _, r = self.anagrams2.get_anagrams("bushing")
    self.assertEqual(r, ['bushing'])

    _, r = self.anagrams2.get_anagrams("bushnell")
    self.assertEqual(r, ['bushnell'])

    _, r = self.anagrams2.get_anagrams("bushwhack")
    self.assertEqual(r, ['bushwhack'])

    _, r = self.anagrams2.get_anagrams("bushwhacked")
    self.assertEqual(r, ['bushwhacked'])

    _, r = self.anagrams2.get_anagrams("bushwhacking")
    self.assertEqual(r, ['bushwhacking'])

    _, r = self.anagrams2.get_anagrams("bushwhacks")
    self.assertEqual(r, ['bushwhacks'])

    _, r = self.anagrams2.get_anagrams("bushy")
    self.assertEqual(r, ['bushy'])

    _, r = self.anagrams2.get_anagrams("busied")
    self.assertEqual(r, ['busied'])

    _, r = self.anagrams2.get_anagrams("busier")
    self.assertEqual(r, ['bruise', 'buries', 'busier', 'rubies'])

    _, r = self.anagrams2.get_anagrams("busiest")
    self.assertEqual(r, ['busiest'])

    _, r = self.anagrams2.get_anagrams("busily")
    self.assertEqual(r, ['busily'])

    _, r = self.anagrams2.get_anagrams("business")
    self.assertEqual(r, ['business'])

    _, r = self.anagrams2.get_anagrams("businesses")
    self.assertEqual(r, ['businesses'])

    _, r = self.anagrams2.get_anagrams("businesslike")
    self.assertEqual(r, ['businesslike'])

    _, r = self.anagrams2.get_anagrams("businessman")
    self.assertEqual(r, ['businessman'])

    _, r = self.anagrams2.get_anagrams("businessmen")
    self.assertEqual(r, ['businessmen'])

    _, r = self.anagrams2.get_anagrams("busing")
    self.assertEqual(r, ['busing'])

    _, r = self.anagrams2.get_anagrams("buss")
    self.assertEqual(r, ['buss', 'subs'])

    _, r = self.anagrams2.get_anagrams("bussed")
    self.assertEqual(r, ['bussed'])

    _, r = self.anagrams2.get_anagrams("busses")
    self.assertEqual(r, ['busses'])

    _, r = self.anagrams2.get_anagrams("bussing")
    self.assertEqual(r, ['bussing'])

    _, r = self.anagrams2.get_anagrams("bust")
    self.assertEqual(r, ['bust', 'stub', 'tubs'])

    _, r = self.anagrams2.get_anagrams("bustard")
    self.assertEqual(r, ['bustard'])

    _, r = self.anagrams2.get_anagrams("bustards")
    self.assertEqual(r, ['bustards'])

    _, r = self.anagrams2.get_anagrams("busted")
    self.assertEqual(r, ['busted'])

    _, r = self.anagrams2.get_anagrams("buster")
    self.assertEqual(r, ['brutes', 'buster', 'tubers'])

    _, r = self.anagrams2.get_anagrams("bustle")
    self.assertEqual(r, ['bluest', 'bustle', 'subtle'])

    _, r = self.anagrams2.get_anagrams("bustling")
    self.assertEqual(r, ['bustling'])

    _, r = self.anagrams2.get_anagrams("busts")
    self.assertEqual(r, ['busts', 'stubs'])

    _, r = self.anagrams2.get_anagrams("busy")
    self.assertEqual(r, ['busy', 'buys'])

    _, r = self.anagrams2.get_anagrams("but")
    self.assertEqual(r, ['but', 'tub'])

    _, r = self.anagrams2.get_anagrams("butane")
    self.assertEqual(r, ['butane'])

    _, r = self.anagrams2.get_anagrams("butcher")
    self.assertEqual(r, ['butcher'])

    _, r = self.anagrams2.get_anagrams("butchered")
    self.assertEqual(r, ['butchered'])

    _, r = self.anagrams2.get_anagrams("butchers")
    self.assertEqual(r, ['butchers', 'schubert'])

    _, r = self.anagrams2.get_anagrams("butchery")
    self.assertEqual(r, ['butchery'])

    _, r = self.anagrams2.get_anagrams("butler")
    self.assertEqual(r, ['butler'])

    _, r = self.anagrams2.get_anagrams("butlers")
    self.assertEqual(r, ['bluster', 'butlers', 'subtler'])

    _, r = self.anagrams2.get_anagrams("butt")
    self.assertEqual(r, ['butt'])

    _, r = self.anagrams2.get_anagrams("butte")
    self.assertEqual(r, ['butte'])

    _, r = self.anagrams2.get_anagrams("butted")
    self.assertEqual(r, ['butted'])

    _, r = self.anagrams2.get_anagrams("butter")
    self.assertEqual(r, ['butter'])

    _, r = self.anagrams2.get_anagrams("butterball")
    self.assertEqual(r, ['butterball'])

    _, r = self.anagrams2.get_anagrams("buttercup")
    self.assertEqual(r, ['buttercup'])

    _, r = self.anagrams2.get_anagrams("buttered")
    self.assertEqual(r, ['buttered', 'rebutted'])

    _, r = self.anagrams2.get_anagrams("butterer")
    self.assertEqual(r, ['butterer'])

    _, r = self.anagrams2.get_anagrams("butterers")
    self.assertEqual(r, ['butterers'])

    _, r = self.anagrams2.get_anagrams("butterfat")
    self.assertEqual(r, ['butterfat'])

    _, r = self.anagrams2.get_anagrams("butterfield")
    self.assertEqual(r, ['butterfield'])

    _, r = self.anagrams2.get_anagrams("butterflies")
    self.assertEqual(r, ['butterflies'])

    _, r = self.anagrams2.get_anagrams("butterfly")
    self.assertEqual(r, ['butterfly'])

    _, r = self.anagrams2.get_anagrams("buttering")
    self.assertEqual(r, ['buttering', 'rebutting'])

    _, r = self.anagrams2.get_anagrams("buttermilk")
    self.assertEqual(r, ['buttermilk'])

    _, r = self.anagrams2.get_anagrams("butternut")
    self.assertEqual(r, ['butternut'])

    _, r = self.anagrams2.get_anagrams("butters")
    self.assertEqual(r, ['butters'])

    _, r = self.anagrams2.get_anagrams("buttery")
    self.assertEqual(r, ['buttery'])

    _, r = self.anagrams2.get_anagrams("buttes")
    self.assertEqual(r, ['buttes'])

    _, r = self.anagrams2.get_anagrams("butting")
    self.assertEqual(r, ['butting'])

    _, r = self.anagrams2.get_anagrams("buttock")
    self.assertEqual(r, ['buttock'])

    _, r = self.anagrams2.get_anagrams("buttocks")
    self.assertEqual(r, ['buttocks'])

    _, r = self.anagrams2.get_anagrams("button")
    self.assertEqual(r, ['button'])

    _, r = self.anagrams2.get_anagrams("buttoned")
    self.assertEqual(r, ['buttoned'])

    _, r = self.anagrams2.get_anagrams("buttonhole")
    self.assertEqual(r, ['buttonhole'])

    _, r = self.anagrams2.get_anagrams("buttonholes")
    self.assertEqual(r, ['buttonholes'])

    _, r = self.anagrams2.get_anagrams("buttoning")
    self.assertEqual(r, ['buttoning'])

    _, r = self.anagrams2.get_anagrams("buttons")
    self.assertEqual(r, ['buttons'])

    _, r = self.anagrams2.get_anagrams("buttress")
    self.assertEqual(r, ['buttress'])

    _, r = self.anagrams2.get_anagrams("buttressed")
    self.assertEqual(r, ['buttressed'])

    _, r = self.anagrams2.get_anagrams("buttresses")
    self.assertEqual(r, ['buttresses'])

    _, r = self.anagrams2.get_anagrams("buttressing")
    self.assertEqual(r, ['buttressing'])

    _, r = self.anagrams2.get_anagrams("buttrick")
    self.assertEqual(r, ['buttrick'])

    _, r = self.anagrams2.get_anagrams("butts")
    self.assertEqual(r, ['butts'])

    _, r = self.anagrams2.get_anagrams("butyl")
    self.assertEqual(r, ['butyl'])

    _, r = self.anagrams2.get_anagrams("butyrate")
    self.assertEqual(r, ['butyrate'])

    _, r = self.anagrams2.get_anagrams("buxom")
    self.assertEqual(r, ['buxom'])

    _, r = self.anagrams2.get_anagrams("buxtehude")
    self.assertEqual(r, ['buxtehude'])

    _, r = self.anagrams2.get_anagrams("buxton")
    self.assertEqual(r, ['buxton'])

    _, r = self.anagrams2.get_anagrams("buy")
    self.assertEqual(r, ['buy'])

    _, r = self.anagrams2.get_anagrams("buyer")
    self.assertEqual(r, ['buyer'])

    _, r = self.anagrams2.get_anagrams("buyers")
    self.assertEqual(r, ['buyers'])

    _, r = self.anagrams2.get_anagrams("buying")
    self.assertEqual(r, ['buying'])

    _, r = self.anagrams2.get_anagrams("buys")
    self.assertEqual(r, ['busy', 'buys'])

    _, r = self.anagrams2.get_anagrams("buzz")
    self.assertEqual(r, ['buzz'])

    _, r = self.anagrams2.get_anagrams("buzzard")
    self.assertEqual(r, ['buzzard'])

    _, r = self.anagrams2.get_anagrams("buzzards")
    self.assertEqual(r, ['buzzards'])

    _, r = self.anagrams2.get_anagrams("buzzed")
    self.assertEqual(r, ['buzzed'])

    _, r = self.anagrams2.get_anagrams("buzzer")
    self.assertEqual(r, ['buzzer'])

    _, r = self.anagrams2.get_anagrams("buzzes")
    self.assertEqual(r, ['buzzes'])

    _, r = self.anagrams2.get_anagrams("buzzing")
    self.assertEqual(r, ['buzzing'])

    _, r = self.anagrams2.get_anagrams("buzzword")
    self.assertEqual(r, ['buzzword'])

    _, r = self.anagrams2.get_anagrams("buzzwords")
    self.assertEqual(r, ['buzzwords'])

    _, r = self.anagrams2.get_anagrams("buzzy")
    self.assertEqual(r, ['buzzy'])

    _, r = self.anagrams2.get_anagrams("by")
    self.assertEqual(r, ['by'])

    _, r = self.anagrams2.get_anagrams("bye")
    self.assertEqual(r, ['bye'])

    _, r = self.anagrams2.get_anagrams("byers")
    self.assertEqual(r, ['byers'])

    _, r = self.anagrams2.get_anagrams("bygone")
    self.assertEqual(r, ['bygone'])

    _, r = self.anagrams2.get_anagrams("bylaw")
    self.assertEqual(r, ['bylaw'])

    _, r = self.anagrams2.get_anagrams("bylaws")
    self.assertEqual(r, ['bylaws'])

    _, r = self.anagrams2.get_anagrams("byline")
    self.assertEqual(r, ['byline'])

    _, r = self.anagrams2.get_anagrams("bylines")
    self.assertEqual(r, ['bylines'])

    _, r = self.anagrams2.get_anagrams("bypass")
    self.assertEqual(r, ['bypass'])

    _, r = self.anagrams2.get_anagrams("bypassed")
    self.assertEqual(r, ['bypassed'])

    _, r = self.anagrams2.get_anagrams("bypasses")
    self.assertEqual(r, ['bypasses'])

    _, r = self.anagrams2.get_anagrams("bypassing")
    self.assertEqual(r, ['bypassing'])

    _, r = self.anagrams2.get_anagrams("byproduct")
    self.assertEqual(r, ['byproduct'])

    _, r = self.anagrams2.get_anagrams("byproducts")
    self.assertEqual(r, ['byproducts'])

    _, r = self.anagrams2.get_anagrams("byrd")
    self.assertEqual(r, ['byrd'])

    _, r = self.anagrams2.get_anagrams("byrne")
    self.assertEqual(r, ['byrne'])

    _, r = self.anagrams2.get_anagrams("byron")
    self.assertEqual(r, ['byron'])

    _, r = self.anagrams2.get_anagrams("byronic")
    self.assertEqual(r, ['byronic'])

    _, r = self.anagrams2.get_anagrams("byronism")
    self.assertEqual(r, ['byronism'])

    _, r = self.anagrams2.get_anagrams("byronize")
    self.assertEqual(r, ['byronize'])

    _, r = self.anagrams2.get_anagrams("byronizes")
    self.assertEqual(r, ['byronizes'])

    _, r = self.anagrams2.get_anagrams("bystander")
    self.assertEqual(r, ['bystander'])

    _, r = self.anagrams2.get_anagrams("bystanders")
    self.assertEqual(r, ['bystanders'])

    _, r = self.anagrams2.get_anagrams("byte")
    self.assertEqual(r, ['byte'])

    _, r = self.anagrams2.get_anagrams("bytes")
    self.assertEqual(r, ['betsy', 'bytes'])

    _, r = self.anagrams2.get_anagrams("byway")
    self.assertEqual(r, ['byway'])

    _, r = self.anagrams2.get_anagrams("byways")
    self.assertEqual(r, ['byways'])

    _, r = self.anagrams2.get_anagrams("byword")
    self.assertEqual(r, ['byword'])

    _, r = self.anagrams2.get_anagrams("bywords")
    self.assertEqual(r, ['bywords'])

    _, r = self.anagrams2.get_anagrams("byzantine")
    self.assertEqual(r, ['byzantine'])

    _, r = self.anagrams2.get_anagrams("byzantinize")
    self.assertEqual(r, ['byzantinize'])

    _, r = self.anagrams2.get_anagrams("byzantinizes")
    self.assertEqual(r, ['byzantinizes'])

    _, r = self.anagrams2.get_anagrams("byzantium")
    self.assertEqual(r, ['byzantium'])

    _, r = self.anagrams2.get_anagrams("cab")
    self.assertEqual(r, ['cab'])

    _, r = self.anagrams2.get_anagrams("cabal")
    self.assertEqual(r, ['cabal'])

    _, r = self.anagrams2.get_anagrams("cabana")
    self.assertEqual(r, ['cabana'])

    _, r = self.anagrams2.get_anagrams("cabaret")
    self.assertEqual(r, ['cabaret'])

    _, r = self.anagrams2.get_anagrams("cabbage")
    self.assertEqual(r, ['cabbage'])

    _, r = self.anagrams2.get_anagrams("cabbages")
    self.assertEqual(r, ['cabbages'])

    _, r = self.anagrams2.get_anagrams("cabdriver")
    self.assertEqual(r, ['cabdriver'])

    _, r = self.anagrams2.get_anagrams("cabin")
    self.assertEqual(r, ['cabin'])

    _, r = self.anagrams2.get_anagrams("cabinet")
    self.assertEqual(r, ['cabinet'])

    _, r = self.anagrams2.get_anagrams("cabinets")
    self.assertEqual(r, ['cabinets'])

    _, r = self.anagrams2.get_anagrams("cabins")
    self.assertEqual(r, ['cabins'])

    _, r = self.anagrams2.get_anagrams("cable")
    self.assertEqual(r, ['cable', 'caleb'])

    _, r = self.anagrams2.get_anagrams("cabled")
    self.assertEqual(r, ['cabled'])

    _, r = self.anagrams2.get_anagrams("cables")
    self.assertEqual(r, ['cables'])

    _, r = self.anagrams2.get_anagrams("cabling")
    self.assertEqual(r, ['cabling'])

    _, r = self.anagrams2.get_anagrams("caboose")
    self.assertEqual(r, ['caboose'])

    _, r = self.anagrams2.get_anagrams("cabot")
    self.assertEqual(r, ['cabot'])

    _, r = self.anagrams2.get_anagrams("cabs")
    self.assertEqual(r, ['cabs', 'scab'])

    _, r = self.anagrams2.get_anagrams("cache")
    self.assertEqual(r, ['cache'])

    _, r = self.anagrams2.get_anagrams("cached")
    self.assertEqual(r, ['cached'])

    _, r = self.anagrams2.get_anagrams("caches")
    self.assertEqual(r, ['caches'])

    _, r = self.anagrams2.get_anagrams("caching")
    self.assertEqual(r, ['caching'])

    _, r = self.anagrams2.get_anagrams("cackle")
    self.assertEqual(r, ['cackle'])

    _, r = self.anagrams2.get_anagrams("cackled")
    self.assertEqual(r, ['cackled'])

    _, r = self.anagrams2.get_anagrams("cackler")
    self.assertEqual(r, ['cackler', 'crackle'])

    _, r = self.anagrams2.get_anagrams("cackles")
    self.assertEqual(r, ['cackles'])

    _, r = self.anagrams2.get_anagrams("cackling")
    self.assertEqual(r, ['cackling'])

    _, r = self.anagrams2.get_anagrams("cacti")
    self.assertEqual(r, ['cacti'])

    _, r = self.anagrams2.get_anagrams("cactus")
    self.assertEqual(r, ['cactus'])

    _, r = self.anagrams2.get_anagrams("cadaver")
    self.assertEqual(r, ['cadaver'])

    _, r = self.anagrams2.get_anagrams("cadence")
    self.assertEqual(r, ['cadence'])

    _, r = self.anagrams2.get_anagrams("cadenced")
    self.assertEqual(r, ['cadenced'])

    _, r = self.anagrams2.get_anagrams("cadillac")
    self.assertEqual(r, ['cadillac'])

    _, r = self.anagrams2.get_anagrams("cadillacs")
    self.assertEqual(r, ['cadillacs'])

    _, r = self.anagrams2.get_anagrams("cadres")
    self.assertEqual(r, ['cadres', 'sacred', 'scared'])

    _, r = self.anagrams2.get_anagrams("cady")
    self.assertEqual(r, ['cady'])

    _, r = self.anagrams2.get_anagrams("caesar")
    self.assertEqual(r, ['caesar'])

    _, r = self.anagrams2.get_anagrams("caesarian")
    self.assertEqual(r, ['caesarian'])

    _, r = self.anagrams2.get_anagrams("caesarize")
    self.assertEqual(r, ['caesarize'])

    _, r = self.anagrams2.get_anagrams("caesarizes")
    self.assertEqual(r, ['caesarizes'])

    _, r = self.anagrams2.get_anagrams("cafe")
    self.assertEqual(r, ['cafe', 'face'])

    _, r = self.anagrams2.get_anagrams("cafes")
    self.assertEqual(r, ['cafes', 'faces'])

    _, r = self.anagrams2.get_anagrams("cafeteria")
    self.assertEqual(r, ['cafeteria'])

    _, r = self.anagrams2.get_anagrams("cage")
    self.assertEqual(r, ['cage'])

    _, r = self.anagrams2.get_anagrams("caged")
    self.assertEqual(r, ['caged'])

    _, r = self.anagrams2.get_anagrams("cager")
    self.assertEqual(r, ['cager', 'grace'])

    _, r = self.anagrams2.get_anagrams("cagers")
    self.assertEqual(r, ['cagers', 'graces'])

    _, r = self.anagrams2.get_anagrams("cages")
    self.assertEqual(r, ['cages'])

    _, r = self.anagrams2.get_anagrams("caging")
    self.assertEqual(r, ['caging'])

    _, r = self.anagrams2.get_anagrams("cahill")
    self.assertEqual(r, ['cahill'])

    _, r = self.anagrams2.get_anagrams("caiman")
    self.assertEqual(r, ['caiman', 'maniac'])

    _, r = self.anagrams2.get_anagrams("cain")
    self.assertEqual(r, ['cain', 'inca'])

    _, r = self.anagrams2.get_anagrams("caine")
    self.assertEqual(r, ['caine'])

    _, r = self.anagrams2.get_anagrams("cairn")
    self.assertEqual(r, ['cairn', 'rican'])

    _, r = self.anagrams2.get_anagrams("cairo")
    self.assertEqual(r, ['cairo'])

    _, r = self.anagrams2.get_anagrams("cajole")
    self.assertEqual(r, ['cajole'])

    _, r = self.anagrams2.get_anagrams("cajoled")
    self.assertEqual(r, ['cajoled'])

    _, r = self.anagrams2.get_anagrams("cajoles")
    self.assertEqual(r, ['cajoles'])

    _, r = self.anagrams2.get_anagrams("cajoling")
    self.assertEqual(r, ['cajoling'])

    _, r = self.anagrams2.get_anagrams("cajun")
    self.assertEqual(r, ['cajun'])

    _, r = self.anagrams2.get_anagrams("cajuns")
    self.assertEqual(r, ['cajuns'])

    _, r = self.anagrams2.get_anagrams("cake")
    self.assertEqual(r, ['cake'])

    _, r = self.anagrams2.get_anagrams("caked")
    self.assertEqual(r, ['caked'])

    _, r = self.anagrams2.get_anagrams("cakes")
    self.assertEqual(r, ['cakes'])

    _, r = self.anagrams2.get_anagrams("caking")
    self.assertEqual(r, ['caking'])

    _, r = self.anagrams2.get_anagrams("calais")
    self.assertEqual(r, ['calais'])

    _, r = self.anagrams2.get_anagrams("calamities")
    self.assertEqual(r, ['calamities'])

    _, r = self.anagrams2.get_anagrams("calamitous")
    self.assertEqual(r, ['calamitous'])

    _, r = self.anagrams2.get_anagrams("calamity")
    self.assertEqual(r, ['calamity'])

    _, r = self.anagrams2.get_anagrams("calceolaria")
    self.assertEqual(r, ['calceolaria'])

    _, r = self.anagrams2.get_anagrams("calcify")
    self.assertEqual(r, ['calcify'])

    _, r = self.anagrams2.get_anagrams("calcium")
    self.assertEqual(r, ['calcium'])

    _, r = self.anagrams2.get_anagrams("calcomp")
    self.assertEqual(r, ['calcomp', 'calcomp', 'calcomp'])

    _, r = self.anagrams2.get_anagrams("calcomp")
    self.assertEqual(r, ['calcomp', 'calcomp', 'calcomp'])

    _, r = self.anagrams2.get_anagrams("calcomp")
    self.assertEqual(r, ['calcomp', 'calcomp', 'calcomp'])

    _, r = self.anagrams2.get_anagrams("calculate")
    self.assertEqual(r, ['calculate'])

    _, r = self.anagrams2.get_anagrams("calculated")
    self.assertEqual(r, ['calculated'])

    _, r = self.anagrams2.get_anagrams("calculates")
    self.assertEqual(r, ['calculates'])

    _, r = self.anagrams2.get_anagrams("calculating")
    self.assertEqual(r, ['calculating'])

    _, r = self.anagrams2.get_anagrams("calculation")
    self.assertEqual(r, ['calculation'])

    _, r = self.anagrams2.get_anagrams("calculations")
    self.assertEqual(r, ['calculations'])

    _, r = self.anagrams2.get_anagrams("calculative")
    self.assertEqual(r, ['calculative'])

    _, r = self.anagrams2.get_anagrams("calculator")
    self.assertEqual(r, ['calculator'])

    _, r = self.anagrams2.get_anagrams("calculators")
    self.assertEqual(r, ['calculators'])

    _, r = self.anagrams2.get_anagrams("calculi")
    self.assertEqual(r, ['calculi'])

    _, r = self.anagrams2.get_anagrams("calculus")
    self.assertEqual(r, ['calculus'])

    _, r = self.anagrams2.get_anagrams("calcutta")
    self.assertEqual(r, ['calcutta'])

    _, r = self.anagrams2.get_anagrams("calder")
    self.assertEqual(r, ['calder', 'cradle'])

    _, r = self.anagrams2.get_anagrams("caldera")
    self.assertEqual(r, ['caldera'])

    _, r = self.anagrams2.get_anagrams("caldwell")
    self.assertEqual(r, ['caldwell'])

    _, r = self.anagrams2.get_anagrams("caleb")
    self.assertEqual(r, ['cable', 'caleb'])

    _, r = self.anagrams2.get_anagrams("calendar")
    self.assertEqual(r, ['calendar'])

    _, r = self.anagrams2.get_anagrams("calendars")
    self.assertEqual(r, ['calendars'])

    _, r = self.anagrams2.get_anagrams("calf")
    self.assertEqual(r, ['calf'])

    _, r = self.anagrams2.get_anagrams("calfskin")
    self.assertEqual(r, ['calfskin'])

    _, r = self.anagrams2.get_anagrams("calgary")
    self.assertEqual(r, ['calgary'])

    _, r = self.anagrams2.get_anagrams("calhoun")
    self.assertEqual(r, ['calhoun'])

    _, r = self.anagrams2.get_anagrams("caliber")
    self.assertEqual(r, ['caliber'])

    _, r = self.anagrams2.get_anagrams("calibers")
    self.assertEqual(r, ['calibers'])

    _, r = self.anagrams2.get_anagrams("calibrate")
    self.assertEqual(r, ['bacterial', 'calibrate'])

    _, r = self.anagrams2.get_anagrams("calibrated")
    self.assertEqual(r, ['calibrated'])

    _, r = self.anagrams2.get_anagrams("calibrates")
    self.assertEqual(r, ['calibrates'])

    _, r = self.anagrams2.get_anagrams("calibrating")
    self.assertEqual(r, ['calibrating'])

    _, r = self.anagrams2.get_anagrams("calibration")
    self.assertEqual(r, ['calibration'])

    _, r = self.anagrams2.get_anagrams("calibrations")
    self.assertEqual(r, ['calibrations'])

    _, r = self.anagrams2.get_anagrams("calico")
    self.assertEqual(r, ['calico'])

    _, r = self.anagrams2.get_anagrams("california")
    self.assertEqual(r, ['california'])

    _, r = self.anagrams2.get_anagrams("californian")
    self.assertEqual(r, ['californian'])

    _, r = self.anagrams2.get_anagrams("californians")
    self.assertEqual(r, ['californians'])

    _, r = self.anagrams2.get_anagrams("caligula")
    self.assertEqual(r, ['caligula'])

    _, r = self.anagrams2.get_anagrams("caliph")
    self.assertEqual(r, ['caliph'])

    _, r = self.anagrams2.get_anagrams("caliphs")
    self.assertEqual(r, ['caliphs'])

    _, r = self.anagrams2.get_anagrams("calkins")
    self.assertEqual(r, ['calkins'])

    _, r = self.anagrams2.get_anagrams("call")
    self.assertEqual(r, ['call'])

    _, r = self.anagrams2.get_anagrams("callable")
    self.assertEqual(r, ['callable'])

    _, r = self.anagrams2.get_anagrams("callaghan")
    self.assertEqual(r, ['callaghan'])

    _, r = self.anagrams2.get_anagrams("callahan")
    self.assertEqual(r, ['callahan'])

    _, r = self.anagrams2.get_anagrams("callan")
    self.assertEqual(r, ['callan'])

    _, r = self.anagrams2.get_anagrams("called")
    self.assertEqual(r, ['called'])

    _, r = self.anagrams2.get_anagrams("caller")
    self.assertEqual(r, ['caller', 'cellar', 'recall'])

    _, r = self.anagrams2.get_anagrams("callers")
    self.assertEqual(r, ['callers', 'cellars', 'recalls'])

    _, r = self.anagrams2.get_anagrams("calling")
    self.assertEqual(r, ['calling'])

    _, r = self.anagrams2.get_anagrams("calliope")
    self.assertEqual(r, ['calliope'])

    _, r = self.anagrams2.get_anagrams("callisto")
    self.assertEqual(r, ['callisto', 'castillo'])

    _, r = self.anagrams2.get_anagrams("callous")
    self.assertEqual(r, ['callous'])

    _, r = self.anagrams2.get_anagrams("calloused")
    self.assertEqual(r, ['calloused'])

    _, r = self.anagrams2.get_anagrams("callously")
    self.assertEqual(r, ['callously'])

    _, r = self.anagrams2.get_anagrams("callousness")
    self.assertEqual(r, ['callousness'])

    _, r = self.anagrams2.get_anagrams("calls")
    self.assertEqual(r, ['calls'])

    _, r = self.anagrams2.get_anagrams("callus")
    self.assertEqual(r, ['callus'])

    _, r = self.anagrams2.get_anagrams("calm")
    self.assertEqual(r, ['calm', 'clam'])

    _, r = self.anagrams2.get_anagrams("calmed")
    self.assertEqual(r, ['calmed'])

    _, r = self.anagrams2.get_anagrams("calmer")
    self.assertEqual(r, ['calmer', 'marcel'])

    _, r = self.anagrams2.get_anagrams("calmest")
    self.assertEqual(r, ['calmest'])

    _, r = self.anagrams2.get_anagrams("calming")
    self.assertEqual(r, ['calming'])

    _, r = self.anagrams2.get_anagrams("calmingly")
    self.assertEqual(r, ['calmingly'])

    _, r = self.anagrams2.get_anagrams("calmly")
    self.assertEqual(r, ['calmly'])

    _, r = self.anagrams2.get_anagrams("calmness")
    self.assertEqual(r, ['calmness'])

    _, r = self.anagrams2.get_anagrams("calms")
    self.assertEqual(r, ['calms', 'clams'])

    _, r = self.anagrams2.get_anagrams("caloric")
    self.assertEqual(r, ['caloric'])

    _, r = self.anagrams2.get_anagrams("calorie")
    self.assertEqual(r, ['calorie'])

    _, r = self.anagrams2.get_anagrams("calories")
    self.assertEqual(r, ['calories'])

    _, r = self.anagrams2.get_anagrams("calorimeter")
    self.assertEqual(r, ['calorimeter'])

    _, r = self.anagrams2.get_anagrams("calorimetric")
    self.assertEqual(r, ['calorimetric'])

    _, r = self.anagrams2.get_anagrams("calorimetry")
    self.assertEqual(r, ['calorimetry'])

    _, r = self.anagrams2.get_anagrams("caltech")
    self.assertEqual(r, ['caltech'])

    _, r = self.anagrams2.get_anagrams("calumny")
    self.assertEqual(r, ['calumny'])

    _, r = self.anagrams2.get_anagrams("calvary")
    self.assertEqual(r, ['calvary', 'cavalry'])

    _, r = self.anagrams2.get_anagrams("calve")
    self.assertEqual(r, ['calve'])

    _, r = self.anagrams2.get_anagrams("calvert")
    self.assertEqual(r, ['calvert'])

    _, r = self.anagrams2.get_anagrams("calves")
    self.assertEqual(r, ['calves'])

    _, r = self.anagrams2.get_anagrams("calvin")
    self.assertEqual(r, ['calvin'])

    _, r = self.anagrams2.get_anagrams("calvinist")
    self.assertEqual(r, ['calvinist'])

    _, r = self.anagrams2.get_anagrams("calvinize")
    self.assertEqual(r, ['calvinize'])

    _, r = self.anagrams2.get_anagrams("calvinizes")
    self.assertEqual(r, ['calvinizes'])

    _, r = self.anagrams2.get_anagrams("calypso")
    self.assertEqual(r, ['calypso'])

    _, r = self.anagrams2.get_anagrams("cam")
    self.assertEqual(r, ['cam', 'mac'])

    _, r = self.anagrams2.get_anagrams("cambodia")
    self.assertEqual(r, ['cambodia'])

    _, r = self.anagrams2.get_anagrams("cambrian")
    self.assertEqual(r, ['cambrian'])

    _, r = self.anagrams2.get_anagrams("cambridge")
    self.assertEqual(r, ['cambridge'])

    _, r = self.anagrams2.get_anagrams("camden")
    self.assertEqual(r, ['camden'])

    _, r = self.anagrams2.get_anagrams("came")
    self.assertEqual(r, ['acme', 'came', 'mace'])

    _, r = self.anagrams2.get_anagrams("camel")
    self.assertEqual(r, ['camel'])

    _, r = self.anagrams2.get_anagrams("camelot")
    self.assertEqual(r, ['camelot'])

    _, r = self.anagrams2.get_anagrams("camels")
    self.assertEqual(r, ['camels'])

    _, r = self.anagrams2.get_anagrams("camembert")
    self.assertEqual(r, ['camembert'])

    _, r = self.anagrams2.get_anagrams("camera")
    self.assertEqual(r, ['camera'])

    _, r = self.anagrams2.get_anagrams("cameraman")
    self.assertEqual(r, ['cameraman'])

    _, r = self.anagrams2.get_anagrams("cameramen")
    self.assertEqual(r, ['cameramen'])

    _, r = self.anagrams2.get_anagrams("cameras")
    self.assertEqual(r, ['cameras'])

    _, r = self.anagrams2.get_anagrams("cameron")
    self.assertEqual(r, ['cameron', 'menorca', 'romance'])

    _, r = self.anagrams2.get_anagrams("cameroon")
    self.assertEqual(r, ['cameroon'])

    _, r = self.anagrams2.get_anagrams("cameroun")
    self.assertEqual(r, ['cameroun'])

    _, r = self.anagrams2.get_anagrams("camilla")
    self.assertEqual(r, ['camilla'])

    _, r = self.anagrams2.get_anagrams("camille")
    self.assertEqual(r, ['camille'])

    _, r = self.anagrams2.get_anagrams("camino")
    self.assertEqual(r, ['anomic', 'camino', 'monica'])

    _, r = self.anagrams2.get_anagrams("camouflage")
    self.assertEqual(r, ['camouflage'])

    _, r = self.anagrams2.get_anagrams("camouflaged")
    self.assertEqual(r, ['camouflaged'])

    _, r = self.anagrams2.get_anagrams("camouflages")
    self.assertEqual(r, ['camouflages'])

    _, r = self.anagrams2.get_anagrams("camouflaging")
    self.assertEqual(r, ['camouflaging'])

    _, r = self.anagrams2.get_anagrams("camp")
    self.assertEqual(r, ['camp'])

    _, r = self.anagrams2.get_anagrams("campaign")
    self.assertEqual(r, ['campaign'])

    _, r = self.anagrams2.get_anagrams("campaigned")
    self.assertEqual(r, ['campaigned'])

    _, r = self.anagrams2.get_anagrams("campaigner")
    self.assertEqual(r, ['campaigner'])

    _, r = self.anagrams2.get_anagrams("campaigners")
    self.assertEqual(r, ['campaigners'])

    _, r = self.anagrams2.get_anagrams("campaigning")
    self.assertEqual(r, ['campaigning'])

    _, r = self.anagrams2.get_anagrams("campaigns")
    self.assertEqual(r, ['campaigns'])

    _, r = self.anagrams2.get_anagrams("campbell")
    self.assertEqual(r, ['campbell'])

    _, r = self.anagrams2.get_anagrams("campbellsport")
    self.assertEqual(r, ['campbellsport'])

    _, r = self.anagrams2.get_anagrams("camped")
    self.assertEqual(r, ['camped'])

    _, r = self.anagrams2.get_anagrams("camper")
    self.assertEqual(r, ['camper'])

    _, r = self.anagrams2.get_anagrams("campers")
    self.assertEqual(r, ['campers', 'scamper'])

    _, r = self.anagrams2.get_anagrams("campfire")
    self.assertEqual(r, ['campfire'])

    _, r = self.anagrams2.get_anagrams("campground")
    self.assertEqual(r, ['campground'])

    _, r = self.anagrams2.get_anagrams("camping")
    self.assertEqual(r, ['camping'])

    _, r = self.anagrams2.get_anagrams("camps")
    self.assertEqual(r, ['camps'])

    _, r = self.anagrams2.get_anagrams("campsite")
    self.assertEqual(r, ['campsite'])

    _, r = self.anagrams2.get_anagrams("campus")
    self.assertEqual(r, ['campus'])

    _, r = self.anagrams2.get_anagrams("campuses")
    self.assertEqual(r, ['campuses'])

    _, r = self.anagrams2.get_anagrams("can")
    self.assertEqual(r, ['can'])

    _, r = self.anagrams2.get_anagrams("canaan")
    self.assertEqual(r, ['canaan'])

    _, r = self.anagrams2.get_anagrams("canada")
    self.assertEqual(r, ['canada'])

    _, r = self.anagrams2.get_anagrams("canadian")
    self.assertEqual(r, ['canadian'])

    _, r = self.anagrams2.get_anagrams("canadianization")
    self.assertEqual(r, ['canadianization'])

    _, r = self.anagrams2.get_anagrams("canadianizations")
    self.assertEqual(r, ['canadianizations'])

    _, r = self.anagrams2.get_anagrams("canadianize")
    self.assertEqual(r, ['canadianize'])

    _, r = self.anagrams2.get_anagrams("canadianizes")
    self.assertEqual(r, ['canadianizes'])

    _, r = self.anagrams2.get_anagrams("canadians")
    self.assertEqual(r, ['canadians'])

    _, r = self.anagrams2.get_anagrams("canal")
    self.assertEqual(r, ['canal'])

    _, r = self.anagrams2.get_anagrams("canals")
    self.assertEqual(r, ['canals'])

    _, r = self.anagrams2.get_anagrams("canaries")
    self.assertEqual(r, ['canaries'])

    _, r = self.anagrams2.get_anagrams("canary")
    self.assertEqual(r, ['canary'])

    _, r = self.anagrams2.get_anagrams("canaveral")
    self.assertEqual(r, ['canaveral'])

    _, r = self.anagrams2.get_anagrams("canberra")
    self.assertEqual(r, ['canberra'])

    _, r = self.anagrams2.get_anagrams("cancel")
    self.assertEqual(r, ['cancel'])

    _, r = self.anagrams2.get_anagrams("canceled")
    self.assertEqual(r, ['canceled'])

    _, r = self.anagrams2.get_anagrams("canceling")
    self.assertEqual(r, ['canceling'])

    _, r = self.anagrams2.get_anagrams("cancellation")
    self.assertEqual(r, ['cancellation'])

    _, r = self.anagrams2.get_anagrams("cancellations")
    self.assertEqual(r, ['cancellations'])

    _, r = self.anagrams2.get_anagrams("cancels")
    self.assertEqual(r, ['cancels'])

    _, r = self.anagrams2.get_anagrams("cancer")
    self.assertEqual(r, ['cancer'])

    _, r = self.anagrams2.get_anagrams("cancerous")
    self.assertEqual(r, ['cancerous'])

    _, r = self.anagrams2.get_anagrams("cancers")
    self.assertEqual(r, ['cancers'])

    _, r = self.anagrams2.get_anagrams("candace")
    self.assertEqual(r, ['candace'])

    _, r = self.anagrams2.get_anagrams("candid")
    self.assertEqual(r, ['candid'])

    _, r = self.anagrams2.get_anagrams("candidacy")
    self.assertEqual(r, ['candidacy'])

    _, r = self.anagrams2.get_anagrams("candidate")
    self.assertEqual(r, ['candidate'])

    _, r = self.anagrams2.get_anagrams("candidates")
    self.assertEqual(r, ['candidates'])

    _, r = self.anagrams2.get_anagrams("candide")
    self.assertEqual(r, ['candide', 'candied'])

    _, r = self.anagrams2.get_anagrams("candidly")
    self.assertEqual(r, ['candidly'])

    _, r = self.anagrams2.get_anagrams("candidness")
    self.assertEqual(r, ['candidness'])

    _, r = self.anagrams2.get_anagrams("candied")
    self.assertEqual(r, ['candide', 'candied'])

    _, r = self.anagrams2.get_anagrams("candies")
    self.assertEqual(r, ['candies'])

    _, r = self.anagrams2.get_anagrams("candle")
    self.assertEqual(r, ['candle', 'lanced'])

    _, r = self.anagrams2.get_anagrams("candlelight")
    self.assertEqual(r, ['candlelight'])

    _, r = self.anagrams2.get_anagrams("candler")
    self.assertEqual(r, ['candler'])

    _, r = self.anagrams2.get_anagrams("candles")
    self.assertEqual(r, ['candles'])

    _, r = self.anagrams2.get_anagrams("candlestick")
    self.assertEqual(r, ['candlestick'])

    _, r = self.anagrams2.get_anagrams("candlesticks")
    self.assertEqual(r, ['candlesticks'])

    _, r = self.anagrams2.get_anagrams("candlewick")
    self.assertEqual(r, ['candlewick'])

    _, r = self.anagrams2.get_anagrams("candor")
    self.assertEqual(r, ['candor', 'conrad', 'dacron'])

    _, r = self.anagrams2.get_anagrams("candy")
    self.assertEqual(r, ['candy'])

    _, r = self.anagrams2.get_anagrams("cane")
    self.assertEqual(r, ['acne', 'cane'])

    _, r = self.anagrams2.get_anagrams("caner")
    self.assertEqual(r, ['caner', 'crane'])

    _, r = self.anagrams2.get_anagrams("canfield")
    self.assertEqual(r, ['canfield'])

    _, r = self.anagrams2.get_anagrams("canine")
    self.assertEqual(r, ['canine'])

    _, r = self.anagrams2.get_anagrams("canis")
    self.assertEqual(r, ['canis', 'incas'])

    _, r = self.anagrams2.get_anagrams("canister")
    self.assertEqual(r, ['canister', 'scantier'])

    _, r = self.anagrams2.get_anagrams("canker")
    self.assertEqual(r, ['canker'])

    _, r = self.anagrams2.get_anagrams("cankerworm")
    self.assertEqual(r, ['cankerworm'])

    _, r = self.anagrams2.get_anagrams("cannabis")
    self.assertEqual(r, ['cannabis'])

    _, r = self.anagrams2.get_anagrams("canned")
    self.assertEqual(r, ['canned'])

    _, r = self.anagrams2.get_anagrams("cannel")
    self.assertEqual(r, ['cannel'])

    _, r = self.anagrams2.get_anagrams("canner")
    self.assertEqual(r, ['canner'])

    _, r = self.anagrams2.get_anagrams("canners")
    self.assertEqual(r, ['canners', 'scanner'])

    _, r = self.anagrams2.get_anagrams("cannery")
    self.assertEqual(r, ['cannery'])

    _, r = self.anagrams2.get_anagrams("cannibal")
    self.assertEqual(r, ['cannibal'])

    _, r = self.anagrams2.get_anagrams("cannibalize")
    self.assertEqual(r, ['cannibalize'])

    _, r = self.anagrams2.get_anagrams("cannibalized")
    self.assertEqual(r, ['cannibalized'])

    _, r = self.anagrams2.get_anagrams("cannibalizes")
    self.assertEqual(r, ['cannibalizes'])

    _, r = self.anagrams2.get_anagrams("cannibalizing")
    self.assertEqual(r, ['cannibalizing'])

    _, r = self.anagrams2.get_anagrams("cannibals")
    self.assertEqual(r, ['cannibals'])

    _, r = self.anagrams2.get_anagrams("canning")
    self.assertEqual(r, ['canning'])

    _, r = self.anagrams2.get_anagrams("cannister")
    self.assertEqual(r, ['cannister'])

    _, r = self.anagrams2.get_anagrams("cannisters")
    self.assertEqual(r, ['cannisters'])

    _, r = self.anagrams2.get_anagrams("cannon")
    self.assertEqual(r, ['cannon'])

    _, r = self.anagrams2.get_anagrams("cannonball")
    self.assertEqual(r, ['cannonball'])

    _, r = self.anagrams2.get_anagrams("cannons")
    self.assertEqual(r, ['cannons'])

    _, r = self.anagrams2.get_anagrams("cannot")
    self.assertEqual(r, ['cannot', 'canton', 'conant'])

    _, r = self.anagrams2.get_anagrams("canny")
    self.assertEqual(r, ['canny', 'nancy'])

    _, r = self.anagrams2.get_anagrams("canoe")
    self.assertEqual(r, ['canoe', 'ocean'])

    _, r = self.anagrams2.get_anagrams("canoes")
    self.assertEqual(r, ['canoes', 'oceans'])

    _, r = self.anagrams2.get_anagrams("canoga")
    self.assertEqual(r, ['canoga'])

    _, r = self.anagrams2.get_anagrams("canon")
    self.assertEqual(r, ['canon'])

    _, r = self.anagrams2.get_anagrams("canonic")
    self.assertEqual(r, ['canonic'])

    _, r = self.anagrams2.get_anagrams("canonical")
    self.assertEqual(r, ['canonical'])

    _, r = self.anagrams2.get_anagrams("canonicalization")
    self.assertEqual(r, ['canonicalization'])

    _, r = self.anagrams2.get_anagrams("canonicalize")
    self.assertEqual(r, ['canonicalize'])

    _, r = self.anagrams2.get_anagrams("canonicalized")
    self.assertEqual(r, ['canonicalized'])

    _, r = self.anagrams2.get_anagrams("canonicalizes")
    self.assertEqual(r, ['canonicalizes'])

    _, r = self.anagrams2.get_anagrams("canonicalizing")
    self.assertEqual(r, ['canonicalizing'])

    _, r = self.anagrams2.get_anagrams("canonically")
    self.assertEqual(r, ['canonically'])

    _, r = self.anagrams2.get_anagrams("canonicals")
    self.assertEqual(r, ['canonicals'])

    _, r = self.anagrams2.get_anagrams("canons")
    self.assertEqual(r, ['canons'])

    _, r = self.anagrams2.get_anagrams("canopus")
    self.assertEqual(r, ['canopus'])

    _, r = self.anagrams2.get_anagrams("canopy")
    self.assertEqual(r, ['canopy'])

    _, r = self.anagrams2.get_anagrams("cans")
    self.assertEqual(r, ['cans', 'scan'])

    _, r = self.anagrams2.get_anagrams("cant")
    self.assertEqual(r, ['cant'])

    _, r = self.anagrams2.get_anagrams("cantabrigian")
    self.assertEqual(r, ['cantabrigian'])

    _, r = self.anagrams2.get_anagrams("cantaloupe")
    self.assertEqual(r, ['cantaloupe'])

    _, r = self.anagrams2.get_anagrams("cantankerous")
    self.assertEqual(r, ['cantankerous'])

    _, r = self.anagrams2.get_anagrams("cantankerously")
    self.assertEqual(r, ['cantankerously'])

    _, r = self.anagrams2.get_anagrams("canteen")
    self.assertEqual(r, ['canteen'])

    _, r = self.anagrams2.get_anagrams("canterbury")
    self.assertEqual(r, ['canterbury'])

    _, r = self.anagrams2.get_anagrams("cantilever")
    self.assertEqual(r, ['cantilever'])

    _, r = self.anagrams2.get_anagrams("canto")
    self.assertEqual(r, ['acton', 'canto'])

    _, r = self.anagrams2.get_anagrams("canton")
    self.assertEqual(r, ['cannot', 'canton', 'conant'])

    _, r = self.anagrams2.get_anagrams("cantonese")
    self.assertEqual(r, ['cantonese'])

    _, r = self.anagrams2.get_anagrams("cantons")
    self.assertEqual(r, ['cantons'])

    _, r = self.anagrams2.get_anagrams("cantor")
    self.assertEqual(r, ['cantor', 'carton'])

    _, r = self.anagrams2.get_anagrams("cantors")
    self.assertEqual(r, ['cantors', 'cartons'])

    _, r = self.anagrams2.get_anagrams("canute")
    self.assertEqual(r, ['canute'])

    _, r = self.anagrams2.get_anagrams("canvas")
    self.assertEqual(r, ['canvas'])

    _, r = self.anagrams2.get_anagrams("canvases")
    self.assertEqual(r, ['canvases'])

    _, r = self.anagrams2.get_anagrams("canvass")
    self.assertEqual(r, ['canvass'])

    _, r = self.anagrams2.get_anagrams("canvassed")
    self.assertEqual(r, ['canvassed'])

    _, r = self.anagrams2.get_anagrams("canvasser")
    self.assertEqual(r, ['canvasser'])

    _, r = self.anagrams2.get_anagrams("canvassers")
    self.assertEqual(r, ['canvassers'])

    _, r = self.anagrams2.get_anagrams("canvasses")
    self.assertEqual(r, ['canvasses'])

    _, r = self.anagrams2.get_anagrams("canvassing")
    self.assertEqual(r, ['canvassing'])

    _, r = self.anagrams2.get_anagrams("canyon")
    self.assertEqual(r, ['canyon'])

    _, r = self.anagrams2.get_anagrams("canyons")
    self.assertEqual(r, ['canyons'])

    _, r = self.anagrams2.get_anagrams("cap")
    self.assertEqual(r, ['cap'])

    _, r = self.anagrams2.get_anagrams("capabilities")
    self.assertEqual(r, ['capabilities'])

    _, r = self.anagrams2.get_anagrams("capability")
    self.assertEqual(r, ['capability'])

    _, r = self.anagrams2.get_anagrams("capable")
    self.assertEqual(r, ['capable'])

    _, r = self.anagrams2.get_anagrams("capably")
    self.assertEqual(r, ['capably'])

    _, r = self.anagrams2.get_anagrams("capacious")
    self.assertEqual(r, ['capacious'])

    _, r = self.anagrams2.get_anagrams("capaciously")
    self.assertEqual(r, ['capaciously'])

    _, r = self.anagrams2.get_anagrams("capaciousness")
    self.assertEqual(r, ['capaciousness'])

    _, r = self.anagrams2.get_anagrams("capacitance")
    self.assertEqual(r, ['capacitance'])

    _, r = self.anagrams2.get_anagrams("capacitances")
    self.assertEqual(r, ['capacitances'])

    _, r = self.anagrams2.get_anagrams("capacities")
    self.assertEqual(r, ['capacities'])

    _, r = self.anagrams2.get_anagrams("capacitive")
    self.assertEqual(r, ['capacitive'])

    _, r = self.anagrams2.get_anagrams("capacitor")
    self.assertEqual(r, ['capacitor'])

    _, r = self.anagrams2.get_anagrams("capacitors")
    self.assertEqual(r, ['capacitors'])

    _, r = self.anagrams2.get_anagrams("capacity")
    self.assertEqual(r, ['capacity'])

    _, r = self.anagrams2.get_anagrams("cape")
    self.assertEqual(r, ['cape', 'pace'])

    _, r = self.anagrams2.get_anagrams("caper")
    self.assertEqual(r, ['caper', 'pacer'])

    _, r = self.anagrams2.get_anagrams("capers")
    self.assertEqual(r, ['capers', 'pacers', 'scrape', 'spacer'])

    _, r = self.anagrams2.get_anagrams("capes")
    self.assertEqual(r, ['capes', 'paces', 'space'])

    _, r = self.anagrams2.get_anagrams("capet")
    self.assertEqual(r, ['capet'])

    _, r = self.anagrams2.get_anagrams("capetown")
    self.assertEqual(r, ['capetown'])

    _, r = self.anagrams2.get_anagrams("capillary")
    self.assertEqual(r, ['capillary'])

    _, r = self.anagrams2.get_anagrams("capistrano")
    self.assertEqual(r, ['capistrano'])

    _, r = self.anagrams2.get_anagrams("capita")
    self.assertEqual(r, ['capita'])

    _, r = self.anagrams2.get_anagrams("capital")
    self.assertEqual(r, ['capital'])

    _, r = self.anagrams2.get_anagrams("capitalism")
    self.assertEqual(r, ['capitalism'])

    _, r = self.anagrams2.get_anagrams("capitalist")
    self.assertEqual(r, ['capitalist'])

    _, r = self.anagrams2.get_anagrams("capitalists")
    self.assertEqual(r, ['capitalists'])

    _, r = self.anagrams2.get_anagrams("capitalization")
    self.assertEqual(r, ['capitalization'])

    _, r = self.anagrams2.get_anagrams("capitalizations")
    self.assertEqual(r, ['capitalizations'])

    _, r = self.anagrams2.get_anagrams("capitalize")
    self.assertEqual(r, ['capitalize'])

    _, r = self.anagrams2.get_anagrams("capitalized")
    self.assertEqual(r, ['capitalized'])

    _, r = self.anagrams2.get_anagrams("capitalizer")
    self.assertEqual(r, ['capitalizer'])

    _, r = self.anagrams2.get_anagrams("capitalizers")
    self.assertEqual(r, ['capitalizers'])

    _, r = self.anagrams2.get_anagrams("capitalizes")
    self.assertEqual(r, ['capitalizes'])

    _, r = self.anagrams2.get_anagrams("capitalizing")
    self.assertEqual(r, ['capitalizing'])

    _, r = self.anagrams2.get_anagrams("capitally")
    self.assertEqual(r, ['capitally'])

    _, r = self.anagrams2.get_anagrams("capitals")
    self.assertEqual(r, ['capitals'])

    _, r = self.anagrams2.get_anagrams("capitan")
    self.assertEqual(r, ['capitan', 'captain'])

    _, r = self.anagrams2.get_anagrams("capitol")
    self.assertEqual(r, ['capitol', 'optical', 'topical'])

    _, r = self.anagrams2.get_anagrams("capitoline")
    self.assertEqual(r, ['capitoline'])

    _, r = self.anagrams2.get_anagrams("capitols")
    self.assertEqual(r, ['capitols'])

    _, r = self.anagrams2.get_anagrams("capped")
    self.assertEqual(r, ['capped'])

    _, r = self.anagrams2.get_anagrams("capping")
    self.assertEqual(r, ['capping'])

    _, r = self.anagrams2.get_anagrams("cappy")
    self.assertEqual(r, ['cappy'])

    _, r = self.anagrams2.get_anagrams("caprice")
    self.assertEqual(r, ['caprice'])

    _, r = self.anagrams2.get_anagrams("capricious")
    self.assertEqual(r, ['capricious'])

    _, r = self.anagrams2.get_anagrams("capriciously")
    self.assertEqual(r, ['capriciously'])

    _, r = self.anagrams2.get_anagrams("capriciousness")
    self.assertEqual(r, ['capriciousness'])

    _, r = self.anagrams2.get_anagrams("capricorn")
    self.assertEqual(r, ['capricorn'])

    _, r = self.anagrams2.get_anagrams("caps")
    self.assertEqual(r, ['caps'])

    _, r = self.anagrams2.get_anagrams("capsicum")
    self.assertEqual(r, ['capsicum'])

    _, r = self.anagrams2.get_anagrams("capstan")
    self.assertEqual(r, ['capstan'])

    _, r = self.anagrams2.get_anagrams("capstone")
    self.assertEqual(r, ['capstone'])

    _, r = self.anagrams2.get_anagrams("capsule")
    self.assertEqual(r, ['capsule'])

    _, r = self.anagrams2.get_anagrams("captain")
    self.assertEqual(r, ['capitan', 'captain'])

    _, r = self.anagrams2.get_anagrams("captained")
    self.assertEqual(r, ['captained'])

    _, r = self.anagrams2.get_anagrams("captaining")
    self.assertEqual(r, ['captaining'])

    _, r = self.anagrams2.get_anagrams("captains")
    self.assertEqual(r, ['captains'])

    _, r = self.anagrams2.get_anagrams("caption")
    self.assertEqual(r, ['caption', 'pontiac'])

    _, r = self.anagrams2.get_anagrams("captions")
    self.assertEqual(r, ['captions'])

    _, r = self.anagrams2.get_anagrams("captivate")
    self.assertEqual(r, ['captivate'])

    _, r = self.anagrams2.get_anagrams("captivated")
    self.assertEqual(r, ['captivated'])

    _, r = self.anagrams2.get_anagrams("captivates")
    self.assertEqual(r, ['captivates'])

    _, r = self.anagrams2.get_anagrams("captivating")
    self.assertEqual(r, ['captivating'])

    _, r = self.anagrams2.get_anagrams("captivation")
    self.assertEqual(r, ['captivation'])

    _, r = self.anagrams2.get_anagrams("captive")
    self.assertEqual(r, ['captive'])

    _, r = self.anagrams2.get_anagrams("captives")
    self.assertEqual(r, ['captives'])

    _, r = self.anagrams2.get_anagrams("captivity")
    self.assertEqual(r, ['captivity'])

    _, r = self.anagrams2.get_anagrams("captor")
    self.assertEqual(r, ['captor'])

    _, r = self.anagrams2.get_anagrams("captors")
    self.assertEqual(r, ['captors'])

    _, r = self.anagrams2.get_anagrams("capture")
    self.assertEqual(r, ['capture'])

    _, r = self.anagrams2.get_anagrams("captured")
    self.assertEqual(r, ['captured'])

    _, r = self.anagrams2.get_anagrams("capturer")
    self.assertEqual(r, ['capturer'])

    _, r = self.anagrams2.get_anagrams("capturers")
    self.assertEqual(r, ['capturers'])

    _, r = self.anagrams2.get_anagrams("captures")
    self.assertEqual(r, ['captures'])

    _, r = self.anagrams2.get_anagrams("capturing")
    self.assertEqual(r, ['capturing'])

    _, r = self.anagrams2.get_anagrams("caputo")
    self.assertEqual(r, ['caputo'])

    _, r = self.anagrams2.get_anagrams("capybara")
    self.assertEqual(r, ['capybara'])

    _, r = self.anagrams2.get_anagrams("car")
    self.assertEqual(r, ['arc', 'car'])

    _, r = self.anagrams2.get_anagrams("caracas")
    self.assertEqual(r, ['caracas'])

    _, r = self.anagrams2.get_anagrams("caramel")
    self.assertEqual(r, ['caramel', 'carmela'])

    _, r = self.anagrams2.get_anagrams("caravan")
    self.assertEqual(r, ['caravan'])

    _, r = self.anagrams2.get_anagrams("caravans")
    self.assertEqual(r, ['caravans'])

    _, r = self.anagrams2.get_anagrams("caraway")
    self.assertEqual(r, ['caraway'])

    _, r = self.anagrams2.get_anagrams("carbohydrate")
    self.assertEqual(r, ['carbohydrate'])

    _, r = self.anagrams2.get_anagrams("carbolic")
    self.assertEqual(r, ['carbolic'])

    _, r = self.anagrams2.get_anagrams("carboloy")
    self.assertEqual(r, ['carboloy'])

    _, r = self.anagrams2.get_anagrams("carbon")
    self.assertEqual(r, ['carbon'])

    _, r = self.anagrams2.get_anagrams("carbonate")
    self.assertEqual(r, ['carbonate'])

    _, r = self.anagrams2.get_anagrams("carbonates")
    self.assertEqual(r, ['carbonates'])

    _, r = self.anagrams2.get_anagrams("carbonation")
    self.assertEqual(r, ['carbonation'])

    _, r = self.anagrams2.get_anagrams("carbondale")
    self.assertEqual(r, ['carbondale'])

    _, r = self.anagrams2.get_anagrams("carbone")
    self.assertEqual(r, ['carbone'])

    _, r = self.anagrams2.get_anagrams("carbones")
    self.assertEqual(r, ['carbones'])

    _, r = self.anagrams2.get_anagrams("carbonic")
    self.assertEqual(r, ['carbonic'])

    _, r = self.anagrams2.get_anagrams("carbonization")
    self.assertEqual(r, ['carbonization'])

    _, r = self.anagrams2.get_anagrams("carbonize")
    self.assertEqual(r, ['carbonize'])

    _, r = self.anagrams2.get_anagrams("carbonized")
    self.assertEqual(r, ['carbonized'])

    _, r = self.anagrams2.get_anagrams("carbonizer")
    self.assertEqual(r, ['carbonizer'])

    _, r = self.anagrams2.get_anagrams("carbonizers")
    self.assertEqual(r, ['carbonizers'])

    _, r = self.anagrams2.get_anagrams("carbonizes")
    self.assertEqual(r, ['carbonizes'])

    _, r = self.anagrams2.get_anagrams("carbonizing")
    self.assertEqual(r, ['carbonizing'])

    _, r = self.anagrams2.get_anagrams("carbons")
    self.assertEqual(r, ['carbons'])

    _, r = self.anagrams2.get_anagrams("carborundum")
    self.assertEqual(r, ['carborundum'])

    _, r = self.anagrams2.get_anagrams("carbuncle")
    self.assertEqual(r, ['carbuncle'])

    _, r = self.anagrams2.get_anagrams("carcass")
    self.assertEqual(r, ['carcass'])

    _, r = self.anagrams2.get_anagrams("carcasses")
    self.assertEqual(r, ['carcasses'])

    _, r = self.anagrams2.get_anagrams("carcinogen")
    self.assertEqual(r, ['carcinogen'])

    _, r = self.anagrams2.get_anagrams("carcinogenic")
    self.assertEqual(r, ['carcinogenic'])

    _, r = self.anagrams2.get_anagrams("carcinoma")
    self.assertEqual(r, ['carcinoma'])

    _, r = self.anagrams2.get_anagrams("card")
    self.assertEqual(r, ['card'])

    _, r = self.anagrams2.get_anagrams("cardboard")
    self.assertEqual(r, ['cardboard'])

    _, r = self.anagrams2.get_anagrams("carder")
    self.assertEqual(r, ['carder'])

    _, r = self.anagrams2.get_anagrams("cardiac")
    self.assertEqual(r, ['cardiac'])

    _, r = self.anagrams2.get_anagrams("cardiff")
    self.assertEqual(r, ['cardiff'])

    _, r = self.anagrams2.get_anagrams("cardinal")
    self.assertEqual(r, ['cardinal'])

    _, r = self.anagrams2.get_anagrams("cardinalities")
    self.assertEqual(r, ['cardinalities'])

    _, r = self.anagrams2.get_anagrams("cardinality")
    self.assertEqual(r, ['cardinality'])

    _, r = self.anagrams2.get_anagrams("cardinally")
    self.assertEqual(r, ['cardinally'])

    _, r = self.anagrams2.get_anagrams("cardinals")
    self.assertEqual(r, ['cardinals'])

    _, r = self.anagrams2.get_anagrams("cardiod")
    self.assertEqual(r, ['cardiod'])

    _, r = self.anagrams2.get_anagrams("cardiology")
    self.assertEqual(r, ['cardiology'])

    _, r = self.anagrams2.get_anagrams("cardiovascular")
    self.assertEqual(r, ['cardiovascular'])

    _, r = self.anagrams2.get_anagrams("cards")
    self.assertEqual(r, ['cards'])

    _, r = self.anagrams2.get_anagrams("care")
    self.assertEqual(r, ['acre', 'care', 'race'])

    _, r = self.anagrams2.get_anagrams("cared")
    self.assertEqual(r, ['arced', 'cared', 'cedar', 'raced'])

    _, r = self.anagrams2.get_anagrams("careen")
    self.assertEqual(r, ['careen'])

    _, r = self.anagrams2.get_anagrams("career")
    self.assertEqual(r, ['career'])

    _, r = self.anagrams2.get_anagrams("careers")
    self.assertEqual(r, ['careers'])

    _, r = self.anagrams2.get_anagrams("carefree")
    self.assertEqual(r, ['carefree'])

    _, r = self.anagrams2.get_anagrams("careful")
    self.assertEqual(r, ['careful'])

    _, r = self.anagrams2.get_anagrams("carefully")
    self.assertEqual(r, ['carefully'])

    _, r = self.anagrams2.get_anagrams("carefulness")
    self.assertEqual(r, ['carefulness'])

    _, r = self.anagrams2.get_anagrams("careless")
    self.assertEqual(r, ['careless'])

    _, r = self.anagrams2.get_anagrams("carelessly")
    self.assertEqual(r, ['carelessly'])

    _, r = self.anagrams2.get_anagrams("carelessness")
    self.assertEqual(r, ['carelessness'])

    _, r = self.anagrams2.get_anagrams("cares")
    self.assertEqual(r, ['acres', 'cares', 'races', 'scare'])

    _, r = self.anagrams2.get_anagrams("caress")
    self.assertEqual(r, ['caress', 'scares'])

    _, r = self.anagrams2.get_anagrams("caressed")
    self.assertEqual(r, ['caressed'])

    _, r = self.anagrams2.get_anagrams("caresser")
    self.assertEqual(r, ['caresser'])

    _, r = self.anagrams2.get_anagrams("caresses")
    self.assertEqual(r, ['caresses'])

    _, r = self.anagrams2.get_anagrams("caressing")
    self.assertEqual(r, ['caressing'])

    _, r = self.anagrams2.get_anagrams("caret")
    self.assertEqual(r, ['caret', 'cater', 'crate', 'react', 'recta', 'trace'])

    _, r = self.anagrams2.get_anagrams("caretaker")
    self.assertEqual(r, ['caretaker'])

    _, r = self.anagrams2.get_anagrams("carey")
    self.assertEqual(r, ['carey'])

    _, r = self.anagrams2.get_anagrams("cargill")
    self.assertEqual(r, ['cargill'])

    _, r = self.anagrams2.get_anagrams("cargo")
    self.assertEqual(r, ['cargo'])

    _, r = self.anagrams2.get_anagrams("cargoes")
    self.assertEqual(r, ['cargoes'])

    _, r = self.anagrams2.get_anagrams("carib")
    self.assertEqual(r, ['carib'])

    _, r = self.anagrams2.get_anagrams("caribbean")
    self.assertEqual(r, ['caribbean'])

    _, r = self.anagrams2.get_anagrams("caribou")
    self.assertEqual(r, ['caribou'])

    _, r = self.anagrams2.get_anagrams("caricature")
    self.assertEqual(r, ['caricature'])

    _, r = self.anagrams2.get_anagrams("caring")
    self.assertEqual(r, ['arcing', 'caring', 'racing'])

    _, r = self.anagrams2.get_anagrams("carl")
    self.assertEqual(r, ['carl'])

    _, r = self.anagrams2.get_anagrams("carla")
    self.assertEqual(r, ['carla', 'clara'])

    _, r = self.anagrams2.get_anagrams("carleton")
    self.assertEqual(r, ['carleton'])

    _, r = self.anagrams2.get_anagrams("carletonian")
    self.assertEqual(r, ['carletonian'])

    _, r = self.anagrams2.get_anagrams("carlin")
    self.assertEqual(r, ['carlin'])

    _, r = self.anagrams2.get_anagrams("carlisle")
    self.assertEqual(r, ['carlisle'])

    _, r = self.anagrams2.get_anagrams("carlo")
    self.assertEqual(r, ['carlo', 'carol', 'coral'])

    _, r = self.anagrams2.get_anagrams("carload")
    self.assertEqual(r, ['carload'])

    _, r = self.anagrams2.get_anagrams("carlsbad")
    self.assertEqual(r, ['carlsbad'])

    _, r = self.anagrams2.get_anagrams("carlsbads")
    self.assertEqual(r, ['carlsbads'])

    _, r = self.anagrams2.get_anagrams("carlson")
    self.assertEqual(r, ['carlson'])

    _, r = self.anagrams2.get_anagrams("carlton")
    self.assertEqual(r, ['carlton'])

    _, r = self.anagrams2.get_anagrams("carlyle")
    self.assertEqual(r, ['carlyle', 'clearly'])

    _, r = self.anagrams2.get_anagrams("carmela")
    self.assertEqual(r, ['caramel', 'carmela'])

    _, r = self.anagrams2.get_anagrams("carmen")
    self.assertEqual(r, ['carmen'])

    _, r = self.anagrams2.get_anagrams("carmichael")
    self.assertEqual(r, ['carmichael'])

    _, r = self.anagrams2.get_anagrams("carnage")
    self.assertEqual(r, ['carnage'])

    _, r = self.anagrams2.get_anagrams("carnal")
    self.assertEqual(r, ['carnal'])

    _, r = self.anagrams2.get_anagrams("carnation")
    self.assertEqual(r, ['carnation'])

    _, r = self.anagrams2.get_anagrams("carnegie")
    self.assertEqual(r, ['carnegie'])

    _, r = self.anagrams2.get_anagrams("carnival")
    self.assertEqual(r, ['carnival'])

    _, r = self.anagrams2.get_anagrams("carnivals")
    self.assertEqual(r, ['carnivals'])

    _, r = self.anagrams2.get_anagrams("carnivorous")
    self.assertEqual(r, ['carnivorous'])

    _, r = self.anagrams2.get_anagrams("carnivorously")
    self.assertEqual(r, ['carnivorously'])

    _, r = self.anagrams2.get_anagrams("carol")
    self.assertEqual(r, ['carlo', 'carol', 'coral'])

    _, r = self.anagrams2.get_anagrams("carolina")
    self.assertEqual(r, ['carolina'])

    _, r = self.anagrams2.get_anagrams("carolinas")
    self.assertEqual(r, ['carolinas'])

    _, r = self.anagrams2.get_anagrams("caroline")
    self.assertEqual(r, ['caroline', 'cornelia'])

    _, r = self.anagrams2.get_anagrams("carolingian")
    self.assertEqual(r, ['carolingian'])

    _, r = self.anagrams2.get_anagrams("carolinian")
    self.assertEqual(r, ['carolinian'])

    _, r = self.anagrams2.get_anagrams("carolinians")
    self.assertEqual(r, ['carolinians'])

    _, r = self.anagrams2.get_anagrams("carols")
    self.assertEqual(r, ['carols'])

    _, r = self.anagrams2.get_anagrams("carolyn")
    self.assertEqual(r, ['carolyn'])

    _, r = self.anagrams2.get_anagrams("carp")
    self.assertEqual(r, ['carp', 'parc'])

    _, r = self.anagrams2.get_anagrams("carpathia")
    self.assertEqual(r, ['carpathia'])

    _, r = self.anagrams2.get_anagrams("carpathians")
    self.assertEqual(r, ['carpathians'])

    _, r = self.anagrams2.get_anagrams("carpenter")
    self.assertEqual(r, ['carpenter'])

    _, r = self.anagrams2.get_anagrams("carpenters")
    self.assertEqual(r, ['carpenters'])

    _, r = self.anagrams2.get_anagrams("carpentry")
    self.assertEqual(r, ['carpentry'])

    _, r = self.anagrams2.get_anagrams("carpet")
    self.assertEqual(r, ['carpet'])

    _, r = self.anagrams2.get_anagrams("carpeted")
    self.assertEqual(r, ['carpeted'])

    _, r = self.anagrams2.get_anagrams("carpeting")
    self.assertEqual(r, ['carpeting'])

    _, r = self.anagrams2.get_anagrams("carpets")
    self.assertEqual(r, ['carpets', 'spectra'])

    _, r = self.anagrams2.get_anagrams("carport")
    self.assertEqual(r, ['carport'])

    _, r = self.anagrams2.get_anagrams("carr")
    self.assertEqual(r, ['carr'])

    _, r = self.anagrams2.get_anagrams("carrara")
    self.assertEqual(r, ['carrara'])

    _, r = self.anagrams2.get_anagrams("carriage")
    self.assertEqual(r, ['carriage'])

    _, r = self.anagrams2.get_anagrams("carriages")
    self.assertEqual(r, ['carriages'])

    _, r = self.anagrams2.get_anagrams("carrie")
    self.assertEqual(r, ['carrie'])

    _, r = self.anagrams2.get_anagrams("carried")
    self.assertEqual(r, ['carried'])

    _, r = self.anagrams2.get_anagrams("carrier")
    self.assertEqual(r, ['carrier'])

    _, r = self.anagrams2.get_anagrams("carriers")
    self.assertEqual(r, ['carriers'])

    _, r = self.anagrams2.get_anagrams("carries")
    self.assertEqual(r, ['carries'])

    _, r = self.anagrams2.get_anagrams("carrion")
    self.assertEqual(r, ['carrion'])

    _, r = self.anagrams2.get_anagrams("carroll")
    self.assertEqual(r, ['carroll'])

    _, r = self.anagrams2.get_anagrams("carrot")
    self.assertEqual(r, ['carrot'])

    _, r = self.anagrams2.get_anagrams("carrots")
    self.assertEqual(r, ['carrots'])

    _, r = self.anagrams2.get_anagrams("carruthers")
    self.assertEqual(r, ['carruthers'])

    _, r = self.anagrams2.get_anagrams("carry")
    self.assertEqual(r, ['carry'])

    _, r = self.anagrams2.get_anagrams("carrying")
    self.assertEqual(r, ['carrying'])

    _, r = self.anagrams2.get_anagrams("carryover")
    self.assertEqual(r, ['carryover'])

    _, r = self.anagrams2.get_anagrams("carryovers")
    self.assertEqual(r, ['carryovers'])

    _, r = self.anagrams2.get_anagrams("cars")
    self.assertEqual(r, ['arcs', 'cars', 'scar'])

    _, r = self.anagrams2.get_anagrams("carson")
    self.assertEqual(r, ['acorns', 'carson'])

    _, r = self.anagrams2.get_anagrams("cart")
    self.assertEqual(r, ['cart'])

    _, r = self.anagrams2.get_anagrams("carted")
    self.assertEqual(r, ['carted', 'traced'])

    _, r = self.anagrams2.get_anagrams("cartel")
    self.assertEqual(r, ['cartel'])

    _, r = self.anagrams2.get_anagrams("carter")
    self.assertEqual(r, ['carter', 'crater', 'tracer'])

    _, r = self.anagrams2.get_anagrams("carters")
    self.assertEqual(r, ['carters', 'craters', 'tracers'])

    _, r = self.anagrams2.get_anagrams("cartesian")
    self.assertEqual(r, ['ascertain', 'cartesian', 'sectarian'])

    _, r = self.anagrams2.get_anagrams("carthage")
    self.assertEqual(r, ['carthage'])

    _, r = self.anagrams2.get_anagrams("carthaginian")
    self.assertEqual(r, ['carthaginian'])

    _, r = self.anagrams2.get_anagrams("cartilage")
    self.assertEqual(r, ['cartilage'])

    _, r = self.anagrams2.get_anagrams("carting")
    self.assertEqual(r, ['carting', 'tracing'])

    _, r = self.anagrams2.get_anagrams("cartographer")
    self.assertEqual(r, ['cartographer'])

    _, r = self.anagrams2.get_anagrams("cartographic")
    self.assertEqual(r, ['cartographic'])

    _, r = self.anagrams2.get_anagrams("cartography")
    self.assertEqual(r, ['cartography'])

    _, r = self.anagrams2.get_anagrams("carton")
    self.assertEqual(r, ['cantor', 'carton'])

    _, r = self.anagrams2.get_anagrams("cartons")
    self.assertEqual(r, ['cantors', 'cartons'])

    _, r = self.anagrams2.get_anagrams("cartoon")
    self.assertEqual(r, ['cartoon'])

    _, r = self.anagrams2.get_anagrams("cartoons")
    self.assertEqual(r, ['cartoons'])

    _, r = self.anagrams2.get_anagrams("cartridge")
    self.assertEqual(r, ['cartridge'])

    _, r = self.anagrams2.get_anagrams("cartridges")
    self.assertEqual(r, ['cartridges'])

    _, r = self.anagrams2.get_anagrams("carts")
    self.assertEqual(r, ['carts'])

    _, r = self.anagrams2.get_anagrams("cartwheel")
    self.assertEqual(r, ['cartwheel'])

    _, r = self.anagrams2.get_anagrams("carty")
    self.assertEqual(r, ['carty', 'tracy'])

    _, r = self.anagrams2.get_anagrams("caruso")
    self.assertEqual(r, ['caruso'])

    _, r = self.anagrams2.get_anagrams("carve")
    self.assertEqual(r, ['carve', 'crave'])

    _, r = self.anagrams2.get_anagrams("carved")
    self.assertEqual(r, ['carved', 'craved'])

    _, r = self.anagrams2.get_anagrams("carver")
    self.assertEqual(r, ['carver'])

    _, r = self.anagrams2.get_anagrams("carves")
    self.assertEqual(r, ['carves', 'craves'])

    _, r = self.anagrams2.get_anagrams("carving")
    self.assertEqual(r, ['carving', 'craving'])

    _, r = self.anagrams2.get_anagrams("carvings")
    self.assertEqual(r, ['carvings'])

    _, r = self.anagrams2.get_anagrams("casanova")
    self.assertEqual(r, ['casanova'])

    _, r = self.anagrams2.get_anagrams("cascadable")
    self.assertEqual(r, ['cascadable'])

    _, r = self.anagrams2.get_anagrams("cascade")
    self.assertEqual(r, ['cascade'])

    _, r = self.anagrams2.get_anagrams("cascaded")
    self.assertEqual(r, ['cascaded'])

    _, r = self.anagrams2.get_anagrams("cascades")
    self.assertEqual(r, ['cascades'])

    _, r = self.anagrams2.get_anagrams("cascading")
    self.assertEqual(r, ['cascading'])

    _, r = self.anagrams2.get_anagrams("case")
    self.assertEqual(r, ['aces', 'case'])

    _, r = self.anagrams2.get_anagrams("cased")
    self.assertEqual(r, ['cased'])

    _, r = self.anagrams2.get_anagrams("casement")
    self.assertEqual(r, ['casement'])

    _, r = self.anagrams2.get_anagrams("casements")
    self.assertEqual(r, ['casements'])

    _, r = self.anagrams2.get_anagrams("cases")
    self.assertEqual(r, ['cases'])

    _, r = self.anagrams2.get_anagrams("casework")
    self.assertEqual(r, ['casework'])

    _, r = self.anagrams2.get_anagrams("casey")
    self.assertEqual(r, ['casey'])

    _, r = self.anagrams2.get_anagrams("cash")
    self.assertEqual(r, ['cash'])

    _, r = self.anagrams2.get_anagrams("cashed")
    self.assertEqual(r, ['cashed', 'chased'])

    _, r = self.anagrams2.get_anagrams("casher")
    self.assertEqual(r, ['arches', 'casher', 'chaser', 'search'])

    _, r = self.anagrams2.get_anagrams("cashers")
    self.assertEqual(r, ['cashers', 'chasers', 'crashes'])

    _, r = self.anagrams2.get_anagrams("cashes")
    self.assertEqual(r, ['cashes', 'chases'])

    _, r = self.anagrams2.get_anagrams("cashew")
    self.assertEqual(r, ['cashew'])

    _, r = self.anagrams2.get_anagrams("cashier")
    self.assertEqual(r, ['cashier'])

    _, r = self.anagrams2.get_anagrams("cashiers")
    self.assertEqual(r, ['cashiers'])

    _, r = self.anagrams2.get_anagrams("cashing")
    self.assertEqual(r, ['cashing', 'chasing'])

    _, r = self.anagrams2.get_anagrams("cashmere")
    self.assertEqual(r, ['cashmere'])

    _, r = self.anagrams2.get_anagrams("casing")
    self.assertEqual(r, ['casing'])

    _, r = self.anagrams2.get_anagrams("casings")
    self.assertEqual(r, ['casings'])

    _, r = self.anagrams2.get_anagrams("casino")
    self.assertEqual(r, ['casino'])

    _, r = self.anagrams2.get_anagrams("cask")
    self.assertEqual(r, ['cask', 'sack'])

    _, r = self.anagrams2.get_anagrams("casket")
    self.assertEqual(r, ['casket'])

    _, r = self.anagrams2.get_anagrams("caskets")
    self.assertEqual(r, ['caskets'])

    _, r = self.anagrams2.get_anagrams("casks")
    self.assertEqual(r, ['casks', 'sacks'])

    _, r = self.anagrams2.get_anagrams("caspian")
    self.assertEqual(r, ['caspian'])

    _, r = self.anagrams2.get_anagrams("cassandra")
    self.assertEqual(r, ['cassandra'])

    _, r = self.anagrams2.get_anagrams("casserole")
    self.assertEqual(r, ['casserole'])

    _, r = self.anagrams2.get_anagrams("casseroles")
    self.assertEqual(r, ['casseroles'])

    _, r = self.anagrams2.get_anagrams("cassette")
    self.assertEqual(r, ['cassette'])

    _, r = self.anagrams2.get_anagrams("cassiopeia")
    self.assertEqual(r, ['cassiopeia'])

    _, r = self.anagrams2.get_anagrams("cassite")
    self.assertEqual(r, ['cassite'])

    _, r = self.anagrams2.get_anagrams("cassites")
    self.assertEqual(r, ['cassites'])

    _, r = self.anagrams2.get_anagrams("cassius")
    self.assertEqual(r, ['cassius'])

    _, r = self.anagrams2.get_anagrams("cassock")
    self.assertEqual(r, ['cassock', 'cossack'])

    _, r = self.anagrams2.get_anagrams("cast")
    self.assertEqual(r, ['acts', 'cast', 'cats'])

    _, r = self.anagrams2.get_anagrams("caste")
    self.assertEqual(r, ['caste'])

    _, r = self.anagrams2.get_anagrams("caster")
    self.assertEqual(r, ['caster', 'caters', 'crates', 'reacts', 'recast', 'traces'])

    _, r = self.anagrams2.get_anagrams("casters")
    self.assertEqual(r, ['actress', 'casters', 'recasts'])

    _, r = self.anagrams2.get_anagrams("castes")
    self.assertEqual(r, ['castes'])

    _, r = self.anagrams2.get_anagrams("castigate")
    self.assertEqual(r, ['castigate'])

    _, r = self.anagrams2.get_anagrams("castillo")
    self.assertEqual(r, ['callisto', 'castillo'])

    _, r = self.anagrams2.get_anagrams("casting")
    self.assertEqual(r, ['casting'])

    _, r = self.anagrams2.get_anagrams("castle")
    self.assertEqual(r, ['castle'])

    _, r = self.anagrams2.get_anagrams("castled")
    self.assertEqual(r, ['castled'])

    _, r = self.anagrams2.get_anagrams("castles")
    self.assertEqual(r, ['castles'])

    _, r = self.anagrams2.get_anagrams("castor")
    self.assertEqual(r, ['actors', 'castor', 'castro'])

    _, r = self.anagrams2.get_anagrams("castro")
    self.assertEqual(r, ['actors', 'castor', 'castro'])

    _, r = self.anagrams2.get_anagrams("castroism")
    self.assertEqual(r, ['castroism', 'ostracism'])

    _, r = self.anagrams2.get_anagrams("casts")
    self.assertEqual(r, ['casts'])

    _, r = self.anagrams2.get_anagrams("casual")
    self.assertEqual(r, ['casual', 'causal'])

    _, r = self.anagrams2.get_anagrams("casually")
    self.assertEqual(r, ['casually', 'causally'])

    _, r = self.anagrams2.get_anagrams("casualness")
    self.assertEqual(r, ['casualness'])

    _, r = self.anagrams2.get_anagrams("casuals")
    self.assertEqual(r, ['casuals'])

    _, r = self.anagrams2.get_anagrams("casualties")
    self.assertEqual(r, ['casualties'])

    _, r = self.anagrams2.get_anagrams("casualty")
    self.assertEqual(r, ['casualty'])

    _, r = self.anagrams2.get_anagrams("cat")
    self.assertEqual(r, ['act', 'cat'])

    _, r = self.anagrams2.get_anagrams("cataclysmic")
    self.assertEqual(r, ['cataclysmic'])

    _, r = self.anagrams2.get_anagrams("catalan")
    self.assertEqual(r, ['catalan'])

    _, r = self.anagrams2.get_anagrams("catalina")
    self.assertEqual(r, ['catalina'])

    _, r = self.anagrams2.get_anagrams("catalog")
    self.assertEqual(r, ['catalog'])

    _, r = self.anagrams2.get_anagrams("cataloged")
    self.assertEqual(r, ['cataloged'])

    _, r = self.anagrams2.get_anagrams("cataloger")
    self.assertEqual(r, ['cataloger'])

    _, r = self.anagrams2.get_anagrams("cataloging")
    self.assertEqual(r, ['cataloging'])

    _, r = self.anagrams2.get_anagrams("catalogs")
    self.assertEqual(r, ['catalogs'])

    _, r = self.anagrams2.get_anagrams("catalonia")
    self.assertEqual(r, ['catalonia'])

    _, r = self.anagrams2.get_anagrams("catalyst")
    self.assertEqual(r, ['catalyst'])

    _, r = self.anagrams2.get_anagrams("catalysts")
    self.assertEqual(r, ['catalysts'])

    _, r = self.anagrams2.get_anagrams("catalytic")
    self.assertEqual(r, ['catalytic'])

    _, r = self.anagrams2.get_anagrams("catapult")
    self.assertEqual(r, ['catapult'])

    _, r = self.anagrams2.get_anagrams("cataract")
    self.assertEqual(r, ['cataract'])

    _, r = self.anagrams2.get_anagrams("catastrophe")
    self.assertEqual(r, ['catastrophe'])

    _, r = self.anagrams2.get_anagrams("catastrophes")
    self.assertEqual(r, ['catastrophes'])

    _, r = self.anagrams2.get_anagrams("catastrophic")
    self.assertEqual(r, ['catastrophic'])

    _, r = self.anagrams2.get_anagrams("catawba")
    self.assertEqual(r, ['catawba'])

    _, r = self.anagrams2.get_anagrams("catch")
    self.assertEqual(r, ['catch'])

    _, r = self.anagrams2.get_anagrams("catchable")
    self.assertEqual(r, ['catchable'])

    _, r = self.anagrams2.get_anagrams("catcher")
    self.assertEqual(r, ['catcher'])

    _, r = self.anagrams2.get_anagrams("catchers")
    self.assertEqual(r, ['catchers'])

    _, r = self.anagrams2.get_anagrams("catches")
    self.assertEqual(r, ['catches'])

    _, r = self.anagrams2.get_anagrams("catching")
    self.assertEqual(r, ['catching'])

    _, r = self.anagrams2.get_anagrams("categorical")
    self.assertEqual(r, ['categorical'])

    _, r = self.anagrams2.get_anagrams("categorically")
    self.assertEqual(r, ['categorically'])

    _, r = self.anagrams2.get_anagrams("categories")
    self.assertEqual(r, ['categories'])

    _, r = self.anagrams2.get_anagrams("categorization")
    self.assertEqual(r, ['categorization'])

    _, r = self.anagrams2.get_anagrams("categorize")
    self.assertEqual(r, ['categorize'])

    _, r = self.anagrams2.get_anagrams("categorized")
    self.assertEqual(r, ['categorized'])

    _, r = self.anagrams2.get_anagrams("categorizer")
    self.assertEqual(r, ['categorizer'])

    _, r = self.anagrams2.get_anagrams("categorizers")
    self.assertEqual(r, ['categorizers'])

    _, r = self.anagrams2.get_anagrams("categorizes")
    self.assertEqual(r, ['categorizes'])

    _, r = self.anagrams2.get_anagrams("categorizing")
    self.assertEqual(r, ['categorizing'])

    _, r = self.anagrams2.get_anagrams("category")
    self.assertEqual(r, ['category'])

    _, r = self.anagrams2.get_anagrams("cater")
    self.assertEqual(r, ['caret', 'cater', 'crate', 'react', 'recta', 'trace'])

    _, r = self.anagrams2.get_anagrams("catered")
    self.assertEqual(r, ['catered', 'created', 'reacted'])

    _, r = self.anagrams2.get_anagrams("caterer")
    self.assertEqual(r, ['caterer', 'retrace', 'terrace'])

    _, r = self.anagrams2.get_anagrams("catering")
    self.assertEqual(r, ['catering', 'creating', 'reacting'])

    _, r = self.anagrams2.get_anagrams("caterpillar")
    self.assertEqual(r, ['caterpillar'])

    _, r = self.anagrams2.get_anagrams("caterpillars")
    self.assertEqual(r, ['caterpillars'])

    _, r = self.anagrams2.get_anagrams("caters")
    self.assertEqual(r, ['caster', 'caters', 'crates', 'reacts', 'recast', 'traces'])

    _, r = self.anagrams2.get_anagrams("cathedral")
    self.assertEqual(r, ['cathedral'])

    _, r = self.anagrams2.get_anagrams("cathedrals")
    self.assertEqual(r, ['cathedrals'])

    _, r = self.anagrams2.get_anagrams("catherine")
    self.assertEqual(r, ['catherine'])

    _, r = self.anagrams2.get_anagrams("catherwood")
    self.assertEqual(r, ['catherwood'])

    _, r = self.anagrams2.get_anagrams("catheter")
    self.assertEqual(r, ['catheter'])

    _, r = self.anagrams2.get_anagrams("catheters")
    self.assertEqual(r, ['catheters'])

    _, r = self.anagrams2.get_anagrams("cathode")
    self.assertEqual(r, ['cathode'])

    _, r = self.anagrams2.get_anagrams("cathodes")
    self.assertEqual(r, ['cathodes'])

    _, r = self.anagrams2.get_anagrams("catholic")
    self.assertEqual(r, ['catholic'])

    _, r = self.anagrams2.get_anagrams("catholicism")
    self.assertEqual(r, ['catholicism'])

    _, r = self.anagrams2.get_anagrams("catholicisms")
    self.assertEqual(r, ['catholicisms'])

    _, r = self.anagrams2.get_anagrams("catholics")
    self.assertEqual(r, ['catholics'])

    _, r = self.anagrams2.get_anagrams("cathy")
    self.assertEqual(r, ['cathy'])

    _, r = self.anagrams2.get_anagrams("catlike")
    self.assertEqual(r, ['catlike'])

    _, r = self.anagrams2.get_anagrams("catnip")
    self.assertEqual(r, ['catnip'])

    _, r = self.anagrams2.get_anagrams("cats")
    self.assertEqual(r, ['acts', 'cast', 'cats'])

    _, r = self.anagrams2.get_anagrams("catskill")
    self.assertEqual(r, ['catskill'])

    _, r = self.anagrams2.get_anagrams("catskills")
    self.assertEqual(r, ['catskills'])

    _, r = self.anagrams2.get_anagrams("catsup")
    self.assertEqual(r, ['catsup'])

    _, r = self.anagrams2.get_anagrams("cattail")
    self.assertEqual(r, ['cattail'])

    _, r = self.anagrams2.get_anagrams("cattle")
    self.assertEqual(r, ['cattle'])

    _, r = self.anagrams2.get_anagrams("cattleman")
    self.assertEqual(r, ['cattleman'])

    _, r = self.anagrams2.get_anagrams("cattlemen")
    self.assertEqual(r, ['cattlemen'])

    _, r = self.anagrams2.get_anagrams("caucasian")
    self.assertEqual(r, ['caucasian'])

    _, r = self.anagrams2.get_anagrams("caucasians")
    self.assertEqual(r, ['caucasians'])

    _, r = self.anagrams2.get_anagrams("caucasus")
    self.assertEqual(r, ['caucasus'])

    _, r = self.anagrams2.get_anagrams("cauchy")
    self.assertEqual(r, ['cauchy'])

    _, r = self.anagrams2.get_anagrams("caucus")
    self.assertEqual(r, ['caucus'])

    _, r = self.anagrams2.get_anagrams("caught")
    self.assertEqual(r, ['caught'])

    _, r = self.anagrams2.get_anagrams("cauldron")
    self.assertEqual(r, ['cauldron'])

    _, r = self.anagrams2.get_anagrams("cauldrons")
    self.assertEqual(r, ['cauldrons'])

    _, r = self.anagrams2.get_anagrams("cauliflower")
    self.assertEqual(r, ['cauliflower'])

    _, r = self.anagrams2.get_anagrams("caulk")
    self.assertEqual(r, ['caulk'])

    _, r = self.anagrams2.get_anagrams("causal")
    self.assertEqual(r, ['casual', 'causal'])

    _, r = self.anagrams2.get_anagrams("causality")
    self.assertEqual(r, ['causality'])

    _, r = self.anagrams2.get_anagrams("causally")
    self.assertEqual(r, ['casually', 'causally'])

    _, r = self.anagrams2.get_anagrams("causation")
    self.assertEqual(r, ['causation'])

    _, r = self.anagrams2.get_anagrams("causations")
    self.assertEqual(r, ['causations'])

    _, r = self.anagrams2.get_anagrams("cause")
    self.assertEqual(r, ['cause', 'sauce'])

    _, r = self.anagrams2.get_anagrams("caused")
    self.assertEqual(r, ['caused'])

    _, r = self.anagrams2.get_anagrams("causer")
    self.assertEqual(r, ['causer', 'saucer'])

    _, r = self.anagrams2.get_anagrams("causes")
    self.assertEqual(r, ['causes', 'sauces'])

    _, r = self.anagrams2.get_anagrams("causeway")
    self.assertEqual(r, ['causeway'])

    _, r = self.anagrams2.get_anagrams("causeways")
    self.assertEqual(r, ['causeways'])

    _, r = self.anagrams2.get_anagrams("causing")
    self.assertEqual(r, ['causing'])

    _, r = self.anagrams2.get_anagrams("caustic")
    self.assertEqual(r, ['caustic'])

    _, r = self.anagrams2.get_anagrams("causticly")
    self.assertEqual(r, ['causticly'])

    _, r = self.anagrams2.get_anagrams("caustics")
    self.assertEqual(r, ['caustics'])

    _, r = self.anagrams2.get_anagrams("caution")
    self.assertEqual(r, ['auction', 'caution'])

    _, r = self.anagrams2.get_anagrams("cautioned")
    self.assertEqual(r, ['cautioned', 'education'])

    _, r = self.anagrams2.get_anagrams("cautioner")
    self.assertEqual(r, ['cautioner'])

    _, r = self.anagrams2.get_anagrams("cautioners")
    self.assertEqual(r, ['cautioners'])

    _, r = self.anagrams2.get_anagrams("cautioning")
    self.assertEqual(r, ['cautioning'])

    _, r = self.anagrams2.get_anagrams("cautionings")
    self.assertEqual(r, ['cautionings'])

    _, r = self.anagrams2.get_anagrams("cautions")
    self.assertEqual(r, ['cautions'])

    _, r = self.anagrams2.get_anagrams("cautious")
    self.assertEqual(r, ['cautious'])

    _, r = self.anagrams2.get_anagrams("cautiously")
    self.assertEqual(r, ['cautiously'])

    _, r = self.anagrams2.get_anagrams("cautiousness")
    self.assertEqual(r, ['cautiousness'])

    _, r = self.anagrams2.get_anagrams("cavalier")
    self.assertEqual(r, ['cavalier'])

    _, r = self.anagrams2.get_anagrams("cavalierly")
    self.assertEqual(r, ['cavalierly'])

    _, r = self.anagrams2.get_anagrams("cavalierness")
    self.assertEqual(r, ['cavalierness'])

    _, r = self.anagrams2.get_anagrams("cavalry")
    self.assertEqual(r, ['calvary', 'cavalry'])

    _, r = self.anagrams2.get_anagrams("cave")
    self.assertEqual(r, ['cave'])

    _, r = self.anagrams2.get_anagrams("caveat")
    self.assertEqual(r, ['caveat', 'vacate'])

    _, r = self.anagrams2.get_anagrams("caveats")
    self.assertEqual(r, ['caveats', 'vacates'])

    _, r = self.anagrams2.get_anagrams("caved")
    self.assertEqual(r, ['caved'])

    _, r = self.anagrams2.get_anagrams("caveman")
    self.assertEqual(r, ['caveman'])

    _, r = self.anagrams2.get_anagrams("cavemen")
    self.assertEqual(r, ['cavemen'])

    _, r = self.anagrams2.get_anagrams("cavendish")
    self.assertEqual(r, ['cavendish'])

    _, r = self.anagrams2.get_anagrams("cavern")
    self.assertEqual(r, ['cavern', 'craven'])

    _, r = self.anagrams2.get_anagrams("cavernous")
    self.assertEqual(r, ['cavernous'])

    _, r = self.anagrams2.get_anagrams("caverns")
    self.assertEqual(r, ['caverns'])

    _, r = self.anagrams2.get_anagrams("caves")
    self.assertEqual(r, ['caves'])

    _, r = self.anagrams2.get_anagrams("caviar")
    self.assertEqual(r, ['caviar'])

    _, r = self.anagrams2.get_anagrams("cavil")
    self.assertEqual(r, ['cavil'])

    _, r = self.anagrams2.get_anagrams("caviness")
    self.assertEqual(r, ['caviness'])

    _, r = self.anagrams2.get_anagrams("caving")
    self.assertEqual(r, ['caving'])

    _, r = self.anagrams2.get_anagrams("cavities")
    self.assertEqual(r, ['cavities'])

    _, r = self.anagrams2.get_anagrams("cavity")
    self.assertEqual(r, ['cavity'])

    _, r = self.anagrams2.get_anagrams("caw")
    self.assertEqual(r, ['caw'])

    _, r = self.anagrams2.get_anagrams("cawing")
    self.assertEqual(r, ['cawing'])

    _, r = self.anagrams2.get_anagrams("cayley")
    self.assertEqual(r, ['cayley'])

    _, r = self.anagrams2.get_anagrams("cayuga")
    self.assertEqual(r, ['cayuga'])

    _, r = self.anagrams2.get_anagrams("cease")
    self.assertEqual(r, ['cease'])

    _, r = self.anagrams2.get_anagrams("ceased")
    self.assertEqual(r, ['ceased'])

    _, r = self.anagrams2.get_anagrams("ceaseless")
    self.assertEqual(r, ['ceaseless'])

    _, r = self.anagrams2.get_anagrams("ceaselessly")
    self.assertEqual(r, ['ceaselessly'])

    _, r = self.anagrams2.get_anagrams("ceaselessness")
    self.assertEqual(r, ['ceaselessness'])

    _, r = self.anagrams2.get_anagrams("ceases")
    self.assertEqual(r, ['ceases'])

    _, r = self.anagrams2.get_anagrams("ceasing")
    self.assertEqual(r, ['ceasing'])

    _, r = self.anagrams2.get_anagrams("cecil")
    self.assertEqual(r, ['cecil'])

    _, r = self.anagrams2.get_anagrams("cecilia")
    self.assertEqual(r, ['cecilia'])

    _, r = self.anagrams2.get_anagrams("cecropia")
    self.assertEqual(r, ['cecropia'])

    _, r = self.anagrams2.get_anagrams("cedar")
    self.assertEqual(r, ['arced', 'cared', 'cedar', 'raced'])

    _, r = self.anagrams2.get_anagrams("cede")
    self.assertEqual(r, ['cede'])

    _, r = self.anagrams2.get_anagrams("ceded")
    self.assertEqual(r, ['ceded'])

    _, r = self.anagrams2.get_anagrams("ceding")
    self.assertEqual(r, ['ceding'])

    _, r = self.anagrams2.get_anagrams("cedric")
    self.assertEqual(r, ['cedric'])

    _, r = self.anagrams2.get_anagrams("ceiling")
    self.assertEqual(r, ['ceiling'])

    _, r = self.anagrams2.get_anagrams("ceilings")
    self.assertEqual(r, ['ceilings'])

    _, r = self.anagrams2.get_anagrams("celanese")
    self.assertEqual(r, ['celanese'])

    _, r = self.anagrams2.get_anagrams("celebes")
    self.assertEqual(r, ['celebes'])

    _, r = self.anagrams2.get_anagrams("celebrate")
    self.assertEqual(r, ['celebrate'])

    _, r = self.anagrams2.get_anagrams("celebrated")
    self.assertEqual(r, ['celebrated'])

    _, r = self.anagrams2.get_anagrams("celebrates")
    self.assertEqual(r, ['celebrates'])

    _, r = self.anagrams2.get_anagrams("celebrating")
    self.assertEqual(r, ['celebrating'])

    _, r = self.anagrams2.get_anagrams("celebration")
    self.assertEqual(r, ['celebration'])

    _, r = self.anagrams2.get_anagrams("celebrations")
    self.assertEqual(r, ['celebrations'])

    _, r = self.anagrams2.get_anagrams("celebrities")
    self.assertEqual(r, ['celebrities'])

    _, r = self.anagrams2.get_anagrams("celebrity")
    self.assertEqual(r, ['celebrity'])

    _, r = self.anagrams2.get_anagrams("celerity")
    self.assertEqual(r, ['celerity'])

    _, r = self.anagrams2.get_anagrams("celery")
    self.assertEqual(r, ['celery'])

    _, r = self.anagrams2.get_anagrams("celeste")
    self.assertEqual(r, ['celeste'])

    _, r = self.anagrams2.get_anagrams("celestial")
    self.assertEqual(r, ['celestial'])

    _, r = self.anagrams2.get_anagrams("celestially")
    self.assertEqual(r, ['celestially'])

    _, r = self.anagrams2.get_anagrams("celia")
    self.assertEqual(r, ['alice', 'celia'])

    _, r = self.anagrams2.get_anagrams("cell")
    self.assertEqual(r, ['cell'])

    _, r = self.anagrams2.get_anagrams("cellar")
    self.assertEqual(r, ['caller', 'cellar', 'recall'])

    _, r = self.anagrams2.get_anagrams("cellars")
    self.assertEqual(r, ['callers', 'cellars', 'recalls'])

    _, r = self.anagrams2.get_anagrams("celled")
    self.assertEqual(r, ['celled'])

    _, r = self.anagrams2.get_anagrams("cellist")
    self.assertEqual(r, ['cellist'])

    _, r = self.anagrams2.get_anagrams("cellists")
    self.assertEqual(r, ['cellists'])

    _, r = self.anagrams2.get_anagrams("cellophane")
    self.assertEqual(r, ['cellophane'])

    _, r = self.anagrams2.get_anagrams("cells")
    self.assertEqual(r, ['cells'])

    _, r = self.anagrams2.get_anagrams("cellular")
    self.assertEqual(r, ['cellular'])

    _, r = self.anagrams2.get_anagrams("cellulose")
    self.assertEqual(r, ['cellulose'])

    _, r = self.anagrams2.get_anagrams("celsius")
    self.assertEqual(r, ['celsius'])

    _, r = self.anagrams2.get_anagrams("celt")
    self.assertEqual(r, ['celt'])

    _, r = self.anagrams2.get_anagrams("celtic")
    self.assertEqual(r, ['celtic'])

    _, r = self.anagrams2.get_anagrams("celticize")
    self.assertEqual(r, ['celticize'])

    _, r = self.anagrams2.get_anagrams("celticizes")
    self.assertEqual(r, ['celticizes'])

    _, r = self.anagrams2.get_anagrams("cement")
    self.assertEqual(r, ['cement'])

    _, r = self.anagrams2.get_anagrams("cemented")
    self.assertEqual(r, ['cemented'])

    _, r = self.anagrams2.get_anagrams("cementing")
    self.assertEqual(r, ['cementing'])

    _, r = self.anagrams2.get_anagrams("cements")
    self.assertEqual(r, ['cements'])

    _, r = self.anagrams2.get_anagrams("cemeteries")
    self.assertEqual(r, ['cemeteries'])

    _, r = self.anagrams2.get_anagrams("cemetery")
    self.assertEqual(r, ['cemetery'])

    _, r = self.anagrams2.get_anagrams("cenozoic")
    self.assertEqual(r, ['cenozoic'])

    _, r = self.anagrams2.get_anagrams("censor")
    self.assertEqual(r, ['censor'])

    _, r = self.anagrams2.get_anagrams("censored")
    self.assertEqual(r, ['censored', 'encoders', 'seconder'])

    _, r = self.anagrams2.get_anagrams("censoring")
    self.assertEqual(r, ['censoring'])

    _, r = self.anagrams2.get_anagrams("censors")
    self.assertEqual(r, ['censors'])

    _, r = self.anagrams2.get_anagrams("censorship")
    self.assertEqual(r, ['censorship'])

    _, r = self.anagrams2.get_anagrams("censure")
    self.assertEqual(r, ['censure'])

    _, r = self.anagrams2.get_anagrams("censured")
    self.assertEqual(r, ['censured'])

    _, r = self.anagrams2.get_anagrams("censurer")
    self.assertEqual(r, ['censurer'])

    _, r = self.anagrams2.get_anagrams("censures")
    self.assertEqual(r, ['censures'])

    _, r = self.anagrams2.get_anagrams("census")
    self.assertEqual(r, ['census'])

    _, r = self.anagrams2.get_anagrams("censuses")
    self.assertEqual(r, ['censuses'])

    _, r = self.anagrams2.get_anagrams("cent")
    self.assertEqual(r, ['cent'])

    _, r = self.anagrams2.get_anagrams("centaur")
    self.assertEqual(r, ['centaur'])

    _, r = self.anagrams2.get_anagrams("centenary")
    self.assertEqual(r, ['centenary'])

    _, r = self.anagrams2.get_anagrams("centennial")
    self.assertEqual(r, ['centennial'])

    _, r = self.anagrams2.get_anagrams("center")
    self.assertEqual(r, ['center', 'recent'])

    _, r = self.anagrams2.get_anagrams("centered")
    self.assertEqual(r, ['centered'])

    _, r = self.anagrams2.get_anagrams("centering")
    self.assertEqual(r, ['centering'])

    _, r = self.anagrams2.get_anagrams("centerpiece")
    self.assertEqual(r, ['centerpiece'])

    _, r = self.anagrams2.get_anagrams("centerpieces")
    self.assertEqual(r, ['centerpieces'])

    _, r = self.anagrams2.get_anagrams("centers")
    self.assertEqual(r, ['centers'])

    _, r = self.anagrams2.get_anagrams("centigrade")
    self.assertEqual(r, ['centigrade'])

    _, r = self.anagrams2.get_anagrams("centimeter")
    self.assertEqual(r, ['centimeter'])

    _, r = self.anagrams2.get_anagrams("centimeters")
    self.assertEqual(r, ['centimeters'])

    _, r = self.anagrams2.get_anagrams("centipede")
    self.assertEqual(r, ['centipede'])

    _, r = self.anagrams2.get_anagrams("centipedes")
    self.assertEqual(r, ['centipedes'])

    _, r = self.anagrams2.get_anagrams("central")
    self.assertEqual(r, ['central'])

    _, r = self.anagrams2.get_anagrams("centralia")
    self.assertEqual(r, ['centralia'])

    _, r = self.anagrams2.get_anagrams("centralism")
    self.assertEqual(r, ['centralism'])

    _, r = self.anagrams2.get_anagrams("centralist")
    self.assertEqual(r, ['centralist'])

    _, r = self.anagrams2.get_anagrams("centralization")
    self.assertEqual(r, ['centralization'])

    _, r = self.anagrams2.get_anagrams("centralize")
    self.assertEqual(r, ['centralize'])

    _, r = self.anagrams2.get_anagrams("centralized")
    self.assertEqual(r, ['centralized'])

    _, r = self.anagrams2.get_anagrams("centralizes")
    self.assertEqual(r, ['centralizes'])

    _, r = self.anagrams2.get_anagrams("centralizing")
    self.assertEqual(r, ['centralizing'])

    _, r = self.anagrams2.get_anagrams("centrally")
    self.assertEqual(r, ['centrally'])

    _, r = self.anagrams2.get_anagrams("centrex")
    self.assertEqual(r, ['centrex', 'centrex'])

    _, r = self.anagrams2.get_anagrams("centrex")
    self.assertEqual(r, ['centrex', 'centrex'])

    _, r = self.anagrams2.get_anagrams("centrifugal")
    self.assertEqual(r, ['centrifugal'])

    _, r = self.anagrams2.get_anagrams("centrifuge")
    self.assertEqual(r, ['centrifuge'])

    _, r = self.anagrams2.get_anagrams("centripetal")
    self.assertEqual(r, ['centripetal'])

    _, r = self.anagrams2.get_anagrams("centrist")
    self.assertEqual(r, ['centrist'])

    _, r = self.anagrams2.get_anagrams("centroid")
    self.assertEqual(r, ['centroid', 'doctrine'])

    _, r = self.anagrams2.get_anagrams("cents")
    self.assertEqual(r, ['cents', 'scent'])

    _, r = self.anagrams2.get_anagrams("centuries")
    self.assertEqual(r, ['centuries'])

    _, r = self.anagrams2.get_anagrams("century")
    self.assertEqual(r, ['century'])

    _, r = self.anagrams2.get_anagrams("cepheus")
    self.assertEqual(r, ['cepheus'])

    _, r = self.anagrams2.get_anagrams("ceramic")
    self.assertEqual(r, ['ceramic'])

    _, r = self.anagrams2.get_anagrams("cerberus")
    self.assertEqual(r, ['cerberus'])

    _, r = self.anagrams2.get_anagrams("cereal")
    self.assertEqual(r, ['cereal'])

    _, r = self.anagrams2.get_anagrams("cereals")
    self.assertEqual(r, ['cereals'])

    _, r = self.anagrams2.get_anagrams("cerebellum")
    self.assertEqual(r, ['cerebellum'])

    _, r = self.anagrams2.get_anagrams("cerebral")
    self.assertEqual(r, ['cerebral'])

    _, r = self.anagrams2.get_anagrams("ceremonial")
    self.assertEqual(r, ['ceremonial'])

    _, r = self.anagrams2.get_anagrams("ceremonially")
    self.assertEqual(r, ['ceremonially'])

    _, r = self.anagrams2.get_anagrams("ceremonialness")
    self.assertEqual(r, ['ceremonialness'])

    _, r = self.anagrams2.get_anagrams("ceremonies")
    self.assertEqual(r, ['ceremonies'])

    _, r = self.anagrams2.get_anagrams("ceremony")
    self.assertEqual(r, ['ceremony'])

    _, r = self.anagrams2.get_anagrams("ceres")
    self.assertEqual(r, ['ceres'])

    _, r = self.anagrams2.get_anagrams("cern")
    self.assertEqual(r, ['cern'])

    _, r = self.anagrams2.get_anagrams("certain")
    self.assertEqual(r, ['certain'])

    _, r = self.anagrams2.get_anagrams("certainly")
    self.assertEqual(r, ['certainly'])

    _, r = self.anagrams2.get_anagrams("certainties")
    self.assertEqual(r, ['certainties'])

    _, r = self.anagrams2.get_anagrams("certainty")
    self.assertEqual(r, ['certainty'])

    _, r = self.anagrams2.get_anagrams("certifiable")
    self.assertEqual(r, ['certifiable'])

    _, r = self.anagrams2.get_anagrams("certificate")
    self.assertEqual(r, ['certificate'])

    _, r = self.anagrams2.get_anagrams("certificates")
    self.assertEqual(r, ['certificates'])

    _, r = self.anagrams2.get_anagrams("certification")
    self.assertEqual(r, ['certification'])

    _, r = self.anagrams2.get_anagrams("certifications")
    self.assertEqual(r, ['certifications'])

    _, r = self.anagrams2.get_anagrams("certified")
    self.assertEqual(r, ['certified'])

    _, r = self.anagrams2.get_anagrams("certifier")
    self.assertEqual(r, ['certifier'])

    _, r = self.anagrams2.get_anagrams("certifiers")
    self.assertEqual(r, ['certifiers'])

    _, r = self.anagrams2.get_anagrams("certifies")
    self.assertEqual(r, ['certifies'])

    _, r = self.anagrams2.get_anagrams("certify")
    self.assertEqual(r, ['certify', 'rectify'])

    _, r = self.anagrams2.get_anagrams("certifying")
    self.assertEqual(r, ['certifying'])

    _, r = self.anagrams2.get_anagrams("cervantes")
    self.assertEqual(r, ['cervantes'])

    _, r = self.anagrams2.get_anagrams("cesare")
    self.assertEqual(r, ['cesare', 'crease'])

    _, r = self.anagrams2.get_anagrams("cessation")
    self.assertEqual(r, ['cessation'])

    _, r = self.anagrams2.get_anagrams("cessations")
    self.assertEqual(r, ['cessations'])

    _, r = self.anagrams2.get_anagrams("cessna")
    self.assertEqual(r, ['cessna'])

    _, r = self.anagrams2.get_anagrams("cetus")
    self.assertEqual(r, ['cetus'])

    _, r = self.anagrams2.get_anagrams("ceylon")
    self.assertEqual(r, ['ceylon', 'conley'])

    _, r = self.anagrams2.get_anagrams("cezanne")
    self.assertEqual(r, ['cezanne'])

    _, r = self.anagrams2.get_anagrams("cezannes")
    self.assertEqual(r, ['cezannes'])

    _, r = self.anagrams2.get_anagrams("chablis")
    self.assertEqual(r, ['chablis'])

    _, r = self.anagrams2.get_anagrams("chablises")
    self.assertEqual(r, ['chablises'])

    _, r = self.anagrams2.get_anagrams("chad")
    self.assertEqual(r, ['chad'])

    _, r = self.anagrams2.get_anagrams("chadwick")
    self.assertEqual(r, ['chadwick'])

    _, r = self.anagrams2.get_anagrams("chafe")
    self.assertEqual(r, ['chafe'])

    _, r = self.anagrams2.get_anagrams("chafer")
    self.assertEqual(r, ['chafer'])

    _, r = self.anagrams2.get_anagrams("chaff")
    self.assertEqual(r, ['chaff'])

    _, r = self.anagrams2.get_anagrams("chaffer")
    self.assertEqual(r, ['chaffer'])

    _, r = self.anagrams2.get_anagrams("chaffey")
    self.assertEqual(r, ['chaffey'])

    _, r = self.anagrams2.get_anagrams("chaffing")
    self.assertEqual(r, ['chaffing'])

    _, r = self.anagrams2.get_anagrams("chafing")
    self.assertEqual(r, ['chafing'])

    _, r = self.anagrams2.get_anagrams("chagrin")
    self.assertEqual(r, ['arching', 'chagrin'])

    _, r = self.anagrams2.get_anagrams("chain")
    self.assertEqual(r, ['chain', 'china'])

    _, r = self.anagrams2.get_anagrams("chained")
    self.assertEqual(r, ['chained'])

    _, r = self.anagrams2.get_anagrams("chaining")
    self.assertEqual(r, ['chaining'])

    _, r = self.anagrams2.get_anagrams("chains")
    self.assertEqual(r, ['chains', 'chinas'])

    _, r = self.anagrams2.get_anagrams("chair")
    self.assertEqual(r, ['chair'])

    _, r = self.anagrams2.get_anagrams("chaired")
    self.assertEqual(r, ['chaired'])

    _, r = self.anagrams2.get_anagrams("chairing")
    self.assertEqual(r, ['chairing'])

    _, r = self.anagrams2.get_anagrams("chairlady")
    self.assertEqual(r, ['chairlady'])

    _, r = self.anagrams2.get_anagrams("chairman")
    self.assertEqual(r, ['chairman'])

    _, r = self.anagrams2.get_anagrams("chairmen")
    self.assertEqual(r, ['chairmen'])

    _, r = self.anagrams2.get_anagrams("chairperson")
    self.assertEqual(r, ['chairperson'])

    _, r = self.anagrams2.get_anagrams("chairpersons")
    self.assertEqual(r, ['chairpersons'])

    _, r = self.anagrams2.get_anagrams("chairs")
    self.assertEqual(r, ['chairs'])

    _, r = self.anagrams2.get_anagrams("chairwoman")
    self.assertEqual(r, ['chairwoman'])

    _, r = self.anagrams2.get_anagrams("chairwomen")
    self.assertEqual(r, ['chairwomen'])

    _, r = self.anagrams2.get_anagrams("chalice")
    self.assertEqual(r, ['chalice'])

    _, r = self.anagrams2.get_anagrams("chalices")
    self.assertEqual(r, ['chalices'])

    _, r = self.anagrams2.get_anagrams("chalk")
    self.assertEqual(r, ['chalk'])

    _, r = self.anagrams2.get_anagrams("chalked")
    self.assertEqual(r, ['chalked'])

    _, r = self.anagrams2.get_anagrams("chalking")
    self.assertEqual(r, ['chalking'])

    _, r = self.anagrams2.get_anagrams("chalks")
    self.assertEqual(r, ['chalks'])

    _, r = self.anagrams2.get_anagrams("challenge")
    self.assertEqual(r, ['challenge'])

    _, r = self.anagrams2.get_anagrams("challenged")
    self.assertEqual(r, ['challenged'])

    _, r = self.anagrams2.get_anagrams("challenger")
    self.assertEqual(r, ['challenger'])

    _, r = self.anagrams2.get_anagrams("challengers")
    self.assertEqual(r, ['challengers'])

    _, r = self.anagrams2.get_anagrams("challenges")
    self.assertEqual(r, ['challenges'])

    _, r = self.anagrams2.get_anagrams("challenging")
    self.assertEqual(r, ['challenging'])

    _, r = self.anagrams2.get_anagrams("chalmers")
    self.assertEqual(r, ['chalmers'])

    _, r = self.anagrams2.get_anagrams("chamber")
    self.assertEqual(r, ['chamber'])

    _, r = self.anagrams2.get_anagrams("chambered")
    self.assertEqual(r, ['chambered'])

    _, r = self.anagrams2.get_anagrams("chamberlain")
    self.assertEqual(r, ['chamberlain'])

    _, r = self.anagrams2.get_anagrams("chamberlains")
    self.assertEqual(r, ['chamberlains'])

    _, r = self.anagrams2.get_anagrams("chambermaid")
    self.assertEqual(r, ['chambermaid'])

    _, r = self.anagrams2.get_anagrams("chambers")
    self.assertEqual(r, ['chambers'])

    _, r = self.anagrams2.get_anagrams("chameleon")
    self.assertEqual(r, ['chameleon'])

    _, r = self.anagrams2.get_anagrams("champagne")
    self.assertEqual(r, ['champagne'])

    _, r = self.anagrams2.get_anagrams("champaign")
    self.assertEqual(r, ['champaign'])

    _, r = self.anagrams2.get_anagrams("champion")
    self.assertEqual(r, ['champion'])

    _, r = self.anagrams2.get_anagrams("championed")
    self.assertEqual(r, ['championed'])

    _, r = self.anagrams2.get_anagrams("championing")
    self.assertEqual(r, ['championing'])

    _, r = self.anagrams2.get_anagrams("champions")
    self.assertEqual(r, ['champions'])

    _, r = self.anagrams2.get_anagrams("championship")
    self.assertEqual(r, ['championship'])

    _, r = self.anagrams2.get_anagrams("championships")
    self.assertEqual(r, ['championships'])

    _, r = self.anagrams2.get_anagrams("champlain")
    self.assertEqual(r, ['champlain'])

    _, r = self.anagrams2.get_anagrams("chance")
    self.assertEqual(r, ['chance'])

    _, r = self.anagrams2.get_anagrams("chanced")
    self.assertEqual(r, ['chanced'])

    _, r = self.anagrams2.get_anagrams("chancellor")
    self.assertEqual(r, ['chancellor'])

    _, r = self.anagrams2.get_anagrams("chancellorsville")
    self.assertEqual(r, ['chancellorsville'])

    _, r = self.anagrams2.get_anagrams("chancery")
    self.assertEqual(r, ['chancery'])

    _, r = self.anagrams2.get_anagrams("chances")
    self.assertEqual(r, ['chances'])

    _, r = self.anagrams2.get_anagrams("chancing")
    self.assertEqual(r, ['chancing'])

    _, r = self.anagrams2.get_anagrams("chandelier")
    self.assertEqual(r, ['chandelier'])

    _, r = self.anagrams2.get_anagrams("chandeliers")
    self.assertEqual(r, ['chandeliers'])

    _, r = self.anagrams2.get_anagrams("chandigarh")
    self.assertEqual(r, ['chandigarh'])

    _, r = self.anagrams2.get_anagrams("chang")
    self.assertEqual(r, ['chang'])

    _, r = self.anagrams2.get_anagrams("change")
    self.assertEqual(r, ['change'])

    _, r = self.anagrams2.get_anagrams("changeability")
    self.assertEqual(r, ['changeability'])

    _, r = self.anagrams2.get_anagrams("changeable")
    self.assertEqual(r, ['changeable'])

    _, r = self.anagrams2.get_anagrams("changeably")
    self.assertEqual(r, ['changeably'])

    _, r = self.anagrams2.get_anagrams("changed")
    self.assertEqual(r, ['changed'])

    _, r = self.anagrams2.get_anagrams("changeover")
    self.assertEqual(r, ['changeover'])

    _, r = self.anagrams2.get_anagrams("changer")
    self.assertEqual(r, ['changer'])

    _, r = self.anagrams2.get_anagrams("changers")
    self.assertEqual(r, ['changers'])

    _, r = self.anagrams2.get_anagrams("changes")
    self.assertEqual(r, ['changes'])

    _, r = self.anagrams2.get_anagrams("changing")
    self.assertEqual(r, ['changing'])

    _, r = self.anagrams2.get_anagrams("channel")
    self.assertEqual(r, ['channel'])

    _, r = self.anagrams2.get_anagrams("channeled")
    self.assertEqual(r, ['channeled'])

    _, r = self.anagrams2.get_anagrams("channeling")
    self.assertEqual(r, ['channeling'])

    _, r = self.anagrams2.get_anagrams("channelled")
    self.assertEqual(r, ['channelled'])

    _, r = self.anagrams2.get_anagrams("channeller")
    self.assertEqual(r, ['channeller'])

    _, r = self.anagrams2.get_anagrams("channellers")
    self.assertEqual(r, ['channellers'])

    _, r = self.anagrams2.get_anagrams("channelling")
    self.assertEqual(r, ['channelling'])

    _, r = self.anagrams2.get_anagrams("channels")
    self.assertEqual(r, ['channels'])

    _, r = self.anagrams2.get_anagrams("channing")
    self.assertEqual(r, ['channing'])

    _, r = self.anagrams2.get_anagrams("chant")
    self.assertEqual(r, ['chant'])

    _, r = self.anagrams2.get_anagrams("chanted")
    self.assertEqual(r, ['chanted'])

    _, r = self.anagrams2.get_anagrams("chanter")
    self.assertEqual(r, ['chanter'])

    _, r = self.anagrams2.get_anagrams("chanticleer")
    self.assertEqual(r, ['chanticleer'])

    _, r = self.anagrams2.get_anagrams("chanticleers")
    self.assertEqual(r, ['chanticleers'])

    _, r = self.anagrams2.get_anagrams("chantilly")
    self.assertEqual(r, ['chantilly'])

    _, r = self.anagrams2.get_anagrams("chanting")
    self.assertEqual(r, ['chanting'])

    _, r = self.anagrams2.get_anagrams("chants")
    self.assertEqual(r, ['chants', 'snatch', 'stanch'])

    _, r = self.anagrams2.get_anagrams("chao")
    self.assertEqual(r, ['chao'])

    _, r = self.anagrams2.get_anagrams("chaos")
    self.assertEqual(r, ['chaos'])

    _, r = self.anagrams2.get_anagrams("chaotic")
    self.assertEqual(r, ['chaotic'])

    _, r = self.anagrams2.get_anagrams("chap")
    self.assertEqual(r, ['chap'])

    _, r = self.anagrams2.get_anagrams("chapel")
    self.assertEqual(r, ['chapel'])

    _, r = self.anagrams2.get_anagrams("chapels")
    self.assertEqual(r, ['chapels'])

    _, r = self.anagrams2.get_anagrams("chaperon")
    self.assertEqual(r, ['chaperon'])

    _, r = self.anagrams2.get_anagrams("chaperone")
    self.assertEqual(r, ['chaperone'])

    _, r = self.anagrams2.get_anagrams("chaperoned")
    self.assertEqual(r, ['chaperoned'])

    _, r = self.anagrams2.get_anagrams("chaplain")
    self.assertEqual(r, ['chaplain'])

    _, r = self.anagrams2.get_anagrams("chaplains")
    self.assertEqual(r, ['chaplains'])

    _, r = self.anagrams2.get_anagrams("chaplin")
    self.assertEqual(r, ['chaplin'])

    _, r = self.anagrams2.get_anagrams("chapman")
    self.assertEqual(r, ['chapman'])

    _, r = self.anagrams2.get_anagrams("chaps")
    self.assertEqual(r, ['chaps'])

    _, r = self.anagrams2.get_anagrams("chapter")
    self.assertEqual(r, ['chapter'])

    _, r = self.anagrams2.get_anagrams("chapters")
    self.assertEqual(r, ['chapters'])

    _, r = self.anagrams2.get_anagrams("char")
    self.assertEqual(r, ['arch', 'char'])

    _, r = self.anagrams2.get_anagrams("character")
    self.assertEqual(r, ['character'])

    _, r = self.anagrams2.get_anagrams("characteristic")
    self.assertEqual(r, ['characteristic'])

    _, r = self.anagrams2.get_anagrams("characteristically")
    self.assertEqual(r, ['characteristically'])

    _, r = self.anagrams2.get_anagrams("characteristics")
    self.assertEqual(r, ['characteristics'])

    _, r = self.anagrams2.get_anagrams("characterizable")
    self.assertEqual(r, ['characterizable'])

    _, r = self.anagrams2.get_anagrams("characterization")
    self.assertEqual(r, ['characterization'])

    _, r = self.anagrams2.get_anagrams("characterizations")
    self.assertEqual(r, ['characterizations'])

    _, r = self.anagrams2.get_anagrams("characterize")
    self.assertEqual(r, ['characterize'])

    _, r = self.anagrams2.get_anagrams("characterized")
    self.assertEqual(r, ['characterized'])

    _, r = self.anagrams2.get_anagrams("characterizer")
    self.assertEqual(r, ['characterizer'])

    _, r = self.anagrams2.get_anagrams("characterizers")
    self.assertEqual(r, ['characterizers'])

    _, r = self.anagrams2.get_anagrams("characterizes")
    self.assertEqual(r, ['characterizes'])

    _, r = self.anagrams2.get_anagrams("characterizing")
    self.assertEqual(r, ['characterizing'])

    _, r = self.anagrams2.get_anagrams("characters")
    self.assertEqual(r, ['characters'])

    _, r = self.anagrams2.get_anagrams("charcoal")
    self.assertEqual(r, ['charcoal'])

    _, r = self.anagrams2.get_anagrams("charcoaled")
    self.assertEqual(r, ['charcoaled'])

    _, r = self.anagrams2.get_anagrams("charge")
    self.assertEqual(r, ['charge'])

    _, r = self.anagrams2.get_anagrams("chargeable")
    self.assertEqual(r, ['chargeable'])

    _, r = self.anagrams2.get_anagrams("charged")
    self.assertEqual(r, ['charged'])

    _, r = self.anagrams2.get_anagrams("charger")
    self.assertEqual(r, ['charger'])

    _, r = self.anagrams2.get_anagrams("chargers")
    self.assertEqual(r, ['chargers'])

    _, r = self.anagrams2.get_anagrams("charges")
    self.assertEqual(r, ['charges'])

    _, r = self.anagrams2.get_anagrams("charging")
    self.assertEqual(r, ['charging'])

    _, r = self.anagrams2.get_anagrams("chariot")
    self.assertEqual(r, ['chariot'])

    _, r = self.anagrams2.get_anagrams("chariots")
    self.assertEqual(r, ['chariots'])

    _, r = self.anagrams2.get_anagrams("charisma")
    self.assertEqual(r, ['archaism', 'charisma'])

    _, r = self.anagrams2.get_anagrams("charismatic")
    self.assertEqual(r, ['charismatic'])

    _, r = self.anagrams2.get_anagrams("charitable")
    self.assertEqual(r, ['charitable'])

    _, r = self.anagrams2.get_anagrams("charitableness")
    self.assertEqual(r, ['charitableness'])

    _, r = self.anagrams2.get_anagrams("charities")
    self.assertEqual(r, ['charities'])

    _, r = self.anagrams2.get_anagrams("charity")
    self.assertEqual(r, ['charity'])

    _, r = self.anagrams2.get_anagrams("charlemagne")
    self.assertEqual(r, ['charlemagne'])

    _, r = self.anagrams2.get_anagrams("charlemagnes")
    self.assertEqual(r, ['charlemagnes'])

    _, r = self.anagrams2.get_anagrams("charles")
    self.assertEqual(r, ['charles'])

    _, r = self.anagrams2.get_anagrams("charleston")
    self.assertEqual(r, ['charleston'])

    _, r = self.anagrams2.get_anagrams("charley")
    self.assertEqual(r, ['charley'])

    _, r = self.anagrams2.get_anagrams("charlie")
    self.assertEqual(r, ['charlie'])

    _, r = self.anagrams2.get_anagrams("charlotte")
    self.assertEqual(r, ['charlotte'])

    _, r = self.anagrams2.get_anagrams("charlottesville")
    self.assertEqual(r, ['charlottesville'])

    _, r = self.anagrams2.get_anagrams("charm")
    self.assertEqual(r, ['charm', 'march'])

    _, r = self.anagrams2.get_anagrams("charmed")
    self.assertEqual(r, ['charmed', 'marched'])

    _, r = self.anagrams2.get_anagrams("charmer")
    self.assertEqual(r, ['charmer', 'marcher'])

    _, r = self.anagrams2.get_anagrams("charmers")
    self.assertEqual(r, ['charmers'])

    _, r = self.anagrams2.get_anagrams("charming")
    self.assertEqual(r, ['charming', 'marching'])

    _, r = self.anagrams2.get_anagrams("charmingly")
    self.assertEqual(r, ['charmingly'])

    _, r = self.anagrams2.get_anagrams("charms")
    self.assertEqual(r, ['charms'])

    _, r = self.anagrams2.get_anagrams("charon")
    self.assertEqual(r, ['anchor', 'charon'])

    _, r = self.anagrams2.get_anagrams("chars")
    self.assertEqual(r, ['chars', 'crash'])

    _, r = self.anagrams2.get_anagrams("chart")
    self.assertEqual(r, ['chart'])

    _, r = self.anagrams2.get_anagrams("charta")
    self.assertEqual(r, ['charta'])

    _, r = self.anagrams2.get_anagrams("chartable")
    self.assertEqual(r, ['chartable'])

    _, r = self.anagrams2.get_anagrams("charted")
    self.assertEqual(r, ['charted'])

    _, r = self.anagrams2.get_anagrams("charter")
    self.assertEqual(r, ['charter'])

    _, r = self.anagrams2.get_anagrams("chartered")
    self.assertEqual(r, ['chartered'])

    _, r = self.anagrams2.get_anagrams("chartering")
    self.assertEqual(r, ['chartering'])

    _, r = self.anagrams2.get_anagrams("charters")
    self.assertEqual(r, ['charters', 'chartres'])

    _, r = self.anagrams2.get_anagrams("charting")
    self.assertEqual(r, ['charting'])

    _, r = self.anagrams2.get_anagrams("chartings")
    self.assertEqual(r, ['chartings'])

    _, r = self.anagrams2.get_anagrams("chartres")
    self.assertEqual(r, ['charters', 'chartres'])

    _, r = self.anagrams2.get_anagrams("chartreuse")
    self.assertEqual(r, ['chartreuse'])

    _, r = self.anagrams2.get_anagrams("charts")
    self.assertEqual(r, ['charts', 'starch'])

    _, r = self.anagrams2.get_anagrams("charybdis")
    self.assertEqual(r, ['charybdis'])

    _, r = self.anagrams2.get_anagrams("chase")
    self.assertEqual(r, ['aches', 'chase'])

    _, r = self.anagrams2.get_anagrams("chased")
    self.assertEqual(r, ['cashed', 'chased'])

    _, r = self.anagrams2.get_anagrams("chaser")
    self.assertEqual(r, ['arches', 'casher', 'chaser', 'search'])

    _, r = self.anagrams2.get_anagrams("chasers")
    self.assertEqual(r, ['cashers', 'chasers', 'crashes'])

    _, r = self.anagrams2.get_anagrams("chases")
    self.assertEqual(r, ['cashes', 'chases'])

    _, r = self.anagrams2.get_anagrams("chasing")
    self.assertEqual(r, ['cashing', 'chasing'])

    _, r = self.anagrams2.get_anagrams("chasm")
    self.assertEqual(r, ['chasm'])

    _, r = self.anagrams2.get_anagrams("chasms")
    self.assertEqual(r, ['chasms'])

    _, r = self.anagrams2.get_anagrams("chassis")
    self.assertEqual(r, ['chassis'])

    _, r = self.anagrams2.get_anagrams("chaste")
    self.assertEqual(r, ['chaste', 'cheats'])

    _, r = self.anagrams2.get_anagrams("chastely")
    self.assertEqual(r, ['chastely'])

    _, r = self.anagrams2.get_anagrams("chasteness")
    self.assertEqual(r, ['chasteness'])

    _, r = self.anagrams2.get_anagrams("chastise")
    self.assertEqual(r, ['chastise'])

    _, r = self.anagrams2.get_anagrams("chastised")
    self.assertEqual(r, ['chastised'])

    _, r = self.anagrams2.get_anagrams("chastiser")
    self.assertEqual(r, ['chastiser'])

    _, r = self.anagrams2.get_anagrams("chastisers")
    self.assertEqual(r, ['chastisers'])

    _, r = self.anagrams2.get_anagrams("chastises")
    self.assertEqual(r, ['chastises'])

    _, r = self.anagrams2.get_anagrams("chastising")
    self.assertEqual(r, ['chastising'])

    _, r = self.anagrams2.get_anagrams("chastity")
    self.assertEqual(r, ['chastity'])

    _, r = self.anagrams2.get_anagrams("chat")
    self.assertEqual(r, ['chat'])

    _, r = self.anagrams2.get_anagrams("chateau")
    self.assertEqual(r, ['chateau'])

    _, r = self.anagrams2.get_anagrams("chateaus")
    self.assertEqual(r, ['chateaus'])

    _, r = self.anagrams2.get_anagrams("chatham")
    self.assertEqual(r, ['chatham'])

    _, r = self.anagrams2.get_anagrams("chattahoochee")
    self.assertEqual(r, ['chattahoochee'])

    _, r = self.anagrams2.get_anagrams("chattanooga")
    self.assertEqual(r, ['chattanooga'])

    _, r = self.anagrams2.get_anagrams("chattel")
    self.assertEqual(r, ['chattel'])

    _, r = self.anagrams2.get_anagrams("chatter")
    self.assertEqual(r, ['chatter'])

    _, r = self.anagrams2.get_anagrams("chattered")
    self.assertEqual(r, ['chattered'])

    _, r = self.anagrams2.get_anagrams("chatterer")
    self.assertEqual(r, ['chatterer'])

    _, r = self.anagrams2.get_anagrams("chattering")
    self.assertEqual(r, ['chattering'])

    _, r = self.anagrams2.get_anagrams("chatters")
    self.assertEqual(r, ['chatters'])

    _, r = self.anagrams2.get_anagrams("chatting")
    self.assertEqual(r, ['chatting'])

    _, r = self.anagrams2.get_anagrams("chatty")
    self.assertEqual(r, ['chatty'])

    _, r = self.anagrams2.get_anagrams("chaucer")
    self.assertEqual(r, ['chaucer'])

    _, r = self.anagrams2.get_anagrams("chauffeur")
    self.assertEqual(r, ['chauffeur'])

    _, r = self.anagrams2.get_anagrams("chauffeured")
    self.assertEqual(r, ['chauffeured'])

    _, r = self.anagrams2.get_anagrams("chauncey")
    self.assertEqual(r, ['chauncey'])

    _, r = self.anagrams2.get_anagrams("chautauqua")
    self.assertEqual(r, ['chautauqua'])

    _, r = self.anagrams2.get_anagrams("cheap")
    self.assertEqual(r, ['cheap', 'peach'])

    _, r = self.anagrams2.get_anagrams("cheapen")
    self.assertEqual(r, ['cheapen'])

    _, r = self.anagrams2.get_anagrams("cheapened")
    self.assertEqual(r, ['cheapened'])

    _, r = self.anagrams2.get_anagrams("cheapening")
    self.assertEqual(r, ['cheapening'])

    _, r = self.anagrams2.get_anagrams("cheapens")
    self.assertEqual(r, ['cheapens'])

    _, r = self.anagrams2.get_anagrams("cheaper")
    self.assertEqual(r, ['cheaper'])

    _, r = self.anagrams2.get_anagrams("cheapest")
    self.assertEqual(r, ['cheapest'])

    _, r = self.anagrams2.get_anagrams("cheaply")
    self.assertEqual(r, ['cheaply'])

    _, r = self.anagrams2.get_anagrams("cheapness")
    self.assertEqual(r, ['cheapness'])

    _, r = self.anagrams2.get_anagrams("cheat")
    self.assertEqual(r, ['cheat', 'teach'])

    _, r = self.anagrams2.get_anagrams("cheated")
    self.assertEqual(r, ['cheated'])

    _, r = self.anagrams2.get_anagrams("cheater")
    self.assertEqual(r, ['cheater', 'teacher'])

    _, r = self.anagrams2.get_anagrams("cheaters")
    self.assertEqual(r, ['cheaters', 'teachers'])

    _, r = self.anagrams2.get_anagrams("cheating")
    self.assertEqual(r, ['cheating', 'teaching'])

    _, r = self.anagrams2.get_anagrams("cheats")
    self.assertEqual(r, ['chaste', 'cheats'])

    _, r = self.anagrams2.get_anagrams("check")
    self.assertEqual(r, ['check'])

    _, r = self.anagrams2.get_anagrams("checkable")
    self.assertEqual(r, ['checkable'])

    _, r = self.anagrams2.get_anagrams("checkbook")
    self.assertEqual(r, ['checkbook'])

    _, r = self.anagrams2.get_anagrams("checkbooks")
    self.assertEqual(r, ['checkbooks'])

    _, r = self.anagrams2.get_anagrams("checked")
    self.assertEqual(r, ['checked'])

    _, r = self.anagrams2.get_anagrams("checker")
    self.assertEqual(r, ['checker'])

    _, r = self.anagrams2.get_anagrams("checkerboard")
    self.assertEqual(r, ['checkerboard'])

    _, r = self.anagrams2.get_anagrams("checkerboarded")
    self.assertEqual(r, ['checkerboarded'])

    _, r = self.anagrams2.get_anagrams("checkerboarding")
    self.assertEqual(r, ['checkerboarding'])

    _, r = self.anagrams2.get_anagrams("checkers")
    self.assertEqual(r, ['checkers'])

    _, r = self.anagrams2.get_anagrams("checking")
    self.assertEqual(r, ['checking'])

    _, r = self.anagrams2.get_anagrams("checklist")
    self.assertEqual(r, ['checklist'])

    _, r = self.anagrams2.get_anagrams("checkout")
    self.assertEqual(r, ['checkout'])

    _, r = self.anagrams2.get_anagrams("checkpoint")
    self.assertEqual(r, ['checkpoint'])

    _, r = self.anagrams2.get_anagrams("checkpoints")
    self.assertEqual(r, ['checkpoints'])

    _, r = self.anagrams2.get_anagrams("checks")
    self.assertEqual(r, ['checks'])

    _, r = self.anagrams2.get_anagrams("checksum")
    self.assertEqual(r, ['checksum'])

    _, r = self.anagrams2.get_anagrams("checksummed")
    self.assertEqual(r, ['checksummed'])

    _, r = self.anagrams2.get_anagrams("checksumming")
    self.assertEqual(r, ['checksumming'])

    _, r = self.anagrams2.get_anagrams("checksums")
    self.assertEqual(r, ['checksums'])

    _, r = self.anagrams2.get_anagrams("checkup")
    self.assertEqual(r, ['checkup'])

    _, r = self.anagrams2.get_anagrams("cheek")
    self.assertEqual(r, ['cheek'])

    _, r = self.anagrams2.get_anagrams("cheekbone")
    self.assertEqual(r, ['cheekbone'])

    _, r = self.anagrams2.get_anagrams("cheeks")
    self.assertEqual(r, ['cheeks'])

    _, r = self.anagrams2.get_anagrams("cheeky")
    self.assertEqual(r, ['cheeky'])

    _, r = self.anagrams2.get_anagrams("cheer")
    self.assertEqual(r, ['cheer'])

    _, r = self.anagrams2.get_anagrams("cheered")
    self.assertEqual(r, ['cheered'])

    _, r = self.anagrams2.get_anagrams("cheerer")
    self.assertEqual(r, ['cheerer'])

    _, r = self.anagrams2.get_anagrams("cheerful")
    self.assertEqual(r, ['cheerful'])

    _, r = self.anagrams2.get_anagrams("cheerfully")
    self.assertEqual(r, ['cheerfully'])

    _, r = self.anagrams2.get_anagrams("cheerfulness")
    self.assertEqual(r, ['cheerfulness'])

    _, r = self.anagrams2.get_anagrams("cheerily")
    self.assertEqual(r, ['cheerily'])

    _, r = self.anagrams2.get_anagrams("cheeriness")
    self.assertEqual(r, ['cheeriness'])

    _, r = self.anagrams2.get_anagrams("cheering")
    self.assertEqual(r, ['cheering'])

    _, r = self.anagrams2.get_anagrams("cheerleader")
    self.assertEqual(r, ['cheerleader'])

    _, r = self.anagrams2.get_anagrams("cheerless")
    self.assertEqual(r, ['cheerless'])

    _, r = self.anagrams2.get_anagrams("cheerlessly")
    self.assertEqual(r, ['cheerlessly'])

    _, r = self.anagrams2.get_anagrams("cheerlessness")
    self.assertEqual(r, ['cheerlessness'])

    _, r = self.anagrams2.get_anagrams("cheers")
    self.assertEqual(r, ['cheers'])

    _, r = self.anagrams2.get_anagrams("cheery")
    self.assertEqual(r, ['cheery'])

    _, r = self.anagrams2.get_anagrams("cheese")
    self.assertEqual(r, ['cheese'])

    _, r = self.anagrams2.get_anagrams("cheesecloth")
    self.assertEqual(r, ['cheesecloth'])

    _, r = self.anagrams2.get_anagrams("cheeses")
    self.assertEqual(r, ['cheeses'])

    _, r = self.anagrams2.get_anagrams("cheesy")
    self.assertEqual(r, ['cheesy'])

    _, r = self.anagrams2.get_anagrams("cheetah")
    self.assertEqual(r, ['cheetah'])

    _, r = self.anagrams2.get_anagrams("chef")
    self.assertEqual(r, ['chef'])

    _, r = self.anagrams2.get_anagrams("chefs")
    self.assertEqual(r, ['chefs'])

    _, r = self.anagrams2.get_anagrams("chekhov")
    self.assertEqual(r, ['chekhov'])

    _, r = self.anagrams2.get_anagrams("chelsea")
    self.assertEqual(r, ['chelsea'])

    _, r = self.anagrams2.get_anagrams("chemical")
    self.assertEqual(r, ['chemical'])

    _, r = self.anagrams2.get_anagrams("chemically")
    self.assertEqual(r, ['chemically'])

    _, r = self.anagrams2.get_anagrams("chemicals")
    self.assertEqual(r, ['chemicals'])

    _, r = self.anagrams2.get_anagrams("chemise")
    self.assertEqual(r, ['chemise'])

    _, r = self.anagrams2.get_anagrams("chemist")
    self.assertEqual(r, ['chemist'])

    _, r = self.anagrams2.get_anagrams("chemistries")
    self.assertEqual(r, ['chemistries'])

    _, r = self.anagrams2.get_anagrams("chemistry")
    self.assertEqual(r, ['chemistry'])

    _, r = self.anagrams2.get_anagrams("chemists")
    self.assertEqual(r, ['chemists'])

    _, r = self.anagrams2.get_anagrams("chen")
    self.assertEqual(r, ['chen'])

    _, r = self.anagrams2.get_anagrams("cheney")
    self.assertEqual(r, ['cheney'])

    _, r = self.anagrams2.get_anagrams("cheng")
    self.assertEqual(r, ['cheng'])

    _, r = self.anagrams2.get_anagrams("cherish")
    self.assertEqual(r, ['cherish'])

    _, r = self.anagrams2.get_anagrams("cherished")
    self.assertEqual(r, ['cherished'])

    _, r = self.anagrams2.get_anagrams("cherishes")
    self.assertEqual(r, ['cherishes'])

    _, r = self.anagrams2.get_anagrams("cherishing")
    self.assertEqual(r, ['cherishing'])

    _, r = self.anagrams2.get_anagrams("cheriton")
    self.assertEqual(r, ['cheriton'])

    _, r = self.anagrams2.get_anagrams("cherokee")
    self.assertEqual(r, ['cherokee'])

    _, r = self.anagrams2.get_anagrams("cherokees")
    self.assertEqual(r, ['cherokees'])

    _, r = self.anagrams2.get_anagrams("cherries")
    self.assertEqual(r, ['cherries'])

    _, r = self.anagrams2.get_anagrams("cherry")
    self.assertEqual(r, ['cherry'])

    _, r = self.anagrams2.get_anagrams("cherub")
    self.assertEqual(r, ['cherub'])

    _, r = self.anagrams2.get_anagrams("cherubim")
    self.assertEqual(r, ['cherubim'])

    _, r = self.anagrams2.get_anagrams("cherubs")
    self.assertEqual(r, ['cherubs'])

    _, r = self.anagrams2.get_anagrams("cheryl")
    self.assertEqual(r, ['cheryl'])

    _, r = self.anagrams2.get_anagrams("chesapeake")
    self.assertEqual(r, ['chesapeake'])

    _, r = self.anagrams2.get_anagrams("cheshire")
    self.assertEqual(r, ['cheshire'])

    _, r = self.anagrams2.get_anagrams("chess")
    self.assertEqual(r, ['chess'])

    _, r = self.anagrams2.get_anagrams("chest")
    self.assertEqual(r, ['chest'])

    _, r = self.anagrams2.get_anagrams("chester")
    self.assertEqual(r, ['chester'])

    _, r = self.anagrams2.get_anagrams("chesterfield")
    self.assertEqual(r, ['chesterfield'])

    _, r = self.anagrams2.get_anagrams("chesterton")
    self.assertEqual(r, ['chesterton'])

    _, r = self.anagrams2.get_anagrams("chestnut")
    self.assertEqual(r, ['chestnut'])

    _, r = self.anagrams2.get_anagrams("chestnuts")
    self.assertEqual(r, ['chestnuts'])

    _, r = self.anagrams2.get_anagrams("chests")
    self.assertEqual(r, ['chests'])

    _, r = self.anagrams2.get_anagrams("chevrolet")
    self.assertEqual(r, ['chevrolet'])

    _, r = self.anagrams2.get_anagrams("chevy")
    self.assertEqual(r, ['chevy'])

    _, r = self.anagrams2.get_anagrams("chew")
    self.assertEqual(r, ['chew'])

    _, r = self.anagrams2.get_anagrams("chewed")
    self.assertEqual(r, ['chewed'])

    _, r = self.anagrams2.get_anagrams("chewer")
    self.assertEqual(r, ['chewer'])

    _, r = self.anagrams2.get_anagrams("chewers")
    self.assertEqual(r, ['chewers'])

    _, r = self.anagrams2.get_anagrams("chewing")
    self.assertEqual(r, ['chewing'])

    _, r = self.anagrams2.get_anagrams("chews")
    self.assertEqual(r, ['chews'])

    _, r = self.anagrams2.get_anagrams("cheyenne")
    self.assertEqual(r, ['cheyenne'])

    _, r = self.anagrams2.get_anagrams("cheyennes")
    self.assertEqual(r, ['cheyennes'])

    _, r = self.anagrams2.get_anagrams("chiang")
    self.assertEqual(r, ['aching', 'chiang'])

    _, r = self.anagrams2.get_anagrams("chic")
    self.assertEqual(r, ['chic'])

    _, r = self.anagrams2.get_anagrams("chicago")
    self.assertEqual(r, ['chicago'])

    _, r = self.anagrams2.get_anagrams("chicagoan")
    self.assertEqual(r, ['chicagoan'])

    _, r = self.anagrams2.get_anagrams("chicagoans")
    self.assertEqual(r, ['chicagoans'])

    _, r = self.anagrams2.get_anagrams("chicana")
    self.assertEqual(r, ['chicana'])

    _, r = self.anagrams2.get_anagrams("chicanas")
    self.assertEqual(r, ['chicanas'])

    _, r = self.anagrams2.get_anagrams("chicanery")
    self.assertEqual(r, ['chicanery'])

    _, r = self.anagrams2.get_anagrams("chicano")
    self.assertEqual(r, ['chicano'])

    _, r = self.anagrams2.get_anagrams("chicanos")
    self.assertEqual(r, ['chicanos'])

    _, r = self.anagrams2.get_anagrams("chick")
    self.assertEqual(r, ['chick'])

    _, r = self.anagrams2.get_anagrams("chickadee")
    self.assertEqual(r, ['chickadee'])

    _, r = self.anagrams2.get_anagrams("chickadees")
    self.assertEqual(r, ['chickadees'])

    _, r = self.anagrams2.get_anagrams("chickasaws")
    self.assertEqual(r, ['chickasaws'])

    _, r = self.anagrams2.get_anagrams("chicken")
    self.assertEqual(r, ['chicken'])

    _, r = self.anagrams2.get_anagrams("chickens")
    self.assertEqual(r, ['chickens'])

    _, r = self.anagrams2.get_anagrams("chicks")
    self.assertEqual(r, ['chicks'])

    _, r = self.anagrams2.get_anagrams("chide")
    self.assertEqual(r, ['chide'])

    _, r = self.anagrams2.get_anagrams("chided")
    self.assertEqual(r, ['chided'])

    _, r = self.anagrams2.get_anagrams("chides")
    self.assertEqual(r, ['chides'])

    _, r = self.anagrams2.get_anagrams("chiding")
    self.assertEqual(r, ['chiding'])

    _, r = self.anagrams2.get_anagrams("chief")
    self.assertEqual(r, ['chief'])

    _, r = self.anagrams2.get_anagrams("chiefly")
    self.assertEqual(r, ['chiefly'])

    _, r = self.anagrams2.get_anagrams("chiefs")
    self.assertEqual(r, ['chiefs'])

    _, r = self.anagrams2.get_anagrams("chieftain")
    self.assertEqual(r, ['chieftain'])

    _, r = self.anagrams2.get_anagrams("chieftains")
    self.assertEqual(r, ['chieftains'])

    _, r = self.anagrams2.get_anagrams("chiffon")
    self.assertEqual(r, ['chiffon'])

    _, r = self.anagrams2.get_anagrams("child")
    self.assertEqual(r, ['child'])

    _, r = self.anagrams2.get_anagrams("childbirth")
    self.assertEqual(r, ['childbirth'])

    _, r = self.anagrams2.get_anagrams("childhood")
    self.assertEqual(r, ['childhood'])

    _, r = self.anagrams2.get_anagrams("childish")
    self.assertEqual(r, ['childish'])

    _, r = self.anagrams2.get_anagrams("childishly")
    self.assertEqual(r, ['childishly'])

    _, r = self.anagrams2.get_anagrams("childishness")
    self.assertEqual(r, ['childishness'])

    _, r = self.anagrams2.get_anagrams("childlike")
    self.assertEqual(r, ['childlike'])

    _, r = self.anagrams2.get_anagrams("children")
    self.assertEqual(r, ['children'])

    _, r = self.anagrams2.get_anagrams("chile")
    self.assertEqual(r, ['chile'])

    _, r = self.anagrams2.get_anagrams("chilean")
    self.assertEqual(r, ['chilean'])

    _, r = self.anagrams2.get_anagrams("chiles")
    self.assertEqual(r, ['chiles', 'chisel'])

    _, r = self.anagrams2.get_anagrams("chili")
    self.assertEqual(r, ['chili'])

    _, r = self.anagrams2.get_anagrams("chill")
    self.assertEqual(r, ['chill'])

    _, r = self.anagrams2.get_anagrams("chilled")
    self.assertEqual(r, ['chilled'])

    _, r = self.anagrams2.get_anagrams("chiller")
    self.assertEqual(r, ['chiller'])

    _, r = self.anagrams2.get_anagrams("chillers")
    self.assertEqual(r, ['chillers', 'schiller'])

    _, r = self.anagrams2.get_anagrams("chillier")
    self.assertEqual(r, ['chillier'])

    _, r = self.anagrams2.get_anagrams("chilliness")
    self.assertEqual(r, ['chilliness'])

    _, r = self.anagrams2.get_anagrams("chilling")
    self.assertEqual(r, ['chilling'])

    _, r = self.anagrams2.get_anagrams("chillingly")
    self.assertEqual(r, ['chillingly'])

    _, r = self.anagrams2.get_anagrams("chills")
    self.assertEqual(r, ['chills'])

    _, r = self.anagrams2.get_anagrams("chilly")
    self.assertEqual(r, ['chilly'])

    _, r = self.anagrams2.get_anagrams("chime")
    self.assertEqual(r, ['chime'])

    _, r = self.anagrams2.get_anagrams("chimera")
    self.assertEqual(r, ['chimera'])

    _, r = self.anagrams2.get_anagrams("chimes")
    self.assertEqual(r, ['chimes'])

    _, r = self.anagrams2.get_anagrams("chimney")
    self.assertEqual(r, ['chimney'])

    _, r = self.anagrams2.get_anagrams("chimneys")
    self.assertEqual(r, ['chimneys'])

    _, r = self.anagrams2.get_anagrams("chimpanzee")
    self.assertEqual(r, ['chimpanzee'])

    _, r = self.anagrams2.get_anagrams("chin")
    self.assertEqual(r, ['chin', 'inch'])

    _, r = self.anagrams2.get_anagrams("china")
    self.assertEqual(r, ['chain', 'china'])

    _, r = self.anagrams2.get_anagrams("chinaman")
    self.assertEqual(r, ['chinaman'])

    _, r = self.anagrams2.get_anagrams("chinamen")
    self.assertEqual(r, ['chinamen', 'eichmann'])

    _, r = self.anagrams2.get_anagrams("chinas")
    self.assertEqual(r, ['chains', 'chinas'])

    _, r = self.anagrams2.get_anagrams("chinatown")
    self.assertEqual(r, ['chinatown'])

    _, r = self.anagrams2.get_anagrams("chinese")
    self.assertEqual(r, ['chinese'])

    _, r = self.anagrams2.get_anagrams("ching")
    self.assertEqual(r, ['ching'])

    _, r = self.anagrams2.get_anagrams("chink")
    self.assertEqual(r, ['chink'])

    _, r = self.anagrams2.get_anagrams("chinked")
    self.assertEqual(r, ['chinked'])

    _, r = self.anagrams2.get_anagrams("chinks")
    self.assertEqual(r, ['chinks'])

    _, r = self.anagrams2.get_anagrams("chinned")
    self.assertEqual(r, ['chinned'])

    _, r = self.anagrams2.get_anagrams("chinner")
    self.assertEqual(r, ['chinner'])

    _, r = self.anagrams2.get_anagrams("chinners")
    self.assertEqual(r, ['chinners'])

    _, r = self.anagrams2.get_anagrams("chinning")
    self.assertEqual(r, ['chinning'])

    _, r = self.anagrams2.get_anagrams("chinook")
    self.assertEqual(r, ['chinook'])

    _, r = self.anagrams2.get_anagrams("chins")
    self.assertEqual(r, ['chins'])

    _, r = self.anagrams2.get_anagrams("chintz")
    self.assertEqual(r, ['chintz'])

    _, r = self.anagrams2.get_anagrams("chip")
    self.assertEqual(r, ['chip'])

    _, r = self.anagrams2.get_anagrams("chipmunk")
    self.assertEqual(r, ['chipmunk'])

    _, r = self.anagrams2.get_anagrams("chipmunks")
    self.assertEqual(r, ['chipmunks'])

    _, r = self.anagrams2.get_anagrams("chippendale")
    self.assertEqual(r, ['chippendale'])

    _, r = self.anagrams2.get_anagrams("chippewa")
    self.assertEqual(r, ['chippewa'])

    _, r = self.anagrams2.get_anagrams("chips")
    self.assertEqual(r, ['chips'])

    _, r = self.anagrams2.get_anagrams("chiropractor")
    self.assertEqual(r, ['chiropractor'])

    _, r = self.anagrams2.get_anagrams("chirp")
    self.assertEqual(r, ['chirp'])

    _, r = self.anagrams2.get_anagrams("chirped")
    self.assertEqual(r, ['chirped'])

    _, r = self.anagrams2.get_anagrams("chirping")
    self.assertEqual(r, ['chirping'])

    _, r = self.anagrams2.get_anagrams("chirps")
    self.assertEqual(r, ['chirps'])

    _, r = self.anagrams2.get_anagrams("chisel")
    self.assertEqual(r, ['chiles', 'chisel'])

    _, r = self.anagrams2.get_anagrams("chiseled")
    self.assertEqual(r, ['chiseled'])

    _, r = self.anagrams2.get_anagrams("chiseler")
    self.assertEqual(r, ['chiseler'])

    _, r = self.anagrams2.get_anagrams("chisels")
    self.assertEqual(r, ['chisels'])

    _, r = self.anagrams2.get_anagrams("chisholm")
    self.assertEqual(r, ['chisholm'])

    _, r = self.anagrams2.get_anagrams("chit")
    self.assertEqual(r, ['chit', 'itch'])

    _, r = self.anagrams2.get_anagrams("chivalrous")
    self.assertEqual(r, ['chivalrous'])

    _, r = self.anagrams2.get_anagrams("chivalrously")
    self.assertEqual(r, ['chivalrously'])

    _, r = self.anagrams2.get_anagrams("chivalrousness")
    self.assertEqual(r, ['chivalrousness'])

    _, r = self.anagrams2.get_anagrams("chivalry")
    self.assertEqual(r, ['chivalry'])

    _, r = self.anagrams2.get_anagrams("chloe")
    self.assertEqual(r, ['chloe'])

    _, r = self.anagrams2.get_anagrams("chlorine")
    self.assertEqual(r, ['chlorine'])

    _, r = self.anagrams2.get_anagrams("chloroform")
    self.assertEqual(r, ['chloroform'])

    _, r = self.anagrams2.get_anagrams("chlorophyll")
    self.assertEqual(r, ['chlorophyll'])

    _, r = self.anagrams2.get_anagrams("chloroplast")
    self.assertEqual(r, ['chloroplast'])

    _, r = self.anagrams2.get_anagrams("chloroplasts")
    self.assertEqual(r, ['chloroplasts'])

    _, r = self.anagrams2.get_anagrams("chock")
    self.assertEqual(r, ['chock'])

    _, r = self.anagrams2.get_anagrams("chocks")
    self.assertEqual(r, ['chocks'])

    _, r = self.anagrams2.get_anagrams("chocolate")
    self.assertEqual(r, ['chocolate'])

    _, r = self.anagrams2.get_anagrams("chocolates")
    self.assertEqual(r, ['chocolates'])

    _, r = self.anagrams2.get_anagrams("choctaw")
    self.assertEqual(r, ['choctaw'])

    _, r = self.anagrams2.get_anagrams("choctaws")
    self.assertEqual(r, ['choctaws'])

    _, r = self.anagrams2.get_anagrams("choice")
    self.assertEqual(r, ['choice'])

    _, r = self.anagrams2.get_anagrams("choices")
    self.assertEqual(r, ['choices', 'cochise'])

    _, r = self.anagrams2.get_anagrams("choicest")
    self.assertEqual(r, ['choicest'])

    _, r = self.anagrams2.get_anagrams("choir")
    self.assertEqual(r, ['choir'])

    _, r = self.anagrams2.get_anagrams("choirs")
    self.assertEqual(r, ['choirs'])

    _, r = self.anagrams2.get_anagrams("choke")
    self.assertEqual(r, ['choke'])

    _, r = self.anagrams2.get_anagrams("choked")
    self.assertEqual(r, ['choked'])

    _, r = self.anagrams2.get_anagrams("choker")
    self.assertEqual(r, ['choker'])

    _, r = self.anagrams2.get_anagrams("chokers")
    self.assertEqual(r, ['chokers', 'shocker'])

    _, r = self.anagrams2.get_anagrams("chokes")
    self.assertEqual(r, ['chokes'])

    _, r = self.anagrams2.get_anagrams("choking")
    self.assertEqual(r, ['choking'])

    _, r = self.anagrams2.get_anagrams("cholera")
    self.assertEqual(r, ['cholera'])

    _, r = self.anagrams2.get_anagrams("chomsky")
    self.assertEqual(r, ['chomsky'])

    _, r = self.anagrams2.get_anagrams("choose")
    self.assertEqual(r, ['choose'])

    _, r = self.anagrams2.get_anagrams("chooser")
    self.assertEqual(r, ['chooser'])

    _, r = self.anagrams2.get_anagrams("choosers")
    self.assertEqual(r, ['choosers'])

    _, r = self.anagrams2.get_anagrams("chooses")
    self.assertEqual(r, ['chooses'])

    _, r = self.anagrams2.get_anagrams("choosing")
    self.assertEqual(r, ['choosing'])

    _, r = self.anagrams2.get_anagrams("chop")
    self.assertEqual(r, ['chop'])

    _, r = self.anagrams2.get_anagrams("chopin")
    self.assertEqual(r, ['chopin'])

    _, r = self.anagrams2.get_anagrams("chopped")
    self.assertEqual(r, ['chopped'])

    _, r = self.anagrams2.get_anagrams("chopper")
    self.assertEqual(r, ['chopper'])

    _, r = self.anagrams2.get_anagrams("choppers")
    self.assertEqual(r, ['choppers'])

    _, r = self.anagrams2.get_anagrams("chopping")
    self.assertEqual(r, ['chopping'])

    _, r = self.anagrams2.get_anagrams("choppy")
    self.assertEqual(r, ['choppy'])

    _, r = self.anagrams2.get_anagrams("chops")
    self.assertEqual(r, ['chops'])

    _, r = self.anagrams2.get_anagrams("choral")
    self.assertEqual(r, ['choral'])

    _, r = self.anagrams2.get_anagrams("chord")
    self.assertEqual(r, ['chord'])

    _, r = self.anagrams2.get_anagrams("chordate")
    self.assertEqual(r, ['chordate'])

    _, r = self.anagrams2.get_anagrams("chorded")
    self.assertEqual(r, ['chorded'])

    _, r = self.anagrams2.get_anagrams("chording")
    self.assertEqual(r, ['chording'])

    _, r = self.anagrams2.get_anagrams("chords")
    self.assertEqual(r, ['chords'])

    _, r = self.anagrams2.get_anagrams("chore")
    self.assertEqual(r, ['chore'])

    _, r = self.anagrams2.get_anagrams("choreograph")
    self.assertEqual(r, ['choreograph'])

    _, r = self.anagrams2.get_anagrams("choreography")
    self.assertEqual(r, ['choreography'])

    _, r = self.anagrams2.get_anagrams("chores")
    self.assertEqual(r, ['chores'])

    _, r = self.anagrams2.get_anagrams("choring")
    self.assertEqual(r, ['choring'])

    _, r = self.anagrams2.get_anagrams("chortle")
    self.assertEqual(r, ['chortle'])

    _, r = self.anagrams2.get_anagrams("chorus")
    self.assertEqual(r, ['chorus'])

    _, r = self.anagrams2.get_anagrams("chorused")
    self.assertEqual(r, ['chorused'])

    _, r = self.anagrams2.get_anagrams("choruses")
    self.assertEqual(r, ['choruses'])

    _, r = self.anagrams2.get_anagrams("chose")
    self.assertEqual(r, ['chose'])

    _, r = self.anagrams2.get_anagrams("chosen")
    self.assertEqual(r, ['chosen'])

    _, r = self.anagrams2.get_anagrams("chou")
    self.assertEqual(r, ['chou', 'ouch'])

    _, r = self.anagrams2.get_anagrams("chowder")
    self.assertEqual(r, ['chowder', 'cowherd'])

    _, r = self.anagrams2.get_anagrams("chris")
    self.assertEqual(r, ['chris'])

    _, r = self.anagrams2.get_anagrams("christ")
    self.assertEqual(r, ['christ'])

    _, r = self.anagrams2.get_anagrams("christen")
    self.assertEqual(r, ['christen'])

    _, r = self.anagrams2.get_anagrams("christendom")
    self.assertEqual(r, ['christendom'])

    _, r = self.anagrams2.get_anagrams("christened")
    self.assertEqual(r, ['christened'])

    _, r = self.anagrams2.get_anagrams("christening")
    self.assertEqual(r, ['christening'])

    _, r = self.anagrams2.get_anagrams("christens")
    self.assertEqual(r, ['christens'])

    _, r = self.anagrams2.get_anagrams("christensen")
    self.assertEqual(r, ['christensen'])

    _, r = self.anagrams2.get_anagrams("christenson")
    self.assertEqual(r, ['christenson'])

    _, r = self.anagrams2.get_anagrams("christian")
    self.assertEqual(r, ['christian', 'christina'])

    _, r = self.anagrams2.get_anagrams("christiana")
    self.assertEqual(r, ['christiana'])

    _, r = self.anagrams2.get_anagrams("christianity")
    self.assertEqual(r, ['christianity'])

    _, r = self.anagrams2.get_anagrams("christianization")
    self.assertEqual(r, ['christianization'])

    _, r = self.anagrams2.get_anagrams("christianizations")
    self.assertEqual(r, ['christianizations'])

    _, r = self.anagrams2.get_anagrams("christianize")
    self.assertEqual(r, ['christianize'])

    _, r = self.anagrams2.get_anagrams("christianizer")
    self.assertEqual(r, ['christianizer'])

    _, r = self.anagrams2.get_anagrams("christianizers")
    self.assertEqual(r, ['christianizers'])

    _, r = self.anagrams2.get_anagrams("christianizes")
    self.assertEqual(r, ['christianizes'])

    _, r = self.anagrams2.get_anagrams("christianizing")
    self.assertEqual(r, ['christianizing'])

    _, r = self.anagrams2.get_anagrams("christians")
    self.assertEqual(r, ['christians'])

    _, r = self.anagrams2.get_anagrams("christiansen")
    self.assertEqual(r, ['christiansen'])

    _, r = self.anagrams2.get_anagrams("christianson")
    self.assertEqual(r, ['christianson'])

    _, r = self.anagrams2.get_anagrams("christie")
    self.assertEqual(r, ['christie'])

    _, r = self.anagrams2.get_anagrams("christina")
    self.assertEqual(r, ['christian', 'christina'])

    _, r = self.anagrams2.get_anagrams("christine")
    self.assertEqual(r, ['christine'])

    _, r = self.anagrams2.get_anagrams("christlike")
    self.assertEqual(r, ['christlike'])

    _, r = self.anagrams2.get_anagrams("christmas")
    self.assertEqual(r, ['christmas'])

    _, r = self.anagrams2.get_anagrams("christoffel")
    self.assertEqual(r, ['christoffel'])

    _, r = self.anagrams2.get_anagrams("christoph")
    self.assertEqual(r, ['christoph'])

    _, r = self.anagrams2.get_anagrams("christopher")
    self.assertEqual(r, ['christopher'])

    _, r = self.anagrams2.get_anagrams("christy")
    self.assertEqual(r, ['christy'])

    _, r = self.anagrams2.get_anagrams("chromatogram")
    self.assertEqual(r, ['chromatogram'])

    _, r = self.anagrams2.get_anagrams("chromatograph")
    self.assertEqual(r, ['chromatograph'])

    _, r = self.anagrams2.get_anagrams("chromatography")
    self.assertEqual(r, ['chromatography'])

    _, r = self.anagrams2.get_anagrams("chrome")
    self.assertEqual(r, ['chrome'])

    _, r = self.anagrams2.get_anagrams("chromium")
    self.assertEqual(r, ['chromium'])

    _, r = self.anagrams2.get_anagrams("chromosphere")
    self.assertEqual(r, ['chromosphere'])

    _, r = self.anagrams2.get_anagrams("chronic")
    self.assertEqual(r, ['chronic'])

    _, r = self.anagrams2.get_anagrams("chronicle")
    self.assertEqual(r, ['chronicle'])

    _, r = self.anagrams2.get_anagrams("chronicled")
    self.assertEqual(r, ['chronicled'])

    _, r = self.anagrams2.get_anagrams("chronicler")
    self.assertEqual(r, ['chronicler'])

    _, r = self.anagrams2.get_anagrams("chroniclers")
    self.assertEqual(r, ['chroniclers'])

    _, r = self.anagrams2.get_anagrams("chronicles")
    self.assertEqual(r, ['chronicles'])

    _, r = self.anagrams2.get_anagrams("chronograph")
    self.assertEqual(r, ['chronograph'])

    _, r = self.anagrams2.get_anagrams("chronography")
    self.assertEqual(r, ['chronography'])

    _, r = self.anagrams2.get_anagrams("chronological")
    self.assertEqual(r, ['chronological'])

    _, r = self.anagrams2.get_anagrams("chronologically")
    self.assertEqual(r, ['chronologically'])

    _, r = self.anagrams2.get_anagrams("chronologies")
    self.assertEqual(r, ['chronologies'])

    _, r = self.anagrams2.get_anagrams("chronology")
    self.assertEqual(r, ['chronology'])

    _, r = self.anagrams2.get_anagrams("chrysanthemum")
    self.assertEqual(r, ['chrysanthemum'])

    _, r = self.anagrams2.get_anagrams("chrysler")
    self.assertEqual(r, ['chrysler'])

    _, r = self.anagrams2.get_anagrams("chubbier")
    self.assertEqual(r, ['chubbier'])

    _, r = self.anagrams2.get_anagrams("chubbiest")
    self.assertEqual(r, ['chubbiest'])

    _, r = self.anagrams2.get_anagrams("chubbiness")
    self.assertEqual(r, ['chubbiness'])

    _, r = self.anagrams2.get_anagrams("chubby")
    self.assertEqual(r, ['chubby'])

    _, r = self.anagrams2.get_anagrams("chuck")
    self.assertEqual(r, ['chuck'])

    _, r = self.anagrams2.get_anagrams("chuckle")
    self.assertEqual(r, ['chuckle'])

    _, r = self.anagrams2.get_anagrams("chuckled")
    self.assertEqual(r, ['chuckled'])

    _, r = self.anagrams2.get_anagrams("chuckles")
    self.assertEqual(r, ['chuckles'])

    _, r = self.anagrams2.get_anagrams("chucks")
    self.assertEqual(r, ['chucks'])

    _, r = self.anagrams2.get_anagrams("chum")
    self.assertEqual(r, ['chum', 'much'])

    _, r = self.anagrams2.get_anagrams("chungking")
    self.assertEqual(r, ['chungking'])

    _, r = self.anagrams2.get_anagrams("chunk")
    self.assertEqual(r, ['chunk'])

    _, r = self.anagrams2.get_anagrams("chunks")
    self.assertEqual(r, ['chunks'])

    _, r = self.anagrams2.get_anagrams("chunky")
    self.assertEqual(r, ['chunky'])

    _, r = self.anagrams2.get_anagrams("church")
    self.assertEqual(r, ['church'])

    _, r = self.anagrams2.get_anagrams("churches")
    self.assertEqual(r, ['churches'])

    _, r = self.anagrams2.get_anagrams("churchgoer")
    self.assertEqual(r, ['churchgoer'])

    _, r = self.anagrams2.get_anagrams("churchgoing")
    self.assertEqual(r, ['churchgoing'])

    _, r = self.anagrams2.get_anagrams("churchill")
    self.assertEqual(r, ['churchill'])

    _, r = self.anagrams2.get_anagrams("churchillian")
    self.assertEqual(r, ['churchillian'])

    _, r = self.anagrams2.get_anagrams("churchly")
    self.assertEqual(r, ['churchly'])

    _, r = self.anagrams2.get_anagrams("churchman")
    self.assertEqual(r, ['churchman'])

    _, r = self.anagrams2.get_anagrams("churchmen")
    self.assertEqual(r, ['churchmen'])

    _, r = self.anagrams2.get_anagrams("churchwoman")
    self.assertEqual(r, ['churchwoman'])

    _, r = self.anagrams2.get_anagrams("churchwomen")
    self.assertEqual(r, ['churchwomen'])

    _, r = self.anagrams2.get_anagrams("churchyard")
    self.assertEqual(r, ['churchyard'])

    _, r = self.anagrams2.get_anagrams("churchyards")
    self.assertEqual(r, ['churchyards'])

    _, r = self.anagrams2.get_anagrams("churn")
    self.assertEqual(r, ['churn'])

    _, r = self.anagrams2.get_anagrams("churned")
    self.assertEqual(r, ['churned'])

    _, r = self.anagrams2.get_anagrams("churning")
    self.assertEqual(r, ['churning'])

    _, r = self.anagrams2.get_anagrams("churns")
    self.assertEqual(r, ['churns'])

    _, r = self.anagrams2.get_anagrams("chute")
    self.assertEqual(r, ['chute'])

    _, r = self.anagrams2.get_anagrams("chutes")
    self.assertEqual(r, ['chutes'])

    _, r = self.anagrams2.get_anagrams("chutzpah")
    self.assertEqual(r, ['chutzpah'])

    _, r = self.anagrams2.get_anagrams("cicada")
    self.assertEqual(r, ['cicada'])

    _, r = self.anagrams2.get_anagrams("cicero")
    self.assertEqual(r, ['cicero'])

    _, r = self.anagrams2.get_anagrams("ciceronian")
    self.assertEqual(r, ['ciceronian'])

    _, r = self.anagrams2.get_anagrams("ciceronianize")
    self.assertEqual(r, ['ciceronianize'])

    _, r = self.anagrams2.get_anagrams("ciceronianizes")
    self.assertEqual(r, ['ciceronianizes'])

    _, r = self.anagrams2.get_anagrams("cider")
    self.assertEqual(r, ['cider', 'cried'])

    _, r = self.anagrams2.get_anagrams("cigar")
    self.assertEqual(r, ['cigar', 'craig'])

    _, r = self.anagrams2.get_anagrams("cigarette")
    self.assertEqual(r, ['cigarette'])

    _, r = self.anagrams2.get_anagrams("cigarettes")
    self.assertEqual(r, ['cigarettes'])

    _, r = self.anagrams2.get_anagrams("cigars")
    self.assertEqual(r, ['cigars'])

    _, r = self.anagrams2.get_anagrams("cilia")
    self.assertEqual(r, ['cilia'])

    _, r = self.anagrams2.get_anagrams("cincinnati")
    self.assertEqual(r, ['cincinnati'])

    _, r = self.anagrams2.get_anagrams("cinder")
    self.assertEqual(r, ['cinder'])

    _, r = self.anagrams2.get_anagrams("cinderella")
    self.assertEqual(r, ['cinderella'])

    _, r = self.anagrams2.get_anagrams("cinders")
    self.assertEqual(r, ['cinders', 'discern', 'rescind'])

    _, r = self.anagrams2.get_anagrams("cindy")
    self.assertEqual(r, ['cindy'])

    _, r = self.anagrams2.get_anagrams("cinema")
    self.assertEqual(r, ['anemic', 'cinema'])

    _, r = self.anagrams2.get_anagrams("cinematic")
    self.assertEqual(r, ['cinematic'])

    _, r = self.anagrams2.get_anagrams("cinerama")
    self.assertEqual(r, ['american', 'cinerama'])

    _, r = self.anagrams2.get_anagrams("cinnamon")
    self.assertEqual(r, ['cinnamon'])

    _, r = self.anagrams2.get_anagrams("cipher")
    self.assertEqual(r, ['cipher'])

    _, r = self.anagrams2.get_anagrams("ciphers")
    self.assertEqual(r, ['ciphers'])

    _, r = self.anagrams2.get_anagrams("ciphertext")
    self.assertEqual(r, ['ciphertext'])

    _, r = self.anagrams2.get_anagrams("ciphertexts")
    self.assertEqual(r, ['ciphertexts'])

    _, r = self.anagrams2.get_anagrams("circa")
    self.assertEqual(r, ['circa'])

    _, r = self.anagrams2.get_anagrams("circe")
    self.assertEqual(r, ['circe'])

    _, r = self.anagrams2.get_anagrams("circle")
    self.assertEqual(r, ['circle'])

    _, r = self.anagrams2.get_anagrams("circled")
    self.assertEqual(r, ['circled'])

    _, r = self.anagrams2.get_anagrams("circles")
    self.assertEqual(r, ['circles'])

    _, r = self.anagrams2.get_anagrams("circlet")
    self.assertEqual(r, ['circlet'])

    _, r = self.anagrams2.get_anagrams("circling")
    self.assertEqual(r, ['circling'])

    _, r = self.anagrams2.get_anagrams("circuit")
    self.assertEqual(r, ['circuit'])

    _, r = self.anagrams2.get_anagrams("circuitous")
    self.assertEqual(r, ['circuitous'])

    _, r = self.anagrams2.get_anagrams("circuitously")
    self.assertEqual(r, ['circuitously'])

    _, r = self.anagrams2.get_anagrams("circuitry")
    self.assertEqual(r, ['circuitry'])

    _, r = self.anagrams2.get_anagrams("circuits")
    self.assertEqual(r, ['circuits'])

    _, r = self.anagrams2.get_anagrams("circulant")
    self.assertEqual(r, ['circulant'])

    _, r = self.anagrams2.get_anagrams("circular")
    self.assertEqual(r, ['circular'])

    _, r = self.anagrams2.get_anagrams("circularity")
    self.assertEqual(r, ['circularity'])

    _, r = self.anagrams2.get_anagrams("circularly")
    self.assertEqual(r, ['circularly'])

    _, r = self.anagrams2.get_anagrams("circulate")
    self.assertEqual(r, ['circulate'])

    _, r = self.anagrams2.get_anagrams("circulated")
    self.assertEqual(r, ['circulated'])

    _, r = self.anagrams2.get_anagrams("circulates")
    self.assertEqual(r, ['circulates'])

    _, r = self.anagrams2.get_anagrams("circulating")
    self.assertEqual(r, ['circulating'])

    _, r = self.anagrams2.get_anagrams("circulation")
    self.assertEqual(r, ['circulation'])

    _, r = self.anagrams2.get_anagrams("circumcise")
    self.assertEqual(r, ['circumcise'])

    _, r = self.anagrams2.get_anagrams("circumcision")
    self.assertEqual(r, ['circumcision'])

    _, r = self.anagrams2.get_anagrams("circumference")
    self.assertEqual(r, ['circumference'])

    _, r = self.anagrams2.get_anagrams("circumflex")
    self.assertEqual(r, ['circumflex'])

    _, r = self.anagrams2.get_anagrams("circumlocution")
    self.assertEqual(r, ['circumlocution'])

    _, r = self.anagrams2.get_anagrams("circumlocutions")
    self.assertEqual(r, ['circumlocutions'])

    _, r = self.anagrams2.get_anagrams("circumnavigate")
    self.assertEqual(r, ['circumnavigate'])

    _, r = self.anagrams2.get_anagrams("circumnavigated")
    self.assertEqual(r, ['circumnavigated'])

    _, r = self.anagrams2.get_anagrams("circumnavigates")
    self.assertEqual(r, ['circumnavigates'])

    _, r = self.anagrams2.get_anagrams("circumpolar")
    self.assertEqual(r, ['circumpolar'])

    _, r = self.anagrams2.get_anagrams("circumscribe")
    self.assertEqual(r, ['circumscribe'])

    _, r = self.anagrams2.get_anagrams("circumscribed")
    self.assertEqual(r, ['circumscribed'])

    _, r = self.anagrams2.get_anagrams("circumscribing")
    self.assertEqual(r, ['circumscribing'])

    _, r = self.anagrams2.get_anagrams("circumscription")
    self.assertEqual(r, ['circumscription'])

    _, r = self.anagrams2.get_anagrams("circumspect")
    self.assertEqual(r, ['circumspect'])

    _, r = self.anagrams2.get_anagrams("circumspection")
    self.assertEqual(r, ['circumspection'])

    _, r = self.anagrams2.get_anagrams("circumspectly")
    self.assertEqual(r, ['circumspectly'])

    _, r = self.anagrams2.get_anagrams("circumstance")
    self.assertEqual(r, ['circumstance'])

    _, r = self.anagrams2.get_anagrams("circumstanced")
    self.assertEqual(r, ['circumstanced'])

    _, r = self.anagrams2.get_anagrams("circumstances")
    self.assertEqual(r, ['circumstances'])

    _, r = self.anagrams2.get_anagrams("circumstantial")
    self.assertEqual(r, ['circumstantial'])

    _, r = self.anagrams2.get_anagrams("circumstantially")
    self.assertEqual(r, ['circumstantially'])

    _, r = self.anagrams2.get_anagrams("circumvent")
    self.assertEqual(r, ['circumvent'])

    _, r = self.anagrams2.get_anagrams("circumventable")
    self.assertEqual(r, ['circumventable'])

    _, r = self.anagrams2.get_anagrams("circumvented")
    self.assertEqual(r, ['circumvented'])

    _, r = self.anagrams2.get_anagrams("circumventing")
    self.assertEqual(r, ['circumventing'])

    _, r = self.anagrams2.get_anagrams("circumvents")
    self.assertEqual(r, ['circumvents'])

    _, r = self.anagrams2.get_anagrams("circus")
    self.assertEqual(r, ['circus'])

    _, r = self.anagrams2.get_anagrams("circuses")
    self.assertEqual(r, ['circuses'])

    _, r = self.anagrams2.get_anagrams("cistern")
    self.assertEqual(r, ['cistern'])

    _, r = self.anagrams2.get_anagrams("cisterns")
    self.assertEqual(r, ['cisterns'])

    _, r = self.anagrams2.get_anagrams("citadel")
    self.assertEqual(r, ['citadel', 'dialect'])

    _, r = self.anagrams2.get_anagrams("citadels")
    self.assertEqual(r, ['citadels', 'dialects'])

    _, r = self.anagrams2.get_anagrams("citation")
    self.assertEqual(r, ['citation'])

    _, r = self.anagrams2.get_anagrams("citations")
    self.assertEqual(r, ['citations'])

    _, r = self.anagrams2.get_anagrams("cite")
    self.assertEqual(r, ['cite'])

    _, r = self.anagrams2.get_anagrams("cited")
    self.assertEqual(r, ['cited', 'edict'])

    _, r = self.anagrams2.get_anagrams("cites")
    self.assertEqual(r, ['cites'])

    _, r = self.anagrams2.get_anagrams("cities")
    self.assertEqual(r, ['cities'])

    _, r = self.anagrams2.get_anagrams("citing")
    self.assertEqual(r, ['citing'])

    _, r = self.anagrams2.get_anagrams("citizen")
    self.assertEqual(r, ['citizen'])

    _, r = self.anagrams2.get_anagrams("citizens")
    self.assertEqual(r, ['citizens'])

    _, r = self.anagrams2.get_anagrams("citizenship")
    self.assertEqual(r, ['citizenship'])

    _, r = self.anagrams2.get_anagrams("citroen")
    self.assertEqual(r, ['citroen'])

    _, r = self.anagrams2.get_anagrams("citrus")
    self.assertEqual(r, ['citrus', 'curtis', 'rustic'])

    _, r = self.anagrams2.get_anagrams("city")
    self.assertEqual(r, ['city'])

    _, r = self.anagrams2.get_anagrams("cityscape")
    self.assertEqual(r, ['cityscape'])

    _, r = self.anagrams2.get_anagrams("citywide")
    self.assertEqual(r, ['citywide'])

    _, r = self.anagrams2.get_anagrams("civet")
    self.assertEqual(r, ['civet', 'evict'])

    _, r = self.anagrams2.get_anagrams("civic")
    self.assertEqual(r, ['civic'])

    _, r = self.anagrams2.get_anagrams("civics")
    self.assertEqual(r, ['civics'])

    _, r = self.anagrams2.get_anagrams("civil")
    self.assertEqual(r, ['civil'])

    _, r = self.anagrams2.get_anagrams("civilian")
    self.assertEqual(r, ['civilian'])

    _, r = self.anagrams2.get_anagrams("civilians")
    self.assertEqual(r, ['civilians'])

    _, r = self.anagrams2.get_anagrams("civility")
    self.assertEqual(r, ['civility'])

    _, r = self.anagrams2.get_anagrams("civilization")
    self.assertEqual(r, ['civilization'])

    _, r = self.anagrams2.get_anagrams("civilizations")
    self.assertEqual(r, ['civilizations'])

    _, r = self.anagrams2.get_anagrams("civilize")
    self.assertEqual(r, ['civilize'])

    _, r = self.anagrams2.get_anagrams("civilized")
    self.assertEqual(r, ['civilized'])

    _, r = self.anagrams2.get_anagrams("civilizes")
    self.assertEqual(r, ['civilizes'])

    _, r = self.anagrams2.get_anagrams("civilizing")
    self.assertEqual(r, ['civilizing'])

    _, r = self.anagrams2.get_anagrams("civilly")
    self.assertEqual(r, ['civilly'])

    _, r = self.anagrams2.get_anagrams("clad")
    self.assertEqual(r, ['clad'])

    _, r = self.anagrams2.get_anagrams("cladding")
    self.assertEqual(r, ['cladding'])

    _, r = self.anagrams2.get_anagrams("claim")
    self.assertEqual(r, ['claim'])

    _, r = self.anagrams2.get_anagrams("claimable")
    self.assertEqual(r, ['claimable'])

    _, r = self.anagrams2.get_anagrams("claimant")
    self.assertEqual(r, ['claimant'])

    _, r = self.anagrams2.get_anagrams("claimants")
    self.assertEqual(r, ['claimants'])

    _, r = self.anagrams2.get_anagrams("claimed")
    self.assertEqual(r, ['claimed', 'decimal', 'medical'])

    _, r = self.anagrams2.get_anagrams("claiming")
    self.assertEqual(r, ['claiming'])

    _, r = self.anagrams2.get_anagrams("claims")
    self.assertEqual(r, ['claims'])

    _, r = self.anagrams2.get_anagrams("claire")
    self.assertEqual(r, ['claire'])

    _, r = self.anagrams2.get_anagrams("clairvoyant")
    self.assertEqual(r, ['clairvoyant'])

    _, r = self.anagrams2.get_anagrams("clairvoyantly")
    self.assertEqual(r, ['clairvoyantly'])

    _, r = self.anagrams2.get_anagrams("clam")
    self.assertEqual(r, ['calm', 'clam'])

    _, r = self.anagrams2.get_anagrams("clamber")
    self.assertEqual(r, ['clamber'])

    _, r = self.anagrams2.get_anagrams("clambered")
    self.assertEqual(r, ['clambered'])

    _, r = self.anagrams2.get_anagrams("clambering")
    self.assertEqual(r, ['clambering'])

    _, r = self.anagrams2.get_anagrams("clambers")
    self.assertEqual(r, ['clambers', 'scramble'])

    _, r = self.anagrams2.get_anagrams("clamor")
    self.assertEqual(r, ['clamor'])

    _, r = self.anagrams2.get_anagrams("clamored")
    self.assertEqual(r, ['clamored'])

    _, r = self.anagrams2.get_anagrams("clamoring")
    self.assertEqual(r, ['clamoring'])

    _, r = self.anagrams2.get_anagrams("clamorous")
    self.assertEqual(r, ['clamorous'])

    _, r = self.anagrams2.get_anagrams("clamors")
    self.assertEqual(r, ['clamors'])

    _, r = self.anagrams2.get_anagrams("clamp")
    self.assertEqual(r, ['clamp'])

    _, r = self.anagrams2.get_anagrams("clamped")
    self.assertEqual(r, ['clamped'])

    _, r = self.anagrams2.get_anagrams("clamping")
    self.assertEqual(r, ['clamping'])

    _, r = self.anagrams2.get_anagrams("clamps")
    self.assertEqual(r, ['clamps'])

    _, r = self.anagrams2.get_anagrams("clams")
    self.assertEqual(r, ['calms', 'clams'])

    _, r = self.anagrams2.get_anagrams("clan")
    self.assertEqual(r, ['clan'])

    _, r = self.anagrams2.get_anagrams("clandestine")
    self.assertEqual(r, ['clandestine'])

    _, r = self.anagrams2.get_anagrams("clang")
    self.assertEqual(r, ['clang'])

    _, r = self.anagrams2.get_anagrams("clanged")
    self.assertEqual(r, ['clanged', 'glanced'])

    _, r = self.anagrams2.get_anagrams("clanging")
    self.assertEqual(r, ['clanging', 'glancing'])

    _, r = self.anagrams2.get_anagrams("clangs")
    self.assertEqual(r, ['clangs'])

    _, r = self.anagrams2.get_anagrams("clank")
    self.assertEqual(r, ['clank'])

    _, r = self.anagrams2.get_anagrams("clannish")
    self.assertEqual(r, ['clannish'])

    _, r = self.anagrams2.get_anagrams("clap")
    self.assertEqual(r, ['clap'])

    _, r = self.anagrams2.get_anagrams("clapboard")
    self.assertEqual(r, ['clapboard'])

    _, r = self.anagrams2.get_anagrams("clapeyron")
    self.assertEqual(r, ['clapeyron'])

    _, r = self.anagrams2.get_anagrams("clapping")
    self.assertEqual(r, ['clapping'])

    _, r = self.anagrams2.get_anagrams("claps")
    self.assertEqual(r, ['claps', 'clasp', 'scalp'])

    _, r = self.anagrams2.get_anagrams("clara")
    self.assertEqual(r, ['carla', 'clara'])

    _, r = self.anagrams2.get_anagrams("clare")
    self.assertEqual(r, ['clare', 'clear'])

    _, r = self.anagrams2.get_anagrams("claremont")
    self.assertEqual(r, ['claremont'])

    _, r = self.anagrams2.get_anagrams("clarence")
    self.assertEqual(r, ['clarence'])

    _, r = self.anagrams2.get_anagrams("clarendon")
    self.assertEqual(r, ['clarendon'])

    _, r = self.anagrams2.get_anagrams("clarification")
    self.assertEqual(r, ['clarification'])

    _, r = self.anagrams2.get_anagrams("clarifications")
    self.assertEqual(r, ['clarifications'])

    _, r = self.anagrams2.get_anagrams("clarified")
    self.assertEqual(r, ['clarified'])

    _, r = self.anagrams2.get_anagrams("clarifies")
    self.assertEqual(r, ['clarifies'])

    _, r = self.anagrams2.get_anagrams("clarify")
    self.assertEqual(r, ['clarify'])

    _, r = self.anagrams2.get_anagrams("clarifying")
    self.assertEqual(r, ['clarifying'])

    _, r = self.anagrams2.get_anagrams("clarinet")
    self.assertEqual(r, ['clarinet'])

    _, r = self.anagrams2.get_anagrams("clarity")
    self.assertEqual(r, ['clarity'])

    _, r = self.anagrams2.get_anagrams("clark")
    self.assertEqual(r, ['clark'])

    _, r = self.anagrams2.get_anagrams("clarke")
    self.assertEqual(r, ['clarke'])

    _, r = self.anagrams2.get_anagrams("clarridge")
    self.assertEqual(r, ['clarridge'])

    _, r = self.anagrams2.get_anagrams("clash")
    self.assertEqual(r, ['clash'])

    _, r = self.anagrams2.get_anagrams("clashed")
    self.assertEqual(r, ['clashed'])

    _, r = self.anagrams2.get_anagrams("clashes")
    self.assertEqual(r, ['clashes'])

    _, r = self.anagrams2.get_anagrams("clashing")
    self.assertEqual(r, ['clashing'])

    _, r = self.anagrams2.get_anagrams("clasp")
    self.assertEqual(r, ['claps', 'clasp', 'scalp'])

    _, r = self.anagrams2.get_anagrams("clasped")
    self.assertEqual(r, ['clasped'])

    _, r = self.anagrams2.get_anagrams("clasping")
    self.assertEqual(r, ['clasping'])

    _, r = self.anagrams2.get_anagrams("clasps")
    self.assertEqual(r, ['clasps', 'scalps'])

    _, r = self.anagrams2.get_anagrams("class")
    self.assertEqual(r, ['class'])

    _, r = self.anagrams2.get_anagrams("classed")
    self.assertEqual(r, ['classed'])

    _, r = self.anagrams2.get_anagrams("classes")
    self.assertEqual(r, ['classes'])

    _, r = self.anagrams2.get_anagrams("classic")
    self.assertEqual(r, ['classic'])

    _, r = self.anagrams2.get_anagrams("classical")
    self.assertEqual(r, ['classical'])

    _, r = self.anagrams2.get_anagrams("classically")
    self.assertEqual(r, ['classically'])

    _, r = self.anagrams2.get_anagrams("classics")
    self.assertEqual(r, ['classics'])

    _, r = self.anagrams2.get_anagrams("classifiable")
    self.assertEqual(r, ['classifiable'])

    _, r = self.anagrams2.get_anagrams("classification")
    self.assertEqual(r, ['classification'])

    _, r = self.anagrams2.get_anagrams("classifications")
    self.assertEqual(r, ['classifications'])

    _, r = self.anagrams2.get_anagrams("classified")
    self.assertEqual(r, ['classified'])

    _, r = self.anagrams2.get_anagrams("classifier")
    self.assertEqual(r, ['classifier'])

    _, r = self.anagrams2.get_anagrams("classifiers")
    self.assertEqual(r, ['classifiers'])

    _, r = self.anagrams2.get_anagrams("classifies")
    self.assertEqual(r, ['classifies'])

    _, r = self.anagrams2.get_anagrams("classify")
    self.assertEqual(r, ['classify'])

    _, r = self.anagrams2.get_anagrams("classifying")
    self.assertEqual(r, ['classifying'])

    _, r = self.anagrams2.get_anagrams("classmate")
    self.assertEqual(r, ['classmate'])

    _, r = self.anagrams2.get_anagrams("classmates")
    self.assertEqual(r, ['classmates'])

    _, r = self.anagrams2.get_anagrams("classroom")
    self.assertEqual(r, ['classroom'])

    _, r = self.anagrams2.get_anagrams("classrooms")
    self.assertEqual(r, ['classrooms'])

    _, r = self.anagrams2.get_anagrams("classy")
    self.assertEqual(r, ['classy'])

    _, r = self.anagrams2.get_anagrams("clatter")
    self.assertEqual(r, ['clatter'])

    _, r = self.anagrams2.get_anagrams("clattered")
    self.assertEqual(r, ['clattered'])

    _, r = self.anagrams2.get_anagrams("clattering")
    self.assertEqual(r, ['clattering'])

    _, r = self.anagrams2.get_anagrams("claude")
    self.assertEqual(r, ['claude'])

    _, r = self.anagrams2.get_anagrams("claudia")
    self.assertEqual(r, ['claudia'])

    _, r = self.anagrams2.get_anagrams("claudio")
    self.assertEqual(r, ['claudio'])

    _, r = self.anagrams2.get_anagrams("claus")
    self.assertEqual(r, ['claus', 'lucas'])

    _, r = self.anagrams2.get_anagrams("clause")
    self.assertEqual(r, ['clause'])

    _, r = self.anagrams2.get_anagrams("clausen")
    self.assertEqual(r, ['clausen'])

    _, r = self.anagrams2.get_anagrams("clauses")
    self.assertEqual(r, ['clauses'])

    _, r = self.anagrams2.get_anagrams("clausius")
    self.assertEqual(r, ['clausius'])

    _, r = self.anagrams2.get_anagrams("claustrophobia")
    self.assertEqual(r, ['claustrophobia'])

    _, r = self.anagrams2.get_anagrams("claustrophobic")
    self.assertEqual(r, ['claustrophobic'])

    _, r = self.anagrams2.get_anagrams("claw")
    self.assertEqual(r, ['claw'])

    _, r = self.anagrams2.get_anagrams("clawed")
    self.assertEqual(r, ['clawed'])

    _, r = self.anagrams2.get_anagrams("clawing")
    self.assertEqual(r, ['clawing'])

    _, r = self.anagrams2.get_anagrams("claws")
    self.assertEqual(r, ['claws'])

    _, r = self.anagrams2.get_anagrams("clay")
    self.assertEqual(r, ['clay', 'lacy'])

    _, r = self.anagrams2.get_anagrams("clays")
    self.assertEqual(r, ['clays', 'scaly'])

    _, r = self.anagrams2.get_anagrams("clayton")
    self.assertEqual(r, ['clayton'])

    _, r = self.anagrams2.get_anagrams("clean")
    self.assertEqual(r, ['clean', 'lance'])

    _, r = self.anagrams2.get_anagrams("cleaned")
    self.assertEqual(r, ['cleaned'])

    _, r = self.anagrams2.get_anagrams("cleaner")
    self.assertEqual(r, ['cleaner'])

    _, r = self.anagrams2.get_anagrams("cleaners")
    self.assertEqual(r, ['cleaners', 'cleanser'])

    _, r = self.anagrams2.get_anagrams("cleanest")
    self.assertEqual(r, ['cleanest'])

    _, r = self.anagrams2.get_anagrams("cleaning")
    self.assertEqual(r, ['cleaning'])

    _, r = self.anagrams2.get_anagrams("cleanliness")
    self.assertEqual(r, ['cleanliness'])

    _, r = self.anagrams2.get_anagrams("cleanly")
    self.assertEqual(r, ['cleanly'])

    _, r = self.anagrams2.get_anagrams("cleanness")
    self.assertEqual(r, ['cleanness'])

    _, r = self.anagrams2.get_anagrams("cleans")
    self.assertEqual(r, ['cleans', 'lances'])

    _, r = self.anagrams2.get_anagrams("cleanse")
    self.assertEqual(r, ['cleanse'])

    _, r = self.anagrams2.get_anagrams("cleansed")
    self.assertEqual(r, ['cleansed'])

    _, r = self.anagrams2.get_anagrams("cleanser")
    self.assertEqual(r, ['cleaners', 'cleanser'])

    _, r = self.anagrams2.get_anagrams("cleansers")
    self.assertEqual(r, ['cleansers', 'clearness'])

    _, r = self.anagrams2.get_anagrams("cleanses")
    self.assertEqual(r, ['cleanses'])

    _, r = self.anagrams2.get_anagrams("cleansing")
    self.assertEqual(r, ['cleansing'])

    _, r = self.anagrams2.get_anagrams("cleanup")
    self.assertEqual(r, ['cleanup'])

    _, r = self.anagrams2.get_anagrams("clear")
    self.assertEqual(r, ['clare', 'clear'])

    _, r = self.anagrams2.get_anagrams("clearance")
    self.assertEqual(r, ['clearance'])

    _, r = self.anagrams2.get_anagrams("clearances")
    self.assertEqual(r, ['clearances'])

    _, r = self.anagrams2.get_anagrams("cleared")
    self.assertEqual(r, ['cleared', 'declare'])

    _, r = self.anagrams2.get_anagrams("clearer")
    self.assertEqual(r, ['clearer'])

    _, r = self.anagrams2.get_anagrams("clearest")
    self.assertEqual(r, ['clearest'])

    _, r = self.anagrams2.get_anagrams("clearing")
    self.assertEqual(r, ['clearing'])

    _, r = self.anagrams2.get_anagrams("clearings")
    self.assertEqual(r, ['clearings'])

    _, r = self.anagrams2.get_anagrams("clearly")
    self.assertEqual(r, ['carlyle', 'clearly'])

    _, r = self.anagrams2.get_anagrams("clearness")
    self.assertEqual(r, ['cleansers', 'clearness'])

    _, r = self.anagrams2.get_anagrams("clears")
    self.assertEqual(r, ['clears'])

    _, r = self.anagrams2.get_anagrams("clearwater")
    self.assertEqual(r, ['clearwater'])

    _, r = self.anagrams2.get_anagrams("cleavage")
    self.assertEqual(r, ['cleavage'])

    _, r = self.anagrams2.get_anagrams("cleave")
    self.assertEqual(r, ['cleave'])

    _, r = self.anagrams2.get_anagrams("cleaved")
    self.assertEqual(r, ['cleaved'])

    _, r = self.anagrams2.get_anagrams("cleaver")
    self.assertEqual(r, ['cleaver'])

    _, r = self.anagrams2.get_anagrams("cleavers")
    self.assertEqual(r, ['cleavers'])

    _, r = self.anagrams2.get_anagrams("cleaves")
    self.assertEqual(r, ['cleaves'])

    _, r = self.anagrams2.get_anagrams("cleaving")
    self.assertEqual(r, ['cleaving'])

    _, r = self.anagrams2.get_anagrams("cleft")
    self.assertEqual(r, ['cleft'])

    _, r = self.anagrams2.get_anagrams("clefts")
    self.assertEqual(r, ['clefts'])

    _, r = self.anagrams2.get_anagrams("clemency")
    self.assertEqual(r, ['clemency'])

    _, r = self.anagrams2.get_anagrams("clemens")
    self.assertEqual(r, ['clemens'])

    _, r = self.anagrams2.get_anagrams("clement")
    self.assertEqual(r, ['clement'])

    _, r = self.anagrams2.get_anagrams("clemente")
    self.assertEqual(r, ['clemente'])

    _, r = self.anagrams2.get_anagrams("clemson")
    self.assertEqual(r, ['clemson'])

    _, r = self.anagrams2.get_anagrams("clench")
    self.assertEqual(r, ['clench'])

    _, r = self.anagrams2.get_anagrams("clenched")
    self.assertEqual(r, ['clenched'])

    _, r = self.anagrams2.get_anagrams("clenches")
    self.assertEqual(r, ['clenches'])

    _, r = self.anagrams2.get_anagrams("clergy")
    self.assertEqual(r, ['clergy'])

    _, r = self.anagrams2.get_anagrams("clergyman")
    self.assertEqual(r, ['clergyman'])

    _, r = self.anagrams2.get_anagrams("clergymen")
    self.assertEqual(r, ['clergymen'])

    _, r = self.anagrams2.get_anagrams("clerical")
    self.assertEqual(r, ['clerical'])

    _, r = self.anagrams2.get_anagrams("clerk")
    self.assertEqual(r, ['clerk'])

    _, r = self.anagrams2.get_anagrams("clerked")
    self.assertEqual(r, ['clerked'])

    _, r = self.anagrams2.get_anagrams("clerking")
    self.assertEqual(r, ['clerking'])

    _, r = self.anagrams2.get_anagrams("clerks")
    self.assertEqual(r, ['clerks'])

    _, r = self.anagrams2.get_anagrams("cleveland")
    self.assertEqual(r, ['cleveland'])

    _, r = self.anagrams2.get_anagrams("clever")
    self.assertEqual(r, ['clever'])

    _, r = self.anagrams2.get_anagrams("cleverer")
    self.assertEqual(r, ['cleverer'])

    _, r = self.anagrams2.get_anagrams("cleverest")
    self.assertEqual(r, ['cleverest'])

    _, r = self.anagrams2.get_anagrams("cleverly")
    self.assertEqual(r, ['cleverly'])

    _, r = self.anagrams2.get_anagrams("cleverness")
    self.assertEqual(r, ['cleverness'])

    _, r = self.anagrams2.get_anagrams("cliche")
    self.assertEqual(r, ['cliche'])

    _, r = self.anagrams2.get_anagrams("cliches")
    self.assertEqual(r, ['cliches'])

    _, r = self.anagrams2.get_anagrams("click")
    self.assertEqual(r, ['click'])

    _, r = self.anagrams2.get_anagrams("clicked")
    self.assertEqual(r, ['clicked'])

    _, r = self.anagrams2.get_anagrams("clicking")
    self.assertEqual(r, ['clicking'])

    _, r = self.anagrams2.get_anagrams("clicks")
    self.assertEqual(r, ['clicks'])

    _, r = self.anagrams2.get_anagrams("client")
    self.assertEqual(r, ['client'])

    _, r = self.anagrams2.get_anagrams("clientele")
    self.assertEqual(r, ['clientele'])

    _, r = self.anagrams2.get_anagrams("clients")
    self.assertEqual(r, ['clients', 'stencil'])

    _, r = self.anagrams2.get_anagrams("cliff")
    self.assertEqual(r, ['cliff'])

    _, r = self.anagrams2.get_anagrams("clifford")
    self.assertEqual(r, ['clifford'])

    _, r = self.anagrams2.get_anagrams("cliffs")
    self.assertEqual(r, ['cliffs'])

    _, r = self.anagrams2.get_anagrams("clifton")
    self.assertEqual(r, ['clifton'])

    _, r = self.anagrams2.get_anagrams("climate")
    self.assertEqual(r, ['climate'])

    _, r = self.anagrams2.get_anagrams("climates")
    self.assertEqual(r, ['climates'])

    _, r = self.anagrams2.get_anagrams("climatic")
    self.assertEqual(r, ['climatic'])

    _, r = self.anagrams2.get_anagrams("climatically")
    self.assertEqual(r, ['climatically'])

    _, r = self.anagrams2.get_anagrams("climatology")
    self.assertEqual(r, ['climatology'])

    _, r = self.anagrams2.get_anagrams("climax")
    self.assertEqual(r, ['climax'])

    _, r = self.anagrams2.get_anagrams("climaxed")
    self.assertEqual(r, ['climaxed'])

    _, r = self.anagrams2.get_anagrams("climaxes")
    self.assertEqual(r, ['climaxes', 'exclaims'])

    _, r = self.anagrams2.get_anagrams("climb")
    self.assertEqual(r, ['climb'])

    _, r = self.anagrams2.get_anagrams("climbed")
    self.assertEqual(r, ['climbed'])

    _, r = self.anagrams2.get_anagrams("climber")
    self.assertEqual(r, ['climber'])

    _, r = self.anagrams2.get_anagrams("climbers")
    self.assertEqual(r, ['climbers'])

    _, r = self.anagrams2.get_anagrams("climbing")
    self.assertEqual(r, ['climbing'])

    _, r = self.anagrams2.get_anagrams("climbs")
    self.assertEqual(r, ['climbs'])

    _, r = self.anagrams2.get_anagrams("clime")
    self.assertEqual(r, ['clime'])

    _, r = self.anagrams2.get_anagrams("climes")
    self.assertEqual(r, ['climes'])

    _, r = self.anagrams2.get_anagrams("clinch")
    self.assertEqual(r, ['clinch'])

    _, r = self.anagrams2.get_anagrams("clinched")
    self.assertEqual(r, ['clinched'])

    _, r = self.anagrams2.get_anagrams("clincher")
    self.assertEqual(r, ['clincher'])

    _, r = self.anagrams2.get_anagrams("clinches")
    self.assertEqual(r, ['clinches'])

    _, r = self.anagrams2.get_anagrams("cling")
    self.assertEqual(r, ['cling'])

    _, r = self.anagrams2.get_anagrams("clinging")
    self.assertEqual(r, ['clinging'])

    _, r = self.anagrams2.get_anagrams("clings")
    self.assertEqual(r, ['clings'])

    _, r = self.anagrams2.get_anagrams("clinic")
    self.assertEqual(r, ['clinic'])

    _, r = self.anagrams2.get_anagrams("clinical")
    self.assertEqual(r, ['clinical'])

    _, r = self.anagrams2.get_anagrams("clinically")
    self.assertEqual(r, ['clinically'])

    _, r = self.anagrams2.get_anagrams("clinician")
    self.assertEqual(r, ['clinician'])

    _, r = self.anagrams2.get_anagrams("clinics")
    self.assertEqual(r, ['clinics'])

    _, r = self.anagrams2.get_anagrams("clink")
    self.assertEqual(r, ['clink'])

    _, r = self.anagrams2.get_anagrams("clinked")
    self.assertEqual(r, ['clinked'])

    _, r = self.anagrams2.get_anagrams("clinker")
    self.assertEqual(r, ['clinker'])

    _, r = self.anagrams2.get_anagrams("clint")
    self.assertEqual(r, ['clint'])

    _, r = self.anagrams2.get_anagrams("clinton")
    self.assertEqual(r, ['clinton'])

    _, r = self.anagrams2.get_anagrams("clio")
    self.assertEqual(r, ['clio', 'coil', 'loci'])

    _, r = self.anagrams2.get_anagrams("clip")
    self.assertEqual(r, ['clip'])

    _, r = self.anagrams2.get_anagrams("clipboard")
    self.assertEqual(r, ['clipboard'])

    _, r = self.anagrams2.get_anagrams("clipped")
    self.assertEqual(r, ['clipped'])

    _, r = self.anagrams2.get_anagrams("clipper")
    self.assertEqual(r, ['clipper', 'cripple'])

    _, r = self.anagrams2.get_anagrams("clippers")
    self.assertEqual(r, ['clippers', 'cripples'])

    _, r = self.anagrams2.get_anagrams("clipping")
    self.assertEqual(r, ['clipping'])

    _, r = self.anagrams2.get_anagrams("clippings")
    self.assertEqual(r, ['clippings'])

    _, r = self.anagrams2.get_anagrams("clips")
    self.assertEqual(r, ['clips'])

    _, r = self.anagrams2.get_anagrams("clique")
    self.assertEqual(r, ['clique'])

    _, r = self.anagrams2.get_anagrams("cliques")
    self.assertEqual(r, ['cliques'])

    _, r = self.anagrams2.get_anagrams("clitoris")
    self.assertEqual(r, ['clitoris'])

    _, r = self.anagrams2.get_anagrams("clive")
    self.assertEqual(r, ['clive'])

    _, r = self.anagrams2.get_anagrams("cloak")
    self.assertEqual(r, ['cloak'])

    _, r = self.anagrams2.get_anagrams("cloakroom")
    self.assertEqual(r, ['cloakroom'])

    _, r = self.anagrams2.get_anagrams("cloaks")
    self.assertEqual(r, ['cloaks'])

    _, r = self.anagrams2.get_anagrams("clobber")
    self.assertEqual(r, ['clobber', 'cobbler'])

    _, r = self.anagrams2.get_anagrams("clobbered")
    self.assertEqual(r, ['clobbered'])

    _, r = self.anagrams2.get_anagrams("clobbering")
    self.assertEqual(r, ['clobbering'])

    _, r = self.anagrams2.get_anagrams("clobbers")
    self.assertEqual(r, ['clobbers', 'cobblers'])

    _, r = self.anagrams2.get_anagrams("clock")
    self.assertEqual(r, ['clock'])

    _, r = self.anagrams2.get_anagrams("clocked")
    self.assertEqual(r, ['clocked'])

    _, r = self.anagrams2.get_anagrams("clocker")
    self.assertEqual(r, ['clocker'])

    _, r = self.anagrams2.get_anagrams("clockers")
    self.assertEqual(r, ['clockers'])

    _, r = self.anagrams2.get_anagrams("clocking")
    self.assertEqual(r, ['clocking'])

    _, r = self.anagrams2.get_anagrams("clockings")
    self.assertEqual(r, ['clockings'])

    _, r = self.anagrams2.get_anagrams("clocks")
    self.assertEqual(r, ['clocks'])

    _, r = self.anagrams2.get_anagrams("clockwatcher")
    self.assertEqual(r, ['clockwatcher'])

    _, r = self.anagrams2.get_anagrams("clockwise")
    self.assertEqual(r, ['clockwise'])

    _, r = self.anagrams2.get_anagrams("clockwork")
    self.assertEqual(r, ['clockwork'])

    _, r = self.anagrams2.get_anagrams("clod")
    self.assertEqual(r, ['clod', 'cold'])

    _, r = self.anagrams2.get_anagrams("clods")
    self.assertEqual(r, ['clods', 'colds', 'scold'])

    _, r = self.anagrams2.get_anagrams("clog")
    self.assertEqual(r, ['clog'])

    _, r = self.anagrams2.get_anagrams("clogged")
    self.assertEqual(r, ['clogged'])

    _, r = self.anagrams2.get_anagrams("clogging")
    self.assertEqual(r, ['clogging'])

    _, r = self.anagrams2.get_anagrams("clogs")
    self.assertEqual(r, ['clogs'])

    _, r = self.anagrams2.get_anagrams("cloister")
    self.assertEqual(r, ['cloister'])

    _, r = self.anagrams2.get_anagrams("cloisters")
    self.assertEqual(r, ['cloisters'])

    _, r = self.anagrams2.get_anagrams("clone")
    self.assertEqual(r, ['clone'])

    _, r = self.anagrams2.get_anagrams("cloned")
    self.assertEqual(r, ['cloned'])

    _, r = self.anagrams2.get_anagrams("clones")
    self.assertEqual(r, ['clones'])

    _, r = self.anagrams2.get_anagrams("cloning")
    self.assertEqual(r, ['cloning'])

    _, r = self.anagrams2.get_anagrams("close")
    self.assertEqual(r, ['close'])

    _, r = self.anagrams2.get_anagrams("closed")
    self.assertEqual(r, ['closed'])

    _, r = self.anagrams2.get_anagrams("closely")
    self.assertEqual(r, ['closely'])

    _, r = self.anagrams2.get_anagrams("closeness")
    self.assertEqual(r, ['closeness'])

    _, r = self.anagrams2.get_anagrams("closenesses")
    self.assertEqual(r, ['closenesses'])

    _, r = self.anagrams2.get_anagrams("closer")
    self.assertEqual(r, ['closer'])

    _, r = self.anagrams2.get_anagrams("closers")
    self.assertEqual(r, ['closers'])

    _, r = self.anagrams2.get_anagrams("closes")
    self.assertEqual(r, ['closes'])

    _, r = self.anagrams2.get_anagrams("closest")
    self.assertEqual(r, ['closest', 'closets'])

    _, r = self.anagrams2.get_anagrams("closet")
    self.assertEqual(r, ['closet'])

    _, r = self.anagrams2.get_anagrams("closeted")
    self.assertEqual(r, ['closeted'])

    _, r = self.anagrams2.get_anagrams("closets")
    self.assertEqual(r, ['closest', 'closets'])

    _, r = self.anagrams2.get_anagrams("closeup")
    self.assertEqual(r, ['closeup', 'couples'])

    _, r = self.anagrams2.get_anagrams("closing")
    self.assertEqual(r, ['closing'])

    _, r = self.anagrams2.get_anagrams("closure")
    self.assertEqual(r, ['closure'])

    _, r = self.anagrams2.get_anagrams("closures")
    self.assertEqual(r, ['closures'])

    _, r = self.anagrams2.get_anagrams("clot")
    self.assertEqual(r, ['clot', 'colt'])

    _, r = self.anagrams2.get_anagrams("cloth")
    self.assertEqual(r, ['cloth'])

    _, r = self.anagrams2.get_anagrams("clothe")
    self.assertEqual(r, ['clothe'])

    _, r = self.anagrams2.get_anagrams("clothed")
    self.assertEqual(r, ['clothed'])

    _, r = self.anagrams2.get_anagrams("clothes")
    self.assertEqual(r, ['clothes'])

    _, r = self.anagrams2.get_anagrams("clotheshorse")
    self.assertEqual(r, ['clotheshorse'])

    _, r = self.anagrams2.get_anagrams("clothesline")
    self.assertEqual(r, ['clothesline'])

    _, r = self.anagrams2.get_anagrams("clothing")
    self.assertEqual(r, ['clothing'])

    _, r = self.anagrams2.get_anagrams("clotho")
    self.assertEqual(r, ['clotho'])

    _, r = self.anagrams2.get_anagrams("clotting")
    self.assertEqual(r, ['clotting'])

    _, r = self.anagrams2.get_anagrams("cloture")
    self.assertEqual(r, ['cloture', 'coulter'])

    _, r = self.anagrams2.get_anagrams("cloud")
    self.assertEqual(r, ['cloud', 'could'])

    _, r = self.anagrams2.get_anagrams("cloudburst")
    self.assertEqual(r, ['cloudburst'])

    _, r = self.anagrams2.get_anagrams("clouded")
    self.assertEqual(r, ['clouded'])

    _, r = self.anagrams2.get_anagrams("cloudier")
    self.assertEqual(r, ['cloudier'])

    _, r = self.anagrams2.get_anagrams("cloudiest")
    self.assertEqual(r, ['cloudiest'])

    _, r = self.anagrams2.get_anagrams("cloudiness")
    self.assertEqual(r, ['cloudiness'])

    _, r = self.anagrams2.get_anagrams("clouding")
    self.assertEqual(r, ['clouding'])

    _, r = self.anagrams2.get_anagrams("cloudless")
    self.assertEqual(r, ['cloudless'])

    _, r = self.anagrams2.get_anagrams("clouds")
    self.assertEqual(r, ['clouds'])

    _, r = self.anagrams2.get_anagrams("cloudy")
    self.assertEqual(r, ['cloudy'])

    _, r = self.anagrams2.get_anagrams("clout")
    self.assertEqual(r, ['clout'])

    _, r = self.anagrams2.get_anagrams("clove")
    self.assertEqual(r, ['clove'])

    _, r = self.anagrams2.get_anagrams("clover")
    self.assertEqual(r, ['clover'])

    _, r = self.anagrams2.get_anagrams("cloves")
    self.assertEqual(r, ['cloves'])

    _, r = self.anagrams2.get_anagrams("clown")
    self.assertEqual(r, ['clown'])

    _, r = self.anagrams2.get_anagrams("clowning")
    self.assertEqual(r, ['clowning'])

    _, r = self.anagrams2.get_anagrams("clowns")
    self.assertEqual(r, ['clowns'])

    _, r = self.anagrams2.get_anagrams("club")
    self.assertEqual(r, ['club'])

    _, r = self.anagrams2.get_anagrams("clubbed")
    self.assertEqual(r, ['clubbed'])

    _, r = self.anagrams2.get_anagrams("clubbing")
    self.assertEqual(r, ['clubbing'])

    _, r = self.anagrams2.get_anagrams("clubhouse")
    self.assertEqual(r, ['clubhouse'])

    _, r = self.anagrams2.get_anagrams("clubroom")
    self.assertEqual(r, ['clubroom'])

    _, r = self.anagrams2.get_anagrams("clubs")
    self.assertEqual(r, ['clubs'])

    _, r = self.anagrams2.get_anagrams("cluck")
    self.assertEqual(r, ['cluck'])

    _, r = self.anagrams2.get_anagrams("clucked")
    self.assertEqual(r, ['clucked'])

    _, r = self.anagrams2.get_anagrams("clucking")
    self.assertEqual(r, ['clucking'])

    _, r = self.anagrams2.get_anagrams("clucks")
    self.assertEqual(r, ['clucks'])

    _, r = self.anagrams2.get_anagrams("clue")
    self.assertEqual(r, ['clue'])

    _, r = self.anagrams2.get_anagrams("clues")
    self.assertEqual(r, ['clues'])

    _, r = self.anagrams2.get_anagrams("cluj")
    self.assertEqual(r, ['cluj'])

    _, r = self.anagrams2.get_anagrams("clump")
    self.assertEqual(r, ['clump'])

    _, r = self.anagrams2.get_anagrams("clumped")
    self.assertEqual(r, ['clumped'])

    _, r = self.anagrams2.get_anagrams("clumping")
    self.assertEqual(r, ['clumping'])

    _, r = self.anagrams2.get_anagrams("clumps")
    self.assertEqual(r, ['clumps'])

    _, r = self.anagrams2.get_anagrams("clumsily")
    self.assertEqual(r, ['clumsily'])

    _, r = self.anagrams2.get_anagrams("clumsiness")
    self.assertEqual(r, ['clumsiness'])

    _, r = self.anagrams2.get_anagrams("clumsy")
    self.assertEqual(r, ['clumsy'])

    _, r = self.anagrams2.get_anagrams("clung")
    self.assertEqual(r, ['clung'])

    _, r = self.anagrams2.get_anagrams("cluster")
    self.assertEqual(r, ['cluster'])

    _, r = self.anagrams2.get_anagrams("clustered")
    self.assertEqual(r, ['clustered'])

    _, r = self.anagrams2.get_anagrams("clustering")
    self.assertEqual(r, ['clustering'])

    _, r = self.anagrams2.get_anagrams("clusterings")
    self.assertEqual(r, ['clusterings'])

    _, r = self.anagrams2.get_anagrams("clusters")
    self.assertEqual(r, ['clusters'])

    _, r = self.anagrams2.get_anagrams("clutch")
    self.assertEqual(r, ['clutch'])

    _, r = self.anagrams2.get_anagrams("clutched")
    self.assertEqual(r, ['clutched'])

    _, r = self.anagrams2.get_anagrams("clutches")
    self.assertEqual(r, ['clutches'])

    _, r = self.anagrams2.get_anagrams("clutching")
    self.assertEqual(r, ['clutching'])

    _, r = self.anagrams2.get_anagrams("clutter")
    self.assertEqual(r, ['clutter'])

    _, r = self.anagrams2.get_anagrams("cluttered")
    self.assertEqual(r, ['cluttered'])

    _, r = self.anagrams2.get_anagrams("cluttering")
    self.assertEqual(r, ['cluttering'])

    _, r = self.anagrams2.get_anagrams("clutters")
    self.assertEqual(r, ['clutters'])

    _, r = self.anagrams2.get_anagrams("clyde")
    self.assertEqual(r, ['clyde'])

    _, r = self.anagrams2.get_anagrams("clytemnestra")
    self.assertEqual(r, ['clytemnestra'])

    _, r = self.anagrams2.get_anagrams("coach")
    self.assertEqual(r, ['coach'])

    _, r = self.anagrams2.get_anagrams("coached")
    self.assertEqual(r, ['coached'])

    _, r = self.anagrams2.get_anagrams("coacher")
    self.assertEqual(r, ['coacher'])

    _, r = self.anagrams2.get_anagrams("coaches")
    self.assertEqual(r, ['coaches'])

    _, r = self.anagrams2.get_anagrams("coaching")
    self.assertEqual(r, ['coaching'])

    _, r = self.anagrams2.get_anagrams("coachman")
    self.assertEqual(r, ['coachman'])

    _, r = self.anagrams2.get_anagrams("coachmen")
    self.assertEqual(r, ['coachmen', 'comanche'])

    _, r = self.anagrams2.get_anagrams("coagulate")
    self.assertEqual(r, ['coagulate'])

    _, r = self.anagrams2.get_anagrams("coal")
    self.assertEqual(r, ['coal'])

    _, r = self.anagrams2.get_anagrams("coalesce")
    self.assertEqual(r, ['coalesce'])

    _, r = self.anagrams2.get_anagrams("coalesced")
    self.assertEqual(r, ['coalesced'])

    _, r = self.anagrams2.get_anagrams("coalesces")
    self.assertEqual(r, ['coalesces'])

    _, r = self.anagrams2.get_anagrams("coalescing")
    self.assertEqual(r, ['coalescing'])

    _, r = self.anagrams2.get_anagrams("coalition")
    self.assertEqual(r, ['coalition'])

    _, r = self.anagrams2.get_anagrams("coals")
    self.assertEqual(r, ['coals'])

    _, r = self.anagrams2.get_anagrams("coarse")
    self.assertEqual(r, ['coarse'])

    _, r = self.anagrams2.get_anagrams("coarsely")
    self.assertEqual(r, ['coarsely'])

    _, r = self.anagrams2.get_anagrams("coarsen")
    self.assertEqual(r, ['coarsen'])

    _, r = self.anagrams2.get_anagrams("coarsened")
    self.assertEqual(r, ['coarsened'])

    _, r = self.anagrams2.get_anagrams("coarseness")
    self.assertEqual(r, ['coarseness'])

    _, r = self.anagrams2.get_anagrams("coarser")
    self.assertEqual(r, ['coarser'])

    _, r = self.anagrams2.get_anagrams("coarsest")
    self.assertEqual(r, ['coarsest', 'coasters', 'socrates'])

    _, r = self.anagrams2.get_anagrams("coast")
    self.assertEqual(r, ['ascot', 'coast', 'coats', 'costa', 'tosca'])

    _, r = self.anagrams2.get_anagrams("coastal")
    self.assertEqual(r, ['coastal'])

    _, r = self.anagrams2.get_anagrams("coasted")
    self.assertEqual(r, ['coasted'])

    _, r = self.anagrams2.get_anagrams("coaster")
    self.assertEqual(r, ['coaster'])

    _, r = self.anagrams2.get_anagrams("coasters")
    self.assertEqual(r, ['coarsest', 'coasters', 'socrates'])

    _, r = self.anagrams2.get_anagrams("coasting")
    self.assertEqual(r, ['agnostic', 'coasting', 'coatings'])

    _, r = self.anagrams2.get_anagrams("coastline")
    self.assertEqual(r, ['coastline', 'sectional'])

    _, r = self.anagrams2.get_anagrams("coasts")
    self.assertEqual(r, ['coasts'])

    _, r = self.anagrams2.get_anagrams("coat")
    self.assertEqual(r, ['coat'])

    _, r = self.anagrams2.get_anagrams("coated")
    self.assertEqual(r, ['coated'])

    _, r = self.anagrams2.get_anagrams("coates")
    self.assertEqual(r, ['coates'])

    _, r = self.anagrams2.get_anagrams("coating")
    self.assertEqual(r, ['coating'])

    _, r = self.anagrams2.get_anagrams("coatings")
    self.assertEqual(r, ['agnostic', 'coasting', 'coatings'])

    _, r = self.anagrams2.get_anagrams("coats")
    self.assertEqual(r, ['ascot', 'coast', 'coats', 'costa', 'tosca'])

    _, r = self.anagrams2.get_anagrams("coattail")
    self.assertEqual(r, ['coattail'])

    _, r = self.anagrams2.get_anagrams("coauthor")
    self.assertEqual(r, ['coauthor'])

    _, r = self.anagrams2.get_anagrams("coax")
    self.assertEqual(r, ['coax'])

    _, r = self.anagrams2.get_anagrams("coaxed")
    self.assertEqual(r, ['coaxed'])

    _, r = self.anagrams2.get_anagrams("coaxer")
    self.assertEqual(r, ['coaxer'])

    _, r = self.anagrams2.get_anagrams("coaxes")
    self.assertEqual(r, ['coaxes'])

    _, r = self.anagrams2.get_anagrams("coaxial")
    self.assertEqual(r, ['coaxial'])

    _, r = self.anagrams2.get_anagrams("coaxing")
    self.assertEqual(r, ['coaxing'])

    _, r = self.anagrams2.get_anagrams("cobalt")
    self.assertEqual(r, ['cobalt'])

    _, r = self.anagrams2.get_anagrams("cobb")
    self.assertEqual(r, ['cobb'])

    _, r = self.anagrams2.get_anagrams("cobble")
    self.assertEqual(r, ['cobble'])

    _, r = self.anagrams2.get_anagrams("cobbler")
    self.assertEqual(r, ['clobber', 'cobbler'])

    _, r = self.anagrams2.get_anagrams("cobblers")
    self.assertEqual(r, ['clobbers', 'cobblers'])

    _, r = self.anagrams2.get_anagrams("cobblestone")
    self.assertEqual(r, ['cobblestone'])

    _, r = self.anagrams2.get_anagrams("cobol")
    self.assertEqual(r, ['cobol', 'cobol'])

    _, r = self.anagrams2.get_anagrams("cobol")
    self.assertEqual(r, ['cobol', 'cobol'])

    _, r = self.anagrams2.get_anagrams("cobra")
    self.assertEqual(r, ['cobra'])

    _, r = self.anagrams2.get_anagrams("cobweb")
    self.assertEqual(r, ['cobweb'])

    _, r = self.anagrams2.get_anagrams("cobwebs")
    self.assertEqual(r, ['cobwebs'])

    _, r = self.anagrams2.get_anagrams("coca")
    self.assertEqual(r, ['coca'])

    _, r = self.anagrams2.get_anagrams("cocaine")
    self.assertEqual(r, ['cocaine', 'oceanic'])

    _, r = self.anagrams2.get_anagrams("cochise")
    self.assertEqual(r, ['choices', 'cochise'])

    _, r = self.anagrams2.get_anagrams("cochran")
    self.assertEqual(r, ['cochran'])

    _, r = self.anagrams2.get_anagrams("cochrane")
    self.assertEqual(r, ['cochrane', 'encroach'])

    _, r = self.anagrams2.get_anagrams("cock")
    self.assertEqual(r, ['cock'])

    _, r = self.anagrams2.get_anagrams("cocked")
    self.assertEqual(r, ['cocked'])

    _, r = self.anagrams2.get_anagrams("cocking")
    self.assertEqual(r, ['cocking'])

    _, r = self.anagrams2.get_anagrams("cockpit")
    self.assertEqual(r, ['cockpit'])

    _, r = self.anagrams2.get_anagrams("cockroach")
    self.assertEqual(r, ['cockroach'])

    _, r = self.anagrams2.get_anagrams("cocks")
    self.assertEqual(r, ['cocks'])

    _, r = self.anagrams2.get_anagrams("cocktail")
    self.assertEqual(r, ['cocktail'])

    _, r = self.anagrams2.get_anagrams("cocktails")
    self.assertEqual(r, ['cocktails'])

    _, r = self.anagrams2.get_anagrams("cocky")
    self.assertEqual(r, ['cocky'])

    _, r = self.anagrams2.get_anagrams("coco")
    self.assertEqual(r, ['coco'])

    _, r = self.anagrams2.get_anagrams("cocoa")
    self.assertEqual(r, ['cocoa'])

    _, r = self.anagrams2.get_anagrams("coconut")
    self.assertEqual(r, ['coconut'])

    _, r = self.anagrams2.get_anagrams("coconuts")
    self.assertEqual(r, ['coconuts'])

    _, r = self.anagrams2.get_anagrams("cocoon")
    self.assertEqual(r, ['cocoon'])

    _, r = self.anagrams2.get_anagrams("cocoons")
    self.assertEqual(r, ['cocoons'])

    _, r = self.anagrams2.get_anagrams("cod")
    self.assertEqual(r, ['cod', 'doc'])

    _, r = self.anagrams2.get_anagrams("coddington")
    self.assertEqual(r, ['coddington'])

    _, r = self.anagrams2.get_anagrams("coddle")
    self.assertEqual(r, ['coddle'])

    _, r = self.anagrams2.get_anagrams("code")
    self.assertEqual(r, ['code', 'coed'])

    _, r = self.anagrams2.get_anagrams("coded")
    self.assertEqual(r, ['coded'])

    _, r = self.anagrams2.get_anagrams("codeine")
    self.assertEqual(r, ['codeine'])

    _, r = self.anagrams2.get_anagrams("coder")
    self.assertEqual(r, ['coder', 'cored'])

    _, r = self.anagrams2.get_anagrams("coders")
    self.assertEqual(r, ['coders', 'scored'])

    _, r = self.anagrams2.get_anagrams("codes")
    self.assertEqual(r, ['codes'])

    _, r = self.anagrams2.get_anagrams("codeword")
    self.assertEqual(r, ['codeword'])

    _, r = self.anagrams2.get_anagrams("codewords")
    self.assertEqual(r, ['codewords'])

    _, r = self.anagrams2.get_anagrams("codfish")
    self.assertEqual(r, ['codfish'])

    _, r = self.anagrams2.get_anagrams("codicil")
    self.assertEqual(r, ['codicil'])

    _, r = self.anagrams2.get_anagrams("codification")
    self.assertEqual(r, ['codification'])

    _, r = self.anagrams2.get_anagrams("codifications")
    self.assertEqual(r, ['codifications'])

    _, r = self.anagrams2.get_anagrams("codified")
    self.assertEqual(r, ['codified'])

    _, r = self.anagrams2.get_anagrams("codifier")
    self.assertEqual(r, ['codifier'])

    _, r = self.anagrams2.get_anagrams("codifiers")
    self.assertEqual(r, ['codifiers'])

    _, r = self.anagrams2.get_anagrams("codifies")
    self.assertEqual(r, ['codifies'])

    _, r = self.anagrams2.get_anagrams("codify")
    self.assertEqual(r, ['codify'])

    _, r = self.anagrams2.get_anagrams("codifying")
    self.assertEqual(r, ['codifying'])

    _, r = self.anagrams2.get_anagrams("coding")
    self.assertEqual(r, ['coding'])

    _, r = self.anagrams2.get_anagrams("codings")
    self.assertEqual(r, ['codings'])

    _, r = self.anagrams2.get_anagrams("codpiece")
    self.assertEqual(r, ['codpiece'])

    _, r = self.anagrams2.get_anagrams("cody")
    self.assertEqual(r, ['cody'])

    _, r = self.anagrams2.get_anagrams("coed")
    self.assertEqual(r, ['code', 'coed'])

    _, r = self.anagrams2.get_anagrams("coeditor")
    self.assertEqual(r, ['coeditor'])

    _, r = self.anagrams2.get_anagrams("coeducation")
    self.assertEqual(r, ['coeducation'])

    _, r = self.anagrams2.get_anagrams("coefficient")
    self.assertEqual(r, ['coefficient'])

    _, r = self.anagrams2.get_anagrams("coefficients")
    self.assertEqual(r, ['coefficients'])

    _, r = self.anagrams2.get_anagrams("coequal")
    self.assertEqual(r, ['coequal'])

    _, r = self.anagrams2.get_anagrams("coerce")
    self.assertEqual(r, ['coerce'])

    _, r = self.anagrams2.get_anagrams("coerced")
    self.assertEqual(r, ['coerced'])

    _, r = self.anagrams2.get_anagrams("coerces")
    self.assertEqual(r, ['coerces'])

    _, r = self.anagrams2.get_anagrams("coercible")
    self.assertEqual(r, ['coercible'])

    _, r = self.anagrams2.get_anagrams("coercing")
    self.assertEqual(r, ['coercing'])

    _, r = self.anagrams2.get_anagrams("coercion")
    self.assertEqual(r, ['coercion'])

    _, r = self.anagrams2.get_anagrams("coercive")
    self.assertEqual(r, ['coercive'])

    _, r = self.anagrams2.get_anagrams("coexist")
    self.assertEqual(r, ['coexist'])

    _, r = self.anagrams2.get_anagrams("coexisted")
    self.assertEqual(r, ['coexisted'])

    _, r = self.anagrams2.get_anagrams("coexistence")
    self.assertEqual(r, ['coexistence'])

    _, r = self.anagrams2.get_anagrams("coexisting")
    self.assertEqual(r, ['coexisting'])

    _, r = self.anagrams2.get_anagrams("coexists")
    self.assertEqual(r, ['coexists'])

    _, r = self.anagrams2.get_anagrams("cofactor")
    self.assertEqual(r, ['cofactor'])

    _, r = self.anagrams2.get_anagrams("coffee")
    self.assertEqual(r, ['coffee'])

    _, r = self.anagrams2.get_anagrams("coffeecup")
    self.assertEqual(r, ['coffeecup'])

    _, r = self.anagrams2.get_anagrams("coffeepot")
    self.assertEqual(r, ['coffeepot'])

    _, r = self.anagrams2.get_anagrams("coffees")
    self.assertEqual(r, ['coffees'])

    _, r = self.anagrams2.get_anagrams("coffer")
    self.assertEqual(r, ['coffer'])

    _, r = self.anagrams2.get_anagrams("coffers")
    self.assertEqual(r, ['coffers', 'scoffer'])

    _, r = self.anagrams2.get_anagrams("coffey")
    self.assertEqual(r, ['coffey'])

    _, r = self.anagrams2.get_anagrams("coffin")
    self.assertEqual(r, ['coffin'])

    _, r = self.anagrams2.get_anagrams("coffins")
    self.assertEqual(r, ['coffins'])

    _, r = self.anagrams2.get_anagrams("coffman")
    self.assertEqual(r, ['coffman'])

    _, r = self.anagrams2.get_anagrams("cog")
    self.assertEqual(r, ['cog'])

    _, r = self.anagrams2.get_anagrams("cogent")
    self.assertEqual(r, ['cogent'])

    _, r = self.anagrams2.get_anagrams("cogently")
    self.assertEqual(r, ['cogently'])

    _, r = self.anagrams2.get_anagrams("cogitate")
    self.assertEqual(r, ['cogitate'])

    _, r = self.anagrams2.get_anagrams("cogitated")
    self.assertEqual(r, ['cogitated'])

    _, r = self.anagrams2.get_anagrams("cogitates")
    self.assertEqual(r, ['cogitates'])

    _, r = self.anagrams2.get_anagrams("cogitating")
    self.assertEqual(r, ['cogitating'])

    _, r = self.anagrams2.get_anagrams("cogitation")
    self.assertEqual(r, ['cogitation'])

    _, r = self.anagrams2.get_anagrams("cognac")
    self.assertEqual(r, ['cognac'])

    _, r = self.anagrams2.get_anagrams("cognition")
    self.assertEqual(r, ['cognition'])

    _, r = self.anagrams2.get_anagrams("cognitive")
    self.assertEqual(r, ['cognitive'])

    _, r = self.anagrams2.get_anagrams("cognitively")
    self.assertEqual(r, ['cognitively'])

    _, r = self.anagrams2.get_anagrams("cognizance")
    self.assertEqual(r, ['cognizance'])

    _, r = self.anagrams2.get_anagrams("cognizant")
    self.assertEqual(r, ['cognizant'])

    _, r = self.anagrams2.get_anagrams("cogs")
    self.assertEqual(r, ['cogs'])

    _, r = self.anagrams2.get_anagrams("cohabitation")
    self.assertEqual(r, ['cohabitation'])

    _, r = self.anagrams2.get_anagrams("cohabitations")
    self.assertEqual(r, ['cohabitations'])

    _, r = self.anagrams2.get_anagrams("cohen")
    self.assertEqual(r, ['cohen', 'enoch'])

    _, r = self.anagrams2.get_anagrams("cohere")
    self.assertEqual(r, ['cohere'])

    _, r = self.anagrams2.get_anagrams("cohered")
    self.assertEqual(r, ['cohered'])

    _, r = self.anagrams2.get_anagrams("coherence")
    self.assertEqual(r, ['coherence'])

    _, r = self.anagrams2.get_anagrams("coherent")
    self.assertEqual(r, ['coherent'])

    _, r = self.anagrams2.get_anagrams("coherently")
    self.assertEqual(r, ['coherently'])

    _, r = self.anagrams2.get_anagrams("coheres")
    self.assertEqual(r, ['coheres'])

    _, r = self.anagrams2.get_anagrams("cohering")
    self.assertEqual(r, ['cohering'])

    _, r = self.anagrams2.get_anagrams("cohesion")
    self.assertEqual(r, ['cohesion'])

    _, r = self.anagrams2.get_anagrams("cohesive")
    self.assertEqual(r, ['cohesive'])

    _, r = self.anagrams2.get_anagrams("cohesively")
    self.assertEqual(r, ['cohesively'])

    _, r = self.anagrams2.get_anagrams("cohesiveness")
    self.assertEqual(r, ['cohesiveness'])

    _, r = self.anagrams2.get_anagrams("cohn")
    self.assertEqual(r, ['cohn'])

    _, r = self.anagrams2.get_anagrams("cohort")
    self.assertEqual(r, ['cohort'])

    _, r = self.anagrams2.get_anagrams("coil")
    self.assertEqual(r, ['clio', 'coil', 'loci'])

    _, r = self.anagrams2.get_anagrams("coiled")
    self.assertEqual(r, ['coiled', 'docile'])

    _, r = self.anagrams2.get_anagrams("coiling")
    self.assertEqual(r, ['coiling'])

    _, r = self.anagrams2.get_anagrams("coils")
    self.assertEqual(r, ['coils'])

    _, r = self.anagrams2.get_anagrams("coin")
    self.assertEqual(r, ['coin', 'icon'])

    _, r = self.anagrams2.get_anagrams("coinage")
    self.assertEqual(r, ['coinage'])

    _, r = self.anagrams2.get_anagrams("coincide")
    self.assertEqual(r, ['coincide'])

    _, r = self.anagrams2.get_anagrams("coincided")
    self.assertEqual(r, ['coincided'])

    _, r = self.anagrams2.get_anagrams("coincidence")
    self.assertEqual(r, ['coincidence'])

    _, r = self.anagrams2.get_anagrams("coincidences")
    self.assertEqual(r, ['coincidences'])

    _, r = self.anagrams2.get_anagrams("coincident")
    self.assertEqual(r, ['coincident'])

    _, r = self.anagrams2.get_anagrams("coincidental")
    self.assertEqual(r, ['coincidental'])

    _, r = self.anagrams2.get_anagrams("coincides")
    self.assertEqual(r, ['coincides'])

    _, r = self.anagrams2.get_anagrams("coinciding")
    self.assertEqual(r, ['coinciding'])

    _, r = self.anagrams2.get_anagrams("coined")
    self.assertEqual(r, ['coined'])

    _, r = self.anagrams2.get_anagrams("coiner")
    self.assertEqual(r, ['coiner', 'enrico'])

    _, r = self.anagrams2.get_anagrams("coining")
    self.assertEqual(r, ['coining'])

    _, r = self.anagrams2.get_anagrams("coins")
    self.assertEqual(r, ['coins', 'icons', 'sonic'])

    _, r = self.anagrams2.get_anagrams("coke")
    self.assertEqual(r, ['coke'])

    _, r = self.anagrams2.get_anagrams("cokes")
    self.assertEqual(r, ['cokes'])

    _, r = self.anagrams2.get_anagrams("colander")
    self.assertEqual(r, ['colander'])

    _, r = self.anagrams2.get_anagrams("colby")
    self.assertEqual(r, ['colby'])

    _, r = self.anagrams2.get_anagrams("cold")
    self.assertEqual(r, ['clod', 'cold'])

    _, r = self.anagrams2.get_anagrams("colder")
    self.assertEqual(r, ['colder'])

    _, r = self.anagrams2.get_anagrams("coldest")
    self.assertEqual(r, ['coldest'])

    _, r = self.anagrams2.get_anagrams("coldly")
    self.assertEqual(r, ['coldly'])

    _, r = self.anagrams2.get_anagrams("coldness")
    self.assertEqual(r, ['coldness'])

    _, r = self.anagrams2.get_anagrams("colds")
    self.assertEqual(r, ['clods', 'colds', 'scold'])

    _, r = self.anagrams2.get_anagrams("cole")
    self.assertEqual(r, ['cole'])

    _, r = self.anagrams2.get_anagrams("coleman")
    self.assertEqual(r, ['coleman'])

    _, r = self.anagrams2.get_anagrams("coleridge")
    self.assertEqual(r, ['coleridge'])

    _, r = self.anagrams2.get_anagrams("colette")
    self.assertEqual(r, ['colette'])

    _, r = self.anagrams2.get_anagrams("colgate")
    self.assertEqual(r, ['colgate'])

    _, r = self.anagrams2.get_anagrams("colicky")
    self.assertEqual(r, ['colicky'])

    _, r = self.anagrams2.get_anagrams("coliform")
    self.assertEqual(r, ['coliform'])

    _, r = self.anagrams2.get_anagrams("coliseum")
    self.assertEqual(r, ['coliseum'])

    _, r = self.anagrams2.get_anagrams("collaborate")
    self.assertEqual(r, ['collaborate'])

    _, r = self.anagrams2.get_anagrams("collaborated")
    self.assertEqual(r, ['collaborated'])

    _, r = self.anagrams2.get_anagrams("collaborates")
    self.assertEqual(r, ['collaborates'])

    _, r = self.anagrams2.get_anagrams("collaborating")
    self.assertEqual(r, ['collaborating'])

    _, r = self.anagrams2.get_anagrams("collaboration")
    self.assertEqual(r, ['collaboration'])

    _, r = self.anagrams2.get_anagrams("collaborations")
    self.assertEqual(r, ['collaborations'])

    _, r = self.anagrams2.get_anagrams("collaborative")
    self.assertEqual(r, ['collaborative'])

    _, r = self.anagrams2.get_anagrams("collaborator")
    self.assertEqual(r, ['collaborator'])

    _, r = self.anagrams2.get_anagrams("collaborators")
    self.assertEqual(r, ['collaborators'])

    _, r = self.anagrams2.get_anagrams("collagen")
    self.assertEqual(r, ['collagen'])

    _, r = self.anagrams2.get_anagrams("collapse")
    self.assertEqual(r, ['collapse'])

    _, r = self.anagrams2.get_anagrams("collapsed")
    self.assertEqual(r, ['collapsed', 'scalloped'])

    _, r = self.anagrams2.get_anagrams("collapses")
    self.assertEqual(r, ['collapses'])

    _, r = self.anagrams2.get_anagrams("collapsible")
    self.assertEqual(r, ['collapsible'])

    _, r = self.anagrams2.get_anagrams("collapsing")
    self.assertEqual(r, ['collapsing'])

    _, r = self.anagrams2.get_anagrams("collar")
    self.assertEqual(r, ['collar'])

    _, r = self.anagrams2.get_anagrams("collarbone")
    self.assertEqual(r, ['collarbone'])

    _, r = self.anagrams2.get_anagrams("collared")
    self.assertEqual(r, ['collared'])

    _, r = self.anagrams2.get_anagrams("collaring")
    self.assertEqual(r, ['collaring'])

    _, r = self.anagrams2.get_anagrams("collars")
    self.assertEqual(r, ['collars'])

    _, r = self.anagrams2.get_anagrams("collate")
    self.assertEqual(r, ['collate'])

    _, r = self.anagrams2.get_anagrams("collateral")
    self.assertEqual(r, ['collateral'])

    _, r = self.anagrams2.get_anagrams("colleague")
    self.assertEqual(r, ['colleague'])

    _, r = self.anagrams2.get_anagrams("colleagues")
    self.assertEqual(r, ['colleagues'])

    _, r = self.anagrams2.get_anagrams("collect")
    self.assertEqual(r, ['collect'])

    _, r = self.anagrams2.get_anagrams("collected")
    self.assertEqual(r, ['collected'])

    _, r = self.anagrams2.get_anagrams("collectible")
    self.assertEqual(r, ['collectible'])

    _, r = self.anagrams2.get_anagrams("collecting")
    self.assertEqual(r, ['collecting'])

    _, r = self.anagrams2.get_anagrams("collection")
    self.assertEqual(r, ['collection'])

    _, r = self.anagrams2.get_anagrams("collections")
    self.assertEqual(r, ['collections'])

    _, r = self.anagrams2.get_anagrams("collective")
    self.assertEqual(r, ['collective'])

    _, r = self.anagrams2.get_anagrams("collectively")
    self.assertEqual(r, ['collectively'])

    _, r = self.anagrams2.get_anagrams("collectives")
    self.assertEqual(r, ['collectives'])

    _, r = self.anagrams2.get_anagrams("collector")
    self.assertEqual(r, ['collector'])

    _, r = self.anagrams2.get_anagrams("collectors")
    self.assertEqual(r, ['collectors'])

    _, r = self.anagrams2.get_anagrams("collects")
    self.assertEqual(r, ['collects'])

    _, r = self.anagrams2.get_anagrams("college")
    self.assertEqual(r, ['college'])

    _, r = self.anagrams2.get_anagrams("colleges")
    self.assertEqual(r, ['colleges'])

    _, r = self.anagrams2.get_anagrams("collegian")
    self.assertEqual(r, ['collegian'])

    _, r = self.anagrams2.get_anagrams("collegiate")
    self.assertEqual(r, ['collegiate'])

    _, r = self.anagrams2.get_anagrams("collide")
    self.assertEqual(r, ['collide'])

    _, r = self.anagrams2.get_anagrams("collided")
    self.assertEqual(r, ['collided'])

    _, r = self.anagrams2.get_anagrams("collides")
    self.assertEqual(r, ['collides'])

    _, r = self.anagrams2.get_anagrams("colliding")
    self.assertEqual(r, ['colliding'])

    _, r = self.anagrams2.get_anagrams("collie")
    self.assertEqual(r, ['collie'])

    _, r = self.anagrams2.get_anagrams("collier")
    self.assertEqual(r, ['collier'])

    _, r = self.anagrams2.get_anagrams("collies")
    self.assertEqual(r, ['collies'])

    _, r = self.anagrams2.get_anagrams("collins")
    self.assertEqual(r, ['collins'])

    _, r = self.anagrams2.get_anagrams("collision")
    self.assertEqual(r, ['collision'])

    _, r = self.anagrams2.get_anagrams("collisions")
    self.assertEqual(r, ['collisions'])

    _, r = self.anagrams2.get_anagrams("colloidal")
    self.assertEqual(r, ['colloidal'])

    _, r = self.anagrams2.get_anagrams("colloquia")
    self.assertEqual(r, ['colloquia'])

    _, r = self.anagrams2.get_anagrams("colloquial")
    self.assertEqual(r, ['colloquial'])

    _, r = self.anagrams2.get_anagrams("colloquium")
    self.assertEqual(r, ['colloquium'])

    _, r = self.anagrams2.get_anagrams("colloquy")
    self.assertEqual(r, ['colloquy'])

    _, r = self.anagrams2.get_anagrams("collusion")
    self.assertEqual(r, ['collusion'])

    _, r = self.anagrams2.get_anagrams("cologne")
    self.assertEqual(r, ['cologne'])

    _, r = self.anagrams2.get_anagrams("colombia")
    self.assertEqual(r, ['colombia'])

    _, r = self.anagrams2.get_anagrams("colombian")
    self.assertEqual(r, ['colombian'])

    _, r = self.anagrams2.get_anagrams("colombians")
    self.assertEqual(r, ['colombians'])

    _, r = self.anagrams2.get_anagrams("colombo")
    self.assertEqual(r, ['colombo'])

    _, r = self.anagrams2.get_anagrams("colon")
    self.assertEqual(r, ['colon'])

    _, r = self.anagrams2.get_anagrams("colonel")
    self.assertEqual(r, ['colonel'])

    _, r = self.anagrams2.get_anagrams("colonels")
    self.assertEqual(r, ['colonels'])

    _, r = self.anagrams2.get_anagrams("colonial")
    self.assertEqual(r, ['colonial'])

    _, r = self.anagrams2.get_anagrams("colonially")
    self.assertEqual(r, ['colonially'])

    _, r = self.anagrams2.get_anagrams("colonials")
    self.assertEqual(r, ['colonials'])

    _, r = self.anagrams2.get_anagrams("colonies")
    self.assertEqual(r, ['colonies'])

    _, r = self.anagrams2.get_anagrams("colonist")
    self.assertEqual(r, ['colonist'])

    _, r = self.anagrams2.get_anagrams("colonists")
    self.assertEqual(r, ['colonists'])

    _, r = self.anagrams2.get_anagrams("colonization")
    self.assertEqual(r, ['colonization'])

    _, r = self.anagrams2.get_anagrams("colonize")
    self.assertEqual(r, ['colonize'])

    _, r = self.anagrams2.get_anagrams("colonized")
    self.assertEqual(r, ['colonized'])

    _, r = self.anagrams2.get_anagrams("colonizer")
    self.assertEqual(r, ['colonizer'])

    _, r = self.anagrams2.get_anagrams("colonizers")
    self.assertEqual(r, ['colonizers'])

    _, r = self.anagrams2.get_anagrams("colonizes")
    self.assertEqual(r, ['colonizes'])

    _, r = self.anagrams2.get_anagrams("colonizing")
    self.assertEqual(r, ['colonizing'])

    _, r = self.anagrams2.get_anagrams("colons")
    self.assertEqual(r, ['colons'])

    _, r = self.anagrams2.get_anagrams("colony")
    self.assertEqual(r, ['colony'])

    _, r = self.anagrams2.get_anagrams("color")
    self.assertEqual(r, ['color'])

    _, r = self.anagrams2.get_anagrams("colorado")
    self.assertEqual(r, ['colorado'])

    _, r = self.anagrams2.get_anagrams("colored")
    self.assertEqual(r, ['colored'])

    _, r = self.anagrams2.get_anagrams("colorer")
    self.assertEqual(r, ['colorer'])

    _, r = self.anagrams2.get_anagrams("colorers")
    self.assertEqual(r, ['colorers'])

    _, r = self.anagrams2.get_anagrams("colorful")
    self.assertEqual(r, ['colorful'])

    _, r = self.anagrams2.get_anagrams("coloring")
    self.assertEqual(r, ['coloring'])

    _, r = self.anagrams2.get_anagrams("colorings")
    self.assertEqual(r, ['colorings'])

    _, r = self.anagrams2.get_anagrams("colorless")
    self.assertEqual(r, ['colorless'])

    _, r = self.anagrams2.get_anagrams("colors")
    self.assertEqual(r, ['colors'])

    _, r = self.anagrams2.get_anagrams("colossal")
    self.assertEqual(r, ['colossal'])

    _, r = self.anagrams2.get_anagrams("colosseum")
    self.assertEqual(r, ['colosseum'])

    _, r = self.anagrams2.get_anagrams("colt")
    self.assertEqual(r, ['clot', 'colt'])

    _, r = self.anagrams2.get_anagrams("colts")
    self.assertEqual(r, ['colts'])

    _, r = self.anagrams2.get_anagrams("columbia")
    self.assertEqual(r, ['columbia'])

    _, r = self.anagrams2.get_anagrams("columbian")
    self.assertEqual(r, ['columbian'])

    _, r = self.anagrams2.get_anagrams("columbus")
    self.assertEqual(r, ['columbus'])

    _, r = self.anagrams2.get_anagrams("column")
    self.assertEqual(r, ['column'])

    _, r = self.anagrams2.get_anagrams("columnize")
    self.assertEqual(r, ['columnize'])

    _, r = self.anagrams2.get_anagrams("columnized")
    self.assertEqual(r, ['columnized'])

    _, r = self.anagrams2.get_anagrams("columnizes")
    self.assertEqual(r, ['columnizes'])

    _, r = self.anagrams2.get_anagrams("columnizing")
    self.assertEqual(r, ['columnizing'])

    _, r = self.anagrams2.get_anagrams("columns")
    self.assertEqual(r, ['columns'])

    _, r = self.anagrams2.get_anagrams("comanche")
    self.assertEqual(r, ['coachmen', 'comanche'])

    _, r = self.anagrams2.get_anagrams("comb")
    self.assertEqual(r, ['comb'])

    _, r = self.anagrams2.get_anagrams("combat")
    self.assertEqual(r, ['combat'])

    _, r = self.anagrams2.get_anagrams("combatant")
    self.assertEqual(r, ['combatant'])

    _, r = self.anagrams2.get_anagrams("combatants")
    self.assertEqual(r, ['combatants'])

    _, r = self.anagrams2.get_anagrams("combated")
    self.assertEqual(r, ['combated'])

    _, r = self.anagrams2.get_anagrams("combating")
    self.assertEqual(r, ['combating'])

    _, r = self.anagrams2.get_anagrams("combative")
    self.assertEqual(r, ['combative'])

    _, r = self.anagrams2.get_anagrams("combats")
    self.assertEqual(r, ['combats'])

    _, r = self.anagrams2.get_anagrams("combed")
    self.assertEqual(r, ['combed'])

    _, r = self.anagrams2.get_anagrams("comber")
    self.assertEqual(r, ['comber'])

    _, r = self.anagrams2.get_anagrams("combers")
    self.assertEqual(r, ['combers'])

    _, r = self.anagrams2.get_anagrams("combination")
    self.assertEqual(r, ['combination'])

    _, r = self.anagrams2.get_anagrams("combinational")
    self.assertEqual(r, ['combinational'])

    _, r = self.anagrams2.get_anagrams("combinations")
    self.assertEqual(r, ['combinations'])

    _, r = self.anagrams2.get_anagrams("combinator")
    self.assertEqual(r, ['combinator'])

    _, r = self.anagrams2.get_anagrams("combinatorial")
    self.assertEqual(r, ['combinatorial'])

    _, r = self.anagrams2.get_anagrams("combinatorially")
    self.assertEqual(r, ['combinatorially'])

    _, r = self.anagrams2.get_anagrams("combinatoric")
    self.assertEqual(r, ['combinatoric'])

    _, r = self.anagrams2.get_anagrams("combinatorics")
    self.assertEqual(r, ['combinatorics'])

    _, r = self.anagrams2.get_anagrams("combinators")
    self.assertEqual(r, ['combinators'])

    _, r = self.anagrams2.get_anagrams("combine")
    self.assertEqual(r, ['combine'])

    _, r = self.anagrams2.get_anagrams("combined")
    self.assertEqual(r, ['combined'])

    _, r = self.anagrams2.get_anagrams("combines")
    self.assertEqual(r, ['combines'])

    _, r = self.anagrams2.get_anagrams("combing")
    self.assertEqual(r, ['combing'])

    _, r = self.anagrams2.get_anagrams("combings")
    self.assertEqual(r, ['combings'])

    _, r = self.anagrams2.get_anagrams("combining")
    self.assertEqual(r, ['combining'])

    _, r = self.anagrams2.get_anagrams("combs")
    self.assertEqual(r, ['combs'])

    _, r = self.anagrams2.get_anagrams("combustible")
    self.assertEqual(r, ['combustible'])

    _, r = self.anagrams2.get_anagrams("combustion")
    self.assertEqual(r, ['combustion'])

    _, r = self.anagrams2.get_anagrams("comdex")
    self.assertEqual(r, ['comdex'])

    _, r = self.anagrams2.get_anagrams("come")
    self.assertEqual(r, ['come'])

    _, r = self.anagrams2.get_anagrams("comeback")
    self.assertEqual(r, ['comeback'])

    _, r = self.anagrams2.get_anagrams("comedian")
    self.assertEqual(r, ['comedian', 'demoniac'])

    _, r = self.anagrams2.get_anagrams("comedians")
    self.assertEqual(r, ['comedians'])

    _, r = self.anagrams2.get_anagrams("comedic")
    self.assertEqual(r, ['comedic'])

    _, r = self.anagrams2.get_anagrams("comedies")
    self.assertEqual(r, ['comedies'])

    _, r = self.anagrams2.get_anagrams("comedy")
    self.assertEqual(r, ['comedy'])

    _, r = self.anagrams2.get_anagrams("comeliness")
    self.assertEqual(r, ['comeliness'])

    _, r = self.anagrams2.get_anagrams("comely")
    self.assertEqual(r, ['comely'])

    _, r = self.anagrams2.get_anagrams("comer")
    self.assertEqual(r, ['comer'])

    _, r = self.anagrams2.get_anagrams("comers")
    self.assertEqual(r, ['comers'])

    _, r = self.anagrams2.get_anagrams("comes")
    self.assertEqual(r, ['comes'])

    _, r = self.anagrams2.get_anagrams("comestible")
    self.assertEqual(r, ['comestible'])

    _, r = self.anagrams2.get_anagrams("comet")
    self.assertEqual(r, ['comet'])

    _, r = self.anagrams2.get_anagrams("cometary")
    self.assertEqual(r, ['cometary'])

    _, r = self.anagrams2.get_anagrams("comets")
    self.assertEqual(r, ['comets'])

    _, r = self.anagrams2.get_anagrams("comfort")
    self.assertEqual(r, ['comfort'])

    _, r = self.anagrams2.get_anagrams("comfortabilities")
    self.assertEqual(r, ['comfortabilities'])

    _, r = self.anagrams2.get_anagrams("comfortability")
    self.assertEqual(r, ['comfortability'])

    _, r = self.anagrams2.get_anagrams("comfortable")
    self.assertEqual(r, ['comfortable'])

    _, r = self.anagrams2.get_anagrams("comfortably")
    self.assertEqual(r, ['comfortably'])

    _, r = self.anagrams2.get_anagrams("comforted")
    self.assertEqual(r, ['comforted'])

    _, r = self.anagrams2.get_anagrams("comforter")
    self.assertEqual(r, ['comforter'])

    _, r = self.anagrams2.get_anagrams("comforters")
    self.assertEqual(r, ['comforters'])

    _, r = self.anagrams2.get_anagrams("comforting")
    self.assertEqual(r, ['comforting'])

    _, r = self.anagrams2.get_anagrams("comfortingly")
    self.assertEqual(r, ['comfortingly'])

    _, r = self.anagrams2.get_anagrams("comforts")
    self.assertEqual(r, ['comforts'])

    _, r = self.anagrams2.get_anagrams("comic")
    self.assertEqual(r, ['comic'])

    _, r = self.anagrams2.get_anagrams("comical")
    self.assertEqual(r, ['comical'])

    _, r = self.anagrams2.get_anagrams("comically")
    self.assertEqual(r, ['comically'])

    _, r = self.anagrams2.get_anagrams("comics")
    self.assertEqual(r, ['comics', 'cosmic'])

    _, r = self.anagrams2.get_anagrams("cominform")
    self.assertEqual(r, ['cominform'])

    _, r = self.anagrams2.get_anagrams("coming")
    self.assertEqual(r, ['coming'])

    _, r = self.anagrams2.get_anagrams("comings")
    self.assertEqual(r, ['comings'])

    _, r = self.anagrams2.get_anagrams("comma")
    self.assertEqual(r, ['comma'])

    _, r = self.anagrams2.get_anagrams("command")
    self.assertEqual(r, ['command'])

    _, r = self.anagrams2.get_anagrams("commandant")
    self.assertEqual(r, ['commandant'])

    _, r = self.anagrams2.get_anagrams("commandants")
    self.assertEqual(r, ['commandants'])

    _, r = self.anagrams2.get_anagrams("commanded")
    self.assertEqual(r, ['commanded'])

    _, r = self.anagrams2.get_anagrams("commandeer")
    self.assertEqual(r, ['commandeer'])

    _, r = self.anagrams2.get_anagrams("commander")
    self.assertEqual(r, ['commander'])

    _, r = self.anagrams2.get_anagrams("commanders")
    self.assertEqual(r, ['commanders'])

    _, r = self.anagrams2.get_anagrams("commanding")
    self.assertEqual(r, ['commanding'])

    _, r = self.anagrams2.get_anagrams("commandingly")
    self.assertEqual(r, ['commandingly'])

    _, r = self.anagrams2.get_anagrams("commandment")
    self.assertEqual(r, ['commandment'])

    _, r = self.anagrams2.get_anagrams("commandments")
    self.assertEqual(r, ['commandments'])

    _, r = self.anagrams2.get_anagrams("commando")
    self.assertEqual(r, ['commando'])

    _, r = self.anagrams2.get_anagrams("commands")
    self.assertEqual(r, ['commands'])

    _, r = self.anagrams2.get_anagrams("commas")
    self.assertEqual(r, ['commas'])

    _, r = self.anagrams2.get_anagrams("commemorate")
    self.assertEqual(r, ['commemorate'])

    _, r = self.anagrams2.get_anagrams("commemorated")
    self.assertEqual(r, ['commemorated'])

    _, r = self.anagrams2.get_anagrams("commemorates")
    self.assertEqual(r, ['commemorates'])

    _, r = self.anagrams2.get_anagrams("commemorating")
    self.assertEqual(r, ['commemorating'])

    _, r = self.anagrams2.get_anagrams("commemoration")
    self.assertEqual(r, ['commemoration'])

    _, r = self.anagrams2.get_anagrams("commemorative")
    self.assertEqual(r, ['commemorative'])

    _, r = self.anagrams2.get_anagrams("commence")
    self.assertEqual(r, ['commence'])

    _, r = self.anagrams2.get_anagrams("commenced")
    self.assertEqual(r, ['commenced'])

    _, r = self.anagrams2.get_anagrams("commencement")
    self.assertEqual(r, ['commencement'])

    _, r = self.anagrams2.get_anagrams("commencements")
    self.assertEqual(r, ['commencements'])

    _, r = self.anagrams2.get_anagrams("commences")
    self.assertEqual(r, ['commences'])

    _, r = self.anagrams2.get_anagrams("commencing")
    self.assertEqual(r, ['commencing'])

    _, r = self.anagrams2.get_anagrams("commend")
    self.assertEqual(r, ['commend'])

    _, r = self.anagrams2.get_anagrams("commendation")
    self.assertEqual(r, ['commendation'])

    _, r = self.anagrams2.get_anagrams("commendations")
    self.assertEqual(r, ['commendations'])

    _, r = self.anagrams2.get_anagrams("commended")
    self.assertEqual(r, ['commended'])

    _, r = self.anagrams2.get_anagrams("commending")
    self.assertEqual(r, ['commending'])

    _, r = self.anagrams2.get_anagrams("commends")
    self.assertEqual(r, ['commends'])

    _, r = self.anagrams2.get_anagrams("commensurate")
    self.assertEqual(r, ['commensurate'])

    _, r = self.anagrams2.get_anagrams("comment")
    self.assertEqual(r, ['comment'])

    _, r = self.anagrams2.get_anagrams("commentaries")
    self.assertEqual(r, ['commentaries'])

    _, r = self.anagrams2.get_anagrams("commentary")
    self.assertEqual(r, ['commentary'])

    _, r = self.anagrams2.get_anagrams("commentator")
    self.assertEqual(r, ['commentator'])

    _, r = self.anagrams2.get_anagrams("commentators")
    self.assertEqual(r, ['commentators'])

    _, r = self.anagrams2.get_anagrams("commented")
    self.assertEqual(r, ['commented'])

    _, r = self.anagrams2.get_anagrams("commenting")
    self.assertEqual(r, ['commenting'])

    _, r = self.anagrams2.get_anagrams("comments")
    self.assertEqual(r, ['comments'])

    _, r = self.anagrams2.get_anagrams("commerce")
    self.assertEqual(r, ['commerce'])

    _, r = self.anagrams2.get_anagrams("commercial")
    self.assertEqual(r, ['commercial'])

    _, r = self.anagrams2.get_anagrams("commercially")
    self.assertEqual(r, ['commercially'])

    _, r = self.anagrams2.get_anagrams("commercialness")
    self.assertEqual(r, ['commercialness'])

    _, r = self.anagrams2.get_anagrams("commercials")
    self.assertEqual(r, ['commercials'])

    _, r = self.anagrams2.get_anagrams("commission")
    self.assertEqual(r, ['commission'])

    _, r = self.anagrams2.get_anagrams("commissioned")
    self.assertEqual(r, ['commissioned'])

    _, r = self.anagrams2.get_anagrams("commissioner")
    self.assertEqual(r, ['commissioner'])

    _, r = self.anagrams2.get_anagrams("commissioners")
    self.assertEqual(r, ['commissioners'])

    _, r = self.anagrams2.get_anagrams("commissioning")
    self.assertEqual(r, ['commissioning'])

    _, r = self.anagrams2.get_anagrams("commissions")
    self.assertEqual(r, ['commissions'])

    _, r = self.anagrams2.get_anagrams("commit")
    self.assertEqual(r, ['commit'])

    _, r = self.anagrams2.get_anagrams("commitment")
    self.assertEqual(r, ['commitment'])

    _, r = self.anagrams2.get_anagrams("commitments")
    self.assertEqual(r, ['commitments'])

    _, r = self.anagrams2.get_anagrams("commits")
    self.assertEqual(r, ['commits'])

    _, r = self.anagrams2.get_anagrams("committed")
    self.assertEqual(r, ['committed'])

    _, r = self.anagrams2.get_anagrams("committee")
    self.assertEqual(r, ['committee'])

    _, r = self.anagrams2.get_anagrams("committeeman")
    self.assertEqual(r, ['committeeman'])

    _, r = self.anagrams2.get_anagrams("committeemen")
    self.assertEqual(r, ['committeemen'])

    _, r = self.anagrams2.get_anagrams("committees")
    self.assertEqual(r, ['committees'])

    _, r = self.anagrams2.get_anagrams("committeewoman")
    self.assertEqual(r, ['committeewoman'])

    _, r = self.anagrams2.get_anagrams("committeewomen")
    self.assertEqual(r, ['committeewomen'])

    _, r = self.anagrams2.get_anagrams("committing")
    self.assertEqual(r, ['committing'])

    _, r = self.anagrams2.get_anagrams("commodities")
    self.assertEqual(r, ['commodities'])

    _, r = self.anagrams2.get_anagrams("commodity")
    self.assertEqual(r, ['commodity'])

    _, r = self.anagrams2.get_anagrams("commodore")
    self.assertEqual(r, ['commodore'])

    _, r = self.anagrams2.get_anagrams("commodores")
    self.assertEqual(r, ['commodores'])

    _, r = self.anagrams2.get_anagrams("common")
    self.assertEqual(r, ['common'])

    _, r = self.anagrams2.get_anagrams("commonalities")
    self.assertEqual(r, ['commonalities'])

    _, r = self.anagrams2.get_anagrams("commonality")
    self.assertEqual(r, ['commonality'])

    _, r = self.anagrams2.get_anagrams("commoner")
    self.assertEqual(r, ['commoner'])

    _, r = self.anagrams2.get_anagrams("commoners")
    self.assertEqual(r, ['commoners'])

    _, r = self.anagrams2.get_anagrams("commonest")
    self.assertEqual(r, ['commonest'])

    _, r = self.anagrams2.get_anagrams("commonly")
    self.assertEqual(r, ['commonly'])

    _, r = self.anagrams2.get_anagrams("commonness")
    self.assertEqual(r, ['commonness'])

    _, r = self.anagrams2.get_anagrams("commonplace")
    self.assertEqual(r, ['commonplace'])

    _, r = self.anagrams2.get_anagrams("commonplaces")
    self.assertEqual(r, ['commonplaces'])

    _, r = self.anagrams2.get_anagrams("commons")
    self.assertEqual(r, ['commons'])

    _, r = self.anagrams2.get_anagrams("commonwealth")
    self.assertEqual(r, ['commonwealth'])

    _, r = self.anagrams2.get_anagrams("commonwealths")
    self.assertEqual(r, ['commonwealths'])

    _, r = self.anagrams2.get_anagrams("commotion")
    self.assertEqual(r, ['commotion'])

    _, r = self.anagrams2.get_anagrams("communal")
    self.assertEqual(r, ['communal'])

    _, r = self.anagrams2.get_anagrams("communally")
    self.assertEqual(r, ['communally'])

    _, r = self.anagrams2.get_anagrams("commune")
    self.assertEqual(r, ['commune'])

    _, r = self.anagrams2.get_anagrams("communes")
    self.assertEqual(r, ['communes'])

    _, r = self.anagrams2.get_anagrams("communicant")
    self.assertEqual(r, ['communicant'])

    _, r = self.anagrams2.get_anagrams("communicants")
    self.assertEqual(r, ['communicants'])

    _, r = self.anagrams2.get_anagrams("communicate")
    self.assertEqual(r, ['communicate'])

    _, r = self.anagrams2.get_anagrams("communicated")
    self.assertEqual(r, ['communicated'])

    _, r = self.anagrams2.get_anagrams("communicates")
    self.assertEqual(r, ['communicates'])

    _, r = self.anagrams2.get_anagrams("communicating")
    self.assertEqual(r, ['communicating'])

    _, r = self.anagrams2.get_anagrams("communication")
    self.assertEqual(r, ['communication'])

    _, r = self.anagrams2.get_anagrams("communications")
    self.assertEqual(r, ['communications'])

    _, r = self.anagrams2.get_anagrams("communicative")
    self.assertEqual(r, ['communicative'])

    _, r = self.anagrams2.get_anagrams("communicator")
    self.assertEqual(r, ['communicator'])

    _, r = self.anagrams2.get_anagrams("communicators")
    self.assertEqual(r, ['communicators'])

    _, r = self.anagrams2.get_anagrams("communion")
    self.assertEqual(r, ['communion'])

    _, r = self.anagrams2.get_anagrams("communist")
    self.assertEqual(r, ['communist'])

    _, r = self.anagrams2.get_anagrams("communists")
    self.assertEqual(r, ['communists'])

    _, r = self.anagrams2.get_anagrams("communities")
    self.assertEqual(r, ['communities'])

    _, r = self.anagrams2.get_anagrams("community")
    self.assertEqual(r, ['community'])

    _, r = self.anagrams2.get_anagrams("commutative")
    self.assertEqual(r, ['commutative'])

    _, r = self.anagrams2.get_anagrams("commutativity")
    self.assertEqual(r, ['commutativity'])

    _, r = self.anagrams2.get_anagrams("commute")
    self.assertEqual(r, ['commute'])

    _, r = self.anagrams2.get_anagrams("commuted")
    self.assertEqual(r, ['commuted'])

    _, r = self.anagrams2.get_anagrams("commuter")
    self.assertEqual(r, ['commuter'])

    _, r = self.anagrams2.get_anagrams("commuters")
    self.assertEqual(r, ['commuters'])

    _, r = self.anagrams2.get_anagrams("commutes")
    self.assertEqual(r, ['commutes'])

    _, r = self.anagrams2.get_anagrams("commuting")
    self.assertEqual(r, ['commuting'])

    _, r = self.anagrams2.get_anagrams("compact")
    self.assertEqual(r, ['compact'])

    _, r = self.anagrams2.get_anagrams("compacted")
    self.assertEqual(r, ['compacted'])

    _, r = self.anagrams2.get_anagrams("compacter")
    self.assertEqual(r, ['compacter'])

    _, r = self.anagrams2.get_anagrams("compactest")
    self.assertEqual(r, ['compactest'])

    _, r = self.anagrams2.get_anagrams("compacting")
    self.assertEqual(r, ['compacting'])

    _, r = self.anagrams2.get_anagrams("compaction")
    self.assertEqual(r, ['compaction'])

    _, r = self.anagrams2.get_anagrams("compactly")
    self.assertEqual(r, ['compactly'])

    _, r = self.anagrams2.get_anagrams("compactness")
    self.assertEqual(r, ['compactness'])

    _, r = self.anagrams2.get_anagrams("compactor")
    self.assertEqual(r, ['compactor'])

    _, r = self.anagrams2.get_anagrams("compactors")
    self.assertEqual(r, ['compactors'])

    _, r = self.anagrams2.get_anagrams("compacts")
    self.assertEqual(r, ['compacts'])

    _, r = self.anagrams2.get_anagrams("companies")
    self.assertEqual(r, ['companies'])

    _, r = self.anagrams2.get_anagrams("companion")
    self.assertEqual(r, ['companion'])

    _, r = self.anagrams2.get_anagrams("companionable")
    self.assertEqual(r, ['companionable'])

    _, r = self.anagrams2.get_anagrams("companions")
    self.assertEqual(r, ['companions'])

    _, r = self.anagrams2.get_anagrams("companionship")
    self.assertEqual(r, ['companionship'])

    _, r = self.anagrams2.get_anagrams("company")
    self.assertEqual(r, ['company'])

    _, r = self.anagrams2.get_anagrams("comparability")
    self.assertEqual(r, ['comparability'])

    _, r = self.anagrams2.get_anagrams("comparable")
    self.assertEqual(r, ['comparable'])

    _, r = self.anagrams2.get_anagrams("comparably")
    self.assertEqual(r, ['comparably'])

    _, r = self.anagrams2.get_anagrams("comparative")
    self.assertEqual(r, ['comparative'])

    _, r = self.anagrams2.get_anagrams("comparatively")
    self.assertEqual(r, ['comparatively'])

    _, r = self.anagrams2.get_anagrams("comparatives")
    self.assertEqual(r, ['comparatives'])

    _, r = self.anagrams2.get_anagrams("comparator")
    self.assertEqual(r, ['comparator'])

    _, r = self.anagrams2.get_anagrams("comparators")
    self.assertEqual(r, ['comparators'])

    _, r = self.anagrams2.get_anagrams("compare")
    self.assertEqual(r, ['compare'])

    _, r = self.anagrams2.get_anagrams("compared")
    self.assertEqual(r, ['compared'])

    _, r = self.anagrams2.get_anagrams("compares")
    self.assertEqual(r, ['compares'])

    _, r = self.anagrams2.get_anagrams("comparing")
    self.assertEqual(r, ['comparing'])

    _, r = self.anagrams2.get_anagrams("comparison")
    self.assertEqual(r, ['comparison'])

    _, r = self.anagrams2.get_anagrams("comparisons")
    self.assertEqual(r, ['comparisons'])

    _, r = self.anagrams2.get_anagrams("compartment")
    self.assertEqual(r, ['compartment'])

    _, r = self.anagrams2.get_anagrams("compartmentalize")
    self.assertEqual(r, ['compartmentalize'])

    _, r = self.anagrams2.get_anagrams("compartmentalized")
    self.assertEqual(r, ['compartmentalized'])

    _, r = self.anagrams2.get_anagrams("compartmentalizes")
    self.assertEqual(r, ['compartmentalizes'])

    _, r = self.anagrams2.get_anagrams("compartmentalizing")
    self.assertEqual(r, ['compartmentalizing'])

    _, r = self.anagrams2.get_anagrams("compartmented")
    self.assertEqual(r, ['compartmented'])

    _, r = self.anagrams2.get_anagrams("compartments")
    self.assertEqual(r, ['compartments'])

    _, r = self.anagrams2.get_anagrams("compass")
    self.assertEqual(r, ['compass'])

    _, r = self.anagrams2.get_anagrams("compassion")
    self.assertEqual(r, ['compassion'])

    _, r = self.anagrams2.get_anagrams("compassionate")
    self.assertEqual(r, ['compassionate'])

    _, r = self.anagrams2.get_anagrams("compassionately")
    self.assertEqual(r, ['compassionately'])

    _, r = self.anagrams2.get_anagrams("compatibilities")
    self.assertEqual(r, ['compatibilities'])

    _, r = self.anagrams2.get_anagrams("compatibility")
    self.assertEqual(r, ['compatibility'])

    _, r = self.anagrams2.get_anagrams("compatible")
    self.assertEqual(r, ['compatible'])

    _, r = self.anagrams2.get_anagrams("compatibles")
    self.assertEqual(r, ['compatibles'])

    _, r = self.anagrams2.get_anagrams("compatibly")
    self.assertEqual(r, ['compatibly'])

    _, r = self.anagrams2.get_anagrams("compel")
    self.assertEqual(r, ['compel'])

    _, r = self.anagrams2.get_anagrams("compelled")
    self.assertEqual(r, ['compelled'])

    _, r = self.anagrams2.get_anagrams("compelling")
    self.assertEqual(r, ['compelling'])

    _, r = self.anagrams2.get_anagrams("compellingly")
    self.assertEqual(r, ['compellingly'])

    _, r = self.anagrams2.get_anagrams("compels")
    self.assertEqual(r, ['compels'])

    _, r = self.anagrams2.get_anagrams("compendium")
    self.assertEqual(r, ['compendium'])

    _, r = self.anagrams2.get_anagrams("compensate")
    self.assertEqual(r, ['compensate'])

    _, r = self.anagrams2.get_anagrams("compensated")
    self.assertEqual(r, ['compensated'])

    _, r = self.anagrams2.get_anagrams("compensates")
    self.assertEqual(r, ['compensates'])

    _, r = self.anagrams2.get_anagrams("compensating")
    self.assertEqual(r, ['compensating'])

    _, r = self.anagrams2.get_anagrams("compensation")
    self.assertEqual(r, ['compensation'])

    _, r = self.anagrams2.get_anagrams("compensations")
    self.assertEqual(r, ['compensations'])

    _, r = self.anagrams2.get_anagrams("compensatory")
    self.assertEqual(r, ['compensatory'])

    _, r = self.anagrams2.get_anagrams("compete")
    self.assertEqual(r, ['compete'])

    _, r = self.anagrams2.get_anagrams("competed")
    self.assertEqual(r, ['competed'])

    _, r = self.anagrams2.get_anagrams("competence")
    self.assertEqual(r, ['competence'])

    _, r = self.anagrams2.get_anagrams("competency")
    self.assertEqual(r, ['competency'])

    _, r = self.anagrams2.get_anagrams("competent")
    self.assertEqual(r, ['competent'])

    _, r = self.anagrams2.get_anagrams("competently")
    self.assertEqual(r, ['competently'])

    _, r = self.anagrams2.get_anagrams("competes")
    self.assertEqual(r, ['competes'])

    _, r = self.anagrams2.get_anagrams("competing")
    self.assertEqual(r, ['competing'])

    _, r = self.anagrams2.get_anagrams("competition")
    self.assertEqual(r, ['competition'])

    _, r = self.anagrams2.get_anagrams("competitions")
    self.assertEqual(r, ['competitions'])

    _, r = self.anagrams2.get_anagrams("competitive")
    self.assertEqual(r, ['competitive'])

    _, r = self.anagrams2.get_anagrams("competitively")
    self.assertEqual(r, ['competitively'])

    _, r = self.anagrams2.get_anagrams("competitor")
    self.assertEqual(r, ['competitor'])

    _, r = self.anagrams2.get_anagrams("competitors")
    self.assertEqual(r, ['competitors'])

    _, r = self.anagrams2.get_anagrams("compilation")
    self.assertEqual(r, ['compilation'])

    _, r = self.anagrams2.get_anagrams("compilations")
    self.assertEqual(r, ['compilations'])

    _, r = self.anagrams2.get_anagrams("compile")
    self.assertEqual(r, ['compile', 'polemic'])

    _, r = self.anagrams2.get_anagrams("compiled")
    self.assertEqual(r, ['compiled', 'complied'])

    _, r = self.anagrams2.get_anagrams("compiler")
    self.assertEqual(r, ['compiler'])

    _, r = self.anagrams2.get_anagrams("compilers")
    self.assertEqual(r, ['compilers'])

    _, r = self.anagrams2.get_anagrams("compiles")
    self.assertEqual(r, ['compiles', 'polemics'])

    _, r = self.anagrams2.get_anagrams("compiling")
    self.assertEqual(r, ['compiling'])

    _, r = self.anagrams2.get_anagrams("complacency")
    self.assertEqual(r, ['complacency'])

    _, r = self.anagrams2.get_anagrams("complain")
    self.assertEqual(r, ['complain'])

    _, r = self.anagrams2.get_anagrams("complained")
    self.assertEqual(r, ['complained'])

    _, r = self.anagrams2.get_anagrams("complainer")
    self.assertEqual(r, ['complainer'])

    _, r = self.anagrams2.get_anagrams("complainers")
    self.assertEqual(r, ['complainers'])

    _, r = self.anagrams2.get_anagrams("complaining")
    self.assertEqual(r, ['complaining'])

    _, r = self.anagrams2.get_anagrams("complains")
    self.assertEqual(r, ['complains'])

    _, r = self.anagrams2.get_anagrams("complaint")
    self.assertEqual(r, ['complaint', 'compliant'])

    _, r = self.anagrams2.get_anagrams("complaints")
    self.assertEqual(r, ['complaints'])

    _, r = self.anagrams2.get_anagrams("complement")
    self.assertEqual(r, ['complement'])

    _, r = self.anagrams2.get_anagrams("complementary")
    self.assertEqual(r, ['complementary'])

    _, r = self.anagrams2.get_anagrams("complemented")
    self.assertEqual(r, ['complemented'])

    _, r = self.anagrams2.get_anagrams("complementer")
    self.assertEqual(r, ['complementer'])

    _, r = self.anagrams2.get_anagrams("complementers")
    self.assertEqual(r, ['complementers'])

    _, r = self.anagrams2.get_anagrams("complementing")
    self.assertEqual(r, ['complementing'])

    _, r = self.anagrams2.get_anagrams("complements")
    self.assertEqual(r, ['complements'])

    _, r = self.anagrams2.get_anagrams("complete")
    self.assertEqual(r, ['complete'])

    _, r = self.anagrams2.get_anagrams("completed")
    self.assertEqual(r, ['completed'])

    _, r = self.anagrams2.get_anagrams("completely")
    self.assertEqual(r, ['completely'])

    _, r = self.anagrams2.get_anagrams("completeness")
    self.assertEqual(r, ['completeness'])

    _, r = self.anagrams2.get_anagrams("completes")
    self.assertEqual(r, ['completes'])

    _, r = self.anagrams2.get_anagrams("completing")
    self.assertEqual(r, ['completing'])

    _, r = self.anagrams2.get_anagrams("completion")
    self.assertEqual(r, ['completion'])

    _, r = self.anagrams2.get_anagrams("completions")
    self.assertEqual(r, ['completions'])

    _, r = self.anagrams2.get_anagrams("complex")
    self.assertEqual(r, ['complex'])

    _, r = self.anagrams2.get_anagrams("complexes")
    self.assertEqual(r, ['complexes'])

    _, r = self.anagrams2.get_anagrams("complexion")
    self.assertEqual(r, ['complexion'])

    _, r = self.anagrams2.get_anagrams("complexities")
    self.assertEqual(r, ['complexities'])

    _, r = self.anagrams2.get_anagrams("complexity")
    self.assertEqual(r, ['complexity'])

    _, r = self.anagrams2.get_anagrams("complexly")
    self.assertEqual(r, ['complexly'])

    _, r = self.anagrams2.get_anagrams("compliance")
    self.assertEqual(r, ['compliance'])

    _, r = self.anagrams2.get_anagrams("compliant")
    self.assertEqual(r, ['complaint', 'compliant'])

    _, r = self.anagrams2.get_anagrams("complicate")
    self.assertEqual(r, ['complicate'])

    _, r = self.anagrams2.get_anagrams("complicated")
    self.assertEqual(r, ['complicated'])

    _, r = self.anagrams2.get_anagrams("complicates")
    self.assertEqual(r, ['complicates'])

    _, r = self.anagrams2.get_anagrams("complicating")
    self.assertEqual(r, ['complicating'])

    _, r = self.anagrams2.get_anagrams("complication")
    self.assertEqual(r, ['complication'])

    _, r = self.anagrams2.get_anagrams("complications")
    self.assertEqual(r, ['complications'])

    _, r = self.anagrams2.get_anagrams("complicator")
    self.assertEqual(r, ['complicator'])

    _, r = self.anagrams2.get_anagrams("complicators")
    self.assertEqual(r, ['complicators'])

    _, r = self.anagrams2.get_anagrams("complicity")
    self.assertEqual(r, ['complicity'])

    _, r = self.anagrams2.get_anagrams("complied")
    self.assertEqual(r, ['compiled', 'complied'])

    _, r = self.anagrams2.get_anagrams("compliment")
    self.assertEqual(r, ['compliment'])

    _, r = self.anagrams2.get_anagrams("complimentary")
    self.assertEqual(r, ['complimentary'])

    _, r = self.anagrams2.get_anagrams("complimented")
    self.assertEqual(r, ['complimented'])

    _, r = self.anagrams2.get_anagrams("complimenter")
    self.assertEqual(r, ['complimenter'])

    _, r = self.anagrams2.get_anagrams("complimenters")
    self.assertEqual(r, ['complimenters'])

    _, r = self.anagrams2.get_anagrams("complimenting")
    self.assertEqual(r, ['complimenting'])

    _, r = self.anagrams2.get_anagrams("compliments")
    self.assertEqual(r, ['compliments'])

    _, r = self.anagrams2.get_anagrams("comply")
    self.assertEqual(r, ['comply'])

    _, r = self.anagrams2.get_anagrams("complying")
    self.assertEqual(r, ['complying'])

    _, r = self.anagrams2.get_anagrams("component")
    self.assertEqual(r, ['component'])

    _, r = self.anagrams2.get_anagrams("componentry")
    self.assertEqual(r, ['componentry'])

    _, r = self.anagrams2.get_anagrams("components")
    self.assertEqual(r, ['components'])

    _, r = self.anagrams2.get_anagrams("componentwise")
    self.assertEqual(r, ['componentwise'])

    _, r = self.anagrams2.get_anagrams("compose")
    self.assertEqual(r, ['compose'])

    _, r = self.anagrams2.get_anagrams("composed")
    self.assertEqual(r, ['composed'])

    _, r = self.anagrams2.get_anagrams("composedly")
    self.assertEqual(r, ['composedly'])

    _, r = self.anagrams2.get_anagrams("composer")
    self.assertEqual(r, ['composer'])

    _, r = self.anagrams2.get_anagrams("composers")
    self.assertEqual(r, ['composers'])

    _, r = self.anagrams2.get_anagrams("composes")
    self.assertEqual(r, ['composes'])

    _, r = self.anagrams2.get_anagrams("composing")
    self.assertEqual(r, ['composing'])

    _, r = self.anagrams2.get_anagrams("composite")
    self.assertEqual(r, ['composite'])

    _, r = self.anagrams2.get_anagrams("composites")
    self.assertEqual(r, ['composites'])

    _, r = self.anagrams2.get_anagrams("composition")
    self.assertEqual(r, ['composition'])

    _, r = self.anagrams2.get_anagrams("compositional")
    self.assertEqual(r, ['compositional'])

    _, r = self.anagrams2.get_anagrams("compositions")
    self.assertEqual(r, ['compositions'])

    _, r = self.anagrams2.get_anagrams("compost")
    self.assertEqual(r, ['compost'])

    _, r = self.anagrams2.get_anagrams("composure")
    self.assertEqual(r, ['composure'])

    _, r = self.anagrams2.get_anagrams("compound")
    self.assertEqual(r, ['compound'])

    _, r = self.anagrams2.get_anagrams("compounded")
    self.assertEqual(r, ['compounded'])

    _, r = self.anagrams2.get_anagrams("compounding")
    self.assertEqual(r, ['compounding'])

    _, r = self.anagrams2.get_anagrams("compounds")
    self.assertEqual(r, ['compounds'])

    _, r = self.anagrams2.get_anagrams("comprehend")
    self.assertEqual(r, ['comprehend'])

    _, r = self.anagrams2.get_anagrams("comprehended")
    self.assertEqual(r, ['comprehended'])

    _, r = self.anagrams2.get_anagrams("comprehending")
    self.assertEqual(r, ['comprehending'])

    _, r = self.anagrams2.get_anagrams("comprehends")
    self.assertEqual(r, ['comprehends'])

    _, r = self.anagrams2.get_anagrams("comprehensibility")
    self.assertEqual(r, ['comprehensibility'])

    _, r = self.anagrams2.get_anagrams("comprehensible")
    self.assertEqual(r, ['comprehensible'])

    _, r = self.anagrams2.get_anagrams("comprehension")
    self.assertEqual(r, ['comprehension'])

    _, r = self.anagrams2.get_anagrams("comprehensive")
    self.assertEqual(r, ['comprehensive'])

    _, r = self.anagrams2.get_anagrams("comprehensively")
    self.assertEqual(r, ['comprehensively'])

    _, r = self.anagrams2.get_anagrams("compress")
    self.assertEqual(r, ['compress'])

    _, r = self.anagrams2.get_anagrams("compressed")
    self.assertEqual(r, ['compressed', 'decompress'])

    _, r = self.anagrams2.get_anagrams("compresses")
    self.assertEqual(r, ['compresses'])

    _, r = self.anagrams2.get_anagrams("compressible")
    self.assertEqual(r, ['compressible'])

    _, r = self.anagrams2.get_anagrams("compressing")
    self.assertEqual(r, ['compressing'])

    _, r = self.anagrams2.get_anagrams("compression")
    self.assertEqual(r, ['compression'])

    _, r = self.anagrams2.get_anagrams("compressive")
    self.assertEqual(r, ['compressive'])

    _, r = self.anagrams2.get_anagrams("compressor")
    self.assertEqual(r, ['compressor'])

    _, r = self.anagrams2.get_anagrams("comprise")
    self.assertEqual(r, ['comprise'])

    _, r = self.anagrams2.get_anagrams("comprised")
    self.assertEqual(r, ['comprised'])

    _, r = self.anagrams2.get_anagrams("comprises")
    self.assertEqual(r, ['comprises'])

    _, r = self.anagrams2.get_anagrams("comprising")
    self.assertEqual(r, ['comprising'])

    _, r = self.anagrams2.get_anagrams("compromise")
    self.assertEqual(r, ['compromise'])

    _, r = self.anagrams2.get_anagrams("compromised")
    self.assertEqual(r, ['compromised'])

    _, r = self.anagrams2.get_anagrams("compromiser")
    self.assertEqual(r, ['compromiser'])

    _, r = self.anagrams2.get_anagrams("compromisers")
    self.assertEqual(r, ['compromisers'])

    _, r = self.anagrams2.get_anagrams("compromises")
    self.assertEqual(r, ['compromises'])

    _, r = self.anagrams2.get_anagrams("compromising")
    self.assertEqual(r, ['compromising'])

    _, r = self.anagrams2.get_anagrams("compromisingly")
    self.assertEqual(r, ['compromisingly'])

    _, r = self.anagrams2.get_anagrams("compton")
    self.assertEqual(r, ['compton'])

    _, r = self.anagrams2.get_anagrams("comptroller")
    self.assertEqual(r, ['comptroller'])

    _, r = self.anagrams2.get_anagrams("comptrollers")
    self.assertEqual(r, ['comptrollers'])

    _, r = self.anagrams2.get_anagrams("compulsion")
    self.assertEqual(r, ['compulsion'])

    _, r = self.anagrams2.get_anagrams("compulsions")
    self.assertEqual(r, ['compulsions'])

    _, r = self.anagrams2.get_anagrams("compulsive")
    self.assertEqual(r, ['compulsive'])

    _, r = self.anagrams2.get_anagrams("compulsory")
    self.assertEqual(r, ['compulsory'])

    _, r = self.anagrams2.get_anagrams("compunction")
    self.assertEqual(r, ['compunction'])

    _, r = self.anagrams2.get_anagrams("compuserve")
    self.assertEqual(r, ['compuserve'])

    _, r = self.anagrams2.get_anagrams("computability")
    self.assertEqual(r, ['computability'])

    _, r = self.anagrams2.get_anagrams("computable")
    self.assertEqual(r, ['computable'])

    _, r = self.anagrams2.get_anagrams("computation")
    self.assertEqual(r, ['computation'])

    _, r = self.anagrams2.get_anagrams("computational")
    self.assertEqual(r, ['computational'])

    _, r = self.anagrams2.get_anagrams("computationally")
    self.assertEqual(r, ['computationally'])

    _, r = self.anagrams2.get_anagrams("computations")
    self.assertEqual(r, ['computations'])

    _, r = self.anagrams2.get_anagrams("compute")
    self.assertEqual(r, ['compute'])

    _, r = self.anagrams2.get_anagrams("computed")
    self.assertEqual(r, ['computed'])

    _, r = self.anagrams2.get_anagrams("computer")
    self.assertEqual(r, ['computer'])

    _, r = self.anagrams2.get_anagrams("computerize")
    self.assertEqual(r, ['computerize'])

    _, r = self.anagrams2.get_anagrams("computerized")
    self.assertEqual(r, ['computerized'])

    _, r = self.anagrams2.get_anagrams("computerizes")
    self.assertEqual(r, ['computerizes'])

    _, r = self.anagrams2.get_anagrams("computerizing")
    self.assertEqual(r, ['computerizing'])

    _, r = self.anagrams2.get_anagrams("computers")
    self.assertEqual(r, ['computers'])

    _, r = self.anagrams2.get_anagrams("computes")
    self.assertEqual(r, ['computes'])

    _, r = self.anagrams2.get_anagrams("computing")
    self.assertEqual(r, ['computing'])

    _, r = self.anagrams2.get_anagrams("comrade")
    self.assertEqual(r, ['comrade'])

    _, r = self.anagrams2.get_anagrams("comradely")
    self.assertEqual(r, ['comradely'])

    _, r = self.anagrams2.get_anagrams("comrades")
    self.assertEqual(r, ['comrades'])

    _, r = self.anagrams2.get_anagrams("comradeship")
    self.assertEqual(r, ['comradeship'])

    _, r = self.anagrams2.get_anagrams("con")
    self.assertEqual(r, ['con'])

    _, r = self.anagrams2.get_anagrams("conakry")
    self.assertEqual(r, ['conakry'])

    _, r = self.anagrams2.get_anagrams("conant")
    self.assertEqual(r, ['cannot', 'canton', 'conant'])

    _, r = self.anagrams2.get_anagrams("concatenate")
    self.assertEqual(r, ['concatenate'])

    _, r = self.anagrams2.get_anagrams("concatenated")
    self.assertEqual(r, ['concatenated'])

    _, r = self.anagrams2.get_anagrams("concatenates")
    self.assertEqual(r, ['concatenates'])

    _, r = self.anagrams2.get_anagrams("concatenating")
    self.assertEqual(r, ['concatenating'])

    _, r = self.anagrams2.get_anagrams("concatenation")
    self.assertEqual(r, ['concatenation'])

    _, r = self.anagrams2.get_anagrams("concatenations")
    self.assertEqual(r, ['concatenations'])

    _, r = self.anagrams2.get_anagrams("concave")
    self.assertEqual(r, ['concave'])

    _, r = self.anagrams2.get_anagrams("conceal")
    self.assertEqual(r, ['conceal'])

    _, r = self.anagrams2.get_anagrams("concealed")
    self.assertEqual(r, ['concealed'])

    _, r = self.anagrams2.get_anagrams("concealer")
    self.assertEqual(r, ['concealer'])

    _, r = self.anagrams2.get_anagrams("concealers")
    self.assertEqual(r, ['concealers'])

    _, r = self.anagrams2.get_anagrams("concealing")
    self.assertEqual(r, ['concealing'])

    _, r = self.anagrams2.get_anagrams("concealment")
    self.assertEqual(r, ['concealment'])

    _, r = self.anagrams2.get_anagrams("conceals")
    self.assertEqual(r, ['conceals'])

    _, r = self.anagrams2.get_anagrams("concede")
    self.assertEqual(r, ['concede'])

    _, r = self.anagrams2.get_anagrams("conceded")
    self.assertEqual(r, ['conceded'])

    _, r = self.anagrams2.get_anagrams("concedes")
    self.assertEqual(r, ['concedes'])

    _, r = self.anagrams2.get_anagrams("conceding")
    self.assertEqual(r, ['conceding'])

    _, r = self.anagrams2.get_anagrams("conceit")
    self.assertEqual(r, ['conceit'])

    _, r = self.anagrams2.get_anagrams("conceited")
    self.assertEqual(r, ['conceited'])

    _, r = self.anagrams2.get_anagrams("conceits")
    self.assertEqual(r, ['conceits'])

    _, r = self.anagrams2.get_anagrams("conceivable")
    self.assertEqual(r, ['conceivable'])

    _, r = self.anagrams2.get_anagrams("conceivably")
    self.assertEqual(r, ['conceivably'])

    _, r = self.anagrams2.get_anagrams("conceive")
    self.assertEqual(r, ['conceive'])

    _, r = self.anagrams2.get_anagrams("conceived")
    self.assertEqual(r, ['conceived'])

    _, r = self.anagrams2.get_anagrams("conceives")
    self.assertEqual(r, ['conceives'])

    _, r = self.anagrams2.get_anagrams("conceiving")
    self.assertEqual(r, ['conceiving'])

    _, r = self.anagrams2.get_anagrams("concentrate")
    self.assertEqual(r, ['concentrate'])

    _, r = self.anagrams2.get_anagrams("concentrated")
    self.assertEqual(r, ['concentrated'])

    _, r = self.anagrams2.get_anagrams("concentrates")
    self.assertEqual(r, ['concentrates'])

    _, r = self.anagrams2.get_anagrams("concentrating")
    self.assertEqual(r, ['concentrating'])

    _, r = self.anagrams2.get_anagrams("concentration")
    self.assertEqual(r, ['concentration'])

    _, r = self.anagrams2.get_anagrams("concentrations")
    self.assertEqual(r, ['concentrations'])

    _, r = self.anagrams2.get_anagrams("concentrator")
    self.assertEqual(r, ['concentrator'])

    _, r = self.anagrams2.get_anagrams("concentrators")
    self.assertEqual(r, ['concentrators'])

    _, r = self.anagrams2.get_anagrams("concentric")
    self.assertEqual(r, ['concentric'])

    _, r = self.anagrams2.get_anagrams("concept")
    self.assertEqual(r, ['concept'])

    _, r = self.anagrams2.get_anagrams("conception")
    self.assertEqual(r, ['conception'])

    _, r = self.anagrams2.get_anagrams("conceptions")
    self.assertEqual(r, ['conceptions'])

    _, r = self.anagrams2.get_anagrams("concepts")
    self.assertEqual(r, ['concepts'])

    _, r = self.anagrams2.get_anagrams("conceptual")
    self.assertEqual(r, ['conceptual'])

    _, r = self.anagrams2.get_anagrams("conceptualization")
    self.assertEqual(r, ['conceptualization'])

    _, r = self.anagrams2.get_anagrams("conceptualizations")
    self.assertEqual(r, ['conceptualizations'])

    _, r = self.anagrams2.get_anagrams("conceptualize")
    self.assertEqual(r, ['conceptualize'])

    _, r = self.anagrams2.get_anagrams("conceptualized")
    self.assertEqual(r, ['conceptualized'])

    _, r = self.anagrams2.get_anagrams("conceptualizes")
    self.assertEqual(r, ['conceptualizes'])

    _, r = self.anagrams2.get_anagrams("conceptualizing")
    self.assertEqual(r, ['conceptualizing'])

    _, r = self.anagrams2.get_anagrams("conceptually")
    self.assertEqual(r, ['conceptually'])

    _, r = self.anagrams2.get_anagrams("concern")
    self.assertEqual(r, ['concern'])

    _, r = self.anagrams2.get_anagrams("concerned")
    self.assertEqual(r, ['concerned'])

    _, r = self.anagrams2.get_anagrams("concernedly")
    self.assertEqual(r, ['concernedly'])

    _, r = self.anagrams2.get_anagrams("concerning")
    self.assertEqual(r, ['concerning'])

    _, r = self.anagrams2.get_anagrams("concerns")
    self.assertEqual(r, ['concerns'])

    _, r = self.anagrams2.get_anagrams("concert")
    self.assertEqual(r, ['concert'])

    _, r = self.anagrams2.get_anagrams("concerted")
    self.assertEqual(r, ['concerted'])

    _, r = self.anagrams2.get_anagrams("concertmaster")
    self.assertEqual(r, ['concertmaster'])

    _, r = self.anagrams2.get_anagrams("concerto")
    self.assertEqual(r, ['concerto'])

    _, r = self.anagrams2.get_anagrams("concerts")
    self.assertEqual(r, ['concerts'])

    _, r = self.anagrams2.get_anagrams("concession")
    self.assertEqual(r, ['concession'])

    _, r = self.anagrams2.get_anagrams("concessions")
    self.assertEqual(r, ['concessions'])

    _, r = self.anagrams2.get_anagrams("conciliate")
    self.assertEqual(r, ['conciliate'])

    _, r = self.anagrams2.get_anagrams("conciliatory")
    self.assertEqual(r, ['conciliatory'])

    _, r = self.anagrams2.get_anagrams("concise")
    self.assertEqual(r, ['concise'])

    _, r = self.anagrams2.get_anagrams("concisely")
    self.assertEqual(r, ['concisely'])

    _, r = self.anagrams2.get_anagrams("conciseness")
    self.assertEqual(r, ['conciseness'])

    _, r = self.anagrams2.get_anagrams("conclave")
    self.assertEqual(r, ['conclave'])

    _, r = self.anagrams2.get_anagrams("conclude")
    self.assertEqual(r, ['conclude'])

    _, r = self.anagrams2.get_anagrams("concluded")
    self.assertEqual(r, ['concluded'])

    _, r = self.anagrams2.get_anagrams("concludes")
    self.assertEqual(r, ['concludes'])

    _, r = self.anagrams2.get_anagrams("concluding")
    self.assertEqual(r, ['concluding'])

    _, r = self.anagrams2.get_anagrams("conclusion")
    self.assertEqual(r, ['conclusion'])

    _, r = self.anagrams2.get_anagrams("conclusions")
    self.assertEqual(r, ['conclusions'])

    _, r = self.anagrams2.get_anagrams("conclusive")
    self.assertEqual(r, ['conclusive'])

    _, r = self.anagrams2.get_anagrams("conclusively")
    self.assertEqual(r, ['conclusively'])

    _, r = self.anagrams2.get_anagrams("concoct")
    self.assertEqual(r, ['concoct'])

    _, r = self.anagrams2.get_anagrams("concomitant")
    self.assertEqual(r, ['concomitant'])

    _, r = self.anagrams2.get_anagrams("concord")
    self.assertEqual(r, ['concord'])

    _, r = self.anagrams2.get_anagrams("concordant")
    self.assertEqual(r, ['concordant'])

    _, r = self.anagrams2.get_anagrams("concorde")
    self.assertEqual(r, ['concorde'])

    _, r = self.anagrams2.get_anagrams("concordia")
    self.assertEqual(r, ['accordion', 'concordia'])

    _, r = self.anagrams2.get_anagrams("concourse")
    self.assertEqual(r, ['concourse'])

    _, r = self.anagrams2.get_anagrams("concrete")
    self.assertEqual(r, ['concrete'])

    _, r = self.anagrams2.get_anagrams("concretely")
    self.assertEqual(r, ['concretely'])

    _, r = self.anagrams2.get_anagrams("concreteness")
    self.assertEqual(r, ['concreteness'])

    _, r = self.anagrams2.get_anagrams("concretes")
    self.assertEqual(r, ['concretes'])

    _, r = self.anagrams2.get_anagrams("concretion")
    self.assertEqual(r, ['concretion'])

    _, r = self.anagrams2.get_anagrams("concubine")
    self.assertEqual(r, ['concubine'])

    _, r = self.anagrams2.get_anagrams("concur")
    self.assertEqual(r, ['concur'])

    _, r = self.anagrams2.get_anagrams("concurred")
    self.assertEqual(r, ['concurred'])

    _, r = self.anagrams2.get_anagrams("concurrence")
    self.assertEqual(r, ['concurrence'])

    _, r = self.anagrams2.get_anagrams("concurrencies")
    self.assertEqual(r, ['concurrencies'])

    _, r = self.anagrams2.get_anagrams("concurrency")
    self.assertEqual(r, ['concurrency'])

    _, r = self.anagrams2.get_anagrams("concurrent")
    self.assertEqual(r, ['concurrent'])

    _, r = self.anagrams2.get_anagrams("concurrently")
    self.assertEqual(r, ['concurrently'])

    _, r = self.anagrams2.get_anagrams("concurring")
    self.assertEqual(r, ['concurring'])

    _, r = self.anagrams2.get_anagrams("concurs")
    self.assertEqual(r, ['concurs'])

    _, r = self.anagrams2.get_anagrams("concussion")
    self.assertEqual(r, ['concussion'])

    _, r = self.anagrams2.get_anagrams("condemn")
    self.assertEqual(r, ['condemn'])

    _, r = self.anagrams2.get_anagrams("condemnation")
    self.assertEqual(r, ['condemnation'])

    _, r = self.anagrams2.get_anagrams("condemnations")
    self.assertEqual(r, ['condemnations'])

    _, r = self.anagrams2.get_anagrams("condemned")
    self.assertEqual(r, ['condemned'])

    _, r = self.anagrams2.get_anagrams("condemner")
    self.assertEqual(r, ['condemner'])

    _, r = self.anagrams2.get_anagrams("condemners")
    self.assertEqual(r, ['condemners'])

    _, r = self.anagrams2.get_anagrams("condemning")
    self.assertEqual(r, ['condemning'])

    _, r = self.anagrams2.get_anagrams("condemns")
    self.assertEqual(r, ['condemns'])

    _, r = self.anagrams2.get_anagrams("condensation")
    self.assertEqual(r, ['condensation'])

    _, r = self.anagrams2.get_anagrams("condense")
    self.assertEqual(r, ['condense'])

    _, r = self.anagrams2.get_anagrams("condensed")
    self.assertEqual(r, ['condensed'])

    _, r = self.anagrams2.get_anagrams("condenser")
    self.assertEqual(r, ['condenser'])

    _, r = self.anagrams2.get_anagrams("condenses")
    self.assertEqual(r, ['condenses'])

    _, r = self.anagrams2.get_anagrams("condensing")
    self.assertEqual(r, ['condensing'])

    _, r = self.anagrams2.get_anagrams("condescend")
    self.assertEqual(r, ['condescend'])

    _, r = self.anagrams2.get_anagrams("condescending")
    self.assertEqual(r, ['condescending'])

    _, r = self.anagrams2.get_anagrams("condition")
    self.assertEqual(r, ['condition'])

    _, r = self.anagrams2.get_anagrams("conditional")
    self.assertEqual(r, ['conditional'])

    _, r = self.anagrams2.get_anagrams("conditionally")
    self.assertEqual(r, ['conditionally'])

    _, r = self.anagrams2.get_anagrams("conditionals")
    self.assertEqual(r, ['conditionals'])

    _, r = self.anagrams2.get_anagrams("conditioned")
    self.assertEqual(r, ['conditioned'])

    _, r = self.anagrams2.get_anagrams("conditioner")
    self.assertEqual(r, ['conditioner'])

    _, r = self.anagrams2.get_anagrams("conditioners")
    self.assertEqual(r, ['conditioners'])

    _, r = self.anagrams2.get_anagrams("conditioning")
    self.assertEqual(r, ['conditioning'])

    _, r = self.anagrams2.get_anagrams("conditions")
    self.assertEqual(r, ['conditions'])

    _, r = self.anagrams2.get_anagrams("condom")
    self.assertEqual(r, ['condom'])

    _, r = self.anagrams2.get_anagrams("condone")
    self.assertEqual(r, ['condone'])

    _, r = self.anagrams2.get_anagrams("condoned")
    self.assertEqual(r, ['condoned'])

    _, r = self.anagrams2.get_anagrams("condones")
    self.assertEqual(r, ['condones'])

    _, r = self.anagrams2.get_anagrams("condoning")
    self.assertEqual(r, ['condoning'])

    _, r = self.anagrams2.get_anagrams("conduce")
    self.assertEqual(r, ['conduce'])

    _, r = self.anagrams2.get_anagrams("conducive")
    self.assertEqual(r, ['conducive'])

    _, r = self.anagrams2.get_anagrams("conduciveness")
    self.assertEqual(r, ['conduciveness'])

    _, r = self.anagrams2.get_anagrams("conduct")
    self.assertEqual(r, ['conduct'])

    _, r = self.anagrams2.get_anagrams("conductance")
    self.assertEqual(r, ['conductance'])

    _, r = self.anagrams2.get_anagrams("conducted")
    self.assertEqual(r, ['conducted'])

    _, r = self.anagrams2.get_anagrams("conducting")
    self.assertEqual(r, ['conducting'])

    _, r = self.anagrams2.get_anagrams("conduction")
    self.assertEqual(r, ['conduction'])

    _, r = self.anagrams2.get_anagrams("conductive")
    self.assertEqual(r, ['conductive'])

    _, r = self.anagrams2.get_anagrams("conductivity")
    self.assertEqual(r, ['conductivity'])

    _, r = self.anagrams2.get_anagrams("conductor")
    self.assertEqual(r, ['conductor'])

    _, r = self.anagrams2.get_anagrams("conductors")
    self.assertEqual(r, ['conductors'])

    _, r = self.anagrams2.get_anagrams("conducts")
    self.assertEqual(r, ['conducts'])

    _, r = self.anagrams2.get_anagrams("conduit")
    self.assertEqual(r, ['conduit'])

    _, r = self.anagrams2.get_anagrams("cone")
    self.assertEqual(r, ['cone', 'once'])

    _, r = self.anagrams2.get_anagrams("cones")
    self.assertEqual(r, ['cones'])

    _, r = self.anagrams2.get_anagrams("conestoga")
    self.assertEqual(r, ['conestoga'])

    _, r = self.anagrams2.get_anagrams("confectionery")
    self.assertEqual(r, ['confectionery'])

    _, r = self.anagrams2.get_anagrams("confederacy")
    self.assertEqual(r, ['confederacy'])

    _, r = self.anagrams2.get_anagrams("confederate")
    self.assertEqual(r, ['confederate'])

    _, r = self.anagrams2.get_anagrams("confederates")
    self.assertEqual(r, ['confederates'])

    _, r = self.anagrams2.get_anagrams("confederation")
    self.assertEqual(r, ['confederation'])

    _, r = self.anagrams2.get_anagrams("confederations")
    self.assertEqual(r, ['confederations'])

    _, r = self.anagrams2.get_anagrams("confer")
    self.assertEqual(r, ['confer'])

    _, r = self.anagrams2.get_anagrams("conferee")
    self.assertEqual(r, ['conferee'])

    _, r = self.anagrams2.get_anagrams("conference")
    self.assertEqual(r, ['conference'])

    _, r = self.anagrams2.get_anagrams("conferences")
    self.assertEqual(r, ['conferences'])

    _, r = self.anagrams2.get_anagrams("conferred")
    self.assertEqual(r, ['conferred'])

    _, r = self.anagrams2.get_anagrams("conferrer")
    self.assertEqual(r, ['conferrer'])

    _, r = self.anagrams2.get_anagrams("conferrers")
    self.assertEqual(r, ['conferrers'])

    _, r = self.anagrams2.get_anagrams("conferring")
    self.assertEqual(r, ['conferring'])

    _, r = self.anagrams2.get_anagrams("confers")
    self.assertEqual(r, ['confers'])

    _, r = self.anagrams2.get_anagrams("confess")
    self.assertEqual(r, ['confess'])

    _, r = self.anagrams2.get_anagrams("confessed")
    self.assertEqual(r, ['confessed'])

    _, r = self.anagrams2.get_anagrams("confesses")
    self.assertEqual(r, ['confesses'])

    _, r = self.anagrams2.get_anagrams("confessing")
    self.assertEqual(r, ['confessing'])

    _, r = self.anagrams2.get_anagrams("confession")
    self.assertEqual(r, ['confession'])

    _, r = self.anagrams2.get_anagrams("confessions")
    self.assertEqual(r, ['confessions'])

    _, r = self.anagrams2.get_anagrams("confessor")
    self.assertEqual(r, ['confessor'])

    _, r = self.anagrams2.get_anagrams("confessors")
    self.assertEqual(r, ['confessors'])

    _, r = self.anagrams2.get_anagrams("confidant")
    self.assertEqual(r, ['confidant'])

    _, r = self.anagrams2.get_anagrams("confidants")
    self.assertEqual(r, ['confidants'])

    _, r = self.anagrams2.get_anagrams("confide")
    self.assertEqual(r, ['confide'])

    _, r = self.anagrams2.get_anagrams("confided")
    self.assertEqual(r, ['confided'])

    _, r = self.anagrams2.get_anagrams("confidence")
    self.assertEqual(r, ['confidence'])

    _, r = self.anagrams2.get_anagrams("confidences")
    self.assertEqual(r, ['confidences'])

    _, r = self.anagrams2.get_anagrams("confident")
    self.assertEqual(r, ['confident'])

    _, r = self.anagrams2.get_anagrams("confidential")
    self.assertEqual(r, ['confidential'])

    _, r = self.anagrams2.get_anagrams("confidentiality")
    self.assertEqual(r, ['confidentiality'])

    _, r = self.anagrams2.get_anagrams("confidentially")
    self.assertEqual(r, ['confidentially'])

    _, r = self.anagrams2.get_anagrams("confidently")
    self.assertEqual(r, ['confidently'])

    _, r = self.anagrams2.get_anagrams("confides")
    self.assertEqual(r, ['confides'])

    _, r = self.anagrams2.get_anagrams("confiding")
    self.assertEqual(r, ['confiding'])

    _, r = self.anagrams2.get_anagrams("confidingly")
    self.assertEqual(r, ['confidingly'])

    _, r = self.anagrams2.get_anagrams("configurable")
    self.assertEqual(r, ['configurable'])

    _, r = self.anagrams2.get_anagrams("configuration")
    self.assertEqual(r, ['configuration'])

    _, r = self.anagrams2.get_anagrams("configurations")
    self.assertEqual(r, ['configurations'])

    _, r = self.anagrams2.get_anagrams("configure")
    self.assertEqual(r, ['configure'])

    _, r = self.anagrams2.get_anagrams("configured")
    self.assertEqual(r, ['configured'])

    _, r = self.anagrams2.get_anagrams("configures")
    self.assertEqual(r, ['configures'])

    _, r = self.anagrams2.get_anagrams("configuring")
    self.assertEqual(r, ['configuring'])

    _, r = self.anagrams2.get_anagrams("confine")
    self.assertEqual(r, ['confine'])

    _, r = self.anagrams2.get_anagrams("confined")
    self.assertEqual(r, ['confined'])

    _, r = self.anagrams2.get_anagrams("confinement")
    self.assertEqual(r, ['confinement'])

    _, r = self.anagrams2.get_anagrams("confinements")
    self.assertEqual(r, ['confinements'])

    _, r = self.anagrams2.get_anagrams("confiner")
    self.assertEqual(r, ['confiner'])

    _, r = self.anagrams2.get_anagrams("confines")
    self.assertEqual(r, ['confines'])

    _, r = self.anagrams2.get_anagrams("confining")
    self.assertEqual(r, ['confining'])

    _, r = self.anagrams2.get_anagrams("confirm")
    self.assertEqual(r, ['confirm'])

    _, r = self.anagrams2.get_anagrams("confirmation")
    self.assertEqual(r, ['confirmation'])

    _, r = self.anagrams2.get_anagrams("confirmations")
    self.assertEqual(r, ['confirmations'])

    _, r = self.anagrams2.get_anagrams("confirmatory")
    self.assertEqual(r, ['confirmatory'])

    _, r = self.anagrams2.get_anagrams("confirmed")
    self.assertEqual(r, ['confirmed'])

    _, r = self.anagrams2.get_anagrams("confirming")
    self.assertEqual(r, ['confirming'])

    _, r = self.anagrams2.get_anagrams("confirms")
    self.assertEqual(r, ['confirms'])

    _, r = self.anagrams2.get_anagrams("confiscate")
    self.assertEqual(r, ['confiscate'])

    _, r = self.anagrams2.get_anagrams("confiscated")
    self.assertEqual(r, ['confiscated'])

    _, r = self.anagrams2.get_anagrams("confiscates")
    self.assertEqual(r, ['confiscates'])

    _, r = self.anagrams2.get_anagrams("confiscating")
    self.assertEqual(r, ['confiscating'])

    _, r = self.anagrams2.get_anagrams("confiscation")
    self.assertEqual(r, ['confiscation'])

    _, r = self.anagrams2.get_anagrams("confiscations")
    self.assertEqual(r, ['confiscations'])

    _, r = self.anagrams2.get_anagrams("conflagration")
    self.assertEqual(r, ['conflagration'])

    _, r = self.anagrams2.get_anagrams("conflict")
    self.assertEqual(r, ['conflict'])

    _, r = self.anagrams2.get_anagrams("conflicted")
    self.assertEqual(r, ['conflicted'])

    _, r = self.anagrams2.get_anagrams("conflicting")
    self.assertEqual(r, ['conflicting'])

    _, r = self.anagrams2.get_anagrams("conflicts")
    self.assertEqual(r, ['conflicts'])

    _, r = self.anagrams2.get_anagrams("confluent")
    self.assertEqual(r, ['confluent'])

    _, r = self.anagrams2.get_anagrams("confocal")
    self.assertEqual(r, ['confocal'])

    _, r = self.anagrams2.get_anagrams("conform")
    self.assertEqual(r, ['conform'])

    _, r = self.anagrams2.get_anagrams("conformal")
    self.assertEqual(r, ['conformal'])

    _, r = self.anagrams2.get_anagrams("conformance")
    self.assertEqual(r, ['conformance'])

    _, r = self.anagrams2.get_anagrams("conformed")
    self.assertEqual(r, ['conformed'])

    _, r = self.anagrams2.get_anagrams("conforming")
    self.assertEqual(r, ['conforming'])

    _, r = self.anagrams2.get_anagrams("conformity")
    self.assertEqual(r, ['conformity'])

    _, r = self.anagrams2.get_anagrams("conforms")
    self.assertEqual(r, ['conforms'])

    _, r = self.anagrams2.get_anagrams("confound")
    self.assertEqual(r, ['confound'])

    _, r = self.anagrams2.get_anagrams("confounded")
    self.assertEqual(r, ['confounded'])

    _, r = self.anagrams2.get_anagrams("confounding")
    self.assertEqual(r, ['confounding'])

    _, r = self.anagrams2.get_anagrams("confounds")
    self.assertEqual(r, ['confounds'])

    _, r = self.anagrams2.get_anagrams("confront")
    self.assertEqual(r, ['confront'])

    _, r = self.anagrams2.get_anagrams("confrontation")
    self.assertEqual(r, ['confrontation'])

    _, r = self.anagrams2.get_anagrams("confrontations")
    self.assertEqual(r, ['confrontations'])

    _, r = self.anagrams2.get_anagrams("confronted")
    self.assertEqual(r, ['confronted'])

    _, r = self.anagrams2.get_anagrams("confronter")
    self.assertEqual(r, ['confronter'])

    _, r = self.anagrams2.get_anagrams("confronters")
    self.assertEqual(r, ['confronters'])

    _, r = self.anagrams2.get_anagrams("confronting")
    self.assertEqual(r, ['confronting'])

    _, r = self.anagrams2.get_anagrams("confronts")
    self.assertEqual(r, ['confronts'])

    _, r = self.anagrams2.get_anagrams("confucian")
    self.assertEqual(r, ['confucian'])

    _, r = self.anagrams2.get_anagrams("confucianism")
    self.assertEqual(r, ['confucianism'])

    _, r = self.anagrams2.get_anagrams("confucius")
    self.assertEqual(r, ['confucius'])

    _, r = self.anagrams2.get_anagrams("confuse")
    self.assertEqual(r, ['confuse'])

    _, r = self.anagrams2.get_anagrams("confused")
    self.assertEqual(r, ['confused'])

    _, r = self.anagrams2.get_anagrams("confuser")
    self.assertEqual(r, ['confuser'])

    _, r = self.anagrams2.get_anagrams("confusers")
    self.assertEqual(r, ['confusers'])

    _, r = self.anagrams2.get_anagrams("confuses")
    self.assertEqual(r, ['confuses'])

    _, r = self.anagrams2.get_anagrams("confusing")
    self.assertEqual(r, ['confusing'])

    _, r = self.anagrams2.get_anagrams("confusingly")
    self.assertEqual(r, ['confusingly'])

    _, r = self.anagrams2.get_anagrams("confusion")
    self.assertEqual(r, ['confusion'])

    _, r = self.anagrams2.get_anagrams("confusions")
    self.assertEqual(r, ['confusions'])

    _, r = self.anagrams2.get_anagrams("congenial")
    self.assertEqual(r, ['congenial'])

    _, r = self.anagrams2.get_anagrams("congenially")
    self.assertEqual(r, ['congenially'])

    _, r = self.anagrams2.get_anagrams("congenital")
    self.assertEqual(r, ['congenital'])

    _, r = self.anagrams2.get_anagrams("congest")
    self.assertEqual(r, ['congest'])

    _, r = self.anagrams2.get_anagrams("congested")
    self.assertEqual(r, ['congested'])

    _, r = self.anagrams2.get_anagrams("congestion")
    self.assertEqual(r, ['congestion'])

    _, r = self.anagrams2.get_anagrams("congestive")
    self.assertEqual(r, ['congestive'])

    _, r = self.anagrams2.get_anagrams("conglomerate")
    self.assertEqual(r, ['conglomerate'])

    _, r = self.anagrams2.get_anagrams("congo")
    self.assertEqual(r, ['congo'])

    _, r = self.anagrams2.get_anagrams("congolese")
    self.assertEqual(r, ['congolese'])

    _, r = self.anagrams2.get_anagrams("congratulate")
    self.assertEqual(r, ['congratulate'])

    _, r = self.anagrams2.get_anagrams("congratulated")
    self.assertEqual(r, ['congratulated'])

    _, r = self.anagrams2.get_anagrams("congratulation")
    self.assertEqual(r, ['congratulation'])

    _, r = self.anagrams2.get_anagrams("congratulations")
    self.assertEqual(r, ['congratulations'])

    _, r = self.anagrams2.get_anagrams("congratulatory")
    self.assertEqual(r, ['congratulatory'])

    _, r = self.anagrams2.get_anagrams("congregate")
    self.assertEqual(r, ['congregate'])

    _, r = self.anagrams2.get_anagrams("congregated")
    self.assertEqual(r, ['congregated'])

    _, r = self.anagrams2.get_anagrams("congregates")
    self.assertEqual(r, ['congregates'])

    _, r = self.anagrams2.get_anagrams("congregating")
    self.assertEqual(r, ['congregating'])

    _, r = self.anagrams2.get_anagrams("congregation")
    self.assertEqual(r, ['congregation'])

    _, r = self.anagrams2.get_anagrams("congregations")
    self.assertEqual(r, ['congregations'])

    _, r = self.anagrams2.get_anagrams("congress")
    self.assertEqual(r, ['congress'])

    _, r = self.anagrams2.get_anagrams("congresses")
    self.assertEqual(r, ['congresses'])

    _, r = self.anagrams2.get_anagrams("congressional")
    self.assertEqual(r, ['congressional'])

    _, r = self.anagrams2.get_anagrams("congressionally")
    self.assertEqual(r, ['congressionally'])

    _, r = self.anagrams2.get_anagrams("congressman")
    self.assertEqual(r, ['congressman'])

    _, r = self.anagrams2.get_anagrams("congressmen")
    self.assertEqual(r, ['congressmen'])

    _, r = self.anagrams2.get_anagrams("congresswoman")
    self.assertEqual(r, ['congresswoman'])

    _, r = self.anagrams2.get_anagrams("congresswomen")
    self.assertEqual(r, ['congresswomen'])

    _, r = self.anagrams2.get_anagrams("congruence")
    self.assertEqual(r, ['congruence'])

    _, r = self.anagrams2.get_anagrams("congruent")
    self.assertEqual(r, ['congruent'])

    _, r = self.anagrams2.get_anagrams("conic")
    self.assertEqual(r, ['conic'])

    _, r = self.anagrams2.get_anagrams("conifer")
    self.assertEqual(r, ['conifer'])

    _, r = self.anagrams2.get_anagrams("coniferous")
    self.assertEqual(r, ['coniferous'])

    _, r = self.anagrams2.get_anagrams("conjecture")
    self.assertEqual(r, ['conjecture'])

    _, r = self.anagrams2.get_anagrams("conjectured")
    self.assertEqual(r, ['conjectured'])

    _, r = self.anagrams2.get_anagrams("conjectures")
    self.assertEqual(r, ['conjectures'])

    _, r = self.anagrams2.get_anagrams("conjecturing")
    self.assertEqual(r, ['conjecturing'])

    _, r = self.anagrams2.get_anagrams("conjoined")
    self.assertEqual(r, ['conjoined'])

    _, r = self.anagrams2.get_anagrams("conjugal")
    self.assertEqual(r, ['conjugal'])

    _, r = self.anagrams2.get_anagrams("conjugate")
    self.assertEqual(r, ['conjugate'])

    _, r = self.anagrams2.get_anagrams("conjunct")
    self.assertEqual(r, ['conjunct'])

    _, r = self.anagrams2.get_anagrams("conjuncted")
    self.assertEqual(r, ['conjuncted'])

    _, r = self.anagrams2.get_anagrams("conjunction")
    self.assertEqual(r, ['conjunction'])

    _, r = self.anagrams2.get_anagrams("conjunctions")
    self.assertEqual(r, ['conjunctions'])

    _, r = self.anagrams2.get_anagrams("conjunctive")
    self.assertEqual(r, ['conjunctive'])

    _, r = self.anagrams2.get_anagrams("conjunctively")
    self.assertEqual(r, ['conjunctively'])

    _, r = self.anagrams2.get_anagrams("conjuncts")
    self.assertEqual(r, ['conjuncts'])

    _, r = self.anagrams2.get_anagrams("conjuncture")
    self.assertEqual(r, ['conjuncture'])

    _, r = self.anagrams2.get_anagrams("conjure")
    self.assertEqual(r, ['conjure'])

    _, r = self.anagrams2.get_anagrams("conjured")
    self.assertEqual(r, ['conjured'])

    _, r = self.anagrams2.get_anagrams("conjurer")
    self.assertEqual(r, ['conjurer'])

    _, r = self.anagrams2.get_anagrams("conjures")
    self.assertEqual(r, ['conjures'])

    _, r = self.anagrams2.get_anagrams("conjuring")
    self.assertEqual(r, ['conjuring'])

    _, r = self.anagrams2.get_anagrams("conklin")
    self.assertEqual(r, ['conklin'])

    _, r = self.anagrams2.get_anagrams("conley")
    self.assertEqual(r, ['ceylon', 'conley'])

    _, r = self.anagrams2.get_anagrams("connally")
    self.assertEqual(r, ['connally'])

    _, r = self.anagrams2.get_anagrams("connect")
    self.assertEqual(r, ['connect'])

    _, r = self.anagrams2.get_anagrams("connected")
    self.assertEqual(r, ['connected'])

    _, r = self.anagrams2.get_anagrams("connectedness")
    self.assertEqual(r, ['connectedness'])

    _, r = self.anagrams2.get_anagrams("connecticut")
    self.assertEqual(r, ['connecticut'])

    _, r = self.anagrams2.get_anagrams("connecting")
    self.assertEqual(r, ['connecting'])

    _, r = self.anagrams2.get_anagrams("connection")
    self.assertEqual(r, ['connection'])

    _, r = self.anagrams2.get_anagrams("connectionless")
    self.assertEqual(r, ['connectionless'])

    _, r = self.anagrams2.get_anagrams("connections")
    self.assertEqual(r, ['connections'])

    _, r = self.anagrams2.get_anagrams("connective")
    self.assertEqual(r, ['connective'])

    _, r = self.anagrams2.get_anagrams("connectives")
    self.assertEqual(r, ['connectives'])

    _, r = self.anagrams2.get_anagrams("connectivity")
    self.assertEqual(r, ['connectivity'])

    _, r = self.anagrams2.get_anagrams("connector")
    self.assertEqual(r, ['connector'])

    _, r = self.anagrams2.get_anagrams("connectors")
    self.assertEqual(r, ['connectors'])

    _, r = self.anagrams2.get_anagrams("connects")
    self.assertEqual(r, ['connects'])

    _, r = self.anagrams2.get_anagrams("connelly")
    self.assertEqual(r, ['connelly'])

    _, r = self.anagrams2.get_anagrams("conner")
    self.assertEqual(r, ['conner'])

    _, r = self.anagrams2.get_anagrams("connie")
    self.assertEqual(r, ['connie'])

    _, r = self.anagrams2.get_anagrams("connivance")
    self.assertEqual(r, ['connivance'])

    _, r = self.anagrams2.get_anagrams("connive")
    self.assertEqual(r, ['connive'])

    _, r = self.anagrams2.get_anagrams("connoisseur")
    self.assertEqual(r, ['connoisseur'])

    _, r = self.anagrams2.get_anagrams("connoisseurs")
    self.assertEqual(r, ['connoisseurs'])

    _, r = self.anagrams2.get_anagrams("connors")
    self.assertEqual(r, ['connors'])

    _, r = self.anagrams2.get_anagrams("connotation")
    self.assertEqual(r, ['connotation'])

    _, r = self.anagrams2.get_anagrams("connotative")
    self.assertEqual(r, ['connotative'])

    _, r = self.anagrams2.get_anagrams("connote")
    self.assertEqual(r, ['connote'])

    _, r = self.anagrams2.get_anagrams("connoted")
    self.assertEqual(r, ['connoted'])

    _, r = self.anagrams2.get_anagrams("connotes")
    self.assertEqual(r, ['connotes'])

    _, r = self.anagrams2.get_anagrams("connoting")
    self.assertEqual(r, ['connoting'])

    _, r = self.anagrams2.get_anagrams("connubial")
    self.assertEqual(r, ['connubial'])

    _, r = self.anagrams2.get_anagrams("conquer")
    self.assertEqual(r, ['conquer'])

    _, r = self.anagrams2.get_anagrams("conquerable")
    self.assertEqual(r, ['conquerable'])

    _, r = self.anagrams2.get_anagrams("conquered")
    self.assertEqual(r, ['conquered'])

    _, r = self.anagrams2.get_anagrams("conquerer")
    self.assertEqual(r, ['conquerer'])

    _, r = self.anagrams2.get_anagrams("conquerers")
    self.assertEqual(r, ['conquerers'])

    _, r = self.anagrams2.get_anagrams("conquering")
    self.assertEqual(r, ['conquering'])

    _, r = self.anagrams2.get_anagrams("conqueror")
    self.assertEqual(r, ['conqueror'])

    _, r = self.anagrams2.get_anagrams("conquerors")
    self.assertEqual(r, ['conquerors'])

    _, r = self.anagrams2.get_anagrams("conquers")
    self.assertEqual(r, ['conquers'])

    _, r = self.anagrams2.get_anagrams("conquest")
    self.assertEqual(r, ['conquest'])

    _, r = self.anagrams2.get_anagrams("conquests")
    self.assertEqual(r, ['conquests'])

    _, r = self.anagrams2.get_anagrams("conrad")
    self.assertEqual(r, ['candor', 'conrad', 'dacron'])

    _, r = self.anagrams2.get_anagrams("conrail")
    self.assertEqual(r, ['conrail'])

    _, r = self.anagrams2.get_anagrams("conscience")
    self.assertEqual(r, ['conscience'])

    _, r = self.anagrams2.get_anagrams("consciences")
    self.assertEqual(r, ['consciences'])

    _, r = self.anagrams2.get_anagrams("conscientious")
    self.assertEqual(r, ['conscientious'])

    _, r = self.anagrams2.get_anagrams("conscientiously")
    self.assertEqual(r, ['conscientiously'])

    _, r = self.anagrams2.get_anagrams("conscious")
    self.assertEqual(r, ['conscious'])

    _, r = self.anagrams2.get_anagrams("consciously")
    self.assertEqual(r, ['consciously'])

    _, r = self.anagrams2.get_anagrams("consciousness")
    self.assertEqual(r, ['consciousness'])

    _, r = self.anagrams2.get_anagrams("conscript")
    self.assertEqual(r, ['conscript'])

    _, r = self.anagrams2.get_anagrams("conscription")
    self.assertEqual(r, ['conscription'])

    _, r = self.anagrams2.get_anagrams("consecrate")
    self.assertEqual(r, ['consecrate'])

    _, r = self.anagrams2.get_anagrams("consecration")
    self.assertEqual(r, ['consecration'])

    _, r = self.anagrams2.get_anagrams("consecutive")
    self.assertEqual(r, ['consecutive'])

    _, r = self.anagrams2.get_anagrams("consecutively")
    self.assertEqual(r, ['consecutively'])

    _, r = self.anagrams2.get_anagrams("consensual")
    self.assertEqual(r, ['consensual'])

    _, r = self.anagrams2.get_anagrams("consensus")
    self.assertEqual(r, ['consensus'])

    _, r = self.anagrams2.get_anagrams("consent")
    self.assertEqual(r, ['consent'])

    _, r = self.anagrams2.get_anagrams("consented")
    self.assertEqual(r, ['consented'])

    _, r = self.anagrams2.get_anagrams("consenter")
    self.assertEqual(r, ['consenter'])

    _, r = self.anagrams2.get_anagrams("consenters")
    self.assertEqual(r, ['consenters'])

    _, r = self.anagrams2.get_anagrams("consenting")
    self.assertEqual(r, ['consenting'])

    _, r = self.anagrams2.get_anagrams("consents")
    self.assertEqual(r, ['consents'])

    _, r = self.anagrams2.get_anagrams("consequence")
    self.assertEqual(r, ['consequence'])

    _, r = self.anagrams2.get_anagrams("consequences")
    self.assertEqual(r, ['consequences'])

    _, r = self.anagrams2.get_anagrams("consequent")
    self.assertEqual(r, ['consequent'])

    _, r = self.anagrams2.get_anagrams("consequential")
    self.assertEqual(r, ['consequential'])

    _, r = self.anagrams2.get_anagrams("consequentialities")
    self.assertEqual(r, ['consequentialities'])

    _, r = self.anagrams2.get_anagrams("consequentiality")
    self.assertEqual(r, ['consequentiality'])

    _, r = self.anagrams2.get_anagrams("consequently")
    self.assertEqual(r, ['consequently'])

    _, r = self.anagrams2.get_anagrams("consequents")
    self.assertEqual(r, ['consequents'])

    _, r = self.anagrams2.get_anagrams("conservation")
    self.assertEqual(r, ['conservation', 'conversation'])

    _, r = self.anagrams2.get_anagrams("conservationist")
    self.assertEqual(r, ['conservationist'])

    _, r = self.anagrams2.get_anagrams("conservationists")
    self.assertEqual(r, ['conservationists'])

    _, r = self.anagrams2.get_anagrams("conservations")
    self.assertEqual(r, ['conservations', 'conversations'])

    _, r = self.anagrams2.get_anagrams("conservatism")
    self.assertEqual(r, ['conservatism'])

    _, r = self.anagrams2.get_anagrams("conservative")
    self.assertEqual(r, ['conservative'])

    _, r = self.anagrams2.get_anagrams("conservatively")
    self.assertEqual(r, ['conservatively'])

    _, r = self.anagrams2.get_anagrams("conservatives")
    self.assertEqual(r, ['conservatives'])

    _, r = self.anagrams2.get_anagrams("conservator")
    self.assertEqual(r, ['conservator'])

    _, r = self.anagrams2.get_anagrams("conserve")
    self.assertEqual(r, ['conserve', 'converse'])

    _, r = self.anagrams2.get_anagrams("conserved")
    self.assertEqual(r, ['conserved', 'conversed'])

    _, r = self.anagrams2.get_anagrams("conserves")
    self.assertEqual(r, ['conserves', 'converses'])

    _, r = self.anagrams2.get_anagrams("conserving")
    self.assertEqual(r, ['conserving', 'conversing'])

    _, r = self.anagrams2.get_anagrams("consider")
    self.assertEqual(r, ['consider'])

    _, r = self.anagrams2.get_anagrams("considerable")
    self.assertEqual(r, ['considerable'])

    _, r = self.anagrams2.get_anagrams("considerably")
    self.assertEqual(r, ['considerably'])

    _, r = self.anagrams2.get_anagrams("considerate")
    self.assertEqual(r, ['considerate'])

    _, r = self.anagrams2.get_anagrams("considerately")
    self.assertEqual(r, ['considerately'])

    _, r = self.anagrams2.get_anagrams("consideration")
    self.assertEqual(r, ['consideration'])

    _, r = self.anagrams2.get_anagrams("considerations")
    self.assertEqual(r, ['considerations'])

    _, r = self.anagrams2.get_anagrams("considered")
    self.assertEqual(r, ['considered'])

    _, r = self.anagrams2.get_anagrams("considering")
    self.assertEqual(r, ['considering'])

    _, r = self.anagrams2.get_anagrams("considers")
    self.assertEqual(r, ['considers'])

    _, r = self.anagrams2.get_anagrams("consign")
    self.assertEqual(r, ['consign'])

    _, r = self.anagrams2.get_anagrams("consigned")
    self.assertEqual(r, ['consigned', 'encodings', 'seconding'])

    _, r = self.anagrams2.get_anagrams("consigning")
    self.assertEqual(r, ['consigning'])

    _, r = self.anagrams2.get_anagrams("consigns")
    self.assertEqual(r, ['consigns'])

    _, r = self.anagrams2.get_anagrams("consist")
    self.assertEqual(r, ['consist'])

    _, r = self.anagrams2.get_anagrams("consisted")
    self.assertEqual(r, ['consisted'])

    _, r = self.anagrams2.get_anagrams("consistency")
    self.assertEqual(r, ['consistency'])

    _, r = self.anagrams2.get_anagrams("consistent")
    self.assertEqual(r, ['consistent'])

    _, r = self.anagrams2.get_anagrams("consistently")
    self.assertEqual(r, ['consistently'])

    _, r = self.anagrams2.get_anagrams("consisting")
    self.assertEqual(r, ['consisting'])

    _, r = self.anagrams2.get_anagrams("consists")
    self.assertEqual(r, ['consists'])

    _, r = self.anagrams2.get_anagrams("consolable")
    self.assertEqual(r, ['consolable'])

    _, r = self.anagrams2.get_anagrams("consolation")
    self.assertEqual(r, ['consolation'])

    _, r = self.anagrams2.get_anagrams("consolations")
    self.assertEqual(r, ['consolations'])

    _, r = self.anagrams2.get_anagrams("console")
    self.assertEqual(r, ['console'])

    _, r = self.anagrams2.get_anagrams("consoled")
    self.assertEqual(r, ['consoled'])

    _, r = self.anagrams2.get_anagrams("consoler")
    self.assertEqual(r, ['consoler'])

    _, r = self.anagrams2.get_anagrams("consolers")
    self.assertEqual(r, ['consolers'])

    _, r = self.anagrams2.get_anagrams("consoles")
    self.assertEqual(r, ['consoles', 'coolness'])

    _, r = self.anagrams2.get_anagrams("consolidate")
    self.assertEqual(r, ['consolidate'])

    _, r = self.anagrams2.get_anagrams("consolidated")
    self.assertEqual(r, ['consolidated'])

    _, r = self.anagrams2.get_anagrams("consolidates")
    self.assertEqual(r, ['consolidates'])

    _, r = self.anagrams2.get_anagrams("consolidating")
    self.assertEqual(r, ['consolidating'])

    _, r = self.anagrams2.get_anagrams("consolidation")
    self.assertEqual(r, ['consolidation'])

    _, r = self.anagrams2.get_anagrams("consoling")
    self.assertEqual(r, ['consoling'])

    _, r = self.anagrams2.get_anagrams("consolingly")
    self.assertEqual(r, ['consolingly'])

    _, r = self.anagrams2.get_anagrams("consonant")
    self.assertEqual(r, ['consonant'])

    _, r = self.anagrams2.get_anagrams("consonants")
    self.assertEqual(r, ['consonants'])

    _, r = self.anagrams2.get_anagrams("consort")
    self.assertEqual(r, ['consort'])

    _, r = self.anagrams2.get_anagrams("consorted")
    self.assertEqual(r, ['consorted'])

    _, r = self.anagrams2.get_anagrams("consorting")
    self.assertEqual(r, ['consorting'])

    _, r = self.anagrams2.get_anagrams("consortium")
    self.assertEqual(r, ['consortium'])

    _, r = self.anagrams2.get_anagrams("consorts")
    self.assertEqual(r, ['consorts'])

    _, r = self.anagrams2.get_anagrams("conspicuous")
    self.assertEqual(r, ['conspicuous'])

    _, r = self.anagrams2.get_anagrams("conspicuously")
    self.assertEqual(r, ['conspicuously'])

    _, r = self.anagrams2.get_anagrams("conspiracies")
    self.assertEqual(r, ['conspiracies'])

    _, r = self.anagrams2.get_anagrams("conspiracy")
    self.assertEqual(r, ['conspiracy'])

    _, r = self.anagrams2.get_anagrams("conspirator")
    self.assertEqual(r, ['conspirator'])

    _, r = self.anagrams2.get_anagrams("conspirators")
    self.assertEqual(r, ['conspirators'])

    _, r = self.anagrams2.get_anagrams("conspire")
    self.assertEqual(r, ['conspire'])

    _, r = self.anagrams2.get_anagrams("conspired")
    self.assertEqual(r, ['conspired'])

    _, r = self.anagrams2.get_anagrams("conspires")
    self.assertEqual(r, ['conspires'])

    _, r = self.anagrams2.get_anagrams("conspiring")
    self.assertEqual(r, ['conspiring'])

    _, r = self.anagrams2.get_anagrams("constable")
    self.assertEqual(r, ['constable'])

    _, r = self.anagrams2.get_anagrams("constables")
    self.assertEqual(r, ['constables'])

    _, r = self.anagrams2.get_anagrams("constance")
    self.assertEqual(r, ['constance'])

    _, r = self.anagrams2.get_anagrams("constancy")
    self.assertEqual(r, ['constancy'])

    _, r = self.anagrams2.get_anagrams("constant")
    self.assertEqual(r, ['constant'])

    _, r = self.anagrams2.get_anagrams("constantine")
    self.assertEqual(r, ['constantine'])

    _, r = self.anagrams2.get_anagrams("constantinople")
    self.assertEqual(r, ['constantinople'])

    _, r = self.anagrams2.get_anagrams("constantly")
    self.assertEqual(r, ['constantly'])

    _, r = self.anagrams2.get_anagrams("constants")
    self.assertEqual(r, ['constants'])

    _, r = self.anagrams2.get_anagrams("constellation")
    self.assertEqual(r, ['constellation'])

    _, r = self.anagrams2.get_anagrams("constellations")
    self.assertEqual(r, ['constellations'])

    _, r = self.anagrams2.get_anagrams("consternation")
    self.assertEqual(r, ['consternation'])

    _, r = self.anagrams2.get_anagrams("constituencies")
    self.assertEqual(r, ['constituencies'])

    _, r = self.anagrams2.get_anagrams("constituency")
    self.assertEqual(r, ['constituency'])

    _, r = self.anagrams2.get_anagrams("constituent")
    self.assertEqual(r, ['constituent'])

    _, r = self.anagrams2.get_anagrams("constituents")
    self.assertEqual(r, ['constituents'])

    _, r = self.anagrams2.get_anagrams("constitute")
    self.assertEqual(r, ['constitute'])

    _, r = self.anagrams2.get_anagrams("constituted")
    self.assertEqual(r, ['constituted'])

    _, r = self.anagrams2.get_anagrams("constitutes")
    self.assertEqual(r, ['constitutes'])

    _, r = self.anagrams2.get_anagrams("constituting")
    self.assertEqual(r, ['constituting'])

    _, r = self.anagrams2.get_anagrams("constitution")
    self.assertEqual(r, ['constitution'])

    _, r = self.anagrams2.get_anagrams("constitutional")
    self.assertEqual(r, ['constitutional'])

    _, r = self.anagrams2.get_anagrams("constitutionality")
    self.assertEqual(r, ['constitutionality'])

    _, r = self.anagrams2.get_anagrams("constitutionally")
    self.assertEqual(r, ['constitutionally'])

    _, r = self.anagrams2.get_anagrams("constitutions")
    self.assertEqual(r, ['constitutions'])

    _, r = self.anagrams2.get_anagrams("constitutive")
    self.assertEqual(r, ['constitutive'])

    _, r = self.anagrams2.get_anagrams("constrain")
    self.assertEqual(r, ['constrain'])

    _, r = self.anagrams2.get_anagrams("constrained")
    self.assertEqual(r, ['constrained'])

    _, r = self.anagrams2.get_anagrams("constraining")
    self.assertEqual(r, ['constraining'])

    _, r = self.anagrams2.get_anagrams("constrains")
    self.assertEqual(r, ['constrains'])

    _, r = self.anagrams2.get_anagrams("constraint")
    self.assertEqual(r, ['constraint'])

    _, r = self.anagrams2.get_anagrams("constraints")
    self.assertEqual(r, ['constraints'])

    _, r = self.anagrams2.get_anagrams("constrict")
    self.assertEqual(r, ['constrict'])

    _, r = self.anagrams2.get_anagrams("construct")
    self.assertEqual(r, ['construct'])

    _, r = self.anagrams2.get_anagrams("constructed")
    self.assertEqual(r, ['constructed'])

    _, r = self.anagrams2.get_anagrams("constructibility")
    self.assertEqual(r, ['constructibility'])

    _, r = self.anagrams2.get_anagrams("constructible")
    self.assertEqual(r, ['constructible'])

    _, r = self.anagrams2.get_anagrams("constructing")
    self.assertEqual(r, ['constructing'])

    _, r = self.anagrams2.get_anagrams("construction")
    self.assertEqual(r, ['construction'])

    _, r = self.anagrams2.get_anagrams("constructions")
    self.assertEqual(r, ['constructions'])

    _, r = self.anagrams2.get_anagrams("constructive")
    self.assertEqual(r, ['constructive'])

    _, r = self.anagrams2.get_anagrams("constructively")
    self.assertEqual(r, ['constructively'])

    _, r = self.anagrams2.get_anagrams("constructor")
    self.assertEqual(r, ['constructor'])

    _, r = self.anagrams2.get_anagrams("constructors")
    self.assertEqual(r, ['constructors'])

    _, r = self.anagrams2.get_anagrams("constructs")
    self.assertEqual(r, ['constructs'])

    _, r = self.anagrams2.get_anagrams("construe")
    self.assertEqual(r, ['construe', 'counters', 'recounts'])

    _, r = self.anagrams2.get_anagrams("construed")
    self.assertEqual(r, ['construed'])

    _, r = self.anagrams2.get_anagrams("construing")
    self.assertEqual(r, ['construing'])

    _, r = self.anagrams2.get_anagrams("consul")
    self.assertEqual(r, ['consul'])

    _, r = self.anagrams2.get_anagrams("consular")
    self.assertEqual(r, ['consular'])

    _, r = self.anagrams2.get_anagrams("consulate")
    self.assertEqual(r, ['consulate'])

    _, r = self.anagrams2.get_anagrams("consulates")
    self.assertEqual(r, ['consulates'])

    _, r = self.anagrams2.get_anagrams("consuls")
    self.assertEqual(r, ['consuls'])

    _, r = self.anagrams2.get_anagrams("consult")
    self.assertEqual(r, ['consult'])

    _, r = self.anagrams2.get_anagrams("consultant")
    self.assertEqual(r, ['consultant'])

    _, r = self.anagrams2.get_anagrams("consultants")
    self.assertEqual(r, ['consultants'])

    _, r = self.anagrams2.get_anagrams("consultation")
    self.assertEqual(r, ['consultation'])

    _, r = self.anagrams2.get_anagrams("consultations")
    self.assertEqual(r, ['consultations'])

    _, r = self.anagrams2.get_anagrams("consultative")
    self.assertEqual(r, ['consultative'])

    _, r = self.anagrams2.get_anagrams("consulted")
    self.assertEqual(r, ['consulted'])

    _, r = self.anagrams2.get_anagrams("consulting")
    self.assertEqual(r, ['consulting'])

    _, r = self.anagrams2.get_anagrams("consults")
    self.assertEqual(r, ['consults'])

    _, r = self.anagrams2.get_anagrams("consumable")
    self.assertEqual(r, ['consumable'])

    _, r = self.anagrams2.get_anagrams("consume")
    self.assertEqual(r, ['consume'])

    _, r = self.anagrams2.get_anagrams("consumed")
    self.assertEqual(r, ['consumed'])

    _, r = self.anagrams2.get_anagrams("consumer")
    self.assertEqual(r, ['consumer'])

    _, r = self.anagrams2.get_anagrams("consumers")
    self.assertEqual(r, ['consumers'])

    _, r = self.anagrams2.get_anagrams("consumes")
    self.assertEqual(r, ['consumes'])

    _, r = self.anagrams2.get_anagrams("consuming")
    self.assertEqual(r, ['consuming'])

    _, r = self.anagrams2.get_anagrams("consummate")
    self.assertEqual(r, ['consummate'])

    _, r = self.anagrams2.get_anagrams("consummated")
    self.assertEqual(r, ['consummated'])

    _, r = self.anagrams2.get_anagrams("consummately")
    self.assertEqual(r, ['consummately'])

    _, r = self.anagrams2.get_anagrams("consummation")
    self.assertEqual(r, ['consummation'])

    _, r = self.anagrams2.get_anagrams("consumption")
    self.assertEqual(r, ['consumption'])

    _, r = self.anagrams2.get_anagrams("consumptions")
    self.assertEqual(r, ['consumptions'])

    _, r = self.anagrams2.get_anagrams("consumptive")
    self.assertEqual(r, ['consumptive'])

    _, r = self.anagrams2.get_anagrams("consumptively")
    self.assertEqual(r, ['consumptively'])

    _, r = self.anagrams2.get_anagrams("contact")
    self.assertEqual(r, ['contact'])

    _, r = self.anagrams2.get_anagrams("contacted")
    self.assertEqual(r, ['contacted'])

    _, r = self.anagrams2.get_anagrams("contacting")
    self.assertEqual(r, ['contacting'])

    _, r = self.anagrams2.get_anagrams("contacts")
    self.assertEqual(r, ['contacts'])

    _, r = self.anagrams2.get_anagrams("contagion")
    self.assertEqual(r, ['contagion'])

    _, r = self.anagrams2.get_anagrams("contagious")
    self.assertEqual(r, ['contagious'])

    _, r = self.anagrams2.get_anagrams("contagiously")
    self.assertEqual(r, ['contagiously'])

    _, r = self.anagrams2.get_anagrams("contain")
    self.assertEqual(r, ['contain'])

    _, r = self.anagrams2.get_anagrams("containable")
    self.assertEqual(r, ['containable'])

    _, r = self.anagrams2.get_anagrams("contained")
    self.assertEqual(r, ['contained'])

    _, r = self.anagrams2.get_anagrams("container")
    self.assertEqual(r, ['container'])

    _, r = self.anagrams2.get_anagrams("containers")
    self.assertEqual(r, ['containers'])

    _, r = self.anagrams2.get_anagrams("containing")
    self.assertEqual(r, ['containing'])

    _, r = self.anagrams2.get_anagrams("containment")
    self.assertEqual(r, ['containment'])

    _, r = self.anagrams2.get_anagrams("containments")
    self.assertEqual(r, ['containments'])

    _, r = self.anagrams2.get_anagrams("contains")
    self.assertEqual(r, ['contains', 'sanction'])

    _, r = self.anagrams2.get_anagrams("contaminate")
    self.assertEqual(r, ['contaminate'])

    _, r = self.anagrams2.get_anagrams("contaminated")
    self.assertEqual(r, ['contaminated'])

    _, r = self.anagrams2.get_anagrams("contaminates")
    self.assertEqual(r, ['contaminates'])

    _, r = self.anagrams2.get_anagrams("contaminating")
    self.assertEqual(r, ['contaminating'])

    _, r = self.anagrams2.get_anagrams("contamination")
    self.assertEqual(r, ['contamination'])

    _, r = self.anagrams2.get_anagrams("contemplate")
    self.assertEqual(r, ['contemplate'])

    _, r = self.anagrams2.get_anagrams("contemplated")
    self.assertEqual(r, ['contemplated'])

    _, r = self.anagrams2.get_anagrams("contemplates")
    self.assertEqual(r, ['contemplates'])

    _, r = self.anagrams2.get_anagrams("contemplating")
    self.assertEqual(r, ['contemplating'])

    _, r = self.anagrams2.get_anagrams("contemplation")
    self.assertEqual(r, ['contemplation'])

    _, r = self.anagrams2.get_anagrams("contemplations")
    self.assertEqual(r, ['contemplations'])

    _, r = self.anagrams2.get_anagrams("contemplative")
    self.assertEqual(r, ['contemplative'])

    _, r = self.anagrams2.get_anagrams("contemporaries")
    self.assertEqual(r, ['contemporaries'])

    _, r = self.anagrams2.get_anagrams("contemporariness")
    self.assertEqual(r, ['contemporariness'])

    _, r = self.anagrams2.get_anagrams("contemporary")
    self.assertEqual(r, ['contemporary'])

    _, r = self.anagrams2.get_anagrams("contempt")
    self.assertEqual(r, ['contempt'])

    _, r = self.anagrams2.get_anagrams("contemptible")
    self.assertEqual(r, ['contemptible'])

    _, r = self.anagrams2.get_anagrams("contemptuous")
    self.assertEqual(r, ['contemptuous'])

    _, r = self.anagrams2.get_anagrams("contemptuously")
    self.assertEqual(r, ['contemptuously'])

    _, r = self.anagrams2.get_anagrams("contend")
    self.assertEqual(r, ['contend'])

    _, r = self.anagrams2.get_anagrams("contended")
    self.assertEqual(r, ['contended'])

    _, r = self.anagrams2.get_anagrams("contender")
    self.assertEqual(r, ['contender'])

    _, r = self.anagrams2.get_anagrams("contenders")
    self.assertEqual(r, ['contenders'])

    _, r = self.anagrams2.get_anagrams("contending")
    self.assertEqual(r, ['contending'])

    _, r = self.anagrams2.get_anagrams("contends")
    self.assertEqual(r, ['contends'])

    _, r = self.anagrams2.get_anagrams("content")
    self.assertEqual(r, ['content'])

    _, r = self.anagrams2.get_anagrams("contented")
    self.assertEqual(r, ['contented'])

    _, r = self.anagrams2.get_anagrams("contenting")
    self.assertEqual(r, ['contenting', 'contingent'])

    _, r = self.anagrams2.get_anagrams("contention")
    self.assertEqual(r, ['contention'])

    _, r = self.anagrams2.get_anagrams("contentions")
    self.assertEqual(r, ['contentions'])

    _, r = self.anagrams2.get_anagrams("contently")
    self.assertEqual(r, ['contently'])

    _, r = self.anagrams2.get_anagrams("contentment")
    self.assertEqual(r, ['contentment'])

    _, r = self.anagrams2.get_anagrams("contents")
    self.assertEqual(r, ['contents'])

    _, r = self.anagrams2.get_anagrams("contest")
    self.assertEqual(r, ['contest'])

    _, r = self.anagrams2.get_anagrams("contestable")
    self.assertEqual(r, ['contestable'])

    _, r = self.anagrams2.get_anagrams("contestant")
    self.assertEqual(r, ['contestant'])

    _, r = self.anagrams2.get_anagrams("contested")
    self.assertEqual(r, ['contested'])

    _, r = self.anagrams2.get_anagrams("contester")
    self.assertEqual(r, ['contester'])

    _, r = self.anagrams2.get_anagrams("contesters")
    self.assertEqual(r, ['contesters'])

    _, r = self.anagrams2.get_anagrams("contesting")
    self.assertEqual(r, ['contesting'])

    _, r = self.anagrams2.get_anagrams("contests")
    self.assertEqual(r, ['contests'])

    _, r = self.anagrams2.get_anagrams("context")
    self.assertEqual(r, ['context'])

    _, r = self.anagrams2.get_anagrams("contexts")
    self.assertEqual(r, ['contexts'])

    _, r = self.anagrams2.get_anagrams("contextual")
    self.assertEqual(r, ['contextual'])

    _, r = self.anagrams2.get_anagrams("contextually")
    self.assertEqual(r, ['contextually'])

    _, r = self.anagrams2.get_anagrams("contiguity")
    self.assertEqual(r, ['contiguity'])

    _, r = self.anagrams2.get_anagrams("contiguous")
    self.assertEqual(r, ['contiguous'])

    _, r = self.anagrams2.get_anagrams("contiguously")
    self.assertEqual(r, ['contiguously'])

    _, r = self.anagrams2.get_anagrams("continent")
    self.assertEqual(r, ['continent'])

    _, r = self.anagrams2.get_anagrams("continental")
    self.assertEqual(r, ['continental'])

    _, r = self.anagrams2.get_anagrams("continentally")
    self.assertEqual(r, ['continentally'])

    _, r = self.anagrams2.get_anagrams("continents")
    self.assertEqual(r, ['continents'])

    _, r = self.anagrams2.get_anagrams("contingencies")
    self.assertEqual(r, ['contingencies'])

    _, r = self.anagrams2.get_anagrams("contingency")
    self.assertEqual(r, ['contingency'])

    _, r = self.anagrams2.get_anagrams("contingent")
    self.assertEqual(r, ['contenting', 'contingent'])

    _, r = self.anagrams2.get_anagrams("contingents")
    self.assertEqual(r, ['contingents'])

    _, r = self.anagrams2.get_anagrams("continual")
    self.assertEqual(r, ['continual'])

    _, r = self.anagrams2.get_anagrams("continually")
    self.assertEqual(r, ['continually'])

    _, r = self.anagrams2.get_anagrams("continuance")
    self.assertEqual(r, ['continuance'])

    _, r = self.anagrams2.get_anagrams("continuances")
    self.assertEqual(r, ['continuances'])

    _, r = self.anagrams2.get_anagrams("continuation")
    self.assertEqual(r, ['continuation'])

    _, r = self.anagrams2.get_anagrams("continuations")
    self.assertEqual(r, ['continuations'])

    _, r = self.anagrams2.get_anagrams("continue")
    self.assertEqual(r, ['continue'])

    _, r = self.anagrams2.get_anagrams("continued")
    self.assertEqual(r, ['continued', 'unnoticed'])

    _, r = self.anagrams2.get_anagrams("continues")
    self.assertEqual(r, ['continues'])

    _, r = self.anagrams2.get_anagrams("continuing")
    self.assertEqual(r, ['continuing'])

    _, r = self.anagrams2.get_anagrams("continuities")
    self.assertEqual(r, ['continuities'])

    _, r = self.anagrams2.get_anagrams("continuity")
    self.assertEqual(r, ['continuity'])

    _, r = self.anagrams2.get_anagrams("continuous")
    self.assertEqual(r, ['continuous'])

    _, r = self.anagrams2.get_anagrams("continuously")
    self.assertEqual(r, ['continuously'])

    _, r = self.anagrams2.get_anagrams("continuum")
    self.assertEqual(r, ['continuum'])

    _, r = self.anagrams2.get_anagrams("contortions")
    self.assertEqual(r, ['contortions'])

    _, r = self.anagrams2.get_anagrams("contour")
    self.assertEqual(r, ['contour'])

    _, r = self.anagrams2.get_anagrams("contoured")
    self.assertEqual(r, ['contoured'])

    _, r = self.anagrams2.get_anagrams("contouring")
    self.assertEqual(r, ['contouring'])

    _, r = self.anagrams2.get_anagrams("contours")
    self.assertEqual(r, ['contours'])

    _, r = self.anagrams2.get_anagrams("contraband")
    self.assertEqual(r, ['contraband'])

    _, r = self.anagrams2.get_anagrams("contraception")
    self.assertEqual(r, ['contraception'])

    _, r = self.anagrams2.get_anagrams("contraceptive")
    self.assertEqual(r, ['contraceptive'])

    _, r = self.anagrams2.get_anagrams("contract")
    self.assertEqual(r, ['contract'])

    _, r = self.anagrams2.get_anagrams("contracted")
    self.assertEqual(r, ['contracted'])

    _, r = self.anagrams2.get_anagrams("contracting")
    self.assertEqual(r, ['contracting'])

    _, r = self.anagrams2.get_anagrams("contraction")
    self.assertEqual(r, ['contraction'])

    _, r = self.anagrams2.get_anagrams("contractions")
    self.assertEqual(r, ['contractions'])

    _, r = self.anagrams2.get_anagrams("contractor")
    self.assertEqual(r, ['contractor'])

    _, r = self.anagrams2.get_anagrams("contractors")
    self.assertEqual(r, ['contractors'])

    _, r = self.anagrams2.get_anagrams("contracts")
    self.assertEqual(r, ['contracts'])

    _, r = self.anagrams2.get_anagrams("contractual")
    self.assertEqual(r, ['contractual'])

    _, r = self.anagrams2.get_anagrams("contractually")
    self.assertEqual(r, ['contractually'])

    _, r = self.anagrams2.get_anagrams("contradict")
    self.assertEqual(r, ['contradict'])

    _, r = self.anagrams2.get_anagrams("contradicted")
    self.assertEqual(r, ['contradicted'])

    _, r = self.anagrams2.get_anagrams("contradicting")
    self.assertEqual(r, ['contradicting'])

    _, r = self.anagrams2.get_anagrams("contradiction")
    self.assertEqual(r, ['contradiction'])

    _, r = self.anagrams2.get_anagrams("contradictions")
    self.assertEqual(r, ['contradictions'])

    _, r = self.anagrams2.get_anagrams("contradictory")
    self.assertEqual(r, ['contradictory'])

    _, r = self.anagrams2.get_anagrams("contradicts")
    self.assertEqual(r, ['contradicts'])

    _, r = self.anagrams2.get_anagrams("contradistinction")
    self.assertEqual(r, ['contradistinction'])

    _, r = self.anagrams2.get_anagrams("contradistinctions")
    self.assertEqual(r, ['contradistinctions'])

    _, r = self.anagrams2.get_anagrams("contrapositive")
    self.assertEqual(r, ['contrapositive'])

    _, r = self.anagrams2.get_anagrams("contrapositives")
    self.assertEqual(r, ['contrapositives'])

    _, r = self.anagrams2.get_anagrams("contraption")
    self.assertEqual(r, ['contraption'])

    _, r = self.anagrams2.get_anagrams("contraptions")
    self.assertEqual(r, ['contraptions'])

    _, r = self.anagrams2.get_anagrams("contrariness")
    self.assertEqual(r, ['contrariness'])

    _, r = self.anagrams2.get_anagrams("contrary")
    self.assertEqual(r, ['contrary'])

    _, r = self.anagrams2.get_anagrams("contrast")
    self.assertEqual(r, ['contrast'])

    _, r = self.anagrams2.get_anagrams("contrasted")
    self.assertEqual(r, ['contrasted'])

    _, r = self.anagrams2.get_anagrams("contraster")
    self.assertEqual(r, ['contraster'])

    _, r = self.anagrams2.get_anagrams("contrasters")
    self.assertEqual(r, ['contrasters'])

    _, r = self.anagrams2.get_anagrams("contrasting")
    self.assertEqual(r, ['contrasting'])

    _, r = self.anagrams2.get_anagrams("contrastingly")
    self.assertEqual(r, ['contrastingly'])

    _, r = self.anagrams2.get_anagrams("contrasts")
    self.assertEqual(r, ['contrasts'])

    _, r = self.anagrams2.get_anagrams("contribute")
    self.assertEqual(r, ['contribute'])

    _, r = self.anagrams2.get_anagrams("contributed")
    self.assertEqual(r, ['contributed'])

    _, r = self.anagrams2.get_anagrams("contributes")
    self.assertEqual(r, ['contributes'])

    _, r = self.anagrams2.get_anagrams("contributing")
    self.assertEqual(r, ['contributing'])

    _, r = self.anagrams2.get_anagrams("contribution")
    self.assertEqual(r, ['contribution'])

    _, r = self.anagrams2.get_anagrams("contributions")
    self.assertEqual(r, ['contributions'])

    _, r = self.anagrams2.get_anagrams("contributor")
    self.assertEqual(r, ['contributor'])

    _, r = self.anagrams2.get_anagrams("contributorily")
    self.assertEqual(r, ['contributorily'])

    _, r = self.anagrams2.get_anagrams("contributors")
    self.assertEqual(r, ['contributors'])

    _, r = self.anagrams2.get_anagrams("contributory")
    self.assertEqual(r, ['contributory'])

    _, r = self.anagrams2.get_anagrams("contrite")
    self.assertEqual(r, ['contrite'])

    _, r = self.anagrams2.get_anagrams("contrition")
    self.assertEqual(r, ['contrition'])

    _, r = self.anagrams2.get_anagrams("contrivance")
    self.assertEqual(r, ['contrivance'])

    _, r = self.anagrams2.get_anagrams("contrivances")
    self.assertEqual(r, ['contrivances'])

    _, r = self.anagrams2.get_anagrams("contrive")
    self.assertEqual(r, ['contrive'])

    _, r = self.anagrams2.get_anagrams("contrived")
    self.assertEqual(r, ['contrived'])

    _, r = self.anagrams2.get_anagrams("contriver")
    self.assertEqual(r, ['contriver'])

    _, r = self.anagrams2.get_anagrams("contrives")
    self.assertEqual(r, ['contrives'])

    _, r = self.anagrams2.get_anagrams("contriving")
    self.assertEqual(r, ['contriving'])

    _, r = self.anagrams2.get_anagrams("control")
    self.assertEqual(r, ['control'])

    _, r = self.anagrams2.get_anagrams("controllability")
    self.assertEqual(r, ['controllability'])

    _, r = self.anagrams2.get_anagrams("controllable")
    self.assertEqual(r, ['controllable'])

    _, r = self.anagrams2.get_anagrams("controllably")
    self.assertEqual(r, ['controllably'])

    _, r = self.anagrams2.get_anagrams("controlled")
    self.assertEqual(r, ['controlled'])

    _, r = self.anagrams2.get_anagrams("controller")
    self.assertEqual(r, ['controller'])

    _, r = self.anagrams2.get_anagrams("controllers")
    self.assertEqual(r, ['controllers'])

    _, r = self.anagrams2.get_anagrams("controlling")
    self.assertEqual(r, ['controlling'])

    _, r = self.anagrams2.get_anagrams("controls")
    self.assertEqual(r, ['controls'])

    _, r = self.anagrams2.get_anagrams("controversial")
    self.assertEqual(r, ['controversial'])

    _, r = self.anagrams2.get_anagrams("controversies")
    self.assertEqual(r, ['controversies'])

    _, r = self.anagrams2.get_anagrams("controversy")
    self.assertEqual(r, ['controversy'])

    _, r = self.anagrams2.get_anagrams("controvertible")
    self.assertEqual(r, ['controvertible'])

    _, r = self.anagrams2.get_anagrams("contumacious")
    self.assertEqual(r, ['contumacious'])

    _, r = self.anagrams2.get_anagrams("contumacy")
    self.assertEqual(r, ['contumacy'])

    _, r = self.anagrams2.get_anagrams("conundrum")
    self.assertEqual(r, ['conundrum'])

    _, r = self.anagrams2.get_anagrams("conundrums")
    self.assertEqual(r, ['conundrums'])

    _, r = self.anagrams2.get_anagrams("convair")
    self.assertEqual(r, ['convair'])

    _, r = self.anagrams2.get_anagrams("convalescent")
    self.assertEqual(r, ['convalescent'])

    _, r = self.anagrams2.get_anagrams("convect")
    self.assertEqual(r, ['convect'])

    _, r = self.anagrams2.get_anagrams("convene")
    self.assertEqual(r, ['convene'])

    _, r = self.anagrams2.get_anagrams("convened")
    self.assertEqual(r, ['convened'])

    _, r = self.anagrams2.get_anagrams("convenes")
    self.assertEqual(r, ['convenes'])

    _, r = self.anagrams2.get_anagrams("convenience")
    self.assertEqual(r, ['convenience'])

    _, r = self.anagrams2.get_anagrams("conveniences")
    self.assertEqual(r, ['conveniences'])

    _, r = self.anagrams2.get_anagrams("convenient")
    self.assertEqual(r, ['convenient'])

    _, r = self.anagrams2.get_anagrams("conveniently")
    self.assertEqual(r, ['conveniently'])

    _, r = self.anagrams2.get_anagrams("convening")
    self.assertEqual(r, ['convening'])

    _, r = self.anagrams2.get_anagrams("convent")
    self.assertEqual(r, ['convent'])

    _, r = self.anagrams2.get_anagrams("convention")
    self.assertEqual(r, ['convention'])

    _, r = self.anagrams2.get_anagrams("conventional")
    self.assertEqual(r, ['conventional'])

    _, r = self.anagrams2.get_anagrams("conventionally")
    self.assertEqual(r, ['conventionally'])

    _, r = self.anagrams2.get_anagrams("conventions")
    self.assertEqual(r, ['conventions'])

    _, r = self.anagrams2.get_anagrams("convents")
    self.assertEqual(r, ['convents'])

    _, r = self.anagrams2.get_anagrams("converge")
    self.assertEqual(r, ['converge'])

    _, r = self.anagrams2.get_anagrams("converged")
    self.assertEqual(r, ['converged'])

    _, r = self.anagrams2.get_anagrams("convergence")
    self.assertEqual(r, ['convergence'])

    _, r = self.anagrams2.get_anagrams("convergent")
    self.assertEqual(r, ['convergent'])

    _, r = self.anagrams2.get_anagrams("converges")
    self.assertEqual(r, ['converges'])

    _, r = self.anagrams2.get_anagrams("converging")
    self.assertEqual(r, ['converging'])

    _, r = self.anagrams2.get_anagrams("conversant")
    self.assertEqual(r, ['conversant'])

    _, r = self.anagrams2.get_anagrams("conversantly")
    self.assertEqual(r, ['conversantly'])

    _, r = self.anagrams2.get_anagrams("conversation")
    self.assertEqual(r, ['conservation', 'conversation'])

    _, r = self.anagrams2.get_anagrams("conversational")
    self.assertEqual(r, ['conversational'])

    _, r = self.anagrams2.get_anagrams("conversationally")
    self.assertEqual(r, ['conversationally'])

    _, r = self.anagrams2.get_anagrams("conversations")
    self.assertEqual(r, ['conservations', 'conversations'])

    _, r = self.anagrams2.get_anagrams("converse")
    self.assertEqual(r, ['conserve', 'converse'])

    _, r = self.anagrams2.get_anagrams("conversed")
    self.assertEqual(r, ['conserved', 'conversed'])

    _, r = self.anagrams2.get_anagrams("conversely")
    self.assertEqual(r, ['conversely'])

    _, r = self.anagrams2.get_anagrams("converses")
    self.assertEqual(r, ['conserves', 'converses'])

    _, r = self.anagrams2.get_anagrams("conversing")
    self.assertEqual(r, ['conserving', 'conversing'])

    _, r = self.anagrams2.get_anagrams("conversion")
    self.assertEqual(r, ['conversion'])

    _, r = self.anagrams2.get_anagrams("conversions")
    self.assertEqual(r, ['conversions'])

    _, r = self.anagrams2.get_anagrams("convert")
    self.assertEqual(r, ['convert'])

    _, r = self.anagrams2.get_anagrams("converted")
    self.assertEqual(r, ['converted'])

    _, r = self.anagrams2.get_anagrams("converter")
    self.assertEqual(r, ['converter'])

    _, r = self.anagrams2.get_anagrams("converters")
    self.assertEqual(r, ['converters', 'reconverts'])

    _, r = self.anagrams2.get_anagrams("convertibility")
    self.assertEqual(r, ['convertibility'])

    _, r = self.anagrams2.get_anagrams("convertible")
    self.assertEqual(r, ['convertible'])

    _, r = self.anagrams2.get_anagrams("converting")
    self.assertEqual(r, ['converting'])

    _, r = self.anagrams2.get_anagrams("converts")
    self.assertEqual(r, ['converts'])

    _, r = self.anagrams2.get_anagrams("convex")
    self.assertEqual(r, ['convex'])

    _, r = self.anagrams2.get_anagrams("convey")
    self.assertEqual(r, ['convey'])

    _, r = self.anagrams2.get_anagrams("conveyance")
    self.assertEqual(r, ['conveyance'])

    _, r = self.anagrams2.get_anagrams("conveyances")
    self.assertEqual(r, ['conveyances'])

    _, r = self.anagrams2.get_anagrams("conveyed")
    self.assertEqual(r, ['conveyed'])

    _, r = self.anagrams2.get_anagrams("conveyer")
    self.assertEqual(r, ['conveyer'])

    _, r = self.anagrams2.get_anagrams("conveyers")
    self.assertEqual(r, ['conveyers'])

    _, r = self.anagrams2.get_anagrams("conveying")
    self.assertEqual(r, ['conveying'])

    _, r = self.anagrams2.get_anagrams("conveyor")
    self.assertEqual(r, ['conveyor'])

    _, r = self.anagrams2.get_anagrams("conveys")
    self.assertEqual(r, ['conveys'])

    _, r = self.anagrams2.get_anagrams("convict")
    self.assertEqual(r, ['convict'])

    _, r = self.anagrams2.get_anagrams("convicted")
    self.assertEqual(r, ['convicted'])

    _, r = self.anagrams2.get_anagrams("convicting")
    self.assertEqual(r, ['convicting'])

    _, r = self.anagrams2.get_anagrams("conviction")
    self.assertEqual(r, ['conviction'])

    _, r = self.anagrams2.get_anagrams("convictions")
    self.assertEqual(r, ['convictions'])

    _, r = self.anagrams2.get_anagrams("convicts")
    self.assertEqual(r, ['convicts'])

    _, r = self.anagrams2.get_anagrams("convince")
    self.assertEqual(r, ['convince'])

    _, r = self.anagrams2.get_anagrams("convinced")
    self.assertEqual(r, ['convinced'])

    _, r = self.anagrams2.get_anagrams("convincer")
    self.assertEqual(r, ['convincer'])

    _, r = self.anagrams2.get_anagrams("convincers")
    self.assertEqual(r, ['convincers'])

    _, r = self.anagrams2.get_anagrams("convinces")
    self.assertEqual(r, ['convinces'])

    _, r = self.anagrams2.get_anagrams("convincing")
    self.assertEqual(r, ['convincing'])

    _, r = self.anagrams2.get_anagrams("convincingly")
    self.assertEqual(r, ['convincingly'])

    _, r = self.anagrams2.get_anagrams("convivial")
    self.assertEqual(r, ['convivial'])

    _, r = self.anagrams2.get_anagrams("convoke")
    self.assertEqual(r, ['convoke'])

    _, r = self.anagrams2.get_anagrams("convoluted")
    self.assertEqual(r, ['convoluted'])

    _, r = self.anagrams2.get_anagrams("convolution")
    self.assertEqual(r, ['convolution'])

    _, r = self.anagrams2.get_anagrams("convoy")
    self.assertEqual(r, ['convoy'])

    _, r = self.anagrams2.get_anagrams("convoyed")
    self.assertEqual(r, ['convoyed'])

    _, r = self.anagrams2.get_anagrams("convoying")
    self.assertEqual(r, ['convoying'])

    _, r = self.anagrams2.get_anagrams("convoys")
    self.assertEqual(r, ['convoys'])

    _, r = self.anagrams2.get_anagrams("convulse")
    self.assertEqual(r, ['convulse'])

    _, r = self.anagrams2.get_anagrams("convulsion")
    self.assertEqual(r, ['convulsion'])

    _, r = self.anagrams2.get_anagrams("convulsions")
    self.assertEqual(r, ['convulsions'])

    _, r = self.anagrams2.get_anagrams("conway")
    self.assertEqual(r, ['conway'])

    _, r = self.anagrams2.get_anagrams("coo")
    self.assertEqual(r, ['coo'])

    _, r = self.anagrams2.get_anagrams("cooing")
    self.assertEqual(r, ['cooing'])

    _, r = self.anagrams2.get_anagrams("cook")
    self.assertEqual(r, ['cook'])

    _, r = self.anagrams2.get_anagrams("cookbook")
    self.assertEqual(r, ['cookbook'])

    _, r = self.anagrams2.get_anagrams("cooke")
    self.assertEqual(r, ['cooke'])

    _, r = self.anagrams2.get_anagrams("cooked")
    self.assertEqual(r, ['cooked'])

    _, r = self.anagrams2.get_anagrams("cookery")
    self.assertEqual(r, ['cookery'])

    _, r = self.anagrams2.get_anagrams("cookie")
    self.assertEqual(r, ['cookie'])

    _, r = self.anagrams2.get_anagrams("cookies")
    self.assertEqual(r, ['cookies'])

    _, r = self.anagrams2.get_anagrams("cooking")
    self.assertEqual(r, ['cooking'])

    _, r = self.anagrams2.get_anagrams("cooks")
    self.assertEqual(r, ['cooks'])

    _, r = self.anagrams2.get_anagrams("cooky")
    self.assertEqual(r, ['cooky'])

    _, r = self.anagrams2.get_anagrams("cool")
    self.assertEqual(r, ['cool'])

    _, r = self.anagrams2.get_anagrams("cooled")
    self.assertEqual(r, ['cooled'])

    _, r = self.anagrams2.get_anagrams("cooler")
    self.assertEqual(r, ['cooler'])

    _, r = self.anagrams2.get_anagrams("coolers")
    self.assertEqual(r, ['coolers'])

    _, r = self.anagrams2.get_anagrams("coolest")
    self.assertEqual(r, ['coolest'])

    _, r = self.anagrams2.get_anagrams("cooley")
    self.assertEqual(r, ['cooley'])

    _, r = self.anagrams2.get_anagrams("coolidge")
    self.assertEqual(r, ['coolidge'])

    _, r = self.anagrams2.get_anagrams("coolie")
    self.assertEqual(r, ['coolie'])

    _, r = self.anagrams2.get_anagrams("coolies")
    self.assertEqual(r, ['coolies'])

    _, r = self.anagrams2.get_anagrams("cooling")
    self.assertEqual(r, ['cooling'])

    _, r = self.anagrams2.get_anagrams("coolly")
    self.assertEqual(r, ['coolly'])

    _, r = self.anagrams2.get_anagrams("coolness")
    self.assertEqual(r, ['consoles', 'coolness'])

    _, r = self.anagrams2.get_anagrams("cools")
    self.assertEqual(r, ['cools'])

    _, r = self.anagrams2.get_anagrams("coon")
    self.assertEqual(r, ['coon'])

    _, r = self.anagrams2.get_anagrams("coons")
    self.assertEqual(r, ['coons'])

    _, r = self.anagrams2.get_anagrams("coop")
    self.assertEqual(r, ['coop'])

    _, r = self.anagrams2.get_anagrams("cooped")
    self.assertEqual(r, ['cooped', 'opcode'])

    _, r = self.anagrams2.get_anagrams("cooper")
    self.assertEqual(r, ['cooper'])

    _, r = self.anagrams2.get_anagrams("cooperate")
    self.assertEqual(r, ['cooperate'])

    _, r = self.anagrams2.get_anagrams("cooperated")
    self.assertEqual(r, ['cooperated'])

    _, r = self.anagrams2.get_anagrams("cooperates")
    self.assertEqual(r, ['cooperates'])

    _, r = self.anagrams2.get_anagrams("cooperating")
    self.assertEqual(r, ['cooperating'])

    _, r = self.anagrams2.get_anagrams("cooperation")
    self.assertEqual(r, ['cooperation'])

    _, r = self.anagrams2.get_anagrams("cooperations")
    self.assertEqual(r, ['cooperations'])

    _, r = self.anagrams2.get_anagrams("cooperative")
    self.assertEqual(r, ['cooperative'])

    _, r = self.anagrams2.get_anagrams("cooperatively")
    self.assertEqual(r, ['cooperatively'])

    _, r = self.anagrams2.get_anagrams("cooperatives")
    self.assertEqual(r, ['cooperatives'])

    _, r = self.anagrams2.get_anagrams("cooperator")
    self.assertEqual(r, ['cooperator'])

    _, r = self.anagrams2.get_anagrams("cooperators")
    self.assertEqual(r, ['cooperators'])

    _, r = self.anagrams2.get_anagrams("coopers")
    self.assertEqual(r, ['coopers'])

    _, r = self.anagrams2.get_anagrams("coops")
    self.assertEqual(r, ['coops', 'scoop'])

    _, r = self.anagrams2.get_anagrams("coordinate")
    self.assertEqual(r, ['coordinate', 'decoration'])

    _, r = self.anagrams2.get_anagrams("coordinated")
    self.assertEqual(r, ['coordinated'])

    _, r = self.anagrams2.get_anagrams("coordinates")
    self.assertEqual(r, ['coordinates', 'decorations'])

    _, r = self.anagrams2.get_anagrams("coordinating")
    self.assertEqual(r, ['coordinating'])

    _, r = self.anagrams2.get_anagrams("coordination")
    self.assertEqual(r, ['coordination'])

    _, r = self.anagrams2.get_anagrams("coordinations")
    self.assertEqual(r, ['coordinations'])

    _, r = self.anagrams2.get_anagrams("coordinator")
    self.assertEqual(r, ['coordinator'])

    _, r = self.anagrams2.get_anagrams("coordinators")
    self.assertEqual(r, ['coordinators'])

    _, r = self.anagrams2.get_anagrams("coors")
    self.assertEqual(r, ['coors'])

    _, r = self.anagrams2.get_anagrams("cop")
    self.assertEqual(r, ['cop'])

    _, r = self.anagrams2.get_anagrams("cope")
    self.assertEqual(r, ['cope', 'opec'])

    _, r = self.anagrams2.get_anagrams("coped")
    self.assertEqual(r, ['coped'])

    _, r = self.anagrams2.get_anagrams("copeland")
    self.assertEqual(r, ['copeland'])

    _, r = self.anagrams2.get_anagrams("copenhagen")
    self.assertEqual(r, ['copenhagen'])

    _, r = self.anagrams2.get_anagrams("copernican")
    self.assertEqual(r, ['copernican'])

    _, r = self.anagrams2.get_anagrams("copernicus")
    self.assertEqual(r, ['copernicus'])

    _, r = self.anagrams2.get_anagrams("copes")
    self.assertEqual(r, ['copes', 'copse', 'pecos', 'scope'])

    _, r = self.anagrams2.get_anagrams("copied")
    self.assertEqual(r, ['copied'])

    _, r = self.anagrams2.get_anagrams("copier")
    self.assertEqual(r, ['copier'])

    _, r = self.anagrams2.get_anagrams("copiers")
    self.assertEqual(r, ['copiers'])

    _, r = self.anagrams2.get_anagrams("copies")
    self.assertEqual(r, ['copies'])

    _, r = self.anagrams2.get_anagrams("coping")
    self.assertEqual(r, ['coping'])

    _, r = self.anagrams2.get_anagrams("copings")
    self.assertEqual(r, ['copings', 'scoping'])

    _, r = self.anagrams2.get_anagrams("copious")
    self.assertEqual(r, ['copious'])

    _, r = self.anagrams2.get_anagrams("copiously")
    self.assertEqual(r, ['copiously'])

    _, r = self.anagrams2.get_anagrams("copiousness")
    self.assertEqual(r, ['copiousness'])

    _, r = self.anagrams2.get_anagrams("coplanar")
    self.assertEqual(r, ['coplanar'])

    _, r = self.anagrams2.get_anagrams("copper")
    self.assertEqual(r, ['copper'])

    _, r = self.anagrams2.get_anagrams("copperfield")
    self.assertEqual(r, ['copperfield'])

    _, r = self.anagrams2.get_anagrams("copperhead")
    self.assertEqual(r, ['copperhead'])

    _, r = self.anagrams2.get_anagrams("coppers")
    self.assertEqual(r, ['coppers'])

    _, r = self.anagrams2.get_anagrams("copra")
    self.assertEqual(r, ['copra'])

    _, r = self.anagrams2.get_anagrams("coprocessor")
    self.assertEqual(r, ['coprocessor'])

    _, r = self.anagrams2.get_anagrams("cops")
    self.assertEqual(r, ['cops'])

    _, r = self.anagrams2.get_anagrams("copse")
    self.assertEqual(r, ['copes', 'copse', 'pecos', 'scope'])

    _, r = self.anagrams2.get_anagrams("copy")
    self.assertEqual(r, ['copy'])

    _, r = self.anagrams2.get_anagrams("copying")
    self.assertEqual(r, ['copying'])

    _, r = self.anagrams2.get_anagrams("copyright")
    self.assertEqual(r, ['copyright'])

    _, r = self.anagrams2.get_anagrams("copyrightable")
    self.assertEqual(r, ['copyrightable'])

    _, r = self.anagrams2.get_anagrams("copyrighted")
    self.assertEqual(r, ['copyrighted'])

    _, r = self.anagrams2.get_anagrams("copyrights")
    self.assertEqual(r, ['copyrights'])

    _, r = self.anagrams2.get_anagrams("copywriter")
    self.assertEqual(r, ['copywriter'])

    _, r = self.anagrams2.get_anagrams("coquette")
    self.assertEqual(r, ['coquette'])

    _, r = self.anagrams2.get_anagrams("coral")
    self.assertEqual(r, ['carlo', 'carol', 'coral'])

    _, r = self.anagrams2.get_anagrams("corbett")
    self.assertEqual(r, ['corbett'])

    _, r = self.anagrams2.get_anagrams("corcoran")
    self.assertEqual(r, ['corcoran'])

    _, r = self.anagrams2.get_anagrams("cord")
    self.assertEqual(r, ['cord'])

    _, r = self.anagrams2.get_anagrams("corded")
    self.assertEqual(r, ['corded'])

    _, r = self.anagrams2.get_anagrams("corder")
    self.assertEqual(r, ['corder', 'record'])

    _, r = self.anagrams2.get_anagrams("cordial")
    self.assertEqual(r, ['cordial'])

    _, r = self.anagrams2.get_anagrams("cordiality")
    self.assertEqual(r, ['cordiality'])

    _, r = self.anagrams2.get_anagrams("cordially")
    self.assertEqual(r, ['cordially'])

    _, r = self.anagrams2.get_anagrams("cords")
    self.assertEqual(r, ['cords'])

    _, r = self.anagrams2.get_anagrams("core")
    self.assertEqual(r, ['core'])

    _, r = self.anagrams2.get_anagrams("cored")
    self.assertEqual(r, ['coder', 'cored'])

    _, r = self.anagrams2.get_anagrams("corer")
    self.assertEqual(r, ['corer'])

    _, r = self.anagrams2.get_anagrams("corers")
    self.assertEqual(r, ['corers', 'scorer'])

    _, r = self.anagrams2.get_anagrams("cores")
    self.assertEqual(r, ['cores', 'score'])

    _, r = self.anagrams2.get_anagrams("corey")
    self.assertEqual(r, ['corey', 'royce'])

    _, r = self.anagrams2.get_anagrams("coriander")
    self.assertEqual(r, ['coriander'])

    _, r = self.anagrams2.get_anagrams("coring")
    self.assertEqual(r, ['coring'])

    _, r = self.anagrams2.get_anagrams("corinth")
    self.assertEqual(r, ['corinth'])

    _, r = self.anagrams2.get_anagrams("corinthian")
    self.assertEqual(r, ['corinthian'])

    _, r = self.anagrams2.get_anagrams("corinthianize")
    self.assertEqual(r, ['corinthianize'])

    _, r = self.anagrams2.get_anagrams("corinthianizes")
    self.assertEqual(r, ['corinthianizes'])

    _, r = self.anagrams2.get_anagrams("corinthians")
    self.assertEqual(r, ['corinthians'])

    _, r = self.anagrams2.get_anagrams("coriolanus")
    self.assertEqual(r, ['coriolanus'])

    _, r = self.anagrams2.get_anagrams("cork")
    self.assertEqual(r, ['cork', 'rock'])

    _, r = self.anagrams2.get_anagrams("corked")
    self.assertEqual(r, ['corked', 'rocked'])

    _, r = self.anagrams2.get_anagrams("corker")
    self.assertEqual(r, ['corker', 'rocker'])

    _, r = self.anagrams2.get_anagrams("corkers")
    self.assertEqual(r, ['corkers', 'rockers'])

    _, r = self.anagrams2.get_anagrams("corking")
    self.assertEqual(r, ['corking', 'rocking'])

    _, r = self.anagrams2.get_anagrams("corks")
    self.assertEqual(r, ['corks', 'rocks'])

    _, r = self.anagrams2.get_anagrams("corkscrew")
    self.assertEqual(r, ['corkscrew'])

    _, r = self.anagrams2.get_anagrams("cormorant")
    self.assertEqual(r, ['cormorant'])

    _, r = self.anagrams2.get_anagrams("corn")
    self.assertEqual(r, ['corn'])

    _, r = self.anagrams2.get_anagrams("cornea")
    self.assertEqual(r, ['cornea'])

    _, r = self.anagrams2.get_anagrams("cornelia")
    self.assertEqual(r, ['caroline', 'cornelia'])

    _, r = self.anagrams2.get_anagrams("cornelian")
    self.assertEqual(r, ['cornelian'])

    _, r = self.anagrams2.get_anagrams("cornelius")
    self.assertEqual(r, ['cornelius'])

    _, r = self.anagrams2.get_anagrams("cornell")
    self.assertEqual(r, ['cornell'])

    _, r = self.anagrams2.get_anagrams("corner")
    self.assertEqual(r, ['corner'])

    _, r = self.anagrams2.get_anagrams("cornered")
    self.assertEqual(r, ['cornered'])

    _, r = self.anagrams2.get_anagrams("corners")
    self.assertEqual(r, ['corners', 'scorner'])

    _, r = self.anagrams2.get_anagrams("cornerstone")
    self.assertEqual(r, ['cornerstone'])

    _, r = self.anagrams2.get_anagrams("cornerstones")
    self.assertEqual(r, ['cornerstones'])

    _, r = self.anagrams2.get_anagrams("cornet")
    self.assertEqual(r, ['cornet'])

    _, r = self.anagrams2.get_anagrams("cornfield")
    self.assertEqual(r, ['cornfield'])

    _, r = self.anagrams2.get_anagrams("cornfields")
    self.assertEqual(r, ['cornfields'])

    _, r = self.anagrams2.get_anagrams("corning")
    self.assertEqual(r, ['corning'])

    _, r = self.anagrams2.get_anagrams("cornish")
    self.assertEqual(r, ['cornish'])

    _, r = self.anagrams2.get_anagrams("cornmeal")
    self.assertEqual(r, ['cornmeal'])

    _, r = self.anagrams2.get_anagrams("corns")
    self.assertEqual(r, ['corns', 'scorn'])

    _, r = self.anagrams2.get_anagrams("cornstarch")
    self.assertEqual(r, ['cornstarch'])

    _, r = self.anagrams2.get_anagrams("cornucopia")
    self.assertEqual(r, ['cornucopia'])

    _, r = self.anagrams2.get_anagrams("cornwall")
    self.assertEqual(r, ['cornwall'])

    _, r = self.anagrams2.get_anagrams("cornwallis")
    self.assertEqual(r, ['cornwallis'])

    _, r = self.anagrams2.get_anagrams("corny")
    self.assertEqual(r, ['corny'])

    _, r = self.anagrams2.get_anagrams("corollaries")
    self.assertEqual(r, ['corollaries'])

    _, r = self.anagrams2.get_anagrams("corollary")
    self.assertEqual(r, ['corollary'])

    _, r = self.anagrams2.get_anagrams("coronado")
    self.assertEqual(r, ['coronado'])

    _, r = self.anagrams2.get_anagrams("coronaries")
    self.assertEqual(r, ['coronaries'])

    _, r = self.anagrams2.get_anagrams("coronary")
    self.assertEqual(r, ['coronary'])

    _, r = self.anagrams2.get_anagrams("coronation")
    self.assertEqual(r, ['coronation'])

    _, r = self.anagrams2.get_anagrams("coroner")
    self.assertEqual(r, ['coroner'])

    _, r = self.anagrams2.get_anagrams("coronet")
    self.assertEqual(r, ['coronet'])

    _, r = self.anagrams2.get_anagrams("coronets")
    self.assertEqual(r, ['coronets'])

    _, r = self.anagrams2.get_anagrams("coroutine")
    self.assertEqual(r, ['coroutine'])

    _, r = self.anagrams2.get_anagrams("coroutines")
    self.assertEqual(r, ['coroutines'])

    _, r = self.anagrams2.get_anagrams("corporal")
    self.assertEqual(r, ['corporal'])

    _, r = self.anagrams2.get_anagrams("corporals")
    self.assertEqual(r, ['corporals'])

    _, r = self.anagrams2.get_anagrams("corporate")
    self.assertEqual(r, ['corporate'])

    _, r = self.anagrams2.get_anagrams("corporately")
    self.assertEqual(r, ['corporately'])

    _, r = self.anagrams2.get_anagrams("corporation")
    self.assertEqual(r, ['corporation'])

    _, r = self.anagrams2.get_anagrams("corporations")
    self.assertEqual(r, ['corporations'])

    _, r = self.anagrams2.get_anagrams("corps")
    self.assertEqual(r, ['corps', 'crops'])

    _, r = self.anagrams2.get_anagrams("corpse")
    self.assertEqual(r, ['corpse'])

    _, r = self.anagrams2.get_anagrams("corpses")
    self.assertEqual(r, ['corpses', 'process'])

    _, r = self.anagrams2.get_anagrams("corpulent")
    self.assertEqual(r, ['corpulent'])

    _, r = self.anagrams2.get_anagrams("corpus")
    self.assertEqual(r, ['corpus'])

    _, r = self.anagrams2.get_anagrams("corpuscular")
    self.assertEqual(r, ['corpuscular'])

    _, r = self.anagrams2.get_anagrams("corral")
    self.assertEqual(r, ['corral'])

    _, r = self.anagrams2.get_anagrams("correct")
    self.assertEqual(r, ['correct'])

    _, r = self.anagrams2.get_anagrams("correctable")
    self.assertEqual(r, ['correctable'])

    _, r = self.anagrams2.get_anagrams("corrected")
    self.assertEqual(r, ['corrected'])

    _, r = self.anagrams2.get_anagrams("correcting")
    self.assertEqual(r, ['correcting'])

    _, r = self.anagrams2.get_anagrams("correction")
    self.assertEqual(r, ['correction'])

    _, r = self.anagrams2.get_anagrams("corrections")
    self.assertEqual(r, ['corrections'])

    _, r = self.anagrams2.get_anagrams("corrective")
    self.assertEqual(r, ['corrective'])

    _, r = self.anagrams2.get_anagrams("correctively")
    self.assertEqual(r, ['correctively'])

    _, r = self.anagrams2.get_anagrams("correctives")
    self.assertEqual(r, ['correctives'])

    _, r = self.anagrams2.get_anagrams("correctly")
    self.assertEqual(r, ['correctly'])

    _, r = self.anagrams2.get_anagrams("correctness")
    self.assertEqual(r, ['correctness'])

    _, r = self.anagrams2.get_anagrams("corrector")
    self.assertEqual(r, ['corrector'])

    _, r = self.anagrams2.get_anagrams("corrects")
    self.assertEqual(r, ['corrects'])

    _, r = self.anagrams2.get_anagrams("correlate")
    self.assertEqual(r, ['correlate'])

    _, r = self.anagrams2.get_anagrams("correlated")
    self.assertEqual(r, ['correlated'])

    _, r = self.anagrams2.get_anagrams("correlates")
    self.assertEqual(r, ['correlates'])

    _, r = self.anagrams2.get_anagrams("correlating")
    self.assertEqual(r, ['correlating'])

    _, r = self.anagrams2.get_anagrams("correlation")
    self.assertEqual(r, ['correlation'])

    _, r = self.anagrams2.get_anagrams("correlations")
    self.assertEqual(r, ['correlations'])

    _, r = self.anagrams2.get_anagrams("correlative")
    self.assertEqual(r, ['correlative'])

    _, r = self.anagrams2.get_anagrams("correspond")
    self.assertEqual(r, ['correspond'])

    _, r = self.anagrams2.get_anagrams("corresponded")
    self.assertEqual(r, ['corresponded'])

    _, r = self.anagrams2.get_anagrams("correspondence")
    self.assertEqual(r, ['correspondence'])

    _, r = self.anagrams2.get_anagrams("correspondences")
    self.assertEqual(r, ['correspondences'])

    _, r = self.anagrams2.get_anagrams("correspondent")
    self.assertEqual(r, ['correspondent'])

    _, r = self.anagrams2.get_anagrams("correspondents")
    self.assertEqual(r, ['correspondents'])

    _, r = self.anagrams2.get_anagrams("corresponding")
    self.assertEqual(r, ['corresponding'])

    _, r = self.anagrams2.get_anagrams("correspondingly")
    self.assertEqual(r, ['correspondingly'])

    _, r = self.anagrams2.get_anagrams("corresponds")
    self.assertEqual(r, ['corresponds'])

    _, r = self.anagrams2.get_anagrams("corridor")
    self.assertEqual(r, ['corridor'])

    _, r = self.anagrams2.get_anagrams("corridors")
    self.assertEqual(r, ['corridors'])

    _, r = self.anagrams2.get_anagrams("corrigenda")
    self.assertEqual(r, ['corrigenda'])

    _, r = self.anagrams2.get_anagrams("corrigendum")
    self.assertEqual(r, ['corrigendum'])

    _, r = self.anagrams2.get_anagrams("corrigible")
    self.assertEqual(r, ['corrigible'])

    _, r = self.anagrams2.get_anagrams("corroborate")
    self.assertEqual(r, ['corroborate'])

    _, r = self.anagrams2.get_anagrams("corroborated")
    self.assertEqual(r, ['corroborated'])

    _, r = self.anagrams2.get_anagrams("corroborates")
    self.assertEqual(r, ['corroborates'])

    _, r = self.anagrams2.get_anagrams("corroborating")
    self.assertEqual(r, ['corroborating'])

    _, r = self.anagrams2.get_anagrams("corroboration")
    self.assertEqual(r, ['corroboration'])

    _, r = self.anagrams2.get_anagrams("corroborations")
    self.assertEqual(r, ['corroborations'])

    _, r = self.anagrams2.get_anagrams("corroborative")
    self.assertEqual(r, ['corroborative'])

    _, r = self.anagrams2.get_anagrams("corrode")
    self.assertEqual(r, ['corrode'])

    _, r = self.anagrams2.get_anagrams("corrosion")
    self.assertEqual(r, ['corrosion'])

    _, r = self.anagrams2.get_anagrams("corrosive")
    self.assertEqual(r, ['corrosive'])

    _, r = self.anagrams2.get_anagrams("corrugate")
    self.assertEqual(r, ['corrugate'])

    _, r = self.anagrams2.get_anagrams("corrupt")
    self.assertEqual(r, ['corrupt'])

    _, r = self.anagrams2.get_anagrams("corrupted")
    self.assertEqual(r, ['corrupted'])

    _, r = self.anagrams2.get_anagrams("corrupter")
    self.assertEqual(r, ['corrupter'])

    _, r = self.anagrams2.get_anagrams("corruptible")
    self.assertEqual(r, ['corruptible'])

    _, r = self.anagrams2.get_anagrams("corrupting")
    self.assertEqual(r, ['corrupting'])

    _, r = self.anagrams2.get_anagrams("corruption")
    self.assertEqual(r, ['corruption'])

    _, r = self.anagrams2.get_anagrams("corruptions")
    self.assertEqual(r, ['corruptions'])

    _, r = self.anagrams2.get_anagrams("corrupts")
    self.assertEqual(r, ['corrupts'])

    _, r = self.anagrams2.get_anagrams("corset")
    self.assertEqual(r, ['corset', 'escort', 'sector'])

    _, r = self.anagrams2.get_anagrams("corsica")
    self.assertEqual(r, ['corsica'])

    _, r = self.anagrams2.get_anagrams("corsican")
    self.assertEqual(r, ['corsican'])

    _, r = self.anagrams2.get_anagrams("cortex")
    self.assertEqual(r, ['cortex'])

    _, r = self.anagrams2.get_anagrams("cortez")
    self.assertEqual(r, ['cortez'])

    _, r = self.anagrams2.get_anagrams("cortical")
    self.assertEqual(r, ['cortical'])

    _, r = self.anagrams2.get_anagrams("cortland")
    self.assertEqual(r, ['cortland'])

    _, r = self.anagrams2.get_anagrams("corvallis")
    self.assertEqual(r, ['corvallis'])

    _, r = self.anagrams2.get_anagrams("corvus")
    self.assertEqual(r, ['corvus'])

    _, r = self.anagrams2.get_anagrams("corydoras")
    self.assertEqual(r, ['corydoras'])

    _, r = self.anagrams2.get_anagrams("cosgrove")
    self.assertEqual(r, ['cosgrove'])

    _, r = self.anagrams2.get_anagrams("cosine")
    self.assertEqual(r, ['cosine'])

    _, r = self.anagrams2.get_anagrams("cosines")
    self.assertEqual(r, ['cosines'])

    _, r = self.anagrams2.get_anagrams("cosmetic")
    self.assertEqual(r, ['cosmetic'])

    _, r = self.anagrams2.get_anagrams("cosmetics")
    self.assertEqual(r, ['cosmetics'])

    _, r = self.anagrams2.get_anagrams("cosmic")
    self.assertEqual(r, ['comics', 'cosmic'])

    _, r = self.anagrams2.get_anagrams("cosmology")
    self.assertEqual(r, ['cosmology'])

    _, r = self.anagrams2.get_anagrams("cosmopolitan")
    self.assertEqual(r, ['cosmopolitan'])

    _, r = self.anagrams2.get_anagrams("cosmos")
    self.assertEqual(r, ['cosmos'])

    _, r = self.anagrams2.get_anagrams("cosponsor")
    self.assertEqual(r, ['cosponsor'])

    _, r = self.anagrams2.get_anagrams("cossack")
    self.assertEqual(r, ['cassock', 'cossack'])

    _, r = self.anagrams2.get_anagrams("cost")
    self.assertEqual(r, ['cost', 'cots', 'scot'])

    _, r = self.anagrams2.get_anagrams("costa")
    self.assertEqual(r, ['ascot', 'coast', 'coats', 'costa', 'tosca'])

    _, r = self.anagrams2.get_anagrams("costed")
    self.assertEqual(r, ['costed'])

    _, r = self.anagrams2.get_anagrams("costello")
    self.assertEqual(r, ['costello'])

    _, r = self.anagrams2.get_anagrams("costing")
    self.assertEqual(r, ['costing'])

    _, r = self.anagrams2.get_anagrams("costly")
    self.assertEqual(r, ['costly'])

    _, r = self.anagrams2.get_anagrams("costs")
    self.assertEqual(r, ['costs', 'scots'])

    _, r = self.anagrams2.get_anagrams("costume")
    self.assertEqual(r, ['costume'])

    _, r = self.anagrams2.get_anagrams("costumed")
    self.assertEqual(r, ['costumed'])

    _, r = self.anagrams2.get_anagrams("costumer")
    self.assertEqual(r, ['costumer', 'customer'])

    _, r = self.anagrams2.get_anagrams("costumes")
    self.assertEqual(r, ['costumes'])

    _, r = self.anagrams2.get_anagrams("costuming")
    self.assertEqual(r, ['costuming'])

    _, r = self.anagrams2.get_anagrams("cosy")
    self.assertEqual(r, ['cosy'])

    _, r = self.anagrams2.get_anagrams("cot")
    self.assertEqual(r, ['cot'])

    _, r = self.anagrams2.get_anagrams("cotangent")
    self.assertEqual(r, ['cotangent'])

    _, r = self.anagrams2.get_anagrams("cotillion")
    self.assertEqual(r, ['cotillion'])

    _, r = self.anagrams2.get_anagrams("cots")
    self.assertEqual(r, ['cost', 'cots', 'scot'])

    _, r = self.anagrams2.get_anagrams("cottage")
    self.assertEqual(r, ['cottage'])

    _, r = self.anagrams2.get_anagrams("cottager")
    self.assertEqual(r, ['cottager'])

    _, r = self.anagrams2.get_anagrams("cottages")
    self.assertEqual(r, ['cottages'])

    _, r = self.anagrams2.get_anagrams("cotton")
    self.assertEqual(r, ['cotton'])

    _, r = self.anagrams2.get_anagrams("cottonmouth")
    self.assertEqual(r, ['cottonmouth'])

    _, r = self.anagrams2.get_anagrams("cottons")
    self.assertEqual(r, ['cottons'])

    _, r = self.anagrams2.get_anagrams("cottonseed")
    self.assertEqual(r, ['cottonseed'])

    _, r = self.anagrams2.get_anagrams("cottonwood")
    self.assertEqual(r, ['cottonwood'])

    _, r = self.anagrams2.get_anagrams("cottrell")
    self.assertEqual(r, ['cottrell'])

    _, r = self.anagrams2.get_anagrams("cotyledon")
    self.assertEqual(r, ['cotyledon'])

    _, r = self.anagrams2.get_anagrams("cotyledons")
    self.assertEqual(r, ['cotyledons'])

    _, r = self.anagrams2.get_anagrams("couch")
    self.assertEqual(r, ['couch'])

    _, r = self.anagrams2.get_anagrams("couched")
    self.assertEqual(r, ['couched'])

    _, r = self.anagrams2.get_anagrams("couches")
    self.assertEqual(r, ['couches'])

    _, r = self.anagrams2.get_anagrams("couching")
    self.assertEqual(r, ['couching'])

    _, r = self.anagrams2.get_anagrams("cougar")
    self.assertEqual(r, ['cougar'])

    _, r = self.anagrams2.get_anagrams("cough")
    self.assertEqual(r, ['cough'])

    _, r = self.anagrams2.get_anagrams("coughed")
    self.assertEqual(r, ['coughed'])

    _, r = self.anagrams2.get_anagrams("coughing")
    self.assertEqual(r, ['coughing'])

    _, r = self.anagrams2.get_anagrams("coughs")
    self.assertEqual(r, ['coughs'])

    _, r = self.anagrams2.get_anagrams("could")
    self.assertEqual(r, ['cloud', 'could'])

    _, r = self.anagrams2.get_anagrams("coulomb")
    self.assertEqual(r, ['coulomb'])

    _, r = self.anagrams2.get_anagrams("coulter")
    self.assertEqual(r, ['cloture', 'coulter'])

    _, r = self.anagrams2.get_anagrams("council")
    self.assertEqual(r, ['council'])

    _, r = self.anagrams2.get_anagrams("councillor")
    self.assertEqual(r, ['councillor'])

    _, r = self.anagrams2.get_anagrams("councillors")
    self.assertEqual(r, ['councillors'])

    _, r = self.anagrams2.get_anagrams("councilman")
    self.assertEqual(r, ['councilman'])

    _, r = self.anagrams2.get_anagrams("councilmen")
    self.assertEqual(r, ['councilmen'])

    _, r = self.anagrams2.get_anagrams("councils")
    self.assertEqual(r, ['councils'])

    _, r = self.anagrams2.get_anagrams("councilwoman")
    self.assertEqual(r, ['councilwoman'])

    _, r = self.anagrams2.get_anagrams("councilwomen")
    self.assertEqual(r, ['councilwomen'])

    _, r = self.anagrams2.get_anagrams("counsel")
    self.assertEqual(r, ['counsel'])

    _, r = self.anagrams2.get_anagrams("counseled")
    self.assertEqual(r, ['counseled'])

    _, r = self.anagrams2.get_anagrams("counseling")
    self.assertEqual(r, ['counseling'])

    _, r = self.anagrams2.get_anagrams("counselled")
    self.assertEqual(r, ['counselled'])

    _, r = self.anagrams2.get_anagrams("counselling")
    self.assertEqual(r, ['counselling'])

    _, r = self.anagrams2.get_anagrams("counsellor")
    self.assertEqual(r, ['counsellor'])

    _, r = self.anagrams2.get_anagrams("counsellors")
    self.assertEqual(r, ['counsellors'])

    _, r = self.anagrams2.get_anagrams("counselor")
    self.assertEqual(r, ['counselor'])

    _, r = self.anagrams2.get_anagrams("counselors")
    self.assertEqual(r, ['counselors'])

    _, r = self.anagrams2.get_anagrams("counsels")
    self.assertEqual(r, ['counsels'])

    _, r = self.anagrams2.get_anagrams("count")
    self.assertEqual(r, ['count'])

    _, r = self.anagrams2.get_anagrams("countable")
    self.assertEqual(r, ['countable'])

    _, r = self.anagrams2.get_anagrams("countably")
    self.assertEqual(r, ['countably'])

    _, r = self.anagrams2.get_anagrams("counted")
    self.assertEqual(r, ['counted'])

    _, r = self.anagrams2.get_anagrams("countenance")
    self.assertEqual(r, ['countenance'])

    _, r = self.anagrams2.get_anagrams("counter")
    self.assertEqual(r, ['counter', 'recount'])

    _, r = self.anagrams2.get_anagrams("counteract")
    self.assertEqual(r, ['counteract'])

    _, r = self.anagrams2.get_anagrams("counteracted")
    self.assertEqual(r, ['counteracted'])

    _, r = self.anagrams2.get_anagrams("counteracting")
    self.assertEqual(r, ['counteracting'])

    _, r = self.anagrams2.get_anagrams("counteractive")
    self.assertEqual(r, ['counteractive'])

    _, r = self.anagrams2.get_anagrams("counterargument")
    self.assertEqual(r, ['counterargument'])

    _, r = self.anagrams2.get_anagrams("counterattack")
    self.assertEqual(r, ['counterattack'])

    _, r = self.anagrams2.get_anagrams("counterbalance")
    self.assertEqual(r, ['counterbalance'])

    _, r = self.anagrams2.get_anagrams("counterclockwise")
    self.assertEqual(r, ['counterclockwise'])

    _, r = self.anagrams2.get_anagrams("countered")
    self.assertEqual(r, ['countered', 'recounted'])

    _, r = self.anagrams2.get_anagrams("counterexample")
    self.assertEqual(r, ['counterexample'])

    _, r = self.anagrams2.get_anagrams("counterexamples")
    self.assertEqual(r, ['counterexamples'])

    _, r = self.anagrams2.get_anagrams("counterfeit")
    self.assertEqual(r, ['counterfeit'])

    _, r = self.anagrams2.get_anagrams("counterfeited")
    self.assertEqual(r, ['counterfeited'])

    _, r = self.anagrams2.get_anagrams("counterfeiter")
    self.assertEqual(r, ['counterfeiter'])

    _, r = self.anagrams2.get_anagrams("counterfeiting")
    self.assertEqual(r, ['counterfeiting'])

    _, r = self.anagrams2.get_anagrams("counterflow")
    self.assertEqual(r, ['counterflow'])

    _, r = self.anagrams2.get_anagrams("countering")
    self.assertEqual(r, ['countering', 'recounting'])

    _, r = self.anagrams2.get_anagrams("counterintuitive")
    self.assertEqual(r, ['counterintuitive'])

    _, r = self.anagrams2.get_anagrams("counterman")
    self.assertEqual(r, ['counterman'])

    _, r = self.anagrams2.get_anagrams("countermeasure")
    self.assertEqual(r, ['countermeasure'])

    _, r = self.anagrams2.get_anagrams("countermeasures")
    self.assertEqual(r, ['countermeasures'])

    _, r = self.anagrams2.get_anagrams("countermen")
    self.assertEqual(r, ['countermen'])

    _, r = self.anagrams2.get_anagrams("counterpart")
    self.assertEqual(r, ['counterpart'])

    _, r = self.anagrams2.get_anagrams("counterparts")
    self.assertEqual(r, ['counterparts'])

    _, r = self.anagrams2.get_anagrams("counterpoint")
    self.assertEqual(r, ['counterpoint'])

    _, r = self.anagrams2.get_anagrams("counterpointing")
    self.assertEqual(r, ['counterpointing'])

    _, r = self.anagrams2.get_anagrams("counterpoise")
    self.assertEqual(r, ['counterpoise'])

    _, r = self.anagrams2.get_anagrams("counterproductive")
    self.assertEqual(r, ['counterproductive'])

    _, r = self.anagrams2.get_anagrams("counterproposal")
    self.assertEqual(r, ['counterproposal'])

    _, r = self.anagrams2.get_anagrams("counterrevolution")
    self.assertEqual(r, ['counterrevolution'])

    _, r = self.anagrams2.get_anagrams("counters")
    self.assertEqual(r, ['construe', 'counters', 'recounts'])

    _, r = self.anagrams2.get_anagrams("countersink")
    self.assertEqual(r, ['countersink'])

    _, r = self.anagrams2.get_anagrams("countersunk")
    self.assertEqual(r, ['countersunk'])

    _, r = self.anagrams2.get_anagrams("countess")
    self.assertEqual(r, ['countess'])

    _, r = self.anagrams2.get_anagrams("counties")
    self.assertEqual(r, ['counties'])

    _, r = self.anagrams2.get_anagrams("counting")
    self.assertEqual(r, ['counting'])

    _, r = self.anagrams2.get_anagrams("countless")
    self.assertEqual(r, ['countless'])

    _, r = self.anagrams2.get_anagrams("countries")
    self.assertEqual(r, ['countries'])

    _, r = self.anagrams2.get_anagrams("country")
    self.assertEqual(r, ['country'])

    _, r = self.anagrams2.get_anagrams("countryman")
    self.assertEqual(r, ['countryman'])

    _, r = self.anagrams2.get_anagrams("countrymen")
    self.assertEqual(r, ['countrymen'])

    _, r = self.anagrams2.get_anagrams("countryside")
    self.assertEqual(r, ['countryside'])

    _, r = self.anagrams2.get_anagrams("countrywide")
    self.assertEqual(r, ['countrywide'])

    _, r = self.anagrams2.get_anagrams("counts")
    self.assertEqual(r, ['counts', 'tucson'])

    _, r = self.anagrams2.get_anagrams("county")
    self.assertEqual(r, ['county'])

    _, r = self.anagrams2.get_anagrams("countywide")
    self.assertEqual(r, ['countywide'])

    _, r = self.anagrams2.get_anagrams("couple")
    self.assertEqual(r, ['couple'])

    _, r = self.anagrams2.get_anagrams("coupled")
    self.assertEqual(r, ['coupled'])

    _, r = self.anagrams2.get_anagrams("coupler")
    self.assertEqual(r, ['coupler'])

    _, r = self.anagrams2.get_anagrams("couplers")
    self.assertEqual(r, ['couplers'])

    _, r = self.anagrams2.get_anagrams("couples")
    self.assertEqual(r, ['closeup', 'couples'])

    _, r = self.anagrams2.get_anagrams("coupling")
    self.assertEqual(r, ['coupling'])

    _, r = self.anagrams2.get_anagrams("couplings")
    self.assertEqual(r, ['couplings'])

    _, r = self.anagrams2.get_anagrams("coupon")
    self.assertEqual(r, ['coupon'])

    _, r = self.anagrams2.get_anagrams("coupons")
    self.assertEqual(r, ['coupons'])

    _, r = self.anagrams2.get_anagrams("courage")
    self.assertEqual(r, ['courage'])

    _, r = self.anagrams2.get_anagrams("courageous")
    self.assertEqual(r, ['courageous'])

    _, r = self.anagrams2.get_anagrams("courageously")
    self.assertEqual(r, ['courageously'])

    _, r = self.anagrams2.get_anagrams("courier")
    self.assertEqual(r, ['courier'])

    _, r = self.anagrams2.get_anagrams("couriers")
    self.assertEqual(r, ['couriers'])

    _, r = self.anagrams2.get_anagrams("course")
    self.assertEqual(r, ['course', 'crusoe', 'source'])

    _, r = self.anagrams2.get_anagrams("coursed")
    self.assertEqual(r, ['coursed', 'scoured'])

    _, r = self.anagrams2.get_anagrams("courser")
    self.assertEqual(r, ['courser'])

    _, r = self.anagrams2.get_anagrams("courses")
    self.assertEqual(r, ['courses', 'sources'])

    _, r = self.anagrams2.get_anagrams("coursing")
    self.assertEqual(r, ['coursing', 'scouring'])

    _, r = self.anagrams2.get_anagrams("court")
    self.assertEqual(r, ['court'])

    _, r = self.anagrams2.get_anagrams("courted")
    self.assertEqual(r, ['courted'])

    _, r = self.anagrams2.get_anagrams("courteous")
    self.assertEqual(r, ['courteous'])

    _, r = self.anagrams2.get_anagrams("courteously")
    self.assertEqual(r, ['courteously'])

    _, r = self.anagrams2.get_anagrams("courter")
    self.assertEqual(r, ['courter'])

    _, r = self.anagrams2.get_anagrams("courters")
    self.assertEqual(r, ['courters'])

    _, r = self.anagrams2.get_anagrams("courtesan")
    self.assertEqual(r, ['courtesan'])

    _, r = self.anagrams2.get_anagrams("courtesies")
    self.assertEqual(r, ['courtesies'])

    _, r = self.anagrams2.get_anagrams("courtesy")
    self.assertEqual(r, ['courtesy'])

    _, r = self.anagrams2.get_anagrams("courthouse")
    self.assertEqual(r, ['courthouse'])

    _, r = self.anagrams2.get_anagrams("courthouses")
    self.assertEqual(r, ['courthouses'])

    _, r = self.anagrams2.get_anagrams("courtier")
    self.assertEqual(r, ['courtier'])

    _, r = self.anagrams2.get_anagrams("courtiers")
    self.assertEqual(r, ['courtiers'])

    _, r = self.anagrams2.get_anagrams("courting")
    self.assertEqual(r, ['courting'])

    _, r = self.anagrams2.get_anagrams("courtly")
    self.assertEqual(r, ['courtly'])

    _, r = self.anagrams2.get_anagrams("courtney")
    self.assertEqual(r, ['courtney'])

    _, r = self.anagrams2.get_anagrams("courtroom")
    self.assertEqual(r, ['courtroom'])

    _, r = self.anagrams2.get_anagrams("courtrooms")
    self.assertEqual(r, ['courtrooms'])

    _, r = self.anagrams2.get_anagrams("courts")
    self.assertEqual(r, ['courts'])

    _, r = self.anagrams2.get_anagrams("courtship")
    self.assertEqual(r, ['courtship'])

    _, r = self.anagrams2.get_anagrams("courtyard")
    self.assertEqual(r, ['courtyard'])

    _, r = self.anagrams2.get_anagrams("courtyards")
    self.assertEqual(r, ['courtyards'])

    _, r = self.anagrams2.get_anagrams("cousin")
    self.assertEqual(r, ['cousin'])

    _, r = self.anagrams2.get_anagrams("cousins")
    self.assertEqual(r, ['cousins'])

    _, r = self.anagrams2.get_anagrams("covalent")
    self.assertEqual(r, ['covalent'])

    _, r = self.anagrams2.get_anagrams("covariant")
    self.assertEqual(r, ['covariant'])

    _, r = self.anagrams2.get_anagrams("cove")
    self.assertEqual(r, ['cove'])

    _, r = self.anagrams2.get_anagrams("covenant")
    self.assertEqual(r, ['covenant'])

    _, r = self.anagrams2.get_anagrams("covenants")
    self.assertEqual(r, ['covenants'])

    _, r = self.anagrams2.get_anagrams("covent")
    self.assertEqual(r, ['covent'])

    _, r = self.anagrams2.get_anagrams("coventry")
    self.assertEqual(r, ['coventry'])

    _, r = self.anagrams2.get_anagrams("cover")
    self.assertEqual(r, ['cover'])

    _, r = self.anagrams2.get_anagrams("coverable")
    self.assertEqual(r, ['coverable', 'revocable'])

    _, r = self.anagrams2.get_anagrams("coverage")
    self.assertEqual(r, ['coverage'])

    _, r = self.anagrams2.get_anagrams("covered")
    self.assertEqual(r, ['covered'])

    _, r = self.anagrams2.get_anagrams("covering")
    self.assertEqual(r, ['covering'])

    _, r = self.anagrams2.get_anagrams("coverings")
    self.assertEqual(r, ['coverings'])

    _, r = self.anagrams2.get_anagrams("coverlet")
    self.assertEqual(r, ['coverlet'])

    _, r = self.anagrams2.get_anagrams("coverlets")
    self.assertEqual(r, ['coverlets'])

    _, r = self.anagrams2.get_anagrams("covers")
    self.assertEqual(r, ['covers'])

    _, r = self.anagrams2.get_anagrams("covert")
    self.assertEqual(r, ['covert', 'vector'])

    _, r = self.anagrams2.get_anagrams("covertly")
    self.assertEqual(r, ['covertly'])

    _, r = self.anagrams2.get_anagrams("coves")
    self.assertEqual(r, ['coves'])

    _, r = self.anagrams2.get_anagrams("covet")
    self.assertEqual(r, ['covet'])

    _, r = self.anagrams2.get_anagrams("coveted")
    self.assertEqual(r, ['coveted'])

    _, r = self.anagrams2.get_anagrams("coveting")
    self.assertEqual(r, ['coveting'])

    _, r = self.anagrams2.get_anagrams("covetous")
    self.assertEqual(r, ['covetous'])

    _, r = self.anagrams2.get_anagrams("covetousness")
    self.assertEqual(r, ['covetousness'])

    _, r = self.anagrams2.get_anagrams("covets")
    self.assertEqual(r, ['covets'])

    _, r = self.anagrams2.get_anagrams("cow")
    self.assertEqual(r, ['cow'])

    _, r = self.anagrams2.get_anagrams("cowan")
    self.assertEqual(r, ['cowan'])

    _, r = self.anagrams2.get_anagrams("coward")
    self.assertEqual(r, ['coward'])

    _, r = self.anagrams2.get_anagrams("cowardice")
    self.assertEqual(r, ['cowardice'])

    _, r = self.anagrams2.get_anagrams("cowardly")
    self.assertEqual(r, ['cowardly'])

    _, r = self.anagrams2.get_anagrams("cowboy")
    self.assertEqual(r, ['cowboy'])

    _, r = self.anagrams2.get_anagrams("cowboys")
    self.assertEqual(r, ['cowboys'])

    _, r = self.anagrams2.get_anagrams("cowed")
    self.assertEqual(r, ['cowed'])

    _, r = self.anagrams2.get_anagrams("cower")
    self.assertEqual(r, ['cower'])

    _, r = self.anagrams2.get_anagrams("cowered")
    self.assertEqual(r, ['cowered'])

    _, r = self.anagrams2.get_anagrams("cowerer")
    self.assertEqual(r, ['cowerer'])

    _, r = self.anagrams2.get_anagrams("cowerers")
    self.assertEqual(r, ['cowerers'])

    _, r = self.anagrams2.get_anagrams("cowering")
    self.assertEqual(r, ['cowering'])

    _, r = self.anagrams2.get_anagrams("coweringly")
    self.assertEqual(r, ['coweringly'])

    _, r = self.anagrams2.get_anagrams("cowers")
    self.assertEqual(r, ['cowers', 'escrow'])

    _, r = self.anagrams2.get_anagrams("cowherd")
    self.assertEqual(r, ['chowder', 'cowherd'])

    _, r = self.anagrams2.get_anagrams("cowhide")
    self.assertEqual(r, ['cowhide'])

    _, r = self.anagrams2.get_anagrams("cowing")
    self.assertEqual(r, ['cowing'])

    _, r = self.anagrams2.get_anagrams("cowl")
    self.assertEqual(r, ['cowl'])

    _, r = self.anagrams2.get_anagrams("cowlick")
    self.assertEqual(r, ['cowlick'])

    _, r = self.anagrams2.get_anagrams("cowling")
    self.assertEqual(r, ['cowling'])

    _, r = self.anagrams2.get_anagrams("cowls")
    self.assertEqual(r, ['cowls', 'scowl'])

    _, r = self.anagrams2.get_anagrams("coworker")
    self.assertEqual(r, ['coworker'])

    _, r = self.anagrams2.get_anagrams("cows")
    self.assertEqual(r, ['cows', 'scow'])

    _, r = self.anagrams2.get_anagrams("cowslip")
    self.assertEqual(r, ['cowslip'])

    _, r = self.anagrams2.get_anagrams("cowslips")
    self.assertEqual(r, ['cowslips'])

    _, r = self.anagrams2.get_anagrams("coyote")
    self.assertEqual(r, ['coyote'])

    _, r = self.anagrams2.get_anagrams("coyotes")
    self.assertEqual(r, ['coyotes'])

    _, r = self.anagrams2.get_anagrams("coypu")
    self.assertEqual(r, ['coypu'])

    _, r = self.anagrams2.get_anagrams("cozier")
    self.assertEqual(r, ['cozier'])

    _, r = self.anagrams2.get_anagrams("coziness")
    self.assertEqual(r, ['coziness'])

    _, r = self.anagrams2.get_anagrams("cozy")
    self.assertEqual(r, ['cozy'])

    _, r = self.anagrams2.get_anagrams("crab")
    self.assertEqual(r, ['crab'])

    _, r = self.anagrams2.get_anagrams("crabapple")
    self.assertEqual(r, ['crabapple'])

    _, r = self.anagrams2.get_anagrams("crabs")
    self.assertEqual(r, ['crabs'])

    _, r = self.anagrams2.get_anagrams("crack")
    self.assertEqual(r, ['crack'])

    _, r = self.anagrams2.get_anagrams("cracked")
    self.assertEqual(r, ['cracked'])

    _, r = self.anagrams2.get_anagrams("cracker")
    self.assertEqual(r, ['cracker'])

    _, r = self.anagrams2.get_anagrams("crackers")
    self.assertEqual(r, ['crackers'])

    _, r = self.anagrams2.get_anagrams("cracking")
    self.assertEqual(r, ['cracking'])

    _, r = self.anagrams2.get_anagrams("crackle")
    self.assertEqual(r, ['cackler', 'crackle'])

    _, r = self.anagrams2.get_anagrams("crackled")
    self.assertEqual(r, ['crackled'])

    _, r = self.anagrams2.get_anagrams("crackles")
    self.assertEqual(r, ['crackles'])

    _, r = self.anagrams2.get_anagrams("crackling")
    self.assertEqual(r, ['crackling'])

    _, r = self.anagrams2.get_anagrams("crackpot")
    self.assertEqual(r, ['crackpot'])

    _, r = self.anagrams2.get_anagrams("cracks")
    self.assertEqual(r, ['cracks'])

    _, r = self.anagrams2.get_anagrams("cradle")
    self.assertEqual(r, ['calder', 'cradle'])

    _, r = self.anagrams2.get_anagrams("cradled")
    self.assertEqual(r, ['cradled'])

    _, r = self.anagrams2.get_anagrams("cradles")
    self.assertEqual(r, ['cradles'])

    _, r = self.anagrams2.get_anagrams("craft")
    self.assertEqual(r, ['craft'])

    _, r = self.anagrams2.get_anagrams("crafted")
    self.assertEqual(r, ['crafted'])

    _, r = self.anagrams2.get_anagrams("crafter")
    self.assertEqual(r, ['crafter', 'refract'])

    _, r = self.anagrams2.get_anagrams("craftiness")
    self.assertEqual(r, ['craftiness'])

    _, r = self.anagrams2.get_anagrams("crafting")
    self.assertEqual(r, ['crafting'])

    _, r = self.anagrams2.get_anagrams("crafts")
    self.assertEqual(r, ['crafts'])

    _, r = self.anagrams2.get_anagrams("craftsman")
    self.assertEqual(r, ['craftsman'])

    _, r = self.anagrams2.get_anagrams("craftsmen")
    self.assertEqual(r, ['craftsmen'])

    _, r = self.anagrams2.get_anagrams("craftspeople")
    self.assertEqual(r, ['craftspeople'])

    _, r = self.anagrams2.get_anagrams("craftsperson")
    self.assertEqual(r, ['craftsperson'])

    _, r = self.anagrams2.get_anagrams("crafty")
    self.assertEqual(r, ['crafty'])

    _, r = self.anagrams2.get_anagrams("crag")
    self.assertEqual(r, ['crag'])

    _, r = self.anagrams2.get_anagrams("craggy")
    self.assertEqual(r, ['craggy'])

    _, r = self.anagrams2.get_anagrams("crags")
    self.assertEqual(r, ['crags'])

    _, r = self.anagrams2.get_anagrams("craig")
    self.assertEqual(r, ['cigar', 'craig'])

    _, r = self.anagrams2.get_anagrams("cram")
    self.assertEqual(r, ['cram', 'marc'])

    _, r = self.anagrams2.get_anagrams("cramer")
    self.assertEqual(r, ['cramer'])

    _, r = self.anagrams2.get_anagrams("cramming")
    self.assertEqual(r, ['cramming'])

    _, r = self.anagrams2.get_anagrams("cramp")
    self.assertEqual(r, ['cramp'])

    _, r = self.anagrams2.get_anagrams("cramps")
    self.assertEqual(r, ['cramps'])

    _, r = self.anagrams2.get_anagrams("crams")
    self.assertEqual(r, ['crams', 'scram'])

    _, r = self.anagrams2.get_anagrams("cranberries")
    self.assertEqual(r, ['cranberries'])

    _, r = self.anagrams2.get_anagrams("cranberry")
    self.assertEqual(r, ['cranberry'])

    _, r = self.anagrams2.get_anagrams("crandall")
    self.assertEqual(r, ['crandall'])

    _, r = self.anagrams2.get_anagrams("crane")
    self.assertEqual(r, ['caner', 'crane'])

    _, r = self.anagrams2.get_anagrams("cranes")
    self.assertEqual(r, ['cranes'])

    _, r = self.anagrams2.get_anagrams("cranford")
    self.assertEqual(r, ['cranford'])

    _, r = self.anagrams2.get_anagrams("crania")
    self.assertEqual(r, ['crania'])

    _, r = self.anagrams2.get_anagrams("cranium")
    self.assertEqual(r, ['cranium'])

    _, r = self.anagrams2.get_anagrams("crank")
    self.assertEqual(r, ['crank'])

    _, r = self.anagrams2.get_anagrams("crankcase")
    self.assertEqual(r, ['crankcase'])

    _, r = self.anagrams2.get_anagrams("cranked")
    self.assertEqual(r, ['cranked'])

    _, r = self.anagrams2.get_anagrams("crankier")
    self.assertEqual(r, ['crankier'])

    _, r = self.anagrams2.get_anagrams("crankiest")
    self.assertEqual(r, ['crankiest'])

    _, r = self.anagrams2.get_anagrams("crankily")
    self.assertEqual(r, ['crankily'])

    _, r = self.anagrams2.get_anagrams("cranking")
    self.assertEqual(r, ['cranking'])

    _, r = self.anagrams2.get_anagrams("cranks")
    self.assertEqual(r, ['cranks'])

    _, r = self.anagrams2.get_anagrams("crankshaft")
    self.assertEqual(r, ['crankshaft'])

    _, r = self.anagrams2.get_anagrams("cranky")
    self.assertEqual(r, ['cranky'])

    _, r = self.anagrams2.get_anagrams("cranny")
    self.assertEqual(r, ['cranny'])

    _, r = self.anagrams2.get_anagrams("cranston")
    self.assertEqual(r, ['cranston', 'scranton'])

    _, r = self.anagrams2.get_anagrams("crash")
    self.assertEqual(r, ['chars', 'crash'])

    _, r = self.anagrams2.get_anagrams("crashed")
    self.assertEqual(r, ['crashed'])

    _, r = self.anagrams2.get_anagrams("crasher")
    self.assertEqual(r, ['archers', 'crasher'])

    _, r = self.anagrams2.get_anagrams("crashers")
    self.assertEqual(r, ['crashers'])

    _, r = self.anagrams2.get_anagrams("crashes")
    self.assertEqual(r, ['cashers', 'chasers', 'crashes'])

    _, r = self.anagrams2.get_anagrams("crashing")
    self.assertEqual(r, ['crashing'])

    _, r = self.anagrams2.get_anagrams("crass")
    self.assertEqual(r, ['crass', 'scars'])

    _, r = self.anagrams2.get_anagrams("crate")
    self.assertEqual(r, ['caret', 'cater', 'crate', 'react', 'recta', 'trace'])

    _, r = self.anagrams2.get_anagrams("crater")
    self.assertEqual(r, ['carter', 'crater', 'tracer'])

    _, r = self.anagrams2.get_anagrams("craters")
    self.assertEqual(r, ['carters', 'craters', 'tracers'])

    _, r = self.anagrams2.get_anagrams("crates")
    self.assertEqual(r, ['caster', 'caters', 'crates', 'reacts', 'recast', 'traces'])

    _, r = self.anagrams2.get_anagrams("cravat")
    self.assertEqual(r, ['cravat'])

    _, r = self.anagrams2.get_anagrams("cravats")
    self.assertEqual(r, ['cravats'])

    _, r = self.anagrams2.get_anagrams("crave")
    self.assertEqual(r, ['carve', 'crave'])

    _, r = self.anagrams2.get_anagrams("craved")
    self.assertEqual(r, ['carved', 'craved'])

    _, r = self.anagrams2.get_anagrams("craven")
    self.assertEqual(r, ['cavern', 'craven'])

    _, r = self.anagrams2.get_anagrams("craves")
    self.assertEqual(r, ['carves', 'craves'])

    _, r = self.anagrams2.get_anagrams("craving")
    self.assertEqual(r, ['carving', 'craving'])

    _, r = self.anagrams2.get_anagrams("crawford")
    self.assertEqual(r, ['crawford'])

    _, r = self.anagrams2.get_anagrams("crawl")
    self.assertEqual(r, ['crawl'])

    _, r = self.anagrams2.get_anagrams("crawled")
    self.assertEqual(r, ['crawled'])

    _, r = self.anagrams2.get_anagrams("crawler")
    self.assertEqual(r, ['crawler'])

    _, r = self.anagrams2.get_anagrams("crawlers")
    self.assertEqual(r, ['crawlers'])

    _, r = self.anagrams2.get_anagrams("crawling")
    self.assertEqual(r, ['crawling'])

    _, r = self.anagrams2.get_anagrams("crawls")
    self.assertEqual(r, ['crawls', 'scrawl'])

    _, r = self.anagrams2.get_anagrams("cray")
    self.assertEqual(r, ['cray'])

    _, r = self.anagrams2.get_anagrams("crayon")
    self.assertEqual(r, ['crayon'])

    _, r = self.anagrams2.get_anagrams("crays")
    self.assertEqual(r, ['crays', 'scary'])

    _, r = self.anagrams2.get_anagrams("craze")
    self.assertEqual(r, ['craze'])

    _, r = self.anagrams2.get_anagrams("crazed")
    self.assertEqual(r, ['crazed'])

    _, r = self.anagrams2.get_anagrams("crazes")
    self.assertEqual(r, ['crazes'])

    _, r = self.anagrams2.get_anagrams("crazier")
    self.assertEqual(r, ['crazier'])

    _, r = self.anagrams2.get_anagrams("craziest")
    self.assertEqual(r, ['craziest'])

    _, r = self.anagrams2.get_anagrams("crazily")
    self.assertEqual(r, ['crazily'])

    _, r = self.anagrams2.get_anagrams("craziness")
    self.assertEqual(r, ['craziness'])

    _, r = self.anagrams2.get_anagrams("crazing")
    self.assertEqual(r, ['crazing'])

    _, r = self.anagrams2.get_anagrams("crazy")
    self.assertEqual(r, ['crazy'])

    _, r = self.anagrams2.get_anagrams("creak")
    self.assertEqual(r, ['creak'])

    _, r = self.anagrams2.get_anagrams("creaked")
    self.assertEqual(r, ['creaked'])

    _, r = self.anagrams2.get_anagrams("creaking")
    self.assertEqual(r, ['creaking'])

    _, r = self.anagrams2.get_anagrams("creaks")
    self.assertEqual(r, ['creaks', 'sacker'])

    _, r = self.anagrams2.get_anagrams("creaky")
    self.assertEqual(r, ['creaky'])

    _, r = self.anagrams2.get_anagrams("cream")
    self.assertEqual(r, ['cream'])

    _, r = self.anagrams2.get_anagrams("creamed")
    self.assertEqual(r, ['creamed'])

    _, r = self.anagrams2.get_anagrams("creamer")
    self.assertEqual(r, ['creamer'])

    _, r = self.anagrams2.get_anagrams("creamers")
    self.assertEqual(r, ['creamers', 'screamer'])

    _, r = self.anagrams2.get_anagrams("creamery")
    self.assertEqual(r, ['creamery'])

    _, r = self.anagrams2.get_anagrams("creaming")
    self.assertEqual(r, ['creaming', 'germanic'])

    _, r = self.anagrams2.get_anagrams("creams")
    self.assertEqual(r, ['creams', 'scream'])

    _, r = self.anagrams2.get_anagrams("creamy")
    self.assertEqual(r, ['creamy'])

    _, r = self.anagrams2.get_anagrams("crease")
    self.assertEqual(r, ['cesare', 'crease'])

    _, r = self.anagrams2.get_anagrams("creased")
    self.assertEqual(r, ['creased'])

    _, r = self.anagrams2.get_anagrams("creases")
    self.assertEqual(r, ['creases'])

    _, r = self.anagrams2.get_anagrams("creasing")
    self.assertEqual(r, ['creasing'])

    _, r = self.anagrams2.get_anagrams("create")
    self.assertEqual(r, ['create'])

    _, r = self.anagrams2.get_anagrams("created")
    self.assertEqual(r, ['catered', 'created', 'reacted'])

    _, r = self.anagrams2.get_anagrams("creates")
    self.assertEqual(r, ['creates'])

    _, r = self.anagrams2.get_anagrams("creating")
    self.assertEqual(r, ['catering', 'creating', 'reacting'])

    _, r = self.anagrams2.get_anagrams("creation")
    self.assertEqual(r, ['creation', 'reaction'])

    _, r = self.anagrams2.get_anagrams("creations")
    self.assertEqual(r, ['creations', 'reactions'])

    _, r = self.anagrams2.get_anagrams("creative")
    self.assertEqual(r, ['creative', 'reactive'])

    _, r = self.anagrams2.get_anagrams("creatively")
    self.assertEqual(r, ['creatively', 'reactively'])

    _, r = self.anagrams2.get_anagrams("creativeness")
    self.assertEqual(r, ['creativeness'])

    _, r = self.anagrams2.get_anagrams("creativity")
    self.assertEqual(r, ['creativity', 'reactivity'])

    _, r = self.anagrams2.get_anagrams("creator")
    self.assertEqual(r, ['creator', 'reactor'])

    _, r = self.anagrams2.get_anagrams("creators")
    self.assertEqual(r, ['creators', 'reactors'])

    _, r = self.anagrams2.get_anagrams("creature")
    self.assertEqual(r, ['creature'])

    _, r = self.anagrams2.get_anagrams("creatures")
    self.assertEqual(r, ['creatures'])

    _, r = self.anagrams2.get_anagrams("credence")
    self.assertEqual(r, ['credence'])

    _, r = self.anagrams2.get_anagrams("credential")
    self.assertEqual(r, ['credential', 'interlaced'])

    _, r = self.anagrams2.get_anagrams("credibility")
    self.assertEqual(r, ['credibility'])

    _, r = self.anagrams2.get_anagrams("credible")
    self.assertEqual(r, ['credible'])

    _, r = self.anagrams2.get_anagrams("credibly")
    self.assertEqual(r, ['credibly'])

    _, r = self.anagrams2.get_anagrams("credit")
    self.assertEqual(r, ['credit', 'direct'])

    _, r = self.anagrams2.get_anagrams("creditable")
    self.assertEqual(r, ['creditable'])

    _, r = self.anagrams2.get_anagrams("creditably")
    self.assertEqual(r, ['creditably'])

    _, r = self.anagrams2.get_anagrams("credited")
    self.assertEqual(r, ['credited', 'directed'])

    _, r = self.anagrams2.get_anagrams("crediting")
    self.assertEqual(r, ['crediting', 'directing'])

    _, r = self.anagrams2.get_anagrams("creditor")
    self.assertEqual(r, ['creditor', 'director'])

    _, r = self.anagrams2.get_anagrams("creditors")
    self.assertEqual(r, ['creditors', 'directors'])

    _, r = self.anagrams2.get_anagrams("credits")
    self.assertEqual(r, ['credits', 'directs'])

    _, r = self.anagrams2.get_anagrams("credulity")
    self.assertEqual(r, ['credulity'])

    _, r = self.anagrams2.get_anagrams("credulous")
    self.assertEqual(r, ['credulous'])

    _, r = self.anagrams2.get_anagrams("credulousness")
    self.assertEqual(r, ['credulousness'])

    _, r = self.anagrams2.get_anagrams("cree")
    self.assertEqual(r, ['cree'])

    _, r = self.anagrams2.get_anagrams("creed")
    self.assertEqual(r, ['creed'])

    _, r = self.anagrams2.get_anagrams("creeds")
    self.assertEqual(r, ['creeds'])

    _, r = self.anagrams2.get_anagrams("creek")
    self.assertEqual(r, ['creek'])

    _, r = self.anagrams2.get_anagrams("creeks")
    self.assertEqual(r, ['creeks'])

    _, r = self.anagrams2.get_anagrams("creep")
    self.assertEqual(r, ['creep', 'crepe'])

    _, r = self.anagrams2.get_anagrams("creeper")
    self.assertEqual(r, ['creeper'])

    _, r = self.anagrams2.get_anagrams("creepers")
    self.assertEqual(r, ['creepers'])

    _, r = self.anagrams2.get_anagrams("creeping")
    self.assertEqual(r, ['creeping'])

    _, r = self.anagrams2.get_anagrams("creeps")
    self.assertEqual(r, ['creeps'])

    _, r = self.anagrams2.get_anagrams("creepy")
    self.assertEqual(r, ['creepy'])

    _, r = self.anagrams2.get_anagrams("creighton")
    self.assertEqual(r, ['creighton'])

    _, r = self.anagrams2.get_anagrams("cremate")
    self.assertEqual(r, ['cremate'])

    _, r = self.anagrams2.get_anagrams("cremated")
    self.assertEqual(r, ['cremated'])

    _, r = self.anagrams2.get_anagrams("cremates")
    self.assertEqual(r, ['cremates'])

    _, r = self.anagrams2.get_anagrams("cremating")
    self.assertEqual(r, ['cremating'])

    _, r = self.anagrams2.get_anagrams("cremation")
    self.assertEqual(r, ['cremation'])

    _, r = self.anagrams2.get_anagrams("cremations")
    self.assertEqual(r, ['cremations'])

    _, r = self.anagrams2.get_anagrams("crematory")
    self.assertEqual(r, ['crematory'])

    _, r = self.anagrams2.get_anagrams("creole")
    self.assertEqual(r, ['creole'])

    _, r = self.anagrams2.get_anagrams("creon")
    self.assertEqual(r, ['creon'])

    _, r = self.anagrams2.get_anagrams("crepe")
    self.assertEqual(r, ['creep', 'crepe'])

    _, r = self.anagrams2.get_anagrams("crept")
    self.assertEqual(r, ['crept'])

    _, r = self.anagrams2.get_anagrams("crescent")
    self.assertEqual(r, ['crescent'])

    _, r = self.anagrams2.get_anagrams("crescents")
    self.assertEqual(r, ['crescents'])

    _, r = self.anagrams2.get_anagrams("crest")
    self.assertEqual(r, ['crest'])

    _, r = self.anagrams2.get_anagrams("crested")
    self.assertEqual(r, ['crested'])

    _, r = self.anagrams2.get_anagrams("crestfallen")
    self.assertEqual(r, ['crestfallen'])

    _, r = self.anagrams2.get_anagrams("crests")
    self.assertEqual(r, ['crests'])

    _, r = self.anagrams2.get_anagrams("crestview")
    self.assertEqual(r, ['crestview'])

    _, r = self.anagrams2.get_anagrams("cretaceous")
    self.assertEqual(r, ['cretaceous'])

    _, r = self.anagrams2.get_anagrams("cretaceously")
    self.assertEqual(r, ['cretaceously'])

    _, r = self.anagrams2.get_anagrams("cretan")
    self.assertEqual(r, ['cretan', 'nectar', 'recant', 'trance'])

    _, r = self.anagrams2.get_anagrams("crete")
    self.assertEqual(r, ['crete', 'erect'])

    _, r = self.anagrams2.get_anagrams("cretin")
    self.assertEqual(r, ['cretin'])

    _, r = self.anagrams2.get_anagrams("crevice")
    self.assertEqual(r, ['crevice'])

    _, r = self.anagrams2.get_anagrams("crevices")
    self.assertEqual(r, ['crevices'])

    _, r = self.anagrams2.get_anagrams("crew")
    self.assertEqual(r, ['crew'])

    _, r = self.anagrams2.get_anagrams("crewcut")
    self.assertEqual(r, ['crewcut'])

    _, r = self.anagrams2.get_anagrams("crewed")
    self.assertEqual(r, ['crewed'])

    _, r = self.anagrams2.get_anagrams("crewing")
    self.assertEqual(r, ['crewing'])

    _, r = self.anagrams2.get_anagrams("crews")
    self.assertEqual(r, ['crews', 'screw'])

    _, r = self.anagrams2.get_anagrams("crib")
    self.assertEqual(r, ['crib'])

    _, r = self.anagrams2.get_anagrams("cribs")
    self.assertEqual(r, ['cribs'])

    _, r = self.anagrams2.get_anagrams("cricket")
    self.assertEqual(r, ['cricket'])

    _, r = self.anagrams2.get_anagrams("crickets")
    self.assertEqual(r, ['crickets'])

    _, r = self.anagrams2.get_anagrams("cried")
    self.assertEqual(r, ['cider', 'cried'])

    _, r = self.anagrams2.get_anagrams("crier")
    self.assertEqual(r, ['crier'])

    _, r = self.anagrams2.get_anagrams("criers")
    self.assertEqual(r, ['criers'])

    _, r = self.anagrams2.get_anagrams("cries")
    self.assertEqual(r, ['cries'])

    _, r = self.anagrams2.get_anagrams("crime")
    self.assertEqual(r, ['crime'])

    _, r = self.anagrams2.get_anagrams("crimea")
    self.assertEqual(r, ['crimea'])

    _, r = self.anagrams2.get_anagrams("crimean")
    self.assertEqual(r, ['crimean'])

    _, r = self.anagrams2.get_anagrams("crimes")
    self.assertEqual(r, ['crimes'])

    _, r = self.anagrams2.get_anagrams("criminal")
    self.assertEqual(r, ['criminal'])

    _, r = self.anagrams2.get_anagrams("criminally")
    self.assertEqual(r, ['criminally'])

    _, r = self.anagrams2.get_anagrams("criminals")
    self.assertEqual(r, ['criminals'])

    _, r = self.anagrams2.get_anagrams("criminate")
    self.assertEqual(r, ['criminate'])

    _, r = self.anagrams2.get_anagrams("crimson")
    self.assertEqual(r, ['crimson'])

    _, r = self.anagrams2.get_anagrams("crimsoning")
    self.assertEqual(r, ['crimsoning'])

    _, r = self.anagrams2.get_anagrams("cringe")
    self.assertEqual(r, ['cringe'])

    _, r = self.anagrams2.get_anagrams("cringed")
    self.assertEqual(r, ['cringed'])

    _, r = self.anagrams2.get_anagrams("cringes")
    self.assertEqual(r, ['cringes'])

    _, r = self.anagrams2.get_anagrams("cringing")
    self.assertEqual(r, ['cringing'])

    _, r = self.anagrams2.get_anagrams("cripple")
    self.assertEqual(r, ['clipper', 'cripple'])

    _, r = self.anagrams2.get_anagrams("crippled")
    self.assertEqual(r, ['crippled'])

    _, r = self.anagrams2.get_anagrams("cripples")
    self.assertEqual(r, ['clippers', 'cripples'])

    _, r = self.anagrams2.get_anagrams("crippling")
    self.assertEqual(r, ['crippling'])

    _, r = self.anagrams2.get_anagrams("crises")
    self.assertEqual(r, ['crises'])

    _, r = self.anagrams2.get_anagrams("crisis")
    self.assertEqual(r, ['crisis'])

    _, r = self.anagrams2.get_anagrams("crisp")
    self.assertEqual(r, ['crisp'])

    _, r = self.anagrams2.get_anagrams("crispin")
    self.assertEqual(r, ['crispin'])

    _, r = self.anagrams2.get_anagrams("crisply")
    self.assertEqual(r, ['crisply'])

    _, r = self.anagrams2.get_anagrams("crispness")
    self.assertEqual(r, ['crispness'])

    _, r = self.anagrams2.get_anagrams("crisscross")
    self.assertEqual(r, ['crisscross'])

    _, r = self.anagrams2.get_anagrams("criteria")
    self.assertEqual(r, ['criteria'])

    _, r = self.anagrams2.get_anagrams("criterion")
    self.assertEqual(r, ['criterion'])

    _, r = self.anagrams2.get_anagrams("critic")
    self.assertEqual(r, ['critic'])

    _, r = self.anagrams2.get_anagrams("critical")
    self.assertEqual(r, ['critical'])

    _, r = self.anagrams2.get_anagrams("critically")
    self.assertEqual(r, ['critically'])

    _, r = self.anagrams2.get_anagrams("criticism")
    self.assertEqual(r, ['criticism'])

    _, r = self.anagrams2.get_anagrams("criticisms")
    self.assertEqual(r, ['criticisms'])

    _, r = self.anagrams2.get_anagrams("criticize")
    self.assertEqual(r, ['criticize'])

    _, r = self.anagrams2.get_anagrams("criticized")
    self.assertEqual(r, ['criticized'])

    _, r = self.anagrams2.get_anagrams("criticizes")
    self.assertEqual(r, ['criticizes'])

    _, r = self.anagrams2.get_anagrams("criticizing")
    self.assertEqual(r, ['criticizing'])

    _, r = self.anagrams2.get_anagrams("critics")
    self.assertEqual(r, ['critics'])

    _, r = self.anagrams2.get_anagrams("critique")
    self.assertEqual(r, ['critique'])

    _, r = self.anagrams2.get_anagrams("critiques")
    self.assertEqual(r, ['critiques'])

    _, r = self.anagrams2.get_anagrams("critiquing")
    self.assertEqual(r, ['critiquing'])

    _, r = self.anagrams2.get_anagrams("critter")
    self.assertEqual(r, ['critter'])

    _, r = self.anagrams2.get_anagrams("croak")
    self.assertEqual(r, ['croak'])

    _, r = self.anagrams2.get_anagrams("croaked")
    self.assertEqual(r, ['croaked'])

    _, r = self.anagrams2.get_anagrams("croaking")
    self.assertEqual(r, ['croaking'])

    _, r = self.anagrams2.get_anagrams("croaks")
    self.assertEqual(r, ['croaks'])

    _, r = self.anagrams2.get_anagrams("croatia")
    self.assertEqual(r, ['croatia'])

    _, r = self.anagrams2.get_anagrams("croatian")
    self.assertEqual(r, ['croatian', 'raincoat'])

    _, r = self.anagrams2.get_anagrams("crochet")
    self.assertEqual(r, ['crochet'])

    _, r = self.anagrams2.get_anagrams("crochets")
    self.assertEqual(r, ['crochets'])

    _, r = self.anagrams2.get_anagrams("crock")
    self.assertEqual(r, ['crock'])

    _, r = self.anagrams2.get_anagrams("crockery")
    self.assertEqual(r, ['crockery'])

    _, r = self.anagrams2.get_anagrams("crockett")
    self.assertEqual(r, ['crockett'])

    _, r = self.anagrams2.get_anagrams("crocks")
    self.assertEqual(r, ['crocks'])

    _, r = self.anagrams2.get_anagrams("crocodile")
    self.assertEqual(r, ['crocodile'])

    _, r = self.anagrams2.get_anagrams("crocus")
    self.assertEqual(r, ['crocus', 'occurs', 'succor'])

    _, r = self.anagrams2.get_anagrams("croft")
    self.assertEqual(r, ['croft'])

    _, r = self.anagrams2.get_anagrams("croix")
    self.assertEqual(r, ['croix'])

    _, r = self.anagrams2.get_anagrams("cromwell")
    self.assertEqual(r, ['cromwell'])

    _, r = self.anagrams2.get_anagrams("cromwellian")
    self.assertEqual(r, ['cromwellian'])

    _, r = self.anagrams2.get_anagrams("crook")
    self.assertEqual(r, ['crook'])

    _, r = self.anagrams2.get_anagrams("crooked")
    self.assertEqual(r, ['crooked'])

    _, r = self.anagrams2.get_anagrams("crooks")
    self.assertEqual(r, ['crooks'])

    _, r = self.anagrams2.get_anagrams("crop")
    self.assertEqual(r, ['crop'])

    _, r = self.anagrams2.get_anagrams("cropped")
    self.assertEqual(r, ['cropped'])

    _, r = self.anagrams2.get_anagrams("cropper")
    self.assertEqual(r, ['cropper'])

    _, r = self.anagrams2.get_anagrams("croppers")
    self.assertEqual(r, ['croppers'])

    _, r = self.anagrams2.get_anagrams("cropping")
    self.assertEqual(r, ['cropping'])

    _, r = self.anagrams2.get_anagrams("crops")
    self.assertEqual(r, ['corps', 'crops'])

    _, r = self.anagrams2.get_anagrams("crosby")
    self.assertEqual(r, ['crosby'])

    _, r = self.anagrams2.get_anagrams("cross")
    self.assertEqual(r, ['cross'])

    _, r = self.anagrams2.get_anagrams("crossable")
    self.assertEqual(r, ['crossable'])

    _, r = self.anagrams2.get_anagrams("crossbar")
    self.assertEqual(r, ['crossbar'])

    _, r = self.anagrams2.get_anagrams("crossbars")
    self.assertEqual(r, ['crossbars'])

    _, r = self.anagrams2.get_anagrams("crossed")
    self.assertEqual(r, ['crossed'])

    _, r = self.anagrams2.get_anagrams("crosser")
    self.assertEqual(r, ['crosser', 'scorers'])

    _, r = self.anagrams2.get_anagrams("crossers")
    self.assertEqual(r, ['crossers'])

    _, r = self.anagrams2.get_anagrams("crosses")
    self.assertEqual(r, ['crosses'])

    _, r = self.anagrams2.get_anagrams("crossing")
    self.assertEqual(r, ['crossing', 'scorings'])

    _, r = self.anagrams2.get_anagrams("crossings")
    self.assertEqual(r, ['crossings'])

    _, r = self.anagrams2.get_anagrams("crossly")
    self.assertEqual(r, ['crossly'])

    _, r = self.anagrams2.get_anagrams("crossover")
    self.assertEqual(r, ['crossover'])

    _, r = self.anagrams2.get_anagrams("crossovers")
    self.assertEqual(r, ['crossovers'])

    _, r = self.anagrams2.get_anagrams("crosspoint")
    self.assertEqual(r, ['crosspoint'])

    _, r = self.anagrams2.get_anagrams("crossroad")
    self.assertEqual(r, ['crossroad'])

    _, r = self.anagrams2.get_anagrams("crosstalk")
    self.assertEqual(r, ['crosstalk'])

    _, r = self.anagrams2.get_anagrams("crosswalk")
    self.assertEqual(r, ['crosswalk'])

    _, r = self.anagrams2.get_anagrams("crossword")
    self.assertEqual(r, ['crossword'])

    _, r = self.anagrams2.get_anagrams("crosswords")
    self.assertEqual(r, ['crosswords'])

    _, r = self.anagrams2.get_anagrams("crotch")
    self.assertEqual(r, ['crotch'])

    _, r = self.anagrams2.get_anagrams("crotchety")
    self.assertEqual(r, ['crotchety'])

    _, r = self.anagrams2.get_anagrams("crouch")
    self.assertEqual(r, ['crouch'])

    _, r = self.anagrams2.get_anagrams("crouched")
    self.assertEqual(r, ['crouched'])

    _, r = self.anagrams2.get_anagrams("crouching")
    self.assertEqual(r, ['crouching'])

    _, r = self.anagrams2.get_anagrams("crow")
    self.assertEqual(r, ['crow'])

    _, r = self.anagrams2.get_anagrams("crowd")
    self.assertEqual(r, ['crowd'])

    _, r = self.anagrams2.get_anagrams("crowded")
    self.assertEqual(r, ['crowded'])

    _, r = self.anagrams2.get_anagrams("crowder")
    self.assertEqual(r, ['crowder'])

    _, r = self.anagrams2.get_anagrams("crowding")
    self.assertEqual(r, ['crowding'])

    _, r = self.anagrams2.get_anagrams("crowds")
    self.assertEqual(r, ['crowds'])

    _, r = self.anagrams2.get_anagrams("crowed")
    self.assertEqual(r, ['crowed'])

    _, r = self.anagrams2.get_anagrams("crowing")
    self.assertEqual(r, ['crowing'])

    _, r = self.anagrams2.get_anagrams("crowley")
    self.assertEqual(r, ['crowley'])

    _, r = self.anagrams2.get_anagrams("crown")
    self.assertEqual(r, ['crown'])

    _, r = self.anagrams2.get_anagrams("crowned")
    self.assertEqual(r, ['crowned'])

    _, r = self.anagrams2.get_anagrams("crowning")
    self.assertEqual(r, ['crowning'])

    _, r = self.anagrams2.get_anagrams("crowns")
    self.assertEqual(r, ['crowns'])

    _, r = self.anagrams2.get_anagrams("crows")
    self.assertEqual(r, ['crows'])

    _, r = self.anagrams2.get_anagrams("croydon")
    self.assertEqual(r, ['croydon'])

    _, r = self.anagrams2.get_anagrams("crucial")
    self.assertEqual(r, ['crucial'])

    _, r = self.anagrams2.get_anagrams("crucially")
    self.assertEqual(r, ['crucially'])

    _, r = self.anagrams2.get_anagrams("crucible")
    self.assertEqual(r, ['crucible'])

    _, r = self.anagrams2.get_anagrams("crucified")
    self.assertEqual(r, ['crucified'])

    _, r = self.anagrams2.get_anagrams("crucifies")
    self.assertEqual(r, ['crucifies'])

    _, r = self.anagrams2.get_anagrams("crucifix")
    self.assertEqual(r, ['crucifix'])

    _, r = self.anagrams2.get_anagrams("crucifixion")
    self.assertEqual(r, ['crucifixion'])

    _, r = self.anagrams2.get_anagrams("crucify")
    self.assertEqual(r, ['crucify'])

    _, r = self.anagrams2.get_anagrams("crucifying")
    self.assertEqual(r, ['crucifying'])

    _, r = self.anagrams2.get_anagrams("crud")
    self.assertEqual(r, ['crud', 'curd'])

    _, r = self.anagrams2.get_anagrams("cruddy")
    self.assertEqual(r, ['cruddy'])

    _, r = self.anagrams2.get_anagrams("crude")
    self.assertEqual(r, ['crude', 'cured'])

    _, r = self.anagrams2.get_anagrams("crudely")
    self.assertEqual(r, ['crudely'])

    _, r = self.anagrams2.get_anagrams("crudeness")
    self.assertEqual(r, ['crudeness'])

    _, r = self.anagrams2.get_anagrams("cruder")
    self.assertEqual(r, ['cruder'])

    _, r = self.anagrams2.get_anagrams("crudest")
    self.assertEqual(r, ['crudest'])

    _, r = self.anagrams2.get_anagrams("cruel")
    self.assertEqual(r, ['cruel', 'ulcer'])

    _, r = self.anagrams2.get_anagrams("crueler")
    self.assertEqual(r, ['crueler'])

    _, r = self.anagrams2.get_anagrams("cruelest")
    self.assertEqual(r, ['cruelest', 'lectures'])

    _, r = self.anagrams2.get_anagrams("cruelly")
    self.assertEqual(r, ['cruelly'])

    _, r = self.anagrams2.get_anagrams("cruelty")
    self.assertEqual(r, ['cruelty'])

    _, r = self.anagrams2.get_anagrams("cruickshank")
    self.assertEqual(r, ['cruickshank'])

    _, r = self.anagrams2.get_anagrams("cruise")
    self.assertEqual(r, ['cruise'])

    _, r = self.anagrams2.get_anagrams("cruiser")
    self.assertEqual(r, ['cruiser', 'curries'])

    _, r = self.anagrams2.get_anagrams("cruisers")
    self.assertEqual(r, ['cruisers'])

    _, r = self.anagrams2.get_anagrams("cruises")
    self.assertEqual(r, ['cruises'])

    _, r = self.anagrams2.get_anagrams("cruising")
    self.assertEqual(r, ['cruising'])

    _, r = self.anagrams2.get_anagrams("crumb")
    self.assertEqual(r, ['crumb'])

    _, r = self.anagrams2.get_anagrams("crumble")
    self.assertEqual(r, ['crumble'])

    _, r = self.anagrams2.get_anagrams("crumbled")
    self.assertEqual(r, ['crumbled'])

    _, r = self.anagrams2.get_anagrams("crumbles")
    self.assertEqual(r, ['crumbles'])

    _, r = self.anagrams2.get_anagrams("crumbling")
    self.assertEqual(r, ['crumbling'])

    _, r = self.anagrams2.get_anagrams("crumbly")
    self.assertEqual(r, ['crumbly'])

    _, r = self.anagrams2.get_anagrams("crumbs")
    self.assertEqual(r, ['crumbs'])

    _, r = self.anagrams2.get_anagrams("crummy")
    self.assertEqual(r, ['crummy'])

    _, r = self.anagrams2.get_anagrams("crumple")
    self.assertEqual(r, ['crumple'])

    _, r = self.anagrams2.get_anagrams("crumpled")
    self.assertEqual(r, ['crumpled'])

    _, r = self.anagrams2.get_anagrams("crumples")
    self.assertEqual(r, ['crumples'])

    _, r = self.anagrams2.get_anagrams("crumpling")
    self.assertEqual(r, ['crumpling'])

    _, r = self.anagrams2.get_anagrams("crunch")
    self.assertEqual(r, ['crunch'])

    _, r = self.anagrams2.get_anagrams("crunched")
    self.assertEqual(r, ['crunched'])

    _, r = self.anagrams2.get_anagrams("crunches")
    self.assertEqual(r, ['crunches'])

    _, r = self.anagrams2.get_anagrams("crunchier")
    self.assertEqual(r, ['crunchier'])

    _, r = self.anagrams2.get_anagrams("crunchiest")
    self.assertEqual(r, ['crunchiest'])

    _, r = self.anagrams2.get_anagrams("crunching")
    self.assertEqual(r, ['crunching'])

    _, r = self.anagrams2.get_anagrams("crunchy")
    self.assertEqual(r, ['crunchy'])

    _, r = self.anagrams2.get_anagrams("crusade")
    self.assertEqual(r, ['crusade'])

    _, r = self.anagrams2.get_anagrams("crusader")
    self.assertEqual(r, ['crusader'])

    _, r = self.anagrams2.get_anagrams("crusaders")
    self.assertEqual(r, ['crusaders'])

    _, r = self.anagrams2.get_anagrams("crusades")
    self.assertEqual(r, ['crusades'])

    _, r = self.anagrams2.get_anagrams("crusading")
    self.assertEqual(r, ['crusading'])

    _, r = self.anagrams2.get_anagrams("crush")
    self.assertEqual(r, ['crush'])

    _, r = self.anagrams2.get_anagrams("crushable")
    self.assertEqual(r, ['crushable'])

    _, r = self.anagrams2.get_anagrams("crushed")
    self.assertEqual(r, ['crushed'])

    _, r = self.anagrams2.get_anagrams("crusher")
    self.assertEqual(r, ['crusher'])

    _, r = self.anagrams2.get_anagrams("crushers")
    self.assertEqual(r, ['crushers'])

    _, r = self.anagrams2.get_anagrams("crushes")
    self.assertEqual(r, ['crushes'])

    _, r = self.anagrams2.get_anagrams("crushing")
    self.assertEqual(r, ['crushing'])

    _, r = self.anagrams2.get_anagrams("crushingly")
    self.assertEqual(r, ['crushingly'])

    _, r = self.anagrams2.get_anagrams("crusoe")
    self.assertEqual(r, ['course', 'crusoe', 'source'])

    _, r = self.anagrams2.get_anagrams("crust")
    self.assertEqual(r, ['crust'])

    _, r = self.anagrams2.get_anagrams("crustacean")
    self.assertEqual(r, ['crustacean'])

    _, r = self.anagrams2.get_anagrams("crustaceans")
    self.assertEqual(r, ['crustaceans'])

    _, r = self.anagrams2.get_anagrams("crusts")
    self.assertEqual(r, ['crusts'])

    _, r = self.anagrams2.get_anagrams("crutch")
    self.assertEqual(r, ['crutch'])

    _, r = self.anagrams2.get_anagrams("crutches")
    self.assertEqual(r, ['crutches'])

    _, r = self.anagrams2.get_anagrams("crux")
    self.assertEqual(r, ['crux'])

    _, r = self.anagrams2.get_anagrams("cruxes")
    self.assertEqual(r, ['cruxes'])

    _, r = self.anagrams2.get_anagrams("cruz")
    self.assertEqual(r, ['cruz'])

    _, r = self.anagrams2.get_anagrams("cry")
    self.assertEqual(r, ['cry'])

    _, r = self.anagrams2.get_anagrams("crying")
    self.assertEqual(r, ['crying'])

    _, r = self.anagrams2.get_anagrams("cryogenic")
    self.assertEqual(r, ['cryogenic'])

    _, r = self.anagrams2.get_anagrams("crypt")
    self.assertEqual(r, ['crypt'])

    _, r = self.anagrams2.get_anagrams("cryptanalysis")
    self.assertEqual(r, ['cryptanalysis'])

    _, r = self.anagrams2.get_anagrams("cryptanalyst")
    self.assertEqual(r, ['cryptanalyst'])

    _, r = self.anagrams2.get_anagrams("cryptanalytic")
    self.assertEqual(r, ['cryptanalytic'])

    _, r = self.anagrams2.get_anagrams("cryptic")
    self.assertEqual(r, ['cryptic'])

    _, r = self.anagrams2.get_anagrams("cryptogram")
    self.assertEqual(r, ['cryptogram'])

    _, r = self.anagrams2.get_anagrams("cryptographer")
    self.assertEqual(r, ['cryptographer'])

    _, r = self.anagrams2.get_anagrams("cryptographic")
    self.assertEqual(r, ['cryptographic'])

    _, r = self.anagrams2.get_anagrams("cryptographically")
    self.assertEqual(r, ['cryptographically'])

    _, r = self.anagrams2.get_anagrams("cryptography")
    self.assertEqual(r, ['cryptography'])

    _, r = self.anagrams2.get_anagrams("cryptologist")
    self.assertEqual(r, ['cryptologist'])

    _, r = self.anagrams2.get_anagrams("cryptology")
    self.assertEqual(r, ['cryptology'])

    _, r = self.anagrams2.get_anagrams("crystal")
    self.assertEqual(r, ['crystal'])

    _, r = self.anagrams2.get_anagrams("crystalline")
    self.assertEqual(r, ['crystalline'])

    _, r = self.anagrams2.get_anagrams("crystallize")
    self.assertEqual(r, ['crystallize'])

    _, r = self.anagrams2.get_anagrams("crystallized")
    self.assertEqual(r, ['crystallized'])

    _, r = self.anagrams2.get_anagrams("crystallizes")
    self.assertEqual(r, ['crystallizes'])

    _, r = self.anagrams2.get_anagrams("crystallizing")
    self.assertEqual(r, ['crystallizing'])

    _, r = self.anagrams2.get_anagrams("crystals")
    self.assertEqual(r, ['crystals'])

    _, r = self.anagrams2.get_anagrams("cub")
    self.assertEqual(r, ['cub'])

    _, r = self.anagrams2.get_anagrams("cuba")
    self.assertEqual(r, ['cuba'])

    _, r = self.anagrams2.get_anagrams("cuban")
    self.assertEqual(r, ['cuban'])

    _, r = self.anagrams2.get_anagrams("cubanize")
    self.assertEqual(r, ['cubanize'])

    _, r = self.anagrams2.get_anagrams("cubanizes")
    self.assertEqual(r, ['cubanizes'])

    _, r = self.anagrams2.get_anagrams("cubans")
    self.assertEqual(r, ['cubans'])

    _, r = self.anagrams2.get_anagrams("cubbyhole")
    self.assertEqual(r, ['cubbyhole'])

    _, r = self.anagrams2.get_anagrams("cube")
    self.assertEqual(r, ['cube'])

    _, r = self.anagrams2.get_anagrams("cubed")
    self.assertEqual(r, ['cubed'])

    _, r = self.anagrams2.get_anagrams("cubes")
    self.assertEqual(r, ['cubes'])

    _, r = self.anagrams2.get_anagrams("cubic")
    self.assertEqual(r, ['cubic'])

    _, r = self.anagrams2.get_anagrams("cubs")
    self.assertEqual(r, ['cubs'])

    _, r = self.anagrams2.get_anagrams("cuckoo")
    self.assertEqual(r, ['cuckoo'])

    _, r = self.anagrams2.get_anagrams("cuckoos")
    self.assertEqual(r, ['cuckoos'])

    _, r = self.anagrams2.get_anagrams("cucumber")
    self.assertEqual(r, ['cucumber'])

    _, r = self.anagrams2.get_anagrams("cucumbers")
    self.assertEqual(r, ['cucumbers'])

    _, r = self.anagrams2.get_anagrams("cuddle")
    self.assertEqual(r, ['cuddle'])

    _, r = self.anagrams2.get_anagrams("cuddled")
    self.assertEqual(r, ['cuddled'])

    _, r = self.anagrams2.get_anagrams("cuddly")
    self.assertEqual(r, ['cuddly'])

    _, r = self.anagrams2.get_anagrams("cudgel")
    self.assertEqual(r, ['cudgel'])

    _, r = self.anagrams2.get_anagrams("cudgels")
    self.assertEqual(r, ['cudgels'])

    _, r = self.anagrams2.get_anagrams("cue")
    self.assertEqual(r, ['cue'])

    _, r = self.anagrams2.get_anagrams("cued")
    self.assertEqual(r, ['cued'])

    _, r = self.anagrams2.get_anagrams("cues")
    self.assertEqual(r, ['cues'])

    _, r = self.anagrams2.get_anagrams("cuff")
    self.assertEqual(r, ['cuff'])

    _, r = self.anagrams2.get_anagrams("cufflink")
    self.assertEqual(r, ['cufflink'])

    _, r = self.anagrams2.get_anagrams("cuffs")
    self.assertEqual(r, ['cuffs'])

    _, r = self.anagrams2.get_anagrams("cuisine")
    self.assertEqual(r, ['cuisine'])

    _, r = self.anagrams2.get_anagrams("culbertson")
    self.assertEqual(r, ['culbertson'])

    _, r = self.anagrams2.get_anagrams("culinary")
    self.assertEqual(r, ['culinary'])

    _, r = self.anagrams2.get_anagrams("cull")
    self.assertEqual(r, ['cull'])

    _, r = self.anagrams2.get_anagrams("culled")
    self.assertEqual(r, ['culled'])

    _, r = self.anagrams2.get_anagrams("culler")
    self.assertEqual(r, ['culler'])

    _, r = self.anagrams2.get_anagrams("culling")
    self.assertEqual(r, ['culling'])

    _, r = self.anagrams2.get_anagrams("culls")
    self.assertEqual(r, ['culls'])

    _, r = self.anagrams2.get_anagrams("culminate")
    self.assertEqual(r, ['culminate'])

    _, r = self.anagrams2.get_anagrams("culminated")
    self.assertEqual(r, ['culminated'])

    _, r = self.anagrams2.get_anagrams("culminates")
    self.assertEqual(r, ['culminates'])

    _, r = self.anagrams2.get_anagrams("culminating")
    self.assertEqual(r, ['culminating'])

    _, r = self.anagrams2.get_anagrams("culmination")
    self.assertEqual(r, ['culmination'])

    _, r = self.anagrams2.get_anagrams("culpa")
    self.assertEqual(r, ['culpa'])

    _, r = self.anagrams2.get_anagrams("culpable")
    self.assertEqual(r, ['culpable'])

    _, r = self.anagrams2.get_anagrams("culprit")
    self.assertEqual(r, ['culprit'])

    _, r = self.anagrams2.get_anagrams("culprits")
    self.assertEqual(r, ['culprits'])

    _, r = self.anagrams2.get_anagrams("cult")
    self.assertEqual(r, ['cult'])

    _, r = self.anagrams2.get_anagrams("cultivable")
    self.assertEqual(r, ['cultivable'])

    _, r = self.anagrams2.get_anagrams("cultivate")
    self.assertEqual(r, ['cultivate'])

    _, r = self.anagrams2.get_anagrams("cultivated")
    self.assertEqual(r, ['cultivated'])

    _, r = self.anagrams2.get_anagrams("cultivates")
    self.assertEqual(r, ['cultivates'])

    _, r = self.anagrams2.get_anagrams("cultivating")
    self.assertEqual(r, ['cultivating'])

    _, r = self.anagrams2.get_anagrams("cultivation")
    self.assertEqual(r, ['cultivation'])

    _, r = self.anagrams2.get_anagrams("cultivations")
    self.assertEqual(r, ['cultivations'])

    _, r = self.anagrams2.get_anagrams("cultivator")
    self.assertEqual(r, ['cultivator'])

    _, r = self.anagrams2.get_anagrams("cultivators")
    self.assertEqual(r, ['cultivators'])

    _, r = self.anagrams2.get_anagrams("cults")
    self.assertEqual(r, ['cults'])

    _, r = self.anagrams2.get_anagrams("cultural")
    self.assertEqual(r, ['cultural'])

    _, r = self.anagrams2.get_anagrams("culturally")
    self.assertEqual(r, ['culturally'])

    _, r = self.anagrams2.get_anagrams("culture")
    self.assertEqual(r, ['culture'])

    _, r = self.anagrams2.get_anagrams("cultured")
    self.assertEqual(r, ['cultured'])

    _, r = self.anagrams2.get_anagrams("cultures")
    self.assertEqual(r, ['cultures'])

    _, r = self.anagrams2.get_anagrams("culturing")
    self.assertEqual(r, ['culturing'])

    _, r = self.anagrams2.get_anagrams("culver")
    self.assertEqual(r, ['culver'])

    _, r = self.anagrams2.get_anagrams("culvers")
    self.assertEqual(r, ['culvers'])

    _, r = self.anagrams2.get_anagrams("cumberland")
    self.assertEqual(r, ['cumberland'])

    _, r = self.anagrams2.get_anagrams("cumbersome")
    self.assertEqual(r, ['cumbersome'])

    _, r = self.anagrams2.get_anagrams("cummings")
    self.assertEqual(r, ['cummings'])

    _, r = self.anagrams2.get_anagrams("cummins")
    self.assertEqual(r, ['cummins'])

    _, r = self.anagrams2.get_anagrams("cumulative")
    self.assertEqual(r, ['cumulative'])

    _, r = self.anagrams2.get_anagrams("cumulatively")
    self.assertEqual(r, ['cumulatively'])

    _, r = self.anagrams2.get_anagrams("cunard")
    self.assertEqual(r, ['cunard'])

    _, r = self.anagrams2.get_anagrams("cunnilingus")
    self.assertEqual(r, ['cunnilingus'])

    _, r = self.anagrams2.get_anagrams("cunning")
    self.assertEqual(r, ['cunning'])

    _, r = self.anagrams2.get_anagrams("cunningham")
    self.assertEqual(r, ['cunningham'])

    _, r = self.anagrams2.get_anagrams("cunningly")
    self.assertEqual(r, ['cunningly'])

    _, r = self.anagrams2.get_anagrams("cup")
    self.assertEqual(r, ['cup'])

    _, r = self.anagrams2.get_anagrams("cupboard")
    self.assertEqual(r, ['cupboard'])

    _, r = self.anagrams2.get_anagrams("cupboards")
    self.assertEqual(r, ['cupboards'])

    _, r = self.anagrams2.get_anagrams("cupertino")
    self.assertEqual(r, ['cupertino'])

    _, r = self.anagrams2.get_anagrams("cupful")
    self.assertEqual(r, ['cupful'])

    _, r = self.anagrams2.get_anagrams("cupid")
    self.assertEqual(r, ['cupid'])

    _, r = self.anagrams2.get_anagrams("cupped")
    self.assertEqual(r, ['cupped'])

    _, r = self.anagrams2.get_anagrams("cupping")
    self.assertEqual(r, ['cupping'])

    _, r = self.anagrams2.get_anagrams("cups")
    self.assertEqual(r, ['cups', 'cusp'])

    _, r = self.anagrams2.get_anagrams("curable")
    self.assertEqual(r, ['curable'])

    _, r = self.anagrams2.get_anagrams("curably")
    self.assertEqual(r, ['curably'])

    _, r = self.anagrams2.get_anagrams("curb")
    self.assertEqual(r, ['curb'])

    _, r = self.anagrams2.get_anagrams("curbing")
    self.assertEqual(r, ['curbing'])

    _, r = self.anagrams2.get_anagrams("curbs")
    self.assertEqual(r, ['curbs', 'scrub'])

    _, r = self.anagrams2.get_anagrams("curd")
    self.assertEqual(r, ['crud', 'curd'])

    _, r = self.anagrams2.get_anagrams("curdle")
    self.assertEqual(r, ['curdle', 'curled'])

    _, r = self.anagrams2.get_anagrams("cure")
    self.assertEqual(r, ['cure'])

    _, r = self.anagrams2.get_anagrams("cured")
    self.assertEqual(r, ['crude', 'cured'])

    _, r = self.anagrams2.get_anagrams("cures")
    self.assertEqual(r, ['cures', 'curse'])

    _, r = self.anagrams2.get_anagrams("curfew")
    self.assertEqual(r, ['curfew'])

    _, r = self.anagrams2.get_anagrams("curfews")
    self.assertEqual(r, ['curfews'])

    _, r = self.anagrams2.get_anagrams("curing")
    self.assertEqual(r, ['curing'])

    _, r = self.anagrams2.get_anagrams("curiosities")
    self.assertEqual(r, ['curiosities'])

    _, r = self.anagrams2.get_anagrams("curiosity")
    self.assertEqual(r, ['curiosity'])

    _, r = self.anagrams2.get_anagrams("curious")
    self.assertEqual(r, ['curious'])

    _, r = self.anagrams2.get_anagrams("curiouser")
    self.assertEqual(r, ['curiouser'])

    _, r = self.anagrams2.get_anagrams("curiousest")
    self.assertEqual(r, ['curiousest'])

    _, r = self.anagrams2.get_anagrams("curiously")
    self.assertEqual(r, ['curiously'])

    _, r = self.anagrams2.get_anagrams("curl")
    self.assertEqual(r, ['curl'])

    _, r = self.anagrams2.get_anagrams("curled")
    self.assertEqual(r, ['curdle', 'curled'])

    _, r = self.anagrams2.get_anagrams("curler")
    self.assertEqual(r, ['curler'])

    _, r = self.anagrams2.get_anagrams("curlers")
    self.assertEqual(r, ['curlers'])

    _, r = self.anagrams2.get_anagrams("curlicue")
    self.assertEqual(r, ['curlicue'])

    _, r = self.anagrams2.get_anagrams("curling")
    self.assertEqual(r, ['curling'])

    _, r = self.anagrams2.get_anagrams("curls")
    self.assertEqual(r, ['curls'])

    _, r = self.anagrams2.get_anagrams("curly")
    self.assertEqual(r, ['curly'])

    _, r = self.anagrams2.get_anagrams("curran")
    self.assertEqual(r, ['curran'])

    _, r = self.anagrams2.get_anagrams("currant")
    self.assertEqual(r, ['currant'])

    _, r = self.anagrams2.get_anagrams("currants")
    self.assertEqual(r, ['currants'])

    _, r = self.anagrams2.get_anagrams("currencies")
    self.assertEqual(r, ['currencies'])

    _, r = self.anagrams2.get_anagrams("currency")
    self.assertEqual(r, ['currency'])

    _, r = self.anagrams2.get_anagrams("current")
    self.assertEqual(r, ['current'])

    _, r = self.anagrams2.get_anagrams("currently")
    self.assertEqual(r, ['currently'])

    _, r = self.anagrams2.get_anagrams("currentness")
    self.assertEqual(r, ['currentness'])

    _, r = self.anagrams2.get_anagrams("currents")
    self.assertEqual(r, ['currents'])

    _, r = self.anagrams2.get_anagrams("curricular")
    self.assertEqual(r, ['curricular'])

    _, r = self.anagrams2.get_anagrams("curriculum")
    self.assertEqual(r, ['curriculum'])

    _, r = self.anagrams2.get_anagrams("curriculums")
    self.assertEqual(r, ['curriculums'])

    _, r = self.anagrams2.get_anagrams("curried")
    self.assertEqual(r, ['curried'])

    _, r = self.anagrams2.get_anagrams("curries")
    self.assertEqual(r, ['cruiser', 'curries'])

    _, r = self.anagrams2.get_anagrams("curry")
    self.assertEqual(r, ['curry'])

    _, r = self.anagrams2.get_anagrams("currying")
    self.assertEqual(r, ['currying'])

    _, r = self.anagrams2.get_anagrams("curs")
    self.assertEqual(r, ['curs'])

    _, r = self.anagrams2.get_anagrams("curse")
    self.assertEqual(r, ['cures', 'curse'])

    _, r = self.anagrams2.get_anagrams("cursed")
    self.assertEqual(r, ['cursed'])

    _, r = self.anagrams2.get_anagrams("curses")
    self.assertEqual(r, ['curses'])

    _, r = self.anagrams2.get_anagrams("cursing")
    self.assertEqual(r, ['cursing'])

    _, r = self.anagrams2.get_anagrams("cursive")
    self.assertEqual(r, ['cursive'])

    _, r = self.anagrams2.get_anagrams("cursor")
    self.assertEqual(r, ['cursor'])

    _, r = self.anagrams2.get_anagrams("cursorily")
    self.assertEqual(r, ['cursorily'])

    _, r = self.anagrams2.get_anagrams("cursors")
    self.assertEqual(r, ['cursors'])

    _, r = self.anagrams2.get_anagrams("cursory")
    self.assertEqual(r, ['cursory'])

    _, r = self.anagrams2.get_anagrams("curt")
    self.assertEqual(r, ['curt'])

    _, r = self.anagrams2.get_anagrams("curtail")
    self.assertEqual(r, ['curtail'])

    _, r = self.anagrams2.get_anagrams("curtailed")
    self.assertEqual(r, ['curtailed'])

    _, r = self.anagrams2.get_anagrams("curtails")
    self.assertEqual(r, ['curtails'])

    _, r = self.anagrams2.get_anagrams("curtain")
    self.assertEqual(r, ['curtain'])

    _, r = self.anagrams2.get_anagrams("curtained")
    self.assertEqual(r, ['curtained'])

    _, r = self.anagrams2.get_anagrams("curtains")
    self.assertEqual(r, ['curtains'])

    _, r = self.anagrams2.get_anagrams("curtate")
    self.assertEqual(r, ['curtate'])

    _, r = self.anagrams2.get_anagrams("curtis")
    self.assertEqual(r, ['citrus', 'curtis', 'rustic'])

    _, r = self.anagrams2.get_anagrams("curtly")
    self.assertEqual(r, ['curtly'])

    _, r = self.anagrams2.get_anagrams("curtness")
    self.assertEqual(r, ['curtness'])

    _, r = self.anagrams2.get_anagrams("curtsies")
    self.assertEqual(r, ['curtsies'])

    _, r = self.anagrams2.get_anagrams("curtsy")
    self.assertEqual(r, ['curtsy'])

    _, r = self.anagrams2.get_anagrams("curvaceous")
    self.assertEqual(r, ['curvaceous'])

    _, r = self.anagrams2.get_anagrams("curvature")
    self.assertEqual(r, ['curvature'])

    _, r = self.anagrams2.get_anagrams("curve")
    self.assertEqual(r, ['curve'])

    _, r = self.anagrams2.get_anagrams("curved")
    self.assertEqual(r, ['curved'])

    _, r = self.anagrams2.get_anagrams("curves")
    self.assertEqual(r, ['curves'])

    _, r = self.anagrams2.get_anagrams("curvilinear")
    self.assertEqual(r, ['curvilinear'])

    _, r = self.anagrams2.get_anagrams("curving")
    self.assertEqual(r, ['curving'])

    _, r = self.anagrams2.get_anagrams("cushing")
    self.assertEqual(r, ['cushing'])

    _, r = self.anagrams2.get_anagrams("cushion")
    self.assertEqual(r, ['cushion'])

    _, r = self.anagrams2.get_anagrams("cushioned")
    self.assertEqual(r, ['cushioned'])

    _, r = self.anagrams2.get_anagrams("cushioning")
    self.assertEqual(r, ['cushioning'])

    _, r = self.anagrams2.get_anagrams("cushions")
    self.assertEqual(r, ['cushions'])

    _, r = self.anagrams2.get_anagrams("cushman")
    self.assertEqual(r, ['cushman', 'schuman'])

    _, r = self.anagrams2.get_anagrams("cusp")
    self.assertEqual(r, ['cups', 'cusp'])

    _, r = self.anagrams2.get_anagrams("cusps")
    self.assertEqual(r, ['cusps'])

    _, r = self.anagrams2.get_anagrams("custard")
    self.assertEqual(r, ['custard'])

    _, r = self.anagrams2.get_anagrams("custer")
    self.assertEqual(r, ['custer'])

    _, r = self.anagrams2.get_anagrams("custodial")
    self.assertEqual(r, ['custodial'])

    _, r = self.anagrams2.get_anagrams("custodian")
    self.assertEqual(r, ['custodian'])

    _, r = self.anagrams2.get_anagrams("custodians")
    self.assertEqual(r, ['custodians'])

    _, r = self.anagrams2.get_anagrams("custody")
    self.assertEqual(r, ['custody'])

    _, r = self.anagrams2.get_anagrams("custom")
    self.assertEqual(r, ['custom'])

    _, r = self.anagrams2.get_anagrams("customarily")
    self.assertEqual(r, ['customarily'])

    _, r = self.anagrams2.get_anagrams("customary")
    self.assertEqual(r, ['customary'])

    _, r = self.anagrams2.get_anagrams("customer")
    self.assertEqual(r, ['costumer', 'customer'])

    _, r = self.anagrams2.get_anagrams("customers")
    self.assertEqual(r, ['customers'])

    _, r = self.anagrams2.get_anagrams("customizable")
    self.assertEqual(r, ['customizable'])

    _, r = self.anagrams2.get_anagrams("customization")
    self.assertEqual(r, ['customization'])

    _, r = self.anagrams2.get_anagrams("customizations")
    self.assertEqual(r, ['customizations'])

    _, r = self.anagrams2.get_anagrams("customize")
    self.assertEqual(r, ['customize'])

    _, r = self.anagrams2.get_anagrams("customized")
    self.assertEqual(r, ['customized'])

    _, r = self.anagrams2.get_anagrams("customizer")
    self.assertEqual(r, ['customizer'])

    _, r = self.anagrams2.get_anagrams("customizers")
    self.assertEqual(r, ['customizers'])

    _, r = self.anagrams2.get_anagrams("customizes")
    self.assertEqual(r, ['customizes'])

    _, r = self.anagrams2.get_anagrams("customizing")
    self.assertEqual(r, ['customizing'])

    _, r = self.anagrams2.get_anagrams("customs")
    self.assertEqual(r, ['customs'])

    _, r = self.anagrams2.get_anagrams("cut")
    self.assertEqual(r, ['cut'])

    _, r = self.anagrams2.get_anagrams("cutaneous")
    self.assertEqual(r, ['cutaneous'])

    _, r = self.anagrams2.get_anagrams("cutback")
    self.assertEqual(r, ['cutback'])

    _, r = self.anagrams2.get_anagrams("cute")
    self.assertEqual(r, ['cute'])

    _, r = self.anagrams2.get_anagrams("cutest")
    self.assertEqual(r, ['cutest'])

    _, r = self.anagrams2.get_anagrams("cutlass")
    self.assertEqual(r, ['cutlass'])

    _, r = self.anagrams2.get_anagrams("cutlet")
    self.assertEqual(r, ['cutlet'])

    _, r = self.anagrams2.get_anagrams("cutoff")
    self.assertEqual(r, ['cutoff'])

    _, r = self.anagrams2.get_anagrams("cutout")
    self.assertEqual(r, ['cutout'])

    _, r = self.anagrams2.get_anagrams("cutover")
    self.assertEqual(r, ['cutover'])

    _, r = self.anagrams2.get_anagrams("cuts")
    self.assertEqual(r, ['cuts'])

    _, r = self.anagrams2.get_anagrams("cutter")
    self.assertEqual(r, ['cutter'])

    _, r = self.anagrams2.get_anagrams("cutters")
    self.assertEqual(r, ['cutters'])

    _, r = self.anagrams2.get_anagrams("cutthroat")
    self.assertEqual(r, ['cutthroat'])

    _, r = self.anagrams2.get_anagrams("cutting")
    self.assertEqual(r, ['cutting'])

    _, r = self.anagrams2.get_anagrams("cuttingly")
    self.assertEqual(r, ['cuttingly'])

    _, r = self.anagrams2.get_anagrams("cuttings")
    self.assertEqual(r, ['cuttings'])

    _, r = self.anagrams2.get_anagrams("cuttlefish")
    self.assertEqual(r, ['cuttlefish'])

    _, r = self.anagrams2.get_anagrams("cuvier")
    self.assertEqual(r, ['cuvier'])

    _, r = self.anagrams2.get_anagrams("cuzco")
    self.assertEqual(r, ['cuzco'])

    _, r = self.anagrams2.get_anagrams("cyanamid")
    self.assertEqual(r, ['cyanamid'])

    _, r = self.anagrams2.get_anagrams("cyanide")
    self.assertEqual(r, ['cyanide'])

    _, r = self.anagrams2.get_anagrams("cybernetic")
    self.assertEqual(r, ['cybernetic'])

    _, r = self.anagrams2.get_anagrams("cybernetics")
    self.assertEqual(r, ['cybernetics'])

    _, r = self.anagrams2.get_anagrams("cyberspace")
    self.assertEqual(r, ['cyberspace'])

    _, r = self.anagrams2.get_anagrams("cyclades")
    self.assertEqual(r, ['cyclades'])

    _, r = self.anagrams2.get_anagrams("cycle")
    self.assertEqual(r, ['cycle'])

    _, r = self.anagrams2.get_anagrams("cycled")
    self.assertEqual(r, ['cycled'])

    _, r = self.anagrams2.get_anagrams("cycles")
    self.assertEqual(r, ['cycles'])

    _, r = self.anagrams2.get_anagrams("cyclic")
    self.assertEqual(r, ['cyclic'])

    _, r = self.anagrams2.get_anagrams("cyclically")
    self.assertEqual(r, ['cyclically'])

    _, r = self.anagrams2.get_anagrams("cycling")
    self.assertEqual(r, ['cycling'])

    _, r = self.anagrams2.get_anagrams("cycloid")
    self.assertEqual(r, ['cycloid'])

    _, r = self.anagrams2.get_anagrams("cycloidal")
    self.assertEqual(r, ['cycloidal'])

    _, r = self.anagrams2.get_anagrams("cycloids")
    self.assertEqual(r, ['cycloids'])

    _, r = self.anagrams2.get_anagrams("cyclone")
    self.assertEqual(r, ['cyclone'])

    _, r = self.anagrams2.get_anagrams("cyclones")
    self.assertEqual(r, ['cyclones'])

    _, r = self.anagrams2.get_anagrams("cyclops")
    self.assertEqual(r, ['cyclops'])

    _, r = self.anagrams2.get_anagrams("cyclotron")
    self.assertEqual(r, ['cyclotron'])

    _, r = self.anagrams2.get_anagrams("cyclotrons")
    self.assertEqual(r, ['cyclotrons'])

    _, r = self.anagrams2.get_anagrams("cygnus")
    self.assertEqual(r, ['cygnus'])

    _, r = self.anagrams2.get_anagrams("cylinder")
    self.assertEqual(r, ['cylinder'])

    _, r = self.anagrams2.get_anagrams("cylinders")
    self.assertEqual(r, ['cylinders'])

    _, r = self.anagrams2.get_anagrams("cylindrical")
    self.assertEqual(r, ['cylindrical'])

    _, r = self.anagrams2.get_anagrams("cymbal")
    self.assertEqual(r, ['cymbal'])

    _, r = self.anagrams2.get_anagrams("cymbals")
    self.assertEqual(r, ['cymbals'])

    _, r = self.anagrams2.get_anagrams("cynic")
    self.assertEqual(r, ['cynic'])

    _, r = self.anagrams2.get_anagrams("cynical")
    self.assertEqual(r, ['cynical'])

    _, r = self.anagrams2.get_anagrams("cynically")
    self.assertEqual(r, ['cynically'])

    _, r = self.anagrams2.get_anagrams("cynthia")
    self.assertEqual(r, ['cynthia'])

    _, r = self.anagrams2.get_anagrams("cypress")
    self.assertEqual(r, ['cypress'])

    _, r = self.anagrams2.get_anagrams("cyprian")
    self.assertEqual(r, ['cyprian'])

    _, r = self.anagrams2.get_anagrams("cypriot")
    self.assertEqual(r, ['cypriot'])

    _, r = self.anagrams2.get_anagrams("cyprus")
    self.assertEqual(r, ['cyprus'])

    _, r = self.anagrams2.get_anagrams("cyril")
    self.assertEqual(r, ['cyril', 'lyric'])

    _, r = self.anagrams2.get_anagrams("cyrillic")
    self.assertEqual(r, ['cyrillic'])

    _, r = self.anagrams2.get_anagrams("cyrus")
    self.assertEqual(r, ['cyrus'])

    _, r = self.anagrams2.get_anagrams("cyst")
    self.assertEqual(r, ['cyst'])

    _, r = self.anagrams2.get_anagrams("cysts")
    self.assertEqual(r, ['cysts'])

    _, r = self.anagrams2.get_anagrams("cytology")
    self.assertEqual(r, ['cytology'])

    _, r = self.anagrams2.get_anagrams("cytoplasm")
    self.assertEqual(r, ['cytoplasm'])

    _, r = self.anagrams2.get_anagrams("czar")
    self.assertEqual(r, ['czar'])

    _, r = self.anagrams2.get_anagrams("czech")
    self.assertEqual(r, ['czech'])

    _, r = self.anagrams2.get_anagrams("czechization")
    self.assertEqual(r, ['czechization'])

    _, r = self.anagrams2.get_anagrams("czechizations")
    self.assertEqual(r, ['czechizations'])

    _, r = self.anagrams2.get_anagrams("czechoslovakia")
    self.assertEqual(r, ['czechoslovakia'])

    _, r = self.anagrams2.get_anagrams("czerniak")
    self.assertEqual(r, ['czerniak'])

    _, r = self.anagrams2.get_anagrams("dabble")
    self.assertEqual(r, ['dabble'])

    _, r = self.anagrams2.get_anagrams("dabbled")
    self.assertEqual(r, ['dabbled'])

    _, r = self.anagrams2.get_anagrams("dabbler")
    self.assertEqual(r, ['dabbler'])

    _, r = self.anagrams2.get_anagrams("dabbles")
    self.assertEqual(r, ['dabbles'])

    _, r = self.anagrams2.get_anagrams("dabbling")
    self.assertEqual(r, ['dabbling'])

    _, r = self.anagrams2.get_anagrams("dacca")
    self.assertEqual(r, ['dacca'])

    _, r = self.anagrams2.get_anagrams("dacron")
    self.assertEqual(r, ['candor', 'conrad', 'dacron'])

    _, r = self.anagrams2.get_anagrams("dactyl")
    self.assertEqual(r, ['dactyl'])

    _, r = self.anagrams2.get_anagrams("dactylic")
    self.assertEqual(r, ['dactylic'])

    _, r = self.anagrams2.get_anagrams("dad")
    self.assertEqual(r, ['add', 'dad'])

    _, r = self.anagrams2.get_anagrams("dada")
    self.assertEqual(r, ['dada'])

    _, r = self.anagrams2.get_anagrams("dadaism")
    self.assertEqual(r, ['dadaism'])

    _, r = self.anagrams2.get_anagrams("dadaist")
    self.assertEqual(r, ['dadaist'])

    _, r = self.anagrams2.get_anagrams("dadaistic")
    self.assertEqual(r, ['dadaistic'])

    _, r = self.anagrams2.get_anagrams("daddy")
    self.assertEqual(r, ['daddy'])

    _, r = self.anagrams2.get_anagrams("dade")
    self.assertEqual(r, ['dade', 'dead'])

    _, r = self.anagrams2.get_anagrams("dads")
    self.assertEqual(r, ['adds', 'dads'])

    _, r = self.anagrams2.get_anagrams("daedalus")
    self.assertEqual(r, ['daedalus'])

    _, r = self.anagrams2.get_anagrams("daemon")
    self.assertEqual(r, ['daemon', 'moaned'])

    _, r = self.anagrams2.get_anagrams("daemons")
    self.assertEqual(r, ['daemons'])

    _, r = self.anagrams2.get_anagrams("daffodil")
    self.assertEqual(r, ['daffodil'])

    _, r = self.anagrams2.get_anagrams("daffodils")
    self.assertEqual(r, ['daffodils'])

    _, r = self.anagrams2.get_anagrams("dagger")
    self.assertEqual(r, ['dagger', 'ragged'])

    _, r = self.anagrams2.get_anagrams("dahl")
    self.assertEqual(r, ['dahl'])

    _, r = self.anagrams2.get_anagrams("dahlia")
    self.assertEqual(r, ['dahlia'])

    _, r = self.anagrams2.get_anagrams("dahomey")
    self.assertEqual(r, ['dahomey'])

    _, r = self.anagrams2.get_anagrams("dailey")
    self.assertEqual(r, ['dailey'])

    _, r = self.anagrams2.get_anagrams("dailies")
    self.assertEqual(r, ['dailies'])

    _, r = self.anagrams2.get_anagrams("daily")
    self.assertEqual(r, ['daily', 'lydia'])

    _, r = self.anagrams2.get_anagrams("daimler")
    self.assertEqual(r, ['daimler'])

    _, r = self.anagrams2.get_anagrams("daintily")
    self.assertEqual(r, ['daintily'])

    _, r = self.anagrams2.get_anagrams("daintiness")
    self.assertEqual(r, ['daintiness'])

    _, r = self.anagrams2.get_anagrams("dainty")
    self.assertEqual(r, ['dainty'])

    _, r = self.anagrams2.get_anagrams("dairy")
    self.assertEqual(r, ['dairy', 'diary'])

    _, r = self.anagrams2.get_anagrams("dairylea")
    self.assertEqual(r, ['dairylea'])

    _, r = self.anagrams2.get_anagrams("daisies")
    self.assertEqual(r, ['daisies'])

    _, r = self.anagrams2.get_anagrams("daisy")
    self.assertEqual(r, ['daisy'])

    _, r = self.anagrams2.get_anagrams("dakar")
    self.assertEqual(r, ['dakar'])

    _, r = self.anagrams2.get_anagrams("dakota")
    self.assertEqual(r, ['dakota'])

    _, r = self.anagrams2.get_anagrams("dale")
    self.assertEqual(r, ['dale', 'deal', 'lead'])

    _, r = self.anagrams2.get_anagrams("dales")
    self.assertEqual(r, ['dales', 'deals', 'leads'])

    _, r = self.anagrams2.get_anagrams("daley")
    self.assertEqual(r, ['daley', 'delay'])

    _, r = self.anagrams2.get_anagrams("dalhousie")
    self.assertEqual(r, ['dalhousie'])

    _, r = self.anagrams2.get_anagrams("dali")
    self.assertEqual(r, ['dali', 'dial', 'laid'])

    _, r = self.anagrams2.get_anagrams("dallas")
    self.assertEqual(r, ['dallas'])

    _, r = self.anagrams2.get_anagrams("dalton")
    self.assertEqual(r, ['dalton', 'toland'])

    _, r = self.anagrams2.get_anagrams("daly")
    self.assertEqual(r, ['daly', 'lady'])

    _, r = self.anagrams2.get_anagrams("dalzell")
    self.assertEqual(r, ['dalzell'])

    _, r = self.anagrams2.get_anagrams("dam")
    self.assertEqual(r, ['dam', 'mad'])

    _, r = self.anagrams2.get_anagrams("damage")
    self.assertEqual(r, ['damage'])

    _, r = self.anagrams2.get_anagrams("damaged")
    self.assertEqual(r, ['damaged'])

    _, r = self.anagrams2.get_anagrams("damager")
    self.assertEqual(r, ['damager'])

    _, r = self.anagrams2.get_anagrams("damagers")
    self.assertEqual(r, ['damagers'])

    _, r = self.anagrams2.get_anagrams("damages")
    self.assertEqual(r, ['damages'])

    _, r = self.anagrams2.get_anagrams("damaging")
    self.assertEqual(r, ['damaging'])

    _, r = self.anagrams2.get_anagrams("damascus")
    self.assertEqual(r, ['damascus'])

    _, r = self.anagrams2.get_anagrams("damask")
    self.assertEqual(r, ['damask'])

    _, r = self.anagrams2.get_anagrams("dame")
    self.assertEqual(r, ['dame', 'made', 'mead'])

    _, r = self.anagrams2.get_anagrams("damming")
    self.assertEqual(r, ['damming'])

    _, r = self.anagrams2.get_anagrams("damn")
    self.assertEqual(r, ['damn'])

    _, r = self.anagrams2.get_anagrams("damnation")
    self.assertEqual(r, ['damnation'])

    _, r = self.anagrams2.get_anagrams("damned")
    self.assertEqual(r, ['damned', 'demand', 'madden'])

    _, r = self.anagrams2.get_anagrams("damning")
    self.assertEqual(r, ['damning'])

    _, r = self.anagrams2.get_anagrams("damns")
    self.assertEqual(r, ['damns'])

    _, r = self.anagrams2.get_anagrams("damocles")
    self.assertEqual(r, ['damocles'])

    _, r = self.anagrams2.get_anagrams("damon")
    self.assertEqual(r, ['damon'])

    _, r = self.anagrams2.get_anagrams("damp")
    self.assertEqual(r, ['damp'])

    _, r = self.anagrams2.get_anagrams("dampen")
    self.assertEqual(r, ['dampen'])

    _, r = self.anagrams2.get_anagrams("dampens")
    self.assertEqual(r, ['dampens'])

    _, r = self.anagrams2.get_anagrams("damper")
    self.assertEqual(r, ['damper'])

    _, r = self.anagrams2.get_anagrams("damping")
    self.assertEqual(r, ['damping'])

    _, r = self.anagrams2.get_anagrams("dampness")
    self.assertEqual(r, ['dampness'])

    _, r = self.anagrams2.get_anagrams("dams")
    self.assertEqual(r, ['dams'])

    _, r = self.anagrams2.get_anagrams("damsel")
    self.assertEqual(r, ['damsel', 'medals'])

    _, r = self.anagrams2.get_anagrams("damsels")
    self.assertEqual(r, ['damsels'])

    _, r = self.anagrams2.get_anagrams("dan")
    self.assertEqual(r, ['and', 'dan'])

    _, r = self.anagrams2.get_anagrams("dana")
    self.assertEqual(r, ['dana'])

    _, r = self.anagrams2.get_anagrams("danbury")
    self.assertEqual(r, ['danbury'])

    _, r = self.anagrams2.get_anagrams("dance")
    self.assertEqual(r, ['dance'])

    _, r = self.anagrams2.get_anagrams("danced")
    self.assertEqual(r, ['danced'])

    _, r = self.anagrams2.get_anagrams("dancer")
    self.assertEqual(r, ['dancer'])

    _, r = self.anagrams2.get_anagrams("dancers")
    self.assertEqual(r, ['dancers'])

    _, r = self.anagrams2.get_anagrams("dances")
    self.assertEqual(r, ['ascend', 'dances'])

    _, r = self.anagrams2.get_anagrams("dancing")
    self.assertEqual(r, ['dancing'])

    _, r = self.anagrams2.get_anagrams("dandelion")
    self.assertEqual(r, ['dandelion'])

    _, r = self.anagrams2.get_anagrams("dandelions")
    self.assertEqual(r, ['dandelions'])

    _, r = self.anagrams2.get_anagrams("dandy")
    self.assertEqual(r, ['dandy'])

    _, r = self.anagrams2.get_anagrams("dane")
    self.assertEqual(r, ['aden', 'dane', 'dean', 'edna'])

    _, r = self.anagrams2.get_anagrams("danes")
    self.assertEqual(r, ['andes', 'danes', 'deans', 'sedan', 'snead'])

    _, r = self.anagrams2.get_anagrams("danger")
    self.assertEqual(r, ['danger', 'gander', 'garden', 'ranged'])

    _, r = self.anagrams2.get_anagrams("dangerous")
    self.assertEqual(r, ['dangerous'])

    _, r = self.anagrams2.get_anagrams("dangerously")
    self.assertEqual(r, ['dangerously'])

    _, r = self.anagrams2.get_anagrams("dangers")
    self.assertEqual(r, ['dangers', 'gardens'])

    _, r = self.anagrams2.get_anagrams("dangle")
    self.assertEqual(r, ['angled', 'dangle', 'glenda'])

    _, r = self.anagrams2.get_anagrams("dangled")
    self.assertEqual(r, ['dangled', 'gladden'])

    _, r = self.anagrams2.get_anagrams("dangles")
    self.assertEqual(r, ['dangles'])

    _, r = self.anagrams2.get_anagrams("dangling")
    self.assertEqual(r, ['dangling'])

    _, r = self.anagrams2.get_anagrams("daniel")
    self.assertEqual(r, ['daniel', 'denial', 'nailed'])

    _, r = self.anagrams2.get_anagrams("daniels")
    self.assertEqual(r, ['daniels', 'denials'])

    _, r = self.anagrams2.get_anagrams("danielson")
    self.assertEqual(r, ['danielson'])

    _, r = self.anagrams2.get_anagrams("danish")
    self.assertEqual(r, ['danish'])

    _, r = self.anagrams2.get_anagrams("danization")
    self.assertEqual(r, ['danization'])

    _, r = self.anagrams2.get_anagrams("danizations")
    self.assertEqual(r, ['danizations'])

    _, r = self.anagrams2.get_anagrams("danize")
    self.assertEqual(r, ['danize'])

    _, r = self.anagrams2.get_anagrams("danizes")
    self.assertEqual(r, ['danizes'])

    _, r = self.anagrams2.get_anagrams("danny")
    self.assertEqual(r, ['danny'])

    _, r = self.anagrams2.get_anagrams("dante")
    self.assertEqual(r, ['dante'])

    _, r = self.anagrams2.get_anagrams("danube")
    self.assertEqual(r, ['danube'])

    _, r = self.anagrams2.get_anagrams("danubian")
    self.assertEqual(r, ['danubian'])

    _, r = self.anagrams2.get_anagrams("danville")
    self.assertEqual(r, ['danville'])

    _, r = self.anagrams2.get_anagrams("danzig")
    self.assertEqual(r, ['danzig'])

    _, r = self.anagrams2.get_anagrams("daphne")
    self.assertEqual(r, ['daphne'])

    _, r = self.anagrams2.get_anagrams("dar")
    self.assertEqual(r, ['dar'])

    _, r = self.anagrams2.get_anagrams("dare")
    self.assertEqual(r, ['dare', 'dear', 'read'])

    _, r = self.anagrams2.get_anagrams("dared")
    self.assertEqual(r, ['adder', 'dared', 'dread'])

    _, r = self.anagrams2.get_anagrams("darer")
    self.assertEqual(r, ['darer'])

    _, r = self.anagrams2.get_anagrams("darers")
    self.assertEqual(r, ['darers'])

    _, r = self.anagrams2.get_anagrams("dares")
    self.assertEqual(r, ['dares', 'reads'])

    _, r = self.anagrams2.get_anagrams("daresay")
    self.assertEqual(r, ['daresay'])

    _, r = self.anagrams2.get_anagrams("daring")
    self.assertEqual(r, ['daring'])

    _, r = self.anagrams2.get_anagrams("daringly")
    self.assertEqual(r, ['daringly'])

    _, r = self.anagrams2.get_anagrams("darius")
    self.assertEqual(r, ['darius', 'radius'])

    _, r = self.anagrams2.get_anagrams("dark")
    self.assertEqual(r, ['dark'])

    _, r = self.anagrams2.get_anagrams("darken")
    self.assertEqual(r, ['darken', 'ranked'])

    _, r = self.anagrams2.get_anagrams("darker")
    self.assertEqual(r, ['darker'])

    _, r = self.anagrams2.get_anagrams("darkest")
    self.assertEqual(r, ['darkest'])

    _, r = self.anagrams2.get_anagrams("darkly")
    self.assertEqual(r, ['darkly'])

    _, r = self.anagrams2.get_anagrams("darkness")
    self.assertEqual(r, ['darkness'])

    _, r = self.anagrams2.get_anagrams("darkroom")
    self.assertEqual(r, ['darkroom'])

    _, r = self.anagrams2.get_anagrams("darlene")
    self.assertEqual(r, ['darlene', 'leander', 'learned'])

    _, r = self.anagrams2.get_anagrams("darling")
    self.assertEqual(r, ['darling'])

    _, r = self.anagrams2.get_anagrams("darlings")
    self.assertEqual(r, ['darlings'])

    _, r = self.anagrams2.get_anagrams("darlington")
    self.assertEqual(r, ['darlington'])

    _, r = self.anagrams2.get_anagrams("darn")
    self.assertEqual(r, ['darn', 'rand'])

    _, r = self.anagrams2.get_anagrams("darned")
    self.assertEqual(r, ['darned'])

    _, r = self.anagrams2.get_anagrams("darner")
    self.assertEqual(r, ['darner', 'errand'])

    _, r = self.anagrams2.get_anagrams("darning")
    self.assertEqual(r, ['darning'])

    _, r = self.anagrams2.get_anagrams("darns")
    self.assertEqual(r, ['darns'])

    _, r = self.anagrams2.get_anagrams("darpa")
    self.assertEqual(r, ['darpa'])

    _, r = self.anagrams2.get_anagrams("darrell")
    self.assertEqual(r, ['darrell'])

    _, r = self.anagrams2.get_anagrams("darrow")
    self.assertEqual(r, ['darrow'])

    _, r = self.anagrams2.get_anagrams("darry")
    self.assertEqual(r, ['darry'])

    _, r = self.anagrams2.get_anagrams("dart")
    self.assertEqual(r, ['dart'])

    _, r = self.anagrams2.get_anagrams("darted")
    self.assertEqual(r, ['darted', 'traded'])

    _, r = self.anagrams2.get_anagrams("darter")
    self.assertEqual(r, ['darter', 'retard', 'trader'])

    _, r = self.anagrams2.get_anagrams("darting")
    self.assertEqual(r, ['darting', 'trading'])

    _, r = self.anagrams2.get_anagrams("dartmouth")
    self.assertEqual(r, ['dartmouth'])

    _, r = self.anagrams2.get_anagrams("darts")
    self.assertEqual(r, ['darts'])

    _, r = self.anagrams2.get_anagrams("darwin")
    self.assertEqual(r, ['darwin', 'inward'])

    _, r = self.anagrams2.get_anagrams("darwinian")
    self.assertEqual(r, ['darwinian'])

    _, r = self.anagrams2.get_anagrams("darwinism")
    self.assertEqual(r, ['darwinism'])

    _, r = self.anagrams2.get_anagrams("darwinistic")
    self.assertEqual(r, ['darwinistic'])

    _, r = self.anagrams2.get_anagrams("darwinize")
    self.assertEqual(r, ['darwinize'])

    _, r = self.anagrams2.get_anagrams("darwinizes")
    self.assertEqual(r, ['darwinizes'])

    _, r = self.anagrams2.get_anagrams("dash")
    self.assertEqual(r, ['dash'])

    _, r = self.anagrams2.get_anagrams("dashboard")
    self.assertEqual(r, ['dashboard'])

    _, r = self.anagrams2.get_anagrams("dashed")
    self.assertEqual(r, ['dashed', 'shaded'])

    _, r = self.anagrams2.get_anagrams("dasher")
    self.assertEqual(r, ['dasher', 'shared'])

    _, r = self.anagrams2.get_anagrams("dashers")
    self.assertEqual(r, ['dashers'])

    _, r = self.anagrams2.get_anagrams("dashes")
    self.assertEqual(r, ['dashes', 'shades'])

    _, r = self.anagrams2.get_anagrams("dashing")
    self.assertEqual(r, ['dashing', 'shading'])

    _, r = self.anagrams2.get_anagrams("dashingly")
    self.assertEqual(r, ['dashingly'])

    _, r = self.anagrams2.get_anagrams("data")
    self.assertEqual(r, ['data'])

    _, r = self.anagrams2.get_anagrams("database")
    self.assertEqual(r, ['database'])

    _, r = self.anagrams2.get_anagrams("databases")
    self.assertEqual(r, ['databases'])

    _, r = self.anagrams2.get_anagrams("datagram")
    self.assertEqual(r, ['datagram'])

    _, r = self.anagrams2.get_anagrams("datagrams")
    self.assertEqual(r, ['datagrams'])

    _, r = self.anagrams2.get_anagrams("datamation")
    self.assertEqual(r, ['datamation'])

    _, r = self.anagrams2.get_anagrams("datamedia")
    self.assertEqual(r, ['datamedia'])

    _, r = self.anagrams2.get_anagrams("date")
    self.assertEqual(r, ['date'])

    _, r = self.anagrams2.get_anagrams("dated")
    self.assertEqual(r, ['dated'])

    _, r = self.anagrams2.get_anagrams("dateline")
    self.assertEqual(r, ['dateline', 'entailed'])

    _, r = self.anagrams2.get_anagrams("dater")
    self.assertEqual(r, ['dater', 'rated', 'trade', 'tread'])

    _, r = self.anagrams2.get_anagrams("dates")
    self.assertEqual(r, ['dates', 'sated', 'stead'])

    _, r = self.anagrams2.get_anagrams("dating")
    self.assertEqual(r, ['dating'])

    _, r = self.anagrams2.get_anagrams("dative")
    self.assertEqual(r, ['dative'])

    _, r = self.anagrams2.get_anagrams("datsun")
    self.assertEqual(r, ['datsun'])

    _, r = self.anagrams2.get_anagrams("datum")
    self.assertEqual(r, ['datum'])

    _, r = self.anagrams2.get_anagrams("daugherty")
    self.assertEqual(r, ['daugherty'])

    _, r = self.anagrams2.get_anagrams("daughter")
    self.assertEqual(r, ['daughter'])

    _, r = self.anagrams2.get_anagrams("daughterly")
    self.assertEqual(r, ['daughterly'])

    _, r = self.anagrams2.get_anagrams("daughters")
    self.assertEqual(r, ['daughters'])

    _, r = self.anagrams2.get_anagrams("daunt")
    self.assertEqual(r, ['daunt'])

    _, r = self.anagrams2.get_anagrams("daunted")
    self.assertEqual(r, ['daunted'])

    _, r = self.anagrams2.get_anagrams("dauntless")
    self.assertEqual(r, ['dauntless'])

    _, r = self.anagrams2.get_anagrams("dave")
    self.assertEqual(r, ['dave', 'veda'])

    _, r = self.anagrams2.get_anagrams("david")
    self.assertEqual(r, ['david'])

    _, r = self.anagrams2.get_anagrams("davidson")
    self.assertEqual(r, ['davidson'])

    _, r = self.anagrams2.get_anagrams("davie")
    self.assertEqual(r, ['davie'])

    _, r = self.anagrams2.get_anagrams("davies")
    self.assertEqual(r, ['advise', 'davies'])

    _, r = self.anagrams2.get_anagrams("davinich")
    self.assertEqual(r, ['davinich'])

    _, r = self.anagrams2.get_anagrams("davis")
    self.assertEqual(r, ['davis'])

    _, r = self.anagrams2.get_anagrams("davison")
    self.assertEqual(r, ['davison'])

    _, r = self.anagrams2.get_anagrams("davy")
    self.assertEqual(r, ['davy'])

    _, r = self.anagrams2.get_anagrams("dawn")
    self.assertEqual(r, ['dawn', 'wand'])

    _, r = self.anagrams2.get_anagrams("dawned")
    self.assertEqual(r, ['dawned'])

    _, r = self.anagrams2.get_anagrams("dawning")
    self.assertEqual(r, ['dawning'])

    _, r = self.anagrams2.get_anagrams("dawns")
    self.assertEqual(r, ['dawns'])

    _, r = self.anagrams2.get_anagrams("dawson")
    self.assertEqual(r, ['dawson'])

    _, r = self.anagrams2.get_anagrams("day")
    self.assertEqual(r, ['day'])

    _, r = self.anagrams2.get_anagrams("daybreak")
    self.assertEqual(r, ['daybreak'])

    _, r = self.anagrams2.get_anagrams("daydream")
    self.assertEqual(r, ['daydream'])

    _, r = self.anagrams2.get_anagrams("daydreaming")
    self.assertEqual(r, ['daydreaming'])

    _, r = self.anagrams2.get_anagrams("daydreams")
    self.assertEqual(r, ['daydreams'])

    _, r = self.anagrams2.get_anagrams("daylight")
    self.assertEqual(r, ['daylight'])

    _, r = self.anagrams2.get_anagrams("daylights")
    self.assertEqual(r, ['daylights'])

    _, r = self.anagrams2.get_anagrams("days")
    self.assertEqual(r, ['days'])

    _, r = self.anagrams2.get_anagrams("daytime")
    self.assertEqual(r, ['daytime'])

    _, r = self.anagrams2.get_anagrams("dayton")
    self.assertEqual(r, ['dayton'])

    _, r = self.anagrams2.get_anagrams("daytona")
    self.assertEqual(r, ['daytona'])

    _, r = self.anagrams2.get_anagrams("daze")
    self.assertEqual(r, ['daze'])

    _, r = self.anagrams2.get_anagrams("dazed")
    self.assertEqual(r, ['dazed'])

    _, r = self.anagrams2.get_anagrams("dazzle")
    self.assertEqual(r, ['dazzle'])

    _, r = self.anagrams2.get_anagrams("dazzled")
    self.assertEqual(r, ['dazzled'])

    _, r = self.anagrams2.get_anagrams("dazzler")
    self.assertEqual(r, ['dazzler'])

    _, r = self.anagrams2.get_anagrams("dazzles")
    self.assertEqual(r, ['dazzles'])

    _, r = self.anagrams2.get_anagrams("dazzling")
    self.assertEqual(r, ['dazzling'])

    _, r = self.anagrams2.get_anagrams("dazzlingly")
    self.assertEqual(r, ['dazzlingly'])

    _, r = self.anagrams2.get_anagrams("de")
    self.assertEqual(r, ['de', 'ed'])

    _, r = self.anagrams2.get_anagrams("deacon")
    self.assertEqual(r, ['deacon'])

    _, r = self.anagrams2.get_anagrams("deacons")
    self.assertEqual(r, ['deacons'])

    _, r = self.anagrams2.get_anagrams("deactivate")
    self.assertEqual(r, ['deactivate'])

    _, r = self.anagrams2.get_anagrams("dead")
    self.assertEqual(r, ['dade', 'dead'])

    _, r = self.anagrams2.get_anagrams("deaden")
    self.assertEqual(r, ['deaden'])

    _, r = self.anagrams2.get_anagrams("deadline")
    self.assertEqual(r, ['deadline'])

    _, r = self.anagrams2.get_anagrams("deadlines")
    self.assertEqual(r, ['deadlines'])

    _, r = self.anagrams2.get_anagrams("deadlock")
    self.assertEqual(r, ['deadlock'])

    _, r = self.anagrams2.get_anagrams("deadlocked")
    self.assertEqual(r, ['deadlocked'])

    _, r = self.anagrams2.get_anagrams("deadlocking")
    self.assertEqual(r, ['deadlocking'])

    _, r = self.anagrams2.get_anagrams("deadlocks")
    self.assertEqual(r, ['deadlocks'])

    _, r = self.anagrams2.get_anagrams("deadly")
    self.assertEqual(r, ['deadly'])

    _, r = self.anagrams2.get_anagrams("deadness")
    self.assertEqual(r, ['deadness'])

    _, r = self.anagrams2.get_anagrams("deadwood")
    self.assertEqual(r, ['deadwood'])

    _, r = self.anagrams2.get_anagrams("deaf")
    self.assertEqual(r, ['deaf', 'fade'])

    _, r = self.anagrams2.get_anagrams("deafen")
    self.assertEqual(r, ['deafen'])

    _, r = self.anagrams2.get_anagrams("deafer")
    self.assertEqual(r, ['deafer', 'feared'])

    _, r = self.anagrams2.get_anagrams("deafest")
    self.assertEqual(r, ['deafest', 'defeats', 'feasted'])

    _, r = self.anagrams2.get_anagrams("deafness")
    self.assertEqual(r, ['deafness'])

    _, r = self.anagrams2.get_anagrams("deal")
    self.assertEqual(r, ['dale', 'deal', 'lead'])

    _, r = self.anagrams2.get_anagrams("dealer")
    self.assertEqual(r, ['dealer', 'leader'])

    _, r = self.anagrams2.get_anagrams("dealers")
    self.assertEqual(r, ['dealers', 'leaders'])

    _, r = self.anagrams2.get_anagrams("dealership")
    self.assertEqual(r, ['dealership', 'leadership'])

    _, r = self.anagrams2.get_anagrams("dealing")
    self.assertEqual(r, ['aligned', 'dealing', 'leading'])

    _, r = self.anagrams2.get_anagrams("dealings")
    self.assertEqual(r, ['dealings', 'leadings', 'signaled'])

    _, r = self.anagrams2.get_anagrams("deallocate")
    self.assertEqual(r, ['deallocate'])

    _, r = self.anagrams2.get_anagrams("deallocated")
    self.assertEqual(r, ['deallocated'])

    _, r = self.anagrams2.get_anagrams("deallocating")
    self.assertEqual(r, ['deallocating'])

    _, r = self.anagrams2.get_anagrams("deallocation")
    self.assertEqual(r, ['deallocation'])

    _, r = self.anagrams2.get_anagrams("deallocations")
    self.assertEqual(r, ['deallocations'])

    _, r = self.anagrams2.get_anagrams("deals")
    self.assertEqual(r, ['dales', 'deals', 'leads'])

    _, r = self.anagrams2.get_anagrams("dealt")
    self.assertEqual(r, ['dealt', 'delta'])

    _, r = self.anagrams2.get_anagrams("dean")
    self.assertEqual(r, ['aden', 'dane', 'dean', 'edna'])

    _, r = self.anagrams2.get_anagrams("deane")
    self.assertEqual(r, ['deane'])

    _, r = self.anagrams2.get_anagrams("deanna")
    self.assertEqual(r, ['andean', 'deanna'])

    _, r = self.anagrams2.get_anagrams("deans")
    self.assertEqual(r, ['andes', 'danes', 'deans', 'sedan', 'snead'])

    _, r = self.anagrams2.get_anagrams("dear")
    self.assertEqual(r, ['dare', 'dear', 'read'])

    _, r = self.anagrams2.get_anagrams("dearborn")
    self.assertEqual(r, ['bernardo', 'dearborn'])

    _, r = self.anagrams2.get_anagrams("dearer")
    self.assertEqual(r, ['dearer', 'reader', 'reared', 'reread'])

    _, r = self.anagrams2.get_anagrams("dearest")
    self.assertEqual(r, ['dearest'])

    _, r = self.anagrams2.get_anagrams("dearly")
    self.assertEqual(r, ['dearly'])

    _, r = self.anagrams2.get_anagrams("dearness")
    self.assertEqual(r, ['dearness'])

    _, r = self.anagrams2.get_anagrams("dearth")
    self.assertEqual(r, ['dearth', 'hatred', 'thread'])

    _, r = self.anagrams2.get_anagrams("dearths")
    self.assertEqual(r, ['dearths', 'hardest', 'threads'])

    _, r = self.anagrams2.get_anagrams("death")
    self.assertEqual(r, ['death', 'hated'])

    _, r = self.anagrams2.get_anagrams("deathbed")
    self.assertEqual(r, ['deathbed'])

    _, r = self.anagrams2.get_anagrams("deathly")
    self.assertEqual(r, ['deathly'])

    _, r = self.anagrams2.get_anagrams("deaths")
    self.assertEqual(r, ['deaths'])

    _, r = self.anagrams2.get_anagrams("debacle")
    self.assertEqual(r, ['debacle'])

    _, r = self.anagrams2.get_anagrams("debar")
    self.assertEqual(r, ['bared', 'beard', 'bread', 'debar', 'debra'])

    _, r = self.anagrams2.get_anagrams("debase")
    self.assertEqual(r, ['debase'])

    _, r = self.anagrams2.get_anagrams("debatable")
    self.assertEqual(r, ['debatable'])

    _, r = self.anagrams2.get_anagrams("debate")
    self.assertEqual(r, ['debate'])

    _, r = self.anagrams2.get_anagrams("debated")
    self.assertEqual(r, ['debated'])

    _, r = self.anagrams2.get_anagrams("debater")
    self.assertEqual(r, ['berated', 'debater'])

    _, r = self.anagrams2.get_anagrams("debaters")
    self.assertEqual(r, ['breasted', 'debaters'])

    _, r = self.anagrams2.get_anagrams("debates")
    self.assertEqual(r, ['debates'])

    _, r = self.anagrams2.get_anagrams("debating")
    self.assertEqual(r, ['debating'])

    _, r = self.anagrams2.get_anagrams("debauch")
    self.assertEqual(r, ['debauch'])

    _, r = self.anagrams2.get_anagrams("debauchery")
    self.assertEqual(r, ['debauchery'])

    _, r = self.anagrams2.get_anagrams("debbie")
    self.assertEqual(r, ['debbie'])

    _, r = self.anagrams2.get_anagrams("debby")
    self.assertEqual(r, ['debby'])

    _, r = self.anagrams2.get_anagrams("debilitate")
    self.assertEqual(r, ['debilitate'])

    _, r = self.anagrams2.get_anagrams("debilitated")
    self.assertEqual(r, ['debilitated'])

    _, r = self.anagrams2.get_anagrams("debilitates")
    self.assertEqual(r, ['debilitates'])

    _, r = self.anagrams2.get_anagrams("debilitating")
    self.assertEqual(r, ['debilitating'])

    _, r = self.anagrams2.get_anagrams("debility")
    self.assertEqual(r, ['debility'])

    _, r = self.anagrams2.get_anagrams("debit")
    self.assertEqual(r, ['debit'])

    _, r = self.anagrams2.get_anagrams("debited")
    self.assertEqual(r, ['debited'])

    _, r = self.anagrams2.get_anagrams("deborah")
    self.assertEqual(r, ['deborah'])

    _, r = self.anagrams2.get_anagrams("debra")
    self.assertEqual(r, ['bared', 'beard', 'bread', 'debar', 'debra'])

    _, r = self.anagrams2.get_anagrams("debrief")
    self.assertEqual(r, ['briefed', 'debrief'])

    _, r = self.anagrams2.get_anagrams("debris")
    self.assertEqual(r, ['brides', 'debris'])

    _, r = self.anagrams2.get_anagrams("debt")
    self.assertEqual(r, ['debt'])

    _, r = self.anagrams2.get_anagrams("debtor")
    self.assertEqual(r, ['debtor'])

    _, r = self.anagrams2.get_anagrams("debts")
    self.assertEqual(r, ['debts'])

    _, r = self.anagrams2.get_anagrams("debug")
    self.assertEqual(r, ['budge', 'debug'])

    _, r = self.anagrams2.get_anagrams("debugged")
    self.assertEqual(r, ['debugged'])

    _, r = self.anagrams2.get_anagrams("debugger")
    self.assertEqual(r, ['begrudge', 'debugger'])

    _, r = self.anagrams2.get_anagrams("debuggers")
    self.assertEqual(r, ['begrudges', 'debuggers'])

    _, r = self.anagrams2.get_anagrams("debugging")
    self.assertEqual(r, ['debugging'])

    _, r = self.anagrams2.get_anagrams("debugs")
    self.assertEqual(r, ['budges', 'debugs'])

    _, r = self.anagrams2.get_anagrams("debunk")
    self.assertEqual(r, ['debunk'])

    _, r = self.anagrams2.get_anagrams("debussy")
    self.assertEqual(r, ['debussy'])

    _, r = self.anagrams2.get_anagrams("debutante")
    self.assertEqual(r, ['debutante'])

    _, r = self.anagrams2.get_anagrams("dec")
    self.assertEqual(r, ['dec'])

    _, r = self.anagrams2.get_anagrams("decade")
    self.assertEqual(r, ['decade'])

    _, r = self.anagrams2.get_anagrams("decadence")
    self.assertEqual(r, ['decadence'])

    _, r = self.anagrams2.get_anagrams("decadent")
    self.assertEqual(r, ['decadent'])

    _, r = self.anagrams2.get_anagrams("decadently")
    self.assertEqual(r, ['decadently'])

    _, r = self.anagrams2.get_anagrams("decades")
    self.assertEqual(r, ['decades'])

    _, r = self.anagrams2.get_anagrams("decal")
    self.assertEqual(r, ['decal', 'laced'])

    _, r = self.anagrams2.get_anagrams("decathlon")
    self.assertEqual(r, ['decathlon'])

    _, r = self.anagrams2.get_anagrams("decatur")
    self.assertEqual(r, ['decatur'])

    _, r = self.anagrams2.get_anagrams("decay")
    self.assertEqual(r, ['decay'])

    _, r = self.anagrams2.get_anagrams("decayed")
    self.assertEqual(r, ['decayed'])

    _, r = self.anagrams2.get_anagrams("decaying")
    self.assertEqual(r, ['decaying'])

    _, r = self.anagrams2.get_anagrams("decays")
    self.assertEqual(r, ['decays'])

    _, r = self.anagrams2.get_anagrams("decca")
    self.assertEqual(r, ['decca'])

    _, r = self.anagrams2.get_anagrams("decease")
    self.assertEqual(r, ['decease'])

    _, r = self.anagrams2.get_anagrams("deceased")
    self.assertEqual(r, ['deceased'])

    _, r = self.anagrams2.get_anagrams("deceases")
    self.assertEqual(r, ['deceases'])

    _, r = self.anagrams2.get_anagrams("deceasing")
    self.assertEqual(r, ['deceasing'])

    _, r = self.anagrams2.get_anagrams("decedent")
    self.assertEqual(r, ['decedent'])

    _, r = self.anagrams2.get_anagrams("deceit")
    self.assertEqual(r, ['deceit'])

    _, r = self.anagrams2.get_anagrams("deceitful")
    self.assertEqual(r, ['deceitful'])

    _, r = self.anagrams2.get_anagrams("deceitfully")
    self.assertEqual(r, ['deceitfully'])

    _, r = self.anagrams2.get_anagrams("deceitfulness")
    self.assertEqual(r, ['deceitfulness'])

    _, r = self.anagrams2.get_anagrams("deceive")
    self.assertEqual(r, ['deceive'])

    _, r = self.anagrams2.get_anagrams("deceived")
    self.assertEqual(r, ['deceived'])

    _, r = self.anagrams2.get_anagrams("deceiver")
    self.assertEqual(r, ['deceiver', 'received'])

    _, r = self.anagrams2.get_anagrams("deceivers")
    self.assertEqual(r, ['deceivers'])

    _, r = self.anagrams2.get_anagrams("deceives")
    self.assertEqual(r, ['deceives'])

    _, r = self.anagrams2.get_anagrams("deceiving")
    self.assertEqual(r, ['deceiving'])

    _, r = self.anagrams2.get_anagrams("decelerate")
    self.assertEqual(r, ['decelerate'])

    _, r = self.anagrams2.get_anagrams("decelerated")
    self.assertEqual(r, ['decelerated'])

    _, r = self.anagrams2.get_anagrams("decelerates")
    self.assertEqual(r, ['decelerates'])

    _, r = self.anagrams2.get_anagrams("decelerating")
    self.assertEqual(r, ['decelerating'])

    _, r = self.anagrams2.get_anagrams("deceleration")
    self.assertEqual(r, ['deceleration'])

    _, r = self.anagrams2.get_anagrams("december")
    self.assertEqual(r, ['december'])

    _, r = self.anagrams2.get_anagrams("decembers")
    self.assertEqual(r, ['decembers'])

    _, r = self.anagrams2.get_anagrams("decencies")
    self.assertEqual(r, ['decencies'])

    _, r = self.anagrams2.get_anagrams("decency")
    self.assertEqual(r, ['decency'])

    _, r = self.anagrams2.get_anagrams("decennial")
    self.assertEqual(r, ['decennial'])

    _, r = self.anagrams2.get_anagrams("decent")
    self.assertEqual(r, ['decent', 'decnet'])

    _, r = self.anagrams2.get_anagrams("decently")
    self.assertEqual(r, ['decently'])

    _, r = self.anagrams2.get_anagrams("decentralization")
    self.assertEqual(r, ['decentralization'])

    _, r = self.anagrams2.get_anagrams("decentralized")
    self.assertEqual(r, ['decentralized'])

    _, r = self.anagrams2.get_anagrams("deception")
    self.assertEqual(r, ['deception'])

    _, r = self.anagrams2.get_anagrams("deceptions")
    self.assertEqual(r, ['deceptions'])

    _, r = self.anagrams2.get_anagrams("deceptive")
    self.assertEqual(r, ['deceptive'])

    _, r = self.anagrams2.get_anagrams("deceptively")
    self.assertEqual(r, ['deceptively'])

    _, r = self.anagrams2.get_anagrams("decertify")
    self.assertEqual(r, ['decertify'])

    _, r = self.anagrams2.get_anagrams("decibel")
    self.assertEqual(r, ['decibel'])

    _, r = self.anagrams2.get_anagrams("decidability")
    self.assertEqual(r, ['decidability'])

    _, r = self.anagrams2.get_anagrams("decidable")
    self.assertEqual(r, ['decidable'])

    _, r = self.anagrams2.get_anagrams("decide")
    self.assertEqual(r, ['decide'])

    _, r = self.anagrams2.get_anagrams("decided")
    self.assertEqual(r, ['decided'])

    _, r = self.anagrams2.get_anagrams("decidedly")
    self.assertEqual(r, ['decidedly'])

    _, r = self.anagrams2.get_anagrams("decides")
    self.assertEqual(r, ['decides'])

    _, r = self.anagrams2.get_anagrams("deciding")
    self.assertEqual(r, ['deciding'])

    _, r = self.anagrams2.get_anagrams("deciduous")
    self.assertEqual(r, ['deciduous'])

    _, r = self.anagrams2.get_anagrams("decimal")
    self.assertEqual(r, ['claimed', 'decimal', 'medical'])

    _, r = self.anagrams2.get_anagrams("decimals")
    self.assertEqual(r, ['decimals', 'midscale'])

    _, r = self.anagrams2.get_anagrams("decimate")
    self.assertEqual(r, ['decimate'])

    _, r = self.anagrams2.get_anagrams("decimated")
    self.assertEqual(r, ['decimated'])

    _, r = self.anagrams2.get_anagrams("decimates")
    self.assertEqual(r, ['decimates'])

    _, r = self.anagrams2.get_anagrams("decimating")
    self.assertEqual(r, ['decimating'])

    _, r = self.anagrams2.get_anagrams("decimation")
    self.assertEqual(r, ['decimation'])

    _, r = self.anagrams2.get_anagrams("decipher")
    self.assertEqual(r, ['decipher'])

    _, r = self.anagrams2.get_anagrams("deciphered")
    self.assertEqual(r, ['deciphered'])

    _, r = self.anagrams2.get_anagrams("decipherer")
    self.assertEqual(r, ['decipherer'])

    _, r = self.anagrams2.get_anagrams("deciphering")
    self.assertEqual(r, ['deciphering'])

    _, r = self.anagrams2.get_anagrams("deciphers")
    self.assertEqual(r, ['deciphers'])

    _, r = self.anagrams2.get_anagrams("decision")
    self.assertEqual(r, ['decision'])

    _, r = self.anagrams2.get_anagrams("decisions")
    self.assertEqual(r, ['decisions'])

    _, r = self.anagrams2.get_anagrams("decisive")
    self.assertEqual(r, ['decisive'])

    _, r = self.anagrams2.get_anagrams("decisively")
    self.assertEqual(r, ['decisively'])

    _, r = self.anagrams2.get_anagrams("decisiveness")
    self.assertEqual(r, ['decisiveness'])

    _, r = self.anagrams2.get_anagrams("deck")
    self.assertEqual(r, ['deck'])

    _, r = self.anagrams2.get_anagrams("decked")
    self.assertEqual(r, ['decked'])

    _, r = self.anagrams2.get_anagrams("decker")
    self.assertEqual(r, ['decker'])

    _, r = self.anagrams2.get_anagrams("decking")
    self.assertEqual(r, ['decking'])

    _, r = self.anagrams2.get_anagrams("deckings")
    self.assertEqual(r, ['deckings'])

    _, r = self.anagrams2.get_anagrams("decks")
    self.assertEqual(r, ['decks'])

    _, r = self.anagrams2.get_anagrams("declaration")
    self.assertEqual(r, ['declaration'])

    _, r = self.anagrams2.get_anagrams("declarations")
    self.assertEqual(r, ['declarations'])

    _, r = self.anagrams2.get_anagrams("declarative")
    self.assertEqual(r, ['declarative'])

    _, r = self.anagrams2.get_anagrams("declaratively")
    self.assertEqual(r, ['declaratively'])

    _, r = self.anagrams2.get_anagrams("declaratives")
    self.assertEqual(r, ['declaratives'])

    _, r = self.anagrams2.get_anagrams("declarator")
    self.assertEqual(r, ['declarator'])

    _, r = self.anagrams2.get_anagrams("declaratory")
    self.assertEqual(r, ['declaratory'])

    _, r = self.anagrams2.get_anagrams("declare")
    self.assertEqual(r, ['cleared', 'declare'])

    _, r = self.anagrams2.get_anagrams("declared")
    self.assertEqual(r, ['declared'])

    _, r = self.anagrams2.get_anagrams("declarer")
    self.assertEqual(r, ['declarer'])

    _, r = self.anagrams2.get_anagrams("declarers")
    self.assertEqual(r, ['declarers'])

    _, r = self.anagrams2.get_anagrams("declares")
    self.assertEqual(r, ['declares'])

    _, r = self.anagrams2.get_anagrams("declaring")
    self.assertEqual(r, ['declaring'])

    _, r = self.anagrams2.get_anagrams("declassify")
    self.assertEqual(r, ['declassify'])

    _, r = self.anagrams2.get_anagrams("declination")
    self.assertEqual(r, ['declination'])

    _, r = self.anagrams2.get_anagrams("declinations")
    self.assertEqual(r, ['declinations'])

    _, r = self.anagrams2.get_anagrams("decline")
    self.assertEqual(r, ['decline'])

    _, r = self.anagrams2.get_anagrams("declined")
    self.assertEqual(r, ['declined'])

    _, r = self.anagrams2.get_anagrams("decliner")
    self.assertEqual(r, ['decliner'])

    _, r = self.anagrams2.get_anagrams("decliners")
    self.assertEqual(r, ['decliners'])

    _, r = self.anagrams2.get_anagrams("declines")
    self.assertEqual(r, ['declines', 'licensed', 'silenced'])

    _, r = self.anagrams2.get_anagrams("declining")
    self.assertEqual(r, ['declining'])

    _, r = self.anagrams2.get_anagrams("decnet")
    self.assertEqual(r, ['decent', 'decnet'])

    _, r = self.anagrams2.get_anagrams("decode")
    self.assertEqual(r, ['decode'])

    _, r = self.anagrams2.get_anagrams("decoded")
    self.assertEqual(r, ['decoded'])

    _, r = self.anagrams2.get_anagrams("decoder")
    self.assertEqual(r, ['decoder', 'recoded'])

    _, r = self.anagrams2.get_anagrams("decoders")
    self.assertEqual(r, ['decoders'])

    _, r = self.anagrams2.get_anagrams("decodes")
    self.assertEqual(r, ['decodes'])

    _, r = self.anagrams2.get_anagrams("decoding")
    self.assertEqual(r, ['decoding'])

    _, r = self.anagrams2.get_anagrams("decodings")
    self.assertEqual(r, ['decodings'])

    _, r = self.anagrams2.get_anagrams("decolletage")
    self.assertEqual(r, ['decolletage'])

    _, r = self.anagrams2.get_anagrams("decollimate")
    self.assertEqual(r, ['decollimate'])

    _, r = self.anagrams2.get_anagrams("decompile")
    self.assertEqual(r, ['decompile'])

    _, r = self.anagrams2.get_anagrams("decomposability")
    self.assertEqual(r, ['decomposability'])

    _, r = self.anagrams2.get_anagrams("decomposable")
    self.assertEqual(r, ['decomposable'])

    _, r = self.anagrams2.get_anagrams("decompose")
    self.assertEqual(r, ['decompose'])

    _, r = self.anagrams2.get_anagrams("decomposed")
    self.assertEqual(r, ['decomposed'])

    _, r = self.anagrams2.get_anagrams("decomposes")
    self.assertEqual(r, ['decomposes'])

    _, r = self.anagrams2.get_anagrams("decomposing")
    self.assertEqual(r, ['decomposing'])

    _, r = self.anagrams2.get_anagrams("decomposition")
    self.assertEqual(r, ['decomposition'])

    _, r = self.anagrams2.get_anagrams("decompositions")
    self.assertEqual(r, ['decompositions'])

    _, r = self.anagrams2.get_anagrams("decompress")
    self.assertEqual(r, ['compressed', 'decompress'])

    _, r = self.anagrams2.get_anagrams("decompression")
    self.assertEqual(r, ['decompression'])

    _, r = self.anagrams2.get_anagrams("decorate")
    self.assertEqual(r, ['decorate'])

    _, r = self.anagrams2.get_anagrams("decorated")
    self.assertEqual(r, ['decorated'])

    _, r = self.anagrams2.get_anagrams("decorates")
    self.assertEqual(r, ['decorates'])

    _, r = self.anagrams2.get_anagrams("decorating")
    self.assertEqual(r, ['decorating'])

    _, r = self.anagrams2.get_anagrams("decoration")
    self.assertEqual(r, ['coordinate', 'decoration'])

    _, r = self.anagrams2.get_anagrams("decorations")
    self.assertEqual(r, ['coordinates', 'decorations'])

    _, r = self.anagrams2.get_anagrams("decorative")
    self.assertEqual(r, ['decorative'])

    _, r = self.anagrams2.get_anagrams("decorum")
    self.assertEqual(r, ['decorum'])

    _, r = self.anagrams2.get_anagrams("decouple")
    self.assertEqual(r, ['decouple'])

    _, r = self.anagrams2.get_anagrams("decoupled")
    self.assertEqual(r, ['decoupled'])

    _, r = self.anagrams2.get_anagrams("decouples")
    self.assertEqual(r, ['decouples'])

    _, r = self.anagrams2.get_anagrams("decoupling")
    self.assertEqual(r, ['decoupling'])

    _, r = self.anagrams2.get_anagrams("decoy")
    self.assertEqual(r, ['decoy'])

    _, r = self.anagrams2.get_anagrams("decoys")
    self.assertEqual(r, ['decoys'])

    _, r = self.anagrams2.get_anagrams("decrease")
    self.assertEqual(r, ['decrease'])

    _, r = self.anagrams2.get_anagrams("decreased")
    self.assertEqual(r, ['decreased'])

    _, r = self.anagrams2.get_anagrams("decreases")
    self.assertEqual(r, ['decreases'])

    _, r = self.anagrams2.get_anagrams("decreasing")
    self.assertEqual(r, ['decreasing'])

    _, r = self.anagrams2.get_anagrams("decreasingly")
    self.assertEqual(r, ['decreasingly'])

    _, r = self.anagrams2.get_anagrams("decree")
    self.assertEqual(r, ['decree', 'recede'])

    _, r = self.anagrams2.get_anagrams("decreed")
    self.assertEqual(r, ['decreed', 'receded'])

    _, r = self.anagrams2.get_anagrams("decreeing")
    self.assertEqual(r, ['decreeing'])

    _, r = self.anagrams2.get_anagrams("decrees")
    self.assertEqual(r, ['decrees', 'recedes'])

    _, r = self.anagrams2.get_anagrams("decrement")
    self.assertEqual(r, ['decrement'])

    _, r = self.anagrams2.get_anagrams("decremented")
    self.assertEqual(r, ['decremented'])

    _, r = self.anagrams2.get_anagrams("decrementing")
    self.assertEqual(r, ['decrementing'])

    _, r = self.anagrams2.get_anagrams("decrements")
    self.assertEqual(r, ['decrements'])

    _, r = self.anagrams2.get_anagrams("decrypt")
    self.assertEqual(r, ['decrypt'])

    _, r = self.anagrams2.get_anagrams("decrypted")
    self.assertEqual(r, ['decrypted'])

    _, r = self.anagrams2.get_anagrams("decrypting")
    self.assertEqual(r, ['decrypting'])

    _, r = self.anagrams2.get_anagrams("decryption")
    self.assertEqual(r, ['decryption'])

    _, r = self.anagrams2.get_anagrams("decrypts")
    self.assertEqual(r, ['decrypts'])

    _, r = self.anagrams2.get_anagrams("decstation")
    self.assertEqual(r, ['decstation'])

    _, r = self.anagrams2.get_anagrams("decsystem")
    self.assertEqual(r, ['decsystem'])

    _, r = self.anagrams2.get_anagrams("dectape")
    self.assertEqual(r, ['dectape'])

    _, r = self.anagrams2.get_anagrams("dedicate")
    self.assertEqual(r, ['dedicate'])

    _, r = self.anagrams2.get_anagrams("dedicated")
    self.assertEqual(r, ['dedicated'])

    _, r = self.anagrams2.get_anagrams("dedicates")
    self.assertEqual(r, ['dedicates'])

    _, r = self.anagrams2.get_anagrams("dedicating")
    self.assertEqual(r, ['dedicating'])

    _, r = self.anagrams2.get_anagrams("dedication")
    self.assertEqual(r, ['dedication'])

    _, r = self.anagrams2.get_anagrams("deduce")
    self.assertEqual(r, ['deduce'])

    _, r = self.anagrams2.get_anagrams("deduced")
    self.assertEqual(r, ['deduced'])

    _, r = self.anagrams2.get_anagrams("deducer")
    self.assertEqual(r, ['deducer', 'reduced'])

    _, r = self.anagrams2.get_anagrams("deduces")
    self.assertEqual(r, ['deduces', 'seduced'])

    _, r = self.anagrams2.get_anagrams("deducible")
    self.assertEqual(r, ['deducible'])

    _, r = self.anagrams2.get_anagrams("deducing")
    self.assertEqual(r, ['deducing'])

    _, r = self.anagrams2.get_anagrams("deduct")
    self.assertEqual(r, ['deduct'])

    _, r = self.anagrams2.get_anagrams("deducted")
    self.assertEqual(r, ['deducted'])

    _, r = self.anagrams2.get_anagrams("deductible")
    self.assertEqual(r, ['deductible'])

    _, r = self.anagrams2.get_anagrams("deducting")
    self.assertEqual(r, ['deducting'])

    _, r = self.anagrams2.get_anagrams("deduction")
    self.assertEqual(r, ['deduction'])

    _, r = self.anagrams2.get_anagrams("deductions")
    self.assertEqual(r, ['deductions', 'discounted'])

    _, r = self.anagrams2.get_anagrams("deductive")
    self.assertEqual(r, ['deductive'])

    _, r = self.anagrams2.get_anagrams("dee")
    self.assertEqual(r, ['dee'])

    _, r = self.anagrams2.get_anagrams("deed")
    self.assertEqual(r, ['deed'])

    _, r = self.anagrams2.get_anagrams("deeded")
    self.assertEqual(r, ['deeded'])

    _, r = self.anagrams2.get_anagrams("deeding")
    self.assertEqual(r, ['deeding', 'deigned'])

    _, r = self.anagrams2.get_anagrams("deeds")
    self.assertEqual(r, ['deeds'])

    _, r = self.anagrams2.get_anagrams("deem")
    self.assertEqual(r, ['deem'])

    _, r = self.anagrams2.get_anagrams("deemed")
    self.assertEqual(r, ['deemed'])

    _, r = self.anagrams2.get_anagrams("deeming")
    self.assertEqual(r, ['deeming'])

    _, r = self.anagrams2.get_anagrams("deemphasize")
    self.assertEqual(r, ['deemphasize'])

    _, r = self.anagrams2.get_anagrams("deemphasized")
    self.assertEqual(r, ['deemphasized'])

    _, r = self.anagrams2.get_anagrams("deemphasizes")
    self.assertEqual(r, ['deemphasizes'])

    _, r = self.anagrams2.get_anagrams("deemphasizing")
    self.assertEqual(r, ['deemphasizing'])

    _, r = self.anagrams2.get_anagrams("deems")
    self.assertEqual(r, ['deems'])

    _, r = self.anagrams2.get_anagrams("deep")
    self.assertEqual(r, ['deep'])

    _, r = self.anagrams2.get_anagrams("deepen")
    self.assertEqual(r, ['deepen'])

    _, r = self.anagrams2.get_anagrams("deepened")
    self.assertEqual(r, ['deepened'])

    _, r = self.anagrams2.get_anagrams("deepening")
    self.assertEqual(r, ['deepening'])

    _, r = self.anagrams2.get_anagrams("deepens")
    self.assertEqual(r, ['deepens'])

    _, r = self.anagrams2.get_anagrams("deeper")
    self.assertEqual(r, ['deeper', 'peered'])

    _, r = self.anagrams2.get_anagrams("deepest")
    self.assertEqual(r, ['deepest', 'steeped'])

    _, r = self.anagrams2.get_anagrams("deeply")
    self.assertEqual(r, ['deeply', 'yelped'])

    _, r = self.anagrams2.get_anagrams("deeps")
    self.assertEqual(r, ['deeps', 'speed'])

    _, r = self.anagrams2.get_anagrams("deer")
    self.assertEqual(r, ['deer', 'reed'])

    _, r = self.anagrams2.get_anagrams("deere")
    self.assertEqual(r, ['deere'])

    _, r = self.anagrams2.get_anagrams("deface")
    self.assertEqual(r, ['deface'])

    _, r = self.anagrams2.get_anagrams("default")
    self.assertEqual(r, ['default', 'faulted'])

    _, r = self.anagrams2.get_anagrams("defaulted")
    self.assertEqual(r, ['defaulted'])

    _, r = self.anagrams2.get_anagrams("defaulter")
    self.assertEqual(r, ['defaulter'])

    _, r = self.anagrams2.get_anagrams("defaulting")
    self.assertEqual(r, ['defaulting'])

    _, r = self.anagrams2.get_anagrams("defaults")
    self.assertEqual(r, ['defaults'])

    _, r = self.anagrams2.get_anagrams("defeat")
    self.assertEqual(r, ['defeat'])

    _, r = self.anagrams2.get_anagrams("defeated")
    self.assertEqual(r, ['defeated'])

    _, r = self.anagrams2.get_anagrams("defeating")
    self.assertEqual(r, ['defeating'])

    _, r = self.anagrams2.get_anagrams("defeats")
    self.assertEqual(r, ['deafest', 'defeats', 'feasted'])

    _, r = self.anagrams2.get_anagrams("defecate")
    self.assertEqual(r, ['defecate'])

    _, r = self.anagrams2.get_anagrams("defect")
    self.assertEqual(r, ['defect'])

    _, r = self.anagrams2.get_anagrams("defected")
    self.assertEqual(r, ['defected'])

    _, r = self.anagrams2.get_anagrams("defecting")
    self.assertEqual(r, ['defecting'])

    _, r = self.anagrams2.get_anagrams("defection")
    self.assertEqual(r, ['defection'])

    _, r = self.anagrams2.get_anagrams("defections")
    self.assertEqual(r, ['defections'])

    _, r = self.anagrams2.get_anagrams("defective")
    self.assertEqual(r, ['defective'])

    _, r = self.anagrams2.get_anagrams("defects")
    self.assertEqual(r, ['defects'])

    _, r = self.anagrams2.get_anagrams("defend")
    self.assertEqual(r, ['defend'])

    _, r = self.anagrams2.get_anagrams("defendant")
    self.assertEqual(r, ['defendant'])

    _, r = self.anagrams2.get_anagrams("defendants")
    self.assertEqual(r, ['defendants'])

    _, r = self.anagrams2.get_anagrams("defended")
    self.assertEqual(r, ['defended'])

    _, r = self.anagrams2.get_anagrams("defender")
    self.assertEqual(r, ['defender'])

    _, r = self.anagrams2.get_anagrams("defenders")
    self.assertEqual(r, ['defenders'])

    _, r = self.anagrams2.get_anagrams("defending")
    self.assertEqual(r, ['defending'])

    _, r = self.anagrams2.get_anagrams("defends")
    self.assertEqual(r, ['defends'])

    _, r = self.anagrams2.get_anagrams("defenestrate")
    self.assertEqual(r, ['defenestrate'])

    _, r = self.anagrams2.get_anagrams("defenestrated")
    self.assertEqual(r, ['defenestrated'])

    _, r = self.anagrams2.get_anagrams("defenestrates")
    self.assertEqual(r, ['defenestrates'])

    _, r = self.anagrams2.get_anagrams("defenestrating")
    self.assertEqual(r, ['defenestrating'])

    _, r = self.anagrams2.get_anagrams("defenestration")
    self.assertEqual(r, ['defenestration'])

    _, r = self.anagrams2.get_anagrams("defense")
    self.assertEqual(r, ['defense'])

    _, r = self.anagrams2.get_anagrams("defenseless")
    self.assertEqual(r, ['defenseless'])

    _, r = self.anagrams2.get_anagrams("defenses")
    self.assertEqual(r, ['defenses'])

    _, r = self.anagrams2.get_anagrams("defensible")
    self.assertEqual(r, ['defensible'])

    _, r = self.anagrams2.get_anagrams("defensive")
    self.assertEqual(r, ['defensive'])

    _, r = self.anagrams2.get_anagrams("defer")
    self.assertEqual(r, ['defer', 'freed'])

    _, r = self.anagrams2.get_anagrams("deference")
    self.assertEqual(r, ['deference'])

    _, r = self.anagrams2.get_anagrams("deferment")
    self.assertEqual(r, ['deferment', 'fermented'])

    _, r = self.anagrams2.get_anagrams("deferments")
    self.assertEqual(r, ['deferments'])

    _, r = self.anagrams2.get_anagrams("deferrable")
    self.assertEqual(r, ['deferrable'])

    _, r = self.anagrams2.get_anagrams("deferred")
    self.assertEqual(r, ['deferred'])

    _, r = self.anagrams2.get_anagrams("deferrer")
    self.assertEqual(r, ['deferrer', 'referred'])

    _, r = self.anagrams2.get_anagrams("deferrers")
    self.assertEqual(r, ['deferrers'])

    _, r = self.anagrams2.get_anagrams("deferring")
    self.assertEqual(r, ['deferring'])

    _, r = self.anagrams2.get_anagrams("defers")
    self.assertEqual(r, ['defers'])

    _, r = self.anagrams2.get_anagrams("defiance")
    self.assertEqual(r, ['defiance'])

    _, r = self.anagrams2.get_anagrams("defiant")
    self.assertEqual(r, ['defiant', 'fainted'])

    _, r = self.anagrams2.get_anagrams("defiantly")
    self.assertEqual(r, ['defiantly'])

    _, r = self.anagrams2.get_anagrams("deficiencies")
    self.assertEqual(r, ['deficiencies'])

    _, r = self.anagrams2.get_anagrams("deficiency")
    self.assertEqual(r, ['deficiency'])

    _, r = self.anagrams2.get_anagrams("deficient")
    self.assertEqual(r, ['deficient'])

    _, r = self.anagrams2.get_anagrams("deficit")
    self.assertEqual(r, ['deficit'])

    _, r = self.anagrams2.get_anagrams("deficits")
    self.assertEqual(r, ['deficits'])

    _, r = self.anagrams2.get_anagrams("defied")
    self.assertEqual(r, ['defied'])

    _, r = self.anagrams2.get_anagrams("defies")
    self.assertEqual(r, ['defies'])

    _, r = self.anagrams2.get_anagrams("defile")
    self.assertEqual(r, ['defile'])

    _, r = self.anagrams2.get_anagrams("defiling")
    self.assertEqual(r, ['defiling', 'fielding'])

    _, r = self.anagrams2.get_anagrams("definable")
    self.assertEqual(r, ['definable'])

    _, r = self.anagrams2.get_anagrams("define")
    self.assertEqual(r, ['define'])

    _, r = self.anagrams2.get_anagrams("defined")
    self.assertEqual(r, ['defined'])

    _, r = self.anagrams2.get_anagrams("definer")
    self.assertEqual(r, ['definer', 'refined'])

    _, r = self.anagrams2.get_anagrams("defines")
    self.assertEqual(r, ['defines'])

    _, r = self.anagrams2.get_anagrams("defining")
    self.assertEqual(r, ['defining'])

    _, r = self.anagrams2.get_anagrams("definite")
    self.assertEqual(r, ['definite'])

    _, r = self.anagrams2.get_anagrams("definitely")
    self.assertEqual(r, ['definitely'])

    _, r = self.anagrams2.get_anagrams("definiteness")
    self.assertEqual(r, ['definiteness'])

    _, r = self.anagrams2.get_anagrams("definition")
    self.assertEqual(r, ['definition'])

    _, r = self.anagrams2.get_anagrams("definitional")
    self.assertEqual(r, ['definitional'])

    _, r = self.anagrams2.get_anagrams("definitions")
    self.assertEqual(r, ['definitions'])

    _, r = self.anagrams2.get_anagrams("definitive")
    self.assertEqual(r, ['definitive'])

    _, r = self.anagrams2.get_anagrams("deflate")
    self.assertEqual(r, ['deflate'])

    _, r = self.anagrams2.get_anagrams("deflater")
    self.assertEqual(r, ['deflater', 'faltered'])

    _, r = self.anagrams2.get_anagrams("deflect")
    self.assertEqual(r, ['deflect'])

    _, r = self.anagrams2.get_anagrams("defocus")
    self.assertEqual(r, ['defocus', 'focused'])

    _, r = self.anagrams2.get_anagrams("defoe")
    self.assertEqual(r, ['defoe'])

    _, r = self.anagrams2.get_anagrams("deforest")
    self.assertEqual(r, ['deforest', 'forested', 'fostered'])

    _, r = self.anagrams2.get_anagrams("deforestation")
    self.assertEqual(r, ['deforestation'])

    _, r = self.anagrams2.get_anagrams("deform")
    self.assertEqual(r, ['deform', 'formed'])

    _, r = self.anagrams2.get_anagrams("deformation")
    self.assertEqual(r, ['deformation'])

    _, r = self.anagrams2.get_anagrams("deformations")
    self.assertEqual(r, ['deformations'])

    _, r = self.anagrams2.get_anagrams("deformed")
    self.assertEqual(r, ['deformed'])

    _, r = self.anagrams2.get_anagrams("deformities")
    self.assertEqual(r, ['deformities'])

    _, r = self.anagrams2.get_anagrams("deformity")
    self.assertEqual(r, ['deformity'])

    _, r = self.anagrams2.get_anagrams("defraud")
    self.assertEqual(r, ['defraud'])

    _, r = self.anagrams2.get_anagrams("defray")
    self.assertEqual(r, ['defray', 'frayed'])

    _, r = self.anagrams2.get_anagrams("defrost")
    self.assertEqual(r, ['defrost', 'frosted'])

    _, r = self.anagrams2.get_anagrams("deftly")
    self.assertEqual(r, ['deftly'])

    _, r = self.anagrams2.get_anagrams("defunct")
    self.assertEqual(r, ['defunct'])

    _, r = self.anagrams2.get_anagrams("defy")
    self.assertEqual(r, ['defy'])

    _, r = self.anagrams2.get_anagrams("defying")
    self.assertEqual(r, ['defying'])

    _, r = self.anagrams2.get_anagrams("degeneracy")
    self.assertEqual(r, ['degeneracy'])

    _, r = self.anagrams2.get_anagrams("degenerate")
    self.assertEqual(r, ['degenerate'])

    _, r = self.anagrams2.get_anagrams("degenerated")
    self.assertEqual(r, ['degenerated'])

    _, r = self.anagrams2.get_anagrams("degenerates")
    self.assertEqual(r, ['degenerates'])

    _, r = self.anagrams2.get_anagrams("degenerating")
    self.assertEqual(r, ['degenerating'])

    _, r = self.anagrams2.get_anagrams("degeneration")
    self.assertEqual(r, ['degeneration'])

    _, r = self.anagrams2.get_anagrams("degenerative")
    self.assertEqual(r, ['degenerative'])

    _, r = self.anagrams2.get_anagrams("degradable")
    self.assertEqual(r, ['degradable'])

    _, r = self.anagrams2.get_anagrams("degradation")
    self.assertEqual(r, ['degradation'])

    _, r = self.anagrams2.get_anagrams("degradations")
    self.assertEqual(r, ['degradations'])

    _, r = self.anagrams2.get_anagrams("degrade")
    self.assertEqual(r, ['degrade'])

    _, r = self.anagrams2.get_anagrams("degraded")
    self.assertEqual(r, ['degraded'])

    _, r = self.anagrams2.get_anagrams("degrades")
    self.assertEqual(r, ['degrades'])

    _, r = self.anagrams2.get_anagrams("degrading")
    self.assertEqual(r, ['degrading'])

    _, r = self.anagrams2.get_anagrams("degree")
    self.assertEqual(r, ['degree'])

    _, r = self.anagrams2.get_anagrams("degrees")
    self.assertEqual(r, ['degrees'])

    _, r = self.anagrams2.get_anagrams("dehumidify")
    self.assertEqual(r, ['dehumidify'])

    _, r = self.anagrams2.get_anagrams("dehydrate")
    self.assertEqual(r, ['dehydrate'])

    _, r = self.anagrams2.get_anagrams("deify")
    self.assertEqual(r, ['deify'])

    _, r = self.anagrams2.get_anagrams("deign")
    self.assertEqual(r, ['deign'])

    _, r = self.anagrams2.get_anagrams("deigned")
    self.assertEqual(r, ['deeding', 'deigned'])

    _, r = self.anagrams2.get_anagrams("deigning")
    self.assertEqual(r, ['deigning'])

    _, r = self.anagrams2.get_anagrams("deigns")
    self.assertEqual(r, ['deigns', 'design', 'signed', 'singed'])

    _, r = self.anagrams2.get_anagrams("deimos")
    self.assertEqual(r, ['deimos'])

    _, r = self.anagrams2.get_anagrams("deirdre")
    self.assertEqual(r, ['deirdre'])

    _, r = self.anagrams2.get_anagrams("deirdres")
    self.assertEqual(r, ['deirdres'])

    _, r = self.anagrams2.get_anagrams("deities")
    self.assertEqual(r, ['deities'])

    _, r = self.anagrams2.get_anagrams("deity")
    self.assertEqual(r, ['deity'])

    _, r = self.anagrams2.get_anagrams("dejected")
    self.assertEqual(r, ['dejected'])

    _, r = self.anagrams2.get_anagrams("dejectedly")
    self.assertEqual(r, ['dejectedly'])

    _, r = self.anagrams2.get_anagrams("dekalb")
    self.assertEqual(r, ['balked', 'dekalb'])

    _, r = self.anagrams2.get_anagrams("dekastere")
    self.assertEqual(r, ['dekastere'])

    _, r = self.anagrams2.get_anagrams("del")
    self.assertEqual(r, ['del', 'led'])

    _, r = self.anagrams2.get_anagrams("delaney")
    self.assertEqual(r, ['delaney'])

    _, r = self.anagrams2.get_anagrams("delano")
    self.assertEqual(r, ['delano', 'loaned'])

    _, r = self.anagrams2.get_anagrams("delaware")
    self.assertEqual(r, ['delaware'])

    _, r = self.anagrams2.get_anagrams("delay")
    self.assertEqual(r, ['daley', 'delay'])

    _, r = self.anagrams2.get_anagrams("delayed")
    self.assertEqual(r, ['delayed'])

    _, r = self.anagrams2.get_anagrams("delaying")
    self.assertEqual(r, ['delaying'])

    _, r = self.anagrams2.get_anagrams("delays")
    self.assertEqual(r, ['delays'])

    _, r = self.anagrams2.get_anagrams("delegate")
    self.assertEqual(r, ['delegate'])

    _, r = self.anagrams2.get_anagrams("delegated")
    self.assertEqual(r, ['delegated'])

    _, r = self.anagrams2.get_anagrams("delegates")
    self.assertEqual(r, ['delegates'])

    _, r = self.anagrams2.get_anagrams("delegating")
    self.assertEqual(r, ['delegating'])

    _, r = self.anagrams2.get_anagrams("delegation")
    self.assertEqual(r, ['delegation'])

    _, r = self.anagrams2.get_anagrams("delegations")
    self.assertEqual(r, ['delegations'])

    _, r = self.anagrams2.get_anagrams("delete")
    self.assertEqual(r, ['delete'])

    _, r = self.anagrams2.get_anagrams("deleted")
    self.assertEqual(r, ['deleted'])

    _, r = self.anagrams2.get_anagrams("deleter")
    self.assertEqual(r, ['deleter'])

    _, r = self.anagrams2.get_anagrams("deleterious")
    self.assertEqual(r, ['deleterious'])

    _, r = self.anagrams2.get_anagrams("deletes")
    self.assertEqual(r, ['deletes', 'steeled'])

    _, r = self.anagrams2.get_anagrams("deleting")
    self.assertEqual(r, ['deleting'])

    _, r = self.anagrams2.get_anagrams("deletion")
    self.assertEqual(r, ['deletion'])

    _, r = self.anagrams2.get_anagrams("deletions")
    self.assertEqual(r, ['deletions'])

    _, r = self.anagrams2.get_anagrams("delft")
    self.assertEqual(r, ['delft'])

    _, r = self.anagrams2.get_anagrams("delhi")
    self.assertEqual(r, ['delhi'])

    _, r = self.anagrams2.get_anagrams("delia")
    self.assertEqual(r, ['delia', 'ideal'])

    _, r = self.anagrams2.get_anagrams("deliberate")
    self.assertEqual(r, ['deliberate'])

    _, r = self.anagrams2.get_anagrams("deliberated")
    self.assertEqual(r, ['deliberated'])

    _, r = self.anagrams2.get_anagrams("deliberately")
    self.assertEqual(r, ['deliberately'])

    _, r = self.anagrams2.get_anagrams("deliberateness")
    self.assertEqual(r, ['deliberateness'])

    _, r = self.anagrams2.get_anagrams("deliberates")
    self.assertEqual(r, ['deliberates'])

    _, r = self.anagrams2.get_anagrams("deliberating")
    self.assertEqual(r, ['deliberating'])

    _, r = self.anagrams2.get_anagrams("deliberation")
    self.assertEqual(r, ['deliberation'])

    _, r = self.anagrams2.get_anagrams("deliberations")
    self.assertEqual(r, ['deliberations'])

    _, r = self.anagrams2.get_anagrams("deliberative")
    self.assertEqual(r, ['deliberative'])

    _, r = self.anagrams2.get_anagrams("deliberator")
    self.assertEqual(r, ['deliberator'])

    _, r = self.anagrams2.get_anagrams("deliberators")
    self.assertEqual(r, ['deliberators'])

    _, r = self.anagrams2.get_anagrams("delicacies")
    self.assertEqual(r, ['delicacies'])

    _, r = self.anagrams2.get_anagrams("delicacy")
    self.assertEqual(r, ['delicacy'])

    _, r = self.anagrams2.get_anagrams("delicate")
    self.assertEqual(r, ['delicate'])

    _, r = self.anagrams2.get_anagrams("delicately")
    self.assertEqual(r, ['delicately'])

    _, r = self.anagrams2.get_anagrams("delicatessen")
    self.assertEqual(r, ['delicatessen'])

    _, r = self.anagrams2.get_anagrams("delicious")
    self.assertEqual(r, ['delicious'])

    _, r = self.anagrams2.get_anagrams("deliciously")
    self.assertEqual(r, ['deliciously'])

    _, r = self.anagrams2.get_anagrams("delight")
    self.assertEqual(r, ['delight', 'lighted'])

    _, r = self.anagrams2.get_anagrams("delighted")
    self.assertEqual(r, ['delighted'])

    _, r = self.anagrams2.get_anagrams("delightedly")
    self.assertEqual(r, ['delightedly'])

    _, r = self.anagrams2.get_anagrams("delightful")
    self.assertEqual(r, ['delightful'])

    _, r = self.anagrams2.get_anagrams("delightfully")
    self.assertEqual(r, ['delightfully'])

    _, r = self.anagrams2.get_anagrams("delighting")
    self.assertEqual(r, ['delighting'])

    _, r = self.anagrams2.get_anagrams("delights")
    self.assertEqual(r, ['delights', 'slighted'])

    _, r = self.anagrams2.get_anagrams("delilah")
    self.assertEqual(r, ['delilah'])

    _, r = self.anagrams2.get_anagrams("delimit")
    self.assertEqual(r, ['delimit', 'limited'])

    _, r = self.anagrams2.get_anagrams("delimitation")
    self.assertEqual(r, ['delimitation'])

    _, r = self.anagrams2.get_anagrams("delimited")
    self.assertEqual(r, ['delimited'])

    _, r = self.anagrams2.get_anagrams("delimiter")
    self.assertEqual(r, ['delimiter'])

    _, r = self.anagrams2.get_anagrams("delimiters")
    self.assertEqual(r, ['delimiters'])

    _, r = self.anagrams2.get_anagrams("delimiting")
    self.assertEqual(r, ['delimiting'])

    _, r = self.anagrams2.get_anagrams("delimits")
    self.assertEqual(r, ['delimits'])

    _, r = self.anagrams2.get_anagrams("delineament")
    self.assertEqual(r, ['delineament'])

    _, r = self.anagrams2.get_anagrams("delineate")
    self.assertEqual(r, ['delineate'])

    _, r = self.anagrams2.get_anagrams("delineated")
    self.assertEqual(r, ['delineated'])

    _, r = self.anagrams2.get_anagrams("delineates")
    self.assertEqual(r, ['delineates'])

    _, r = self.anagrams2.get_anagrams("delineating")
    self.assertEqual(r, ['delineating'])

    _, r = self.anagrams2.get_anagrams("delineation")
    self.assertEqual(r, ['delineation'])

    _, r = self.anagrams2.get_anagrams("delinquency")
    self.assertEqual(r, ['delinquency'])

    _, r = self.anagrams2.get_anagrams("delinquent")
    self.assertEqual(r, ['delinquent'])

    _, r = self.anagrams2.get_anagrams("delirious")
    self.assertEqual(r, ['delirious'])

    _, r = self.anagrams2.get_anagrams("deliriously")
    self.assertEqual(r, ['deliriously'])

    _, r = self.anagrams2.get_anagrams("delirium")
    self.assertEqual(r, ['delirium'])

    _, r = self.anagrams2.get_anagrams("deliver")
    self.assertEqual(r, ['deliver', 'reviled'])

    _, r = self.anagrams2.get_anagrams("deliverable")
    self.assertEqual(r, ['deliverable'])

    _, r = self.anagrams2.get_anagrams("deliverables")
    self.assertEqual(r, ['deliverables'])

    _, r = self.anagrams2.get_anagrams("deliverance")
    self.assertEqual(r, ['deliverance'])

    _, r = self.anagrams2.get_anagrams("delivered")
    self.assertEqual(r, ['delivered'])

    _, r = self.anagrams2.get_anagrams("deliverer")
    self.assertEqual(r, ['deliverer'])

    _, r = self.anagrams2.get_anagrams("deliverers")
    self.assertEqual(r, ['deliverers'])

    _, r = self.anagrams2.get_anagrams("deliveries")
    self.assertEqual(r, ['deliveries'])

    _, r = self.anagrams2.get_anagrams("delivering")
    self.assertEqual(r, ['delivering'])

    _, r = self.anagrams2.get_anagrams("delivers")
    self.assertEqual(r, ['delivers', 'silvered'])

    _, r = self.anagrams2.get_anagrams("delivery")
    self.assertEqual(r, ['delivery'])

    _, r = self.anagrams2.get_anagrams("dell")
    self.assertEqual(r, ['dell'])

    _, r = self.anagrams2.get_anagrams("della")
    self.assertEqual(r, ['della', 'ladle'])

    _, r = self.anagrams2.get_anagrams("dells")
    self.assertEqual(r, ['dells'])

    _, r = self.anagrams2.get_anagrams("dellwood")
    self.assertEqual(r, ['dellwood'])

    _, r = self.anagrams2.get_anagrams("delmarva")
    self.assertEqual(r, ['delmarva'])

    _, r = self.anagrams2.get_anagrams("delphi")
    self.assertEqual(r, ['delphi'])

    _, r = self.anagrams2.get_anagrams("delphic")
    self.assertEqual(r, ['delphic'])

    _, r = self.anagrams2.get_anagrams("delphically")
    self.assertEqual(r, ['delphically'])

    _, r = self.anagrams2.get_anagrams("delphinus")
    self.assertEqual(r, ['delphinus'])

    _, r = self.anagrams2.get_anagrams("delta")
    self.assertEqual(r, ['dealt', 'delta'])

    _, r = self.anagrams2.get_anagrams("deltas")
    self.assertEqual(r, ['deltas', 'lasted', 'salted', 'slated'])

    _, r = self.anagrams2.get_anagrams("delude")
    self.assertEqual(r, ['delude', 'eluded'])

    _, r = self.anagrams2.get_anagrams("deluded")
    self.assertEqual(r, ['deluded'])

    _, r = self.anagrams2.get_anagrams("deludes")
    self.assertEqual(r, ['deludes'])

    _, r = self.anagrams2.get_anagrams("deluding")
    self.assertEqual(r, ['deluding', 'indulged'])

    _, r = self.anagrams2.get_anagrams("deluge")
    self.assertEqual(r, ['deluge'])

    _, r = self.anagrams2.get_anagrams("deluged")
    self.assertEqual(r, ['deluged'])

    _, r = self.anagrams2.get_anagrams("deluges")
    self.assertEqual(r, ['deluges'])

    _, r = self.anagrams2.get_anagrams("delusion")
    self.assertEqual(r, ['delusion'])

    _, r = self.anagrams2.get_anagrams("delusions")
    self.assertEqual(r, ['delusions'])

    _, r = self.anagrams2.get_anagrams("deluxe")
    self.assertEqual(r, ['deluxe'])

    _, r = self.anagrams2.get_anagrams("delve")
    self.assertEqual(r, ['delve'])

    _, r = self.anagrams2.get_anagrams("delves")
    self.assertEqual(r, ['delves'])

    _, r = self.anagrams2.get_anagrams("delving")
    self.assertEqual(r, ['delving'])

    _, r = self.anagrams2.get_anagrams("demagnify")
    self.assertEqual(r, ['demagnify'])

    _, r = self.anagrams2.get_anagrams("demagogue")
    self.assertEqual(r, ['demagogue'])

    _, r = self.anagrams2.get_anagrams("demand")
    self.assertEqual(r, ['damned', 'demand', 'madden'])

    _, r = self.anagrams2.get_anagrams("demanded")
    self.assertEqual(r, ['demanded'])

    _, r = self.anagrams2.get_anagrams("demander")
    self.assertEqual(r, ['demander'])

    _, r = self.anagrams2.get_anagrams("demanding")
    self.assertEqual(r, ['demanding', 'maddening'])

    _, r = self.anagrams2.get_anagrams("demandingly")
    self.assertEqual(r, ['demandingly'])

    _, r = self.anagrams2.get_anagrams("demands")
    self.assertEqual(r, ['demands'])

    _, r = self.anagrams2.get_anagrams("demarcate")
    self.assertEqual(r, ['demarcate'])

    _, r = self.anagrams2.get_anagrams("demeanor")
    self.assertEqual(r, ['demeanor'])

    _, r = self.anagrams2.get_anagrams("demented")
    self.assertEqual(r, ['demented'])

    _, r = self.anagrams2.get_anagrams("demerit")
    self.assertEqual(r, ['demerit', 'merited'])

    _, r = self.anagrams2.get_anagrams("demeter")
    self.assertEqual(r, ['demeter'])

    _, r = self.anagrams2.get_anagrams("demigod")
    self.assertEqual(r, ['demigod'])

    _, r = self.anagrams2.get_anagrams("demise")
    self.assertEqual(r, ['demise'])

    _, r = self.anagrams2.get_anagrams("demo")
    self.assertEqual(r, ['demo', 'dome', 'mode'])

    _, r = self.anagrams2.get_anagrams("democracies")
    self.assertEqual(r, ['democracies'])

    _, r = self.anagrams2.get_anagrams("democracy")
    self.assertEqual(r, ['democracy'])

    _, r = self.anagrams2.get_anagrams("democrat")
    self.assertEqual(r, ['democrat'])

    _, r = self.anagrams2.get_anagrams("democratic")
    self.assertEqual(r, ['democratic'])

    _, r = self.anagrams2.get_anagrams("democratically")
    self.assertEqual(r, ['democratically'])

    _, r = self.anagrams2.get_anagrams("democrats")
    self.assertEqual(r, ['democrats'])

    _, r = self.anagrams2.get_anagrams("demodulate")
    self.assertEqual(r, ['demodulate'])

    _, r = self.anagrams2.get_anagrams("demodulator")
    self.assertEqual(r, ['demodulator'])

    _, r = self.anagrams2.get_anagrams("demographic")
    self.assertEqual(r, ['demographic'])

    _, r = self.anagrams2.get_anagrams("demolish")
    self.assertEqual(r, ['demolish'])

    _, r = self.anagrams2.get_anagrams("demolished")
    self.assertEqual(r, ['demolished'])

    _, r = self.anagrams2.get_anagrams("demolishes")
    self.assertEqual(r, ['demolishes'])

    _, r = self.anagrams2.get_anagrams("demolition")
    self.assertEqual(r, ['demolition'])

    _, r = self.anagrams2.get_anagrams("demon")
    self.assertEqual(r, ['demon'])

    _, r = self.anagrams2.get_anagrams("demoniac")
    self.assertEqual(r, ['comedian', 'demoniac'])

    _, r = self.anagrams2.get_anagrams("demonic")
    self.assertEqual(r, ['demonic'])

    _, r = self.anagrams2.get_anagrams("demons")
    self.assertEqual(r, ['demons'])

    _, r = self.anagrams2.get_anagrams("demonstrable")
    self.assertEqual(r, ['demonstrable'])

    _, r = self.anagrams2.get_anagrams("demonstrate")
    self.assertEqual(r, ['demonstrate'])

    _, r = self.anagrams2.get_anagrams("demonstrated")
    self.assertEqual(r, ['demonstrated'])

    _, r = self.anagrams2.get_anagrams("demonstrates")
    self.assertEqual(r, ['demonstrates'])

    _, r = self.anagrams2.get_anagrams("demonstrating")
    self.assertEqual(r, ['demonstrating'])

    _, r = self.anagrams2.get_anagrams("demonstration")
    self.assertEqual(r, ['demonstration'])

    _, r = self.anagrams2.get_anagrams("demonstrations")
    self.assertEqual(r, ['demonstrations'])

    _, r = self.anagrams2.get_anagrams("demonstrative")
    self.assertEqual(r, ['demonstrative'])

    _, r = self.anagrams2.get_anagrams("demonstratively")
    self.assertEqual(r, ['demonstratively'])

    _, r = self.anagrams2.get_anagrams("demonstrator")
    self.assertEqual(r, ['demonstrator'])

    _, r = self.anagrams2.get_anagrams("demonstrators")
    self.assertEqual(r, ['demonstrators'])

    _, r = self.anagrams2.get_anagrams("demoralize")
    self.assertEqual(r, ['demoralize'])

    _, r = self.anagrams2.get_anagrams("demoralized")
    self.assertEqual(r, ['demoralized'])

    _, r = self.anagrams2.get_anagrams("demoralizes")
    self.assertEqual(r, ['demoralizes'])

    _, r = self.anagrams2.get_anagrams("demoralizing")
    self.assertEqual(r, ['demoralizing'])

    _, r = self.anagrams2.get_anagrams("demorgan")
    self.assertEqual(r, ['demorgan'])

    _, r = self.anagrams2.get_anagrams("demote")
    self.assertEqual(r, ['demote'])

    _, r = self.anagrams2.get_anagrams("demountable")
    self.assertEqual(r, ['demountable'])

    _, r = self.anagrams2.get_anagrams("dempsey")
    self.assertEqual(r, ['dempsey'])

    _, r = self.anagrams2.get_anagrams("demultiplex")
    self.assertEqual(r, ['demultiplex', 'multiplexed'])

    _, r = self.anagrams2.get_anagrams("demultiplexed")
    self.assertEqual(r, ['demultiplexed'])

    _, r = self.anagrams2.get_anagrams("demultiplexer")
    self.assertEqual(r, ['demultiplexer'])

    _, r = self.anagrams2.get_anagrams("demultiplexers")
    self.assertEqual(r, ['demultiplexers'])

    _, r = self.anagrams2.get_anagrams("demultiplexing")
    self.assertEqual(r, ['demultiplexing'])

    _, r = self.anagrams2.get_anagrams("demur")
    self.assertEqual(r, ['demur'])

    _, r = self.anagrams2.get_anagrams("demythologize")
    self.assertEqual(r, ['demythologize'])

    _, r = self.anagrams2.get_anagrams("den")
    self.assertEqual(r, ['den', 'end', 'ned'])

    _, r = self.anagrams2.get_anagrams("denature")
    self.assertEqual(r, ['denature'])

    _, r = self.anagrams2.get_anagrams("deneb")
    self.assertEqual(r, ['deneb'])

    _, r = self.anagrams2.get_anagrams("denebola")
    self.assertEqual(r, ['denebola'])

    _, r = self.anagrams2.get_anagrams("deneen")
    self.assertEqual(r, ['deneen'])

    _, r = self.anagrams2.get_anagrams("deniable")
    self.assertEqual(r, ['deniable'])

    _, r = self.anagrams2.get_anagrams("denial")
    self.assertEqual(r, ['daniel', 'denial', 'nailed'])

    _, r = self.anagrams2.get_anagrams("denials")
    self.assertEqual(r, ['daniels', 'denials'])

    _, r = self.anagrams2.get_anagrams("denied")
    self.assertEqual(r, ['denied', 'indeed'])

    _, r = self.anagrams2.get_anagrams("denier")
    self.assertEqual(r, ['denier', 'reined'])

    _, r = self.anagrams2.get_anagrams("denies")
    self.assertEqual(r, ['denies'])

    _, r = self.anagrams2.get_anagrams("denigrate")
    self.assertEqual(r, ['denigrate'])

    _, r = self.anagrams2.get_anagrams("denigrated")
    self.assertEqual(r, ['denigrated'])

    _, r = self.anagrams2.get_anagrams("denigrates")
    self.assertEqual(r, ['denigrates'])

    _, r = self.anagrams2.get_anagrams("denigrating")
    self.assertEqual(r, ['denigrating'])

    _, r = self.anagrams2.get_anagrams("denizen")
    self.assertEqual(r, ['denizen'])

    _, r = self.anagrams2.get_anagrams("denmark")
    self.assertEqual(r, ['denmark'])

    _, r = self.anagrams2.get_anagrams("dennis")
    self.assertEqual(r, ['dennis', 'sinned'])

    _, r = self.anagrams2.get_anagrams("denny")
    self.assertEqual(r, ['denny'])

    _, r = self.anagrams2.get_anagrams("denominate")
    self.assertEqual(r, ['denominate'])

    _, r = self.anagrams2.get_anagrams("denomination")
    self.assertEqual(r, ['denomination'])

    _, r = self.anagrams2.get_anagrams("denominations")
    self.assertEqual(r, ['denominations'])

    _, r = self.anagrams2.get_anagrams("denominator")
    self.assertEqual(r, ['denominator'])

    _, r = self.anagrams2.get_anagrams("denominators")
    self.assertEqual(r, ['denominators'])

    _, r = self.anagrams2.get_anagrams("denotable")
    self.assertEqual(r, ['denotable'])

    _, r = self.anagrams2.get_anagrams("denotation")
    self.assertEqual(r, ['denotation'])

    _, r = self.anagrams2.get_anagrams("denotational")
    self.assertEqual(r, ['denotational'])

    _, r = self.anagrams2.get_anagrams("denotationally")
    self.assertEqual(r, ['denotationally'])

    _, r = self.anagrams2.get_anagrams("denotations")
    self.assertEqual(r, ['denotations'])

    _, r = self.anagrams2.get_anagrams("denotative")
    self.assertEqual(r, ['denotative'])

    _, r = self.anagrams2.get_anagrams("denote")
    self.assertEqual(r, ['denote'])

    _, r = self.anagrams2.get_anagrams("denoted")
    self.assertEqual(r, ['denoted'])

    _, r = self.anagrams2.get_anagrams("denotes")
    self.assertEqual(r, ['denotes'])

    _, r = self.anagrams2.get_anagrams("denoting")
    self.assertEqual(r, ['denoting'])

    _, r = self.anagrams2.get_anagrams("denounce")
    self.assertEqual(r, ['denounce'])

    _, r = self.anagrams2.get_anagrams("denounced")
    self.assertEqual(r, ['denounced'])

    _, r = self.anagrams2.get_anagrams("denounces")
    self.assertEqual(r, ['denounces'])

    _, r = self.anagrams2.get_anagrams("denouncing")
    self.assertEqual(r, ['denouncing'])

    _, r = self.anagrams2.get_anagrams("dens")
    self.assertEqual(r, ['dens', 'ends', 'send'])

    _, r = self.anagrams2.get_anagrams("dense")
    self.assertEqual(r, ['dense', 'needs', 'sneed'])

    _, r = self.anagrams2.get_anagrams("densely")
    self.assertEqual(r, ['densely'])

    _, r = self.anagrams2.get_anagrams("denseness")
    self.assertEqual(r, ['denseness'])

    _, r = self.anagrams2.get_anagrams("denser")
    self.assertEqual(r, ['denser', 'enders', 'sender'])

    _, r = self.anagrams2.get_anagrams("densest")
    self.assertEqual(r, ['densest'])

    _, r = self.anagrams2.get_anagrams("densities")
    self.assertEqual(r, ['densities', 'destinies'])

    _, r = self.anagrams2.get_anagrams("density")
    self.assertEqual(r, ['density', 'destiny'])

    _, r = self.anagrams2.get_anagrams("dent")
    self.assertEqual(r, ['dent', 'tend'])

    _, r = self.anagrams2.get_anagrams("dental")
    self.assertEqual(r, ['dental'])

    _, r = self.anagrams2.get_anagrams("dentally")
    self.assertEqual(r, ['dentally'])

    _, r = self.anagrams2.get_anagrams("dented")
    self.assertEqual(r, ['dented', 'tended'])

    _, r = self.anagrams2.get_anagrams("denting")
    self.assertEqual(r, ['denting', 'tending'])

    _, r = self.anagrams2.get_anagrams("dentist")
    self.assertEqual(r, ['dentist'])

    _, r = self.anagrams2.get_anagrams("dentistry")
    self.assertEqual(r, ['dentistry'])

    _, r = self.anagrams2.get_anagrams("dentists")
    self.assertEqual(r, ['dentists'])

    _, r = self.anagrams2.get_anagrams("denton")
    self.assertEqual(r, ['denton'])

    _, r = self.anagrams2.get_anagrams("dents")
    self.assertEqual(r, ['dents', 'tends'])

    _, r = self.anagrams2.get_anagrams("denture")
    self.assertEqual(r, ['denture'])

    _, r = self.anagrams2.get_anagrams("denude")
    self.assertEqual(r, ['denude', 'dundee'])

    _, r = self.anagrams2.get_anagrams("denumerable")
    self.assertEqual(r, ['denumerable'])

    _, r = self.anagrams2.get_anagrams("denunciate")
    self.assertEqual(r, ['denunciate'])

    _, r = self.anagrams2.get_anagrams("denunciation")
    self.assertEqual(r, ['denunciation'])

    _, r = self.anagrams2.get_anagrams("denver")
    self.assertEqual(r, ['denver'])

    _, r = self.anagrams2.get_anagrams("deny")
    self.assertEqual(r, ['deny', 'dyne'])

    _, r = self.anagrams2.get_anagrams("denying")
    self.assertEqual(r, ['denying'])

    _, r = self.anagrams2.get_anagrams("deodorant")
    self.assertEqual(r, ['deodorant'])

    _, r = self.anagrams2.get_anagrams("deoxyribonucleic")
    self.assertEqual(r, ['deoxyribonucleic'])

    _, r = self.anagrams2.get_anagrams("depart")
    self.assertEqual(r, ['depart', 'parted'])

    _, r = self.anagrams2.get_anagrams("departed")
    self.assertEqual(r, ['departed', 'predated'])

    _, r = self.anagrams2.get_anagrams("departing")
    self.assertEqual(r, ['departing', 'predating'])

    _, r = self.anagrams2.get_anagrams("department")
    self.assertEqual(r, ['department'])

    _, r = self.anagrams2.get_anagrams("departmental")
    self.assertEqual(r, ['departmental'])

    _, r = self.anagrams2.get_anagrams("departments")
    self.assertEqual(r, ['departments'])

    _, r = self.anagrams2.get_anagrams("departs")
    self.assertEqual(r, ['departs'])

    _, r = self.anagrams2.get_anagrams("departure")
    self.assertEqual(r, ['departure'])

    _, r = self.anagrams2.get_anagrams("departures")
    self.assertEqual(r, ['departures'])

    _, r = self.anagrams2.get_anagrams("depend")
    self.assertEqual(r, ['depend', 'pended'])

    _, r = self.anagrams2.get_anagrams("dependability")
    self.assertEqual(r, ['dependability'])

    _, r = self.anagrams2.get_anagrams("dependable")
    self.assertEqual(r, ['dependable'])

    _, r = self.anagrams2.get_anagrams("dependably")
    self.assertEqual(r, ['dependably'])

    _, r = self.anagrams2.get_anagrams("depended")
    self.assertEqual(r, ['depended'])

    _, r = self.anagrams2.get_anagrams("dependence")
    self.assertEqual(r, ['dependence'])

    _, r = self.anagrams2.get_anagrams("dependencies")
    self.assertEqual(r, ['dependencies'])

    _, r = self.anagrams2.get_anagrams("dependency")
    self.assertEqual(r, ['dependency'])

    _, r = self.anagrams2.get_anagrams("dependent")
    self.assertEqual(r, ['dependent'])

    _, r = self.anagrams2.get_anagrams("dependently")
    self.assertEqual(r, ['dependently'])

    _, r = self.anagrams2.get_anagrams("dependents")
    self.assertEqual(r, ['dependents'])

    _, r = self.anagrams2.get_anagrams("depending")
    self.assertEqual(r, ['depending'])

    _, r = self.anagrams2.get_anagrams("depends")
    self.assertEqual(r, ['depends'])

    _, r = self.anagrams2.get_anagrams("depict")
    self.assertEqual(r, ['depict'])

    _, r = self.anagrams2.get_anagrams("depicted")
    self.assertEqual(r, ['depicted'])

    _, r = self.anagrams2.get_anagrams("depicting")
    self.assertEqual(r, ['depicting'])

    _, r = self.anagrams2.get_anagrams("depicts")
    self.assertEqual(r, ['depicts'])

    _, r = self.anagrams2.get_anagrams("deplete")
    self.assertEqual(r, ['deplete'])

    _, r = self.anagrams2.get_anagrams("depleted")
    self.assertEqual(r, ['depleted'])

    _, r = self.anagrams2.get_anagrams("depletes")
    self.assertEqual(r, ['depletes'])

    _, r = self.anagrams2.get_anagrams("depleting")
    self.assertEqual(r, ['depleting'])

    _, r = self.anagrams2.get_anagrams("depletion")
    self.assertEqual(r, ['depletion'])

    _, r = self.anagrams2.get_anagrams("depletions")
    self.assertEqual(r, ['depletions'])

    _, r = self.anagrams2.get_anagrams("deplorable")
    self.assertEqual(r, ['deplorable'])

    _, r = self.anagrams2.get_anagrams("deplore")
    self.assertEqual(r, ['deplore'])

    _, r = self.anagrams2.get_anagrams("deplored")
    self.assertEqual(r, ['deplored'])

    _, r = self.anagrams2.get_anagrams("deplores")
    self.assertEqual(r, ['deplores'])

    _, r = self.anagrams2.get_anagrams("deploring")
    self.assertEqual(r, ['deploring'])

    _, r = self.anagrams2.get_anagrams("deploy")
    self.assertEqual(r, ['deploy'])

    _, r = self.anagrams2.get_anagrams("deployed")
    self.assertEqual(r, ['deployed'])

    _, r = self.anagrams2.get_anagrams("deploying")
    self.assertEqual(r, ['deploying'])

    _, r = self.anagrams2.get_anagrams("deployment")
    self.assertEqual(r, ['deployment'])

    _, r = self.anagrams2.get_anagrams("deployments")
    self.assertEqual(r, ['deployments'])

    _, r = self.anagrams2.get_anagrams("deploys")
    self.assertEqual(r, ['deploys'])

    _, r = self.anagrams2.get_anagrams("deport")
    self.assertEqual(r, ['deport', 'ported'])

    _, r = self.anagrams2.get_anagrams("deportation")
    self.assertEqual(r, ['deportation'])

    _, r = self.anagrams2.get_anagrams("deportee")
    self.assertEqual(r, ['deportee'])

    _, r = self.anagrams2.get_anagrams("deportment")
    self.assertEqual(r, ['deportment'])

    _, r = self.anagrams2.get_anagrams("depose")
    self.assertEqual(r, ['depose'])

    _, r = self.anagrams2.get_anagrams("deposed")
    self.assertEqual(r, ['deposed'])

    _, r = self.anagrams2.get_anagrams("deposes")
    self.assertEqual(r, ['deposes'])

    _, r = self.anagrams2.get_anagrams("deposit")
    self.assertEqual(r, ['deposit', 'posited'])

    _, r = self.anagrams2.get_anagrams("depositary")
    self.assertEqual(r, ['depositary'])

    _, r = self.anagrams2.get_anagrams("deposited")
    self.assertEqual(r, ['deposited'])

    _, r = self.anagrams2.get_anagrams("depositing")
    self.assertEqual(r, ['depositing'])

    _, r = self.anagrams2.get_anagrams("deposition")
    self.assertEqual(r, ['deposition', 'positioned'])

    _, r = self.anagrams2.get_anagrams("depositions")
    self.assertEqual(r, ['depositions'])

    _, r = self.anagrams2.get_anagrams("depositor")
    self.assertEqual(r, ['depositor'])

    _, r = self.anagrams2.get_anagrams("depositors")
    self.assertEqual(r, ['depositors'])

    _, r = self.anagrams2.get_anagrams("depository")
    self.assertEqual(r, ['depository'])

    _, r = self.anagrams2.get_anagrams("deposits")
    self.assertEqual(r, ['deposits'])

    _, r = self.anagrams2.get_anagrams("depot")
    self.assertEqual(r, ['depot', 'opted'])

    _, r = self.anagrams2.get_anagrams("depots")
    self.assertEqual(r, ['depots', 'despot', 'posted'])

    _, r = self.anagrams2.get_anagrams("deprave")
    self.assertEqual(r, ['deprave', 'pervade'])

    _, r = self.anagrams2.get_anagrams("depraved")
    self.assertEqual(r, ['depraved', 'pervaded'])

    _, r = self.anagrams2.get_anagrams("depravity")
    self.assertEqual(r, ['depravity'])

    _, r = self.anagrams2.get_anagrams("deprecate")
    self.assertEqual(r, ['deprecate'])

    _, r = self.anagrams2.get_anagrams("depreciate")
    self.assertEqual(r, ['depreciate'])

    _, r = self.anagrams2.get_anagrams("depreciated")
    self.assertEqual(r, ['depreciated'])

    _, r = self.anagrams2.get_anagrams("depreciates")
    self.assertEqual(r, ['depreciates'])

    _, r = self.anagrams2.get_anagrams("depreciation")
    self.assertEqual(r, ['depreciation'])

    _, r = self.anagrams2.get_anagrams("depress")
    self.assertEqual(r, ['depress', 'pressed'])

    _, r = self.anagrams2.get_anagrams("depressed")
    self.assertEqual(r, ['depressed'])

    _, r = self.anagrams2.get_anagrams("depresses")
    self.assertEqual(r, ['depresses'])

    _, r = self.anagrams2.get_anagrams("depressing")
    self.assertEqual(r, ['depressing'])

    _, r = self.anagrams2.get_anagrams("depression")
    self.assertEqual(r, ['depression'])

    _, r = self.anagrams2.get_anagrams("depressions")
    self.assertEqual(r, ['depressions'])

    _, r = self.anagrams2.get_anagrams("deprivation")
    self.assertEqual(r, ['deprivation'])

    _, r = self.anagrams2.get_anagrams("deprivations")
    self.assertEqual(r, ['deprivations'])

    _, r = self.anagrams2.get_anagrams("deprive")
    self.assertEqual(r, ['deprive'])

    _, r = self.anagrams2.get_anagrams("deprived")
    self.assertEqual(r, ['deprived'])

    _, r = self.anagrams2.get_anagrams("deprives")
    self.assertEqual(r, ['deprives'])

    _, r = self.anagrams2.get_anagrams("depriving")
    self.assertEqual(r, ['depriving'])

    _, r = self.anagrams2.get_anagrams("depth")
    self.assertEqual(r, ['depth'])

    _, r = self.anagrams2.get_anagrams("depths")
    self.assertEqual(r, ['depths'])

    _, r = self.anagrams2.get_anagrams("deputies")
    self.assertEqual(r, ['deputies'])

    _, r = self.anagrams2.get_anagrams("deputy")
    self.assertEqual(r, ['deputy'])

    _, r = self.anagrams2.get_anagrams("dequeue")
    self.assertEqual(r, ['dequeue'])

    _, r = self.anagrams2.get_anagrams("dequeued")
    self.assertEqual(r, ['dequeued'])

    _, r = self.anagrams2.get_anagrams("dequeues")
    self.assertEqual(r, ['dequeues'])

    _, r = self.anagrams2.get_anagrams("dequeuing")
    self.assertEqual(r, ['dequeuing'])

    _, r = self.anagrams2.get_anagrams("derail")
    self.assertEqual(r, ['derail', 'dialer', 'railed'])

    _, r = self.anagrams2.get_anagrams("derailed")
    self.assertEqual(r, ['derailed'])

    _, r = self.anagrams2.get_anagrams("derailing")
    self.assertEqual(r, ['derailing'])

    _, r = self.anagrams2.get_anagrams("derails")
    self.assertEqual(r, ['derails', 'dialers'])

    _, r = self.anagrams2.get_anagrams("derby")
    self.assertEqual(r, ['derby'])

    _, r = self.anagrams2.get_anagrams("derbyshire")
    self.assertEqual(r, ['derbyshire'])

    _, r = self.anagrams2.get_anagrams("dereference")
    self.assertEqual(r, ['dereference'])

    _, r = self.anagrams2.get_anagrams("deregulate")
    self.assertEqual(r, ['deregulate'])

    _, r = self.anagrams2.get_anagrams("deregulated")
    self.assertEqual(r, ['deregulated'])

    _, r = self.anagrams2.get_anagrams("derek")
    self.assertEqual(r, ['derek'])

    _, r = self.anagrams2.get_anagrams("deride")
    self.assertEqual(r, ['deride'])

    _, r = self.anagrams2.get_anagrams("derision")
    self.assertEqual(r, ['derision'])

    _, r = self.anagrams2.get_anagrams("derivable")
    self.assertEqual(r, ['derivable'])

    _, r = self.anagrams2.get_anagrams("derivation")
    self.assertEqual(r, ['derivation'])

    _, r = self.anagrams2.get_anagrams("derivations")
    self.assertEqual(r, ['derivations'])

    _, r = self.anagrams2.get_anagrams("derivative")
    self.assertEqual(r, ['derivative'])

    _, r = self.anagrams2.get_anagrams("derivatives")
    self.assertEqual(r, ['derivatives'])

    _, r = self.anagrams2.get_anagrams("derive")
    self.assertEqual(r, ['derive'])

    _, r = self.anagrams2.get_anagrams("derived")
    self.assertEqual(r, ['derived'])

    _, r = self.anagrams2.get_anagrams("derives")
    self.assertEqual(r, ['derives', 'diverse', 'revised'])

    _, r = self.anagrams2.get_anagrams("deriving")
    self.assertEqual(r, ['deriving'])

    _, r = self.anagrams2.get_anagrams("derogatory")
    self.assertEqual(r, ['derogatory'])

    _, r = self.anagrams2.get_anagrams("derrick")
    self.assertEqual(r, ['derrick'])

    _, r = self.anagrams2.get_anagrams("derriere")
    self.assertEqual(r, ['derriere'])

    _, r = self.anagrams2.get_anagrams("dervish")
    self.assertEqual(r, ['dervish'])

    _, r = self.anagrams2.get_anagrams("des")
    self.assertEqual(r, ['des'])

    _, r = self.anagrams2.get_anagrams("descartes")
    self.assertEqual(r, ['descartes'])

    _, r = self.anagrams2.get_anagrams("descend")
    self.assertEqual(r, ['descend'])

    _, r = self.anagrams2.get_anagrams("descendant")
    self.assertEqual(r, ['descendant'])

    _, r = self.anagrams2.get_anagrams("descendants")
    self.assertEqual(r, ['descendants'])

    _, r = self.anagrams2.get_anagrams("descended")
    self.assertEqual(r, ['descended'])

    _, r = self.anagrams2.get_anagrams("descendent")
    self.assertEqual(r, ['descendent'])

    _, r = self.anagrams2.get_anagrams("descender")
    self.assertEqual(r, ['descender'])

    _, r = self.anagrams2.get_anagrams("descenders")
    self.assertEqual(r, ['descenders'])

    _, r = self.anagrams2.get_anagrams("descending")
    self.assertEqual(r, ['descending'])

    _, r = self.anagrams2.get_anagrams("descends")
    self.assertEqual(r, ['descends'])

    _, r = self.anagrams2.get_anagrams("descent")
    self.assertEqual(r, ['descent', 'scented'])

    _, r = self.anagrams2.get_anagrams("descents")
    self.assertEqual(r, ['descents'])

    _, r = self.anagrams2.get_anagrams("describable")
    self.assertEqual(r, ['describable'])

    _, r = self.anagrams2.get_anagrams("describe")
    self.assertEqual(r, ['describe'])

    _, r = self.anagrams2.get_anagrams("described")
    self.assertEqual(r, ['described'])

    _, r = self.anagrams2.get_anagrams("describer")
    self.assertEqual(r, ['describer'])

    _, r = self.anagrams2.get_anagrams("describes")
    self.assertEqual(r, ['describes'])

    _, r = self.anagrams2.get_anagrams("describing")
    self.assertEqual(r, ['describing'])

    _, r = self.anagrams2.get_anagrams("description")
    self.assertEqual(r, ['description', 'predictions'])

    _, r = self.anagrams2.get_anagrams("descriptions")
    self.assertEqual(r, ['descriptions'])

    _, r = self.anagrams2.get_anagrams("descriptive")
    self.assertEqual(r, ['descriptive'])

    _, r = self.anagrams2.get_anagrams("descriptively")
    self.assertEqual(r, ['descriptively'])

    _, r = self.anagrams2.get_anagrams("descriptives")
    self.assertEqual(r, ['descriptives'])

    _, r = self.anagrams2.get_anagrams("descriptor")
    self.assertEqual(r, ['descriptor'])

    _, r = self.anagrams2.get_anagrams("descriptors")
    self.assertEqual(r, ['descriptors'])

    _, r = self.anagrams2.get_anagrams("descry")
    self.assertEqual(r, ['descry'])

    _, r = self.anagrams2.get_anagrams("desecrate")
    self.assertEqual(r, ['desecrate'])

    _, r = self.anagrams2.get_anagrams("desegregate")
    self.assertEqual(r, ['desegregate'])

    _, r = self.anagrams2.get_anagrams("desert")
    self.assertEqual(r, ['desert', 'rested'])

    _, r = self.anagrams2.get_anagrams("deserted")
    self.assertEqual(r, ['deserted'])

    _, r = self.anagrams2.get_anagrams("deserter")
    self.assertEqual(r, ['deserter'])

    _, r = self.anagrams2.get_anagrams("deserters")
    self.assertEqual(r, ['deserters'])

    _, r = self.anagrams2.get_anagrams("deserting")
    self.assertEqual(r, ['deserting'])

    _, r = self.anagrams2.get_anagrams("desertion")
    self.assertEqual(r, ['desertion'])

    _, r = self.anagrams2.get_anagrams("desertions")
    self.assertEqual(r, ['desertions'])

    _, r = self.anagrams2.get_anagrams("deserts")
    self.assertEqual(r, ['deserts', 'dessert'])

    _, r = self.anagrams2.get_anagrams("deserve")
    self.assertEqual(r, ['deserve', 'severed'])

    _, r = self.anagrams2.get_anagrams("deserved")
    self.assertEqual(r, ['deserved'])

    _, r = self.anagrams2.get_anagrams("deserves")
    self.assertEqual(r, ['deserves'])

    _, r = self.anagrams2.get_anagrams("deserving")
    self.assertEqual(r, ['deserving'])

    _, r = self.anagrams2.get_anagrams("deservingly")
    self.assertEqual(r, ['deservingly'])

    _, r = self.anagrams2.get_anagrams("deservings")
    self.assertEqual(r, ['deservings'])

    _, r = self.anagrams2.get_anagrams("desiderata")
    self.assertEqual(r, ['desiderata'])

    _, r = self.anagrams2.get_anagrams("desideratum")
    self.assertEqual(r, ['desideratum'])

    _, r = self.anagrams2.get_anagrams("design")
    self.assertEqual(r, ['deigns', 'design', 'signed', 'singed'])

    _, r = self.anagrams2.get_anagrams("designate")
    self.assertEqual(r, ['designate'])

    _, r = self.anagrams2.get_anagrams("designated")
    self.assertEqual(r, ['designated'])

    _, r = self.anagrams2.get_anagrams("designates")
    self.assertEqual(r, ['designates'])

    _, r = self.anagrams2.get_anagrams("designating")
    self.assertEqual(r, ['designating'])

    _, r = self.anagrams2.get_anagrams("designation")
    self.assertEqual(r, ['designation'])

    _, r = self.anagrams2.get_anagrams("designations")
    self.assertEqual(r, ['designations'])

    _, r = self.anagrams2.get_anagrams("designator")
    self.assertEqual(r, ['designator'])

    _, r = self.anagrams2.get_anagrams("designators")
    self.assertEqual(r, ['designators'])

    _, r = self.anagrams2.get_anagrams("designed")
    self.assertEqual(r, ['designed'])

    _, r = self.anagrams2.get_anagrams("designer")
    self.assertEqual(r, ['designer', 'redesign', 'resigned'])

    _, r = self.anagrams2.get_anagrams("designers")
    self.assertEqual(r, ['designers', 'redesigns'])

    _, r = self.anagrams2.get_anagrams("designing")
    self.assertEqual(r, ['designing'])

    _, r = self.anagrams2.get_anagrams("designs")
    self.assertEqual(r, ['designs'])

    _, r = self.anagrams2.get_anagrams("desirability")
    self.assertEqual(r, ['desirability'])

    _, r = self.anagrams2.get_anagrams("desirable")
    self.assertEqual(r, ['desirable'])

    _, r = self.anagrams2.get_anagrams("desirably")
    self.assertEqual(r, ['desirably'])

    _, r = self.anagrams2.get_anagrams("desire")
    self.assertEqual(r, ['desire', 'reside'])

    _, r = self.anagrams2.get_anagrams("desired")
    self.assertEqual(r, ['desired', 'resided'])

    _, r = self.anagrams2.get_anagrams("desires")
    self.assertEqual(r, ['desires', 'resides'])

    _, r = self.anagrams2.get_anagrams("desiring")
    self.assertEqual(r, ['desiring', 'residing', 'ringside'])

    _, r = self.anagrams2.get_anagrams("desirous")
    self.assertEqual(r, ['desirous'])

    _, r = self.anagrams2.get_anagrams("desist")
    self.assertEqual(r, ['desist'])

    _, r = self.anagrams2.get_anagrams("desk")
    self.assertEqual(r, ['desk'])

    _, r = self.anagrams2.get_anagrams("desks")
    self.assertEqual(r, ['desks'])

    _, r = self.anagrams2.get_anagrams("desktop")
    self.assertEqual(r, ['desktop'])

    _, r = self.anagrams2.get_anagrams("desmond")
    self.assertEqual(r, ['desmond', 'edmonds'])

    _, r = self.anagrams2.get_anagrams("desolate")
    self.assertEqual(r, ['desolate'])

    _, r = self.anagrams2.get_anagrams("desolately")
    self.assertEqual(r, ['desolately'])

    _, r = self.anagrams2.get_anagrams("desolation")
    self.assertEqual(r, ['desolation'])

    _, r = self.anagrams2.get_anagrams("desolations")
    self.assertEqual(r, ['desolations'])

    _, r = self.anagrams2.get_anagrams("despair")
    self.assertEqual(r, ['aspired', 'despair', 'diapers', 'praised'])

    _, r = self.anagrams2.get_anagrams("despaired")
    self.assertEqual(r, ['despaired'])

    _, r = self.anagrams2.get_anagrams("despairing")
    self.assertEqual(r, ['despairing'])

    _, r = self.anagrams2.get_anagrams("despairingly")
    self.assertEqual(r, ['despairingly', 'redisplaying'])

    _, r = self.anagrams2.get_anagrams("despairs")
    self.assertEqual(r, ['despairs'])

    _, r = self.anagrams2.get_anagrams("despatch")
    self.assertEqual(r, ['despatch'])

    _, r = self.anagrams2.get_anagrams("despatched")
    self.assertEqual(r, ['despatched'])

    _, r = self.anagrams2.get_anagrams("desperado")
    self.assertEqual(r, ['desperado'])

    _, r = self.anagrams2.get_anagrams("desperate")
    self.assertEqual(r, ['desperate'])

    _, r = self.anagrams2.get_anagrams("desperately")
    self.assertEqual(r, ['desperately'])

    _, r = self.anagrams2.get_anagrams("desperation")
    self.assertEqual(r, ['desperation'])

    _, r = self.anagrams2.get_anagrams("despicable")
    self.assertEqual(r, ['despicable'])

    _, r = self.anagrams2.get_anagrams("despise")
    self.assertEqual(r, ['despise'])

    _, r = self.anagrams2.get_anagrams("despised")
    self.assertEqual(r, ['despised'])

    _, r = self.anagrams2.get_anagrams("despises")
    self.assertEqual(r, ['despises'])

    _, r = self.anagrams2.get_anagrams("despising")
    self.assertEqual(r, ['despising'])

    _, r = self.anagrams2.get_anagrams("despite")
    self.assertEqual(r, ['despite'])

    _, r = self.anagrams2.get_anagrams("despoil")
    self.assertEqual(r, ['despoil', 'spoiled'])

    _, r = self.anagrams2.get_anagrams("despondent")
    self.assertEqual(r, ['despondent'])

    _, r = self.anagrams2.get_anagrams("despot")
    self.assertEqual(r, ['depots', 'despot', 'posted'])

    _, r = self.anagrams2.get_anagrams("despotic")
    self.assertEqual(r, ['despotic'])

    _, r = self.anagrams2.get_anagrams("despotism")
    self.assertEqual(r, ['despotism'])

    _, r = self.anagrams2.get_anagrams("despots")
    self.assertEqual(r, ['despots'])

    _, r = self.anagrams2.get_anagrams("dessert")
    self.assertEqual(r, ['deserts', 'dessert'])

    _, r = self.anagrams2.get_anagrams("desserts")
    self.assertEqual(r, ['desserts', 'stressed'])

    _, r = self.anagrams2.get_anagrams("dessicate")
    self.assertEqual(r, ['dessicate'])

    _, r = self.anagrams2.get_anagrams("destabilize")
    self.assertEqual(r, ['destabilize'])

    _, r = self.anagrams2.get_anagrams("destination")
    self.assertEqual(r, ['destination'])

    _, r = self.anagrams2.get_anagrams("destinations")
    self.assertEqual(r, ['destinations'])

    _, r = self.anagrams2.get_anagrams("destine")
    self.assertEqual(r, ['destine'])

    _, r = self.anagrams2.get_anagrams("destined")
    self.assertEqual(r, ['destined'])

    _, r = self.anagrams2.get_anagrams("destinies")
    self.assertEqual(r, ['densities', 'destinies'])

    _, r = self.anagrams2.get_anagrams("destiny")
    self.assertEqual(r, ['density', 'destiny'])

    _, r = self.anagrams2.get_anagrams("destitute")
    self.assertEqual(r, ['destitute'])

    _, r = self.anagrams2.get_anagrams("destitution")
    self.assertEqual(r, ['destitution'])

    _, r = self.anagrams2.get_anagrams("destroy")
    self.assertEqual(r, ['destroy'])

    _, r = self.anagrams2.get_anagrams("destroyed")
    self.assertEqual(r, ['destroyed'])

    _, r = self.anagrams2.get_anagrams("destroyer")
    self.assertEqual(r, ['destroyer'])

    _, r = self.anagrams2.get_anagrams("destroyers")
    self.assertEqual(r, ['destroyers'])

    _, r = self.anagrams2.get_anagrams("destroying")
    self.assertEqual(r, ['destroying'])

    _, r = self.anagrams2.get_anagrams("destroys")
    self.assertEqual(r, ['destroys'])

    _, r = self.anagrams2.get_anagrams("destruct")
    self.assertEqual(r, ['destruct'])

    _, r = self.anagrams2.get_anagrams("destruction")
    self.assertEqual(r, ['destruction'])

    _, r = self.anagrams2.get_anagrams("destructions")
    self.assertEqual(r, ['destructions'])

    _, r = self.anagrams2.get_anagrams("destructive")
    self.assertEqual(r, ['destructive'])

    _, r = self.anagrams2.get_anagrams("destructively")
    self.assertEqual(r, ['destructively'])

    _, r = self.anagrams2.get_anagrams("destructiveness")
    self.assertEqual(r, ['destructiveness'])

    _, r = self.anagrams2.get_anagrams("destructor")
    self.assertEqual(r, ['destructor'])

    _, r = self.anagrams2.get_anagrams("destuff")
    self.assertEqual(r, ['destuff', 'stuffed'])

    _, r = self.anagrams2.get_anagrams("destuffing")
    self.assertEqual(r, ['destuffing'])

    _, r = self.anagrams2.get_anagrams("destuffs")
    self.assertEqual(r, ['destuffs'])

    _, r = self.anagrams2.get_anagrams("desuetude")
    self.assertEqual(r, ['desuetude'])

    _, r = self.anagrams2.get_anagrams("desultory")
    self.assertEqual(r, ['desultory'])

    _, r = self.anagrams2.get_anagrams("desynchronize")
    self.assertEqual(r, ['desynchronize'])

    _, r = self.anagrams2.get_anagrams("detach")
    self.assertEqual(r, ['detach'])

    _, r = self.anagrams2.get_anagrams("detached")
    self.assertEqual(r, ['detached'])

    _, r = self.anagrams2.get_anagrams("detacher")
    self.assertEqual(r, ['detacher'])

    _, r = self.anagrams2.get_anagrams("detaches")
    self.assertEqual(r, ['detaches'])

    _, r = self.anagrams2.get_anagrams("detaching")
    self.assertEqual(r, ['detaching'])

    _, r = self.anagrams2.get_anagrams("detachment")
    self.assertEqual(r, ['detachment'])

    _, r = self.anagrams2.get_anagrams("detachments")
    self.assertEqual(r, ['detachments'])

    _, r = self.anagrams2.get_anagrams("detail")
    self.assertEqual(r, ['detail', 'dilate', 'tailed'])

    _, r = self.anagrams2.get_anagrams("detailed")
    self.assertEqual(r, ['detailed'])

    _, r = self.anagrams2.get_anagrams("detailing")
    self.assertEqual(r, ['detailing'])

    _, r = self.anagrams2.get_anagrams("details")
    self.assertEqual(r, ['details', 'dilates'])

    _, r = self.anagrams2.get_anagrams("detain")
    self.assertEqual(r, ['detain'])

    _, r = self.anagrams2.get_anagrams("detained")
    self.assertEqual(r, ['detained'])

    _, r = self.anagrams2.get_anagrams("detaining")
    self.assertEqual(r, ['detaining'])

    _, r = self.anagrams2.get_anagrams("detains")
    self.assertEqual(r, ['detains', 'instead', 'sainted', 'stained'])

    _, r = self.anagrams2.get_anagrams("detect")
    self.assertEqual(r, ['detect'])

    _, r = self.anagrams2.get_anagrams("detectable")
    self.assertEqual(r, ['detectable'])

    _, r = self.anagrams2.get_anagrams("detectably")
    self.assertEqual(r, ['detectably'])

    _, r = self.anagrams2.get_anagrams("detected")
    self.assertEqual(r, ['detected'])

    _, r = self.anagrams2.get_anagrams("detecting")
    self.assertEqual(r, ['detecting'])

    _, r = self.anagrams2.get_anagrams("detection")
    self.assertEqual(r, ['detection'])

    _, r = self.anagrams2.get_anagrams("detections")
    self.assertEqual(r, ['detections'])

    _, r = self.anagrams2.get_anagrams("detective")
    self.assertEqual(r, ['detective'])

    _, r = self.anagrams2.get_anagrams("detectives")
    self.assertEqual(r, ['detectives'])

    _, r = self.anagrams2.get_anagrams("detector")
    self.assertEqual(r, ['detector'])

    _, r = self.anagrams2.get_anagrams("detectors")
    self.assertEqual(r, ['detectors'])

    _, r = self.anagrams2.get_anagrams("detects")
    self.assertEqual(r, ['detects'])

    _, r = self.anagrams2.get_anagrams("detente")
    self.assertEqual(r, ['detente'])

    _, r = self.anagrams2.get_anagrams("detention")
    self.assertEqual(r, ['detention'])

    _, r = self.anagrams2.get_anagrams("deter")
    self.assertEqual(r, ['deter'])

    _, r = self.anagrams2.get_anagrams("detergent")
    self.assertEqual(r, ['detergent'])

    _, r = self.anagrams2.get_anagrams("deteriorate")
    self.assertEqual(r, ['deteriorate'])

    _, r = self.anagrams2.get_anagrams("deteriorated")
    self.assertEqual(r, ['deteriorated'])

    _, r = self.anagrams2.get_anagrams("deteriorates")
    self.assertEqual(r, ['deteriorates'])

    _, r = self.anagrams2.get_anagrams("deteriorating")
    self.assertEqual(r, ['deteriorating'])

    _, r = self.anagrams2.get_anagrams("deterioration")
    self.assertEqual(r, ['deterioration'])

    _, r = self.anagrams2.get_anagrams("determinable")
    self.assertEqual(r, ['determinable'])

    _, r = self.anagrams2.get_anagrams("determinacy")
    self.assertEqual(r, ['determinacy'])

    _, r = self.anagrams2.get_anagrams("determinant")
    self.assertEqual(r, ['determinant'])

    _, r = self.anagrams2.get_anagrams("determinants")
    self.assertEqual(r, ['determinants'])

    _, r = self.anagrams2.get_anagrams("determinate")
    self.assertEqual(r, ['determinate'])

    _, r = self.anagrams2.get_anagrams("determinately")
    self.assertEqual(r, ['determinately'])

    _, r = self.anagrams2.get_anagrams("determination")
    self.assertEqual(r, ['determination'])

    _, r = self.anagrams2.get_anagrams("determinations")
    self.assertEqual(r, ['determinations'])

    _, r = self.anagrams2.get_anagrams("determinative")
    self.assertEqual(r, ['determinative'])

    _, r = self.anagrams2.get_anagrams("determine")
    self.assertEqual(r, ['determine'])

    _, r = self.anagrams2.get_anagrams("determined")
    self.assertEqual(r, ['determined'])

    _, r = self.anagrams2.get_anagrams("determiner")
    self.assertEqual(r, ['determiner'])

    _, r = self.anagrams2.get_anagrams("determiners")
    self.assertEqual(r, ['determiners'])

    _, r = self.anagrams2.get_anagrams("determines")
    self.assertEqual(r, ['determines'])

    _, r = self.anagrams2.get_anagrams("determining")
    self.assertEqual(r, ['determining'])

    _, r = self.anagrams2.get_anagrams("determinism")
    self.assertEqual(r, ['determinism'])

    _, r = self.anagrams2.get_anagrams("deterministic")
    self.assertEqual(r, ['deterministic'])

    _, r = self.anagrams2.get_anagrams("deterministically")
    self.assertEqual(r, ['deterministically'])

    _, r = self.anagrams2.get_anagrams("deterred")
    self.assertEqual(r, ['deterred'])

    _, r = self.anagrams2.get_anagrams("deterrent")
    self.assertEqual(r, ['deterrent'])

    _, r = self.anagrams2.get_anagrams("deterring")
    self.assertEqual(r, ['deterring'])

    _, r = self.anagrams2.get_anagrams("detest")
    self.assertEqual(r, ['detest', 'tested'])

    _, r = self.anagrams2.get_anagrams("detestable")
    self.assertEqual(r, ['detestable'])

    _, r = self.anagrams2.get_anagrams("detested")
    self.assertEqual(r, ['detested'])

    _, r = self.anagrams2.get_anagrams("detour")
    self.assertEqual(r, ['detour', 'routed', 'toured'])

    _, r = self.anagrams2.get_anagrams("detract")
    self.assertEqual(r, ['detract'])

    _, r = self.anagrams2.get_anagrams("detractor")
    self.assertEqual(r, ['detractor'])

    _, r = self.anagrams2.get_anagrams("detractors")
    self.assertEqual(r, ['detractors'])

    _, r = self.anagrams2.get_anagrams("detracts")
    self.assertEqual(r, ['detracts'])

    _, r = self.anagrams2.get_anagrams("detriment")
    self.assertEqual(r, ['detriment'])

    _, r = self.anagrams2.get_anagrams("detrimental")
    self.assertEqual(r, ['detrimental'])

    _, r = self.anagrams2.get_anagrams("detroit")
    self.assertEqual(r, ['detroit'])

    _, r = self.anagrams2.get_anagrams("deuce")
    self.assertEqual(r, ['deuce'])

    _, r = self.anagrams2.get_anagrams("deus")
    self.assertEqual(r, ['deus', 'dues', 'sued', 'used'])

    _, r = self.anagrams2.get_anagrams("deuterium")
    self.assertEqual(r, ['deuterium'])

    _, r = self.anagrams2.get_anagrams("deutsch")
    self.assertEqual(r, ['deutsch'])

    _, r = self.anagrams2.get_anagrams("devastate")
    self.assertEqual(r, ['devastate'])

    _, r = self.anagrams2.get_anagrams("devastated")
    self.assertEqual(r, ['devastated'])

    _, r = self.anagrams2.get_anagrams("devastates")
    self.assertEqual(r, ['devastates'])

    _, r = self.anagrams2.get_anagrams("devastating")
    self.assertEqual(r, ['devastating'])

    _, r = self.anagrams2.get_anagrams("devastation")
    self.assertEqual(r, ['devastation'])

    _, r = self.anagrams2.get_anagrams("develop")
    self.assertEqual(r, ['develop'])

    _, r = self.anagrams2.get_anagrams("developed")
    self.assertEqual(r, ['developed'])

    _, r = self.anagrams2.get_anagrams("developer")
    self.assertEqual(r, ['developer'])

    _, r = self.anagrams2.get_anagrams("developers")
    self.assertEqual(r, ['developers'])

    _, r = self.anagrams2.get_anagrams("developing")
    self.assertEqual(r, ['developing'])

    _, r = self.anagrams2.get_anagrams("development")
    self.assertEqual(r, ['development'])

    _, r = self.anagrams2.get_anagrams("developmental")
    self.assertEqual(r, ['developmental'])

    _, r = self.anagrams2.get_anagrams("developments")
    self.assertEqual(r, ['developments'])

    _, r = self.anagrams2.get_anagrams("develops")
    self.assertEqual(r, ['develops'])

    _, r = self.anagrams2.get_anagrams("deviant")
    self.assertEqual(r, ['deviant'])

    _, r = self.anagrams2.get_anagrams("deviants")
    self.assertEqual(r, ['deviants'])

    _, r = self.anagrams2.get_anagrams("deviate")
    self.assertEqual(r, ['deviate'])

    _, r = self.anagrams2.get_anagrams("deviated")
    self.assertEqual(r, ['deviated'])

    _, r = self.anagrams2.get_anagrams("deviates")
    self.assertEqual(r, ['deviates'])

    _, r = self.anagrams2.get_anagrams("deviating")
    self.assertEqual(r, ['deviating'])

    _, r = self.anagrams2.get_anagrams("deviation")
    self.assertEqual(r, ['deviation'])

    _, r = self.anagrams2.get_anagrams("deviations")
    self.assertEqual(r, ['deviations'])

    _, r = self.anagrams2.get_anagrams("device")
    self.assertEqual(r, ['device'])

    _, r = self.anagrams2.get_anagrams("devices")
    self.assertEqual(r, ['devices'])

    _, r = self.anagrams2.get_anagrams("devil")
    self.assertEqual(r, ['devil', 'lived'])

    _, r = self.anagrams2.get_anagrams("devilish")
    self.assertEqual(r, ['devilish'])

    _, r = self.anagrams2.get_anagrams("devilishly")
    self.assertEqual(r, ['devilishly'])

    _, r = self.anagrams2.get_anagrams("devils")
    self.assertEqual(r, ['devils'])

    _, r = self.anagrams2.get_anagrams("devious")
    self.assertEqual(r, ['devious'])

    _, r = self.anagrams2.get_anagrams("devise")
    self.assertEqual(r, ['devise'])

    _, r = self.anagrams2.get_anagrams("devised")
    self.assertEqual(r, ['devised'])

    _, r = self.anagrams2.get_anagrams("devises")
    self.assertEqual(r, ['devises'])

    _, r = self.anagrams2.get_anagrams("devising")
    self.assertEqual(r, ['devising'])

    _, r = self.anagrams2.get_anagrams("devisings")
    self.assertEqual(r, ['devisings'])

    _, r = self.anagrams2.get_anagrams("devoid")
    self.assertEqual(r, ['devoid', 'voided'])

    _, r = self.anagrams2.get_anagrams("devolve")
    self.assertEqual(r, ['devolve', 'evolved'])

    _, r = self.anagrams2.get_anagrams("devon")
    self.assertEqual(r, ['devon'])

    _, r = self.anagrams2.get_anagrams("devonshire")
    self.assertEqual(r, ['devonshire'])

    _, r = self.anagrams2.get_anagrams("devote")
    self.assertEqual(r, ['devote', 'vetoed'])

    _, r = self.anagrams2.get_anagrams("devoted")
    self.assertEqual(r, ['devoted'])

    _, r = self.anagrams2.get_anagrams("devotedly")
    self.assertEqual(r, ['devotedly'])

    _, r = self.anagrams2.get_anagrams("devotee")
    self.assertEqual(r, ['devotee'])

    _, r = self.anagrams2.get_anagrams("devotees")
    self.assertEqual(r, ['devotees'])

    _, r = self.anagrams2.get_anagrams("devotes")
    self.assertEqual(r, ['devotes'])

    _, r = self.anagrams2.get_anagrams("devoting")
    self.assertEqual(r, ['devoting'])

    _, r = self.anagrams2.get_anagrams("devotion")
    self.assertEqual(r, ['devotion'])

    _, r = self.anagrams2.get_anagrams("devotions")
    self.assertEqual(r, ['devotions'])

    _, r = self.anagrams2.get_anagrams("devour")
    self.assertEqual(r, ['devour'])

    _, r = self.anagrams2.get_anagrams("devoured")
    self.assertEqual(r, ['devoured'])

    _, r = self.anagrams2.get_anagrams("devourer")
    self.assertEqual(r, ['devourer'])

    _, r = self.anagrams2.get_anagrams("devours")
    self.assertEqual(r, ['devours'])

    _, r = self.anagrams2.get_anagrams("devout")
    self.assertEqual(r, ['devout'])

    _, r = self.anagrams2.get_anagrams("devoutly")
    self.assertEqual(r, ['devoutly'])

    _, r = self.anagrams2.get_anagrams("devoutness")
    self.assertEqual(r, ['devoutness'])

    _, r = self.anagrams2.get_anagrams("dew")
    self.assertEqual(r, ['dew'])

    _, r = self.anagrams2.get_anagrams("dewdrop")
    self.assertEqual(r, ['dewdrop'])

    _, r = self.anagrams2.get_anagrams("dewdrops")
    self.assertEqual(r, ['dewdrops'])

    _, r = self.anagrams2.get_anagrams("dewey")
    self.assertEqual(r, ['dewey'])

    _, r = self.anagrams2.get_anagrams("dewitt")
    self.assertEqual(r, ['dewitt'])

    _, r = self.anagrams2.get_anagrams("dewy")
    self.assertEqual(r, ['dewy'])

    _, r = self.anagrams2.get_anagrams("dexedrine")
    self.assertEqual(r, ['dexedrine'])

    _, r = self.anagrams2.get_anagrams("dexterity")
    self.assertEqual(r, ['dexterity'])

    _, r = self.anagrams2.get_anagrams("dhabi")
    self.assertEqual(r, ['dhabi'])

    _, r = self.anagrams2.get_anagrams("diabetes")
    self.assertEqual(r, ['diabetes'])

    _, r = self.anagrams2.get_anagrams("diabetic")
    self.assertEqual(r, ['diabetic'])

    _, r = self.anagrams2.get_anagrams("diabolic")
    self.assertEqual(r, ['diabolic'])

    _, r = self.anagrams2.get_anagrams("diachronic")
    self.assertEqual(r, ['diachronic'])

    _, r = self.anagrams2.get_anagrams("diacritical")
    self.assertEqual(r, ['diacritical'])

    _, r = self.anagrams2.get_anagrams("diadem")
    self.assertEqual(r, ['diadem'])

    _, r = self.anagrams2.get_anagrams("diagnosable")
    self.assertEqual(r, ['diagnosable'])

    _, r = self.anagrams2.get_anagrams("diagnose")
    self.assertEqual(r, ['diagnose'])

    _, r = self.anagrams2.get_anagrams("diagnosed")
    self.assertEqual(r, ['diagnosed'])

    _, r = self.anagrams2.get_anagrams("diagnoses")
    self.assertEqual(r, ['diagnoses'])

    _, r = self.anagrams2.get_anagrams("diagnosing")
    self.assertEqual(r, ['diagnosing'])

    _, r = self.anagrams2.get_anagrams("diagnosis")
    self.assertEqual(r, ['diagnosis'])

    _, r = self.anagrams2.get_anagrams("diagnostic")
    self.assertEqual(r, ['diagnostic'])

    _, r = self.anagrams2.get_anagrams("diagnostician")
    self.assertEqual(r, ['diagnostician'])

    _, r = self.anagrams2.get_anagrams("diagnostics")
    self.assertEqual(r, ['diagnostics'])

    _, r = self.anagrams2.get_anagrams("diagonal")
    self.assertEqual(r, ['diagonal'])

    _, r = self.anagrams2.get_anagrams("diagonally")
    self.assertEqual(r, ['diagonally'])

    _, r = self.anagrams2.get_anagrams("diagonals")
    self.assertEqual(r, ['diagonals'])

    _, r = self.anagrams2.get_anagrams("diagram")
    self.assertEqual(r, ['diagram'])

    _, r = self.anagrams2.get_anagrams("diagrammable")
    self.assertEqual(r, ['diagrammable'])

    _, r = self.anagrams2.get_anagrams("diagrammatic")
    self.assertEqual(r, ['diagrammatic'])

    _, r = self.anagrams2.get_anagrams("diagrammatically")
    self.assertEqual(r, ['diagrammatically'])

    _, r = self.anagrams2.get_anagrams("diagrammed")
    self.assertEqual(r, ['diagrammed'])

    _, r = self.anagrams2.get_anagrams("diagrammer")
    self.assertEqual(r, ['diagrammer'])

    _, r = self.anagrams2.get_anagrams("diagrammers")
    self.assertEqual(r, ['diagrammers'])

    _, r = self.anagrams2.get_anagrams("diagramming")
    self.assertEqual(r, ['diagramming'])

    _, r = self.anagrams2.get_anagrams("diagrams")
    self.assertEqual(r, ['diagrams'])

    _, r = self.anagrams2.get_anagrams("dial")
    self.assertEqual(r, ['dali', 'dial', 'laid'])

    _, r = self.anagrams2.get_anagrams("dialect")
    self.assertEqual(r, ['citadel', 'dialect'])

    _, r = self.anagrams2.get_anagrams("dialectic")
    self.assertEqual(r, ['dialectic'])

    _, r = self.anagrams2.get_anagrams("dialects")
    self.assertEqual(r, ['citadels', 'dialects'])

    _, r = self.anagrams2.get_anagrams("dialed")
    self.assertEqual(r, ['dialed'])

    _, r = self.anagrams2.get_anagrams("dialer")
    self.assertEqual(r, ['derail', 'dialer', 'railed'])

    _, r = self.anagrams2.get_anagrams("dialers")
    self.assertEqual(r, ['derails', 'dialers'])

    _, r = self.anagrams2.get_anagrams("dialing")
    self.assertEqual(r, ['dialing'])

    _, r = self.anagrams2.get_anagrams("dialog")
    self.assertEqual(r, ['dialog'])

    _, r = self.anagrams2.get_anagrams("dialogs")
    self.assertEqual(r, ['dialogs'])

    _, r = self.anagrams2.get_anagrams("dialogue")
    self.assertEqual(r, ['dialogue'])

    _, r = self.anagrams2.get_anagrams("dialogues")
    self.assertEqual(r, ['dialogues'])

    _, r = self.anagrams2.get_anagrams("dials")
    self.assertEqual(r, ['dials'])

    _, r = self.anagrams2.get_anagrams("dialup")
    self.assertEqual(r, ['dialup'])

    _, r = self.anagrams2.get_anagrams("dialysis")
    self.assertEqual(r, ['dialysis'])

    _, r = self.anagrams2.get_anagrams("diamagnetic")
    self.assertEqual(r, ['diamagnetic'])

    _, r = self.anagrams2.get_anagrams("diameter")
    self.assertEqual(r, ['diameter'])

    _, r = self.anagrams2.get_anagrams("diameters")
    self.assertEqual(r, ['diameters'])

    _, r = self.anagrams2.get_anagrams("diametric")
    self.assertEqual(r, ['diametric'])

    _, r = self.anagrams2.get_anagrams("diametrically")
    self.assertEqual(r, ['diametrically'])

    _, r = self.anagrams2.get_anagrams("diamond")
    self.assertEqual(r, ['diamond'])

    _, r = self.anagrams2.get_anagrams("diamonds")
    self.assertEqual(r, ['diamonds'])

    _, r = self.anagrams2.get_anagrams("diana")
    self.assertEqual(r, ['diana', 'nadia'])

    _, r = self.anagrams2.get_anagrams("diane")
    self.assertEqual(r, ['diane'])

    _, r = self.anagrams2.get_anagrams("dianne")
    self.assertEqual(r, ['dianne', 'nadine'])

    _, r = self.anagrams2.get_anagrams("diaper")
    self.assertEqual(r, ['diaper', 'paired', 'repaid'])

    _, r = self.anagrams2.get_anagrams("diapers")
    self.assertEqual(r, ['aspired', 'despair', 'diapers', 'praised'])

    _, r = self.anagrams2.get_anagrams("diaphragm")
    self.assertEqual(r, ['diaphragm'])

    _, r = self.anagrams2.get_anagrams("diaphragms")
    self.assertEqual(r, ['diaphragms'])

    _, r = self.anagrams2.get_anagrams("diaries")
    self.assertEqual(r, ['diaries'])

    _, r = self.anagrams2.get_anagrams("diarrhea")
    self.assertEqual(r, ['diarrhea'])

    _, r = self.anagrams2.get_anagrams("diary")
    self.assertEqual(r, ['dairy', 'diary'])

    _, r = self.anagrams2.get_anagrams("diatribe")
    self.assertEqual(r, ['diatribe'])

    _, r = self.anagrams2.get_anagrams("diatribes")
    self.assertEqual(r, ['diatribes'])

    _, r = self.anagrams2.get_anagrams("dibble")
    self.assertEqual(r, ['dibble'])

    _, r = self.anagrams2.get_anagrams("dice")
    self.assertEqual(r, ['dice', 'iced'])

    _, r = self.anagrams2.get_anagrams("dichotomize")
    self.assertEqual(r, ['dichotomize'])

    _, r = self.anagrams2.get_anagrams("dichotomy")
    self.assertEqual(r, ['dichotomy'])

    _, r = self.anagrams2.get_anagrams("dickens")
    self.assertEqual(r, ['dickens'])

    _, r = self.anagrams2.get_anagrams("dickerson")
    self.assertEqual(r, ['dickerson'])

    _, r = self.anagrams2.get_anagrams("dickinson")
    self.assertEqual(r, ['dickinson'])

    _, r = self.anagrams2.get_anagrams("dickson")
    self.assertEqual(r, ['dickson'])

    _, r = self.anagrams2.get_anagrams("dicky")
    self.assertEqual(r, ['dicky'])

    _, r = self.anagrams2.get_anagrams("dictate")
    self.assertEqual(r, ['dictate'])

    _, r = self.anagrams2.get_anagrams("dictated")
    self.assertEqual(r, ['dictated'])

    _, r = self.anagrams2.get_anagrams("dictates")
    self.assertEqual(r, ['dictates'])

    _, r = self.anagrams2.get_anagrams("dictating")
    self.assertEqual(r, ['dictating'])

    _, r = self.anagrams2.get_anagrams("dictation")
    self.assertEqual(r, ['dictation'])

    _, r = self.anagrams2.get_anagrams("dictations")
    self.assertEqual(r, ['dictations'])

    _, r = self.anagrams2.get_anagrams("dictator")
    self.assertEqual(r, ['dictator'])

    _, r = self.anagrams2.get_anagrams("dictatorial")
    self.assertEqual(r, ['dictatorial'])

    _, r = self.anagrams2.get_anagrams("dictators")
    self.assertEqual(r, ['dictators'])

    _, r = self.anagrams2.get_anagrams("dictatorship")
    self.assertEqual(r, ['dictatorship'])

    _, r = self.anagrams2.get_anagrams("diction")
    self.assertEqual(r, ['diction'])

    _, r = self.anagrams2.get_anagrams("dictionaries")
    self.assertEqual(r, ['dictionaries'])

    _, r = self.anagrams2.get_anagrams("dictionary")
    self.assertEqual(r, ['dictionary'])

    _, r = self.anagrams2.get_anagrams("dictum")
    self.assertEqual(r, ['dictum'])

    _, r = self.anagrams2.get_anagrams("dictums")
    self.assertEqual(r, ['dictums'])

    _, r = self.anagrams2.get_anagrams("did")
    self.assertEqual(r, ['did'])

    _, r = self.anagrams2.get_anagrams("didactic")
    self.assertEqual(r, ['didactic'])

    _, r = self.anagrams2.get_anagrams("diddle")
    self.assertEqual(r, ['diddle'])

    _, r = self.anagrams2.get_anagrams("dido")
    self.assertEqual(r, ['dido'])

    _, r = self.anagrams2.get_anagrams("die")
    self.assertEqual(r, ['die'])

    _, r = self.anagrams2.get_anagrams("diebold")
    self.assertEqual(r, ['diebold'])

    _, r = self.anagrams2.get_anagrams("died")
    self.assertEqual(r, ['died'])

    _, r = self.anagrams2.get_anagrams("diego")
    self.assertEqual(r, ['diego'])

    _, r = self.anagrams2.get_anagrams("diehard")
    self.assertEqual(r, ['diehard'])

    _, r = self.anagrams2.get_anagrams("dielectric")
    self.assertEqual(r, ['dielectric'])

    _, r = self.anagrams2.get_anagrams("dielectrics")
    self.assertEqual(r, ['dielectrics'])

    _, r = self.anagrams2.get_anagrams("diem")
    self.assertEqual(r, ['diem', 'dime', 'idem'])

    _, r = self.anagrams2.get_anagrams("dies")
    self.assertEqual(r, ['dies', 'side'])

    _, r = self.anagrams2.get_anagrams("diesel")
    self.assertEqual(r, ['diesel', 'seidel'])

    _, r = self.anagrams2.get_anagrams("diet")
    self.assertEqual(r, ['diet', 'edit', 'tide', 'tied'])

    _, r = self.anagrams2.get_anagrams("dietary")
    self.assertEqual(r, ['dietary'])

    _, r = self.anagrams2.get_anagrams("dieter")
    self.assertEqual(r, ['dieter'])

    _, r = self.anagrams2.get_anagrams("dieters")
    self.assertEqual(r, ['dieters'])

    _, r = self.anagrams2.get_anagrams("dietetic")
    self.assertEqual(r, ['dietetic'])

    _, r = self.anagrams2.get_anagrams("dietician")
    self.assertEqual(r, ['dietician'])

    _, r = self.anagrams2.get_anagrams("dietitian")
    self.assertEqual(r, ['dietitian', 'initiated'])

    _, r = self.anagrams2.get_anagrams("dietitians")
    self.assertEqual(r, ['dietitians'])

    _, r = self.anagrams2.get_anagrams("dietrich")
    self.assertEqual(r, ['dietrich'])

    _, r = self.anagrams2.get_anagrams("diets")
    self.assertEqual(r, ['diets', 'edits', 'sited', 'tides'])

    _, r = self.anagrams2.get_anagrams("dietz")
    self.assertEqual(r, ['dietz'])

    _, r = self.anagrams2.get_anagrams("differ")
    self.assertEqual(r, ['differ'])

    _, r = self.anagrams2.get_anagrams("differed")
    self.assertEqual(r, ['differed'])

    _, r = self.anagrams2.get_anagrams("difference")
    self.assertEqual(r, ['difference'])

    _, r = self.anagrams2.get_anagrams("differences")
    self.assertEqual(r, ['differences'])

    _, r = self.anagrams2.get_anagrams("different")
    self.assertEqual(r, ['different'])

    _, r = self.anagrams2.get_anagrams("differentiable")
    self.assertEqual(r, ['differentiable'])

    _, r = self.anagrams2.get_anagrams("differential")
    self.assertEqual(r, ['differential'])

    _, r = self.anagrams2.get_anagrams("differentials")
    self.assertEqual(r, ['differentials'])

    _, r = self.anagrams2.get_anagrams("differentiate")
    self.assertEqual(r, ['differentiate'])

    _, r = self.anagrams2.get_anagrams("differentiated")
    self.assertEqual(r, ['differentiated'])

    _, r = self.anagrams2.get_anagrams("differentiates")
    self.assertEqual(r, ['differentiates'])

    _, r = self.anagrams2.get_anagrams("differentiating")
    self.assertEqual(r, ['differentiating'])

    _, r = self.anagrams2.get_anagrams("differentiation")
    self.assertEqual(r, ['differentiation'])

    _, r = self.anagrams2.get_anagrams("differentiations")
    self.assertEqual(r, ['differentiations'])

    _, r = self.anagrams2.get_anagrams("differentiators")
    self.assertEqual(r, ['differentiators'])

    _, r = self.anagrams2.get_anagrams("differently")
    self.assertEqual(r, ['differently'])

    _, r = self.anagrams2.get_anagrams("differer")
    self.assertEqual(r, ['differer'])

    _, r = self.anagrams2.get_anagrams("differers")
    self.assertEqual(r, ['differers'])

    _, r = self.anagrams2.get_anagrams("differing")
    self.assertEqual(r, ['differing'])

    _, r = self.anagrams2.get_anagrams("differs")
    self.assertEqual(r, ['differs'])

    _, r = self.anagrams2.get_anagrams("difficult")
    self.assertEqual(r, ['difficult'])

    _, r = self.anagrams2.get_anagrams("difficulties")
    self.assertEqual(r, ['difficulties'])

    _, r = self.anagrams2.get_anagrams("difficultly")
    self.assertEqual(r, ['difficultly'])

    _, r = self.anagrams2.get_anagrams("difficulty")
    self.assertEqual(r, ['difficulty'])

    _, r = self.anagrams2.get_anagrams("diffract")
    self.assertEqual(r, ['diffract'])

    _, r = self.anagrams2.get_anagrams("diffuse")
    self.assertEqual(r, ['diffuse'])

    _, r = self.anagrams2.get_anagrams("diffused")
    self.assertEqual(r, ['diffused'])

    _, r = self.anagrams2.get_anagrams("diffusely")
    self.assertEqual(r, ['diffusely'])

    _, r = self.anagrams2.get_anagrams("diffuser")
    self.assertEqual(r, ['diffuser'])

    _, r = self.anagrams2.get_anagrams("diffusers")
    self.assertEqual(r, ['diffusers'])

    _, r = self.anagrams2.get_anagrams("diffuses")
    self.assertEqual(r, ['diffuses'])

    _, r = self.anagrams2.get_anagrams("diffusible")
    self.assertEqual(r, ['diffusible'])

    _, r = self.anagrams2.get_anagrams("diffusing")
    self.assertEqual(r, ['diffusing'])

    _, r = self.anagrams2.get_anagrams("diffusion")
    self.assertEqual(r, ['diffusion'])

    _, r = self.anagrams2.get_anagrams("diffusions")
    self.assertEqual(r, ['diffusions'])

    _, r = self.anagrams2.get_anagrams("diffusive")
    self.assertEqual(r, ['diffusive'])

    _, r = self.anagrams2.get_anagrams("dig")
    self.assertEqual(r, ['dig'])

    _, r = self.anagrams2.get_anagrams("digest")
    self.assertEqual(r, ['digest'])

    _, r = self.anagrams2.get_anagrams("digested")
    self.assertEqual(r, ['digested'])

    _, r = self.anagrams2.get_anagrams("digestible")
    self.assertEqual(r, ['digestible'])

    _, r = self.anagrams2.get_anagrams("digesting")
    self.assertEqual(r, ['digesting'])

    _, r = self.anagrams2.get_anagrams("digestion")
    self.assertEqual(r, ['digestion'])

    _, r = self.anagrams2.get_anagrams("digestive")
    self.assertEqual(r, ['digestive'])

    _, r = self.anagrams2.get_anagrams("digests")
    self.assertEqual(r, ['digests'])

    _, r = self.anagrams2.get_anagrams("digger")
    self.assertEqual(r, ['digger'])

    _, r = self.anagrams2.get_anagrams("diggers")
    self.assertEqual(r, ['diggers'])

    _, r = self.anagrams2.get_anagrams("digging")
    self.assertEqual(r, ['digging'])

    _, r = self.anagrams2.get_anagrams("diggings")
    self.assertEqual(r, ['diggings'])

    _, r = self.anagrams2.get_anagrams("digit")
    self.assertEqual(r, ['digit'])

    _, r = self.anagrams2.get_anagrams("digital")
    self.assertEqual(r, ['digital'])

    _, r = self.anagrams2.get_anagrams("digitalis")
    self.assertEqual(r, ['digitalis'])

    _, r = self.anagrams2.get_anagrams("digitally")
    self.assertEqual(r, ['digitally'])

    _, r = self.anagrams2.get_anagrams("digitization")
    self.assertEqual(r, ['digitization'])

    _, r = self.anagrams2.get_anagrams("digitize")
    self.assertEqual(r, ['digitize'])

    _, r = self.anagrams2.get_anagrams("digitized")
    self.assertEqual(r, ['digitized'])

    _, r = self.anagrams2.get_anagrams("digitizes")
    self.assertEqual(r, ['digitizes'])

    _, r = self.anagrams2.get_anagrams("digitizing")
    self.assertEqual(r, ['digitizing'])

    _, r = self.anagrams2.get_anagrams("digits")
    self.assertEqual(r, ['digits'])

    _, r = self.anagrams2.get_anagrams("dignified")
    self.assertEqual(r, ['dignified'])

    _, r = self.anagrams2.get_anagrams("dignify")
    self.assertEqual(r, ['dignify'])

    _, r = self.anagrams2.get_anagrams("dignitary")
    self.assertEqual(r, ['dignitary'])

    _, r = self.anagrams2.get_anagrams("dignities")
    self.assertEqual(r, ['dignities'])

    _, r = self.anagrams2.get_anagrams("dignity")
    self.assertEqual(r, ['dignity', 'tidying'])

    _, r = self.anagrams2.get_anagrams("digram")
    self.assertEqual(r, ['digram'])

    _, r = self.anagrams2.get_anagrams("digress")
    self.assertEqual(r, ['digress'])

    _, r = self.anagrams2.get_anagrams("digressed")
    self.assertEqual(r, ['digressed'])

    _, r = self.anagrams2.get_anagrams("digresses")
    self.assertEqual(r, ['digresses'])

    _, r = self.anagrams2.get_anagrams("digressing")
    self.assertEqual(r, ['digressing'])

    _, r = self.anagrams2.get_anagrams("digression")
    self.assertEqual(r, ['digression'])

    _, r = self.anagrams2.get_anagrams("digressions")
    self.assertEqual(r, ['digressions'])

    _, r = self.anagrams2.get_anagrams("digressive")
    self.assertEqual(r, ['digressive'])

    _, r = self.anagrams2.get_anagrams("digs")
    self.assertEqual(r, ['digs'])

    _, r = self.anagrams2.get_anagrams("dihedral")
    self.assertEqual(r, ['dihedral'])

    _, r = self.anagrams2.get_anagrams("dijkstra")
    self.assertEqual(r, ['dijkstra'])

    _, r = self.anagrams2.get_anagrams("dijon")
    self.assertEqual(r, ['dijon'])

    _, r = self.anagrams2.get_anagrams("dike")
    self.assertEqual(r, ['dike'])

    _, r = self.anagrams2.get_anagrams("dikes")
    self.assertEqual(r, ['dikes', 'skied'])

    _, r = self.anagrams2.get_anagrams("dilapidate")
    self.assertEqual(r, ['dilapidate'])

    _, r = self.anagrams2.get_anagrams("dilatation")
    self.assertEqual(r, ['dilatation'])

    _, r = self.anagrams2.get_anagrams("dilate")
    self.assertEqual(r, ['detail', 'dilate', 'tailed'])

    _, r = self.anagrams2.get_anagrams("dilated")
    self.assertEqual(r, ['dilated'])

    _, r = self.anagrams2.get_anagrams("dilates")
    self.assertEqual(r, ['details', 'dilates'])

    _, r = self.anagrams2.get_anagrams("dilating")
    self.assertEqual(r, ['dilating'])

    _, r = self.anagrams2.get_anagrams("dilation")
    self.assertEqual(r, ['dilation'])

    _, r = self.anagrams2.get_anagrams("dildo")
    self.assertEqual(r, ['dildo'])

    _, r = self.anagrams2.get_anagrams("dilemma")
    self.assertEqual(r, ['dilemma'])

    _, r = self.anagrams2.get_anagrams("dilemmas")
    self.assertEqual(r, ['dilemmas'])

    _, r = self.anagrams2.get_anagrams("diligence")
    self.assertEqual(r, ['diligence'])

    _, r = self.anagrams2.get_anagrams("diligent")
    self.assertEqual(r, ['diligent'])

    _, r = self.anagrams2.get_anagrams("diligently")
    self.assertEqual(r, ['diligently'])

    _, r = self.anagrams2.get_anagrams("dill")
    self.assertEqual(r, ['dill'])

    _, r = self.anagrams2.get_anagrams("dillon")
    self.assertEqual(r, ['dillon'])

    _, r = self.anagrams2.get_anagrams("dilogarithm")
    self.assertEqual(r, ['dilogarithm'])

    _, r = self.anagrams2.get_anagrams("dilute")
    self.assertEqual(r, ['dilute'])

    _, r = self.anagrams2.get_anagrams("diluted")
    self.assertEqual(r, ['diluted'])

    _, r = self.anagrams2.get_anagrams("dilutes")
    self.assertEqual(r, ['dilutes'])

    _, r = self.anagrams2.get_anagrams("diluting")
    self.assertEqual(r, ['diluting'])

    _, r = self.anagrams2.get_anagrams("dilution")
    self.assertEqual(r, ['dilution'])

    _, r = self.anagrams2.get_anagrams("dim")
    self.assertEqual(r, ['dim', 'mid'])

    _, r = self.anagrams2.get_anagrams("dimaggio")
    self.assertEqual(r, ['dimaggio'])

    _, r = self.anagrams2.get_anagrams("dime")
    self.assertEqual(r, ['diem', 'dime', 'idem'])

    _, r = self.anagrams2.get_anagrams("dimension")
    self.assertEqual(r, ['dimension'])

    _, r = self.anagrams2.get_anagrams("dimensional")
    self.assertEqual(r, ['dimensional'])

    _, r = self.anagrams2.get_anagrams("dimensionality")
    self.assertEqual(r, ['dimensionality'])

    _, r = self.anagrams2.get_anagrams("dimensionally")
    self.assertEqual(r, ['dimensionally'])

    _, r = self.anagrams2.get_anagrams("dimensioned")
    self.assertEqual(r, ['dimensioned'])

    _, r = self.anagrams2.get_anagrams("dimensioning")
    self.assertEqual(r, ['dimensioning'])

    _, r = self.anagrams2.get_anagrams("dimensions")
    self.assertEqual(r, ['dimensions'])

    _, r = self.anagrams2.get_anagrams("dimes")
    self.assertEqual(r, ['dimes'])

    _, r = self.anagrams2.get_anagrams("diminish")
    self.assertEqual(r, ['diminish'])

    _, r = self.anagrams2.get_anagrams("diminished")
    self.assertEqual(r, ['diminished'])

    _, r = self.anagrams2.get_anagrams("diminishes")
    self.assertEqual(r, ['diminishes'])

    _, r = self.anagrams2.get_anagrams("diminishing")
    self.assertEqual(r, ['diminishing'])

    _, r = self.anagrams2.get_anagrams("diminution")
    self.assertEqual(r, ['diminution'])

    _, r = self.anagrams2.get_anagrams("diminutive")
    self.assertEqual(r, ['diminutive'])

    _, r = self.anagrams2.get_anagrams("dimly")
    self.assertEqual(r, ['dimly'])

    _, r = self.anagrams2.get_anagrams("dimmed")
    self.assertEqual(r, ['dimmed'])

    _, r = self.anagrams2.get_anagrams("dimmer")
    self.assertEqual(r, ['dimmer'])

    _, r = self.anagrams2.get_anagrams("dimmers")
    self.assertEqual(r, ['dimmers'])

    _, r = self.anagrams2.get_anagrams("dimmest")
    self.assertEqual(r, ['dimmest'])

    _, r = self.anagrams2.get_anagrams("dimming")
    self.assertEqual(r, ['dimming'])

    _, r = self.anagrams2.get_anagrams("dimness")
    self.assertEqual(r, ['dimness'])

    _, r = self.anagrams2.get_anagrams("dimple")
    self.assertEqual(r, ['dimple', 'limped'])

    _, r = self.anagrams2.get_anagrams("dims")
    self.assertEqual(r, ['dims'])

    _, r = self.anagrams2.get_anagrams("din")
    self.assertEqual(r, ['din'])

    _, r = self.anagrams2.get_anagrams("dinah")
    self.assertEqual(r, ['dinah'])

    _, r = self.anagrams2.get_anagrams("dine")
    self.assertEqual(r, ['dine', 'enid'])

    _, r = self.anagrams2.get_anagrams("dined")
    self.assertEqual(r, ['dined'])

    _, r = self.anagrams2.get_anagrams("diner")
    self.assertEqual(r, ['diner'])

    _, r = self.anagrams2.get_anagrams("diners")
    self.assertEqual(r, ['diners', 'rinsed', 'snider'])

    _, r = self.anagrams2.get_anagrams("dines")
    self.assertEqual(r, ['dines'])

    _, r = self.anagrams2.get_anagrams("ding")
    self.assertEqual(r, ['ding'])

    _, r = self.anagrams2.get_anagrams("dinghy")
    self.assertEqual(r, ['dinghy'])

    _, r = self.anagrams2.get_anagrams("dinginess")
    self.assertEqual(r, ['dinginess'])

    _, r = self.anagrams2.get_anagrams("dingo")
    self.assertEqual(r, ['dingo', 'doing'])

    _, r = self.anagrams2.get_anagrams("dingy")
    self.assertEqual(r, ['dingy', 'dying'])

    _, r = self.anagrams2.get_anagrams("dining")
    self.assertEqual(r, ['dining'])

    _, r = self.anagrams2.get_anagrams("dinner")
    self.assertEqual(r, ['dinner'])

    _, r = self.anagrams2.get_anagrams("dinners")
    self.assertEqual(r, ['dinners'])

    _, r = self.anagrams2.get_anagrams("dinnertime")
    self.assertEqual(r, ['dinnertime'])

    _, r = self.anagrams2.get_anagrams("dinnerware")
    self.assertEqual(r, ['dinnerware'])

    _, r = self.anagrams2.get_anagrams("dinosaur")
    self.assertEqual(r, ['dinosaur'])

    _, r = self.anagrams2.get_anagrams("dint")
    self.assertEqual(r, ['dint'])

    _, r = self.anagrams2.get_anagrams("diocletian")
    self.assertEqual(r, ['diocletian'])

    _, r = self.anagrams2.get_anagrams("diode")
    self.assertEqual(r, ['diode'])

    _, r = self.anagrams2.get_anagrams("diodes")
    self.assertEqual(r, ['diodes'])

    _, r = self.anagrams2.get_anagrams("diogenes")
    self.assertEqual(r, ['diogenes'])

    _, r = self.anagrams2.get_anagrams("dion")
    self.assertEqual(r, ['dion', 'indo', 'odin'])

    _, r = self.anagrams2.get_anagrams("dionysian")
    self.assertEqual(r, ['dionysian'])

    _, r = self.anagrams2.get_anagrams("dionysus")
    self.assertEqual(r, ['dionysus'])

    _, r = self.anagrams2.get_anagrams("diophantine")
    self.assertEqual(r, ['diophantine'])

    _, r = self.anagrams2.get_anagrams("diopter")
    self.assertEqual(r, ['diopter'])

    _, r = self.anagrams2.get_anagrams("diorama")
    self.assertEqual(r, ['diorama'])

    _, r = self.anagrams2.get_anagrams("dioxide")
    self.assertEqual(r, ['dioxide'])

    _, r = self.anagrams2.get_anagrams("dip")
    self.assertEqual(r, ['dip'])

    _, r = self.anagrams2.get_anagrams("diphtheria")
    self.assertEqual(r, ['diphtheria'])

    _, r = self.anagrams2.get_anagrams("diphthong")
    self.assertEqual(r, ['diphthong'])

    _, r = self.anagrams2.get_anagrams("diploma")
    self.assertEqual(r, ['diploma'])

    _, r = self.anagrams2.get_anagrams("diplomacy")
    self.assertEqual(r, ['diplomacy'])

    _, r = self.anagrams2.get_anagrams("diplomas")
    self.assertEqual(r, ['diplomas'])

    _, r = self.anagrams2.get_anagrams("diplomat")
    self.assertEqual(r, ['diplomat'])

    _, r = self.anagrams2.get_anagrams("diplomatic")
    self.assertEqual(r, ['diplomatic'])

    _, r = self.anagrams2.get_anagrams("diplomats")
    self.assertEqual(r, ['diplomats'])

    _, r = self.anagrams2.get_anagrams("dipole")
    self.assertEqual(r, ['dipole'])

    _, r = self.anagrams2.get_anagrams("dipped")
    self.assertEqual(r, ['dipped'])

    _, r = self.anagrams2.get_anagrams("dipper")
    self.assertEqual(r, ['dipper', 'ripped'])

    _, r = self.anagrams2.get_anagrams("dippers")
    self.assertEqual(r, ['dippers'])

    _, r = self.anagrams2.get_anagrams("dipping")
    self.assertEqual(r, ['dipping'])

    _, r = self.anagrams2.get_anagrams("dippings")
    self.assertEqual(r, ['dippings'])

    _, r = self.anagrams2.get_anagrams("dips")
    self.assertEqual(r, ['dips'])

    _, r = self.anagrams2.get_anagrams("dirac")
    self.assertEqual(r, ['acrid', 'dirac'])

    _, r = self.anagrams2.get_anagrams("dire")
    self.assertEqual(r, ['dire', 'reid', 'ride'])

    _, r = self.anagrams2.get_anagrams("direct")
    self.assertEqual(r, ['credit', 'direct'])

    _, r = self.anagrams2.get_anagrams("directed")
    self.assertEqual(r, ['credited', 'directed'])

    _, r = self.anagrams2.get_anagrams("directing")
    self.assertEqual(r, ['crediting', 'directing'])

    _, r = self.anagrams2.get_anagrams("direction")
    self.assertEqual(r, ['direction'])

    _, r = self.anagrams2.get_anagrams("directional")
    self.assertEqual(r, ['directional'])

    _, r = self.anagrams2.get_anagrams("directionality")
    self.assertEqual(r, ['directionality'])

    _, r = self.anagrams2.get_anagrams("directionally")
    self.assertEqual(r, ['directionally'])

    _, r = self.anagrams2.get_anagrams("directions")
    self.assertEqual(r, ['directions', 'discretion'])

    _, r = self.anagrams2.get_anagrams("directive")
    self.assertEqual(r, ['directive'])

    _, r = self.anagrams2.get_anagrams("directives")
    self.assertEqual(r, ['directives'])

    _, r = self.anagrams2.get_anagrams("directly")
    self.assertEqual(r, ['directly'])

    _, r = self.anagrams2.get_anagrams("directness")
    self.assertEqual(r, ['directness'])

    _, r = self.anagrams2.get_anagrams("director")
    self.assertEqual(r, ['creditor', 'director'])

    _, r = self.anagrams2.get_anagrams("directorate")
    self.assertEqual(r, ['directorate'])

    _, r = self.anagrams2.get_anagrams("directories")
    self.assertEqual(r, ['directories'])

    _, r = self.anagrams2.get_anagrams("directors")
    self.assertEqual(r, ['creditors', 'directors'])

    _, r = self.anagrams2.get_anagrams("directory")
    self.assertEqual(r, ['directory'])

    _, r = self.anagrams2.get_anagrams("directrices")
    self.assertEqual(r, ['directrices'])

    _, r = self.anagrams2.get_anagrams("directrix")
    self.assertEqual(r, ['directrix'])

    _, r = self.anagrams2.get_anagrams("directs")
    self.assertEqual(r, ['credits', 'directs'])

    _, r = self.anagrams2.get_anagrams("dirge")
    self.assertEqual(r, ['dirge', 'ridge'])

    _, r = self.anagrams2.get_anagrams("dirges")
    self.assertEqual(r, ['dirges', 'ridges'])

    _, r = self.anagrams2.get_anagrams("dirichlet")
    self.assertEqual(r, ['dirichlet'])

    _, r = self.anagrams2.get_anagrams("dirt")
    self.assertEqual(r, ['dirt'])

    _, r = self.anagrams2.get_anagrams("dirtier")
    self.assertEqual(r, ['dirtier'])

    _, r = self.anagrams2.get_anagrams("dirtiest")
    self.assertEqual(r, ['dirtiest'])

    _, r = self.anagrams2.get_anagrams("dirtily")
    self.assertEqual(r, ['dirtily'])

    _, r = self.anagrams2.get_anagrams("dirtiness")
    self.assertEqual(r, ['dirtiness'])

    _, r = self.anagrams2.get_anagrams("dirts")
    self.assertEqual(r, ['dirts'])

    _, r = self.anagrams2.get_anagrams("dirty")
    self.assertEqual(r, ['dirty'])

    _, r = self.anagrams2.get_anagrams("dis")
    self.assertEqual(r, ['dis'])

    _, r = self.anagrams2.get_anagrams("disabilities")
    self.assertEqual(r, ['disabilities'])

    _, r = self.anagrams2.get_anagrams("disability")
    self.assertEqual(r, ['disability'])

    _, r = self.anagrams2.get_anagrams("disable")
    self.assertEqual(r, ['disable'])

    _, r = self.anagrams2.get_anagrams("disabled")
    self.assertEqual(r, ['disabled'])

    _, r = self.anagrams2.get_anagrams("disabler")
    self.assertEqual(r, ['disabler'])

    _, r = self.anagrams2.get_anagrams("disablers")
    self.assertEqual(r, ['disablers'])

    _, r = self.anagrams2.get_anagrams("disables")
    self.assertEqual(r, ['disables'])

    _, r = self.anagrams2.get_anagrams("disabling")
    self.assertEqual(r, ['disabling'])

    _, r = self.anagrams2.get_anagrams("disadvantage")
    self.assertEqual(r, ['disadvantage'])

    _, r = self.anagrams2.get_anagrams("disadvantageous")
    self.assertEqual(r, ['disadvantageous'])

    _, r = self.anagrams2.get_anagrams("disadvantages")
    self.assertEqual(r, ['disadvantages'])

    _, r = self.anagrams2.get_anagrams("disaffected")
    self.assertEqual(r, ['disaffected'])

    _, r = self.anagrams2.get_anagrams("disaffection")
    self.assertEqual(r, ['disaffection'])

    _, r = self.anagrams2.get_anagrams("disagree")
    self.assertEqual(r, ['disagree'])

    _, r = self.anagrams2.get_anagrams("disagreeable")
    self.assertEqual(r, ['disagreeable'])

    _, r = self.anagrams2.get_anagrams("disagreed")
    self.assertEqual(r, ['disagreed'])

    _, r = self.anagrams2.get_anagrams("disagreeing")
    self.assertEqual(r, ['disagreeing'])

    _, r = self.anagrams2.get_anagrams("disagreement")
    self.assertEqual(r, ['disagreement'])

    _, r = self.anagrams2.get_anagrams("disagreements")
    self.assertEqual(r, ['disagreements'])

    _, r = self.anagrams2.get_anagrams("disagrees")
    self.assertEqual(r, ['disagrees'])

    _, r = self.anagrams2.get_anagrams("disallow")
    self.assertEqual(r, ['disallow'])

    _, r = self.anagrams2.get_anagrams("disallowed")
    self.assertEqual(r, ['disallowed'])

    _, r = self.anagrams2.get_anagrams("disallowing")
    self.assertEqual(r, ['disallowing'])

    _, r = self.anagrams2.get_anagrams("disallows")
    self.assertEqual(r, ['disallows'])

    _, r = self.anagrams2.get_anagrams("disambiguate")
    self.assertEqual(r, ['disambiguate'])

    _, r = self.anagrams2.get_anagrams("disambiguated")
    self.assertEqual(r, ['disambiguated'])

    _, r = self.anagrams2.get_anagrams("disambiguates")
    self.assertEqual(r, ['disambiguates'])

    _, r = self.anagrams2.get_anagrams("disambiguating")
    self.assertEqual(r, ['disambiguating'])

    _, r = self.anagrams2.get_anagrams("disambiguation")
    self.assertEqual(r, ['disambiguation'])

    _, r = self.anagrams2.get_anagrams("disambiguations")
    self.assertEqual(r, ['disambiguations'])

    _, r = self.anagrams2.get_anagrams("disappear")
    self.assertEqual(r, ['appraised', 'disappear'])

    _, r = self.anagrams2.get_anagrams("disappearance")
    self.assertEqual(r, ['disappearance'])

    _, r = self.anagrams2.get_anagrams("disappearances")
    self.assertEqual(r, ['disappearances'])

    _, r = self.anagrams2.get_anagrams("disappeared")
    self.assertEqual(r, ['disappeared'])

    _, r = self.anagrams2.get_anagrams("disappearing")
    self.assertEqual(r, ['disappearing'])

    _, r = self.anagrams2.get_anagrams("disappears")
    self.assertEqual(r, ['disappears'])

    _, r = self.anagrams2.get_anagrams("disappoint")
    self.assertEqual(r, ['disappoint'])

    _, r = self.anagrams2.get_anagrams("disappointed")
    self.assertEqual(r, ['disappointed'])

    _, r = self.anagrams2.get_anagrams("disappointing")
    self.assertEqual(r, ['disappointing'])

    _, r = self.anagrams2.get_anagrams("disappointment")
    self.assertEqual(r, ['disappointment'])

    _, r = self.anagrams2.get_anagrams("disappointments")
    self.assertEqual(r, ['disappointments'])

    _, r = self.anagrams2.get_anagrams("disapproval")
    self.assertEqual(r, ['disapproval'])

    _, r = self.anagrams2.get_anagrams("disapprove")
    self.assertEqual(r, ['disapprove'])

    _, r = self.anagrams2.get_anagrams("disapproved")
    self.assertEqual(r, ['disapproved'])

    _, r = self.anagrams2.get_anagrams("disapproves")
    self.assertEqual(r, ['disapproves'])

    _, r = self.anagrams2.get_anagrams("disarm")
    self.assertEqual(r, ['disarm', 'mardis'])

    _, r = self.anagrams2.get_anagrams("disarmament")
    self.assertEqual(r, ['disarmament'])

    _, r = self.anagrams2.get_anagrams("disarmed")
    self.assertEqual(r, ['disarmed'])

    _, r = self.anagrams2.get_anagrams("disarming")
    self.assertEqual(r, ['disarming'])

    _, r = self.anagrams2.get_anagrams("disarms")
    self.assertEqual(r, ['disarms'])

    _, r = self.anagrams2.get_anagrams("disassemble")
    self.assertEqual(r, ['disassemble'])

    _, r = self.anagrams2.get_anagrams("disassembled")
    self.assertEqual(r, ['disassembled'])

    _, r = self.anagrams2.get_anagrams("disassembles")
    self.assertEqual(r, ['disassembles'])

    _, r = self.anagrams2.get_anagrams("disassembling")
    self.assertEqual(r, ['disassembling'])

    _, r = self.anagrams2.get_anagrams("disassembly")
    self.assertEqual(r, ['disassembly'])

    _, r = self.anagrams2.get_anagrams("disaster")
    self.assertEqual(r, ['disaster'])

    _, r = self.anagrams2.get_anagrams("disasters")
    self.assertEqual(r, ['disasters'])

    _, r = self.anagrams2.get_anagrams("disastrous")
    self.assertEqual(r, ['disastrous'])

    _, r = self.anagrams2.get_anagrams("disastrously")
    self.assertEqual(r, ['disastrously'])

    _, r = self.anagrams2.get_anagrams("disband")
    self.assertEqual(r, ['disband'])

    _, r = self.anagrams2.get_anagrams("disbanded")
    self.assertEqual(r, ['disbanded'])

    _, r = self.anagrams2.get_anagrams("disbanding")
    self.assertEqual(r, ['disbanding'])

    _, r = self.anagrams2.get_anagrams("disbands")
    self.assertEqual(r, ['disbands'])

    _, r = self.anagrams2.get_anagrams("disburse")
    self.assertEqual(r, ['disburse'])

    _, r = self.anagrams2.get_anagrams("disbursed")
    self.assertEqual(r, ['disbursed'])

    _, r = self.anagrams2.get_anagrams("disbursement")
    self.assertEqual(r, ['disbursement'])

    _, r = self.anagrams2.get_anagrams("disbursements")
    self.assertEqual(r, ['disbursements'])

    _, r = self.anagrams2.get_anagrams("disburses")
    self.assertEqual(r, ['disburses'])

    _, r = self.anagrams2.get_anagrams("disbursing")
    self.assertEqual(r, ['disbursing'])

    _, r = self.anagrams2.get_anagrams("disc")
    self.assertEqual(r, ['disc'])

    _, r = self.anagrams2.get_anagrams("discard")
    self.assertEqual(r, ['discard'])

    _, r = self.anagrams2.get_anagrams("discarded")
    self.assertEqual(r, ['discarded'])

    _, r = self.anagrams2.get_anagrams("discarding")
    self.assertEqual(r, ['discarding'])

    _, r = self.anagrams2.get_anagrams("discards")
    self.assertEqual(r, ['discards'])

    _, r = self.anagrams2.get_anagrams("discern")
    self.assertEqual(r, ['cinders', 'discern', 'rescind'])

    _, r = self.anagrams2.get_anagrams("discerned")
    self.assertEqual(r, ['discerned'])

    _, r = self.anagrams2.get_anagrams("discernibility")
    self.assertEqual(r, ['discernibility'])

    _, r = self.anagrams2.get_anagrams("discernible")
    self.assertEqual(r, ['discernible'])

    _, r = self.anagrams2.get_anagrams("discernibly")
    self.assertEqual(r, ['discernibly'])

    _, r = self.anagrams2.get_anagrams("discerning")
    self.assertEqual(r, ['discerning'])

    _, r = self.anagrams2.get_anagrams("discerningly")
    self.assertEqual(r, ['discerningly'])

    _, r = self.anagrams2.get_anagrams("discernment")
    self.assertEqual(r, ['discernment'])

    _, r = self.anagrams2.get_anagrams("discerns")
    self.assertEqual(r, ['discerns'])

    _, r = self.anagrams2.get_anagrams("discharge")
    self.assertEqual(r, ['discharge'])

    _, r = self.anagrams2.get_anagrams("discharged")
    self.assertEqual(r, ['discharged'])

    _, r = self.anagrams2.get_anagrams("discharges")
    self.assertEqual(r, ['discharges'])

    _, r = self.anagrams2.get_anagrams("discharging")
    self.assertEqual(r, ['discharging'])

    _, r = self.anagrams2.get_anagrams("disciple")
    self.assertEqual(r, ['disciple'])

    _, r = self.anagrams2.get_anagrams("disciples")
    self.assertEqual(r, ['disciples'])

    _, r = self.anagrams2.get_anagrams("disciplinary")
    self.assertEqual(r, ['disciplinary'])

    _, r = self.anagrams2.get_anagrams("discipline")
    self.assertEqual(r, ['discipline'])

    _, r = self.anagrams2.get_anagrams("disciplined")
    self.assertEqual(r, ['disciplined'])

    _, r = self.anagrams2.get_anagrams("disciplines")
    self.assertEqual(r, ['disciplines'])

    _, r = self.anagrams2.get_anagrams("disciplining")
    self.assertEqual(r, ['disciplining'])

    _, r = self.anagrams2.get_anagrams("disclaim")
    self.assertEqual(r, ['disclaim'])

    _, r = self.anagrams2.get_anagrams("disclaimed")
    self.assertEqual(r, ['disclaimed'])

    _, r = self.anagrams2.get_anagrams("disclaimer")
    self.assertEqual(r, ['disclaimer'])

    _, r = self.anagrams2.get_anagrams("disclaims")
    self.assertEqual(r, ['disclaims'])

    _, r = self.anagrams2.get_anagrams("disclose")
    self.assertEqual(r, ['disclose'])

    _, r = self.anagrams2.get_anagrams("disclosed")
    self.assertEqual(r, ['disclosed'])

    _, r = self.anagrams2.get_anagrams("discloses")
    self.assertEqual(r, ['discloses'])

    _, r = self.anagrams2.get_anagrams("disclosing")
    self.assertEqual(r, ['disclosing'])

    _, r = self.anagrams2.get_anagrams("disclosure")
    self.assertEqual(r, ['disclosure'])

    _, r = self.anagrams2.get_anagrams("disclosures")
    self.assertEqual(r, ['disclosures'])

    _, r = self.anagrams2.get_anagrams("discomfort")
    self.assertEqual(r, ['discomfort'])

    _, r = self.anagrams2.get_anagrams("disconcert")
    self.assertEqual(r, ['disconcert'])

    _, r = self.anagrams2.get_anagrams("disconcerting")
    self.assertEqual(r, ['disconcerting'])

    _, r = self.anagrams2.get_anagrams("disconcertingly")
    self.assertEqual(r, ['disconcertingly'])

    _, r = self.anagrams2.get_anagrams("disconnect")
    self.assertEqual(r, ['disconnect'])

    _, r = self.anagrams2.get_anagrams("disconnected")
    self.assertEqual(r, ['disconnected'])

    _, r = self.anagrams2.get_anagrams("disconnecting")
    self.assertEqual(r, ['disconnecting'])

    _, r = self.anagrams2.get_anagrams("disconnection")
    self.assertEqual(r, ['disconnection'])

    _, r = self.anagrams2.get_anagrams("disconnects")
    self.assertEqual(r, ['disconnects'])

    _, r = self.anagrams2.get_anagrams("discontent")
    self.assertEqual(r, ['discontent'])

    _, r = self.anagrams2.get_anagrams("discontented")
    self.assertEqual(r, ['discontented'])

    _, r = self.anagrams2.get_anagrams("discontinuance")
    self.assertEqual(r, ['discontinuance'])

    _, r = self.anagrams2.get_anagrams("discontinue")
    self.assertEqual(r, ['discontinue'])

    _, r = self.anagrams2.get_anagrams("discontinued")
    self.assertEqual(r, ['discontinued'])

    _, r = self.anagrams2.get_anagrams("discontinues")
    self.assertEqual(r, ['discontinues'])

    _, r = self.anagrams2.get_anagrams("discontinuities")
    self.assertEqual(r, ['discontinuities'])

    _, r = self.anagrams2.get_anagrams("discontinuity")
    self.assertEqual(r, ['discontinuity'])

    _, r = self.anagrams2.get_anagrams("discontinuous")
    self.assertEqual(r, ['discontinuous'])

    _, r = self.anagrams2.get_anagrams("discord")
    self.assertEqual(r, ['discord'])

    _, r = self.anagrams2.get_anagrams("discordant")
    self.assertEqual(r, ['discordant'])

    _, r = self.anagrams2.get_anagrams("discount")
    self.assertEqual(r, ['discount'])

    _, r = self.anagrams2.get_anagrams("discounted")
    self.assertEqual(r, ['deductions', 'discounted'])

    _, r = self.anagrams2.get_anagrams("discounting")
    self.assertEqual(r, ['discounting'])

    _, r = self.anagrams2.get_anagrams("discounts")
    self.assertEqual(r, ['discounts'])

    _, r = self.anagrams2.get_anagrams("discourage")
    self.assertEqual(r, ['discourage'])

    _, r = self.anagrams2.get_anagrams("discouraged")
    self.assertEqual(r, ['discouraged'])

    _, r = self.anagrams2.get_anagrams("discouragement")
    self.assertEqual(r, ['discouragement'])

    _, r = self.anagrams2.get_anagrams("discourages")
    self.assertEqual(r, ['discourages'])

    _, r = self.anagrams2.get_anagrams("discouraging")
    self.assertEqual(r, ['discouraging'])

    _, r = self.anagrams2.get_anagrams("discourse")
    self.assertEqual(r, ['discourse'])

    _, r = self.anagrams2.get_anagrams("discourses")
    self.assertEqual(r, ['discourses'])

    _, r = self.anagrams2.get_anagrams("discover")
    self.assertEqual(r, ['discover'])

    _, r = self.anagrams2.get_anagrams("discovered")
    self.assertEqual(r, ['discovered'])

    _, r = self.anagrams2.get_anagrams("discoverer")
    self.assertEqual(r, ['discoverer'])

    _, r = self.anagrams2.get_anagrams("discoverers")
    self.assertEqual(r, ['discoverers'])

    _, r = self.anagrams2.get_anagrams("discoveries")
    self.assertEqual(r, ['discoveries'])

    _, r = self.anagrams2.get_anagrams("discovering")
    self.assertEqual(r, ['discovering'])

    _, r = self.anagrams2.get_anagrams("discovers")
    self.assertEqual(r, ['discovers'])

    _, r = self.anagrams2.get_anagrams("discovery")
    self.assertEqual(r, ['discovery'])

    _, r = self.anagrams2.get_anagrams("discredit")
    self.assertEqual(r, ['discredit'])

    _, r = self.anagrams2.get_anagrams("discredited")
    self.assertEqual(r, ['discredited'])

    _, r = self.anagrams2.get_anagrams("discreet")
    self.assertEqual(r, ['discreet', 'discrete'])

    _, r = self.anagrams2.get_anagrams("discreetly")
    self.assertEqual(r, ['discreetly', 'discretely'])

    _, r = self.anagrams2.get_anagrams("discrepancies")
    self.assertEqual(r, ['discrepancies'])

    _, r = self.anagrams2.get_anagrams("discrepancy")
    self.assertEqual(r, ['discrepancy'])

    _, r = self.anagrams2.get_anagrams("discrete")
    self.assertEqual(r, ['discreet', 'discrete'])

    _, r = self.anagrams2.get_anagrams("discretely")
    self.assertEqual(r, ['discreetly', 'discretely'])

    _, r = self.anagrams2.get_anagrams("discreteness")
    self.assertEqual(r, ['discreteness'])

    _, r = self.anagrams2.get_anagrams("discretion")
    self.assertEqual(r, ['directions', 'discretion'])

    _, r = self.anagrams2.get_anagrams("discretionary")
    self.assertEqual(r, ['discretionary'])

    _, r = self.anagrams2.get_anagrams("discriminant")
    self.assertEqual(r, ['discriminant'])

    _, r = self.anagrams2.get_anagrams("discriminate")
    self.assertEqual(r, ['discriminate'])

    _, r = self.anagrams2.get_anagrams("discriminated")
    self.assertEqual(r, ['discriminated'])

    _, r = self.anagrams2.get_anagrams("discriminates")
    self.assertEqual(r, ['discriminates'])

    _, r = self.anagrams2.get_anagrams("discriminating")
    self.assertEqual(r, ['discriminating'])

    _, r = self.anagrams2.get_anagrams("discrimination")
    self.assertEqual(r, ['discrimination'])

    _, r = self.anagrams2.get_anagrams("discriminatory")
    self.assertEqual(r, ['discriminatory'])

    _, r = self.anagrams2.get_anagrams("discs")
    self.assertEqual(r, ['discs'])

    _, r = self.anagrams2.get_anagrams("discuss")
    self.assertEqual(r, ['discuss'])

    _, r = self.anagrams2.get_anagrams("discussant")
    self.assertEqual(r, ['discussant'])

    _, r = self.anagrams2.get_anagrams("discussed")
    self.assertEqual(r, ['discussed'])

    _, r = self.anagrams2.get_anagrams("discusses")
    self.assertEqual(r, ['discusses'])

    _, r = self.anagrams2.get_anagrams("discussing")
    self.assertEqual(r, ['discussing'])

    _, r = self.anagrams2.get_anagrams("discussion")
    self.assertEqual(r, ['discussion'])

    _, r = self.anagrams2.get_anagrams("discussions")
    self.assertEqual(r, ['discussions'])

    _, r = self.anagrams2.get_anagrams("disdain")
    self.assertEqual(r, ['disdain'])

    _, r = self.anagrams2.get_anagrams("disdaining")
    self.assertEqual(r, ['disdaining'])

    _, r = self.anagrams2.get_anagrams("disdains")
    self.assertEqual(r, ['disdains'])

    _, r = self.anagrams2.get_anagrams("disease")
    self.assertEqual(r, ['disease', 'seaside'])

    _, r = self.anagrams2.get_anagrams("diseased")
    self.assertEqual(r, ['diseased'])

    _, r = self.anagrams2.get_anagrams("diseases")
    self.assertEqual(r, ['diseases'])

    _, r = self.anagrams2.get_anagrams("disembowel")
    self.assertEqual(r, ['disembowel'])

    _, r = self.anagrams2.get_anagrams("disengage")
    self.assertEqual(r, ['disengage'])

    _, r = self.anagrams2.get_anagrams("disengaged")
    self.assertEqual(r, ['disengaged'])

    _, r = self.anagrams2.get_anagrams("disengages")
    self.assertEqual(r, ['disengages'])

    _, r = self.anagrams2.get_anagrams("disengaging")
    self.assertEqual(r, ['disengaging'])

    _, r = self.anagrams2.get_anagrams("disentangle")
    self.assertEqual(r, ['disentangle'])

    _, r = self.anagrams2.get_anagrams("disentangling")
    self.assertEqual(r, ['disentangling'])

    _, r = self.anagrams2.get_anagrams("disfigure")
    self.assertEqual(r, ['disfigure'])

    _, r = self.anagrams2.get_anagrams("disfigured")
    self.assertEqual(r, ['disfigured'])

    _, r = self.anagrams2.get_anagrams("disfigures")
    self.assertEqual(r, ['disfigures'])

    _, r = self.anagrams2.get_anagrams("disfiguring")
    self.assertEqual(r, ['disfiguring'])

    _, r = self.anagrams2.get_anagrams("disgorge")
    self.assertEqual(r, ['disgorge'])

    _, r = self.anagrams2.get_anagrams("disgrace")
    self.assertEqual(r, ['disgrace'])

    _, r = self.anagrams2.get_anagrams("disgraced")
    self.assertEqual(r, ['disgraced'])

    _, r = self.anagrams2.get_anagrams("disgraceful")
    self.assertEqual(r, ['disgraceful'])

    _, r = self.anagrams2.get_anagrams("disgracefully")
    self.assertEqual(r, ['disgracefully'])

    _, r = self.anagrams2.get_anagrams("disgraces")
    self.assertEqual(r, ['disgraces'])

    _, r = self.anagrams2.get_anagrams("disgruntle")
    self.assertEqual(r, ['disgruntle'])

    _, r = self.anagrams2.get_anagrams("disgruntled")
    self.assertEqual(r, ['disgruntled'])

    _, r = self.anagrams2.get_anagrams("disguise")
    self.assertEqual(r, ['disguise'])

    _, r = self.anagrams2.get_anagrams("disguised")
    self.assertEqual(r, ['disguised'])

    _, r = self.anagrams2.get_anagrams("disguises")
    self.assertEqual(r, ['disguises'])

    _, r = self.anagrams2.get_anagrams("disgust")
    self.assertEqual(r, ['disgust'])

    _, r = self.anagrams2.get_anagrams("disgusted")
    self.assertEqual(r, ['disgusted'])

    _, r = self.anagrams2.get_anagrams("disgustedly")
    self.assertEqual(r, ['disgustedly'])

    _, r = self.anagrams2.get_anagrams("disgustful")
    self.assertEqual(r, ['disgustful'])

    _, r = self.anagrams2.get_anagrams("disgusting")
    self.assertEqual(r, ['disgusting'])

    _, r = self.anagrams2.get_anagrams("disgustingly")
    self.assertEqual(r, ['disgustingly'])

    _, r = self.anagrams2.get_anagrams("disgusts")
    self.assertEqual(r, ['disgusts'])

    _, r = self.anagrams2.get_anagrams("dish")
    self.assertEqual(r, ['dish'])

    _, r = self.anagrams2.get_anagrams("dishearten")
    self.assertEqual(r, ['dishearten'])

    _, r = self.anagrams2.get_anagrams("disheartening")
    self.assertEqual(r, ['disheartening'])

    _, r = self.anagrams2.get_anagrams("dished")
    self.assertEqual(r, ['dished'])

    _, r = self.anagrams2.get_anagrams("dishes")
    self.assertEqual(r, ['dishes', 'hissed'])

    _, r = self.anagrams2.get_anagrams("dishevel")
    self.assertEqual(r, ['dishevel'])

    _, r = self.anagrams2.get_anagrams("dishing")
    self.assertEqual(r, ['dishing'])

    _, r = self.anagrams2.get_anagrams("dishonest")
    self.assertEqual(r, ['dishonest'])

    _, r = self.anagrams2.get_anagrams("dishonestly")
    self.assertEqual(r, ['dishonestly'])

    _, r = self.anagrams2.get_anagrams("dishonesty")
    self.assertEqual(r, ['dishonesty'])

    _, r = self.anagrams2.get_anagrams("dishonor")
    self.assertEqual(r, ['dishonor'])

    _, r = self.anagrams2.get_anagrams("dishonorable")
    self.assertEqual(r, ['dishonorable'])

    _, r = self.anagrams2.get_anagrams("dishonored")
    self.assertEqual(r, ['dishonored'])

    _, r = self.anagrams2.get_anagrams("dishonoring")
    self.assertEqual(r, ['dishonoring'])

    _, r = self.anagrams2.get_anagrams("dishonors")
    self.assertEqual(r, ['dishonors'])

    _, r = self.anagrams2.get_anagrams("dishwasher")
    self.assertEqual(r, ['dishwasher'])

    _, r = self.anagrams2.get_anagrams("dishwashers")
    self.assertEqual(r, ['dishwashers'])

    _, r = self.anagrams2.get_anagrams("dishwashing")
    self.assertEqual(r, ['dishwashing'])

    _, r = self.anagrams2.get_anagrams("dishwater")
    self.assertEqual(r, ['dishwater'])

    _, r = self.anagrams2.get_anagrams("disillusion")
    self.assertEqual(r, ['disillusion'])

    _, r = self.anagrams2.get_anagrams("disillusioned")
    self.assertEqual(r, ['disillusioned'])

    _, r = self.anagrams2.get_anagrams("disillusioning")
    self.assertEqual(r, ['disillusioning'])

    _, r = self.anagrams2.get_anagrams("disillusionment")
    self.assertEqual(r, ['disillusionment'])

    _, r = self.anagrams2.get_anagrams("disillusionments")
    self.assertEqual(r, ['disillusionments'])

    _, r = self.anagrams2.get_anagrams("disinclined")
    self.assertEqual(r, ['disinclined'])

    _, r = self.anagrams2.get_anagrams("disingenuous")
    self.assertEqual(r, ['disingenuous'])

    _, r = self.anagrams2.get_anagrams("disinterested")
    self.assertEqual(r, ['disinterested'])

    _, r = self.anagrams2.get_anagrams("disinterestedness")
    self.assertEqual(r, ['disinterestedness'])

    _, r = self.anagrams2.get_anagrams("disjoint")
    self.assertEqual(r, ['disjoint'])

    _, r = self.anagrams2.get_anagrams("disjointed")
    self.assertEqual(r, ['disjointed'])

    _, r = self.anagrams2.get_anagrams("disjointly")
    self.assertEqual(r, ['disjointly'])

    _, r = self.anagrams2.get_anagrams("disjointness")
    self.assertEqual(r, ['disjointness'])

    _, r = self.anagrams2.get_anagrams("disjunct")
    self.assertEqual(r, ['disjunct'])

    _, r = self.anagrams2.get_anagrams("disjunction")
    self.assertEqual(r, ['disjunction'])

    _, r = self.anagrams2.get_anagrams("disjunctions")
    self.assertEqual(r, ['disjunctions'])

    _, r = self.anagrams2.get_anagrams("disjunctive")
    self.assertEqual(r, ['disjunctive'])

    _, r = self.anagrams2.get_anagrams("disjunctively")
    self.assertEqual(r, ['disjunctively'])

    _, r = self.anagrams2.get_anagrams("disjuncts")
    self.assertEqual(r, ['disjuncts'])

    _, r = self.anagrams2.get_anagrams("disk")
    self.assertEqual(r, ['disk', 'kids', 'skid'])

    _, r = self.anagrams2.get_anagrams("diskette")
    self.assertEqual(r, ['diskette'])

    _, r = self.anagrams2.get_anagrams("diskettes")
    self.assertEqual(r, ['diskettes'])

    _, r = self.anagrams2.get_anagrams("disks")
    self.assertEqual(r, ['disks'])

    _, r = self.anagrams2.get_anagrams("dislike")
    self.assertEqual(r, ['dislike'])

    _, r = self.anagrams2.get_anagrams("disliked")
    self.assertEqual(r, ['disliked'])

    _, r = self.anagrams2.get_anagrams("dislikes")
    self.assertEqual(r, ['dislikes'])

    _, r = self.anagrams2.get_anagrams("disliking")
    self.assertEqual(r, ['disliking'])

    _, r = self.anagrams2.get_anagrams("dislocate")
    self.assertEqual(r, ['dislocate'])

    _, r = self.anagrams2.get_anagrams("dislocated")
    self.assertEqual(r, ['dislocated'])

    _, r = self.anagrams2.get_anagrams("dislocates")
    self.assertEqual(r, ['dislocates'])

    _, r = self.anagrams2.get_anagrams("dislocating")
    self.assertEqual(r, ['dislocating'])

    _, r = self.anagrams2.get_anagrams("dislocation")
    self.assertEqual(r, ['dislocation'])

    _, r = self.anagrams2.get_anagrams("dislocations")
    self.assertEqual(r, ['dislocations'])

    _, r = self.anagrams2.get_anagrams("dislodge")
    self.assertEqual(r, ['dislodge'])

    _, r = self.anagrams2.get_anagrams("dislodged")
    self.assertEqual(r, ['dislodged'])

    _, r = self.anagrams2.get_anagrams("dismal")
    self.assertEqual(r, ['dismal'])

    _, r = self.anagrams2.get_anagrams("dismally")
    self.assertEqual(r, ['dismally'])

    _, r = self.anagrams2.get_anagrams("dismay")
    self.assertEqual(r, ['dismay'])

    _, r = self.anagrams2.get_anagrams("dismayed")
    self.assertEqual(r, ['dismayed'])

    _, r = self.anagrams2.get_anagrams("dismaying")
    self.assertEqual(r, ['dismaying'])

    _, r = self.anagrams2.get_anagrams("dismember")
    self.assertEqual(r, ['dismember'])

    _, r = self.anagrams2.get_anagrams("dismembered")
    self.assertEqual(r, ['dismembered'])

    _, r = self.anagrams2.get_anagrams("dismemberment")
    self.assertEqual(r, ['dismemberment'])

    _, r = self.anagrams2.get_anagrams("dismembers")
    self.assertEqual(r, ['dismembers'])

    _, r = self.anagrams2.get_anagrams("dismiss")
    self.assertEqual(r, ['dismiss'])

    _, r = self.anagrams2.get_anagrams("dismissal")
    self.assertEqual(r, ['dismissal'])

    _, r = self.anagrams2.get_anagrams("dismissals")
    self.assertEqual(r, ['dismissals'])

    _, r = self.anagrams2.get_anagrams("dismissed")
    self.assertEqual(r, ['dismissed'])

    _, r = self.anagrams2.get_anagrams("dismisser")
    self.assertEqual(r, ['dismisser'])

    _, r = self.anagrams2.get_anagrams("dismissers")
    self.assertEqual(r, ['dismissers'])

    _, r = self.anagrams2.get_anagrams("dismisses")
    self.assertEqual(r, ['dismisses'])

    _, r = self.anagrams2.get_anagrams("dismissing")
    self.assertEqual(r, ['dismissing'])

    _, r = self.anagrams2.get_anagrams("dismount")
    self.assertEqual(r, ['dismount'])

    _, r = self.anagrams2.get_anagrams("dismounted")
    self.assertEqual(r, ['dismounted'])

    _, r = self.anagrams2.get_anagrams("dismounting")
    self.assertEqual(r, ['dismounting'])

    _, r = self.anagrams2.get_anagrams("dismounts")
    self.assertEqual(r, ['dismounts'])

    _, r = self.anagrams2.get_anagrams("disney")
    self.assertEqual(r, ['disney', 'sidney'])

    _, r = self.anagrams2.get_anagrams("disneyland")
    self.assertEqual(r, ['disneyland'])

    _, r = self.anagrams2.get_anagrams("disobedience")
    self.assertEqual(r, ['disobedience'])

    _, r = self.anagrams2.get_anagrams("disobedient")
    self.assertEqual(r, ['disobedient'])

    _, r = self.anagrams2.get_anagrams("disobey")
    self.assertEqual(r, ['disobey'])

    _, r = self.anagrams2.get_anagrams("disobeyed")
    self.assertEqual(r, ['disobeyed'])

    _, r = self.anagrams2.get_anagrams("disobeying")
    self.assertEqual(r, ['disobeying'])

    _, r = self.anagrams2.get_anagrams("disobeys")
    self.assertEqual(r, ['disobeys'])

    _, r = self.anagrams2.get_anagrams("disorder")
    self.assertEqual(r, ['disorder'])

    _, r = self.anagrams2.get_anagrams("disordered")
    self.assertEqual(r, ['disordered'])

    _, r = self.anagrams2.get_anagrams("disorderly")
    self.assertEqual(r, ['disorderly'])

    _, r = self.anagrams2.get_anagrams("disorders")
    self.assertEqual(r, ['disorders'])

    _, r = self.anagrams2.get_anagrams("disorganized")
    self.assertEqual(r, ['disorganized'])

    _, r = self.anagrams2.get_anagrams("disown")
    self.assertEqual(r, ['disown'])

    _, r = self.anagrams2.get_anagrams("disowned")
    self.assertEqual(r, ['disowned', 'downside'])

    _, r = self.anagrams2.get_anagrams("disowning")
    self.assertEqual(r, ['disowning'])

    _, r = self.anagrams2.get_anagrams("disowns")
    self.assertEqual(r, ['disowns'])

    _, r = self.anagrams2.get_anagrams("disparage")
    self.assertEqual(r, ['disparage'])

    _, r = self.anagrams2.get_anagrams("disparate")
    self.assertEqual(r, ['aspirated', 'disparate'])

    _, r = self.anagrams2.get_anagrams("disparities")
    self.assertEqual(r, ['disparities'])

    _, r = self.anagrams2.get_anagrams("disparity")
    self.assertEqual(r, ['disparity'])

    _, r = self.anagrams2.get_anagrams("dispassionate")
    self.assertEqual(r, ['dispassionate'])

    _, r = self.anagrams2.get_anagrams("dispatch")
    self.assertEqual(r, ['dispatch'])

    _, r = self.anagrams2.get_anagrams("dispatched")
    self.assertEqual(r, ['dispatched'])

    _, r = self.anagrams2.get_anagrams("dispatcher")
    self.assertEqual(r, ['dispatcher'])

    _, r = self.anagrams2.get_anagrams("dispatchers")
    self.assertEqual(r, ['dispatchers'])

    _, r = self.anagrams2.get_anagrams("dispatches")
    self.assertEqual(r, ['dispatches'])

    _, r = self.anagrams2.get_anagrams("dispatching")
    self.assertEqual(r, ['dispatching'])

    _, r = self.anagrams2.get_anagrams("dispel")
    self.assertEqual(r, ['dispel', 'lisped'])

    _, r = self.anagrams2.get_anagrams("dispell")
    self.assertEqual(r, ['dispell', 'spilled'])

    _, r = self.anagrams2.get_anagrams("dispelled")
    self.assertEqual(r, ['dispelled'])

    _, r = self.anagrams2.get_anagrams("dispelling")
    self.assertEqual(r, ['dispelling'])

    _, r = self.anagrams2.get_anagrams("dispels")
    self.assertEqual(r, ['dispels'])

    _, r = self.anagrams2.get_anagrams("dispensary")
    self.assertEqual(r, ['dispensary'])

    _, r = self.anagrams2.get_anagrams("dispensation")
    self.assertEqual(r, ['dispensation'])

    _, r = self.anagrams2.get_anagrams("dispense")
    self.assertEqual(r, ['dispense'])

    _, r = self.anagrams2.get_anagrams("dispensed")
    self.assertEqual(r, ['dispensed'])

    _, r = self.anagrams2.get_anagrams("dispenser")
    self.assertEqual(r, ['dispenser'])

    _, r = self.anagrams2.get_anagrams("dispensers")
    self.assertEqual(r, ['dispensers'])

    _, r = self.anagrams2.get_anagrams("dispenses")
    self.assertEqual(r, ['dispenses'])

    _, r = self.anagrams2.get_anagrams("dispensing")
    self.assertEqual(r, ['dispensing'])

    _, r = self.anagrams2.get_anagrams("dispersal")
    self.assertEqual(r, ['dispersal'])

    _, r = self.anagrams2.get_anagrams("disperse")
    self.assertEqual(r, ['disperse', 'presides'])

    _, r = self.anagrams2.get_anagrams("dispersed")
    self.assertEqual(r, ['dispersed'])

    _, r = self.anagrams2.get_anagrams("disperses")
    self.assertEqual(r, ['disperses'])

    _, r = self.anagrams2.get_anagrams("dispersing")
    self.assertEqual(r, ['dispersing'])

    _, r = self.anagrams2.get_anagrams("dispersion")
    self.assertEqual(r, ['dispersion'])

    _, r = self.anagrams2.get_anagrams("dispersions")
    self.assertEqual(r, ['dispersions'])

    _, r = self.anagrams2.get_anagrams("displace")
    self.assertEqual(r, ['displace'])

    _, r = self.anagrams2.get_anagrams("displaced")
    self.assertEqual(r, ['displaced'])

    _, r = self.anagrams2.get_anagrams("displacement")
    self.assertEqual(r, ['displacement'])

    _, r = self.anagrams2.get_anagrams("displacements")
    self.assertEqual(r, ['displacements'])

    _, r = self.anagrams2.get_anagrams("displaces")
    self.assertEqual(r, ['displaces'])

    _, r = self.anagrams2.get_anagrams("displacing")
    self.assertEqual(r, ['displacing'])

    _, r = self.anagrams2.get_anagrams("display")
    self.assertEqual(r, ['display'])

    _, r = self.anagrams2.get_anagrams("displayable")
    self.assertEqual(r, ['displayable'])

    _, r = self.anagrams2.get_anagrams("displayed")
    self.assertEqual(r, ['displayed'])

    _, r = self.anagrams2.get_anagrams("displayer")
    self.assertEqual(r, ['displayer', 'redisplay'])

    _, r = self.anagrams2.get_anagrams("displaying")
    self.assertEqual(r, ['displaying'])

    _, r = self.anagrams2.get_anagrams("displays")
    self.assertEqual(r, ['displays'])

    _, r = self.anagrams2.get_anagrams("displease")
    self.assertEqual(r, ['displease'])

    _, r = self.anagrams2.get_anagrams("displeased")
    self.assertEqual(r, ['displeased'])

    _, r = self.anagrams2.get_anagrams("displeases")
    self.assertEqual(r, ['displeases'])

    _, r = self.anagrams2.get_anagrams("displeasing")
    self.assertEqual(r, ['displeasing'])

    _, r = self.anagrams2.get_anagrams("displeasure")
    self.assertEqual(r, ['displeasure'])

    _, r = self.anagrams2.get_anagrams("disposable")
    self.assertEqual(r, ['disposable'])

    _, r = self.anagrams2.get_anagrams("disposal")
    self.assertEqual(r, ['disposal'])

    _, r = self.anagrams2.get_anagrams("disposals")
    self.assertEqual(r, ['disposals'])

    _, r = self.anagrams2.get_anagrams("dispose")
    self.assertEqual(r, ['dispose'])

    _, r = self.anagrams2.get_anagrams("disposed")
    self.assertEqual(r, ['disposed'])

    _, r = self.anagrams2.get_anagrams("disposer")
    self.assertEqual(r, ['disposer'])

    _, r = self.anagrams2.get_anagrams("disposes")
    self.assertEqual(r, ['disposes'])

    _, r = self.anagrams2.get_anagrams("disposing")
    self.assertEqual(r, ['disposing'])

    _, r = self.anagrams2.get_anagrams("disposition")
    self.assertEqual(r, ['disposition'])

    _, r = self.anagrams2.get_anagrams("dispositions")
    self.assertEqual(r, ['dispositions'])

    _, r = self.anagrams2.get_anagrams("dispossessed")
    self.assertEqual(r, ['dispossessed'])

    _, r = self.anagrams2.get_anagrams("disproportionate")
    self.assertEqual(r, ['disproportionate'])

    _, r = self.anagrams2.get_anagrams("disprove")
    self.assertEqual(r, ['disprove', 'provides'])

    _, r = self.anagrams2.get_anagrams("disproved")
    self.assertEqual(r, ['disproved'])

    _, r = self.anagrams2.get_anagrams("disproves")
    self.assertEqual(r, ['disproves'])

    _, r = self.anagrams2.get_anagrams("disproving")
    self.assertEqual(r, ['disproving'])

    _, r = self.anagrams2.get_anagrams("dispute")
    self.assertEqual(r, ['dispute'])

    _, r = self.anagrams2.get_anagrams("disputed")
    self.assertEqual(r, ['disputed'])

    _, r = self.anagrams2.get_anagrams("disputer")
    self.assertEqual(r, ['disputer'])

    _, r = self.anagrams2.get_anagrams("disputers")
    self.assertEqual(r, ['disputers'])

    _, r = self.anagrams2.get_anagrams("disputes")
    self.assertEqual(r, ['disputes'])

    _, r = self.anagrams2.get_anagrams("disputing")
    self.assertEqual(r, ['disputing'])

    _, r = self.anagrams2.get_anagrams("disqualification")
    self.assertEqual(r, ['disqualification'])

    _, r = self.anagrams2.get_anagrams("disqualified")
    self.assertEqual(r, ['disqualified'])

    _, r = self.anagrams2.get_anagrams("disqualifies")
    self.assertEqual(r, ['disqualifies'])

    _, r = self.anagrams2.get_anagrams("disqualify")
    self.assertEqual(r, ['disqualify'])

    _, r = self.anagrams2.get_anagrams("disqualifying")
    self.assertEqual(r, ['disqualifying'])

    _, r = self.anagrams2.get_anagrams("disquiet")
    self.assertEqual(r, ['disquiet'])

    _, r = self.anagrams2.get_anagrams("disquieting")
    self.assertEqual(r, ['disquieting'])

    _, r = self.anagrams2.get_anagrams("disraeli")
    self.assertEqual(r, ['disraeli'])

    _, r = self.anagrams2.get_anagrams("disregard")
    self.assertEqual(r, ['disregard'])

    _, r = self.anagrams2.get_anagrams("disregarded")
    self.assertEqual(r, ['disregarded'])

    _, r = self.anagrams2.get_anagrams("disregarding")
    self.assertEqual(r, ['disregarding'])

    _, r = self.anagrams2.get_anagrams("disregards")
    self.assertEqual(r, ['disregards'])

    _, r = self.anagrams2.get_anagrams("disrespectful")
    self.assertEqual(r, ['disrespectful'])

    _, r = self.anagrams2.get_anagrams("disrupt")
    self.assertEqual(r, ['disrupt'])

    _, r = self.anagrams2.get_anagrams("disrupted")
    self.assertEqual(r, ['disrupted'])

    _, r = self.anagrams2.get_anagrams("disrupting")
    self.assertEqual(r, ['disrupting'])

    _, r = self.anagrams2.get_anagrams("disruption")
    self.assertEqual(r, ['disruption'])

    _, r = self.anagrams2.get_anagrams("disruptions")
    self.assertEqual(r, ['disruptions'])

    _, r = self.anagrams2.get_anagrams("disruptive")
    self.assertEqual(r, ['disruptive'])

    _, r = self.anagrams2.get_anagrams("disrupts")
    self.assertEqual(r, ['disrupts'])

    _, r = self.anagrams2.get_anagrams("dissatisfaction")
    self.assertEqual(r, ['dissatisfaction'])

    _, r = self.anagrams2.get_anagrams("dissatisfactions")
    self.assertEqual(r, ['dissatisfactions'])

    _, r = self.anagrams2.get_anagrams("dissatisfactory")
    self.assertEqual(r, ['dissatisfactory'])

    _, r = self.anagrams2.get_anagrams("dissatisfied")
    self.assertEqual(r, ['dissatisfied'])

    _, r = self.anagrams2.get_anagrams("dissect")
    self.assertEqual(r, ['dissect'])

    _, r = self.anagrams2.get_anagrams("dissects")
    self.assertEqual(r, ['dissects'])

    _, r = self.anagrams2.get_anagrams("dissemble")
    self.assertEqual(r, ['dissemble'])

    _, r = self.anagrams2.get_anagrams("disseminate")
    self.assertEqual(r, ['disseminate'])

    _, r = self.anagrams2.get_anagrams("disseminated")
    self.assertEqual(r, ['disseminated'])

    _, r = self.anagrams2.get_anagrams("disseminates")
    self.assertEqual(r, ['disseminates'])

    _, r = self.anagrams2.get_anagrams("disseminating")
    self.assertEqual(r, ['disseminating'])

    _, r = self.anagrams2.get_anagrams("dissemination")
    self.assertEqual(r, ['dissemination'])

    _, r = self.anagrams2.get_anagrams("dissension")
    self.assertEqual(r, ['dissension'])

    _, r = self.anagrams2.get_anagrams("dissensions")
    self.assertEqual(r, ['dissensions'])

    _, r = self.anagrams2.get_anagrams("dissent")
    self.assertEqual(r, ['dissent'])

    _, r = self.anagrams2.get_anagrams("dissented")
    self.assertEqual(r, ['dissented'])

    _, r = self.anagrams2.get_anagrams("dissenter")
    self.assertEqual(r, ['dissenter', 'residents'])

    _, r = self.anagrams2.get_anagrams("dissenters")
    self.assertEqual(r, ['dissenters'])

    _, r = self.anagrams2.get_anagrams("dissenting")
    self.assertEqual(r, ['dissenting'])

    _, r = self.anagrams2.get_anagrams("dissents")
    self.assertEqual(r, ['dissents'])

    _, r = self.anagrams2.get_anagrams("dissertation")
    self.assertEqual(r, ['dissertation'])

    _, r = self.anagrams2.get_anagrams("dissertations")
    self.assertEqual(r, ['dissertations'])

    _, r = self.anagrams2.get_anagrams("disservice")
    self.assertEqual(r, ['disservice'])

    _, r = self.anagrams2.get_anagrams("dissident")
    self.assertEqual(r, ['dissident'])

    _, r = self.anagrams2.get_anagrams("dissidents")
    self.assertEqual(r, ['dissidents'])

    _, r = self.anagrams2.get_anagrams("dissimilar")
    self.assertEqual(r, ['dissimilar'])

    _, r = self.anagrams2.get_anagrams("dissimilarities")
    self.assertEqual(r, ['dissimilarities'])

    _, r = self.anagrams2.get_anagrams("dissimilarity")
    self.assertEqual(r, ['dissimilarity'])

    _, r = self.anagrams2.get_anagrams("dissipate")
    self.assertEqual(r, ['dissipate'])

    _, r = self.anagrams2.get_anagrams("dissipated")
    self.assertEqual(r, ['dissipated'])

    _, r = self.anagrams2.get_anagrams("dissipates")
    self.assertEqual(r, ['dissipates'])

    _, r = self.anagrams2.get_anagrams("dissipating")
    self.assertEqual(r, ['dissipating'])

    _, r = self.anagrams2.get_anagrams("dissipation")
    self.assertEqual(r, ['dissipation'])

    _, r = self.anagrams2.get_anagrams("dissociate")
    self.assertEqual(r, ['dissociate'])

    _, r = self.anagrams2.get_anagrams("dissociated")
    self.assertEqual(r, ['dissociated'])

    _, r = self.anagrams2.get_anagrams("dissociates")
    self.assertEqual(r, ['dissociates'])

    _, r = self.anagrams2.get_anagrams("dissociating")
    self.assertEqual(r, ['dissociating'])

    _, r = self.anagrams2.get_anagrams("dissociation")
    self.assertEqual(r, ['dissociation'])

    _, r = self.anagrams2.get_anagrams("dissolution")
    self.assertEqual(r, ['dissolution'])

    _, r = self.anagrams2.get_anagrams("dissolutions")
    self.assertEqual(r, ['dissolutions'])

    _, r = self.anagrams2.get_anagrams("dissolve")
    self.assertEqual(r, ['dissolve'])

    _, r = self.anagrams2.get_anagrams("dissolved")
    self.assertEqual(r, ['dissolved'])

    _, r = self.anagrams2.get_anagrams("dissolves")
    self.assertEqual(r, ['dissolves'])

    _, r = self.anagrams2.get_anagrams("dissolving")
    self.assertEqual(r, ['dissolving'])

    _, r = self.anagrams2.get_anagrams("dissonant")
    self.assertEqual(r, ['dissonant'])

    _, r = self.anagrams2.get_anagrams("dissuade")
    self.assertEqual(r, ['dissuade'])

    _, r = self.anagrams2.get_anagrams("distaff")
    self.assertEqual(r, ['distaff'])

    _, r = self.anagrams2.get_anagrams("distal")
    self.assertEqual(r, ['distal'])

    _, r = self.anagrams2.get_anagrams("distally")
    self.assertEqual(r, ['distally'])

    _, r = self.anagrams2.get_anagrams("distance")
    self.assertEqual(r, ['distance'])

    _, r = self.anagrams2.get_anagrams("distances")
    self.assertEqual(r, ['distances'])

    _, r = self.anagrams2.get_anagrams("distant")
    self.assertEqual(r, ['distant'])

    _, r = self.anagrams2.get_anagrams("distantly")
    self.assertEqual(r, ['distantly'])

    _, r = self.anagrams2.get_anagrams("distaste")
    self.assertEqual(r, ['distaste'])

    _, r = self.anagrams2.get_anagrams("distasteful")
    self.assertEqual(r, ['distasteful'])

    _, r = self.anagrams2.get_anagrams("distastefully")
    self.assertEqual(r, ['distastefully'])

    _, r = self.anagrams2.get_anagrams("distastes")
    self.assertEqual(r, ['distastes'])

    _, r = self.anagrams2.get_anagrams("distemper")
    self.assertEqual(r, ['distemper'])

    _, r = self.anagrams2.get_anagrams("distempered")
    self.assertEqual(r, ['distempered'])

    _, r = self.anagrams2.get_anagrams("distempers")
    self.assertEqual(r, ['distempers'])

    _, r = self.anagrams2.get_anagrams("distill")
    self.assertEqual(r, ['distill'])

    _, r = self.anagrams2.get_anagrams("distillation")
    self.assertEqual(r, ['distillation'])

    _, r = self.anagrams2.get_anagrams("distilled")
    self.assertEqual(r, ['distilled'])

    _, r = self.anagrams2.get_anagrams("distiller")
    self.assertEqual(r, ['distiller'])

    _, r = self.anagrams2.get_anagrams("distillers")
    self.assertEqual(r, ['distillers'])

    _, r = self.anagrams2.get_anagrams("distillery")
    self.assertEqual(r, ['distillery'])

    _, r = self.anagrams2.get_anagrams("distilling")
    self.assertEqual(r, ['distilling'])

    _, r = self.anagrams2.get_anagrams("distills")
    self.assertEqual(r, ['distills'])

    _, r = self.anagrams2.get_anagrams("distinct")
    self.assertEqual(r, ['distinct'])

    _, r = self.anagrams2.get_anagrams("distinction")
    self.assertEqual(r, ['distinction'])

    _, r = self.anagrams2.get_anagrams("distinctions")
    self.assertEqual(r, ['distinctions'])

    _, r = self.anagrams2.get_anagrams("distinctive")
    self.assertEqual(r, ['distinctive'])

    _, r = self.anagrams2.get_anagrams("distinctively")
    self.assertEqual(r, ['distinctively'])

    _, r = self.anagrams2.get_anagrams("distinctiveness")
    self.assertEqual(r, ['distinctiveness'])

    _, r = self.anagrams2.get_anagrams("distinctly")
    self.assertEqual(r, ['distinctly'])

    _, r = self.anagrams2.get_anagrams("distinctness")
    self.assertEqual(r, ['distinctness'])

    _, r = self.anagrams2.get_anagrams("distinguish")
    self.assertEqual(r, ['distinguish'])

    _, r = self.anagrams2.get_anagrams("distinguishable")
    self.assertEqual(r, ['distinguishable'])

    _, r = self.anagrams2.get_anagrams("distinguished")
    self.assertEqual(r, ['distinguished'])

    _, r = self.anagrams2.get_anagrams("distinguishes")
    self.assertEqual(r, ['distinguishes'])

    _, r = self.anagrams2.get_anagrams("distinguishing")
    self.assertEqual(r, ['distinguishing'])

    _, r = self.anagrams2.get_anagrams("distort")
    self.assertEqual(r, ['distort'])

    _, r = self.anagrams2.get_anagrams("distorted")
    self.assertEqual(r, ['distorted'])

    _, r = self.anagrams2.get_anagrams("distorting")
    self.assertEqual(r, ['distorting'])

    _, r = self.anagrams2.get_anagrams("distortion")
    self.assertEqual(r, ['distortion'])

    _, r = self.anagrams2.get_anagrams("distortions")
    self.assertEqual(r, ['distortions'])

    _, r = self.anagrams2.get_anagrams("distorts")
    self.assertEqual(r, ['distorts'])

    _, r = self.anagrams2.get_anagrams("distract")
    self.assertEqual(r, ['distract'])

    _, r = self.anagrams2.get_anagrams("distracted")
    self.assertEqual(r, ['distracted'])

    _, r = self.anagrams2.get_anagrams("distracting")
    self.assertEqual(r, ['distracting'])

    _, r = self.anagrams2.get_anagrams("distraction")
    self.assertEqual(r, ['distraction'])

    _, r = self.anagrams2.get_anagrams("distractions")
    self.assertEqual(r, ['distractions'])

    _, r = self.anagrams2.get_anagrams("distracts")
    self.assertEqual(r, ['distracts'])

    _, r = self.anagrams2.get_anagrams("distraught")
    self.assertEqual(r, ['distraught'])

    _, r = self.anagrams2.get_anagrams("distress")
    self.assertEqual(r, ['distress'])

    _, r = self.anagrams2.get_anagrams("distressed")
    self.assertEqual(r, ['distressed'])

    _, r = self.anagrams2.get_anagrams("distresses")
    self.assertEqual(r, ['distresses'])

    _, r = self.anagrams2.get_anagrams("distressing")
    self.assertEqual(r, ['distressing'])

    _, r = self.anagrams2.get_anagrams("distribute")
    self.assertEqual(r, ['distribute'])

    _, r = self.anagrams2.get_anagrams("distributed")
    self.assertEqual(r, ['distributed'])

    _, r = self.anagrams2.get_anagrams("distributes")
    self.assertEqual(r, ['distributes'])

    _, r = self.anagrams2.get_anagrams("distributing")
    self.assertEqual(r, ['distributing'])

    _, r = self.anagrams2.get_anagrams("distribution")
    self.assertEqual(r, ['distribution'])

    _, r = self.anagrams2.get_anagrams("distributional")
    self.assertEqual(r, ['distributional'])

    _, r = self.anagrams2.get_anagrams("distributions")
    self.assertEqual(r, ['distributions'])

    _, r = self.anagrams2.get_anagrams("distributive")
    self.assertEqual(r, ['distributive'])

    _, r = self.anagrams2.get_anagrams("distributivity")
    self.assertEqual(r, ['distributivity'])

    _, r = self.anagrams2.get_anagrams("distributor")
    self.assertEqual(r, ['distributor'])

    _, r = self.anagrams2.get_anagrams("distributors")
    self.assertEqual(r, ['distributors'])

    _, r = self.anagrams2.get_anagrams("district")
    self.assertEqual(r, ['district'])

    _, r = self.anagrams2.get_anagrams("districts")
    self.assertEqual(r, ['districts'])

    _, r = self.anagrams2.get_anagrams("distrust")
    self.assertEqual(r, ['distrust'])

    _, r = self.anagrams2.get_anagrams("distrusted")
    self.assertEqual(r, ['distrusted'])

    _, r = self.anagrams2.get_anagrams("disturb")
    self.assertEqual(r, ['disturb'])

    _, r = self.anagrams2.get_anagrams("disturbance")
    self.assertEqual(r, ['disturbance'])

    _, r = self.anagrams2.get_anagrams("disturbances")
    self.assertEqual(r, ['disturbances'])

    _, r = self.anagrams2.get_anagrams("disturbed")
    self.assertEqual(r, ['disturbed'])

    _, r = self.anagrams2.get_anagrams("disturber")
    self.assertEqual(r, ['disturber'])

    _, r = self.anagrams2.get_anagrams("disturbing")
    self.assertEqual(r, ['disturbing'])

    _, r = self.anagrams2.get_anagrams("disturbingly")
    self.assertEqual(r, ['disturbingly'])

    _, r = self.anagrams2.get_anagrams("disturbs")
    self.assertEqual(r, ['disturbs'])

    _, r = self.anagrams2.get_anagrams("disuse")
    self.assertEqual(r, ['disuse', 'issued'])

    _, r = self.anagrams2.get_anagrams("ditch")
    self.assertEqual(r, ['ditch'])

    _, r = self.anagrams2.get_anagrams("ditches")
    self.assertEqual(r, ['ditches'])

    _, r = self.anagrams2.get_anagrams("dither")
    self.assertEqual(r, ['dither'])

    _, r = self.anagrams2.get_anagrams("ditto")
    self.assertEqual(r, ['ditto'])

    _, r = self.anagrams2.get_anagrams("ditty")
    self.assertEqual(r, ['ditty'])

    _, r = self.anagrams2.get_anagrams("ditzel")
    self.assertEqual(r, ['ditzel'])

    _, r = self.anagrams2.get_anagrams("diurnal")
    self.assertEqual(r, ['diurnal'])

    _, r = self.anagrams2.get_anagrams("divan")
    self.assertEqual(r, ['divan'])

    _, r = self.anagrams2.get_anagrams("divans")
    self.assertEqual(r, ['divans'])

    _, r = self.anagrams2.get_anagrams("dive")
    self.assertEqual(r, ['dive', 'vied'])

    _, r = self.anagrams2.get_anagrams("dived")
    self.assertEqual(r, ['dived'])

    _, r = self.anagrams2.get_anagrams("diver")
    self.assertEqual(r, ['diver', 'drive', 'verdi'])

    _, r = self.anagrams2.get_anagrams("diverge")
    self.assertEqual(r, ['diverge', 'grieved'])

    _, r = self.anagrams2.get_anagrams("diverged")
    self.assertEqual(r, ['diverged'])

    _, r = self.anagrams2.get_anagrams("divergence")
    self.assertEqual(r, ['divergence'])

    _, r = self.anagrams2.get_anagrams("divergences")
    self.assertEqual(r, ['divergences'])

    _, r = self.anagrams2.get_anagrams("divergent")
    self.assertEqual(r, ['divergent'])

    _, r = self.anagrams2.get_anagrams("diverges")
    self.assertEqual(r, ['diverges'])

    _, r = self.anagrams2.get_anagrams("diverging")
    self.assertEqual(r, ['diverging'])

    _, r = self.anagrams2.get_anagrams("divers")
    self.assertEqual(r, ['divers', 'drives'])

    _, r = self.anagrams2.get_anagrams("diverse")
    self.assertEqual(r, ['derives', 'diverse', 'revised'])

    _, r = self.anagrams2.get_anagrams("diversely")
    self.assertEqual(r, ['diversely'])

    _, r = self.anagrams2.get_anagrams("diversification")
    self.assertEqual(r, ['diversification'])

    _, r = self.anagrams2.get_anagrams("diversified")
    self.assertEqual(r, ['diversified'])

    _, r = self.anagrams2.get_anagrams("diversifies")
    self.assertEqual(r, ['diversifies'])

    _, r = self.anagrams2.get_anagrams("diversify")
    self.assertEqual(r, ['diversify'])

    _, r = self.anagrams2.get_anagrams("diversifying")
    self.assertEqual(r, ['diversifying'])

    _, r = self.anagrams2.get_anagrams("diversion")
    self.assertEqual(r, ['diversion'])

    _, r = self.anagrams2.get_anagrams("diversionary")
    self.assertEqual(r, ['diversionary'])

    _, r = self.anagrams2.get_anagrams("diversions")
    self.assertEqual(r, ['diversions'])

    _, r = self.anagrams2.get_anagrams("diversities")
    self.assertEqual(r, ['diversities'])

    _, r = self.anagrams2.get_anagrams("diversity")
    self.assertEqual(r, ['diversity'])

    _, r = self.anagrams2.get_anagrams("divert")
    self.assertEqual(r, ['divert'])

    _, r = self.anagrams2.get_anagrams("diverted")
    self.assertEqual(r, ['diverted'])

    _, r = self.anagrams2.get_anagrams("diverting")
    self.assertEqual(r, ['diverting'])

    _, r = self.anagrams2.get_anagrams("diverts")
    self.assertEqual(r, ['diverts'])

    _, r = self.anagrams2.get_anagrams("dives")
    self.assertEqual(r, ['dives'])

    _, r = self.anagrams2.get_anagrams("divest")
    self.assertEqual(r, ['divest'])

    _, r = self.anagrams2.get_anagrams("divested")
    self.assertEqual(r, ['divested'])

    _, r = self.anagrams2.get_anagrams("divesting")
    self.assertEqual(r, ['divesting'])

    _, r = self.anagrams2.get_anagrams("divestiture")
    self.assertEqual(r, ['divestiture'])

    _, r = self.anagrams2.get_anagrams("divests")
    self.assertEqual(r, ['divests'])

    _, r = self.anagrams2.get_anagrams("divide")
    self.assertEqual(r, ['divide'])

    _, r = self.anagrams2.get_anagrams("divided")
    self.assertEqual(r, ['divided'])

    _, r = self.anagrams2.get_anagrams("dividend")
    self.assertEqual(r, ['dividend'])

    _, r = self.anagrams2.get_anagrams("dividends")
    self.assertEqual(r, ['dividends'])

    _, r = self.anagrams2.get_anagrams("divider")
    self.assertEqual(r, ['divider'])

    _, r = self.anagrams2.get_anagrams("dividers")
    self.assertEqual(r, ['dividers'])

    _, r = self.anagrams2.get_anagrams("divides")
    self.assertEqual(r, ['divides'])

    _, r = self.anagrams2.get_anagrams("dividing")
    self.assertEqual(r, ['dividing'])

    _, r = self.anagrams2.get_anagrams("divine")
    self.assertEqual(r, ['divine'])

    _, r = self.anagrams2.get_anagrams("divinely")
    self.assertEqual(r, ['divinely'])

    _, r = self.anagrams2.get_anagrams("diviner")
    self.assertEqual(r, ['diviner'])

    _, r = self.anagrams2.get_anagrams("diving")
    self.assertEqual(r, ['diving'])

    _, r = self.anagrams2.get_anagrams("divining")
    self.assertEqual(r, ['divining'])

    _, r = self.anagrams2.get_anagrams("divinities")
    self.assertEqual(r, ['divinities'])

    _, r = self.anagrams2.get_anagrams("divinity")
    self.assertEqual(r, ['divinity'])

    _, r = self.anagrams2.get_anagrams("divisibility")
    self.assertEqual(r, ['divisibility'])

    _, r = self.anagrams2.get_anagrams("divisible")
    self.assertEqual(r, ['divisible'])

    _, r = self.anagrams2.get_anagrams("division")
    self.assertEqual(r, ['division'])

    _, r = self.anagrams2.get_anagrams("divisional")
    self.assertEqual(r, ['divisional'])

    _, r = self.anagrams2.get_anagrams("divisions")
    self.assertEqual(r, ['divisions'])

    _, r = self.anagrams2.get_anagrams("divisive")
    self.assertEqual(r, ['divisive'])

    _, r = self.anagrams2.get_anagrams("divisor")
    self.assertEqual(r, ['divisor'])

    _, r = self.anagrams2.get_anagrams("divisors")
    self.assertEqual(r, ['divisors'])

    _, r = self.anagrams2.get_anagrams("divorce")
    self.assertEqual(r, ['divorce'])

    _, r = self.anagrams2.get_anagrams("divorced")
    self.assertEqual(r, ['divorced'])

    _, r = self.anagrams2.get_anagrams("divorcee")
    self.assertEqual(r, ['divorcee'])

    _, r = self.anagrams2.get_anagrams("divulge")
    self.assertEqual(r, ['divulge'])

    _, r = self.anagrams2.get_anagrams("divulged")
    self.assertEqual(r, ['divulged'])

    _, r = self.anagrams2.get_anagrams("divulges")
    self.assertEqual(r, ['divulges'])

    _, r = self.anagrams2.get_anagrams("divulging")
    self.assertEqual(r, ['divulging'])

    _, r = self.anagrams2.get_anagrams("dixie")
    self.assertEqual(r, ['dixie'])

    _, r = self.anagrams2.get_anagrams("dixiecrats")
    self.assertEqual(r, ['dixiecrats'])

    _, r = self.anagrams2.get_anagrams("dixieland")
    self.assertEqual(r, ['dixieland'])

    _, r = self.anagrams2.get_anagrams("dixon")
    self.assertEqual(r, ['dixon'])

    _, r = self.anagrams2.get_anagrams("dizziness")
    self.assertEqual(r, ['dizziness'])

    _, r = self.anagrams2.get_anagrams("dizzy")
    self.assertEqual(r, ['dizzy'])

    _, r = self.anagrams2.get_anagrams("djakarta")
    self.assertEqual(r, ['djakarta'])

    _, r = self.anagrams2.get_anagrams("dmitri")
    self.assertEqual(r, ['dmitri'])

    _, r = self.anagrams2.get_anagrams("dnieper")
    self.assertEqual(r, ['dnieper'])

    _, r = self.anagrams2.get_anagrams("do")
    self.assertEqual(r, ['do'])

    _, r = self.anagrams2.get_anagrams("dobbin")
    self.assertEqual(r, ['dobbin'])

    _, r = self.anagrams2.get_anagrams("dobbs")
    self.assertEqual(r, ['dobbs'])

    _, r = self.anagrams2.get_anagrams("doberman")
    self.assertEqual(r, ['doberman'])

    _, r = self.anagrams2.get_anagrams("doc")
    self.assertEqual(r, ['cod', 'doc'])

    _, r = self.anagrams2.get_anagrams("docile")
    self.assertEqual(r, ['coiled', 'docile'])

    _, r = self.anagrams2.get_anagrams("dock")
    self.assertEqual(r, ['dock'])

    _, r = self.anagrams2.get_anagrams("docked")
    self.assertEqual(r, ['docked'])

    _, r = self.anagrams2.get_anagrams("docket")
    self.assertEqual(r, ['docket'])

    _, r = self.anagrams2.get_anagrams("docks")
    self.assertEqual(r, ['docks'])

    _, r = self.anagrams2.get_anagrams("dockside")
    self.assertEqual(r, ['dockside'])

    _, r = self.anagrams2.get_anagrams("dockyard")
    self.assertEqual(r, ['dockyard'])

    _, r = self.anagrams2.get_anagrams("doctor")
    self.assertEqual(r, ['doctor'])

    _, r = self.anagrams2.get_anagrams("doctoral")
    self.assertEqual(r, ['doctoral'])

    _, r = self.anagrams2.get_anagrams("doctorate")
    self.assertEqual(r, ['doctorate'])

    _, r = self.anagrams2.get_anagrams("doctorates")
    self.assertEqual(r, ['doctorates'])

    _, r = self.anagrams2.get_anagrams("doctored")
    self.assertEqual(r, ['doctored'])

    _, r = self.anagrams2.get_anagrams("doctors")
    self.assertEqual(r, ['doctors'])

    _, r = self.anagrams2.get_anagrams("doctrinaire")
    self.assertEqual(r, ['doctrinaire'])

    _, r = self.anagrams2.get_anagrams("doctrinal")
    self.assertEqual(r, ['doctrinal'])

    _, r = self.anagrams2.get_anagrams("doctrine")
    self.assertEqual(r, ['centroid', 'doctrine'])

    _, r = self.anagrams2.get_anagrams("doctrines")
    self.assertEqual(r, ['doctrines'])

    _, r = self.anagrams2.get_anagrams("document")
    self.assertEqual(r, ['document'])

    _, r = self.anagrams2.get_anagrams("documentaries")
    self.assertEqual(r, ['documentaries'])

    _, r = self.anagrams2.get_anagrams("documentary")
    self.assertEqual(r, ['documentary'])

    _, r = self.anagrams2.get_anagrams("documentation")
    self.assertEqual(r, ['documentation'])

    _, r = self.anagrams2.get_anagrams("documentations")
    self.assertEqual(r, ['documentations'])

    _, r = self.anagrams2.get_anagrams("documented")
    self.assertEqual(r, ['documented'])

    _, r = self.anagrams2.get_anagrams("documenter")
    self.assertEqual(r, ['documenter'])

    _, r = self.anagrams2.get_anagrams("documenters")
    self.assertEqual(r, ['documenters'])

    _, r = self.anagrams2.get_anagrams("documenting")
    self.assertEqual(r, ['documenting'])

    _, r = self.anagrams2.get_anagrams("documents")
    self.assertEqual(r, ['documents'])

    _, r = self.anagrams2.get_anagrams("dodd")
    self.assertEqual(r, ['dodd'])

    _, r = self.anagrams2.get_anagrams("dodecahedra")
    self.assertEqual(r, ['dodecahedra'])

    _, r = self.anagrams2.get_anagrams("dodecahedral")
    self.assertEqual(r, ['dodecahedral'])

    _, r = self.anagrams2.get_anagrams("dodecahedron")
    self.assertEqual(r, ['dodecahedron'])

    _, r = self.anagrams2.get_anagrams("dodge")
    self.assertEqual(r, ['dodge'])

    _, r = self.anagrams2.get_anagrams("dodged")
    self.assertEqual(r, ['dodged'])

    _, r = self.anagrams2.get_anagrams("dodger")
    self.assertEqual(r, ['dodger'])

    _, r = self.anagrams2.get_anagrams("dodgers")
    self.assertEqual(r, ['dodgers'])

    _, r = self.anagrams2.get_anagrams("dodging")
    self.assertEqual(r, ['dodging'])

    _, r = self.anagrams2.get_anagrams("dodington")
    self.assertEqual(r, ['dodington'])

    _, r = self.anagrams2.get_anagrams("dodson")
    self.assertEqual(r, ['dodson'])

    _, r = self.anagrams2.get_anagrams("doe")
    self.assertEqual(r, ['doe', 'ode'])

    _, r = self.anagrams2.get_anagrams("doer")
    self.assertEqual(r, ['doer', 'redo', 'rode'])

    _, r = self.anagrams2.get_anagrams("doers")
    self.assertEqual(r, ['doers'])

    _, r = self.anagrams2.get_anagrams("does")
    self.assertEqual(r, ['does', 'dose', 'odes'])

    _, r = self.anagrams2.get_anagrams("dog")
    self.assertEqual(r, ['dog', 'god'])

    _, r = self.anagrams2.get_anagrams("doge")
    self.assertEqual(r, ['doge'])

    _, r = self.anagrams2.get_anagrams("dogged")
    self.assertEqual(r, ['dogged'])

    _, r = self.anagrams2.get_anagrams("doggedly")
    self.assertEqual(r, ['doggedly'])

    _, r = self.anagrams2.get_anagrams("doggedness")
    self.assertEqual(r, ['doggedness'])

    _, r = self.anagrams2.get_anagrams("dogging")
    self.assertEqual(r, ['dogging'])

    _, r = self.anagrams2.get_anagrams("doghouse")
    self.assertEqual(r, ['doghouse'])

    _, r = self.anagrams2.get_anagrams("dogma")
    self.assertEqual(r, ['dogma'])

    _, r = self.anagrams2.get_anagrams("dogmas")
    self.assertEqual(r, ['dogmas'])

    _, r = self.anagrams2.get_anagrams("dogmatic")
    self.assertEqual(r, ['dogmatic'])

    _, r = self.anagrams2.get_anagrams("dogmatism")
    self.assertEqual(r, ['dogmatism'])

    _, r = self.anagrams2.get_anagrams("dogs")
    self.assertEqual(r, ['dogs', 'gods'])

    _, r = self.anagrams2.get_anagrams("dogtown")
    self.assertEqual(r, ['dogtown'])

    _, r = self.anagrams2.get_anagrams("doherty")
    self.assertEqual(r, ['doherty'])

    _, r = self.anagrams2.get_anagrams("doing")
    self.assertEqual(r, ['dingo', 'doing'])

    _, r = self.anagrams2.get_anagrams("doings")
    self.assertEqual(r, ['doings'])

    _, r = self.anagrams2.get_anagrams("dolan")
    self.assertEqual(r, ['dolan', 'nodal'])

    _, r = self.anagrams2.get_anagrams("doldrum")
    self.assertEqual(r, ['doldrum'])

    _, r = self.anagrams2.get_anagrams("dole")
    self.assertEqual(r, ['dole'])

    _, r = self.anagrams2.get_anagrams("doled")
    self.assertEqual(r, ['doled'])

    _, r = self.anagrams2.get_anagrams("doleful")
    self.assertEqual(r, ['doleful'])

    _, r = self.anagrams2.get_anagrams("dolefully")
    self.assertEqual(r, ['dolefully'])

    _, r = self.anagrams2.get_anagrams("doles")
    self.assertEqual(r, ['doles'])

    _, r = self.anagrams2.get_anagrams("doll")
    self.assertEqual(r, ['doll'])

    _, r = self.anagrams2.get_anagrams("dollar")
    self.assertEqual(r, ['dollar'])

    _, r = self.anagrams2.get_anagrams("dollars")
    self.assertEqual(r, ['dollars'])

    _, r = self.anagrams2.get_anagrams("dollies")
    self.assertEqual(r, ['dollies'])

    _, r = self.anagrams2.get_anagrams("dolls")
    self.assertEqual(r, ['dolls'])

    _, r = self.anagrams2.get_anagrams("dolly")
    self.assertEqual(r, ['dolly', 'lloyd'])

    _, r = self.anagrams2.get_anagrams("dolores")
    self.assertEqual(r, ['dolores'])

    _, r = self.anagrams2.get_anagrams("dolphin")
    self.assertEqual(r, ['dolphin'])

    _, r = self.anagrams2.get_anagrams("dolphins")
    self.assertEqual(r, ['dolphins'])

    _, r = self.anagrams2.get_anagrams("domain")
    self.assertEqual(r, ['domain'])

    _, r = self.anagrams2.get_anagrams("domains")
    self.assertEqual(r, ['domains', 'madison'])

    _, r = self.anagrams2.get_anagrams("dome")
    self.assertEqual(r, ['demo', 'dome', 'mode'])

    _, r = self.anagrams2.get_anagrams("domed")
    self.assertEqual(r, ['domed'])

    _, r = self.anagrams2.get_anagrams("domenico")
    self.assertEqual(r, ['domenico'])

    _, r = self.anagrams2.get_anagrams("domes")
    self.assertEqual(r, ['domes', 'modes'])

    _, r = self.anagrams2.get_anagrams("domesday")
    self.assertEqual(r, ['domesday'])

    _, r = self.anagrams2.get_anagrams("domestic")
    self.assertEqual(r, ['domestic'])

    _, r = self.anagrams2.get_anagrams("domestically")
    self.assertEqual(r, ['domestically'])

    _, r = self.anagrams2.get_anagrams("domesticate")
    self.assertEqual(r, ['domesticate'])

    _, r = self.anagrams2.get_anagrams("domesticated")
    self.assertEqual(r, ['domesticated'])

    _, r = self.anagrams2.get_anagrams("domesticates")
    self.assertEqual(r, ['domesticates'])

    _, r = self.anagrams2.get_anagrams("domesticating")
    self.assertEqual(r, ['domesticating'])

    _, r = self.anagrams2.get_anagrams("domestication")
    self.assertEqual(r, ['domestication'])

    _, r = self.anagrams2.get_anagrams("domicile")
    self.assertEqual(r, ['domicile'])

    _, r = self.anagrams2.get_anagrams("dominance")
    self.assertEqual(r, ['dominance'])

    _, r = self.anagrams2.get_anagrams("dominant")
    self.assertEqual(r, ['dominant'])

    _, r = self.anagrams2.get_anagrams("dominantly")
    self.assertEqual(r, ['dominantly'])

    _, r = self.anagrams2.get_anagrams("dominate")
    self.assertEqual(r, ['dominate'])

    _, r = self.anagrams2.get_anagrams("dominated")
    self.assertEqual(r, ['dominated'])

    _, r = self.anagrams2.get_anagrams("dominates")
    self.assertEqual(r, ['dominates'])

    _, r = self.anagrams2.get_anagrams("dominating")
    self.assertEqual(r, ['dominating'])

    _, r = self.anagrams2.get_anagrams("domination")
    self.assertEqual(r, ['admonition', 'domination'])

    _, r = self.anagrams2.get_anagrams("domineer")
    self.assertEqual(r, ['domineer'])

    _, r = self.anagrams2.get_anagrams("domineering")
    self.assertEqual(r, ['domineering'])

    _, r = self.anagrams2.get_anagrams("domingo")
    self.assertEqual(r, ['domingo', 'dooming'])

    _, r = self.anagrams2.get_anagrams("dominic")
    self.assertEqual(r, ['dominic'])

    _, r = self.anagrams2.get_anagrams("dominican")
    self.assertEqual(r, ['dominican'])

    _, r = self.anagrams2.get_anagrams("dominicans")
    self.assertEqual(r, ['dominicans'])

    _, r = self.anagrams2.get_anagrams("dominick")
    self.assertEqual(r, ['dominick'])

    _, r = self.anagrams2.get_anagrams("dominion")
    self.assertEqual(r, ['dominion'])

    _, r = self.anagrams2.get_anagrams("dominique")
    self.assertEqual(r, ['dominique'])

    _, r = self.anagrams2.get_anagrams("domino")
    self.assertEqual(r, ['domino'])

    _, r = self.anagrams2.get_anagrams("don")
    self.assertEqual(r, ['don', 'nod'])

    _, r = self.anagrams2.get_anagrams("donahue")
    self.assertEqual(r, ['donahue'])

    _, r = self.anagrams2.get_anagrams("donald")
    self.assertEqual(r, ['donald'])

    _, r = self.anagrams2.get_anagrams("donaldson")
    self.assertEqual(r, ['donaldson'])

    _, r = self.anagrams2.get_anagrams("donate")
    self.assertEqual(r, ['atoned', 'donate'])

    _, r = self.anagrams2.get_anagrams("donated")
    self.assertEqual(r, ['donated'])

    _, r = self.anagrams2.get_anagrams("donates")
    self.assertEqual(r, ['donates'])

    _, r = self.anagrams2.get_anagrams("donating")
    self.assertEqual(r, ['donating'])

    _, r = self.anagrams2.get_anagrams("donation")
    self.assertEqual(r, ['donation'])

    _, r = self.anagrams2.get_anagrams("done")
    self.assertEqual(r, ['done', 'node'])

    _, r = self.anagrams2.get_anagrams("doneck")
    self.assertEqual(r, ['doneck'])

    _, r = self.anagrams2.get_anagrams("donkey")
    self.assertEqual(r, ['donkey'])

    _, r = self.anagrams2.get_anagrams("donkeys")
    self.assertEqual(r, ['donkeys'])

    _, r = self.anagrams2.get_anagrams("donna")
    self.assertEqual(r, ['donna'])

    _, r = self.anagrams2.get_anagrams("donnelly")
    self.assertEqual(r, ['donnelly'])

    _, r = self.anagrams2.get_anagrams("donner")
    self.assertEqual(r, ['donner'])

    _, r = self.anagrams2.get_anagrams("donnybrook")
    self.assertEqual(r, ['donnybrook'])

    _, r = self.anagrams2.get_anagrams("donor")
    self.assertEqual(r, ['donor'])

    _, r = self.anagrams2.get_anagrams("donovan")
    self.assertEqual(r, ['donovan'])

    _, r = self.anagrams2.get_anagrams("dons")
    self.assertEqual(r, ['dons', 'nods'])

    _, r = self.anagrams2.get_anagrams("doodle")
    self.assertEqual(r, ['doodle'])

    _, r = self.anagrams2.get_anagrams("dooley")
    self.assertEqual(r, ['dooley'])

    _, r = self.anagrams2.get_anagrams("doolittle")
    self.assertEqual(r, ['doolittle'])

    _, r = self.anagrams2.get_anagrams("doom")
    self.assertEqual(r, ['doom', 'mood'])

    _, r = self.anagrams2.get_anagrams("doomed")
    self.assertEqual(r, ['doomed'])

    _, r = self.anagrams2.get_anagrams("dooming")
    self.assertEqual(r, ['domingo', 'dooming'])

    _, r = self.anagrams2.get_anagrams("dooms")
    self.assertEqual(r, ['dooms', 'moods'])

    _, r = self.anagrams2.get_anagrams("doomsday")
    self.assertEqual(r, ['doomsday'])

    _, r = self.anagrams2.get_anagrams("door")
    self.assertEqual(r, ['door', 'odor'])

    _, r = self.anagrams2.get_anagrams("doorbell")
    self.assertEqual(r, ['bordello', 'doorbell'])

    _, r = self.anagrams2.get_anagrams("doorkeeper")
    self.assertEqual(r, ['doorkeeper'])

    _, r = self.anagrams2.get_anagrams("doorman")
    self.assertEqual(r, ['doorman'])

    _, r = self.anagrams2.get_anagrams("doormen")
    self.assertEqual(r, ['doormen'])

    _, r = self.anagrams2.get_anagrams("doors")
    self.assertEqual(r, ['doors', 'odors'])

    _, r = self.anagrams2.get_anagrams("doorstep")
    self.assertEqual(r, ['doorstep'])

    _, r = self.anagrams2.get_anagrams("doorsteps")
    self.assertEqual(r, ['doorsteps'])

    _, r = self.anagrams2.get_anagrams("doorway")
    self.assertEqual(r, ['doorway'])

    _, r = self.anagrams2.get_anagrams("doorways")
    self.assertEqual(r, ['doorways'])

    _, r = self.anagrams2.get_anagrams("dope")
    self.assertEqual(r, ['dope'])

    _, r = self.anagrams2.get_anagrams("doped")
    self.assertEqual(r, ['doped'])

    _, r = self.anagrams2.get_anagrams("doper")
    self.assertEqual(r, ['doper', 'pedro', 'pored', 'roped'])

    _, r = self.anagrams2.get_anagrams("dopers")
    self.assertEqual(r, ['dopers'])

    _, r = self.anagrams2.get_anagrams("dopes")
    self.assertEqual(r, ['dopes', 'posed'])

    _, r = self.anagrams2.get_anagrams("doping")
    self.assertEqual(r, ['doping'])

    _, r = self.anagrams2.get_anagrams("doppler")
    self.assertEqual(r, ['doppler'])

    _, r = self.anagrams2.get_anagrams("dora")
    self.assertEqual(r, ['dora', 'road'])

    _, r = self.anagrams2.get_anagrams("dorado")
    self.assertEqual(r, ['dorado'])

    _, r = self.anagrams2.get_anagrams("dorcas")
    self.assertEqual(r, ['dorcas'])

    _, r = self.anagrams2.get_anagrams("dorchester")
    self.assertEqual(r, ['dorchester'])

    _, r = self.anagrams2.get_anagrams("doreen")
    self.assertEqual(r, ['doreen', 'redone'])

    _, r = self.anagrams2.get_anagrams("doria")
    self.assertEqual(r, ['doria', 'radio'])

    _, r = self.anagrams2.get_anagrams("doric")
    self.assertEqual(r, ['doric'])

    _, r = self.anagrams2.get_anagrams("doricize")
    self.assertEqual(r, ['doricize'])

    _, r = self.anagrams2.get_anagrams("doricizes")
    self.assertEqual(r, ['doricizes'])

    _, r = self.anagrams2.get_anagrams("doris")
    self.assertEqual(r, ['doris'])

    _, r = self.anagrams2.get_anagrams("dormant")
    self.assertEqual(r, ['dormant'])

    _, r = self.anagrams2.get_anagrams("dormitories")
    self.assertEqual(r, ['dormitories'])

    _, r = self.anagrams2.get_anagrams("dormitory")
    self.assertEqual(r, ['dormitory'])

    _, r = self.anagrams2.get_anagrams("dorothea")
    self.assertEqual(r, ['dorothea'])

    _, r = self.anagrams2.get_anagrams("dorothy")
    self.assertEqual(r, ['dorothy'])

    _, r = self.anagrams2.get_anagrams("dorset")
    self.assertEqual(r, ['dorset', 'sorted', 'stored', 'strode'])

    _, r = self.anagrams2.get_anagrams("dortmund")
    self.assertEqual(r, ['dortmund'])

    _, r = self.anagrams2.get_anagrams("dosage")
    self.assertEqual(r, ['dosage'])

    _, r = self.anagrams2.get_anagrams("dose")
    self.assertEqual(r, ['does', 'dose', 'odes'])

    _, r = self.anagrams2.get_anagrams("dosed")
    self.assertEqual(r, ['dosed'])

    _, r = self.anagrams2.get_anagrams("doses")
    self.assertEqual(r, ['doses'])

    _, r = self.anagrams2.get_anagrams("dossier")
    self.assertEqual(r, ['dossier'])

    _, r = self.anagrams2.get_anagrams("dossiers")
    self.assertEqual(r, ['dossiers'])

    _, r = self.anagrams2.get_anagrams("dostoevsky")
    self.assertEqual(r, ['dostoevsky'])

    _, r = self.anagrams2.get_anagrams("dot")
    self.assertEqual(r, ['dot'])

    _, r = self.anagrams2.get_anagrams("dote")
    self.assertEqual(r, ['dote'])

    _, r = self.anagrams2.get_anagrams("doted")
    self.assertEqual(r, ['doted'])

    _, r = self.anagrams2.get_anagrams("dotes")
    self.assertEqual(r, ['dotes'])

    _, r = self.anagrams2.get_anagrams("doting")
    self.assertEqual(r, ['doting'])

    _, r = self.anagrams2.get_anagrams("dotingly")
    self.assertEqual(r, ['dotingly'])

    _, r = self.anagrams2.get_anagrams("dots")
    self.assertEqual(r, ['dots'])

    _, r = self.anagrams2.get_anagrams("dotted")
    self.assertEqual(r, ['dotted'])

    _, r = self.anagrams2.get_anagrams("dotting")
    self.assertEqual(r, ['dotting'])

    _, r = self.anagrams2.get_anagrams("double")
    self.assertEqual(r, ['double'])

    _, r = self.anagrams2.get_anagrams("doubled")
    self.assertEqual(r, ['doubled'])

    _, r = self.anagrams2.get_anagrams("doubleday")
    self.assertEqual(r, ['doubleday'])

    _, r = self.anagrams2.get_anagrams("doubleheader")
    self.assertEqual(r, ['doubleheader'])

    _, r = self.anagrams2.get_anagrams("doubler")
    self.assertEqual(r, ['boulder', 'doubler'])

    _, r = self.anagrams2.get_anagrams("doublers")
    self.assertEqual(r, ['boulders', 'doublers'])

    _, r = self.anagrams2.get_anagrams("doubles")
    self.assertEqual(r, ['doubles'])

    _, r = self.anagrams2.get_anagrams("doublet")
    self.assertEqual(r, ['doublet'])

    _, r = self.anagrams2.get_anagrams("doubleton")
    self.assertEqual(r, ['doubleton'])

    _, r = self.anagrams2.get_anagrams("doublets")
    self.assertEqual(r, ['doublets'])

    _, r = self.anagrams2.get_anagrams("doubling")
    self.assertEqual(r, ['doubling'])

    _, r = self.anagrams2.get_anagrams("doubloon")
    self.assertEqual(r, ['doubloon'])

    _, r = self.anagrams2.get_anagrams("doubly")
    self.assertEqual(r, ['doubly'])

    _, r = self.anagrams2.get_anagrams("doubt")
    self.assertEqual(r, ['doubt'])

    _, r = self.anagrams2.get_anagrams("doubtable")
    self.assertEqual(r, ['doubtable'])

    _, r = self.anagrams2.get_anagrams("doubted")
    self.assertEqual(r, ['doubted'])

    _, r = self.anagrams2.get_anagrams("doubter")
    self.assertEqual(r, ['doubter'])

    _, r = self.anagrams2.get_anagrams("doubters")
    self.assertEqual(r, ['doubters'])

    _, r = self.anagrams2.get_anagrams("doubtful")
    self.assertEqual(r, ['doubtful'])

    _, r = self.anagrams2.get_anagrams("doubtfully")
    self.assertEqual(r, ['doubtfully'])

    _, r = self.anagrams2.get_anagrams("doubting")
    self.assertEqual(r, ['doubting'])

    _, r = self.anagrams2.get_anagrams("doubtless")
    self.assertEqual(r, ['doubtless'])

    _, r = self.anagrams2.get_anagrams("doubtlessly")
    self.assertEqual(r, ['doubtlessly'])

    _, r = self.anagrams2.get_anagrams("doubts")
    self.assertEqual(r, ['doubts'])

    _, r = self.anagrams2.get_anagrams("doug")
    self.assertEqual(r, ['doug'])

    _, r = self.anagrams2.get_anagrams("dough")
    self.assertEqual(r, ['dough'])

    _, r = self.anagrams2.get_anagrams("dougherty")
    self.assertEqual(r, ['dougherty'])

    _, r = self.anagrams2.get_anagrams("doughnut")
    self.assertEqual(r, ['doughnut'])

    _, r = self.anagrams2.get_anagrams("doughnuts")
    self.assertEqual(r, ['doughnuts'])

    _, r = self.anagrams2.get_anagrams("douglas")
    self.assertEqual(r, ['douglas'])

    _, r = self.anagrams2.get_anagrams("douglass")
    self.assertEqual(r, ['douglass'])

    _, r = self.anagrams2.get_anagrams("dove")
    self.assertEqual(r, ['dove'])

    _, r = self.anagrams2.get_anagrams("dover")
    self.assertEqual(r, ['dover', 'drove', 'roved'])

    _, r = self.anagrams2.get_anagrams("doves")
    self.assertEqual(r, ['doves'])

    _, r = self.anagrams2.get_anagrams("dovetail")
    self.assertEqual(r, ['dovetail', 'violated'])

    _, r = self.anagrams2.get_anagrams("dow")
    self.assertEqual(r, ['dow'])

    _, r = self.anagrams2.get_anagrams("dowager")
    self.assertEqual(r, ['dowager'])

    _, r = self.anagrams2.get_anagrams("dowel")
    self.assertEqual(r, ['dowel'])

    _, r = self.anagrams2.get_anagrams("dowling")
    self.assertEqual(r, ['dowling'])

    _, r = self.anagrams2.get_anagrams("down")
    self.assertEqual(r, ['down'])

    _, r = self.anagrams2.get_anagrams("downcast")
    self.assertEqual(r, ['downcast'])

    _, r = self.anagrams2.get_anagrams("downed")
    self.assertEqual(r, ['downed'])

    _, r = self.anagrams2.get_anagrams("downers")
    self.assertEqual(r, ['downers', 'wonders'])

    _, r = self.anagrams2.get_anagrams("downey")
    self.assertEqual(r, ['downey'])

    _, r = self.anagrams2.get_anagrams("downfall")
    self.assertEqual(r, ['downfall'])

    _, r = self.anagrams2.get_anagrams("downfallen")
    self.assertEqual(r, ['downfallen'])

    _, r = self.anagrams2.get_anagrams("downgrade")
    self.assertEqual(r, ['downgrade'])

    _, r = self.anagrams2.get_anagrams("downhill")
    self.assertEqual(r, ['downhill'])

    _, r = self.anagrams2.get_anagrams("downing")
    self.assertEqual(r, ['downing'])

    _, r = self.anagrams2.get_anagrams("downlink")
    self.assertEqual(r, ['downlink'])

    _, r = self.anagrams2.get_anagrams("downlinks")
    self.assertEqual(r, ['downlinks'])

    _, r = self.anagrams2.get_anagrams("download")
    self.assertEqual(r, ['download', 'woodland'])

    _, r = self.anagrams2.get_anagrams("downloaded")
    self.assertEqual(r, ['downloaded'])

    _, r = self.anagrams2.get_anagrams("downloading")
    self.assertEqual(r, ['downloading'])

    _, r = self.anagrams2.get_anagrams("downloads")
    self.assertEqual(r, ['downloads'])

    _, r = self.anagrams2.get_anagrams("downplay")
    self.assertEqual(r, ['downplay'])

    _, r = self.anagrams2.get_anagrams("downplayed")
    self.assertEqual(r, ['downplayed'])

    _, r = self.anagrams2.get_anagrams("downplaying")
    self.assertEqual(r, ['downplaying'])

    _, r = self.anagrams2.get_anagrams("downplays")
    self.assertEqual(r, ['downplays'])

    _, r = self.anagrams2.get_anagrams("downpour")
    self.assertEqual(r, ['downpour'])

    _, r = self.anagrams2.get_anagrams("downright")
    self.assertEqual(r, ['downright'])

    _, r = self.anagrams2.get_anagrams("downs")
    self.assertEqual(r, ['downs'])

    _, r = self.anagrams2.get_anagrams("downside")
    self.assertEqual(r, ['disowned', 'downside'])

    _, r = self.anagrams2.get_anagrams("downstairs")
    self.assertEqual(r, ['downstairs'])

    _, r = self.anagrams2.get_anagrams("downstream")
    self.assertEqual(r, ['downstream'])

    _, r = self.anagrams2.get_anagrams("downtown")
    self.assertEqual(r, ['downtown'])

    _, r = self.anagrams2.get_anagrams("downtowns")
    self.assertEqual(r, ['downtowns'])

    _, r = self.anagrams2.get_anagrams("downtrodden")
    self.assertEqual(r, ['downtrodden'])

    _, r = self.anagrams2.get_anagrams("downturn")
    self.assertEqual(r, ['downturn'])

    _, r = self.anagrams2.get_anagrams("downward")
    self.assertEqual(r, ['downward'])

    _, r = self.anagrams2.get_anagrams("downwards")
    self.assertEqual(r, ['downwards'])

    _, r = self.anagrams2.get_anagrams("downy")
    self.assertEqual(r, ['downy'])

    _, r = self.anagrams2.get_anagrams("dowry")
    self.assertEqual(r, ['dowry', 'rowdy', 'wordy'])

    _, r = self.anagrams2.get_anagrams("doyle")
    self.assertEqual(r, ['doyle'])

    _, r = self.anagrams2.get_anagrams("doze")
    self.assertEqual(r, ['doze'])

    _, r = self.anagrams2.get_anagrams("dozed")
    self.assertEqual(r, ['dozed'])

    _, r = self.anagrams2.get_anagrams("dozen")
    self.assertEqual(r, ['dozen', 'zoned'])

    _, r = self.anagrams2.get_anagrams("dozens")
    self.assertEqual(r, ['dozens'])

    _, r = self.anagrams2.get_anagrams("dozenth")
    self.assertEqual(r, ['dozenth'])

    _, r = self.anagrams2.get_anagrams("dozes")
    self.assertEqual(r, ['dozes'])

    _, r = self.anagrams2.get_anagrams("dozing")
    self.assertEqual(r, ['dozing'])

    _, r = self.anagrams2.get_anagrams("drab")
    self.assertEqual(r, ['bard', 'drab'])

    _, r = self.anagrams2.get_anagrams("draco")
    self.assertEqual(r, ['draco'])

    _, r = self.anagrams2.get_anagrams("draconian")
    self.assertEqual(r, ['draconian'])

    _, r = self.anagrams2.get_anagrams("draft")
    self.assertEqual(r, ['draft'])

    _, r = self.anagrams2.get_anagrams("drafted")
    self.assertEqual(r, ['drafted'])

    _, r = self.anagrams2.get_anagrams("draftee")
    self.assertEqual(r, ['draftee'])

    _, r = self.anagrams2.get_anagrams("drafter")
    self.assertEqual(r, ['drafter'])

    _, r = self.anagrams2.get_anagrams("drafters")
    self.assertEqual(r, ['drafters'])

    _, r = self.anagrams2.get_anagrams("drafting")
    self.assertEqual(r, ['drafting'])

    _, r = self.anagrams2.get_anagrams("drafts")
    self.assertEqual(r, ['drafts'])

    _, r = self.anagrams2.get_anagrams("draftsman")
    self.assertEqual(r, ['draftsman'])

    _, r = self.anagrams2.get_anagrams("draftsmen")
    self.assertEqual(r, ['draftsmen'])

    _, r = self.anagrams2.get_anagrams("drafty")
    self.assertEqual(r, ['drafty'])

    _, r = self.anagrams2.get_anagrams("drag")
    self.assertEqual(r, ['drag', 'grad'])

    _, r = self.anagrams2.get_anagrams("dragged")
    self.assertEqual(r, ['dragged'])

    _, r = self.anagrams2.get_anagrams("dragging")
    self.assertEqual(r, ['dragging'])

    _, r = self.anagrams2.get_anagrams("dragnet")
    self.assertEqual(r, ['dragnet', 'granted'])

    _, r = self.anagrams2.get_anagrams("dragon")
    self.assertEqual(r, ['dragon'])

    _, r = self.anagrams2.get_anagrams("dragonfly")
    self.assertEqual(r, ['dragonfly'])

    _, r = self.anagrams2.get_anagrams("dragonhead")
    self.assertEqual(r, ['dragonhead'])

    _, r = self.anagrams2.get_anagrams("dragons")
    self.assertEqual(r, ['dragons'])

    _, r = self.anagrams2.get_anagrams("dragoon")
    self.assertEqual(r, ['dragoon'])

    _, r = self.anagrams2.get_anagrams("dragooned")
    self.assertEqual(r, ['dragooned'])

    _, r = self.anagrams2.get_anagrams("dragoons")
    self.assertEqual(r, ['dragoons'])

    _, r = self.anagrams2.get_anagrams("drags")
    self.assertEqual(r, ['drags'])

    _, r = self.anagrams2.get_anagrams("drain")
    self.assertEqual(r, ['drain', 'nadir'])

    _, r = self.anagrams2.get_anagrams("drainage")
    self.assertEqual(r, ['drainage'])

    _, r = self.anagrams2.get_anagrams("drained")
    self.assertEqual(r, ['drained'])

    _, r = self.anagrams2.get_anagrams("drainer")
    self.assertEqual(r, ['drainer'])

    _, r = self.anagrams2.get_anagrams("draining")
    self.assertEqual(r, ['draining'])

    _, r = self.anagrams2.get_anagrams("drains")
    self.assertEqual(r, ['drains'])

    _, r = self.anagrams2.get_anagrams("drake")
    self.assertEqual(r, ['drake', 'raked'])

    _, r = self.anagrams2.get_anagrams("dram")
    self.assertEqual(r, ['dram'])

    _, r = self.anagrams2.get_anagrams("drama")
    self.assertEqual(r, ['drama'])

    _, r = self.anagrams2.get_anagrams("dramamine")
    self.assertEqual(r, ['dramamine'])

    _, r = self.anagrams2.get_anagrams("dramas")
    self.assertEqual(r, ['dramas', 'madras'])

    _, r = self.anagrams2.get_anagrams("dramatic")
    self.assertEqual(r, ['dramatic'])

    _, r = self.anagrams2.get_anagrams("dramatically")
    self.assertEqual(r, ['dramatically'])

    _, r = self.anagrams2.get_anagrams("dramatics")
    self.assertEqual(r, ['dramatics'])

    _, r = self.anagrams2.get_anagrams("dramatist")
    self.assertEqual(r, ['dramatist'])

    _, r = self.anagrams2.get_anagrams("dramatists")
    self.assertEqual(r, ['dramatists'])

    _, r = self.anagrams2.get_anagrams("drank")
    self.assertEqual(r, ['drank'])

    _, r = self.anagrams2.get_anagrams("drape")
    self.assertEqual(r, ['drape', 'raped'])

    _, r = self.anagrams2.get_anagrams("draped")
    self.assertEqual(r, ['draped'])

    _, r = self.anagrams2.get_anagrams("draper")
    self.assertEqual(r, ['draper'])

    _, r = self.anagrams2.get_anagrams("draperies")
    self.assertEqual(r, ['draperies'])

    _, r = self.anagrams2.get_anagrams("drapers")
    self.assertEqual(r, ['drapers'])

    _, r = self.anagrams2.get_anagrams("drapery")
    self.assertEqual(r, ['drapery'])

    _, r = self.anagrams2.get_anagrams("drapes")
    self.assertEqual(r, ['drapes', 'parsed', 'rasped', 'spared', 'spread'])

    _, r = self.anagrams2.get_anagrams("drastic")
    self.assertEqual(r, ['drastic'])

    _, r = self.anagrams2.get_anagrams("drastically")
    self.assertEqual(r, ['drastically'])

    _, r = self.anagrams2.get_anagrams("draught")
    self.assertEqual(r, ['draught'])

    _, r = self.anagrams2.get_anagrams("draughts")
    self.assertEqual(r, ['draughts'])

    _, r = self.anagrams2.get_anagrams("dravidian")
    self.assertEqual(r, ['dravidian'])

    _, r = self.anagrams2.get_anagrams("draw")
    self.assertEqual(r, ['draw', 'ward'])

    _, r = self.anagrams2.get_anagrams("drawback")
    self.assertEqual(r, ['backward', 'drawback'])

    _, r = self.anagrams2.get_anagrams("drawbacks")
    self.assertEqual(r, ['backwards', 'drawbacks'])

    _, r = self.anagrams2.get_anagrams("drawbridge")
    self.assertEqual(r, ['drawbridge'])

    _, r = self.anagrams2.get_anagrams("drawbridges")
    self.assertEqual(r, ['drawbridges'])

    _, r = self.anagrams2.get_anagrams("drawer")
    self.assertEqual(r, ['drawer', 'redraw', 'reward', 'warder', 'warred'])

    _, r = self.anagrams2.get_anagrams("drawers")
    self.assertEqual(r, ['drawers', 'rewards'])

    _, r = self.anagrams2.get_anagrams("drawing")
    self.assertEqual(r, ['drawing'])

    _, r = self.anagrams2.get_anagrams("drawings")
    self.assertEqual(r, ['drawings'])

    _, r = self.anagrams2.get_anagrams("drawl")
    self.assertEqual(r, ['drawl'])

    _, r = self.anagrams2.get_anagrams("drawled")
    self.assertEqual(r, ['drawled'])

    _, r = self.anagrams2.get_anagrams("drawling")
    self.assertEqual(r, ['drawling'])

    _, r = self.anagrams2.get_anagrams("drawls")
    self.assertEqual(r, ['drawls'])

    _, r = self.anagrams2.get_anagrams("drawn")
    self.assertEqual(r, ['drawn'])

    _, r = self.anagrams2.get_anagrams("drawnly")
    self.assertEqual(r, ['drawnly'])

    _, r = self.anagrams2.get_anagrams("drawnness")
    self.assertEqual(r, ['drawnness'])

    _, r = self.anagrams2.get_anagrams("draws")
    self.assertEqual(r, ['draws', 'wards'])

    _, r = self.anagrams2.get_anagrams("dread")
    self.assertEqual(r, ['adder', 'dared', 'dread'])

    _, r = self.anagrams2.get_anagrams("dreaded")
    self.assertEqual(r, ['dreaded'])

    _, r = self.anagrams2.get_anagrams("dreadful")
    self.assertEqual(r, ['dreadful'])

    _, r = self.anagrams2.get_anagrams("dreadfully")
    self.assertEqual(r, ['dreadfully'])

    _, r = self.anagrams2.get_anagrams("dreading")
    self.assertEqual(r, ['dreading'])

    _, r = self.anagrams2.get_anagrams("dreadnought")
    self.assertEqual(r, ['dreadnought'])

    _, r = self.anagrams2.get_anagrams("dreads")
    self.assertEqual(r, ['adders', 'dreads', 'sadder'])

    _, r = self.anagrams2.get_anagrams("dream")
    self.assertEqual(r, ['armed', 'dream'])

    _, r = self.anagrams2.get_anagrams("dreamboat")
    self.assertEqual(r, ['dreamboat'])

    _, r = self.anagrams2.get_anagrams("dreamed")
    self.assertEqual(r, ['dreamed'])

    _, r = self.anagrams2.get_anagrams("dreamer")
    self.assertEqual(r, ['dreamer'])

    _, r = self.anagrams2.get_anagrams("dreamers")
    self.assertEqual(r, ['dreamers'])

    _, r = self.anagrams2.get_anagrams("dreamily")
    self.assertEqual(r, ['dreamily'])

    _, r = self.anagrams2.get_anagrams("dreaming")
    self.assertEqual(r, ['dreaming', 'midrange'])

    _, r = self.anagrams2.get_anagrams("dreamlike")
    self.assertEqual(r, ['dreamlike'])

    _, r = self.anagrams2.get_anagrams("dreams")
    self.assertEqual(r, ['dreams'])

    _, r = self.anagrams2.get_anagrams("dreamt")
    self.assertEqual(r, ['dreamt'])

    _, r = self.anagrams2.get_anagrams("dreamy")
    self.assertEqual(r, ['dreamy'])

    _, r = self.anagrams2.get_anagrams("dreariness")
    self.assertEqual(r, ['dreariness'])

    _, r = self.anagrams2.get_anagrams("dreary")
    self.assertEqual(r, ['dreary'])

    _, r = self.anagrams2.get_anagrams("dredge")
    self.assertEqual(r, ['dredge'])

    _, r = self.anagrams2.get_anagrams("dregs")
    self.assertEqual(r, ['dregs'])

    _, r = self.anagrams2.get_anagrams("drench")
    self.assertEqual(r, ['drench'])

    _, r = self.anagrams2.get_anagrams("drenched")
    self.assertEqual(r, ['drenched'])

    _, r = self.anagrams2.get_anagrams("drenches")
    self.assertEqual(r, ['drenches'])

    _, r = self.anagrams2.get_anagrams("drenching")
    self.assertEqual(r, ['drenching'])

    _, r = self.anagrams2.get_anagrams("dress")
    self.assertEqual(r, ['dress'])

    _, r = self.anagrams2.get_anagrams("dressed")
    self.assertEqual(r, ['dressed'])

    _, r = self.anagrams2.get_anagrams("dresser")
    self.assertEqual(r, ['dresser', 'redress'])

    _, r = self.anagrams2.get_anagrams("dressers")
    self.assertEqual(r, ['dressers'])

    _, r = self.anagrams2.get_anagrams("dresses")
    self.assertEqual(r, ['dresses'])

    _, r = self.anagrams2.get_anagrams("dressing")
    self.assertEqual(r, ['dressing'])

    _, r = self.anagrams2.get_anagrams("dressings")
    self.assertEqual(r, ['dressings'])

    _, r = self.anagrams2.get_anagrams("dressmaker")
    self.assertEqual(r, ['dressmaker'])

    _, r = self.anagrams2.get_anagrams("dressmakers")
    self.assertEqual(r, ['dressmakers'])

    _, r = self.anagrams2.get_anagrams("drew")
    self.assertEqual(r, ['drew'])

    _, r = self.anagrams2.get_anagrams("drexel")
    self.assertEqual(r, ['drexel'])

    _, r = self.anagrams2.get_anagrams("dreyfuss")
    self.assertEqual(r, ['dreyfuss'])

    _, r = self.anagrams2.get_anagrams("dried")
    self.assertEqual(r, ['dried'])

    _, r = self.anagrams2.get_anagrams("drier")
    self.assertEqual(r, ['drier', 'rider'])

    _, r = self.anagrams2.get_anagrams("driers")
    self.assertEqual(r, ['driers', 'riders'])

    _, r = self.anagrams2.get_anagrams("dries")
    self.assertEqual(r, ['dries', 'rides', 'sired'])

    _, r = self.anagrams2.get_anagrams("driest")
    self.assertEqual(r, ['driest', 'stride'])

    _, r = self.anagrams2.get_anagrams("drift")
    self.assertEqual(r, ['drift'])

    _, r = self.anagrams2.get_anagrams("drifted")
    self.assertEqual(r, ['drifted'])

    _, r = self.anagrams2.get_anagrams("drifter")
    self.assertEqual(r, ['drifter'])

    _, r = self.anagrams2.get_anagrams("drifters")
    self.assertEqual(r, ['drifters'])

    _, r = self.anagrams2.get_anagrams("drifting")
    self.assertEqual(r, ['drifting'])

    _, r = self.anagrams2.get_anagrams("drifts")
    self.assertEqual(r, ['drifts'])

    _, r = self.anagrams2.get_anagrams("drill")
    self.assertEqual(r, ['drill'])

    _, r = self.anagrams2.get_anagrams("drilled")
    self.assertEqual(r, ['drilled'])

    _, r = self.anagrams2.get_anagrams("driller")
    self.assertEqual(r, ['driller'])

    _, r = self.anagrams2.get_anagrams("drilling")
    self.assertEqual(r, ['drilling'])

    _, r = self.anagrams2.get_anagrams("drills")
    self.assertEqual(r, ['drills'])

    _, r = self.anagrams2.get_anagrams("drily")
    self.assertEqual(r, ['drily'])

    _, r = self.anagrams2.get_anagrams("drink")
    self.assertEqual(r, ['drink'])

    _, r = self.anagrams2.get_anagrams("drinkable")
    self.assertEqual(r, ['drinkable'])

    _, r = self.anagrams2.get_anagrams("drinker")
    self.assertEqual(r, ['drinker'])

    _, r = self.anagrams2.get_anagrams("drinkers")
    self.assertEqual(r, ['drinkers'])

    _, r = self.anagrams2.get_anagrams("drinking")
    self.assertEqual(r, ['drinking'])

    _, r = self.anagrams2.get_anagrams("drinks")
    self.assertEqual(r, ['drinks'])

    _, r = self.anagrams2.get_anagrams("drip")
    self.assertEqual(r, ['drip'])

    _, r = self.anagrams2.get_anagrams("dripping")
    self.assertEqual(r, ['dripping'])

    _, r = self.anagrams2.get_anagrams("drippy")
    self.assertEqual(r, ['drippy'])

    _, r = self.anagrams2.get_anagrams("drips")
    self.assertEqual(r, ['drips'])

    _, r = self.anagrams2.get_anagrams("driscoll")
    self.assertEqual(r, ['driscoll'])

    _, r = self.anagrams2.get_anagrams("drive")
    self.assertEqual(r, ['diver', 'drive', 'verdi'])

    _, r = self.anagrams2.get_anagrams("driven")
    self.assertEqual(r, ['driven'])

    _, r = self.anagrams2.get_anagrams("driver")
    self.assertEqual(r, ['driver'])

    _, r = self.anagrams2.get_anagrams("drivers")
    self.assertEqual(r, ['drivers'])

    _, r = self.anagrams2.get_anagrams("drives")
    self.assertEqual(r, ['divers', 'drives'])

    _, r = self.anagrams2.get_anagrams("driveway")
    self.assertEqual(r, ['driveway'])

    _, r = self.anagrams2.get_anagrams("driveways")
    self.assertEqual(r, ['driveways'])

    _, r = self.anagrams2.get_anagrams("driving")
    self.assertEqual(r, ['driving'])

    _, r = self.anagrams2.get_anagrams("drizzle")
    self.assertEqual(r, ['drizzle'])

    _, r = self.anagrams2.get_anagrams("drizzly")
    self.assertEqual(r, ['drizzly'])

    _, r = self.anagrams2.get_anagrams("droll")
    self.assertEqual(r, ['droll'])

    _, r = self.anagrams2.get_anagrams("dromedary")
    self.assertEqual(r, ['dromedary'])

    _, r = self.anagrams2.get_anagrams("drone")
    self.assertEqual(r, ['drone'])

    _, r = self.anagrams2.get_anagrams("drones")
    self.assertEqual(r, ['drones', 'snored'])

    _, r = self.anagrams2.get_anagrams("drool")
    self.assertEqual(r, ['drool'])

    _, r = self.anagrams2.get_anagrams("droop")
    self.assertEqual(r, ['droop'])

    _, r = self.anagrams2.get_anagrams("drooped")
    self.assertEqual(r, ['drooped'])

    _, r = self.anagrams2.get_anagrams("drooping")
    self.assertEqual(r, ['drooping'])

    _, r = self.anagrams2.get_anagrams("droops")
    self.assertEqual(r, ['droops'])

    _, r = self.anagrams2.get_anagrams("droopy")
    self.assertEqual(r, ['droopy'])

    _, r = self.anagrams2.get_anagrams("drop")
    self.assertEqual(r, ['drop', 'prod'])

    _, r = self.anagrams2.get_anagrams("droplet")
    self.assertEqual(r, ['droplet'])

    _, r = self.anagrams2.get_anagrams("dropout")
    self.assertEqual(r, ['dropout'])

    _, r = self.anagrams2.get_anagrams("dropped")
    self.assertEqual(r, ['dropped'])

    _, r = self.anagrams2.get_anagrams("dropper")
    self.assertEqual(r, ['dropper'])

    _, r = self.anagrams2.get_anagrams("droppers")
    self.assertEqual(r, ['droppers'])

    _, r = self.anagrams2.get_anagrams("dropping")
    self.assertEqual(r, ['dropping'])

    _, r = self.anagrams2.get_anagrams("droppings")
    self.assertEqual(r, ['droppings'])

    _, r = self.anagrams2.get_anagrams("drops")
    self.assertEqual(r, ['drops'])

    _, r = self.anagrams2.get_anagrams("drosophila")
    self.assertEqual(r, ['drosophila'])

    _, r = self.anagrams2.get_anagrams("drought")
    self.assertEqual(r, ['drought'])

    _, r = self.anagrams2.get_anagrams("droughts")
    self.assertEqual(r, ['droughts'])

    _, r = self.anagrams2.get_anagrams("drove")
    self.assertEqual(r, ['dover', 'drove', 'roved'])

    _, r = self.anagrams2.get_anagrams("drover")
    self.assertEqual(r, ['drover'])

    _, r = self.anagrams2.get_anagrams("drovers")
    self.assertEqual(r, ['drovers'])

    _, r = self.anagrams2.get_anagrams("droves")
    self.assertEqual(r, ['droves'])

    _, r = self.anagrams2.get_anagrams("drown")
    self.assertEqual(r, ['drown'])

    _, r = self.anagrams2.get_anagrams("drowned")
    self.assertEqual(r, ['drowned'])

    _, r = self.anagrams2.get_anagrams("drowning")
    self.assertEqual(r, ['drowning'])

    _, r = self.anagrams2.get_anagrams("drownings")
    self.assertEqual(r, ['drownings'])

    _, r = self.anagrams2.get_anagrams("drowns")
    self.assertEqual(r, ['drowns'])

    _, r = self.anagrams2.get_anagrams("drowsiness")
    self.assertEqual(r, ['drowsiness'])

    _, r = self.anagrams2.get_anagrams("drowsy")
    self.assertEqual(r, ['drowsy'])

    _, r = self.anagrams2.get_anagrams("drubbing")
    self.assertEqual(r, ['drubbing'])

    _, r = self.anagrams2.get_anagrams("drudge")
    self.assertEqual(r, ['drudge'])

    _, r = self.anagrams2.get_anagrams("drudgery")
    self.assertEqual(r, ['drudgery'])

    _, r = self.anagrams2.get_anagrams("drug")
    self.assertEqual(r, ['drug'])

    _, r = self.anagrams2.get_anagrams("druggist")
    self.assertEqual(r, ['druggist'])

    _, r = self.anagrams2.get_anagrams("druggists")
    self.assertEqual(r, ['druggists'])

    _, r = self.anagrams2.get_anagrams("drugs")
    self.assertEqual(r, ['drugs'])

    _, r = self.anagrams2.get_anagrams("drugstore")
    self.assertEqual(r, ['drugstore'])

    _, r = self.anagrams2.get_anagrams("drum")
    self.assertEqual(r, ['drum'])

    _, r = self.anagrams2.get_anagrams("drumhead")
    self.assertEqual(r, ['drumhead'])

    _, r = self.anagrams2.get_anagrams("drummed")
    self.assertEqual(r, ['drummed'])

    _, r = self.anagrams2.get_anagrams("drummer")
    self.assertEqual(r, ['drummer'])

    _, r = self.anagrams2.get_anagrams("drummers")
    self.assertEqual(r, ['drummers'])

    _, r = self.anagrams2.get_anagrams("drumming")
    self.assertEqual(r, ['drumming'])

    _, r = self.anagrams2.get_anagrams("drummond")
    self.assertEqual(r, ['drummond'])

    _, r = self.anagrams2.get_anagrams("drums")
    self.assertEqual(r, ['drums'])

    _, r = self.anagrams2.get_anagrams("drunk")
    self.assertEqual(r, ['drunk'])

    _, r = self.anagrams2.get_anagrams("drunkard")
    self.assertEqual(r, ['drunkard'])

    _, r = self.anagrams2.get_anagrams("drunkards")
    self.assertEqual(r, ['drunkards'])

    _, r = self.anagrams2.get_anagrams("drunken")
    self.assertEqual(r, ['drunken'])

    _, r = self.anagrams2.get_anagrams("drunkenness")
    self.assertEqual(r, ['drunkenness'])

    _, r = self.anagrams2.get_anagrams("drunker")
    self.assertEqual(r, ['drunker'])

    _, r = self.anagrams2.get_anagrams("drunkly")
    self.assertEqual(r, ['drunkly'])

    _, r = self.anagrams2.get_anagrams("drunks")
    self.assertEqual(r, ['drunks'])

    _, r = self.anagrams2.get_anagrams("drury")
    self.assertEqual(r, ['drury'])

    _, r = self.anagrams2.get_anagrams("dry")
    self.assertEqual(r, ['dry'])

    _, r = self.anagrams2.get_anagrams("dryden")
    self.assertEqual(r, ['dryden'])

    _, r = self.anagrams2.get_anagrams("drying")
    self.assertEqual(r, ['drying'])

    _, r = self.anagrams2.get_anagrams("dryly")
    self.assertEqual(r, ['dryly'])

    _, r = self.anagrams2.get_anagrams("dual")
    self.assertEqual(r, ['dual'])

    _, r = self.anagrams2.get_anagrams("dualism")
    self.assertEqual(r, ['dualism'])

    _, r = self.anagrams2.get_anagrams("dualities")
    self.assertEqual(r, ['dualities'])

    _, r = self.anagrams2.get_anagrams("duality")
    self.assertEqual(r, ['duality'])

    _, r = self.anagrams2.get_anagrams("duane")
    self.assertEqual(r, ['duane'])

    _, r = self.anagrams2.get_anagrams("dub")
    self.assertEqual(r, ['bud', 'dub'])

    _, r = self.anagrams2.get_anagrams("dubbed")
    self.assertEqual(r, ['dubbed'])

    _, r = self.anagrams2.get_anagrams("dubhe")
    self.assertEqual(r, ['dubhe'])

    _, r = self.anagrams2.get_anagrams("dubious")
    self.assertEqual(r, ['dubious'])

    _, r = self.anagrams2.get_anagrams("dubiously")
    self.assertEqual(r, ['dubiously'])

    _, r = self.anagrams2.get_anagrams("dubiousness")
    self.assertEqual(r, ['dubiousness'])

    _, r = self.anagrams2.get_anagrams("dublin")
    self.assertEqual(r, ['dublin'])

    _, r = self.anagrams2.get_anagrams("dubs")
    self.assertEqual(r, ['buds', 'dubs'])

    _, r = self.anagrams2.get_anagrams("dubuque")
    self.assertEqual(r, ['dubuque'])

    _, r = self.anagrams2.get_anagrams("duchess")
    self.assertEqual(r, ['duchess'])

    _, r = self.anagrams2.get_anagrams("duchesses")
    self.assertEqual(r, ['duchesses'])

    _, r = self.anagrams2.get_anagrams("duchy")
    self.assertEqual(r, ['duchy'])

    _, r = self.anagrams2.get_anagrams("duck")
    self.assertEqual(r, ['duck'])

    _, r = self.anagrams2.get_anagrams("ducked")
    self.assertEqual(r, ['ducked'])

    _, r = self.anagrams2.get_anagrams("ducking")
    self.assertEqual(r, ['ducking'])

    _, r = self.anagrams2.get_anagrams("duckling")
    self.assertEqual(r, ['duckling'])

    _, r = self.anagrams2.get_anagrams("ducks")
    self.assertEqual(r, ['ducks'])

    _, r = self.anagrams2.get_anagrams("duct")
    self.assertEqual(r, ['duct'])

    _, r = self.anagrams2.get_anagrams("ducts")
    self.assertEqual(r, ['ducts'])

    _, r = self.anagrams2.get_anagrams("dud")
    self.assertEqual(r, ['dud'])

    _, r = self.anagrams2.get_anagrams("dudley")
    self.assertEqual(r, ['dudley'])

    _, r = self.anagrams2.get_anagrams("due")
    self.assertEqual(r, ['due'])

    _, r = self.anagrams2.get_anagrams("duel")
    self.assertEqual(r, ['duel'])

    _, r = self.anagrams2.get_anagrams("dueling")
    self.assertEqual(r, ['dueling', 'eluding', 'indulge'])

    _, r = self.anagrams2.get_anagrams("duels")
    self.assertEqual(r, ['duels'])

    _, r = self.anagrams2.get_anagrams("dues")
    self.assertEqual(r, ['deus', 'dues', 'sued', 'used'])

    _, r = self.anagrams2.get_anagrams("duet")
    self.assertEqual(r, ['duet'])

    _, r = self.anagrams2.get_anagrams("duffy")
    self.assertEqual(r, ['duffy'])

    _, r = self.anagrams2.get_anagrams("dug")
    self.assertEqual(r, ['dug'])

    _, r = self.anagrams2.get_anagrams("dugan")
    self.assertEqual(r, ['dugan'])

    _, r = self.anagrams2.get_anagrams("duke")
    self.assertEqual(r, ['duke'])

    _, r = self.anagrams2.get_anagrams("dukes")
    self.assertEqual(r, ['dukes'])

    _, r = self.anagrams2.get_anagrams("dull")
    self.assertEqual(r, ['dull'])

    _, r = self.anagrams2.get_anagrams("dulled")
    self.assertEqual(r, ['dulled'])

    _, r = self.anagrams2.get_anagrams("duller")
    self.assertEqual(r, ['duller'])

    _, r = self.anagrams2.get_anagrams("dulles")
    self.assertEqual(r, ['dulles'])

    _, r = self.anagrams2.get_anagrams("dullest")
    self.assertEqual(r, ['dullest'])

    _, r = self.anagrams2.get_anagrams("dulling")
    self.assertEqual(r, ['dulling'])

    _, r = self.anagrams2.get_anagrams("dullness")
    self.assertEqual(r, ['dullness'])

    _, r = self.anagrams2.get_anagrams("dulls")
    self.assertEqual(r, ['dulls'])

    _, r = self.anagrams2.get_anagrams("dully")
    self.assertEqual(r, ['dully'])

    _, r = self.anagrams2.get_anagrams("duluth")
    self.assertEqual(r, ['duluth'])

    _, r = self.anagrams2.get_anagrams("duly")
    self.assertEqual(r, ['duly'])

    _, r = self.anagrams2.get_anagrams("dumb")
    self.assertEqual(r, ['dumb'])

    _, r = self.anagrams2.get_anagrams("dumbbell")
    self.assertEqual(r, ['dumbbell'])

    _, r = self.anagrams2.get_anagrams("dumbbells")
    self.assertEqual(r, ['dumbbells'])

    _, r = self.anagrams2.get_anagrams("dumber")
    self.assertEqual(r, ['dumber'])

    _, r = self.anagrams2.get_anagrams("dumbest")
    self.assertEqual(r, ['dumbest'])

    _, r = self.anagrams2.get_anagrams("dumbly")
    self.assertEqual(r, ['dumbly'])

    _, r = self.anagrams2.get_anagrams("dumbness")
    self.assertEqual(r, ['dumbness'])

    _, r = self.anagrams2.get_anagrams("dummies")
    self.assertEqual(r, ['dummies', 'mediums'])

    _, r = self.anagrams2.get_anagrams("dummy")
    self.assertEqual(r, ['dummy'])

    _, r = self.anagrams2.get_anagrams("dump")
    self.assertEqual(r, ['dump'])

    _, r = self.anagrams2.get_anagrams("dumped")
    self.assertEqual(r, ['dumped'])

    _, r = self.anagrams2.get_anagrams("dumper")
    self.assertEqual(r, ['dumper'])

    _, r = self.anagrams2.get_anagrams("dumping")
    self.assertEqual(r, ['dumping'])

    _, r = self.anagrams2.get_anagrams("dumps")
    self.assertEqual(r, ['dumps'])

    _, r = self.anagrams2.get_anagrams("dumpty")
    self.assertEqual(r, ['dumpty'])

    _, r = self.anagrams2.get_anagrams("dunbar")
    self.assertEqual(r, ['dunbar'])

    _, r = self.anagrams2.get_anagrams("duncan")
    self.assertEqual(r, ['duncan'])

    _, r = self.anagrams2.get_anagrams("dunce")
    self.assertEqual(r, ['dunce'])

    _, r = self.anagrams2.get_anagrams("dunces")
    self.assertEqual(r, ['dunces'])

    _, r = self.anagrams2.get_anagrams("dundee")
    self.assertEqual(r, ['denude', 'dundee'])

    _, r = self.anagrams2.get_anagrams("dune")
    self.assertEqual(r, ['dune', 'nude'])

    _, r = self.anagrams2.get_anagrams("dunedin")
    self.assertEqual(r, ['dunedin'])

    _, r = self.anagrams2.get_anagrams("dunes")
    self.assertEqual(r, ['dunes'])

    _, r = self.anagrams2.get_anagrams("dung")
    self.assertEqual(r, ['dung'])

    _, r = self.anagrams2.get_anagrams("dungeon")
    self.assertEqual(r, ['dungeon'])

    _, r = self.anagrams2.get_anagrams("dungeons")
    self.assertEqual(r, ['dungeons'])

    _, r = self.anagrams2.get_anagrams("dunham")
    self.assertEqual(r, ['dunham'])

    _, r = self.anagrams2.get_anagrams("dunk")
    self.assertEqual(r, ['dunk'])

    _, r = self.anagrams2.get_anagrams("dunkirk")
    self.assertEqual(r, ['dunkirk'])

    _, r = self.anagrams2.get_anagrams("dunlap")
    self.assertEqual(r, ['dunlap', 'upland'])

    _, r = self.anagrams2.get_anagrams("dunlop")
    self.assertEqual(r, ['dunlop'])

    _, r = self.anagrams2.get_anagrams("dunn")
    self.assertEqual(r, ['dunn'])

    _, r = self.anagrams2.get_anagrams("dunne")
    self.assertEqual(r, ['dunne'])

    _, r = self.anagrams2.get_anagrams("dupe")
    self.assertEqual(r, ['dupe'])

    _, r = self.anagrams2.get_anagrams("duplex")
    self.assertEqual(r, ['duplex'])

    _, r = self.anagrams2.get_anagrams("duplicable")
    self.assertEqual(r, ['duplicable'])

    _, r = self.anagrams2.get_anagrams("duplicate")
    self.assertEqual(r, ['duplicate'])

    _, r = self.anagrams2.get_anagrams("duplicated")
    self.assertEqual(r, ['duplicated'])

    _, r = self.anagrams2.get_anagrams("duplicates")
    self.assertEqual(r, ['duplicates'])

    _, r = self.anagrams2.get_anagrams("duplicating")
    self.assertEqual(r, ['duplicating'])

    _, r = self.anagrams2.get_anagrams("duplication")
    self.assertEqual(r, ['duplication'])

    _, r = self.anagrams2.get_anagrams("duplications")
    self.assertEqual(r, ['duplications'])

    _, r = self.anagrams2.get_anagrams("duplicator")
    self.assertEqual(r, ['duplicator'])

    _, r = self.anagrams2.get_anagrams("duplicators")
    self.assertEqual(r, ['duplicators'])

    _, r = self.anagrams2.get_anagrams("duplicity")
    self.assertEqual(r, ['duplicity'])

    _, r = self.anagrams2.get_anagrams("dupont")
    self.assertEqual(r, ['dupont', 'dupont'])

    _, r = self.anagrams2.get_anagrams("dupont")
    self.assertEqual(r, ['dupont', 'dupont'])

    _, r = self.anagrams2.get_anagrams("duponts")
    self.assertEqual(r, ['duponts', 'duponts'])

    _, r = self.anagrams2.get_anagrams("duponts")
    self.assertEqual(r, ['duponts', 'duponts'])

    _, r = self.anagrams2.get_anagrams("duquesne")
    self.assertEqual(r, ['duquesne'])

    _, r = self.anagrams2.get_anagrams("durabilities")
    self.assertEqual(r, ['durabilities'])

    _, r = self.anagrams2.get_anagrams("durability")
    self.assertEqual(r, ['durability'])

    _, r = self.anagrams2.get_anagrams("durable")
    self.assertEqual(r, ['durable'])

    _, r = self.anagrams2.get_anagrams("durably")
    self.assertEqual(r, ['durably'])

    _, r = self.anagrams2.get_anagrams("durango")
    self.assertEqual(r, ['durango'])

    _, r = self.anagrams2.get_anagrams("duration")
    self.assertEqual(r, ['duration'])

    _, r = self.anagrams2.get_anagrams("durations")
    self.assertEqual(r, ['durations'])

    _, r = self.anagrams2.get_anagrams("durer")
    self.assertEqual(r, ['durer'])

    _, r = self.anagrams2.get_anagrams("durers")
    self.assertEqual(r, ['durers'])

    _, r = self.anagrams2.get_anagrams("duress")
    self.assertEqual(r, ['duress'])

    _, r = self.anagrams2.get_anagrams("durham")
    self.assertEqual(r, ['durham'])

    _, r = self.anagrams2.get_anagrams("during")
    self.assertEqual(r, ['during'])

    _, r = self.anagrams2.get_anagrams("durkee")
    self.assertEqual(r, ['durkee'])

    _, r = self.anagrams2.get_anagrams("durkin")
    self.assertEqual(r, ['durkin'])

    _, r = self.anagrams2.get_anagrams("durrell")
    self.assertEqual(r, ['durrell'])

    _, r = self.anagrams2.get_anagrams("durward")
    self.assertEqual(r, ['durward'])

    _, r = self.anagrams2.get_anagrams("dusenberg")
    self.assertEqual(r, ['dusenberg'])

    _, r = self.anagrams2.get_anagrams("dusenbury")
    self.assertEqual(r, ['dusenbury'])

    _, r = self.anagrams2.get_anagrams("dusk")
    self.assertEqual(r, ['dusk'])

    _, r = self.anagrams2.get_anagrams("duskiness")
    self.assertEqual(r, ['duskiness'])

    _, r = self.anagrams2.get_anagrams("dusky")
    self.assertEqual(r, ['dusky'])

    _, r = self.anagrams2.get_anagrams("dusseldorf")
    self.assertEqual(r, ['dusseldorf'])

    _, r = self.anagrams2.get_anagrams("dust")
    self.assertEqual(r, ['dust', 'stud'])

    _, r = self.anagrams2.get_anagrams("dustbin")
    self.assertEqual(r, ['dustbin'])

    _, r = self.anagrams2.get_anagrams("dusted")
    self.assertEqual(r, ['dusted'])

    _, r = self.anagrams2.get_anagrams("duster")
    self.assertEqual(r, ['duster', 'rusted'])

    _, r = self.anagrams2.get_anagrams("dusters")
    self.assertEqual(r, ['dusters'])

    _, r = self.anagrams2.get_anagrams("dustier")
    self.assertEqual(r, ['dustier'])

    _, r = self.anagrams2.get_anagrams("dustiest")
    self.assertEqual(r, ['dustiest'])

    _, r = self.anagrams2.get_anagrams("dustin")
    self.assertEqual(r, ['dustin'])

    _, r = self.anagrams2.get_anagrams("dusting")
    self.assertEqual(r, ['dusting'])

    _, r = self.anagrams2.get_anagrams("dusts")
    self.assertEqual(r, ['dusts', 'studs'])

    _, r = self.anagrams2.get_anagrams("dusty")
    self.assertEqual(r, ['dusty', 'study'])

    _, r = self.anagrams2.get_anagrams("dutch")
    self.assertEqual(r, ['dutch'])

    _, r = self.anagrams2.get_anagrams("dutchess")
    self.assertEqual(r, ['dutchess'])

    _, r = self.anagrams2.get_anagrams("dutchman")
    self.assertEqual(r, ['dutchman'])

    _, r = self.anagrams2.get_anagrams("dutchmen")
    self.assertEqual(r, ['dutchmen'])

    _, r = self.anagrams2.get_anagrams("duties")
    self.assertEqual(r, ['duties', 'suited'])

    _, r = self.anagrams2.get_anagrams("dutiful")
    self.assertEqual(r, ['dutiful'])

    _, r = self.anagrams2.get_anagrams("dutifully")
    self.assertEqual(r, ['dutifully'])

    _, r = self.anagrams2.get_anagrams("dutifulness")
    self.assertEqual(r, ['dutifulness'])

    _, r = self.anagrams2.get_anagrams("dutton")
    self.assertEqual(r, ['dutton'])

    _, r = self.anagrams2.get_anagrams("duty")
    self.assertEqual(r, ['duty'])

    _, r = self.anagrams2.get_anagrams("dvorak")
    self.assertEqual(r, ['dvorak'])

    _, r = self.anagrams2.get_anagrams("dwarf")
    self.assertEqual(r, ['dwarf'])

    _, r = self.anagrams2.get_anagrams("dwarfed")
    self.assertEqual(r, ['dwarfed'])

    _, r = self.anagrams2.get_anagrams("dwarfs")
    self.assertEqual(r, ['dwarfs'])

    _, r = self.anagrams2.get_anagrams("dwarves")
    self.assertEqual(r, ['dwarves'])

    _, r = self.anagrams2.get_anagrams("dwell")
    self.assertEqual(r, ['dwell'])

    _, r = self.anagrams2.get_anagrams("dwelled")
    self.assertEqual(r, ['dwelled'])

    _, r = self.anagrams2.get_anagrams("dweller")
    self.assertEqual(r, ['dweller'])

    _, r = self.anagrams2.get_anagrams("dwellers")
    self.assertEqual(r, ['dwellers'])

    _, r = self.anagrams2.get_anagrams("dwelling")
    self.assertEqual(r, ['dwelling'])

    _, r = self.anagrams2.get_anagrams("dwellings")
    self.assertEqual(r, ['dwellings'])

    _, r = self.anagrams2.get_anagrams("dwells")
    self.assertEqual(r, ['dwells'])

    _, r = self.anagrams2.get_anagrams("dwelt")
    self.assertEqual(r, ['dwelt'])

    _, r = self.anagrams2.get_anagrams("dwight")
    self.assertEqual(r, ['dwight'])

    _, r = self.anagrams2.get_anagrams("dwindle")
    self.assertEqual(r, ['dwindle'])

    _, r = self.anagrams2.get_anagrams("dwindled")
    self.assertEqual(r, ['dwindled'])

    _, r = self.anagrams2.get_anagrams("dwindling")
    self.assertEqual(r, ['dwindling'])

    _, r = self.anagrams2.get_anagrams("dwyer")
    self.assertEqual(r, ['dwyer'])

    _, r = self.anagrams2.get_anagrams("dyad")
    self.assertEqual(r, ['dyad'])

    _, r = self.anagrams2.get_anagrams("dyadic")
    self.assertEqual(r, ['dyadic'])

    _, r = self.anagrams2.get_anagrams("dye")
    self.assertEqual(r, ['dye'])

    _, r = self.anagrams2.get_anagrams("dyed")
    self.assertEqual(r, ['dyed', 'eddy'])

    _, r = self.anagrams2.get_anagrams("dyeing")
    self.assertEqual(r, ['dyeing'])

    _, r = self.anagrams2.get_anagrams("dyer")
    self.assertEqual(r, ['dyer'])

    _, r = self.anagrams2.get_anagrams("dyers")
    self.assertEqual(r, ['dyers'])

    _, r = self.anagrams2.get_anagrams("dyes")
    self.assertEqual(r, ['dyes'])

    _, r = self.anagrams2.get_anagrams("dying")
    self.assertEqual(r, ['dingy', 'dying'])

    _, r = self.anagrams2.get_anagrams("dyke")
    self.assertEqual(r, ['dyke'])

    _, r = self.anagrams2.get_anagrams("dylan")
    self.assertEqual(r, ['dylan'])

    _, r = self.anagrams2.get_anagrams("dynamic")
    self.assertEqual(r, ['dynamic'])

    _, r = self.anagrams2.get_anagrams("dynamically")
    self.assertEqual(r, ['dynamically'])

    _, r = self.anagrams2.get_anagrams("dynamics")
    self.assertEqual(r, ['dynamics'])

    _, r = self.anagrams2.get_anagrams("dynamism")
    self.assertEqual(r, ['dynamism'])

    _, r = self.anagrams2.get_anagrams("dynamite")
    self.assertEqual(r, ['dynamite'])

    _, r = self.anagrams2.get_anagrams("dynamited")
    self.assertEqual(r, ['dynamited'])

    _, r = self.anagrams2.get_anagrams("dynamites")
    self.assertEqual(r, ['dynamites'])

    _, r = self.anagrams2.get_anagrams("dynamiting")
    self.assertEqual(r, ['dynamiting'])

    _, r = self.anagrams2.get_anagrams("dynamo")
    self.assertEqual(r, ['dynamo', 'monday'])

    _, r = self.anagrams2.get_anagrams("dynastic")
    self.assertEqual(r, ['dynastic'])

    _, r = self.anagrams2.get_anagrams("dynasties")
    self.assertEqual(r, ['dynasties'])

    _, r = self.anagrams2.get_anagrams("dynasty")
    self.assertEqual(r, ['dynasty'])

    _, r = self.anagrams2.get_anagrams("dyne")
    self.assertEqual(r, ['deny', 'dyne'])

    _, r = self.anagrams2.get_anagrams("dysentery")
    self.assertEqual(r, ['dysentery'])

    _, r = self.anagrams2.get_anagrams("dyspeptic")
    self.assertEqual(r, ['dyspeptic'])

    _, r = self.anagrams2.get_anagrams("dystrophy")
    self.assertEqual(r, ['dystrophy'])

    _, r = self.anagrams2.get_anagrams("each")
    self.assertEqual(r, ['ache', 'each'])

    _, r = self.anagrams2.get_anagrams("eagan")
    self.assertEqual(r, ['eagan'])

    _, r = self.anagrams2.get_anagrams("eager")
    self.assertEqual(r, ['agree', 'eager'])

    _, r = self.anagrams2.get_anagrams("eagerly")
    self.assertEqual(r, ['eagerly'])

    _, r = self.anagrams2.get_anagrams("eagerness")
    self.assertEqual(r, ['eagerness'])

    _, r = self.anagrams2.get_anagrams("eagle")
    self.assertEqual(r, ['eagle'])

    _, r = self.anagrams2.get_anagrams("eagles")
    self.assertEqual(r, ['eagles'])

    _, r = self.anagrams2.get_anagrams("ear")
    self.assertEqual(r, ['are', 'ear', 'era', 'rae'])

    _, r = self.anagrams2.get_anagrams("eardrum")
    self.assertEqual(r, ['eardrum'])

    _, r = self.anagrams2.get_anagrams("eared")
    self.assertEqual(r, ['eared'])

    _, r = self.anagrams2.get_anagrams("earl")
    self.assertEqual(r, ['earl', 'lear', 'real'])

    _, r = self.anagrams2.get_anagrams("earlier")
    self.assertEqual(r, ['earlier'])

    _, r = self.anagrams2.get_anagrams("earliest")
    self.assertEqual(r, ['earliest'])

    _, r = self.anagrams2.get_anagrams("earliness")
    self.assertEqual(r, ['earliness'])

    _, r = self.anagrams2.get_anagrams("earls")
    self.assertEqual(r, ['earls', 'lares', 'laser', 'reals'])

    _, r = self.anagrams2.get_anagrams("early")
    self.assertEqual(r, ['early', 'layer', 'leary', 'relay'])

    _, r = self.anagrams2.get_anagrams("earmark")
    self.assertEqual(r, ['earmark'])

    _, r = self.anagrams2.get_anagrams("earmarked")
    self.assertEqual(r, ['earmarked'])

    _, r = self.anagrams2.get_anagrams("earmarking")
    self.assertEqual(r, ['earmarking'])

    _, r = self.anagrams2.get_anagrams("earmarkings")
    self.assertEqual(r, ['earmarkings'])

    _, r = self.anagrams2.get_anagrams("earmarks")
    self.assertEqual(r, ['earmarks'])

    _, r = self.anagrams2.get_anagrams("earn")
    self.assertEqual(r, ['earn', 'near', 'rena'])

    _, r = self.anagrams2.get_anagrams("earned")
    self.assertEqual(r, ['earned', 'endear', 'neared'])

    _, r = self.anagrams2.get_anagrams("earner")
    self.assertEqual(r, ['earner', 'nearer'])

    _, r = self.anagrams2.get_anagrams("earners")
    self.assertEqual(r, ['earners'])

    _, r = self.anagrams2.get_anagrams("earnest")
    self.assertEqual(r, ['earnest', 'eastern', 'nearest'])

    _, r = self.anagrams2.get_anagrams("earnestly")
    self.assertEqual(r, ['earnestly'])

    _, r = self.anagrams2.get_anagrams("earnestness")
    self.assertEqual(r, ['earnestness'])

    _, r = self.anagrams2.get_anagrams("earning")
    self.assertEqual(r, ['earning', 'nearing'])

    _, r = self.anagrams2.get_anagrams("earnings")
    self.assertEqual(r, ['earnings'])

    _, r = self.anagrams2.get_anagrams("earns")
    self.assertEqual(r, ['earns', 'nears', 'saner', 'snare'])

    _, r = self.anagrams2.get_anagrams("earp")
    self.assertEqual(r, ['earp', 'pare', 'pear', 'rape', 'reap'])

    _, r = self.anagrams2.get_anagrams("earphone")
    self.assertEqual(r, ['earphone'])

    _, r = self.anagrams2.get_anagrams("earring")
    self.assertEqual(r, ['angrier', 'earring', 'rearing'])

    _, r = self.anagrams2.get_anagrams("earrings")
    self.assertEqual(r, ['earrings'])

    _, r = self.anagrams2.get_anagrams("ears")
    self.assertEqual(r, ['ares', 'ears', 'eras', 'sear'])

    _, r = self.anagrams2.get_anagrams("earsplitting")
    self.assertEqual(r, ['earsplitting'])

    _, r = self.anagrams2.get_anagrams("earth")
    self.assertEqual(r, ['earth', 'hater', 'heart'])

    _, r = self.anagrams2.get_anagrams("earthen")
    self.assertEqual(r, ['earthen', 'hearten', 'teheran'])

    _, r = self.anagrams2.get_anagrams("earthenware")
    self.assertEqual(r, ['earthenware'])

    _, r = self.anagrams2.get_anagrams("earthliness")
    self.assertEqual(r, ['earthliness'])

    _, r = self.anagrams2.get_anagrams("earthling")
    self.assertEqual(r, ['earthling'])

    _, r = self.anagrams2.get_anagrams("earthly")
    self.assertEqual(r, ['earthly', 'hartley'])

    _, r = self.anagrams2.get_anagrams("earthman")
    self.assertEqual(r, ['earthman'])

    _, r = self.anagrams2.get_anagrams("earthmen")
    self.assertEqual(r, ['earthmen'])

    _, r = self.anagrams2.get_anagrams("earthmover")
    self.assertEqual(r, ['earthmover'])

    _, r = self.anagrams2.get_anagrams("earthquake")
    self.assertEqual(r, ['earthquake'])

    _, r = self.anagrams2.get_anagrams("earthquakes")
    self.assertEqual(r, ['earthquakes'])

    _, r = self.anagrams2.get_anagrams("earths")
    self.assertEqual(r, ['earths', 'hearst', 'hearts'])

    _, r = self.anagrams2.get_anagrams("earthworm")
    self.assertEqual(r, ['earthworm'])

    _, r = self.anagrams2.get_anagrams("earthworms")
    self.assertEqual(r, ['earthworms', 'swarthmore'])

    _, r = self.anagrams2.get_anagrams("earthy")
    self.assertEqual(r, ['earthy', 'hearty', 'thayer'])

    _, r = self.anagrams2.get_anagrams("ease")
    self.assertEqual(r, ['ease'])

    _, r = self.anagrams2.get_anagrams("eased")
    self.assertEqual(r, ['eased'])

    _, r = self.anagrams2.get_anagrams("easel")
    self.assertEqual(r, ['easel', 'lease'])

    _, r = self.anagrams2.get_anagrams("easement")
    self.assertEqual(r, ['easement'])

    _, r = self.anagrams2.get_anagrams("easements")
    self.assertEqual(r, ['easements'])

    _, r = self.anagrams2.get_anagrams("eases")
    self.assertEqual(r, ['eases'])

    _, r = self.anagrams2.get_anagrams("easier")
    self.assertEqual(r, ['easier'])

    _, r = self.anagrams2.get_anagrams("easiest")
    self.assertEqual(r, ['easiest'])

    _, r = self.anagrams2.get_anagrams("easily")
    self.assertEqual(r, ['easily', 'yalies'])

    _, r = self.anagrams2.get_anagrams("easiness")
    self.assertEqual(r, ['easiness'])

    _, r = self.anagrams2.get_anagrams("easing")
    self.assertEqual(r, ['easing', 'gaines'])

    _, r = self.anagrams2.get_anagrams("east")
    self.assertEqual(r, ['east', 'eats', 'sate', 'seat', 'teas'])

    _, r = self.anagrams2.get_anagrams("eastbound")
    self.assertEqual(r, ['eastbound'])

    _, r = self.anagrams2.get_anagrams("easter")
    self.assertEqual(r, ['easter', 'eaters', 'teresa'])

    _, r = self.anagrams2.get_anagrams("eastern")
    self.assertEqual(r, ['earnest', 'eastern', 'nearest'])

    _, r = self.anagrams2.get_anagrams("easterner")
    self.assertEqual(r, ['easterner'])

    _, r = self.anagrams2.get_anagrams("easterners")
    self.assertEqual(r, ['easterners'])

    _, r = self.anagrams2.get_anagrams("easternmost")
    self.assertEqual(r, ['easternmost'])

    _, r = self.anagrams2.get_anagrams("easthampton")
    self.assertEqual(r, ['easthampton'])

    _, r = self.anagrams2.get_anagrams("eastland")
    self.assertEqual(r, ['eastland'])

    _, r = self.anagrams2.get_anagrams("eastman")
    self.assertEqual(r, ['eastman'])

    _, r = self.anagrams2.get_anagrams("eastward")
    self.assertEqual(r, ['eastward'])

    _, r = self.anagrams2.get_anagrams("eastwards")
    self.assertEqual(r, ['eastwards'])

    _, r = self.anagrams2.get_anagrams("eastwick")
    self.assertEqual(r, ['eastwick'])

    _, r = self.anagrams2.get_anagrams("eastwood")
    self.assertEqual(r, ['eastwood'])

    _, r = self.anagrams2.get_anagrams("easy")
    self.assertEqual(r, ['ayes', 'easy', 'yeas'])

    _, r = self.anagrams2.get_anagrams("easygoing")
    self.assertEqual(r, ['easygoing'])

    _, r = self.anagrams2.get_anagrams("eat")
    self.assertEqual(r, ['ate', 'eat', 'tea'])

    _, r = self.anagrams2.get_anagrams("eaten")
    self.assertEqual(r, ['eaten'])

    _, r = self.anagrams2.get_anagrams("eater")
    self.assertEqual(r, ['eater'])

    _, r = self.anagrams2.get_anagrams("eaters")
    self.assertEqual(r, ['easter', 'eaters', 'teresa'])

    _, r = self.anagrams2.get_anagrams("eating")
    self.assertEqual(r, ['eating'])

    _, r = self.anagrams2.get_anagrams("eatings")
    self.assertEqual(r, ['eatings', 'seating', 'teasing'])

    _, r = self.anagrams2.get_anagrams("eaton")
    self.assertEqual(r, ['atone', 'eaton', 'oaten'])

    _, r = self.anagrams2.get_anagrams("eats")
    self.assertEqual(r, ['east', 'eats', 'sate', 'seat', 'teas'])

    _, r = self.anagrams2.get_anagrams("eaves")
    self.assertEqual(r, ['eaves'])

    _, r = self.anagrams2.get_anagrams("eavesdrop")
    self.assertEqual(r, ['eavesdrop'])

    _, r = self.anagrams2.get_anagrams("eavesdropped")
    self.assertEqual(r, ['eavesdropped'])

    _, r = self.anagrams2.get_anagrams("eavesdropper")
    self.assertEqual(r, ['eavesdropper'])

    _, r = self.anagrams2.get_anagrams("eavesdroppers")
    self.assertEqual(r, ['eavesdroppers'])

    _, r = self.anagrams2.get_anagrams("eavesdropping")
    self.assertEqual(r, ['eavesdropping'])

    _, r = self.anagrams2.get_anagrams("eavesdrops")
    self.assertEqual(r, ['eavesdrops'])

    _, r = self.anagrams2.get_anagrams("ebb")
    self.assertEqual(r, ['ebb'])

    _, r = self.anagrams2.get_anagrams("ebbing")
    self.assertEqual(r, ['ebbing'])

    _, r = self.anagrams2.get_anagrams("ebbs")
    self.assertEqual(r, ['ebbs'])

    _, r = self.anagrams2.get_anagrams("eben")
    self.assertEqual(r, ['been', 'eben'])

    _, r = self.anagrams2.get_anagrams("ebony")
    self.assertEqual(r, ['ebony'])

    _, r = self.anagrams2.get_anagrams("eccentric")
    self.assertEqual(r, ['eccentric'])

    _, r = self.anagrams2.get_anagrams("eccentricities")
    self.assertEqual(r, ['eccentricities'])

    _, r = self.anagrams2.get_anagrams("eccentricity")
    self.assertEqual(r, ['eccentricity'])

    _, r = self.anagrams2.get_anagrams("eccentrics")
    self.assertEqual(r, ['eccentrics'])

    _, r = self.anagrams2.get_anagrams("eccles")
    self.assertEqual(r, ['eccles'])

    _, r = self.anagrams2.get_anagrams("ecclesiastical")
    self.assertEqual(r, ['ecclesiastical'])

    _, r = self.anagrams2.get_anagrams("echelon")
    self.assertEqual(r, ['echelon'])

    _, r = self.anagrams2.get_anagrams("echo")
    self.assertEqual(r, ['echo'])

    _, r = self.anagrams2.get_anagrams("echoed")
    self.assertEqual(r, ['echoed'])

    _, r = self.anagrams2.get_anagrams("echoes")
    self.assertEqual(r, ['echoes'])

    _, r = self.anagrams2.get_anagrams("echoing")
    self.assertEqual(r, ['echoing'])

    _, r = self.anagrams2.get_anagrams("eclectic")
    self.assertEqual(r, ['eclectic'])

    _, r = self.anagrams2.get_anagrams("eclipse")
    self.assertEqual(r, ['eclipse'])

    _, r = self.anagrams2.get_anagrams("eclipsed")
    self.assertEqual(r, ['eclipsed'])

    _, r = self.anagrams2.get_anagrams("eclipses")
    self.assertEqual(r, ['eclipses'])

    _, r = self.anagrams2.get_anagrams("eclipsing")
    self.assertEqual(r, ['eclipsing'])

    _, r = self.anagrams2.get_anagrams("ecliptic")
    self.assertEqual(r, ['ecliptic'])

    _, r = self.anagrams2.get_anagrams("ecole")
    self.assertEqual(r, ['ecole'])

    _, r = self.anagrams2.get_anagrams("ecology")
    self.assertEqual(r, ['ecology'])

    _, r = self.anagrams2.get_anagrams("econometric")
    self.assertEqual(r, ['econometric'])

    _, r = self.anagrams2.get_anagrams("econometrica")
    self.assertEqual(r, ['econometrica'])

    _, r = self.anagrams2.get_anagrams("economic")
    self.assertEqual(r, ['economic'])

    _, r = self.anagrams2.get_anagrams("economical")
    self.assertEqual(r, ['economical'])

    _, r = self.anagrams2.get_anagrams("economically")
    self.assertEqual(r, ['economically'])

    _, r = self.anagrams2.get_anagrams("economics")
    self.assertEqual(r, ['economics'])

    _, r = self.anagrams2.get_anagrams("economies")
    self.assertEqual(r, ['economies'])

    _, r = self.anagrams2.get_anagrams("economist")
    self.assertEqual(r, ['economist'])

    _, r = self.anagrams2.get_anagrams("economists")
    self.assertEqual(r, ['economists'])

    _, r = self.anagrams2.get_anagrams("economize")
    self.assertEqual(r, ['economize'])

    _, r = self.anagrams2.get_anagrams("economized")
    self.assertEqual(r, ['economized'])

    _, r = self.anagrams2.get_anagrams("economizer")
    self.assertEqual(r, ['economizer'])

    _, r = self.anagrams2.get_anagrams("economizers")
    self.assertEqual(r, ['economizers'])

    _, r = self.anagrams2.get_anagrams("economizes")
    self.assertEqual(r, ['economizes'])

    _, r = self.anagrams2.get_anagrams("economizing")
    self.assertEqual(r, ['economizing'])

    _, r = self.anagrams2.get_anagrams("economy")
    self.assertEqual(r, ['economy'])

    _, r = self.anagrams2.get_anagrams("ecosystem")
    self.assertEqual(r, ['ecosystem'])

    _, r = self.anagrams2.get_anagrams("ecstasy")
    self.assertEqual(r, ['ecstasy'])

    _, r = self.anagrams2.get_anagrams("ecstatic")
    self.assertEqual(r, ['ecstatic'])

    _, r = self.anagrams2.get_anagrams("ecuador")
    self.assertEqual(r, ['ecuador'])

    _, r = self.anagrams2.get_anagrams("ecuadorian")
    self.assertEqual(r, ['ecuadorian'])

    _, r = self.anagrams2.get_anagrams("ed")
    self.assertEqual(r, ['de', 'ed'])

    _, r = self.anagrams2.get_anagrams("eddie")
    self.assertEqual(r, ['eddie'])

    _, r = self.anagrams2.get_anagrams("eddies")
    self.assertEqual(r, ['eddies'])

    _, r = self.anagrams2.get_anagrams("eddy")
    self.assertEqual(r, ['dyed', 'eddy'])

    _, r = self.anagrams2.get_anagrams("eden")
    self.assertEqual(r, ['eden', 'need'])

    _, r = self.anagrams2.get_anagrams("edenization")
    self.assertEqual(r, ['edenization'])

    _, r = self.anagrams2.get_anagrams("edenizations")
    self.assertEqual(r, ['edenizations'])

    _, r = self.anagrams2.get_anagrams("edenize")
    self.assertEqual(r, ['edenize'])

    _, r = self.anagrams2.get_anagrams("edenizes")
    self.assertEqual(r, ['edenizes'])

    _, r = self.anagrams2.get_anagrams("edgar")
    self.assertEqual(r, ['edgar', 'grade', 'raged'])

    _, r = self.anagrams2.get_anagrams("edge")
    self.assertEqual(r, ['edge'])

    _, r = self.anagrams2.get_anagrams("edged")
    self.assertEqual(r, ['edged'])

    _, r = self.anagrams2.get_anagrams("edgerton")
    self.assertEqual(r, ['edgerton'])

    _, r = self.anagrams2.get_anagrams("edges")
    self.assertEqual(r, ['edges', 'sedge'])

    _, r = self.anagrams2.get_anagrams("edgewater")
    self.assertEqual(r, ['edgewater'])

    _, r = self.anagrams2.get_anagrams("edgewood")
    self.assertEqual(r, ['edgewood'])

    _, r = self.anagrams2.get_anagrams("edging")
    self.assertEqual(r, ['edging'])

    _, r = self.anagrams2.get_anagrams("edible")
    self.assertEqual(r, ['belied', 'edible'])

    _, r = self.anagrams2.get_anagrams("edict")
    self.assertEqual(r, ['cited', 'edict'])

    _, r = self.anagrams2.get_anagrams("edicts")
    self.assertEqual(r, ['edicts'])

    _, r = self.anagrams2.get_anagrams("edifice")
    self.assertEqual(r, ['edifice'])

    _, r = self.anagrams2.get_anagrams("edifices")
    self.assertEqual(r, ['edifices'])

    _, r = self.anagrams2.get_anagrams("edinburgh")
    self.assertEqual(r, ['edinburgh'])

    _, r = self.anagrams2.get_anagrams("edison")
    self.assertEqual(r, ['edison'])

    _, r = self.anagrams2.get_anagrams("edit")
    self.assertEqual(r, ['diet', 'edit', 'tide', 'tied'])

    _, r = self.anagrams2.get_anagrams("edited")
    self.assertEqual(r, ['edited'])

    _, r = self.anagrams2.get_anagrams("edith")
    self.assertEqual(r, ['edith'])

    _, r = self.anagrams2.get_anagrams("editing")
    self.assertEqual(r, ['editing'])

    _, r = self.anagrams2.get_anagrams("edition")
    self.assertEqual(r, ['edition'])

    _, r = self.anagrams2.get_anagrams("editions")
    self.assertEqual(r, ['editions', 'sedition'])

    _, r = self.anagrams2.get_anagrams("editor")
    self.assertEqual(r, ['editor', 'rioted'])

    _, r = self.anagrams2.get_anagrams("editorial")
    self.assertEqual(r, ['editorial'])

    _, r = self.anagrams2.get_anagrams("editorially")
    self.assertEqual(r, ['editorially'])

    _, r = self.anagrams2.get_anagrams("editorials")
    self.assertEqual(r, ['editorials'])

    _, r = self.anagrams2.get_anagrams("editors")
    self.assertEqual(r, ['editors', 'storied'])

    _, r = self.anagrams2.get_anagrams("edits")
    self.assertEqual(r, ['diets', 'edits', 'sited', 'tides'])

    _, r = self.anagrams2.get_anagrams("edmonds")
    self.assertEqual(r, ['desmond', 'edmonds'])

    _, r = self.anagrams2.get_anagrams("edmondson")
    self.assertEqual(r, ['edmondson'])

    _, r = self.anagrams2.get_anagrams("edmonton")
    self.assertEqual(r, ['edmonton'])

    _, r = self.anagrams2.get_anagrams("edmund")
    self.assertEqual(r, ['edmund'])

    _, r = self.anagrams2.get_anagrams("edna")
    self.assertEqual(r, ['aden', 'dane', 'dean', 'edna'])

    _, r = self.anagrams2.get_anagrams("edsger")
    self.assertEqual(r, ['edsger'])

    _, r = self.anagrams2.get_anagrams("eduard")
    self.assertEqual(r, ['eduard'])

    _, r = self.anagrams2.get_anagrams("eduardo")
    self.assertEqual(r, ['eduardo'])

    _, r = self.anagrams2.get_anagrams("educable")
    self.assertEqual(r, ['educable'])

    _, r = self.anagrams2.get_anagrams("educate")
    self.assertEqual(r, ['educate'])

    _, r = self.anagrams2.get_anagrams("educated")
    self.assertEqual(r, ['educated'])

    _, r = self.anagrams2.get_anagrams("educates")
    self.assertEqual(r, ['educates'])

    _, r = self.anagrams2.get_anagrams("educating")
    self.assertEqual(r, ['educating'])

    _, r = self.anagrams2.get_anagrams("education")
    self.assertEqual(r, ['cautioned', 'education'])

    _, r = self.anagrams2.get_anagrams("educational")
    self.assertEqual(r, ['educational'])

    _, r = self.anagrams2.get_anagrams("educationally")
    self.assertEqual(r, ['educationally'])

    _, r = self.anagrams2.get_anagrams("educations")
    self.assertEqual(r, ['educations'])

    _, r = self.anagrams2.get_anagrams("educator")
    self.assertEqual(r, ['educator'])

    _, r = self.anagrams2.get_anagrams("educators")
    self.assertEqual(r, ['educators'])

    _, r = self.anagrams2.get_anagrams("edward")
    self.assertEqual(r, ['edward'])

    _, r = self.anagrams2.get_anagrams("edwardian")
    self.assertEqual(r, ['edwardian'])

    _, r = self.anagrams2.get_anagrams("edwardine")
    self.assertEqual(r, ['edwardine'])

    _, r = self.anagrams2.get_anagrams("edwards")
    self.assertEqual(r, ['edwards'])

    _, r = self.anagrams2.get_anagrams("edwin")
    self.assertEqual(r, ['edwin', 'widen', 'wined'])

    _, r = self.anagrams2.get_anagrams("edwina")
    self.assertEqual(r, ['edwina'])

    _, r = self.anagrams2.get_anagrams("eel")
    self.assertEqual(r, ['eel', 'lee'])

    _, r = self.anagrams2.get_anagrams("eelgrass")
    self.assertEqual(r, ['eelgrass'])

    _, r = self.anagrams2.get_anagrams("eels")
    self.assertEqual(r, ['eels', 'else', 'lees'])

    _, r = self.anagrams2.get_anagrams("eerie")
    self.assertEqual(r, ['eerie'])

    _, r = self.anagrams2.get_anagrams("eerily")
    self.assertEqual(r, ['eerily'])

    _, r = self.anagrams2.get_anagrams("effect")
    self.assertEqual(r, ['effect'])

    _, r = self.anagrams2.get_anagrams("effected")
    self.assertEqual(r, ['effected'])

    _, r = self.anagrams2.get_anagrams("effecting")
    self.assertEqual(r, ['effecting'])

    _, r = self.anagrams2.get_anagrams("effective")
    self.assertEqual(r, ['effective'])

    _, r = self.anagrams2.get_anagrams("effectively")
    self.assertEqual(r, ['effectively'])

    _, r = self.anagrams2.get_anagrams("effectiveness")
    self.assertEqual(r, ['effectiveness'])

    _, r = self.anagrams2.get_anagrams("effector")
    self.assertEqual(r, ['effector'])

    _, r = self.anagrams2.get_anagrams("effectors")
    self.assertEqual(r, ['effectors'])

    _, r = self.anagrams2.get_anagrams("effects")
    self.assertEqual(r, ['effects'])

    _, r = self.anagrams2.get_anagrams("effectually")
    self.assertEqual(r, ['effectually'])

    _, r = self.anagrams2.get_anagrams("effectuate")
    self.assertEqual(r, ['effectuate'])

    _, r = self.anagrams2.get_anagrams("effeminate")
    self.assertEqual(r, ['effeminate'])

    _, r = self.anagrams2.get_anagrams("efficacy")
    self.assertEqual(r, ['efficacy'])

    _, r = self.anagrams2.get_anagrams("efficiencies")
    self.assertEqual(r, ['efficiencies'])

    _, r = self.anagrams2.get_anagrams("efficiency")
    self.assertEqual(r, ['efficiency'])

    _, r = self.anagrams2.get_anagrams("efficient")
    self.assertEqual(r, ['efficient'])

    _, r = self.anagrams2.get_anagrams("efficiently")
    self.assertEqual(r, ['efficiently'])

    _, r = self.anagrams2.get_anagrams("effie")
    self.assertEqual(r, ['effie'])

    _, r = self.anagrams2.get_anagrams("effigy")
    self.assertEqual(r, ['effigy'])

    _, r = self.anagrams2.get_anagrams("effort")
    self.assertEqual(r, ['effort'])

    _, r = self.anagrams2.get_anagrams("effortless")
    self.assertEqual(r, ['effortless'])

    _, r = self.anagrams2.get_anagrams("effortlessly")
    self.assertEqual(r, ['effortlessly'])

    _, r = self.anagrams2.get_anagrams("effortlessness")
    self.assertEqual(r, ['effortlessness'])

    _, r = self.anagrams2.get_anagrams("efforts")
    self.assertEqual(r, ['efforts'])

    _, r = self.anagrams2.get_anagrams("egalitarian")
    self.assertEqual(r, ['egalitarian'])

    _, r = self.anagrams2.get_anagrams("egan")
    self.assertEqual(r, ['egan'])

    _, r = self.anagrams2.get_anagrams("egg")
    self.assertEqual(r, ['egg'])

    _, r = self.anagrams2.get_anagrams("egged")
    self.assertEqual(r, ['egged'])

    _, r = self.anagrams2.get_anagrams("egghead")
    self.assertEqual(r, ['egghead'])

    _, r = self.anagrams2.get_anagrams("egging")
    self.assertEqual(r, ['egging'])

    _, r = self.anagrams2.get_anagrams("eggplant")
    self.assertEqual(r, ['eggplant'])

    _, r = self.anagrams2.get_anagrams("eggs")
    self.assertEqual(r, ['eggs'])

    _, r = self.anagrams2.get_anagrams("eggshell")
    self.assertEqual(r, ['eggshell'])

    _, r = self.anagrams2.get_anagrams("ego")
    self.assertEqual(r, ['ego'])

    _, r = self.anagrams2.get_anagrams("egocentric")
    self.assertEqual(r, ['egocentric', 'geocentric'])

    _, r = self.anagrams2.get_anagrams("egos")
    self.assertEqual(r, ['egos', 'goes'])

    _, r = self.anagrams2.get_anagrams("egotism")
    self.assertEqual(r, ['egotism'])

    _, r = self.anagrams2.get_anagrams("egotist")
    self.assertEqual(r, ['egotist'])

    _, r = self.anagrams2.get_anagrams("egypt")
    self.assertEqual(r, ['egypt'])

    _, r = self.anagrams2.get_anagrams("egyptian")
    self.assertEqual(r, ['egyptian'])

    _, r = self.anagrams2.get_anagrams("egyptianization")
    self.assertEqual(r, ['egyptianization'])

    _, r = self.anagrams2.get_anagrams("egyptianizations")
    self.assertEqual(r, ['egyptianizations'])

    _, r = self.anagrams2.get_anagrams("egyptianize")
    self.assertEqual(r, ['egyptianize'])

    _, r = self.anagrams2.get_anagrams("egyptianizes")
    self.assertEqual(r, ['egyptianizes'])

    _, r = self.anagrams2.get_anagrams("egyptians")
    self.assertEqual(r, ['egyptians'])

    _, r = self.anagrams2.get_anagrams("egyptize")
    self.assertEqual(r, ['egyptize'])

    _, r = self.anagrams2.get_anagrams("egyptizes")
    self.assertEqual(r, ['egyptizes'])

    _, r = self.anagrams2.get_anagrams("egyptology")
    self.assertEqual(r, ['egyptology'])

    _, r = self.anagrams2.get_anagrams("ehrlich")
    self.assertEqual(r, ['ehrlich'])

    _, r = self.anagrams2.get_anagrams("eichmann")
    self.assertEqual(r, ['chinamen', 'eichmann'])

    _, r = self.anagrams2.get_anagrams("eiffel")
    self.assertEqual(r, ['eiffel'])

    _, r = self.anagrams2.get_anagrams("eigenfunction")
    self.assertEqual(r, ['eigenfunction'])

    _, r = self.anagrams2.get_anagrams("eigenstate")
    self.assertEqual(r, ['eigenstate'])

    _, r = self.anagrams2.get_anagrams("eigenvalue")
    self.assertEqual(r, ['eigenvalue'])

    _, r = self.anagrams2.get_anagrams("eigenvalues")
    self.assertEqual(r, ['eigenvalues'])

    _, r = self.anagrams2.get_anagrams("eigenvector")
    self.assertEqual(r, ['eigenvector'])

    _, r = self.anagrams2.get_anagrams("eight")
    self.assertEqual(r, ['eight'])

    _, r = self.anagrams2.get_anagrams("eighteen")
    self.assertEqual(r, ['eighteen'])

    _, r = self.anagrams2.get_anagrams("eighteens")
    self.assertEqual(r, ['eighteens'])

    _, r = self.anagrams2.get_anagrams("eighteenth")
    self.assertEqual(r, ['eighteenth'])

    _, r = self.anagrams2.get_anagrams("eightfold")
    self.assertEqual(r, ['eightfold'])

    _, r = self.anagrams2.get_anagrams("eighth")
    self.assertEqual(r, ['eighth', 'height'])

    _, r = self.anagrams2.get_anagrams("eighthes")
    self.assertEqual(r, ['eighthes'])

    _, r = self.anagrams2.get_anagrams("eighties")
    self.assertEqual(r, ['eighties'])

    _, r = self.anagrams2.get_anagrams("eightieth")
    self.assertEqual(r, ['eightieth'])

    _, r = self.anagrams2.get_anagrams("eights")
    self.assertEqual(r, ['eights'])

    _, r = self.anagrams2.get_anagrams("eighty")
    self.assertEqual(r, ['eighty'])

    _, r = self.anagrams2.get_anagrams("eileen")
    self.assertEqual(r, ['eileen'])

    _, r = self.anagrams2.get_anagrams("einstein")
    self.assertEqual(r, ['einstein', 'nineties'])

    _, r = self.anagrams2.get_anagrams("einsteinian")
    self.assertEqual(r, ['einsteinian'])

    _, r = self.anagrams2.get_anagrams("eire")
    self.assertEqual(r, ['eire', 'erie'])

    _, r = self.anagrams2.get_anagrams("eisenhower")
    self.assertEqual(r, ['eisenhower'])

    _, r = self.anagrams2.get_anagrams("eisner")
    self.assertEqual(r, ['eisner'])

    _, r = self.anagrams2.get_anagrams("either")
    self.assertEqual(r, ['either'])

    _, r = self.anagrams2.get_anagrams("ejaculate")
    self.assertEqual(r, ['ejaculate'])

    _, r = self.anagrams2.get_anagrams("ejaculated")
    self.assertEqual(r, ['ejaculated'])

    _, r = self.anagrams2.get_anagrams("ejaculates")
    self.assertEqual(r, ['ejaculates'])

    _, r = self.anagrams2.get_anagrams("ejaculating")
    self.assertEqual(r, ['ejaculating'])

    _, r = self.anagrams2.get_anagrams("ejaculation")
    self.assertEqual(r, ['ejaculation'])

    _, r = self.anagrams2.get_anagrams("ejaculations")
    self.assertEqual(r, ['ejaculations'])

    _, r = self.anagrams2.get_anagrams("eject")
    self.assertEqual(r, ['eject'])

    _, r = self.anagrams2.get_anagrams("ejected")
    self.assertEqual(r, ['ejected'])

    _, r = self.anagrams2.get_anagrams("ejecting")
    self.assertEqual(r, ['ejecting'])

    _, r = self.anagrams2.get_anagrams("ejects")
    self.assertEqual(r, ['ejects'])

    _, r = self.anagrams2.get_anagrams("ekberg")
    self.assertEqual(r, ['ekberg'])

    _, r = self.anagrams2.get_anagrams("eke")
    self.assertEqual(r, ['eke'])

    _, r = self.anagrams2.get_anagrams("eked")
    self.assertEqual(r, ['eked'])

    _, r = self.anagrams2.get_anagrams("ekes")
    self.assertEqual(r, ['ekes', 'seek'])

    _, r = self.anagrams2.get_anagrams("ekstrom")
    self.assertEqual(r, ['ekstrom'])

    _, r = self.anagrams2.get_anagrams("ektachrome")
    self.assertEqual(r, ['ektachrome'])

    _, r = self.anagrams2.get_anagrams("elaborate")
    self.assertEqual(r, ['elaborate'])

    _, r = self.anagrams2.get_anagrams("elaborated")
    self.assertEqual(r, ['elaborated'])

    _, r = self.anagrams2.get_anagrams("elaborately")
    self.assertEqual(r, ['elaborately'])

    _, r = self.anagrams2.get_anagrams("elaborateness")
    self.assertEqual(r, ['elaborateness'])

    _, r = self.anagrams2.get_anagrams("elaborates")
    self.assertEqual(r, ['elaborates'])

    _, r = self.anagrams2.get_anagrams("elaborating")
    self.assertEqual(r, ['elaborating'])

    _, r = self.anagrams2.get_anagrams("elaboration")
    self.assertEqual(r, ['elaboration'])

    _, r = self.anagrams2.get_anagrams("elaborations")
    self.assertEqual(r, ['elaborations'])

    _, r = self.anagrams2.get_anagrams("elaborators")
    self.assertEqual(r, ['elaborators'])

    _, r = self.anagrams2.get_anagrams("elaine")
    self.assertEqual(r, ['aileen', 'elaine'])

    _, r = self.anagrams2.get_anagrams("elapse")
    self.assertEqual(r, ['asleep', 'elapse', 'please'])

    _, r = self.anagrams2.get_anagrams("elapsed")
    self.assertEqual(r, ['elapsed', 'pleased'])

    _, r = self.anagrams2.get_anagrams("elapses")
    self.assertEqual(r, ['elapses', 'pleases'])

    _, r = self.anagrams2.get_anagrams("elapsing")
    self.assertEqual(r, ['elapsing', 'pleasing'])

    _, r = self.anagrams2.get_anagrams("elastic")
    self.assertEqual(r, ['elastic'])

    _, r = self.anagrams2.get_anagrams("elastically")
    self.assertEqual(r, ['elastically'])

    _, r = self.anagrams2.get_anagrams("elasticity")
    self.assertEqual(r, ['elasticity'])

    _, r = self.anagrams2.get_anagrams("elba")
    self.assertEqual(r, ['abel', 'able', 'bale', 'bela', 'elba'])

    _, r = self.anagrams2.get_anagrams("elbow")
    self.assertEqual(r, ['below', 'bowel', 'elbow'])

    _, r = self.anagrams2.get_anagrams("elbowing")
    self.assertEqual(r, ['elbowing'])

    _, r = self.anagrams2.get_anagrams("elbows")
    self.assertEqual(r, ['bowels', 'elbows'])

    _, r = self.anagrams2.get_anagrams("elder")
    self.assertEqual(r, ['elder'])

    _, r = self.anagrams2.get_anagrams("elderly")
    self.assertEqual(r, ['elderly'])

    _, r = self.anagrams2.get_anagrams("elders")
    self.assertEqual(r, ['elders'])

    _, r = self.anagrams2.get_anagrams("eldest")
    self.assertEqual(r, ['eldest'])

    _, r = self.anagrams2.get_anagrams("eldon")
    self.assertEqual(r, ['eldon', 'olden'])

    _, r = self.anagrams2.get_anagrams("eleanor")
    self.assertEqual(r, ['eleanor'])

    _, r = self.anagrams2.get_anagrams("eleazar")
    self.assertEqual(r, ['eleazar'])

    _, r = self.anagrams2.get_anagrams("elect")
    self.assertEqual(r, ['elect'])

    _, r = self.anagrams2.get_anagrams("elected")
    self.assertEqual(r, ['elected'])

    _, r = self.anagrams2.get_anagrams("electing")
    self.assertEqual(r, ['electing'])

    _, r = self.anagrams2.get_anagrams("election")
    self.assertEqual(r, ['election'])

    _, r = self.anagrams2.get_anagrams("elections")
    self.assertEqual(r, ['elections', 'selection'])

    _, r = self.anagrams2.get_anagrams("elective")
    self.assertEqual(r, ['elective'])

    _, r = self.anagrams2.get_anagrams("electives")
    self.assertEqual(r, ['electives', 'selective'])

    _, r = self.anagrams2.get_anagrams("elector")
    self.assertEqual(r, ['elector', 'electro'])

    _, r = self.anagrams2.get_anagrams("electoral")
    self.assertEqual(r, ['electoral'])

    _, r = self.anagrams2.get_anagrams("electorate")
    self.assertEqual(r, ['electorate'])

    _, r = self.anagrams2.get_anagrams("electors")
    self.assertEqual(r, ['electors', 'selector'])

    _, r = self.anagrams2.get_anagrams("electra")
    self.assertEqual(r, ['electra'])

    _, r = self.anagrams2.get_anagrams("electric")
    self.assertEqual(r, ['electric'])

    _, r = self.anagrams2.get_anagrams("electrical")
    self.assertEqual(r, ['electrical'])

    _, r = self.anagrams2.get_anagrams("electrically")
    self.assertEqual(r, ['electrically'])

    _, r = self.anagrams2.get_anagrams("electricalness")
    self.assertEqual(r, ['electricalness'])

    _, r = self.anagrams2.get_anagrams("electrician")
    self.assertEqual(r, ['electrician'])

    _, r = self.anagrams2.get_anagrams("electricity")
    self.assertEqual(r, ['electricity'])

    _, r = self.anagrams2.get_anagrams("electrification")
    self.assertEqual(r, ['electrification'])

    _, r = self.anagrams2.get_anagrams("electrify")
    self.assertEqual(r, ['electrify'])

    _, r = self.anagrams2.get_anagrams("electrifying")
    self.assertEqual(r, ['electrifying'])

    _, r = self.anagrams2.get_anagrams("electro")
    self.assertEqual(r, ['elector', 'electro'])

    _, r = self.anagrams2.get_anagrams("electrocardiogram")
    self.assertEqual(r, ['electrocardiogram'])

    _, r = self.anagrams2.get_anagrams("electrocardiograph")
    self.assertEqual(r, ['electrocardiograph'])

    _, r = self.anagrams2.get_anagrams("electrocute")
    self.assertEqual(r, ['electrocute'])

    _, r = self.anagrams2.get_anagrams("electrocuted")
    self.assertEqual(r, ['electrocuted'])

    _, r = self.anagrams2.get_anagrams("electrocutes")
    self.assertEqual(r, ['electrocutes'])

    _, r = self.anagrams2.get_anagrams("electrocuting")
    self.assertEqual(r, ['electrocuting'])

    _, r = self.anagrams2.get_anagrams("electrocution")
    self.assertEqual(r, ['electrocution'])

    _, r = self.anagrams2.get_anagrams("electrocutions")
    self.assertEqual(r, ['electrocutions'])

    _, r = self.anagrams2.get_anagrams("electrode")
    self.assertEqual(r, ['electrode'])

    _, r = self.anagrams2.get_anagrams("electrodes")
    self.assertEqual(r, ['electrodes'])

    _, r = self.anagrams2.get_anagrams("electroencephalogram")
    self.assertEqual(r, ['electroencephalogram'])

    _, r = self.anagrams2.get_anagrams("electroencephalograph")
    self.assertEqual(r, ['electroencephalograph'])

    _, r = self.anagrams2.get_anagrams("electroencephalography")
    self.assertEqual(r, ['electroencephalography'])

    _, r = self.anagrams2.get_anagrams("electrolysis")
    self.assertEqual(r, ['electrolysis'])

    _, r = self.anagrams2.get_anagrams("electrolyte")
    self.assertEqual(r, ['electrolyte'])

    _, r = self.anagrams2.get_anagrams("electrolytes")
    self.assertEqual(r, ['electrolytes'])

    _, r = self.anagrams2.get_anagrams("electrolytic")
    self.assertEqual(r, ['electrolytic'])

    _, r = self.anagrams2.get_anagrams("electromagnetic")
    self.assertEqual(r, ['electromagnetic'])

    _, r = self.anagrams2.get_anagrams("electromechanical")
    self.assertEqual(r, ['electromechanical'])

    _, r = self.anagrams2.get_anagrams("electron")
    self.assertEqual(r, ['electron'])

    _, r = self.anagrams2.get_anagrams("electronic")
    self.assertEqual(r, ['electronic'])

    _, r = self.anagrams2.get_anagrams("electronically")
    self.assertEqual(r, ['electronically'])

    _, r = self.anagrams2.get_anagrams("electronics")
    self.assertEqual(r, ['electronics'])

    _, r = self.anagrams2.get_anagrams("electrons")
    self.assertEqual(r, ['electrons'])

    _, r = self.anagrams2.get_anagrams("electrophoresis")
    self.assertEqual(r, ['electrophoresis'])

    _, r = self.anagrams2.get_anagrams("electrophorus")
    self.assertEqual(r, ['electrophorus'])

    _, r = self.anagrams2.get_anagrams("elects")
    self.assertEqual(r, ['elects', 'select'])

    _, r = self.anagrams2.get_anagrams("elegance")
    self.assertEqual(r, ['elegance'])

    _, r = self.anagrams2.get_anagrams("elegant")
    self.assertEqual(r, ['elegant'])

    _, r = self.anagrams2.get_anagrams("elegantly")
    self.assertEqual(r, ['elegantly'])

    _, r = self.anagrams2.get_anagrams("elegy")
    self.assertEqual(r, ['elegy'])

    _, r = self.anagrams2.get_anagrams("element")
    self.assertEqual(r, ['element'])

    _, r = self.anagrams2.get_anagrams("elemental")
    self.assertEqual(r, ['elemental'])

    _, r = self.anagrams2.get_anagrams("elementals")
    self.assertEqual(r, ['elementals'])

    _, r = self.anagrams2.get_anagrams("elementary")
    self.assertEqual(r, ['elementary'])

    _, r = self.anagrams2.get_anagrams("elements")
    self.assertEqual(r, ['elements'])

    _, r = self.anagrams2.get_anagrams("elena")
    self.assertEqual(r, ['elena'])

    _, r = self.anagrams2.get_anagrams("elephant")
    self.assertEqual(r, ['elephant'])

    _, r = self.anagrams2.get_anagrams("elephants")
    self.assertEqual(r, ['elephants'])

    _, r = self.anagrams2.get_anagrams("elevate")
    self.assertEqual(r, ['elevate'])

    _, r = self.anagrams2.get_anagrams("elevated")
    self.assertEqual(r, ['elevated'])

    _, r = self.anagrams2.get_anagrams("elevates")
    self.assertEqual(r, ['elevates'])

    _, r = self.anagrams2.get_anagrams("elevation")
    self.assertEqual(r, ['elevation'])

    _, r = self.anagrams2.get_anagrams("elevator")
    self.assertEqual(r, ['elevator'])

    _, r = self.anagrams2.get_anagrams("elevators")
    self.assertEqual(r, ['elevators'])

    _, r = self.anagrams2.get_anagrams("eleven")
    self.assertEqual(r, ['eleven'])

    _, r = self.anagrams2.get_anagrams("elevens")
    self.assertEqual(r, ['elevens'])

    _, r = self.anagrams2.get_anagrams("eleventh")
    self.assertEqual(r, ['eleventh'])

    _, r = self.anagrams2.get_anagrams("elf")
    self.assertEqual(r, ['elf'])

    _, r = self.anagrams2.get_anagrams("elgin")
    self.assertEqual(r, ['elgin'])

    _, r = self.anagrams2.get_anagrams("eli")
    self.assertEqual(r, ['eli', 'lie'])

    _, r = self.anagrams2.get_anagrams("elicit")
    self.assertEqual(r, ['elicit'])

    _, r = self.anagrams2.get_anagrams("elicited")
    self.assertEqual(r, ['elicited'])

    _, r = self.anagrams2.get_anagrams("eliciting")
    self.assertEqual(r, ['eliciting'])

    _, r = self.anagrams2.get_anagrams("elicits")
    self.assertEqual(r, ['elicits'])

    _, r = self.anagrams2.get_anagrams("elide")
    self.assertEqual(r, ['elide'])

    _, r = self.anagrams2.get_anagrams("eligibility")
    self.assertEqual(r, ['eligibility'])

    _, r = self.anagrams2.get_anagrams("eligible")
    self.assertEqual(r, ['eligible'])

    _, r = self.anagrams2.get_anagrams("elijah")
    self.assertEqual(r, ['elijah'])

    _, r = self.anagrams2.get_anagrams("eliminate")
    self.assertEqual(r, ['eliminate'])

    _, r = self.anagrams2.get_anagrams("eliminated")
    self.assertEqual(r, ['eliminated'])

    _, r = self.anagrams2.get_anagrams("eliminates")
    self.assertEqual(r, ['eliminates'])

    _, r = self.anagrams2.get_anagrams("eliminating")
    self.assertEqual(r, ['eliminating'])

    _, r = self.anagrams2.get_anagrams("elimination")
    self.assertEqual(r, ['elimination'])

    _, r = self.anagrams2.get_anagrams("eliminations")
    self.assertEqual(r, ['eliminations'])

    _, r = self.anagrams2.get_anagrams("eliminator")
    self.assertEqual(r, ['eliminator'])

    _, r = self.anagrams2.get_anagrams("eliminators")
    self.assertEqual(r, ['eliminators'])

    _, r = self.anagrams2.get_anagrams("elinor")
    self.assertEqual(r, ['elinor'])

    _, r = self.anagrams2.get_anagrams("eliot")
    self.assertEqual(r, ['eliot'])

    _, r = self.anagrams2.get_anagrams("elisabeth")
    self.assertEqual(r, ['elisabeth'])

    _, r = self.anagrams2.get_anagrams("elisha")
    self.assertEqual(r, ['elisha', 'sheila'])

    _, r = self.anagrams2.get_anagrams("elision")
    self.assertEqual(r, ['elision'])

    _, r = self.anagrams2.get_anagrams("elite")
    self.assertEqual(r, ['elite'])

    _, r = self.anagrams2.get_anagrams("elitist")
    self.assertEqual(r, ['elitist'])

    _, r = self.anagrams2.get_anagrams("elizabeth")
    self.assertEqual(r, ['elizabeth'])

    _, r = self.anagrams2.get_anagrams("elizabethan")
    self.assertEqual(r, ['elizabethan'])

    _, r = self.anagrams2.get_anagrams("elizabethanize")
    self.assertEqual(r, ['elizabethanize'])

    _, r = self.anagrams2.get_anagrams("elizabethanizes")
    self.assertEqual(r, ['elizabethanizes'])

    _, r = self.anagrams2.get_anagrams("elizabethans")
    self.assertEqual(r, ['elizabethans'])

    _, r = self.anagrams2.get_anagrams("elk")
    self.assertEqual(r, ['elk'])

    _, r = self.anagrams2.get_anagrams("elkhart")
    self.assertEqual(r, ['elkhart'])

    _, r = self.anagrams2.get_anagrams("elks")
    self.assertEqual(r, ['elks'])

    _, r = self.anagrams2.get_anagrams("ella")
    self.assertEqual(r, ['ella'])

    _, r = self.anagrams2.get_anagrams("ellen")
    self.assertEqual(r, ['ellen'])

    _, r = self.anagrams2.get_anagrams("ellie")
    self.assertEqual(r, ['ellie'])

    _, r = self.anagrams2.get_anagrams("elliot")
    self.assertEqual(r, ['elliot'])

    _, r = self.anagrams2.get_anagrams("elliott")
    self.assertEqual(r, ['elliott'])

    _, r = self.anagrams2.get_anagrams("ellipse")
    self.assertEqual(r, ['ellipse'])

    _, r = self.anagrams2.get_anagrams("ellipses")
    self.assertEqual(r, ['ellipses'])

    _, r = self.anagrams2.get_anagrams("ellipsis")
    self.assertEqual(r, ['ellipsis'])

    _, r = self.anagrams2.get_anagrams("ellipsoid")
    self.assertEqual(r, ['ellipsoid'])

    _, r = self.anagrams2.get_anagrams("ellipsoidal")
    self.assertEqual(r, ['ellipsoidal'])

    _, r = self.anagrams2.get_anagrams("ellipsoids")
    self.assertEqual(r, ['ellipsoids'])

    _, r = self.anagrams2.get_anagrams("elliptic")
    self.assertEqual(r, ['elliptic'])

    _, r = self.anagrams2.get_anagrams("elliptical")
    self.assertEqual(r, ['elliptical'])

    _, r = self.anagrams2.get_anagrams("elliptically")
    self.assertEqual(r, ['elliptically'])

    _, r = self.anagrams2.get_anagrams("ellis")
    self.assertEqual(r, ['ellis'])

    _, r = self.anagrams2.get_anagrams("ellison")
    self.assertEqual(r, ['ellison'])

    _, r = self.anagrams2.get_anagrams("ellsworth")
    self.assertEqual(r, ['ellsworth'])

    _, r = self.anagrams2.get_anagrams("ellwood")
    self.assertEqual(r, ['ellwood'])

    _, r = self.anagrams2.get_anagrams("elm")
    self.assertEqual(r, ['elm', 'mel'])

    _, r = self.anagrams2.get_anagrams("elmer")
    self.assertEqual(r, ['elmer', 'merle'])

    _, r = self.anagrams2.get_anagrams("elmhurst")
    self.assertEqual(r, ['elmhurst'])

    _, r = self.anagrams2.get_anagrams("elmira")
    self.assertEqual(r, ['elmira', 'mailer'])

    _, r = self.anagrams2.get_anagrams("elms")
    self.assertEqual(r, ['elms'])

    _, r = self.anagrams2.get_anagrams("elmsford")
    self.assertEqual(r, ['elmsford'])

    _, r = self.anagrams2.get_anagrams("eloise")
    self.assertEqual(r, ['eloise'])

    _, r = self.anagrams2.get_anagrams("elope")
    self.assertEqual(r, ['elope'])

    _, r = self.anagrams2.get_anagrams("eloquence")
    self.assertEqual(r, ['eloquence'])

    _, r = self.anagrams2.get_anagrams("eloquent")
    self.assertEqual(r, ['eloquent'])

    _, r = self.anagrams2.get_anagrams("eloquently")
    self.assertEqual(r, ['eloquently'])

    _, r = self.anagrams2.get_anagrams("elroy")
    self.assertEqual(r, ['elroy', 'leroy'])

    _, r = self.anagrams2.get_anagrams("else")
    self.assertEqual(r, ['eels', 'else', 'lees'])

    _, r = self.anagrams2.get_anagrams("elsevier")
    self.assertEqual(r, ['elsevier', 'relieves'])

    _, r = self.anagrams2.get_anagrams("elsewhere")
    self.assertEqual(r, ['elsewhere'])

    _, r = self.anagrams2.get_anagrams("elsie")
    self.assertEqual(r, ['elsie'])

    _, r = self.anagrams2.get_anagrams("elsinore")
    self.assertEqual(r, ['elsinore'])

    _, r = self.anagrams2.get_anagrams("elton")
    self.assertEqual(r, ['elton'])

    _, r = self.anagrams2.get_anagrams("elucidate")
    self.assertEqual(r, ['elucidate'])

    _, r = self.anagrams2.get_anagrams("elucidated")
    self.assertEqual(r, ['elucidated'])

    _, r = self.anagrams2.get_anagrams("elucidates")
    self.assertEqual(r, ['elucidates'])

    _, r = self.anagrams2.get_anagrams("elucidating")
    self.assertEqual(r, ['elucidating'])

    _, r = self.anagrams2.get_anagrams("elucidation")
    self.assertEqual(r, ['elucidation'])

    _, r = self.anagrams2.get_anagrams("elude")
    self.assertEqual(r, ['elude'])

    _, r = self.anagrams2.get_anagrams("eluded")
    self.assertEqual(r, ['delude', 'eluded'])

    _, r = self.anagrams2.get_anagrams("eludes")
    self.assertEqual(r, ['eludes'])

    _, r = self.anagrams2.get_anagrams("eluding")
    self.assertEqual(r, ['dueling', 'eluding', 'indulge'])

    _, r = self.anagrams2.get_anagrams("elusive")
    self.assertEqual(r, ['elusive'])

    _, r = self.anagrams2.get_anagrams("elusively")
    self.assertEqual(r, ['elusively'])

    _, r = self.anagrams2.get_anagrams("elusiveness")
    self.assertEqual(r, ['elusiveness'])

    _, r = self.anagrams2.get_anagrams("elves")
    self.assertEqual(r, ['elves'])

    _, r = self.anagrams2.get_anagrams("elvis")
    self.assertEqual(r, ['elvis', 'evils', 'levis', 'lives', 'veils'])

    _, r = self.anagrams2.get_anagrams("ely")
    self.assertEqual(r, ['ely'])

    _, r = self.anagrams2.get_anagrams("elysee")
    self.assertEqual(r, ['elysee', 'seeley'])

    _, r = self.anagrams2.get_anagrams("elysees")
    self.assertEqual(r, ['elysees'])

    _, r = self.anagrams2.get_anagrams("elysium")
    self.assertEqual(r, ['elysium'])

    _, r = self.anagrams2.get_anagrams("em")
    self.assertEqual(r, ['em', 'me'])

    _, r = self.anagrams2.get_anagrams("emaciate")
    self.assertEqual(r, ['emaciate'])

    _, r = self.anagrams2.get_anagrams("emaciated")
    self.assertEqual(r, ['emaciated'])

    _, r = self.anagrams2.get_anagrams("emacs")
    self.assertEqual(r, ['emacs', 'maces'])

    _, r = self.anagrams2.get_anagrams("emanate")
    self.assertEqual(r, ['emanate'])

    _, r = self.anagrams2.get_anagrams("emanating")
    self.assertEqual(r, ['emanating'])

    _, r = self.anagrams2.get_anagrams("emancipate")
    self.assertEqual(r, ['emancipate'])

    _, r = self.anagrams2.get_anagrams("emancipation")
    self.assertEqual(r, ['emancipation'])

    _, r = self.anagrams2.get_anagrams("emanuel")
    self.assertEqual(r, ['emanuel'])

    _, r = self.anagrams2.get_anagrams("emasculate")
    self.assertEqual(r, ['emasculate'])

    _, r = self.anagrams2.get_anagrams("embalm")
    self.assertEqual(r, ['embalm'])

    _, r = self.anagrams2.get_anagrams("embargo")
    self.assertEqual(r, ['embargo'])

    _, r = self.anagrams2.get_anagrams("embargoes")
    self.assertEqual(r, ['embargoes'])

    _, r = self.anagrams2.get_anagrams("embark")
    self.assertEqual(r, ['embark'])

    _, r = self.anagrams2.get_anagrams("embarked")
    self.assertEqual(r, ['embarked'])

    _, r = self.anagrams2.get_anagrams("embarks")
    self.assertEqual(r, ['embarks'])

    _, r = self.anagrams2.get_anagrams("embarrass")
    self.assertEqual(r, ['embarrass'])

    _, r = self.anagrams2.get_anagrams("embarrassed")
    self.assertEqual(r, ['embarrassed'])

    _, r = self.anagrams2.get_anagrams("embarrasses")
    self.assertEqual(r, ['embarrasses'])

    _, r = self.anagrams2.get_anagrams("embarrassing")
    self.assertEqual(r, ['embarrassing'])

    _, r = self.anagrams2.get_anagrams("embarrassment")
    self.assertEqual(r, ['embarrassment'])

    _, r = self.anagrams2.get_anagrams("embassies")
    self.assertEqual(r, ['embassies'])

    _, r = self.anagrams2.get_anagrams("embassy")
    self.assertEqual(r, ['embassy'])

    _, r = self.anagrams2.get_anagrams("embed")
    self.assertEqual(r, ['embed'])

    _, r = self.anagrams2.get_anagrams("embedded")
    self.assertEqual(r, ['embedded'])

    _, r = self.anagrams2.get_anagrams("embedding")
    self.assertEqual(r, ['embedding'])

    _, r = self.anagrams2.get_anagrams("embeds")
    self.assertEqual(r, ['embeds'])

    _, r = self.anagrams2.get_anagrams("embellish")
    self.assertEqual(r, ['embellish'])

    _, r = self.anagrams2.get_anagrams("embellished")
    self.assertEqual(r, ['embellished'])

    _, r = self.anagrams2.get_anagrams("embellishes")
    self.assertEqual(r, ['embellishes'])

    _, r = self.anagrams2.get_anagrams("embellishing")
    self.assertEqual(r, ['embellishing'])

    _, r = self.anagrams2.get_anagrams("embellishment")
    self.assertEqual(r, ['embellishment'])

    _, r = self.anagrams2.get_anagrams("embellishments")
    self.assertEqual(r, ['embellishments'])

    _, r = self.anagrams2.get_anagrams("ember")
    self.assertEqual(r, ['ember'])

    _, r = self.anagrams2.get_anagrams("embezzle")
    self.assertEqual(r, ['embezzle'])

    _, r = self.anagrams2.get_anagrams("emblem")
    self.assertEqual(r, ['emblem'])

    _, r = self.anagrams2.get_anagrams("embodied")
    self.assertEqual(r, ['embodied'])

    _, r = self.anagrams2.get_anagrams("embodies")
    self.assertEqual(r, ['embodies'])

    _, r = self.anagrams2.get_anagrams("embodiment")
    self.assertEqual(r, ['embodiment'])

    _, r = self.anagrams2.get_anagrams("embodiments")
    self.assertEqual(r, ['embodiments'])

    _, r = self.anagrams2.get_anagrams("embody")
    self.assertEqual(r, ['embody'])

    _, r = self.anagrams2.get_anagrams("embodying")
    self.assertEqual(r, ['embodying'])

    _, r = self.anagrams2.get_anagrams("embolden")
    self.assertEqual(r, ['embolden'])

    _, r = self.anagrams2.get_anagrams("embrace")
    self.assertEqual(r, ['embrace'])

    _, r = self.anagrams2.get_anagrams("embraced")
    self.assertEqual(r, ['embraced'])

    _, r = self.anagrams2.get_anagrams("embraces")
    self.assertEqual(r, ['embraces'])

    _, r = self.anagrams2.get_anagrams("embracing")
    self.assertEqual(r, ['embracing'])

    _, r = self.anagrams2.get_anagrams("embroider")
    self.assertEqual(r, ['embroider'])

    _, r = self.anagrams2.get_anagrams("embroidered")
    self.assertEqual(r, ['embroidered'])

    _, r = self.anagrams2.get_anagrams("embroideries")
    self.assertEqual(r, ['embroideries'])

    _, r = self.anagrams2.get_anagrams("embroiders")
    self.assertEqual(r, ['embroiders'])

    _, r = self.anagrams2.get_anagrams("embroidery")
    self.assertEqual(r, ['embroidery'])

    _, r = self.anagrams2.get_anagrams("embroil")
    self.assertEqual(r, ['embroil'])

    _, r = self.anagrams2.get_anagrams("embryo")
    self.assertEqual(r, ['embryo'])

    _, r = self.anagrams2.get_anagrams("embryology")
    self.assertEqual(r, ['embryology'])

    _, r = self.anagrams2.get_anagrams("embryos")
    self.assertEqual(r, ['embryos', 'moresby'])

    _, r = self.anagrams2.get_anagrams("emerald")
    self.assertEqual(r, ['emerald'])

    _, r = self.anagrams2.get_anagrams("emeralds")
    self.assertEqual(r, ['emeralds'])

    _, r = self.anagrams2.get_anagrams("emerge")
    self.assertEqual(r, ['emerge'])

    _, r = self.anagrams2.get_anagrams("emerged")
    self.assertEqual(r, ['emerged'])

    _, r = self.anagrams2.get_anagrams("emergence")
    self.assertEqual(r, ['emergence'])

    _, r = self.anagrams2.get_anagrams("emergencies")
    self.assertEqual(r, ['emergencies'])

    _, r = self.anagrams2.get_anagrams("emergency")
    self.assertEqual(r, ['emergency'])

    _, r = self.anagrams2.get_anagrams("emergent")
    self.assertEqual(r, ['emergent'])

    _, r = self.anagrams2.get_anagrams("emerges")
    self.assertEqual(r, ['emerges'])

    _, r = self.anagrams2.get_anagrams("emerging")
    self.assertEqual(r, ['emerging'])

    _, r = self.anagrams2.get_anagrams("emeritus")
    self.assertEqual(r, ['emeritus'])

    _, r = self.anagrams2.get_anagrams("emerson")
    self.assertEqual(r, ['emerson'])

    _, r = self.anagrams2.get_anagrams("emery")
    self.assertEqual(r, ['emery', 'meyer'])

    _, r = self.anagrams2.get_anagrams("emigrant")
    self.assertEqual(r, ['emigrant'])

    _, r = self.anagrams2.get_anagrams("emigrants")
    self.assertEqual(r, ['emigrants', 'mastering', 'streaming'])

    _, r = self.anagrams2.get_anagrams("emigrate")
    self.assertEqual(r, ['emigrate'])

    _, r = self.anagrams2.get_anagrams("emigrated")
    self.assertEqual(r, ['emigrated'])

    _, r = self.anagrams2.get_anagrams("emigrates")
    self.assertEqual(r, ['emigrates'])

    _, r = self.anagrams2.get_anagrams("emigrating")
    self.assertEqual(r, ['emigrating'])

    _, r = self.anagrams2.get_anagrams("emigration")
    self.assertEqual(r, ['emigration'])

    _, r = self.anagrams2.get_anagrams("emil")
    self.assertEqual(r, ['emil', 'lime', 'mile'])

    _, r = self.anagrams2.get_anagrams("emile")
    self.assertEqual(r, ['emile'])

    _, r = self.anagrams2.get_anagrams("emilio")
    self.assertEqual(r, ['emilio'])

    _, r = self.anagrams2.get_anagrams("emily")
    self.assertEqual(r, ['emily'])

    _, r = self.anagrams2.get_anagrams("eminence")
    self.assertEqual(r, ['eminence'])

    _, r = self.anagrams2.get_anagrams("eminent")
    self.assertEqual(r, ['eminent'])

    _, r = self.anagrams2.get_anagrams("eminently")
    self.assertEqual(r, ['eminently'])

    _, r = self.anagrams2.get_anagrams("emissary")
    self.assertEqual(r, ['emissary'])

    _, r = self.anagrams2.get_anagrams("emission")
    self.assertEqual(r, ['emission'])

    _, r = self.anagrams2.get_anagrams("emit")
    self.assertEqual(r, ['emit', 'item', 'time'])

    _, r = self.anagrams2.get_anagrams("emits")
    self.assertEqual(r, ['emits', 'items', 'smite', 'times'])

    _, r = self.anagrams2.get_anagrams("emitted")
    self.assertEqual(r, ['emitted'])

    _, r = self.anagrams2.get_anagrams("emitter")
    self.assertEqual(r, ['emitter'])

    _, r = self.anagrams2.get_anagrams("emitting")
    self.assertEqual(r, ['emitting'])

    _, r = self.anagrams2.get_anagrams("emma")
    self.assertEqual(r, ['emma'])

    _, r = self.anagrams2.get_anagrams("emmanuel")
    self.assertEqual(r, ['emmanuel'])

    _, r = self.anagrams2.get_anagrams("emmett")
    self.assertEqual(r, ['emmett'])

    _, r = self.anagrams2.get_anagrams("emory")
    self.assertEqual(r, ['emory', 'moyer'])

    _, r = self.anagrams2.get_anagrams("emotion")
    self.assertEqual(r, ['emotion'])

    _, r = self.anagrams2.get_anagrams("emotional")
    self.assertEqual(r, ['emotional'])

    _, r = self.anagrams2.get_anagrams("emotionally")
    self.assertEqual(r, ['emotionally'])

    _, r = self.anagrams2.get_anagrams("emotions")
    self.assertEqual(r, ['emotions'])

    _, r = self.anagrams2.get_anagrams("empathy")
    self.assertEqual(r, ['empathy'])

    _, r = self.anagrams2.get_anagrams("emperor")
    self.assertEqual(r, ['emperor'])

    _, r = self.anagrams2.get_anagrams("emperors")
    self.assertEqual(r, ['emperors'])

    _, r = self.anagrams2.get_anagrams("emphases")
    self.assertEqual(r, ['emphases'])

    _, r = self.anagrams2.get_anagrams("emphasis")
    self.assertEqual(r, ['emphasis'])

    _, r = self.anagrams2.get_anagrams("emphasize")
    self.assertEqual(r, ['emphasize'])

    _, r = self.anagrams2.get_anagrams("emphasized")
    self.assertEqual(r, ['emphasized'])

    _, r = self.anagrams2.get_anagrams("emphasizes")
    self.assertEqual(r, ['emphasizes'])

    _, r = self.anagrams2.get_anagrams("emphasizing")
    self.assertEqual(r, ['emphasizing'])

    _, r = self.anagrams2.get_anagrams("emphatic")
    self.assertEqual(r, ['emphatic'])

    _, r = self.anagrams2.get_anagrams("emphatically")
    self.assertEqual(r, ['emphatically'])

    _, r = self.anagrams2.get_anagrams("empire")
    self.assertEqual(r, ['empire'])

    _, r = self.anagrams2.get_anagrams("empires")
    self.assertEqual(r, ['empires', 'premise'])

    _, r = self.anagrams2.get_anagrams("empirical")
    self.assertEqual(r, ['empirical'])

    _, r = self.anagrams2.get_anagrams("empirically")
    self.assertEqual(r, ['empirically'])

    _, r = self.anagrams2.get_anagrams("empiricist")
    self.assertEqual(r, ['empiricist'])

    _, r = self.anagrams2.get_anagrams("empiricists")
    self.assertEqual(r, ['empiricists'])

    _, r = self.anagrams2.get_anagrams("employ")
    self.assertEqual(r, ['employ'])

    _, r = self.anagrams2.get_anagrams("employable")
    self.assertEqual(r, ['employable'])

    _, r = self.anagrams2.get_anagrams("employed")
    self.assertEqual(r, ['employed'])

    _, r = self.anagrams2.get_anagrams("employee")
    self.assertEqual(r, ['employee'])

    _, r = self.anagrams2.get_anagrams("employees")
    self.assertEqual(r, ['employees'])

    _, r = self.anagrams2.get_anagrams("employer")
    self.assertEqual(r, ['employer'])

    _, r = self.anagrams2.get_anagrams("employers")
    self.assertEqual(r, ['employers'])

    _, r = self.anagrams2.get_anagrams("employing")
    self.assertEqual(r, ['employing'])

    _, r = self.anagrams2.get_anagrams("employment")
    self.assertEqual(r, ['employment'])

    _, r = self.anagrams2.get_anagrams("employments")
    self.assertEqual(r, ['employments'])

    _, r = self.anagrams2.get_anagrams("employs")
    self.assertEqual(r, ['employs'])

    _, r = self.anagrams2.get_anagrams("emporium")
    self.assertEqual(r, ['emporium'])

    _, r = self.anagrams2.get_anagrams("empower")
    self.assertEqual(r, ['empower'])

    _, r = self.anagrams2.get_anagrams("empowered")
    self.assertEqual(r, ['empowered'])

    _, r = self.anagrams2.get_anagrams("empowering")
    self.assertEqual(r, ['empowering'])

    _, r = self.anagrams2.get_anagrams("empowers")
    self.assertEqual(r, ['empowers'])

    _, r = self.anagrams2.get_anagrams("empress")
    self.assertEqual(r, ['empress'])

    _, r = self.anagrams2.get_anagrams("emptied")
    self.assertEqual(r, ['emptied'])

    _, r = self.anagrams2.get_anagrams("emptier")
    self.assertEqual(r, ['emptier'])

    _, r = self.anagrams2.get_anagrams("empties")
    self.assertEqual(r, ['empties'])

    _, r = self.anagrams2.get_anagrams("emptiest")
    self.assertEqual(r, ['emptiest'])

    _, r = self.anagrams2.get_anagrams("emptily")
    self.assertEqual(r, ['emptily'])

    _, r = self.anagrams2.get_anagrams("emptiness")
    self.assertEqual(r, ['emptiness'])

    _, r = self.anagrams2.get_anagrams("empty")
    self.assertEqual(r, ['empty'])

    _, r = self.anagrams2.get_anagrams("emptying")
    self.assertEqual(r, ['emptying'])

    _, r = self.anagrams2.get_anagrams("emulate")
    self.assertEqual(r, ['emulate'])

    _, r = self.anagrams2.get_anagrams("emulated")
    self.assertEqual(r, ['emulated'])

    _, r = self.anagrams2.get_anagrams("emulates")
    self.assertEqual(r, ['emulates'])

    _, r = self.anagrams2.get_anagrams("emulating")
    self.assertEqual(r, ['emulating'])

    _, r = self.anagrams2.get_anagrams("emulation")
    self.assertEqual(r, ['emulation'])

    _, r = self.anagrams2.get_anagrams("emulations")
    self.assertEqual(r, ['emulations'])

    _, r = self.anagrams2.get_anagrams("emulator")
    self.assertEqual(r, ['emulator'])

    _, r = self.anagrams2.get_anagrams("emulators")
    self.assertEqual(r, ['emulators'])

    _, r = self.anagrams2.get_anagrams("en")
    self.assertEqual(r, ['en'])

    _, r = self.anagrams2.get_anagrams("enable")
    self.assertEqual(r, ['enable'])

    _, r = self.anagrams2.get_anagrams("enabled")
    self.assertEqual(r, ['enabled'])

    _, r = self.anagrams2.get_anagrams("enabler")
    self.assertEqual(r, ['enabler'])

    _, r = self.anagrams2.get_anagrams("enablers")
    self.assertEqual(r, ['enablers'])

    _, r = self.anagrams2.get_anagrams("enables")
    self.assertEqual(r, ['enables'])

    _, r = self.anagrams2.get_anagrams("enabling")
    self.assertEqual(r, ['enabling'])

    _, r = self.anagrams2.get_anagrams("enact")
    self.assertEqual(r, ['enact'])

    _, r = self.anagrams2.get_anagrams("enacted")
    self.assertEqual(r, ['enacted'])

    _, r = self.anagrams2.get_anagrams("enacting")
    self.assertEqual(r, ['enacting'])

    _, r = self.anagrams2.get_anagrams("enactment")
    self.assertEqual(r, ['enactment'])

    _, r = self.anagrams2.get_anagrams("enacts")
    self.assertEqual(r, ['ascent', 'enacts', 'secant'])

    _, r = self.anagrams2.get_anagrams("enamel")
    self.assertEqual(r, ['enamel'])

    _, r = self.anagrams2.get_anagrams("enameled")
    self.assertEqual(r, ['enameled'])

    _, r = self.anagrams2.get_anagrams("enameling")
    self.assertEqual(r, ['enameling'])

    _, r = self.anagrams2.get_anagrams("enamels")
    self.assertEqual(r, ['enamels'])

    _, r = self.anagrams2.get_anagrams("encamp")
    self.assertEqual(r, ['encamp'])

    _, r = self.anagrams2.get_anagrams("encamped")
    self.assertEqual(r, ['encamped'])

    _, r = self.anagrams2.get_anagrams("encamping")
    self.assertEqual(r, ['encamping'])

    _, r = self.anagrams2.get_anagrams("encamps")
    self.assertEqual(r, ['encamps'])

    _, r = self.anagrams2.get_anagrams("encapsulate")
    self.assertEqual(r, ['encapsulate'])

    _, r = self.anagrams2.get_anagrams("encapsulated")
    self.assertEqual(r, ['encapsulated'])

    _, r = self.anagrams2.get_anagrams("encapsulates")
    self.assertEqual(r, ['encapsulates'])

    _, r = self.anagrams2.get_anagrams("encapsulating")
    self.assertEqual(r, ['encapsulating'])

    _, r = self.anagrams2.get_anagrams("encapsulation")
    self.assertEqual(r, ['encapsulation'])

    _, r = self.anagrams2.get_anagrams("encased")
    self.assertEqual(r, ['encased'])

    _, r = self.anagrams2.get_anagrams("enchant")
    self.assertEqual(r, ['enchant'])

    _, r = self.anagrams2.get_anagrams("enchanted")
    self.assertEqual(r, ['enchanted'])

    _, r = self.anagrams2.get_anagrams("enchanter")
    self.assertEqual(r, ['enchanter'])

    _, r = self.anagrams2.get_anagrams("enchanting")
    self.assertEqual(r, ['enchanting'])

    _, r = self.anagrams2.get_anagrams("enchantment")
    self.assertEqual(r, ['enchantment'])

    _, r = self.anagrams2.get_anagrams("enchantress")
    self.assertEqual(r, ['enchantress'])

    _, r = self.anagrams2.get_anagrams("enchants")
    self.assertEqual(r, ['enchants'])

    _, r = self.anagrams2.get_anagrams("encipher")
    self.assertEqual(r, ['encipher'])

    _, r = self.anagrams2.get_anagrams("enciphered")
    self.assertEqual(r, ['enciphered'])

    _, r = self.anagrams2.get_anagrams("enciphering")
    self.assertEqual(r, ['enciphering'])

    _, r = self.anagrams2.get_anagrams("enciphers")
    self.assertEqual(r, ['enciphers'])

    _, r = self.anagrams2.get_anagrams("encircle")
    self.assertEqual(r, ['encircle'])

    _, r = self.anagrams2.get_anagrams("encircled")
    self.assertEqual(r, ['encircled'])

    _, r = self.anagrams2.get_anagrams("encircles")
    self.assertEqual(r, ['encircles'])

    _, r = self.anagrams2.get_anagrams("enclose")
    self.assertEqual(r, ['enclose'])

    _, r = self.anagrams2.get_anagrams("enclosed")
    self.assertEqual(r, ['enclosed'])

    _, r = self.anagrams2.get_anagrams("encloses")
    self.assertEqual(r, ['encloses'])

    _, r = self.anagrams2.get_anagrams("enclosing")
    self.assertEqual(r, ['enclosing'])

    _, r = self.anagrams2.get_anagrams("enclosure")
    self.assertEqual(r, ['enclosure'])

    _, r = self.anagrams2.get_anagrams("enclosures")
    self.assertEqual(r, ['enclosures'])

    _, r = self.anagrams2.get_anagrams("encode")
    self.assertEqual(r, ['encode'])

    _, r = self.anagrams2.get_anagrams("encoded")
    self.assertEqual(r, ['encoded'])

    _, r = self.anagrams2.get_anagrams("encoder")
    self.assertEqual(r, ['encoder'])

    _, r = self.anagrams2.get_anagrams("encoders")
    self.assertEqual(r, ['censored', 'encoders', 'seconder'])

    _, r = self.anagrams2.get_anagrams("encodes")
    self.assertEqual(r, ['encodes'])

    _, r = self.anagrams2.get_anagrams("encoding")
    self.assertEqual(r, ['encoding'])

    _, r = self.anagrams2.get_anagrams("encodings")
    self.assertEqual(r, ['consigned', 'encodings', 'seconding'])

    _, r = self.anagrams2.get_anagrams("encompass")
    self.assertEqual(r, ['encompass'])

    _, r = self.anagrams2.get_anagrams("encompassed")
    self.assertEqual(r, ['encompassed'])

    _, r = self.anagrams2.get_anagrams("encompasses")
    self.assertEqual(r, ['encompasses'])

    _, r = self.anagrams2.get_anagrams("encompassing")
    self.assertEqual(r, ['encompassing'])

    _, r = self.anagrams2.get_anagrams("encore")
    self.assertEqual(r, ['encore'])

    _, r = self.anagrams2.get_anagrams("encounter")
    self.assertEqual(r, ['encounter'])

    _, r = self.anagrams2.get_anagrams("encountered")
    self.assertEqual(r, ['encountered'])

    _, r = self.anagrams2.get_anagrams("encountering")
    self.assertEqual(r, ['encountering'])

    _, r = self.anagrams2.get_anagrams("encounters")
    self.assertEqual(r, ['encounters'])

    _, r = self.anagrams2.get_anagrams("encourage")
    self.assertEqual(r, ['encourage'])

    _, r = self.anagrams2.get_anagrams("encouraged")
    self.assertEqual(r, ['encouraged'])

    _, r = self.anagrams2.get_anagrams("encouragement")
    self.assertEqual(r, ['encouragement'])

    _, r = self.anagrams2.get_anagrams("encouragements")
    self.assertEqual(r, ['encouragements'])

    _, r = self.anagrams2.get_anagrams("encourages")
    self.assertEqual(r, ['encourages'])

    _, r = self.anagrams2.get_anagrams("encouraging")
    self.assertEqual(r, ['encouraging'])

    _, r = self.anagrams2.get_anagrams("encouragingly")
    self.assertEqual(r, ['encouragingly'])

    _, r = self.anagrams2.get_anagrams("encroach")
    self.assertEqual(r, ['cochrane', 'encroach'])

    _, r = self.anagrams2.get_anagrams("encrust")
    self.assertEqual(r, ['encrust'])

    _, r = self.anagrams2.get_anagrams("encrypt")
    self.assertEqual(r, ['encrypt'])

    _, r = self.anagrams2.get_anagrams("encrypted")
    self.assertEqual(r, ['encrypted'])

    _, r = self.anagrams2.get_anagrams("encrypting")
    self.assertEqual(r, ['encrypting'])

    _, r = self.anagrams2.get_anagrams("encryption")
    self.assertEqual(r, ['encryption'])

    _, r = self.anagrams2.get_anagrams("encryptions")
    self.assertEqual(r, ['encryptions'])

    _, r = self.anagrams2.get_anagrams("encrypts")
    self.assertEqual(r, ['encrypts'])

    _, r = self.anagrams2.get_anagrams("encumber")
    self.assertEqual(r, ['encumber'])

    _, r = self.anagrams2.get_anagrams("encumbered")
    self.assertEqual(r, ['encumbered'])

    _, r = self.anagrams2.get_anagrams("encumbering")
    self.assertEqual(r, ['encumbering'])

    _, r = self.anagrams2.get_anagrams("encumbers")
    self.assertEqual(r, ['encumbers'])

    _, r = self.anagrams2.get_anagrams("encyclopedia")
    self.assertEqual(r, ['encyclopedia'])

    _, r = self.anagrams2.get_anagrams("encyclopedias")
    self.assertEqual(r, ['encyclopedias'])

    _, r = self.anagrams2.get_anagrams("encyclopedic")
    self.assertEqual(r, ['encyclopedic'])

    _, r = self.anagrams2.get_anagrams("end")
    self.assertEqual(r, ['den', 'end', 'ned'])

    _, r = self.anagrams2.get_anagrams("endanger")
    self.assertEqual(r, ['endanger'])

    _, r = self.anagrams2.get_anagrams("endangered")
    self.assertEqual(r, ['endangered'])

    _, r = self.anagrams2.get_anagrams("endangering")
    self.assertEqual(r, ['endangering'])

    _, r = self.anagrams2.get_anagrams("endangers")
    self.assertEqual(r, ['endangers'])

    _, r = self.anagrams2.get_anagrams("endear")
    self.assertEqual(r, ['earned', 'endear', 'neared'])

    _, r = self.anagrams2.get_anagrams("endeared")
    self.assertEqual(r, ['endeared'])

    _, r = self.anagrams2.get_anagrams("endearing")
    self.assertEqual(r, ['endearing'])

    _, r = self.anagrams2.get_anagrams("endears")
    self.assertEqual(r, ['endears'])

    _, r = self.anagrams2.get_anagrams("endeavor")
    self.assertEqual(r, ['endeavor'])

    _, r = self.anagrams2.get_anagrams("endeavored")
    self.assertEqual(r, ['endeavored'])

    _, r = self.anagrams2.get_anagrams("endeavoring")
    self.assertEqual(r, ['endeavoring'])

    _, r = self.anagrams2.get_anagrams("endeavors")
    self.assertEqual(r, ['endeavors'])

    _, r = self.anagrams2.get_anagrams("ended")
    self.assertEqual(r, ['ended'])

    _, r = self.anagrams2.get_anagrams("endemic")
    self.assertEqual(r, ['endemic'])

    _, r = self.anagrams2.get_anagrams("ender")
    self.assertEqual(r, ['ender'])

    _, r = self.anagrams2.get_anagrams("enders")
    self.assertEqual(r, ['denser', 'enders', 'sender'])

    _, r = self.anagrams2.get_anagrams("endgame")
    self.assertEqual(r, ['endgame'])

    _, r = self.anagrams2.get_anagrams("endicott")
    self.assertEqual(r, ['endicott'])

    _, r = self.anagrams2.get_anagrams("ending")
    self.assertEqual(r, ['ending'])

    _, r = self.anagrams2.get_anagrams("endings")
    self.assertEqual(r, ['endings', 'sending'])

    _, r = self.anagrams2.get_anagrams("endless")
    self.assertEqual(r, ['endless'])

    _, r = self.anagrams2.get_anagrams("endlessly")
    self.assertEqual(r, ['endlessly'])

    _, r = self.anagrams2.get_anagrams("endlessness")
    self.assertEqual(r, ['endlessness'])

    _, r = self.anagrams2.get_anagrams("endorse")
    self.assertEqual(r, ['endorse'])

    _, r = self.anagrams2.get_anagrams("endorsed")
    self.assertEqual(r, ['endorsed'])

    _, r = self.anagrams2.get_anagrams("endorsement")
    self.assertEqual(r, ['endorsement'])

    _, r = self.anagrams2.get_anagrams("endorses")
    self.assertEqual(r, ['endorses'])

    _, r = self.anagrams2.get_anagrams("endorsing")
    self.assertEqual(r, ['endorsing'])

    _, r = self.anagrams2.get_anagrams("endow")
    self.assertEqual(r, ['endow', 'owned'])

    _, r = self.anagrams2.get_anagrams("endowed")
    self.assertEqual(r, ['endowed'])

    _, r = self.anagrams2.get_anagrams("endowing")
    self.assertEqual(r, ['endowing'])

    _, r = self.anagrams2.get_anagrams("endowment")
    self.assertEqual(r, ['endowment'])

    _, r = self.anagrams2.get_anagrams("endowments")
    self.assertEqual(r, ['endowments'])

    _, r = self.anagrams2.get_anagrams("endows")
    self.assertEqual(r, ['endows', 'snowed'])

    _, r = self.anagrams2.get_anagrams("endpoint")
    self.assertEqual(r, ['endpoint'])

    _, r = self.anagrams2.get_anagrams("ends")
    self.assertEqual(r, ['dens', 'ends', 'send'])

    _, r = self.anagrams2.get_anagrams("endurable")
    self.assertEqual(r, ['endurable'])

    _, r = self.anagrams2.get_anagrams("endurably")
    self.assertEqual(r, ['endurably'])

    _, r = self.anagrams2.get_anagrams("endurance")
    self.assertEqual(r, ['endurance'])

    _, r = self.anagrams2.get_anagrams("endure")
    self.assertEqual(r, ['endure'])

    _, r = self.anagrams2.get_anagrams("endured")
    self.assertEqual(r, ['endured'])

    _, r = self.anagrams2.get_anagrams("endures")
    self.assertEqual(r, ['endures', 'ensured'])

    _, r = self.anagrams2.get_anagrams("enduring")
    self.assertEqual(r, ['enduring'])

    _, r = self.anagrams2.get_anagrams("enduringly")
    self.assertEqual(r, ['enduringly', 'underlying'])

    _, r = self.anagrams2.get_anagrams("enema")
    self.assertEqual(r, ['enema'])

    _, r = self.anagrams2.get_anagrams("enemas")
    self.assertEqual(r, ['enemas', 'seamen'])

    _, r = self.anagrams2.get_anagrams("enemies")
    self.assertEqual(r, ['enemies'])

    _, r = self.anagrams2.get_anagrams("enemy")
    self.assertEqual(r, ['enemy', 'yemen'])

    _, r = self.anagrams2.get_anagrams("energetic")
    self.assertEqual(r, ['energetic'])

    _, r = self.anagrams2.get_anagrams("energies")
    self.assertEqual(r, ['energies'])

    _, r = self.anagrams2.get_anagrams("energize")
    self.assertEqual(r, ['energize'])

    _, r = self.anagrams2.get_anagrams("energy")
    self.assertEqual(r, ['energy'])

    _, r = self.anagrams2.get_anagrams("enervate")
    self.assertEqual(r, ['enervate'])

    _, r = self.anagrams2.get_anagrams("enfeeble")
    self.assertEqual(r, ['enfeeble'])

    _, r = self.anagrams2.get_anagrams("enfield")
    self.assertEqual(r, ['enfield'])

    _, r = self.anagrams2.get_anagrams("enforce")
    self.assertEqual(r, ['enforce'])

    _, r = self.anagrams2.get_anagrams("enforceable")
    self.assertEqual(r, ['enforceable'])

    _, r = self.anagrams2.get_anagrams("enforced")
    self.assertEqual(r, ['enforced'])

    _, r = self.anagrams2.get_anagrams("enforcement")
    self.assertEqual(r, ['enforcement'])

    _, r = self.anagrams2.get_anagrams("enforcer")
    self.assertEqual(r, ['enforcer'])

    _, r = self.anagrams2.get_anagrams("enforcers")
    self.assertEqual(r, ['enforcers'])

    _, r = self.anagrams2.get_anagrams("enforces")
    self.assertEqual(r, ['enforces'])

    _, r = self.anagrams2.get_anagrams("enforcing")
    self.assertEqual(r, ['enforcing'])

    _, r = self.anagrams2.get_anagrams("enfranchise")
    self.assertEqual(r, ['enfranchise'])

    _, r = self.anagrams2.get_anagrams("eng")
    self.assertEqual(r, ['eng'])

    _, r = self.anagrams2.get_anagrams("engage")
    self.assertEqual(r, ['engage'])

    _, r = self.anagrams2.get_anagrams("engaged")
    self.assertEqual(r, ['engaged'])

    _, r = self.anagrams2.get_anagrams("engagement")
    self.assertEqual(r, ['engagement'])

    _, r = self.anagrams2.get_anagrams("engagements")
    self.assertEqual(r, ['engagements'])

    _, r = self.anagrams2.get_anagrams("engages")
    self.assertEqual(r, ['engages'])

    _, r = self.anagrams2.get_anagrams("engaging")
    self.assertEqual(r, ['engaging'])

    _, r = self.anagrams2.get_anagrams("engagingly")
    self.assertEqual(r, ['engagingly'])

    _, r = self.anagrams2.get_anagrams("engel")
    self.assertEqual(r, ['engel', 'engle'])

    _, r = self.anagrams2.get_anagrams("engels")
    self.assertEqual(r, ['engels'])

    _, r = self.anagrams2.get_anagrams("engender")
    self.assertEqual(r, ['engender'])

    _, r = self.anagrams2.get_anagrams("engendered")
    self.assertEqual(r, ['engendered'])

    _, r = self.anagrams2.get_anagrams("engendering")
    self.assertEqual(r, ['engendering'])

    _, r = self.anagrams2.get_anagrams("engenders")
    self.assertEqual(r, ['engenders'])

    _, r = self.anagrams2.get_anagrams("engine")
    self.assertEqual(r, ['engine'])

    _, r = self.anagrams2.get_anagrams("engineer")
    self.assertEqual(r, ['engineer'])

    _, r = self.anagrams2.get_anagrams("engineered")
    self.assertEqual(r, ['engineered'])

    _, r = self.anagrams2.get_anagrams("engineering")
    self.assertEqual(r, ['engineering'])

    _, r = self.anagrams2.get_anagrams("engineers")
    self.assertEqual(r, ['engineers'])

    _, r = self.anagrams2.get_anagrams("engines")
    self.assertEqual(r, ['engines'])

    _, r = self.anagrams2.get_anagrams("england")
    self.assertEqual(r, ['england'])

    _, r = self.anagrams2.get_anagrams("englander")
    self.assertEqual(r, ['englander', 'greenland'])

    _, r = self.anagrams2.get_anagrams("englanders")
    self.assertEqual(r, ['englanders'])

    _, r = self.anagrams2.get_anagrams("engle")
    self.assertEqual(r, ['engel', 'engle'])

    _, r = self.anagrams2.get_anagrams("englewood")
    self.assertEqual(r, ['englewood'])

    _, r = self.anagrams2.get_anagrams("english")
    self.assertEqual(r, ['english', 'shingle'])

    _, r = self.anagrams2.get_anagrams("englishize")
    self.assertEqual(r, ['englishize'])

    _, r = self.anagrams2.get_anagrams("englishizes")
    self.assertEqual(r, ['englishizes'])

    _, r = self.anagrams2.get_anagrams("englishman")
    self.assertEqual(r, ['englishman'])

    _, r = self.anagrams2.get_anagrams("englishmen")
    self.assertEqual(r, ['englishmen'])

    _, r = self.anagrams2.get_anagrams("engrave")
    self.assertEqual(r, ['avenger', 'engrave'])

    _, r = self.anagrams2.get_anagrams("engraved")
    self.assertEqual(r, ['engraved'])

    _, r = self.anagrams2.get_anagrams("engraver")
    self.assertEqual(r, ['engraver'])

    _, r = self.anagrams2.get_anagrams("engraves")
    self.assertEqual(r, ['engraves'])

    _, r = self.anagrams2.get_anagrams("engraving")
    self.assertEqual(r, ['engraving'])

    _, r = self.anagrams2.get_anagrams("engravings")
    self.assertEqual(r, ['engravings'])

    _, r = self.anagrams2.get_anagrams("engross")
    self.assertEqual(r, ['engross'])

    _, r = self.anagrams2.get_anagrams("engrossed")
    self.assertEqual(r, ['engrossed'])

    _, r = self.anagrams2.get_anagrams("engrossing")
    self.assertEqual(r, ['engrossing'])

    _, r = self.anagrams2.get_anagrams("engulf")
    self.assertEqual(r, ['engulf'])

    _, r = self.anagrams2.get_anagrams("enhance")
    self.assertEqual(r, ['enhance'])

    _, r = self.anagrams2.get_anagrams("enhanced")
    self.assertEqual(r, ['enhanced'])

    _, r = self.anagrams2.get_anagrams("enhancement")
    self.assertEqual(r, ['enhancement'])

    _, r = self.anagrams2.get_anagrams("enhancements")
    self.assertEqual(r, ['enhancements'])

    _, r = self.anagrams2.get_anagrams("enhances")
    self.assertEqual(r, ['enhances'])

    _, r = self.anagrams2.get_anagrams("enhancing")
    self.assertEqual(r, ['enhancing'])

    _, r = self.anagrams2.get_anagrams("enid")
    self.assertEqual(r, ['dine', 'enid'])

    _, r = self.anagrams2.get_anagrams("enigma")
    self.assertEqual(r, ['enigma', 'imagen'])

    _, r = self.anagrams2.get_anagrams("enigmatic")
    self.assertEqual(r, ['enigmatic'])

    _, r = self.anagrams2.get_anagrams("enjoin")
    self.assertEqual(r, ['enjoin'])

    _, r = self.anagrams2.get_anagrams("enjoined")
    self.assertEqual(r, ['enjoined'])

    _, r = self.anagrams2.get_anagrams("enjoining")
    self.assertEqual(r, ['enjoining'])

    _, r = self.anagrams2.get_anagrams("enjoins")
    self.assertEqual(r, ['enjoins'])

    _, r = self.anagrams2.get_anagrams("enjoy")
    self.assertEqual(r, ['enjoy'])

    _, r = self.anagrams2.get_anagrams("enjoyable")
    self.assertEqual(r, ['enjoyable'])

    _, r = self.anagrams2.get_anagrams("enjoyably")
    self.assertEqual(r, ['enjoyably'])

    _, r = self.anagrams2.get_anagrams("enjoyed")
    self.assertEqual(r, ['enjoyed'])

    _, r = self.anagrams2.get_anagrams("enjoying")
    self.assertEqual(r, ['enjoying'])

    _, r = self.anagrams2.get_anagrams("enjoyment")
    self.assertEqual(r, ['enjoyment'])

    _, r = self.anagrams2.get_anagrams("enjoys")
    self.assertEqual(r, ['enjoys'])

    _, r = self.anagrams2.get_anagrams("enlarge")
    self.assertEqual(r, ['enlarge', 'general', 'gleaner'])

    _, r = self.anagrams2.get_anagrams("enlarged")
    self.assertEqual(r, ['enlarged'])

    _, r = self.anagrams2.get_anagrams("enlargement")
    self.assertEqual(r, ['enlargement'])

    _, r = self.anagrams2.get_anagrams("enlargements")
    self.assertEqual(r, ['enlargements'])

    _, r = self.anagrams2.get_anagrams("enlarger")
    self.assertEqual(r, ['enlarger'])

    _, r = self.anagrams2.get_anagrams("enlargers")
    self.assertEqual(r, ['enlargers'])

    _, r = self.anagrams2.get_anagrams("enlarges")
    self.assertEqual(r, ['enlarges', 'generals'])

    _, r = self.anagrams2.get_anagrams("enlarging")
    self.assertEqual(r, ['enlarging'])

    _, r = self.anagrams2.get_anagrams("enlighten")
    self.assertEqual(r, ['enlighten'])

    _, r = self.anagrams2.get_anagrams("enlightened")
    self.assertEqual(r, ['enlightened'])

    _, r = self.anagrams2.get_anagrams("enlightening")
    self.assertEqual(r, ['enlightening'])

    _, r = self.anagrams2.get_anagrams("enlightenment")
    self.assertEqual(r, ['enlightenment'])

    _, r = self.anagrams2.get_anagrams("enlist")
    self.assertEqual(r, ['enlist', 'inlets', 'listen', 'silent'])

    _, r = self.anagrams2.get_anagrams("enlisted")
    self.assertEqual(r, ['enlisted', 'listened'])

    _, r = self.anagrams2.get_anagrams("enlistment")
    self.assertEqual(r, ['enlistment'])

    _, r = self.anagrams2.get_anagrams("enlists")
    self.assertEqual(r, ['enlists', 'listens'])

    _, r = self.anagrams2.get_anagrams("enliven")
    self.assertEqual(r, ['enliven'])

    _, r = self.anagrams2.get_anagrams("enlivened")
    self.assertEqual(r, ['enlivened'])

    _, r = self.anagrams2.get_anagrams("enlivening")
    self.assertEqual(r, ['enlivening'])

    _, r = self.anagrams2.get_anagrams("enlivens")
    self.assertEqual(r, ['enlivens'])

    _, r = self.anagrams2.get_anagrams("enmities")
    self.assertEqual(r, ['enmities'])

    _, r = self.anagrams2.get_anagrams("enmity")
    self.assertEqual(r, ['enmity'])

    _, r = self.anagrams2.get_anagrams("ennoble")
    self.assertEqual(r, ['ennoble'])

    _, r = self.anagrams2.get_anagrams("ennobled")
    self.assertEqual(r, ['ennobled'])

    _, r = self.anagrams2.get_anagrams("ennobles")
    self.assertEqual(r, ['ennobles'])

    _, r = self.anagrams2.get_anagrams("ennobling")
    self.assertEqual(r, ['ennobling'])

    _, r = self.anagrams2.get_anagrams("ennui")
    self.assertEqual(r, ['ennui'])

    _, r = self.anagrams2.get_anagrams("enoch")
    self.assertEqual(r, ['cohen', 'enoch'])

    _, r = self.anagrams2.get_anagrams("enormities")
    self.assertEqual(r, ['enormities'])

    _, r = self.anagrams2.get_anagrams("enormity")
    self.assertEqual(r, ['enormity'])

    _, r = self.anagrams2.get_anagrams("enormous")
    self.assertEqual(r, ['enormous'])

    _, r = self.anagrams2.get_anagrams("enormously")
    self.assertEqual(r, ['enormously'])

    _, r = self.anagrams2.get_anagrams("enos")
    self.assertEqual(r, ['enos', 'nose', 'ones'])

    _, r = self.anagrams2.get_anagrams("enough")
    self.assertEqual(r, ['enough'])

    _, r = self.anagrams2.get_anagrams("enqueue")
    self.assertEqual(r, ['enqueue'])

    _, r = self.anagrams2.get_anagrams("enqueued")
    self.assertEqual(r, ['enqueued'])

    _, r = self.anagrams2.get_anagrams("enqueues")
    self.assertEqual(r, ['enqueues'])

    _, r = self.anagrams2.get_anagrams("enquire")
    self.assertEqual(r, ['enquire'])

    _, r = self.anagrams2.get_anagrams("enquired")
    self.assertEqual(r, ['enquired'])

    _, r = self.anagrams2.get_anagrams("enquirer")
    self.assertEqual(r, ['enquirer'])

    _, r = self.anagrams2.get_anagrams("enquires")
    self.assertEqual(r, ['enquires'])

    _, r = self.anagrams2.get_anagrams("enquiry")
    self.assertEqual(r, ['enquiry'])

    _, r = self.anagrams2.get_anagrams("enrage")
    self.assertEqual(r, ['enrage'])

    _, r = self.anagrams2.get_anagrams("enraged")
    self.assertEqual(r, ['angered', 'enraged', 'grenade'])

    _, r = self.anagrams2.get_anagrams("enrages")
    self.assertEqual(r, ['enrages'])

    _, r = self.anagrams2.get_anagrams("enraging")
    self.assertEqual(r, ['angering', 'enraging'])

    _, r = self.anagrams2.get_anagrams("enrapture")
    self.assertEqual(r, ['enrapture'])

    _, r = self.anagrams2.get_anagrams("enrich")
    self.assertEqual(r, ['enrich'])

    _, r = self.anagrams2.get_anagrams("enriched")
    self.assertEqual(r, ['enriched'])

    _, r = self.anagrams2.get_anagrams("enriches")
    self.assertEqual(r, ['enriches'])

    _, r = self.anagrams2.get_anagrams("enriching")
    self.assertEqual(r, ['enriching'])

    _, r = self.anagrams2.get_anagrams("enrico")
    self.assertEqual(r, ['coiner', 'enrico'])

    _, r = self.anagrams2.get_anagrams("enroll")
    self.assertEqual(r, ['enroll'])

    _, r = self.anagrams2.get_anagrams("enrolled")
    self.assertEqual(r, ['enrolled'])

    _, r = self.anagrams2.get_anagrams("enrolling")
    self.assertEqual(r, ['enrolling'])

    _, r = self.anagrams2.get_anagrams("enrollment")
    self.assertEqual(r, ['enrollment'])

    _, r = self.anagrams2.get_anagrams("enrollments")
    self.assertEqual(r, ['enrollments'])

    _, r = self.anagrams2.get_anagrams("enrolls")
    self.assertEqual(r, ['enrolls'])

    _, r = self.anagrams2.get_anagrams("ensemble")
    self.assertEqual(r, ['ensemble'])

    _, r = self.anagrams2.get_anagrams("ensembles")
    self.assertEqual(r, ['ensembles'])

    _, r = self.anagrams2.get_anagrams("ensign")
    self.assertEqual(r, ['ensign'])

    _, r = self.anagrams2.get_anagrams("ensigns")
    self.assertEqual(r, ['ensigns', 'sensing'])

    _, r = self.anagrams2.get_anagrams("enslave")
    self.assertEqual(r, ['enslave'])

    _, r = self.anagrams2.get_anagrams("enslaved")
    self.assertEqual(r, ['enslaved'])

    _, r = self.anagrams2.get_anagrams("enslaves")
    self.assertEqual(r, ['enslaves'])

    _, r = self.anagrams2.get_anagrams("enslaving")
    self.assertEqual(r, ['enslaving'])

    _, r = self.anagrams2.get_anagrams("ensnare")
    self.assertEqual(r, ['ensnare'])

    _, r = self.anagrams2.get_anagrams("ensnared")
    self.assertEqual(r, ['andersen', 'ensnared'])

    _, r = self.anagrams2.get_anagrams("ensnares")
    self.assertEqual(r, ['ensnares', 'nearness'])

    _, r = self.anagrams2.get_anagrams("ensnaring")
    self.assertEqual(r, ['ensnaring'])

    _, r = self.anagrams2.get_anagrams("ensolite")
    self.assertEqual(r, ['ensolite'])

    _, r = self.anagrams2.get_anagrams("ensue")
    self.assertEqual(r, ['ensue'])

    _, r = self.anagrams2.get_anagrams("ensued")
    self.assertEqual(r, ['ensued'])

    _, r = self.anagrams2.get_anagrams("ensues")
    self.assertEqual(r, ['ensues'])

    _, r = self.anagrams2.get_anagrams("ensuing")
    self.assertEqual(r, ['ensuing'])

    _, r = self.anagrams2.get_anagrams("ensure")
    self.assertEqual(r, ['ensure'])

    _, r = self.anagrams2.get_anagrams("ensured")
    self.assertEqual(r, ['endures', 'ensured'])

    _, r = self.anagrams2.get_anagrams("ensurer")
    self.assertEqual(r, ['ensurer'])

    _, r = self.anagrams2.get_anagrams("ensurers")
    self.assertEqual(r, ['ensurers'])

    _, r = self.anagrams2.get_anagrams("ensures")
    self.assertEqual(r, ['ensures'])

    _, r = self.anagrams2.get_anagrams("ensuring")
    self.assertEqual(r, ['ensuring'])

    _, r = self.anagrams2.get_anagrams("entail")
    self.assertEqual(r, ['entail'])

    _, r = self.anagrams2.get_anagrams("entailed")
    self.assertEqual(r, ['dateline', 'entailed'])

    _, r = self.anagrams2.get_anagrams("entailing")
    self.assertEqual(r, ['entailing'])

    _, r = self.anagrams2.get_anagrams("entails")
    self.assertEqual(r, ['entails', 'salient'])

    _, r = self.anagrams2.get_anagrams("entangle")
    self.assertEqual(r, ['entangle'])

    _, r = self.anagrams2.get_anagrams("enter")
    self.assertEqual(r, ['enter'])

    _, r = self.anagrams2.get_anagrams("entered")
    self.assertEqual(r, ['entered'])

    _, r = self.anagrams2.get_anagrams("entering")
    self.assertEqual(r, ['entering'])

    _, r = self.anagrams2.get_anagrams("enterprise")
    self.assertEqual(r, ['enterprise'])

    _, r = self.anagrams2.get_anagrams("enterprises")
    self.assertEqual(r, ['enterprises', 'intersperse'])

    _, r = self.anagrams2.get_anagrams("enterprising")
    self.assertEqual(r, ['enterprising'])

    _, r = self.anagrams2.get_anagrams("enters")
    self.assertEqual(r, ['enters', 'ernest', 'nester', 'resent', 'tenser'])

    _, r = self.anagrams2.get_anagrams("entertain")
    self.assertEqual(r, ['entertain'])

    _, r = self.anagrams2.get_anagrams("entertained")
    self.assertEqual(r, ['entertained'])

    _, r = self.anagrams2.get_anagrams("entertainer")
    self.assertEqual(r, ['entertainer'])

    _, r = self.anagrams2.get_anagrams("entertainers")
    self.assertEqual(r, ['entertainers'])

    _, r = self.anagrams2.get_anagrams("entertaining")
    self.assertEqual(r, ['entertaining'])

    _, r = self.anagrams2.get_anagrams("entertainingly")
    self.assertEqual(r, ['entertainingly'])

    _, r = self.anagrams2.get_anagrams("entertainment")
    self.assertEqual(r, ['entertainment'])

    _, r = self.anagrams2.get_anagrams("entertainments")
    self.assertEqual(r, ['entertainments'])

    _, r = self.anagrams2.get_anagrams("entertains")
    self.assertEqual(r, ['entertains'])

    _, r = self.anagrams2.get_anagrams("enthusiasm")
    self.assertEqual(r, ['enthusiasm'])

    _, r = self.anagrams2.get_anagrams("enthusiasms")
    self.assertEqual(r, ['enthusiasms'])

    _, r = self.anagrams2.get_anagrams("enthusiast")
    self.assertEqual(r, ['enthusiast'])

    _, r = self.anagrams2.get_anagrams("enthusiastic")
    self.assertEqual(r, ['enthusiastic'])

    _, r = self.anagrams2.get_anagrams("enthusiastically")
    self.assertEqual(r, ['enthusiastically'])

    _, r = self.anagrams2.get_anagrams("enthusiasts")
    self.assertEqual(r, ['enthusiasts'])

    _, r = self.anagrams2.get_anagrams("entice")
    self.assertEqual(r, ['entice'])

    _, r = self.anagrams2.get_anagrams("enticed")
    self.assertEqual(r, ['enticed'])

    _, r = self.anagrams2.get_anagrams("enticer")
    self.assertEqual(r, ['enticer'])

    _, r = self.anagrams2.get_anagrams("enticers")
    self.assertEqual(r, ['enticers'])

    _, r = self.anagrams2.get_anagrams("entices")
    self.assertEqual(r, ['entices'])

    _, r = self.anagrams2.get_anagrams("enticing")
    self.assertEqual(r, ['enticing'])

    _, r = self.anagrams2.get_anagrams("entire")
    self.assertEqual(r, ['entire'])

    _, r = self.anagrams2.get_anagrams("entirely")
    self.assertEqual(r, ['entirely'])

    _, r = self.anagrams2.get_anagrams("entireties")
    self.assertEqual(r, ['entireties', 'eternities'])

    _, r = self.anagrams2.get_anagrams("entirety")
    self.assertEqual(r, ['entirety', 'eternity'])

    _, r = self.anagrams2.get_anagrams("entities")
    self.assertEqual(r, ['entities'])

    _, r = self.anagrams2.get_anagrams("entitle")
    self.assertEqual(r, ['entitle'])

    _, r = self.anagrams2.get_anagrams("entitled")
    self.assertEqual(r, ['entitled'])

    _, r = self.anagrams2.get_anagrams("entitles")
    self.assertEqual(r, ['entitles'])

    _, r = self.anagrams2.get_anagrams("entitling")
    self.assertEqual(r, ['entitling'])

    _, r = self.anagrams2.get_anagrams("entity")
    self.assertEqual(r, ['entity'])

    _, r = self.anagrams2.get_anagrams("entomb")
    self.assertEqual(r, ['entomb'])

    _, r = self.anagrams2.get_anagrams("entrance")
    self.assertEqual(r, ['entrance'])

    _, r = self.anagrams2.get_anagrams("entranced")
    self.assertEqual(r, ['entranced'])

    _, r = self.anagrams2.get_anagrams("entrances")
    self.assertEqual(r, ['entrances'])

    _, r = self.anagrams2.get_anagrams("entrap")
    self.assertEqual(r, ['entrap', 'parent'])

    _, r = self.anagrams2.get_anagrams("entreat")
    self.assertEqual(r, ['entreat'])

    _, r = self.anagrams2.get_anagrams("entreated")
    self.assertEqual(r, ['entreated'])

    _, r = self.anagrams2.get_anagrams("entreaty")
    self.assertEqual(r, ['entreaty'])

    _, r = self.anagrams2.get_anagrams("entree")
    self.assertEqual(r, ['entree'])

    _, r = self.anagrams2.get_anagrams("entrench")
    self.assertEqual(r, ['entrench'])

    _, r = self.anagrams2.get_anagrams("entrenched")
    self.assertEqual(r, ['entrenched'])

    _, r = self.anagrams2.get_anagrams("entrenches")
    self.assertEqual(r, ['entrenches'])

    _, r = self.anagrams2.get_anagrams("entrenching")
    self.assertEqual(r, ['entrenching'])

    _, r = self.anagrams2.get_anagrams("entrepreneur")
    self.assertEqual(r, ['entrepreneur'])

    _, r = self.anagrams2.get_anagrams("entrepreneurial")
    self.assertEqual(r, ['entrepreneurial'])

    _, r = self.anagrams2.get_anagrams("entrepreneurs")
    self.assertEqual(r, ['entrepreneurs'])

    _, r = self.anagrams2.get_anagrams("entries")
    self.assertEqual(r, ['entries', 'steiner'])

    _, r = self.anagrams2.get_anagrams("entropy")
    self.assertEqual(r, ['entropy'])

    _, r = self.anagrams2.get_anagrams("entrust")
    self.assertEqual(r, ['entrust'])

    _, r = self.anagrams2.get_anagrams("entrusted")
    self.assertEqual(r, ['entrusted'])

    _, r = self.anagrams2.get_anagrams("entrusting")
    self.assertEqual(r, ['entrusting'])

    _, r = self.anagrams2.get_anagrams("entrusts")
    self.assertEqual(r, ['entrusts'])

    _, r = self.anagrams2.get_anagrams("entry")
    self.assertEqual(r, ['entry'])

    _, r = self.anagrams2.get_anagrams("enumerable")
    self.assertEqual(r, ['enumerable'])

    _, r = self.anagrams2.get_anagrams("enumerate")
    self.assertEqual(r, ['enumerate'])

    _, r = self.anagrams2.get_anagrams("enumerated")
    self.assertEqual(r, ['enumerated'])

    _, r = self.anagrams2.get_anagrams("enumerates")
    self.assertEqual(r, ['enumerates'])

    _, r = self.anagrams2.get_anagrams("enumerating")
    self.assertEqual(r, ['enumerating'])

    _, r = self.anagrams2.get_anagrams("enumeration")
    self.assertEqual(r, ['enumeration', 'mountaineer'])

    _, r = self.anagrams2.get_anagrams("enumerative")
    self.assertEqual(r, ['enumerative'])

    _, r = self.anagrams2.get_anagrams("enumerator")
    self.assertEqual(r, ['enumerator'])

    _, r = self.anagrams2.get_anagrams("enumerators")
    self.assertEqual(r, ['enumerators'])

    _, r = self.anagrams2.get_anagrams("enunciation")
    self.assertEqual(r, ['enunciation'])

    _, r = self.anagrams2.get_anagrams("envelop")
    self.assertEqual(r, ['envelop'])

    _, r = self.anagrams2.get_anagrams("envelope")
    self.assertEqual(r, ['envelope'])

    _, r = self.anagrams2.get_anagrams("enveloped")
    self.assertEqual(r, ['enveloped'])

    _, r = self.anagrams2.get_anagrams("enveloper")
    self.assertEqual(r, ['enveloper'])

    _, r = self.anagrams2.get_anagrams("envelopes")
    self.assertEqual(r, ['envelopes'])

    _, r = self.anagrams2.get_anagrams("enveloping")
    self.assertEqual(r, ['enveloping'])

    _, r = self.anagrams2.get_anagrams("envelops")
    self.assertEqual(r, ['envelops'])

    _, r = self.anagrams2.get_anagrams("envied")
    self.assertEqual(r, ['envied', 'veined'])

    _, r = self.anagrams2.get_anagrams("envies")
    self.assertEqual(r, ['envies'])

    _, r = self.anagrams2.get_anagrams("envious")
    self.assertEqual(r, ['envious'])

    _, r = self.anagrams2.get_anagrams("enviously")
    self.assertEqual(r, ['enviously'])

    _, r = self.anagrams2.get_anagrams("enviousness")
    self.assertEqual(r, ['enviousness'])

    _, r = self.anagrams2.get_anagrams("environ")
    self.assertEqual(r, ['environ'])

    _, r = self.anagrams2.get_anagrams("environing")
    self.assertEqual(r, ['environing'])

    _, r = self.anagrams2.get_anagrams("environment")
    self.assertEqual(r, ['environment'])

    _, r = self.anagrams2.get_anagrams("environmental")
    self.assertEqual(r, ['environmental'])

    _, r = self.anagrams2.get_anagrams("environments")
    self.assertEqual(r, ['environments'])

    _, r = self.anagrams2.get_anagrams("environs")
    self.assertEqual(r, ['environs'])

    _, r = self.anagrams2.get_anagrams("envisage")
    self.assertEqual(r, ['envisage'])

    _, r = self.anagrams2.get_anagrams("envisaged")
    self.assertEqual(r, ['envisaged'])

    _, r = self.anagrams2.get_anagrams("envisages")
    self.assertEqual(r, ['envisages'])

    _, r = self.anagrams2.get_anagrams("envision")
    self.assertEqual(r, ['envision'])

    _, r = self.anagrams2.get_anagrams("envisioned")
    self.assertEqual(r, ['envisioned'])

    _, r = self.anagrams2.get_anagrams("envisioning")
    self.assertEqual(r, ['envisioning'])

    _, r = self.anagrams2.get_anagrams("envisions")
    self.assertEqual(r, ['envisions'])

    _, r = self.anagrams2.get_anagrams("envoy")
    self.assertEqual(r, ['envoy'])

    _, r = self.anagrams2.get_anagrams("envoys")
    self.assertEqual(r, ['envoys'])

    _, r = self.anagrams2.get_anagrams("envy")
    self.assertEqual(r, ['envy'])

    _, r = self.anagrams2.get_anagrams("enzyme")
    self.assertEqual(r, ['enzyme'])

    _, r = self.anagrams2.get_anagrams("eocene")
    self.assertEqual(r, ['eocene'])

    _, r = self.anagrams2.get_anagrams("epaulet")
    self.assertEqual(r, ['epaulet'])

    _, r = self.anagrams2.get_anagrams("epaulets")
    self.assertEqual(r, ['epaulets'])

    _, r = self.anagrams2.get_anagrams("ephemeral")
    self.assertEqual(r, ['ephemeral'])

    _, r = self.anagrams2.get_anagrams("ephesian")
    self.assertEqual(r, ['ephesian'])

    _, r = self.anagrams2.get_anagrams("ephesians")
    self.assertEqual(r, ['ephesians'])

    _, r = self.anagrams2.get_anagrams("ephesus")
    self.assertEqual(r, ['ephesus'])

    _, r = self.anagrams2.get_anagrams("ephraim")
    self.assertEqual(r, ['ephraim'])

    _, r = self.anagrams2.get_anagrams("epic")
    self.assertEqual(r, ['epic'])

    _, r = self.anagrams2.get_anagrams("epicenter")
    self.assertEqual(r, ['epicenter'])

    _, r = self.anagrams2.get_anagrams("epics")
    self.assertEqual(r, ['epics', 'spice'])

    _, r = self.anagrams2.get_anagrams("epicurean")
    self.assertEqual(r, ['epicurean'])

    _, r = self.anagrams2.get_anagrams("epicurize")
    self.assertEqual(r, ['epicurize'])

    _, r = self.anagrams2.get_anagrams("epicurizes")
    self.assertEqual(r, ['epicurizes'])

    _, r = self.anagrams2.get_anagrams("epicurus")
    self.assertEqual(r, ['epicurus'])

    _, r = self.anagrams2.get_anagrams("epidemic")
    self.assertEqual(r, ['epidemic'])

    _, r = self.anagrams2.get_anagrams("epidemics")
    self.assertEqual(r, ['epidemics'])

    _, r = self.anagrams2.get_anagrams("epidermis")
    self.assertEqual(r, ['epidermis'])

    _, r = self.anagrams2.get_anagrams("epigram")
    self.assertEqual(r, ['epigram'])

    _, r = self.anagrams2.get_anagrams("epileptic")
    self.assertEqual(r, ['epileptic'])

    _, r = self.anagrams2.get_anagrams("epilogue")
    self.assertEqual(r, ['epilogue'])

    _, r = self.anagrams2.get_anagrams("epiphany")
    self.assertEqual(r, ['epiphany'])

    _, r = self.anagrams2.get_anagrams("episcopal")
    self.assertEqual(r, ['episcopal'])

    _, r = self.anagrams2.get_anagrams("episcopalian")
    self.assertEqual(r, ['episcopalian'])

    _, r = self.anagrams2.get_anagrams("episcopalianize")
    self.assertEqual(r, ['episcopalianize'])

    _, r = self.anagrams2.get_anagrams("episcopalianizes")
    self.assertEqual(r, ['episcopalianizes'])

    _, r = self.anagrams2.get_anagrams("episode")
    self.assertEqual(r, ['episode'])

    _, r = self.anagrams2.get_anagrams("episodes")
    self.assertEqual(r, ['episodes'])

    _, r = self.anagrams2.get_anagrams("epistemological")
    self.assertEqual(r, ['epistemological'])

    _, r = self.anagrams2.get_anagrams("epistemology")
    self.assertEqual(r, ['epistemology'])

    _, r = self.anagrams2.get_anagrams("epistle")
    self.assertEqual(r, ['epistle'])

    _, r = self.anagrams2.get_anagrams("epistles")
    self.assertEqual(r, ['epistles'])

    _, r = self.anagrams2.get_anagrams("epitaph")
    self.assertEqual(r, ['epitaph'])

    _, r = self.anagrams2.get_anagrams("epitaphs")
    self.assertEqual(r, ['epitaphs', 'happiest'])

    _, r = self.anagrams2.get_anagrams("epitaxial")
    self.assertEqual(r, ['epitaxial'])

    _, r = self.anagrams2.get_anagrams("epitaxially")
    self.assertEqual(r, ['epitaxially'])

    _, r = self.anagrams2.get_anagrams("epithet")
    self.assertEqual(r, ['epithet'])

    _, r = self.anagrams2.get_anagrams("epithets")
    self.assertEqual(r, ['epithets'])

    _, r = self.anagrams2.get_anagrams("epitomize")
    self.assertEqual(r, ['epitomize'])

    _, r = self.anagrams2.get_anagrams("epitomized")
    self.assertEqual(r, ['epitomized'])

    _, r = self.anagrams2.get_anagrams("epitomizes")
    self.assertEqual(r, ['epitomizes'])

    _, r = self.anagrams2.get_anagrams("epitomizing")
    self.assertEqual(r, ['epitomizing'])

    _, r = self.anagrams2.get_anagrams("epoch")
    self.assertEqual(r, ['epoch'])

    _, r = self.anagrams2.get_anagrams("epochs")
    self.assertEqual(r, ['epochs'])

    _, r = self.anagrams2.get_anagrams("epsilon")
    self.assertEqual(r, ['epsilon'])

    _, r = self.anagrams2.get_anagrams("epsom")
    self.assertEqual(r, ['epsom', 'poems'])

    _, r = self.anagrams2.get_anagrams("epstein")
    self.assertEqual(r, ['epstein'])

    _, r = self.anagrams2.get_anagrams("equal")
    self.assertEqual(r, ['equal'])

    _, r = self.anagrams2.get_anagrams("equaled")
    self.assertEqual(r, ['equaled'])

    _, r = self.anagrams2.get_anagrams("equaling")
    self.assertEqual(r, ['equaling'])

    _, r = self.anagrams2.get_anagrams("equalities")
    self.assertEqual(r, ['equalities'])

    _, r = self.anagrams2.get_anagrams("equality")
    self.assertEqual(r, ['equality'])

    _, r = self.anagrams2.get_anagrams("equalization")
    self.assertEqual(r, ['equalization'])

    _, r = self.anagrams2.get_anagrams("equalize")
    self.assertEqual(r, ['equalize'])

    _, r = self.anagrams2.get_anagrams("equalized")
    self.assertEqual(r, ['equalized'])

    _, r = self.anagrams2.get_anagrams("equalizer")
    self.assertEqual(r, ['equalizer'])

    _, r = self.anagrams2.get_anagrams("equalizers")
    self.assertEqual(r, ['equalizers'])

    _, r = self.anagrams2.get_anagrams("equalizes")
    self.assertEqual(r, ['equalizes'])

    _, r = self.anagrams2.get_anagrams("equalizing")
    self.assertEqual(r, ['equalizing'])

    _, r = self.anagrams2.get_anagrams("equally")
    self.assertEqual(r, ['equally'])

    _, r = self.anagrams2.get_anagrams("equals")
    self.assertEqual(r, ['equals', 'squeal'])

    _, r = self.anagrams2.get_anagrams("equate")
    self.assertEqual(r, ['equate'])

    _, r = self.anagrams2.get_anagrams("equated")
    self.assertEqual(r, ['equated'])

    _, r = self.anagrams2.get_anagrams("equates")
    self.assertEqual(r, ['equates'])

    _, r = self.anagrams2.get_anagrams("equating")
    self.assertEqual(r, ['equating'])

    _, r = self.anagrams2.get_anagrams("equation")
    self.assertEqual(r, ['equation'])

    _, r = self.anagrams2.get_anagrams("equations")
    self.assertEqual(r, ['equations'])

    _, r = self.anagrams2.get_anagrams("equator")
    self.assertEqual(r, ['equator'])

    _, r = self.anagrams2.get_anagrams("equatorial")
    self.assertEqual(r, ['equatorial'])

    _, r = self.anagrams2.get_anagrams("equators")
    self.assertEqual(r, ['equators'])

    _, r = self.anagrams2.get_anagrams("equestrian")
    self.assertEqual(r, ['equestrian'])

    _, r = self.anagrams2.get_anagrams("equidistant")
    self.assertEqual(r, ['equidistant'])

    _, r = self.anagrams2.get_anagrams("equilateral")
    self.assertEqual(r, ['equilateral'])

    _, r = self.anagrams2.get_anagrams("equilibrate")
    self.assertEqual(r, ['equilibrate'])

    _, r = self.anagrams2.get_anagrams("equilibria")
    self.assertEqual(r, ['equilibria'])

    _, r = self.anagrams2.get_anagrams("equilibrium")
    self.assertEqual(r, ['equilibrium'])

    _, r = self.anagrams2.get_anagrams("equilibriums")
    self.assertEqual(r, ['equilibriums'])

    _, r = self.anagrams2.get_anagrams("equinox")
    self.assertEqual(r, ['equinox'])

    _, r = self.anagrams2.get_anagrams("equip")
    self.assertEqual(r, ['equip', 'pique'])

    _, r = self.anagrams2.get_anagrams("equipment")
    self.assertEqual(r, ['equipment'])

    _, r = self.anagrams2.get_anagrams("equipoise")
    self.assertEqual(r, ['equipoise'])

    _, r = self.anagrams2.get_anagrams("equipped")
    self.assertEqual(r, ['equipped'])

    _, r = self.anagrams2.get_anagrams("equipping")
    self.assertEqual(r, ['equipping'])

    _, r = self.anagrams2.get_anagrams("equips")
    self.assertEqual(r, ['equips'])

    _, r = self.anagrams2.get_anagrams("equitable")
    self.assertEqual(r, ['equitable'])

    _, r = self.anagrams2.get_anagrams("equitably")
    self.assertEqual(r, ['equitably'])

    _, r = self.anagrams2.get_anagrams("equity")
    self.assertEqual(r, ['equity'])

    _, r = self.anagrams2.get_anagrams("equivalence")
    self.assertEqual(r, ['equivalence'])

    _, r = self.anagrams2.get_anagrams("equivalences")
    self.assertEqual(r, ['equivalences'])

    _, r = self.anagrams2.get_anagrams("equivalent")
    self.assertEqual(r, ['equivalent'])

    _, r = self.anagrams2.get_anagrams("equivalently")
    self.assertEqual(r, ['equivalently'])

    _, r = self.anagrams2.get_anagrams("equivalents")
    self.assertEqual(r, ['equivalents'])

    _, r = self.anagrams2.get_anagrams("equivocal")
    self.assertEqual(r, ['equivocal'])

    _, r = self.anagrams2.get_anagrams("equivocally")
    self.assertEqual(r, ['equivocally'])

    _, r = self.anagrams2.get_anagrams("era")
    self.assertEqual(r, ['are', 'ear', 'era', 'rae'])

    _, r = self.anagrams2.get_anagrams("eradicate")
    self.assertEqual(r, ['eradicate'])

    _, r = self.anagrams2.get_anagrams("eradicated")
    self.assertEqual(r, ['eradicated'])

    _, r = self.anagrams2.get_anagrams("eradicates")
    self.assertEqual(r, ['eradicates'])

    _, r = self.anagrams2.get_anagrams("eradicating")
    self.assertEqual(r, ['eradicating'])

    _, r = self.anagrams2.get_anagrams("eradication")
    self.assertEqual(r, ['eradication'])

    _, r = self.anagrams2.get_anagrams("eras")
    self.assertEqual(r, ['ares', 'ears', 'eras', 'sear'])

    _, r = self.anagrams2.get_anagrams("erasable")
    self.assertEqual(r, ['erasable'])

    _, r = self.anagrams2.get_anagrams("erase")
    self.assertEqual(r, ['erase'])

    _, r = self.anagrams2.get_anagrams("erased")
    self.assertEqual(r, ['erased', 'seared'])

    _, r = self.anagrams2.get_anagrams("eraser")
    self.assertEqual(r, ['eraser'])

    _, r = self.anagrams2.get_anagrams("erasers")
    self.assertEqual(r, ['erasers'])

    _, r = self.anagrams2.get_anagrams("erases")
    self.assertEqual(r, ['erases'])

    _, r = self.anagrams2.get_anagrams("erasing")
    self.assertEqual(r, ['erasing', 'gainers', 'regains', 'searing'])

    _, r = self.anagrams2.get_anagrams("erasmus")
    self.assertEqual(r, ['amusers', 'erasmus'])

    _, r = self.anagrams2.get_anagrams("erastus")
    self.assertEqual(r, ['erastus'])

    _, r = self.anagrams2.get_anagrams("erasure")
    self.assertEqual(r, ['erasure'])

    _, r = self.anagrams2.get_anagrams("erato")
    self.assertEqual(r, ['erato'])

    _, r = self.anagrams2.get_anagrams("eratosthenes")
    self.assertEqual(r, ['eratosthenes'])

    _, r = self.anagrams2.get_anagrams("ere")
    self.assertEqual(r, ['ere'])

    _, r = self.anagrams2.get_anagrams("erect")
    self.assertEqual(r, ['crete', 'erect'])

    _, r = self.anagrams2.get_anagrams("erected")
    self.assertEqual(r, ['erected'])

    _, r = self.anagrams2.get_anagrams("erecting")
    self.assertEqual(r, ['erecting'])

    _, r = self.anagrams2.get_anagrams("erection")
    self.assertEqual(r, ['erection'])

    _, r = self.anagrams2.get_anagrams("erections")
    self.assertEqual(r, ['erections', 'secretion'])

    _, r = self.anagrams2.get_anagrams("erector")
    self.assertEqual(r, ['erector'])

    _, r = self.anagrams2.get_anagrams("erectors")
    self.assertEqual(r, ['erectors'])

    _, r = self.anagrams2.get_anagrams("erects")
    self.assertEqual(r, ['erects', 'secret'])

    _, r = self.anagrams2.get_anagrams("erg")
    self.assertEqual(r, ['erg'])

    _, r = self.anagrams2.get_anagrams("ergo")
    self.assertEqual(r, ['ergo', 'gore'])

    _, r = self.anagrams2.get_anagrams("ergodic")
    self.assertEqual(r, ['ergodic'])

    _, r = self.anagrams2.get_anagrams("eric")
    self.assertEqual(r, ['eric', 'rice'])

    _, r = self.anagrams2.get_anagrams("erich")
    self.assertEqual(r, ['erich', 'reich'])

    _, r = self.anagrams2.get_anagrams("erickson")
    self.assertEqual(r, ['erickson'])

    _, r = self.anagrams2.get_anagrams("ericsson")
    self.assertEqual(r, ['ericsson', 'necrosis'])

    _, r = self.anagrams2.get_anagrams("erie")
    self.assertEqual(r, ['eire', 'erie'])

    _, r = self.anagrams2.get_anagrams("erik")
    self.assertEqual(r, ['erik'])

    _, r = self.anagrams2.get_anagrams("erikson")
    self.assertEqual(r, ['erikson'])

    _, r = self.anagrams2.get_anagrams("eris")
    self.assertEqual(r, ['eris', 'ires', 'rise', 'sire'])

    _, r = self.anagrams2.get_anagrams("erlang")
    self.assertEqual(r, ['angler', 'erlang'])

    _, r = self.anagrams2.get_anagrams("erlenmeyer")
    self.assertEqual(r, ['erlenmeyer'])

    _, r = self.anagrams2.get_anagrams("erlenmeyers")
    self.assertEqual(r, ['erlenmeyers'])

    _, r = self.anagrams2.get_anagrams("ermine")
    self.assertEqual(r, ['ermine'])

    _, r = self.anagrams2.get_anagrams("ermines")
    self.assertEqual(r, ['ermines'])

    _, r = self.anagrams2.get_anagrams("erne")
    self.assertEqual(r, ['erne', 'rene'])

    _, r = self.anagrams2.get_anagrams("ernest")
    self.assertEqual(r, ['enters', 'ernest', 'nester', 'resent', 'tenser'])

    _, r = self.anagrams2.get_anagrams("ernestine")
    self.assertEqual(r, ['ernestine'])

    _, r = self.anagrams2.get_anagrams("ernie")
    self.assertEqual(r, ['ernie', 'irene'])

    _, r = self.anagrams2.get_anagrams("ernst")
    self.assertEqual(r, ['ernst', 'rents', 'stern'])

    _, r = self.anagrams2.get_anagrams("erode")
    self.assertEqual(r, ['erode'])

    _, r = self.anagrams2.get_anagrams("eros")
    self.assertEqual(r, ['eros', 'ores', 'rose', 'sore'])

    _, r = self.anagrams2.get_anagrams("erosion")
    self.assertEqual(r, ['erosion'])

    _, r = self.anagrams2.get_anagrams("erotic")
    self.assertEqual(r, ['erotic'])

    _, r = self.anagrams2.get_anagrams("erotica")
    self.assertEqual(r, ['erotica'])

    _, r = self.anagrams2.get_anagrams("err")
    self.assertEqual(r, ['err'])

    _, r = self.anagrams2.get_anagrams("errand")
    self.assertEqual(r, ['darner', 'errand'])

    _, r = self.anagrams2.get_anagrams("errant")
    self.assertEqual(r, ['errant', 'ranter', 'terran'])

    _, r = self.anagrams2.get_anagrams("errata")
    self.assertEqual(r, ['errata'])

    _, r = self.anagrams2.get_anagrams("erratic")
    self.assertEqual(r, ['erratic'])

    _, r = self.anagrams2.get_anagrams("erratum")
    self.assertEqual(r, ['erratum'])

    _, r = self.anagrams2.get_anagrams("erred")
    self.assertEqual(r, ['erred'])

    _, r = self.anagrams2.get_anagrams("erring")
    self.assertEqual(r, ['erring', 'ringer'])

    _, r = self.anagrams2.get_anagrams("erringly")
    self.assertEqual(r, ['erringly'])

    _, r = self.anagrams2.get_anagrams("errol")
    self.assertEqual(r, ['errol'])

    _, r = self.anagrams2.get_anagrams("erroneous")
    self.assertEqual(r, ['erroneous'])

    _, r = self.anagrams2.get_anagrams("erroneously")
    self.assertEqual(r, ['erroneously'])

    _, r = self.anagrams2.get_anagrams("erroneousness")
    self.assertEqual(r, ['erroneousness'])

    _, r = self.anagrams2.get_anagrams("error")
    self.assertEqual(r, ['error'])

    _, r = self.anagrams2.get_anagrams("errors")
    self.assertEqual(r, ['errors'])

    _, r = self.anagrams2.get_anagrams("errs")
    self.assertEqual(r, ['errs'])

    _, r = self.anagrams2.get_anagrams("ersatz")
    self.assertEqual(r, ['ersatz'])

    _, r = self.anagrams2.get_anagrams("erskine")
    self.assertEqual(r, ['erskine'])

    _, r = self.anagrams2.get_anagrams("erudite")
    self.assertEqual(r, ['erudite'])

    _, r = self.anagrams2.get_anagrams("erupt")
    self.assertEqual(r, ['erupt'])

    _, r = self.anagrams2.get_anagrams("eruption")
    self.assertEqual(r, ['eruption'])

    _, r = self.anagrams2.get_anagrams("ervin")
    self.assertEqual(r, ['ervin'])

    _, r = self.anagrams2.get_anagrams("erwin")
    self.assertEqual(r, ['erwin', 'winer'])

    _, r = self.anagrams2.get_anagrams("escalate")
    self.assertEqual(r, ['escalate'])

    _, r = self.anagrams2.get_anagrams("escalated")
    self.assertEqual(r, ['escalated'])

    _, r = self.anagrams2.get_anagrams("escalates")
    self.assertEqual(r, ['escalates'])

    _, r = self.anagrams2.get_anagrams("escalating")
    self.assertEqual(r, ['escalating'])

    _, r = self.anagrams2.get_anagrams("escalation")
    self.assertEqual(r, ['escalation'])

    _, r = self.anagrams2.get_anagrams("escapable")
    self.assertEqual(r, ['escapable'])

    _, r = self.anagrams2.get_anagrams("escapade")
    self.assertEqual(r, ['escapade'])

    _, r = self.anagrams2.get_anagrams("escapades")
    self.assertEqual(r, ['escapades'])

    _, r = self.anagrams2.get_anagrams("escape")
    self.assertEqual(r, ['escape'])

    _, r = self.anagrams2.get_anagrams("escaped")
    self.assertEqual(r, ['escaped'])

    _, r = self.anagrams2.get_anagrams("escapee")
    self.assertEqual(r, ['escapee'])

    _, r = self.anagrams2.get_anagrams("escapees")
    self.assertEqual(r, ['escapees'])

    _, r = self.anagrams2.get_anagrams("escapes")
    self.assertEqual(r, ['escapes'])

    _, r = self.anagrams2.get_anagrams("escaping")
    self.assertEqual(r, ['escaping'])

    _, r = self.anagrams2.get_anagrams("escherichia")
    self.assertEqual(r, ['escherichia'])

    _, r = self.anagrams2.get_anagrams("eschew")
    self.assertEqual(r, ['eschew'])

    _, r = self.anagrams2.get_anagrams("eschewed")
    self.assertEqual(r, ['eschewed'])

    _, r = self.anagrams2.get_anagrams("eschewing")
    self.assertEqual(r, ['eschewing'])

    _, r = self.anagrams2.get_anagrams("eschews")
    self.assertEqual(r, ['eschews'])

    _, r = self.anagrams2.get_anagrams("escort")
    self.assertEqual(r, ['corset', 'escort', 'sector'])

    _, r = self.anagrams2.get_anagrams("escorted")
    self.assertEqual(r, ['escorted'])

    _, r = self.anagrams2.get_anagrams("escorting")
    self.assertEqual(r, ['escorting'])

    _, r = self.anagrams2.get_anagrams("escorts")
    self.assertEqual(r, ['escorts', 'sectors'])

    _, r = self.anagrams2.get_anagrams("escrow")
    self.assertEqual(r, ['cowers', 'escrow'])

    _, r = self.anagrams2.get_anagrams("eskimo")
    self.assertEqual(r, ['eskimo'])

    _, r = self.anagrams2.get_anagrams("eskimoized")
    self.assertEqual(r, ['eskimoized'])

    _, r = self.anagrams2.get_anagrams("eskimoizeds")
    self.assertEqual(r, ['eskimoizeds'])

    _, r = self.anagrams2.get_anagrams("eskimos")
    self.assertEqual(r, ['eskimos', 'smokies'])

    _, r = self.anagrams2.get_anagrams("esmark")
    self.assertEqual(r, ['esmark', 'makers', 'masker'])

    _, r = self.anagrams2.get_anagrams("esoteric")
    self.assertEqual(r, ['esoteric'])

    _, r = self.anagrams2.get_anagrams("espagnol")
    self.assertEqual(r, ['espagnol'])

    _, r = self.anagrams2.get_anagrams("especial")
    self.assertEqual(r, ['especial'])

    _, r = self.anagrams2.get_anagrams("especially")
    self.assertEqual(r, ['especially'])

    _, r = self.anagrams2.get_anagrams("espionage")
    self.assertEqual(r, ['espionage'])

    _, r = self.anagrams2.get_anagrams("esposito")
    self.assertEqual(r, ['esposito', 'isotopes'])

    _, r = self.anagrams2.get_anagrams("espouse")
    self.assertEqual(r, ['espouse'])

    _, r = self.anagrams2.get_anagrams("espoused")
    self.assertEqual(r, ['espoused'])

    _, r = self.anagrams2.get_anagrams("espouses")
    self.assertEqual(r, ['espouses'])

    _, r = self.anagrams2.get_anagrams("espousing")
    self.assertEqual(r, ['espousing'])

    _, r = self.anagrams2.get_anagrams("esprit")
    self.assertEqual(r, ['esprit', 'priest', 'sprite', 'stripe'])

    _, r = self.anagrams2.get_anagrams("espy")
    self.assertEqual(r, ['espy'])

    _, r = self.anagrams2.get_anagrams("esquire")
    self.assertEqual(r, ['esquire', 'queries'])

    _, r = self.anagrams2.get_anagrams("esquires")
    self.assertEqual(r, ['esquires'])

    _, r = self.anagrams2.get_anagrams("essay")
    self.assertEqual(r, ['essay'])

    _, r = self.anagrams2.get_anagrams("essayed")
    self.assertEqual(r, ['essayed'])

    _, r = self.anagrams2.get_anagrams("essays")
    self.assertEqual(r, ['essays'])

    _, r = self.anagrams2.get_anagrams("essen")
    self.assertEqual(r, ['essen', 'sense'])

    _, r = self.anagrams2.get_anagrams("essence")
    self.assertEqual(r, ['essence'])

    _, r = self.anagrams2.get_anagrams("essences")
    self.assertEqual(r, ['essences'])

    _, r = self.anagrams2.get_anagrams("essenize")
    self.assertEqual(r, ['essenize'])

    _, r = self.anagrams2.get_anagrams("essenizes")
    self.assertEqual(r, ['essenizes'])

    _, r = self.anagrams2.get_anagrams("essential")
    self.assertEqual(r, ['essential'])

    _, r = self.anagrams2.get_anagrams("essentially")
    self.assertEqual(r, ['essentially'])

    _, r = self.anagrams2.get_anagrams("essentials")
    self.assertEqual(r, ['essentials'])

    _, r = self.anagrams2.get_anagrams("essex")
    self.assertEqual(r, ['essex', 'sexes'])

    _, r = self.anagrams2.get_anagrams("establish")
    self.assertEqual(r, ['establish'])

    _, r = self.anagrams2.get_anagrams("established")
    self.assertEqual(r, ['established'])

    _, r = self.anagrams2.get_anagrams("establishes")
    self.assertEqual(r, ['establishes'])

    _, r = self.anagrams2.get_anagrams("establishing")
    self.assertEqual(r, ['establishing'])

    _, r = self.anagrams2.get_anagrams("establishment")
    self.assertEqual(r, ['establishment'])

    _, r = self.anagrams2.get_anagrams("establishments")
    self.assertEqual(r, ['establishments'])

    _, r = self.anagrams2.get_anagrams("estate")
    self.assertEqual(r, ['estate'])

    _, r = self.anagrams2.get_anagrams("estates")
    self.assertEqual(r, ['estates'])

    _, r = self.anagrams2.get_anagrams("esteem")
    self.assertEqual(r, ['esteem'])

    _, r = self.anagrams2.get_anagrams("esteemed")
    self.assertEqual(r, ['esteemed'])

    _, r = self.anagrams2.get_anagrams("esteeming")
    self.assertEqual(r, ['esteeming'])

    _, r = self.anagrams2.get_anagrams("esteems")
    self.assertEqual(r, ['esteems'])

    _, r = self.anagrams2.get_anagrams("estella")
    self.assertEqual(r, ['estella'])

    _, r = self.anagrams2.get_anagrams("estes")
    self.assertEqual(r, ['estes'])

    _, r = self.anagrams2.get_anagrams("esther")
    self.assertEqual(r, ['esther', 'ethers', 'hester', 'threes'])

    _, r = self.anagrams2.get_anagrams("esthetics")
    self.assertEqual(r, ['esthetics'])

    _, r = self.anagrams2.get_anagrams("estimate")
    self.assertEqual(r, ['estimate'])

    _, r = self.anagrams2.get_anagrams("estimated")
    self.assertEqual(r, ['estimated', 'meditates'])

    _, r = self.anagrams2.get_anagrams("estimates")
    self.assertEqual(r, ['estimates'])

    _, r = self.anagrams2.get_anagrams("estimating")
    self.assertEqual(r, ['estimating'])

    _, r = self.anagrams2.get_anagrams("estimation")
    self.assertEqual(r, ['estimation'])

    _, r = self.anagrams2.get_anagrams("estimations")
    self.assertEqual(r, ['estimations'])

    _, r = self.anagrams2.get_anagrams("estonia")
    self.assertEqual(r, ['estonia'])

    _, r = self.anagrams2.get_anagrams("estonian")
    self.assertEqual(r, ['estonian'])

    _, r = self.anagrams2.get_anagrams("et")
    self.assertEqual(r, ['et'])

    _, r = self.anagrams2.get_anagrams("etch")
    self.assertEqual(r, ['etch'])

    _, r = self.anagrams2.get_anagrams("etching")
    self.assertEqual(r, ['etching'])

    _, r = self.anagrams2.get_anagrams("eternal")
    self.assertEqual(r, ['eternal'])

    _, r = self.anagrams2.get_anagrams("eternally")
    self.assertEqual(r, ['eternally'])

    _, r = self.anagrams2.get_anagrams("eternities")
    self.assertEqual(r, ['entireties', 'eternities'])

    _, r = self.anagrams2.get_anagrams("eternity")
    self.assertEqual(r, ['entirety', 'eternity'])

    _, r = self.anagrams2.get_anagrams("ethan")
    self.assertEqual(r, ['ethan'])

    _, r = self.anagrams2.get_anagrams("ethel")
    self.assertEqual(r, ['ethel', 'lethe'])

    _, r = self.anagrams2.get_anagrams("ether")
    self.assertEqual(r, ['ether', 'there', 'three'])

    _, r = self.anagrams2.get_anagrams("ethereal")
    self.assertEqual(r, ['ethereal'])

    _, r = self.anagrams2.get_anagrams("ethereally")
    self.assertEqual(r, ['ethereally'])

    _, r = self.anagrams2.get_anagrams("ethernet")
    self.assertEqual(r, ['ethernet'])

    _, r = self.anagrams2.get_anagrams("ethernets")
    self.assertEqual(r, ['ethernets'])

    _, r = self.anagrams2.get_anagrams("ethers")
    self.assertEqual(r, ['esther', 'ethers', 'hester', 'threes'])

    _, r = self.anagrams2.get_anagrams("ethic")
    self.assertEqual(r, ['ethic'])

    _, r = self.anagrams2.get_anagrams("ethical")
    self.assertEqual(r, ['ethical'])

    _, r = self.anagrams2.get_anagrams("ethically")
    self.assertEqual(r, ['ethically'])

    _, r = self.anagrams2.get_anagrams("ethics")
    self.assertEqual(r, ['ethics', 'itches'])

    _, r = self.anagrams2.get_anagrams("ethiopia")
    self.assertEqual(r, ['ethiopia'])

    _, r = self.anagrams2.get_anagrams("ethiopians")
    self.assertEqual(r, ['ethiopians'])

    _, r = self.anagrams2.get_anagrams("ethnic")
    self.assertEqual(r, ['ethnic'])

    _, r = self.anagrams2.get_anagrams("etiquette")
    self.assertEqual(r, ['etiquette'])

    _, r = self.anagrams2.get_anagrams("etruria")
    self.assertEqual(r, ['etruria'])

    _, r = self.anagrams2.get_anagrams("etruscan")
    self.assertEqual(r, ['etruscan'])

    _, r = self.anagrams2.get_anagrams("etymology")
    self.assertEqual(r, ['etymology'])

    _, r = self.anagrams2.get_anagrams("eucalyptus")
    self.assertEqual(r, ['eucalyptus'])

    _, r = self.anagrams2.get_anagrams("eucharist")
    self.assertEqual(r, ['eucharist'])

    _, r = self.anagrams2.get_anagrams("euclid")
    self.assertEqual(r, ['euclid'])

    _, r = self.anagrams2.get_anagrams("euclidean")
    self.assertEqual(r, ['euclidean'])

    _, r = self.anagrams2.get_anagrams("eugene")
    self.assertEqual(r, ['eugene'])

    _, r = self.anagrams2.get_anagrams("eugenia")
    self.assertEqual(r, ['eugenia'])

    _, r = self.anagrams2.get_anagrams("euler")
    self.assertEqual(r, ['euler'])

    _, r = self.anagrams2.get_anagrams("eulerian")
    self.assertEqual(r, ['eulerian'])

    _, r = self.anagrams2.get_anagrams("eumenides")
    self.assertEqual(r, ['eumenides'])

    _, r = self.anagrams2.get_anagrams("eunice")
    self.assertEqual(r, ['eunice'])

    _, r = self.anagrams2.get_anagrams("eunuch")
    self.assertEqual(r, ['eunuch'])

    _, r = self.anagrams2.get_anagrams("eunuchs")
    self.assertEqual(r, ['eunuchs'])

    _, r = self.anagrams2.get_anagrams("euphemism")
    self.assertEqual(r, ['euphemism'])

    _, r = self.anagrams2.get_anagrams("euphemisms")
    self.assertEqual(r, ['euphemisms'])

    _, r = self.anagrams2.get_anagrams("euphoria")
    self.assertEqual(r, ['euphoria'])

    _, r = self.anagrams2.get_anagrams("euphoric")
    self.assertEqual(r, ['euphoric'])

    _, r = self.anagrams2.get_anagrams("euphrates")
    self.assertEqual(r, ['euphrates'])

    _, r = self.anagrams2.get_anagrams("eurasia")
    self.assertEqual(r, ['eurasia'])

    _, r = self.anagrams2.get_anagrams("eurasian")
    self.assertEqual(r, ['eurasian'])

    _, r = self.anagrams2.get_anagrams("eureka")
    self.assertEqual(r, ['eureka'])

    _, r = self.anagrams2.get_anagrams("euripides")
    self.assertEqual(r, ['euripides'])

    _, r = self.anagrams2.get_anagrams("europa")
    self.assertEqual(r, ['europa'])

    _, r = self.anagrams2.get_anagrams("europe")
    self.assertEqual(r, ['europe'])

    _, r = self.anagrams2.get_anagrams("european")
    self.assertEqual(r, ['european'])

    _, r = self.anagrams2.get_anagrams("europeanization")
    self.assertEqual(r, ['europeanization'])

    _, r = self.anagrams2.get_anagrams("europeanizations")
    self.assertEqual(r, ['europeanizations'])

    _, r = self.anagrams2.get_anagrams("europeanize")
    self.assertEqual(r, ['europeanize'])

    _, r = self.anagrams2.get_anagrams("europeanized")
    self.assertEqual(r, ['europeanized'])

    _, r = self.anagrams2.get_anagrams("europeanizes")
    self.assertEqual(r, ['europeanizes'])

    _, r = self.anagrams2.get_anagrams("europeans")
    self.assertEqual(r, ['europeans'])

    _, r = self.anagrams2.get_anagrams("eurydice")
    self.assertEqual(r, ['eurydice'])

    _, r = self.anagrams2.get_anagrams("euterpe")
    self.assertEqual(r, ['euterpe'])

    _, r = self.anagrams2.get_anagrams("euthanasia")
    self.assertEqual(r, ['euthanasia'])

    _, r = self.anagrams2.get_anagrams("eva")
    self.assertEqual(r, ['eva'])

    _, r = self.anagrams2.get_anagrams("evacuate")
    self.assertEqual(r, ['evacuate'])

    _, r = self.anagrams2.get_anagrams("evacuated")
    self.assertEqual(r, ['evacuated'])

    _, r = self.anagrams2.get_anagrams("evacuation")
    self.assertEqual(r, ['evacuation'])

    _, r = self.anagrams2.get_anagrams("evade")
    self.assertEqual(r, ['evade'])

    _, r = self.anagrams2.get_anagrams("evaded")
    self.assertEqual(r, ['evaded'])

    _, r = self.anagrams2.get_anagrams("evades")
    self.assertEqual(r, ['evades'])

    _, r = self.anagrams2.get_anagrams("evading")
    self.assertEqual(r, ['evading'])

    _, r = self.anagrams2.get_anagrams("evaluate")
    self.assertEqual(r, ['evaluate'])

    _, r = self.anagrams2.get_anagrams("evaluated")
    self.assertEqual(r, ['evaluated'])

    _, r = self.anagrams2.get_anagrams("evaluates")
    self.assertEqual(r, ['evaluates'])

    _, r = self.anagrams2.get_anagrams("evaluating")
    self.assertEqual(r, ['evaluating'])

    _, r = self.anagrams2.get_anagrams("evaluation")
    self.assertEqual(r, ['evaluation'])

    _, r = self.anagrams2.get_anagrams("evaluations")
    self.assertEqual(r, ['evaluations'])

    _, r = self.anagrams2.get_anagrams("evaluative")
    self.assertEqual(r, ['evaluative'])

    _, r = self.anagrams2.get_anagrams("evaluator")
    self.assertEqual(r, ['evaluator'])

    _, r = self.anagrams2.get_anagrams("evaluators")
    self.assertEqual(r, ['evaluators'])

    _, r = self.anagrams2.get_anagrams("evangeline")
    self.assertEqual(r, ['evangeline'])

    _, r = self.anagrams2.get_anagrams("evans")
    self.assertEqual(r, ['evans', 'vanes'])

    _, r = self.anagrams2.get_anagrams("evanston")
    self.assertEqual(r, ['evanston'])

    _, r = self.anagrams2.get_anagrams("evansville")
    self.assertEqual(r, ['evansville'])

    _, r = self.anagrams2.get_anagrams("evaporate")
    self.assertEqual(r, ['evaporate'])

    _, r = self.anagrams2.get_anagrams("evaporated")
    self.assertEqual(r, ['evaporated'])

    _, r = self.anagrams2.get_anagrams("evaporating")
    self.assertEqual(r, ['evaporating'])

    _, r = self.anagrams2.get_anagrams("evaporation")
    self.assertEqual(r, ['evaporation'])

    _, r = self.anagrams2.get_anagrams("evaporative")
    self.assertEqual(r, ['evaporative'])

    _, r = self.anagrams2.get_anagrams("evasion")
    self.assertEqual(r, ['evasion'])

    _, r = self.anagrams2.get_anagrams("evasive")
    self.assertEqual(r, ['evasive'])

    _, r = self.anagrams2.get_anagrams("eve")
    self.assertEqual(r, ['eve'])

    _, r = self.anagrams2.get_anagrams("evelyn")
    self.assertEqual(r, ['evelyn', 'evenly'])

    _, r = self.anagrams2.get_anagrams("even")
    self.assertEqual(r, ['even'])

    _, r = self.anagrams2.get_anagrams("evened")
    self.assertEqual(r, ['evened'])

    _, r = self.anagrams2.get_anagrams("evenhanded")
    self.assertEqual(r, ['evenhanded'])

    _, r = self.anagrams2.get_anagrams("evenhandedly")
    self.assertEqual(r, ['evenhandedly'])

    _, r = self.anagrams2.get_anagrams("evenhandedness")
    self.assertEqual(r, ['evenhandedness'])

    _, r = self.anagrams2.get_anagrams("evening")
    self.assertEqual(r, ['evening'])

    _, r = self.anagrams2.get_anagrams("evenings")
    self.assertEqual(r, ['evenings'])

    _, r = self.anagrams2.get_anagrams("evenly")
    self.assertEqual(r, ['evelyn', 'evenly'])

    _, r = self.anagrams2.get_anagrams("evenness")
    self.assertEqual(r, ['evenness'])

    _, r = self.anagrams2.get_anagrams("evens")
    self.assertEqual(r, ['evens', 'seven'])

    _, r = self.anagrams2.get_anagrams("evensen")
    self.assertEqual(r, ['evensen'])

    _, r = self.anagrams2.get_anagrams("event")
    self.assertEqual(r, ['event'])

    _, r = self.anagrams2.get_anagrams("eventful")
    self.assertEqual(r, ['eventful'])

    _, r = self.anagrams2.get_anagrams("eventfully")
    self.assertEqual(r, ['eventfully'])

    _, r = self.anagrams2.get_anagrams("events")
    self.assertEqual(r, ['events', 'steven'])

    _, r = self.anagrams2.get_anagrams("eventual")
    self.assertEqual(r, ['eventual'])

    _, r = self.anagrams2.get_anagrams("eventualities")
    self.assertEqual(r, ['eventualities'])

    _, r = self.anagrams2.get_anagrams("eventuality")
    self.assertEqual(r, ['eventuality'])

    _, r = self.anagrams2.get_anagrams("eventually")
    self.assertEqual(r, ['eventually'])

    _, r = self.anagrams2.get_anagrams("ever")
    self.assertEqual(r, ['ever', 'veer'])

    _, r = self.anagrams2.get_anagrams("eveready")
    self.assertEqual(r, ['eveready'])

    _, r = self.anagrams2.get_anagrams("everest")
    self.assertEqual(r, ['everest'])

    _, r = self.anagrams2.get_anagrams("everett")
    self.assertEqual(r, ['everett'])

    _, r = self.anagrams2.get_anagrams("everglade")
    self.assertEqual(r, ['everglade'])

    _, r = self.anagrams2.get_anagrams("everglades")
    self.assertEqual(r, ['everglades'])

    _, r = self.anagrams2.get_anagrams("evergreen")
    self.assertEqual(r, ['evergreen'])

    _, r = self.anagrams2.get_anagrams("everhart")
    self.assertEqual(r, ['everhart'])

    _, r = self.anagrams2.get_anagrams("everlasting")
    self.assertEqual(r, ['everlasting'])

    _, r = self.anagrams2.get_anagrams("everlastingly")
    self.assertEqual(r, ['everlastingly'])

    _, r = self.anagrams2.get_anagrams("evermore")
    self.assertEqual(r, ['evermore'])

    _, r = self.anagrams2.get_anagrams("every")
    self.assertEqual(r, ['every'])

    _, r = self.anagrams2.get_anagrams("everybody")
    self.assertEqual(r, ['everybody'])

    _, r = self.anagrams2.get_anagrams("everyday")
    self.assertEqual(r, ['everyday'])

    _, r = self.anagrams2.get_anagrams("everyone")
    self.assertEqual(r, ['everyone'])

    _, r = self.anagrams2.get_anagrams("everything")
    self.assertEqual(r, ['everything'])

    _, r = self.anagrams2.get_anagrams("everywhere")
    self.assertEqual(r, ['everywhere'])

    _, r = self.anagrams2.get_anagrams("evict")
    self.assertEqual(r, ['civet', 'evict'])

    _, r = self.anagrams2.get_anagrams("evicted")
    self.assertEqual(r, ['evicted'])

    _, r = self.anagrams2.get_anagrams("evicting")
    self.assertEqual(r, ['evicting'])

    _, r = self.anagrams2.get_anagrams("eviction")
    self.assertEqual(r, ['eviction'])

    _, r = self.anagrams2.get_anagrams("evictions")
    self.assertEqual(r, ['evictions'])

    _, r = self.anagrams2.get_anagrams("evicts")
    self.assertEqual(r, ['evicts'])

    _, r = self.anagrams2.get_anagrams("evidence")
    self.assertEqual(r, ['evidence'])

    _, r = self.anagrams2.get_anagrams("evidenced")
    self.assertEqual(r, ['evidenced'])

    _, r = self.anagrams2.get_anagrams("evidences")
    self.assertEqual(r, ['evidences'])

    _, r = self.anagrams2.get_anagrams("evidencing")
    self.assertEqual(r, ['evidencing'])

    _, r = self.anagrams2.get_anagrams("evident")
    self.assertEqual(r, ['evident'])

    _, r = self.anagrams2.get_anagrams("evidently")
    self.assertEqual(r, ['evidently'])

    _, r = self.anagrams2.get_anagrams("evil")
    self.assertEqual(r, ['evil', 'levi', 'live', 'veil', 'vile'])

    _, r = self.anagrams2.get_anagrams("eviller")
    self.assertEqual(r, ['eviller'])

    _, r = self.anagrams2.get_anagrams("evilly")
    self.assertEqual(r, ['evilly', 'lively', 'vilely'])

    _, r = self.anagrams2.get_anagrams("evils")
    self.assertEqual(r, ['elvis', 'evils', 'levis', 'lives', 'veils'])

    _, r = self.anagrams2.get_anagrams("evince")
    self.assertEqual(r, ['evince', 'venice'])

    _, r = self.anagrams2.get_anagrams("evinced")
    self.assertEqual(r, ['evinced'])

    _, r = self.anagrams2.get_anagrams("evinces")
    self.assertEqual(r, ['evinces'])

    _, r = self.anagrams2.get_anagrams("evoke")
    self.assertEqual(r, ['evoke'])

    _, r = self.anagrams2.get_anagrams("evoked")
    self.assertEqual(r, ['evoked'])

    _, r = self.anagrams2.get_anagrams("evokes")
    self.assertEqual(r, ['evokes'])

    _, r = self.anagrams2.get_anagrams("evoking")
    self.assertEqual(r, ['evoking'])

    _, r = self.anagrams2.get_anagrams("evolute")
    self.assertEqual(r, ['evolute'])

    _, r = self.anagrams2.get_anagrams("evolutes")
    self.assertEqual(r, ['evolutes'])

    _, r = self.anagrams2.get_anagrams("evolution")
    self.assertEqual(r, ['evolution'])

    _, r = self.anagrams2.get_anagrams("evolutionary")
    self.assertEqual(r, ['evolutionary'])

    _, r = self.anagrams2.get_anagrams("evolutions")
    self.assertEqual(r, ['evolutions'])

    _, r = self.anagrams2.get_anagrams("evolve")
    self.assertEqual(r, ['evolve'])

    _, r = self.anagrams2.get_anagrams("evolved")
    self.assertEqual(r, ['devolve', 'evolved'])

    _, r = self.anagrams2.get_anagrams("evolves")
    self.assertEqual(r, ['evolves'])

    _, r = self.anagrams2.get_anagrams("evolving")
    self.assertEqual(r, ['evolving'])

    _, r = self.anagrams2.get_anagrams("ewe")
    self.assertEqual(r, ['ewe', 'wee'])

    _, r = self.anagrams2.get_anagrams("ewen")
    self.assertEqual(r, ['ewen'])

    _, r = self.anagrams2.get_anagrams("ewes")
    self.assertEqual(r, ['ewes'])

    _, r = self.anagrams2.get_anagrams("ewing")
    self.assertEqual(r, ['ewing'])

    _, r = self.anagrams2.get_anagrams("ex")
    self.assertEqual(r, ['ex'])

    _, r = self.anagrams2.get_anagrams("exacerbate")
    self.assertEqual(r, ['exacerbate'])

    _, r = self.anagrams2.get_anagrams("exacerbated")
    self.assertEqual(r, ['exacerbated'])

    _, r = self.anagrams2.get_anagrams("exacerbates")
    self.assertEqual(r, ['exacerbates'])

    _, r = self.anagrams2.get_anagrams("exacerbating")
    self.assertEqual(r, ['exacerbating'])

    _, r = self.anagrams2.get_anagrams("exacerbation")
    self.assertEqual(r, ['exacerbation'])

    _, r = self.anagrams2.get_anagrams("exacerbations")
    self.assertEqual(r, ['exacerbations'])

    _, r = self.anagrams2.get_anagrams("exact")
    self.assertEqual(r, ['exact'])

    _, r = self.anagrams2.get_anagrams("exacted")
    self.assertEqual(r, ['exacted'])

    _, r = self.anagrams2.get_anagrams("exacting")
    self.assertEqual(r, ['exacting'])

    _, r = self.anagrams2.get_anagrams("exactingly")
    self.assertEqual(r, ['exactingly'])

    _, r = self.anagrams2.get_anagrams("exaction")
    self.assertEqual(r, ['exaction'])

    _, r = self.anagrams2.get_anagrams("exactions")
    self.assertEqual(r, ['exactions'])

    _, r = self.anagrams2.get_anagrams("exactitude")
    self.assertEqual(r, ['exactitude'])

    _, r = self.anagrams2.get_anagrams("exactly")
    self.assertEqual(r, ['exactly'])

    _, r = self.anagrams2.get_anagrams("exactness")
    self.assertEqual(r, ['exactness'])

    _, r = self.anagrams2.get_anagrams("exacts")
    self.assertEqual(r, ['exacts'])

    _, r = self.anagrams2.get_anagrams("exaggerate")
    self.assertEqual(r, ['exaggerate'])

    _, r = self.anagrams2.get_anagrams("exaggerated")
    self.assertEqual(r, ['exaggerated'])

    _, r = self.anagrams2.get_anagrams("exaggerates")
    self.assertEqual(r, ['exaggerates'])

    _, r = self.anagrams2.get_anagrams("exaggerating")
    self.assertEqual(r, ['exaggerating'])

    _, r = self.anagrams2.get_anagrams("exaggeration")
    self.assertEqual(r, ['exaggeration'])

    _, r = self.anagrams2.get_anagrams("exaggerations")
    self.assertEqual(r, ['exaggerations'])

    _, r = self.anagrams2.get_anagrams("exalt")
    self.assertEqual(r, ['exalt', 'latex'])

    _, r = self.anagrams2.get_anagrams("exaltation")
    self.assertEqual(r, ['exaltation'])

    _, r = self.anagrams2.get_anagrams("exalted")
    self.assertEqual(r, ['exalted'])

    _, r = self.anagrams2.get_anagrams("exalting")
    self.assertEqual(r, ['exalting'])

    _, r = self.anagrams2.get_anagrams("exalts")
    self.assertEqual(r, ['exalts'])

    _, r = self.anagrams2.get_anagrams("exam")
    self.assertEqual(r, ['exam'])

    _, r = self.anagrams2.get_anagrams("examination")
    self.assertEqual(r, ['examination'])

    _, r = self.anagrams2.get_anagrams("examinations")
    self.assertEqual(r, ['examinations'])

    _, r = self.anagrams2.get_anagrams("examine")
    self.assertEqual(r, ['examine'])

    _, r = self.anagrams2.get_anagrams("examined")
    self.assertEqual(r, ['examined'])

    _, r = self.anagrams2.get_anagrams("examiner")
    self.assertEqual(r, ['examiner'])

    _, r = self.anagrams2.get_anagrams("examiners")
    self.assertEqual(r, ['examiners'])

    _, r = self.anagrams2.get_anagrams("examines")
    self.assertEqual(r, ['examines'])

    _, r = self.anagrams2.get_anagrams("examining")
    self.assertEqual(r, ['examining'])

    _, r = self.anagrams2.get_anagrams("example")
    self.assertEqual(r, ['example'])

    _, r = self.anagrams2.get_anagrams("examples")
    self.assertEqual(r, ['examples'])

    _, r = self.anagrams2.get_anagrams("exams")
    self.assertEqual(r, ['exams'])

    _, r = self.anagrams2.get_anagrams("exasperate")
    self.assertEqual(r, ['exasperate'])

    _, r = self.anagrams2.get_anagrams("exasperated")
    self.assertEqual(r, ['exasperated'])

    _, r = self.anagrams2.get_anagrams("exasperates")
    self.assertEqual(r, ['exasperates'])

    _, r = self.anagrams2.get_anagrams("exasperating")
    self.assertEqual(r, ['exasperating'])

    _, r = self.anagrams2.get_anagrams("exasperation")
    self.assertEqual(r, ['exasperation'])

    _, r = self.anagrams2.get_anagrams("excavate")
    self.assertEqual(r, ['excavate'])

    _, r = self.anagrams2.get_anagrams("excavated")
    self.assertEqual(r, ['excavated'])

    _, r = self.anagrams2.get_anagrams("excavates")
    self.assertEqual(r, ['excavates'])

    _, r = self.anagrams2.get_anagrams("excavating")
    self.assertEqual(r, ['excavating'])

    _, r = self.anagrams2.get_anagrams("excavation")
    self.assertEqual(r, ['excavation'])

    _, r = self.anagrams2.get_anagrams("excavations")
    self.assertEqual(r, ['excavations'])

    _, r = self.anagrams2.get_anagrams("exceed")
    self.assertEqual(r, ['exceed'])

    _, r = self.anagrams2.get_anagrams("exceeded")
    self.assertEqual(r, ['exceeded'])

    _, r = self.anagrams2.get_anagrams("exceeding")
    self.assertEqual(r, ['exceeding'])

    _, r = self.anagrams2.get_anagrams("exceedingly")
    self.assertEqual(r, ['exceedingly'])

    _, r = self.anagrams2.get_anagrams("exceeds")
    self.assertEqual(r, ['exceeds'])

    _, r = self.anagrams2.get_anagrams("excel")
    self.assertEqual(r, ['excel'])

    _, r = self.anagrams2.get_anagrams("excelled")
    self.assertEqual(r, ['excelled'])

    _, r = self.anagrams2.get_anagrams("excellence")
    self.assertEqual(r, ['excellence'])

    _, r = self.anagrams2.get_anagrams("excellences")
    self.assertEqual(r, ['excellences'])

    _, r = self.anagrams2.get_anagrams("excellency")
    self.assertEqual(r, ['excellency'])

    _, r = self.anagrams2.get_anagrams("excellent")
    self.assertEqual(r, ['excellent'])

    _, r = self.anagrams2.get_anagrams("excellently")
    self.assertEqual(r, ['excellently'])

    _, r = self.anagrams2.get_anagrams("excelling")
    self.assertEqual(r, ['excelling'])

    _, r = self.anagrams2.get_anagrams("excels")
    self.assertEqual(r, ['excels'])

    _, r = self.anagrams2.get_anagrams("except")
    self.assertEqual(r, ['except', 'expect'])

    _, r = self.anagrams2.get_anagrams("excepted")
    self.assertEqual(r, ['excepted', 'expected'])

    _, r = self.anagrams2.get_anagrams("excepting")
    self.assertEqual(r, ['excepting', 'expecting'])

    _, r = self.anagrams2.get_anagrams("exception")
    self.assertEqual(r, ['exception'])

    _, r = self.anagrams2.get_anagrams("exceptionable")
    self.assertEqual(r, ['exceptionable'])

    _, r = self.anagrams2.get_anagrams("exceptional")
    self.assertEqual(r, ['exceptional'])

    _, r = self.anagrams2.get_anagrams("exceptionally")
    self.assertEqual(r, ['exceptionally'])

    _, r = self.anagrams2.get_anagrams("exceptions")
    self.assertEqual(r, ['exceptions'])

    _, r = self.anagrams2.get_anagrams("excepts")
    self.assertEqual(r, ['excepts', 'expects'])

    _, r = self.anagrams2.get_anagrams("excerpt")
    self.assertEqual(r, ['excerpt'])

    _, r = self.anagrams2.get_anagrams("excerpted")
    self.assertEqual(r, ['excerpted'])

    _, r = self.anagrams2.get_anagrams("excerpts")
    self.assertEqual(r, ['excerpts'])

    _, r = self.anagrams2.get_anagrams("excess")
    self.assertEqual(r, ['excess'])

    _, r = self.anagrams2.get_anagrams("excesses")
    self.assertEqual(r, ['excesses'])

    _, r = self.anagrams2.get_anagrams("excessive")
    self.assertEqual(r, ['excessive'])

    _, r = self.anagrams2.get_anagrams("excessively")
    self.assertEqual(r, ['excessively'])

    _, r = self.anagrams2.get_anagrams("exchange")
    self.assertEqual(r, ['exchange'])

    _, r = self.anagrams2.get_anagrams("exchangeable")
    self.assertEqual(r, ['exchangeable'])

    _, r = self.anagrams2.get_anagrams("exchanged")
    self.assertEqual(r, ['exchanged'])

    _, r = self.anagrams2.get_anagrams("exchanges")
    self.assertEqual(r, ['exchanges'])

    _, r = self.anagrams2.get_anagrams("exchanging")
    self.assertEqual(r, ['exchanging'])

    _, r = self.anagrams2.get_anagrams("exchequer")
    self.assertEqual(r, ['exchequer'])

    _, r = self.anagrams2.get_anagrams("exchequers")
    self.assertEqual(r, ['exchequers'])

    _, r = self.anagrams2.get_anagrams("excise")
    self.assertEqual(r, ['excise'])

    _, r = self.anagrams2.get_anagrams("excised")
    self.assertEqual(r, ['excised'])

    _, r = self.anagrams2.get_anagrams("excises")
    self.assertEqual(r, ['excises'])

    _, r = self.anagrams2.get_anagrams("excising")
    self.assertEqual(r, ['excising'])

    _, r = self.anagrams2.get_anagrams("excision")
    self.assertEqual(r, ['excision'])

    _, r = self.anagrams2.get_anagrams("excitable")
    self.assertEqual(r, ['excitable'])

    _, r = self.anagrams2.get_anagrams("excitation")
    self.assertEqual(r, ['excitation', 'intoxicate'])

    _, r = self.anagrams2.get_anagrams("excitations")
    self.assertEqual(r, ['excitations'])

    _, r = self.anagrams2.get_anagrams("excite")
    self.assertEqual(r, ['excite'])

    _, r = self.anagrams2.get_anagrams("excited")
    self.assertEqual(r, ['excited'])

    _, r = self.anagrams2.get_anagrams("excitedly")
    self.assertEqual(r, ['excitedly'])

    _, r = self.anagrams2.get_anagrams("excitement")
    self.assertEqual(r, ['excitement'])

    _, r = self.anagrams2.get_anagrams("excites")
    self.assertEqual(r, ['excites'])

    _, r = self.anagrams2.get_anagrams("exciting")
    self.assertEqual(r, ['exciting'])

    _, r = self.anagrams2.get_anagrams("excitingly")
    self.assertEqual(r, ['excitingly'])

    _, r = self.anagrams2.get_anagrams("exciton")
    self.assertEqual(r, ['exciton'])

    _, r = self.anagrams2.get_anagrams("exclaim")
    self.assertEqual(r, ['exclaim'])

    _, r = self.anagrams2.get_anagrams("exclaimed")
    self.assertEqual(r, ['exclaimed'])

    _, r = self.anagrams2.get_anagrams("exclaimer")
    self.assertEqual(r, ['exclaimer'])

    _, r = self.anagrams2.get_anagrams("exclaimers")
    self.assertEqual(r, ['exclaimers'])

    _, r = self.anagrams2.get_anagrams("exclaiming")
    self.assertEqual(r, ['exclaiming'])

    _, r = self.anagrams2.get_anagrams("exclaims")
    self.assertEqual(r, ['climaxes', 'exclaims'])

    _, r = self.anagrams2.get_anagrams("exclamation")
    self.assertEqual(r, ['exclamation'])

    _, r = self.anagrams2.get_anagrams("exclamations")
    self.assertEqual(r, ['exclamations'])

    _, r = self.anagrams2.get_anagrams("exclamatory")
    self.assertEqual(r, ['exclamatory'])

    _, r = self.anagrams2.get_anagrams("exclude")
    self.assertEqual(r, ['exclude'])

    _, r = self.anagrams2.get_anagrams("excluded")
    self.assertEqual(r, ['excluded'])

    _, r = self.anagrams2.get_anagrams("excludes")
    self.assertEqual(r, ['excludes'])

    _, r = self.anagrams2.get_anagrams("excluding")
    self.assertEqual(r, ['excluding'])

    _, r = self.anagrams2.get_anagrams("exclusion")
    self.assertEqual(r, ['exclusion'])

    _, r = self.anagrams2.get_anagrams("exclusionary")
    self.assertEqual(r, ['exclusionary'])

    _, r = self.anagrams2.get_anagrams("exclusions")
    self.assertEqual(r, ['exclusions'])

    _, r = self.anagrams2.get_anagrams("exclusive")
    self.assertEqual(r, ['exclusive'])

    _, r = self.anagrams2.get_anagrams("exclusively")
    self.assertEqual(r, ['exclusively'])

    _, r = self.anagrams2.get_anagrams("exclusiveness")
    self.assertEqual(r, ['exclusiveness'])

    _, r = self.anagrams2.get_anagrams("exclusivity")
    self.assertEqual(r, ['exclusivity'])

    _, r = self.anagrams2.get_anagrams("excommunicate")
    self.assertEqual(r, ['excommunicate'])

    _, r = self.anagrams2.get_anagrams("excommunicated")
    self.assertEqual(r, ['excommunicated'])

    _, r = self.anagrams2.get_anagrams("excommunicates")
    self.assertEqual(r, ['excommunicates'])

    _, r = self.anagrams2.get_anagrams("excommunicating")
    self.assertEqual(r, ['excommunicating'])

    _, r = self.anagrams2.get_anagrams("excommunication")
    self.assertEqual(r, ['excommunication'])

    _, r = self.anagrams2.get_anagrams("excrete")
    self.assertEqual(r, ['excrete'])

    _, r = self.anagrams2.get_anagrams("excreted")
    self.assertEqual(r, ['excreted'])

    _, r = self.anagrams2.get_anagrams("excretes")
    self.assertEqual(r, ['excretes'])

    _, r = self.anagrams2.get_anagrams("excreting")
    self.assertEqual(r, ['excreting'])

    _, r = self.anagrams2.get_anagrams("excretion")
    self.assertEqual(r, ['excretion'])

    _, r = self.anagrams2.get_anagrams("excretions")
    self.assertEqual(r, ['excretions'])

    _, r = self.anagrams2.get_anagrams("excretory")
    self.assertEqual(r, ['excretory'])

    _, r = self.anagrams2.get_anagrams("excruciate")
    self.assertEqual(r, ['excruciate'])

    _, r = self.anagrams2.get_anagrams("excursion")
    self.assertEqual(r, ['excursion'])

    _, r = self.anagrams2.get_anagrams("excursions")
    self.assertEqual(r, ['excursions'])

    _, r = self.anagrams2.get_anagrams("excusable")
    self.assertEqual(r, ['excusable'])

    _, r = self.anagrams2.get_anagrams("excusably")
    self.assertEqual(r, ['excusably'])

    _, r = self.anagrams2.get_anagrams("excuse")
    self.assertEqual(r, ['excuse'])

    _, r = self.anagrams2.get_anagrams("excused")
    self.assertEqual(r, ['excused'])

    _, r = self.anagrams2.get_anagrams("excuses")
    self.assertEqual(r, ['excuses'])

    _, r = self.anagrams2.get_anagrams("excusing")
    self.assertEqual(r, ['excusing'])

    _, r = self.anagrams2.get_anagrams("exec")
    self.assertEqual(r, ['exec'])

    _, r = self.anagrams2.get_anagrams("executable")
    self.assertEqual(r, ['executable'])

    _, r = self.anagrams2.get_anagrams("execute")
    self.assertEqual(r, ['execute'])

    _, r = self.anagrams2.get_anagrams("executed")
    self.assertEqual(r, ['executed'])

    _, r = self.anagrams2.get_anagrams("executes")
    self.assertEqual(r, ['executes'])

    _, r = self.anagrams2.get_anagrams("executing")
    self.assertEqual(r, ['executing'])

    _, r = self.anagrams2.get_anagrams("execution")
    self.assertEqual(r, ['execution'])

    _, r = self.anagrams2.get_anagrams("executional")
    self.assertEqual(r, ['executional'])

    _, r = self.anagrams2.get_anagrams("executioner")
    self.assertEqual(r, ['executioner'])

    _, r = self.anagrams2.get_anagrams("executions")
    self.assertEqual(r, ['executions'])

    _, r = self.anagrams2.get_anagrams("executive")
    self.assertEqual(r, ['executive'])

    _, r = self.anagrams2.get_anagrams("executives")
    self.assertEqual(r, ['executives'])

    _, r = self.anagrams2.get_anagrams("executor")
    self.assertEqual(r, ['executor'])

    _, r = self.anagrams2.get_anagrams("executors")
    self.assertEqual(r, ['executors'])

    _, r = self.anagrams2.get_anagrams("exemplar")
    self.assertEqual(r, ['exemplar'])

    _, r = self.anagrams2.get_anagrams("exemplary")
    self.assertEqual(r, ['exemplary'])

    _, r = self.anagrams2.get_anagrams("exemplification")
    self.assertEqual(r, ['exemplification'])

    _, r = self.anagrams2.get_anagrams("exemplified")
    self.assertEqual(r, ['exemplified'])

    _, r = self.anagrams2.get_anagrams("exemplifier")
    self.assertEqual(r, ['exemplifier'])

    _, r = self.anagrams2.get_anagrams("exemplifiers")
    self.assertEqual(r, ['exemplifiers'])

    _, r = self.anagrams2.get_anagrams("exemplifies")
    self.assertEqual(r, ['exemplifies'])

    _, r = self.anagrams2.get_anagrams("exemplify")
    self.assertEqual(r, ['exemplify'])

    _, r = self.anagrams2.get_anagrams("exemplifying")
    self.assertEqual(r, ['exemplifying'])

    _, r = self.anagrams2.get_anagrams("exempt")
    self.assertEqual(r, ['exempt'])

    _, r = self.anagrams2.get_anagrams("exempted")
    self.assertEqual(r, ['exempted'])

    _, r = self.anagrams2.get_anagrams("exempting")
    self.assertEqual(r, ['exempting'])

    _, r = self.anagrams2.get_anagrams("exemption")
    self.assertEqual(r, ['exemption'])

    _, r = self.anagrams2.get_anagrams("exempts")
    self.assertEqual(r, ['exempts'])

    _, r = self.anagrams2.get_anagrams("exercise")
    self.assertEqual(r, ['exercise'])

    _, r = self.anagrams2.get_anagrams("exercised")
    self.assertEqual(r, ['exercised'])

    _, r = self.anagrams2.get_anagrams("exerciser")
    self.assertEqual(r, ['exerciser'])

    _, r = self.anagrams2.get_anagrams("exercisers")
    self.assertEqual(r, ['exercisers'])

    _, r = self.anagrams2.get_anagrams("exercises")
    self.assertEqual(r, ['exercises'])

    _, r = self.anagrams2.get_anagrams("exercising")
    self.assertEqual(r, ['exercising'])

    _, r = self.anagrams2.get_anagrams("exert")
    self.assertEqual(r, ['exert'])

    _, r = self.anagrams2.get_anagrams("exerted")
    self.assertEqual(r, ['exerted'])

    _, r = self.anagrams2.get_anagrams("exerting")
    self.assertEqual(r, ['exerting'])

    _, r = self.anagrams2.get_anagrams("exertion")
    self.assertEqual(r, ['exertion'])

    _, r = self.anagrams2.get_anagrams("exertions")
    self.assertEqual(r, ['exertions'])

    _, r = self.anagrams2.get_anagrams("exerts")
    self.assertEqual(r, ['exerts'])

    _, r = self.anagrams2.get_anagrams("exeter")
    self.assertEqual(r, ['exeter'])

    _, r = self.anagrams2.get_anagrams("exhale")
    self.assertEqual(r, ['exhale'])

    _, r = self.anagrams2.get_anagrams("exhaled")
    self.assertEqual(r, ['exhaled'])

    _, r = self.anagrams2.get_anagrams("exhales")
    self.assertEqual(r, ['exhales'])

    _, r = self.anagrams2.get_anagrams("exhaling")
    self.assertEqual(r, ['exhaling'])

    _, r = self.anagrams2.get_anagrams("exhaust")
    self.assertEqual(r, ['exhaust'])

    _, r = self.anagrams2.get_anagrams("exhausted")
    self.assertEqual(r, ['exhausted'])

    _, r = self.anagrams2.get_anagrams("exhaustedly")
    self.assertEqual(r, ['exhaustedly'])

    _, r = self.anagrams2.get_anagrams("exhausting")
    self.assertEqual(r, ['exhausting'])

    _, r = self.anagrams2.get_anagrams("exhaustion")
    self.assertEqual(r, ['exhaustion'])

    _, r = self.anagrams2.get_anagrams("exhaustive")
    self.assertEqual(r, ['exhaustive'])

    _, r = self.anagrams2.get_anagrams("exhaustively")
    self.assertEqual(r, ['exhaustively'])

    _, r = self.anagrams2.get_anagrams("exhausts")
    self.assertEqual(r, ['exhausts'])

    _, r = self.anagrams2.get_anagrams("exhibit")
    self.assertEqual(r, ['exhibit'])

    _, r = self.anagrams2.get_anagrams("exhibited")
    self.assertEqual(r, ['exhibited'])

    _, r = self.anagrams2.get_anagrams("exhibiting")
    self.assertEqual(r, ['exhibiting'])

    _, r = self.anagrams2.get_anagrams("exhibition")
    self.assertEqual(r, ['exhibition'])

    _, r = self.anagrams2.get_anagrams("exhibitions")
    self.assertEqual(r, ['exhibitions'])

    _, r = self.anagrams2.get_anagrams("exhibitor")
    self.assertEqual(r, ['exhibitor'])

    _, r = self.anagrams2.get_anagrams("exhibitors")
    self.assertEqual(r, ['exhibitors'])

    _, r = self.anagrams2.get_anagrams("exhibits")
    self.assertEqual(r, ['exhibits'])

    _, r = self.anagrams2.get_anagrams("exhilarate")
    self.assertEqual(r, ['exhilarate'])

    _, r = self.anagrams2.get_anagrams("exhort")
    self.assertEqual(r, ['exhort'])

    _, r = self.anagrams2.get_anagrams("exhortation")
    self.assertEqual(r, ['exhortation'])

    _, r = self.anagrams2.get_anagrams("exhortations")
    self.assertEqual(r, ['exhortations'])

    _, r = self.anagrams2.get_anagrams("exhume")
    self.assertEqual(r, ['exhume'])

    _, r = self.anagrams2.get_anagrams("exigency")
    self.assertEqual(r, ['exigency'])

    _, r = self.anagrams2.get_anagrams("exile")
    self.assertEqual(r, ['exile'])

    _, r = self.anagrams2.get_anagrams("exiled")
    self.assertEqual(r, ['exiled'])

    _, r = self.anagrams2.get_anagrams("exiles")
    self.assertEqual(r, ['exiles'])

    _, r = self.anagrams2.get_anagrams("exiling")
    self.assertEqual(r, ['exiling'])

    _, r = self.anagrams2.get_anagrams("exist")
    self.assertEqual(r, ['exist', 'exits'])

    _, r = self.anagrams2.get_anagrams("existed")
    self.assertEqual(r, ['existed'])

    _, r = self.anagrams2.get_anagrams("existence")
    self.assertEqual(r, ['existence'])

    _, r = self.anagrams2.get_anagrams("existent")
    self.assertEqual(r, ['existent'])

    _, r = self.anagrams2.get_anagrams("existential")
    self.assertEqual(r, ['existential'])

    _, r = self.anagrams2.get_anagrams("existentialism")
    self.assertEqual(r, ['existentialism'])

    _, r = self.anagrams2.get_anagrams("existentialist")
    self.assertEqual(r, ['existentialist'])

    _, r = self.anagrams2.get_anagrams("existentialists")
    self.assertEqual(r, ['existentialists'])

    _, r = self.anagrams2.get_anagrams("existentially")
    self.assertEqual(r, ['existentially'])

    _, r = self.anagrams2.get_anagrams("existing")
    self.assertEqual(r, ['existing'])

    _, r = self.anagrams2.get_anagrams("exists")
    self.assertEqual(r, ['exists', 'sexist'])

    _, r = self.anagrams2.get_anagrams("exit")
    self.assertEqual(r, ['exit'])

    _, r = self.anagrams2.get_anagrams("exited")
    self.assertEqual(r, ['exited'])

    _, r = self.anagrams2.get_anagrams("exiting")
    self.assertEqual(r, ['exiting'])

    _, r = self.anagrams2.get_anagrams("exits")
    self.assertEqual(r, ['exist', 'exits'])

    _, r = self.anagrams2.get_anagrams("exodus")
    self.assertEqual(r, ['exodus'])

    _, r = self.anagrams2.get_anagrams("exorbitant")
    self.assertEqual(r, ['exorbitant'])

    _, r = self.anagrams2.get_anagrams("exorbitantly")
    self.assertEqual(r, ['exorbitantly'])

    _, r = self.anagrams2.get_anagrams("exorcism")
    self.assertEqual(r, ['exorcism'])

    _, r = self.anagrams2.get_anagrams("exorcist")
    self.assertEqual(r, ['exorcist'])

    _, r = self.anagrams2.get_anagrams("exoskeleton")
    self.assertEqual(r, ['exoskeleton'])

    _, r = self.anagrams2.get_anagrams("exotic")
    self.assertEqual(r, ['exotic'])

    _, r = self.anagrams2.get_anagrams("expand")
    self.assertEqual(r, ['expand'])

    _, r = self.anagrams2.get_anagrams("expandable")
    self.assertEqual(r, ['expandable'])

    _, r = self.anagrams2.get_anagrams("expanded")
    self.assertEqual(r, ['expanded'])

    _, r = self.anagrams2.get_anagrams("expander")
    self.assertEqual(r, ['expander'])

    _, r = self.anagrams2.get_anagrams("expanders")
    self.assertEqual(r, ['expanders'])

    _, r = self.anagrams2.get_anagrams("expanding")
    self.assertEqual(r, ['expanding'])

    _, r = self.anagrams2.get_anagrams("expands")
    self.assertEqual(r, ['expands'])

    _, r = self.anagrams2.get_anagrams("expanse")
    self.assertEqual(r, ['expanse'])

    _, r = self.anagrams2.get_anagrams("expanses")
    self.assertEqual(r, ['expanses'])

    _, r = self.anagrams2.get_anagrams("expansible")
    self.assertEqual(r, ['expansible'])

    _, r = self.anagrams2.get_anagrams("expansion")
    self.assertEqual(r, ['expansion'])

    _, r = self.anagrams2.get_anagrams("expansionism")
    self.assertEqual(r, ['expansionism'])

    _, r = self.anagrams2.get_anagrams("expansions")
    self.assertEqual(r, ['expansions'])

    _, r = self.anagrams2.get_anagrams("expansive")
    self.assertEqual(r, ['expansive'])

    _, r = self.anagrams2.get_anagrams("expect")
    self.assertEqual(r, ['except', 'expect'])

    _, r = self.anagrams2.get_anagrams("expectancy")
    self.assertEqual(r, ['expectancy'])

    _, r = self.anagrams2.get_anagrams("expectant")
    self.assertEqual(r, ['expectant'])

    _, r = self.anagrams2.get_anagrams("expectantly")
    self.assertEqual(r, ['expectantly'])

    _, r = self.anagrams2.get_anagrams("expectation")
    self.assertEqual(r, ['expectation'])

    _, r = self.anagrams2.get_anagrams("expectations")
    self.assertEqual(r, ['expectations'])

    _, r = self.anagrams2.get_anagrams("expected")
    self.assertEqual(r, ['excepted', 'expected'])

    _, r = self.anagrams2.get_anagrams("expectedly")
    self.assertEqual(r, ['expectedly'])

    _, r = self.anagrams2.get_anagrams("expecting")
    self.assertEqual(r, ['excepting', 'expecting'])

    _, r = self.anagrams2.get_anagrams("expectingly")
    self.assertEqual(r, ['expectingly'])

    _, r = self.anagrams2.get_anagrams("expects")
    self.assertEqual(r, ['excepts', 'expects'])

    _, r = self.anagrams2.get_anagrams("expediency")
    self.assertEqual(r, ['expediency'])

    _, r = self.anagrams2.get_anagrams("expedient")
    self.assertEqual(r, ['expedient'])

    _, r = self.anagrams2.get_anagrams("expediently")
    self.assertEqual(r, ['expediently'])

    _, r = self.anagrams2.get_anagrams("expedite")
    self.assertEqual(r, ['expedite'])

    _, r = self.anagrams2.get_anagrams("expedited")
    self.assertEqual(r, ['expedited'])

    _, r = self.anagrams2.get_anagrams("expedites")
    self.assertEqual(r, ['expedites'])

    _, r = self.anagrams2.get_anagrams("expediting")
    self.assertEqual(r, ['expediting'])

    _, r = self.anagrams2.get_anagrams("expedition")
    self.assertEqual(r, ['expedition'])

    _, r = self.anagrams2.get_anagrams("expeditions")
    self.assertEqual(r, ['expeditions'])

    _, r = self.anagrams2.get_anagrams("expeditious")
    self.assertEqual(r, ['expeditious'])

    _, r = self.anagrams2.get_anagrams("expeditiously")
    self.assertEqual(r, ['expeditiously'])

    _, r = self.anagrams2.get_anagrams("expel")
    self.assertEqual(r, ['expel'])

    _, r = self.anagrams2.get_anagrams("expelled")
    self.assertEqual(r, ['expelled'])

    _, r = self.anagrams2.get_anagrams("expelling")
    self.assertEqual(r, ['expelling'])

    _, r = self.anagrams2.get_anagrams("expels")
    self.assertEqual(r, ['expels'])

    _, r = self.anagrams2.get_anagrams("expend")
    self.assertEqual(r, ['expend'])

    _, r = self.anagrams2.get_anagrams("expendable")
    self.assertEqual(r, ['expendable'])

    _, r = self.anagrams2.get_anagrams("expended")
    self.assertEqual(r, ['expended'])

    _, r = self.anagrams2.get_anagrams("expending")
    self.assertEqual(r, ['expending'])

    _, r = self.anagrams2.get_anagrams("expenditure")
    self.assertEqual(r, ['expenditure'])

    _, r = self.anagrams2.get_anagrams("expenditures")
    self.assertEqual(r, ['expenditures'])

    _, r = self.anagrams2.get_anagrams("expends")
    self.assertEqual(r, ['expends'])

    _, r = self.anagrams2.get_anagrams("expense")
    self.assertEqual(r, ['expense'])

    _, r = self.anagrams2.get_anagrams("expenses")
    self.assertEqual(r, ['expenses'])

    _, r = self.anagrams2.get_anagrams("expensive")
    self.assertEqual(r, ['expensive'])

    _, r = self.anagrams2.get_anagrams("expensively")
    self.assertEqual(r, ['expensively'])

    _, r = self.anagrams2.get_anagrams("experience")
    self.assertEqual(r, ['experience'])

    _, r = self.anagrams2.get_anagrams("experienced")
    self.assertEqual(r, ['experienced'])

    _, r = self.anagrams2.get_anagrams("experiences")
    self.assertEqual(r, ['experiences'])

    _, r = self.anagrams2.get_anagrams("experiencing")
    self.assertEqual(r, ['experiencing'])

    _, r = self.anagrams2.get_anagrams("experiment")
    self.assertEqual(r, ['experiment'])

    _, r = self.anagrams2.get_anagrams("experimental")
    self.assertEqual(r, ['experimental'])

    _, r = self.anagrams2.get_anagrams("experimentally")
    self.assertEqual(r, ['experimentally'])

    _, r = self.anagrams2.get_anagrams("experimentation")
    self.assertEqual(r, ['experimentation'])

    _, r = self.anagrams2.get_anagrams("experimentations")
    self.assertEqual(r, ['experimentations'])

    _, r = self.anagrams2.get_anagrams("experimented")
    self.assertEqual(r, ['experimented'])

    _, r = self.anagrams2.get_anagrams("experimenter")
    self.assertEqual(r, ['experimenter'])

    _, r = self.anagrams2.get_anagrams("experimenters")
    self.assertEqual(r, ['experimenters'])

    _, r = self.anagrams2.get_anagrams("experimenting")
    self.assertEqual(r, ['experimenting'])

    _, r = self.anagrams2.get_anagrams("experiments")
    self.assertEqual(r, ['experiments'])

    _, r = self.anagrams2.get_anagrams("expert")
    self.assertEqual(r, ['expert'])

    _, r = self.anagrams2.get_anagrams("expertise")
    self.assertEqual(r, ['expertise'])

    _, r = self.anagrams2.get_anagrams("expertly")
    self.assertEqual(r, ['expertly'])

    _, r = self.anagrams2.get_anagrams("expertness")
    self.assertEqual(r, ['expertness'])

    _, r = self.anagrams2.get_anagrams("experts")
    self.assertEqual(r, ['experts'])

    _, r = self.anagrams2.get_anagrams("expiration")
    self.assertEqual(r, ['expiration'])

    _, r = self.anagrams2.get_anagrams("expirations")
    self.assertEqual(r, ['expirations'])

    _, r = self.anagrams2.get_anagrams("expire")
    self.assertEqual(r, ['expire'])

    _, r = self.anagrams2.get_anagrams("expired")
    self.assertEqual(r, ['expired'])

    _, r = self.anagrams2.get_anagrams("expires")
    self.assertEqual(r, ['expires'])

    _, r = self.anagrams2.get_anagrams("expiring")
    self.assertEqual(r, ['expiring'])

    _, r = self.anagrams2.get_anagrams("explain")
    self.assertEqual(r, ['explain'])

    _, r = self.anagrams2.get_anagrams("explainable")
    self.assertEqual(r, ['explainable'])

    _, r = self.anagrams2.get_anagrams("explained")
    self.assertEqual(r, ['explained'])

    _, r = self.anagrams2.get_anagrams("explainer")
    self.assertEqual(r, ['explainer'])

    _, r = self.anagrams2.get_anagrams("explainers")
    self.assertEqual(r, ['explainers'])

    _, r = self.anagrams2.get_anagrams("explaining")
    self.assertEqual(r, ['explaining'])

    _, r = self.anagrams2.get_anagrams("explains")
    self.assertEqual(r, ['explains'])

    _, r = self.anagrams2.get_anagrams("explanation")
    self.assertEqual(r, ['explanation'])

    _, r = self.anagrams2.get_anagrams("explanations")
    self.assertEqual(r, ['explanations'])

    _, r = self.anagrams2.get_anagrams("explanatory")
    self.assertEqual(r, ['explanatory'])

    _, r = self.anagrams2.get_anagrams("expletive")
    self.assertEqual(r, ['expletive'])

    _, r = self.anagrams2.get_anagrams("explicit")
    self.assertEqual(r, ['explicit'])

    _, r = self.anagrams2.get_anagrams("explicitly")
    self.assertEqual(r, ['explicitly'])

    _, r = self.anagrams2.get_anagrams("explicitness")
    self.assertEqual(r, ['explicitness'])

    _, r = self.anagrams2.get_anagrams("explode")
    self.assertEqual(r, ['explode'])

    _, r = self.anagrams2.get_anagrams("exploded")
    self.assertEqual(r, ['exploded'])

    _, r = self.anagrams2.get_anagrams("explodes")
    self.assertEqual(r, ['explodes'])

    _, r = self.anagrams2.get_anagrams("exploding")
    self.assertEqual(r, ['exploding'])

    _, r = self.anagrams2.get_anagrams("exploit")
    self.assertEqual(r, ['exploit'])

    _, r = self.anagrams2.get_anagrams("exploitable")
    self.assertEqual(r, ['exploitable'])

    _, r = self.anagrams2.get_anagrams("exploitation")
    self.assertEqual(r, ['exploitation'])

    _, r = self.anagrams2.get_anagrams("exploitations")
    self.assertEqual(r, ['exploitations'])

    _, r = self.anagrams2.get_anagrams("exploited")
    self.assertEqual(r, ['exploited'])

    _, r = self.anagrams2.get_anagrams("exploiter")
    self.assertEqual(r, ['exploiter'])

    _, r = self.anagrams2.get_anagrams("exploiters")
    self.assertEqual(r, ['exploiters'])

    _, r = self.anagrams2.get_anagrams("exploiting")
    self.assertEqual(r, ['exploiting'])

    _, r = self.anagrams2.get_anagrams("exploits")
    self.assertEqual(r, ['exploits'])

    _, r = self.anagrams2.get_anagrams("exploration")
    self.assertEqual(r, ['exploration'])

    _, r = self.anagrams2.get_anagrams("explorations")
    self.assertEqual(r, ['explorations'])

    _, r = self.anagrams2.get_anagrams("exploratory")
    self.assertEqual(r, ['exploratory'])

    _, r = self.anagrams2.get_anagrams("explore")
    self.assertEqual(r, ['explore'])

    _, r = self.anagrams2.get_anagrams("explored")
    self.assertEqual(r, ['explored'])

    _, r = self.anagrams2.get_anagrams("explorer")
    self.assertEqual(r, ['explorer'])

    _, r = self.anagrams2.get_anagrams("explorers")
    self.assertEqual(r, ['explorers'])

    _, r = self.anagrams2.get_anagrams("explores")
    self.assertEqual(r, ['explores'])

    _, r = self.anagrams2.get_anagrams("exploring")
    self.assertEqual(r, ['exploring'])

    _, r = self.anagrams2.get_anagrams("explosion")
    self.assertEqual(r, ['explosion'])

    _, r = self.anagrams2.get_anagrams("explosions")
    self.assertEqual(r, ['explosions'])

    _, r = self.anagrams2.get_anagrams("explosive")
    self.assertEqual(r, ['explosive'])

    _, r = self.anagrams2.get_anagrams("explosively")
    self.assertEqual(r, ['explosively'])

    _, r = self.anagrams2.get_anagrams("explosives")
    self.assertEqual(r, ['explosives'])

    _, r = self.anagrams2.get_anagrams("exponent")
    self.assertEqual(r, ['exponent'])

    _, r = self.anagrams2.get_anagrams("exponential")
    self.assertEqual(r, ['exponential'])

    _, r = self.anagrams2.get_anagrams("exponentially")
    self.assertEqual(r, ['exponentially'])

    _, r = self.anagrams2.get_anagrams("exponentials")
    self.assertEqual(r, ['exponentials'])

    _, r = self.anagrams2.get_anagrams("exponentiate")
    self.assertEqual(r, ['exponentiate'])

    _, r = self.anagrams2.get_anagrams("exponentiated")
    self.assertEqual(r, ['exponentiated'])

    _, r = self.anagrams2.get_anagrams("exponentiates")
    self.assertEqual(r, ['exponentiates'])

    _, r = self.anagrams2.get_anagrams("exponentiating")
    self.assertEqual(r, ['exponentiating'])

    _, r = self.anagrams2.get_anagrams("exponentiation")
    self.assertEqual(r, ['exponentiation'])

    _, r = self.anagrams2.get_anagrams("exponentiations")
    self.assertEqual(r, ['exponentiations'])

    _, r = self.anagrams2.get_anagrams("exponents")
    self.assertEqual(r, ['exponents'])

    _, r = self.anagrams2.get_anagrams("export")
    self.assertEqual(r, ['export'])

    _, r = self.anagrams2.get_anagrams("exportation")
    self.assertEqual(r, ['exportation'])

    _, r = self.anagrams2.get_anagrams("exported")
    self.assertEqual(r, ['exported'])

    _, r = self.anagrams2.get_anagrams("exporter")
    self.assertEqual(r, ['exporter'])

    _, r = self.anagrams2.get_anagrams("exporters")
    self.assertEqual(r, ['exporters'])

    _, r = self.anagrams2.get_anagrams("exporting")
    self.assertEqual(r, ['exporting'])

    _, r = self.anagrams2.get_anagrams("exports")
    self.assertEqual(r, ['exports'])

    _, r = self.anagrams2.get_anagrams("expose")
    self.assertEqual(r, ['expose'])

    _, r = self.anagrams2.get_anagrams("exposed")
    self.assertEqual(r, ['exposed'])

    _, r = self.anagrams2.get_anagrams("exposer")
    self.assertEqual(r, ['exposer'])

    _, r = self.anagrams2.get_anagrams("exposers")
    self.assertEqual(r, ['exposers'])

    _, r = self.anagrams2.get_anagrams("exposes")
    self.assertEqual(r, ['exposes'])

    _, r = self.anagrams2.get_anagrams("exposing")
    self.assertEqual(r, ['exposing'])

    _, r = self.anagrams2.get_anagrams("exposition")
    self.assertEqual(r, ['exposition'])

    _, r = self.anagrams2.get_anagrams("expositions")
    self.assertEqual(r, ['expositions'])

    _, r = self.anagrams2.get_anagrams("expository")
    self.assertEqual(r, ['expository'])

    _, r = self.anagrams2.get_anagrams("exposure")
    self.assertEqual(r, ['exposure'])

    _, r = self.anagrams2.get_anagrams("exposures")
    self.assertEqual(r, ['exposures'])

    _, r = self.anagrams2.get_anagrams("expound")
    self.assertEqual(r, ['expound'])

    _, r = self.anagrams2.get_anagrams("expounded")
    self.assertEqual(r, ['expounded'])

    _, r = self.anagrams2.get_anagrams("expounder")
    self.assertEqual(r, ['expounder'])

    _, r = self.anagrams2.get_anagrams("expounding")
    self.assertEqual(r, ['expounding'])

    _, r = self.anagrams2.get_anagrams("expounds")
    self.assertEqual(r, ['expounds'])

    _, r = self.anagrams2.get_anagrams("express")
    self.assertEqual(r, ['express'])

    _, r = self.anagrams2.get_anagrams("expressed")
    self.assertEqual(r, ['expressed'])

    _, r = self.anagrams2.get_anagrams("expresses")
    self.assertEqual(r, ['expresses'])

    _, r = self.anagrams2.get_anagrams("expressibility")
    self.assertEqual(r, ['expressibility'])

    _, r = self.anagrams2.get_anagrams("expressible")
    self.assertEqual(r, ['expressible'])

    _, r = self.anagrams2.get_anagrams("expressibly")
    self.assertEqual(r, ['expressibly'])

    _, r = self.anagrams2.get_anagrams("expressing")
    self.assertEqual(r, ['expressing'])

    _, r = self.anagrams2.get_anagrams("expression")
    self.assertEqual(r, ['expression'])

    _, r = self.anagrams2.get_anagrams("expressions")
    self.assertEqual(r, ['expressions'])

    _, r = self.anagrams2.get_anagrams("expressive")
    self.assertEqual(r, ['expressive'])

    _, r = self.anagrams2.get_anagrams("expressively")
    self.assertEqual(r, ['expressively'])

    _, r = self.anagrams2.get_anagrams("expressiveness")
    self.assertEqual(r, ['expressiveness'])

    _, r = self.anagrams2.get_anagrams("expressly")
    self.assertEqual(r, ['expressly'])

    _, r = self.anagrams2.get_anagrams("expulsion")
    self.assertEqual(r, ['expulsion'])

    _, r = self.anagrams2.get_anagrams("expunge")
    self.assertEqual(r, ['expunge'])

    _, r = self.anagrams2.get_anagrams("expunged")
    self.assertEqual(r, ['expunged'])

    _, r = self.anagrams2.get_anagrams("expunges")
    self.assertEqual(r, ['expunges'])

    _, r = self.anagrams2.get_anagrams("expunging")
    self.assertEqual(r, ['expunging'])

    _, r = self.anagrams2.get_anagrams("expurgate")
    self.assertEqual(r, ['expurgate'])

    _, r = self.anagrams2.get_anagrams("exquisite")
    self.assertEqual(r, ['exquisite'])

    _, r = self.anagrams2.get_anagrams("exquisitely")
    self.assertEqual(r, ['exquisitely'])

    _, r = self.anagrams2.get_anagrams("exquisiteness")
    self.assertEqual(r, ['exquisiteness'])

    _, r = self.anagrams2.get_anagrams("extant")
    self.assertEqual(r, ['extant'])

    _, r = self.anagrams2.get_anagrams("extemporaneous")
    self.assertEqual(r, ['extemporaneous'])

    _, r = self.anagrams2.get_anagrams("extend")
    self.assertEqual(r, ['extend'])

    _, r = self.anagrams2.get_anagrams("extendable")
    self.assertEqual(r, ['extendable'])

    _, r = self.anagrams2.get_anagrams("extended")
    self.assertEqual(r, ['extended'])

    _, r = self.anagrams2.get_anagrams("extending")
    self.assertEqual(r, ['extending'])

    _, r = self.anagrams2.get_anagrams("extends")
    self.assertEqual(r, ['extends'])

    _, r = self.anagrams2.get_anagrams("extensibility")
    self.assertEqual(r, ['extensibility'])

    _, r = self.anagrams2.get_anagrams("extensible")
    self.assertEqual(r, ['extensible'])

    _, r = self.anagrams2.get_anagrams("extension")
    self.assertEqual(r, ['extension'])

    _, r = self.anagrams2.get_anagrams("extensions")
    self.assertEqual(r, ['extensions'])

    _, r = self.anagrams2.get_anagrams("extensive")
    self.assertEqual(r, ['extensive'])

    _, r = self.anagrams2.get_anagrams("extensively")
    self.assertEqual(r, ['extensively'])

    _, r = self.anagrams2.get_anagrams("extent")
    self.assertEqual(r, ['extent'])

    _, r = self.anagrams2.get_anagrams("extents")
    self.assertEqual(r, ['extents'])

    _, r = self.anagrams2.get_anagrams("extenuate")
    self.assertEqual(r, ['extenuate'])

    _, r = self.anagrams2.get_anagrams("extenuated")
    self.assertEqual(r, ['extenuated'])

    _, r = self.anagrams2.get_anagrams("extenuating")
    self.assertEqual(r, ['extenuating'])

    _, r = self.anagrams2.get_anagrams("extenuation")
    self.assertEqual(r, ['extenuation'])

    _, r = self.anagrams2.get_anagrams("exterior")
    self.assertEqual(r, ['exterior'])

    _, r = self.anagrams2.get_anagrams("exteriors")
    self.assertEqual(r, ['exteriors'])

    _, r = self.anagrams2.get_anagrams("exterminate")
    self.assertEqual(r, ['exterminate'])

    _, r = self.anagrams2.get_anagrams("exterminated")
    self.assertEqual(r, ['exterminated'])

    _, r = self.anagrams2.get_anagrams("exterminates")
    self.assertEqual(r, ['exterminates'])

    _, r = self.anagrams2.get_anagrams("exterminating")
    self.assertEqual(r, ['exterminating'])

    _, r = self.anagrams2.get_anagrams("extermination")
    self.assertEqual(r, ['extermination'])

    _, r = self.anagrams2.get_anagrams("external")
    self.assertEqual(r, ['external'])

    _, r = self.anagrams2.get_anagrams("externally")
    self.assertEqual(r, ['externally'])

    _, r = self.anagrams2.get_anagrams("extinct")
    self.assertEqual(r, ['extinct'])

    _, r = self.anagrams2.get_anagrams("extinction")
    self.assertEqual(r, ['extinction'])

    _, r = self.anagrams2.get_anagrams("extinguish")
    self.assertEqual(r, ['extinguish'])

    _, r = self.anagrams2.get_anagrams("extinguished")
    self.assertEqual(r, ['extinguished'])

    _, r = self.anagrams2.get_anagrams("extinguisher")
    self.assertEqual(r, ['extinguisher'])

    _, r = self.anagrams2.get_anagrams("extinguishes")
    self.assertEqual(r, ['extinguishes'])

    _, r = self.anagrams2.get_anagrams("extinguishing")
    self.assertEqual(r, ['extinguishing'])

    _, r = self.anagrams2.get_anagrams("extirpate")
    self.assertEqual(r, ['extirpate'])

    _, r = self.anagrams2.get_anagrams("extol")
    self.assertEqual(r, ['extol'])

    _, r = self.anagrams2.get_anagrams("extort")
    self.assertEqual(r, ['extort'])

    _, r = self.anagrams2.get_anagrams("extorted")
    self.assertEqual(r, ['extorted'])

    _, r = self.anagrams2.get_anagrams("extortion")
    self.assertEqual(r, ['extortion'])

    _, r = self.anagrams2.get_anagrams("extra")
    self.assertEqual(r, ['extra'])

    _, r = self.anagrams2.get_anagrams("extract")
    self.assertEqual(r, ['extract'])

    _, r = self.anagrams2.get_anagrams("extracted")
    self.assertEqual(r, ['extracted'])

    _, r = self.anagrams2.get_anagrams("extracting")
    self.assertEqual(r, ['extracting'])

    _, r = self.anagrams2.get_anagrams("extraction")
    self.assertEqual(r, ['extraction'])

    _, r = self.anagrams2.get_anagrams("extractions")
    self.assertEqual(r, ['extractions'])

    _, r = self.anagrams2.get_anagrams("extractor")
    self.assertEqual(r, ['extractor'])

    _, r = self.anagrams2.get_anagrams("extractors")
    self.assertEqual(r, ['extractors'])

    _, r = self.anagrams2.get_anagrams("extracts")
    self.assertEqual(r, ['extracts'])

    _, r = self.anagrams2.get_anagrams("extracurricular")
    self.assertEqual(r, ['extracurricular'])

    _, r = self.anagrams2.get_anagrams("extramarital")
    self.assertEqual(r, ['extramarital'])

    _, r = self.anagrams2.get_anagrams("extraneous")
    self.assertEqual(r, ['extraneous'])

    _, r = self.anagrams2.get_anagrams("extraneously")
    self.assertEqual(r, ['extraneously'])

    _, r = self.anagrams2.get_anagrams("extraneousness")
    self.assertEqual(r, ['extraneousness'])

    _, r = self.anagrams2.get_anagrams("extraordinarily")
    self.assertEqual(r, ['extraordinarily'])

    _, r = self.anagrams2.get_anagrams("extraordinariness")
    self.assertEqual(r, ['extraordinariness'])

    _, r = self.anagrams2.get_anagrams("extraordinary")
    self.assertEqual(r, ['extraordinary'])

    _, r = self.anagrams2.get_anagrams("extrapolate")
    self.assertEqual(r, ['extrapolate'])

    _, r = self.anagrams2.get_anagrams("extrapolated")
    self.assertEqual(r, ['extrapolated'])

    _, r = self.anagrams2.get_anagrams("extrapolates")
    self.assertEqual(r, ['extrapolates'])

    _, r = self.anagrams2.get_anagrams("extrapolating")
    self.assertEqual(r, ['extrapolating'])

    _, r = self.anagrams2.get_anagrams("extrapolation")
    self.assertEqual(r, ['extrapolation'])

    _, r = self.anagrams2.get_anagrams("extrapolations")
    self.assertEqual(r, ['extrapolations'])

    _, r = self.anagrams2.get_anagrams("extras")
    self.assertEqual(r, ['extras'])

    _, r = self.anagrams2.get_anagrams("extraterrestrial")
    self.assertEqual(r, ['extraterrestrial'])

    _, r = self.anagrams2.get_anagrams("extravagance")
    self.assertEqual(r, ['extravagance'])

    _, r = self.anagrams2.get_anagrams("extravagant")
    self.assertEqual(r, ['extravagant'])

    _, r = self.anagrams2.get_anagrams("extravagantly")
    self.assertEqual(r, ['extravagantly'])

    _, r = self.anagrams2.get_anagrams("extravaganza")
    self.assertEqual(r, ['extravaganza'])

    _, r = self.anagrams2.get_anagrams("extremal")
    self.assertEqual(r, ['extremal'])

    _, r = self.anagrams2.get_anagrams("extreme")
    self.assertEqual(r, ['extreme'])

    _, r = self.anagrams2.get_anagrams("extremely")
    self.assertEqual(r, ['extremely'])

    _, r = self.anagrams2.get_anagrams("extremes")
    self.assertEqual(r, ['extremes'])

    _, r = self.anagrams2.get_anagrams("extremist")
    self.assertEqual(r, ['extremist'])

    _, r = self.anagrams2.get_anagrams("extremists")
    self.assertEqual(r, ['extremists'])

    _, r = self.anagrams2.get_anagrams("extremities")
    self.assertEqual(r, ['extremities'])

    _, r = self.anagrams2.get_anagrams("extremity")
    self.assertEqual(r, ['extremity'])

    _, r = self.anagrams2.get_anagrams("extricate")
    self.assertEqual(r, ['extricate'])

    _, r = self.anagrams2.get_anagrams("extrinsic")
    self.assertEqual(r, ['extrinsic'])

    _, r = self.anagrams2.get_anagrams("extrovert")
    self.assertEqual(r, ['extrovert'])

    _, r = self.anagrams2.get_anagrams("exuberance")
    self.assertEqual(r, ['exuberance'])

    _, r = self.anagrams2.get_anagrams("exult")
    self.assertEqual(r, ['exult'])

    _, r = self.anagrams2.get_anagrams("exultation")
    self.assertEqual(r, ['exultation'])

    _, r = self.anagrams2.get_anagrams("exxon")
    self.assertEqual(r, ['exxon'])

    _, r = self.anagrams2.get_anagrams("eye")
    self.assertEqual(r, ['eye'])

    _, r = self.anagrams2.get_anagrams("eyeball")
    self.assertEqual(r, ['eyeball'])

    _, r = self.anagrams2.get_anagrams("eyebrow")
    self.assertEqual(r, ['eyebrow'])

    _, r = self.anagrams2.get_anagrams("eyebrows")
    self.assertEqual(r, ['eyebrows'])

    _, r = self.anagrams2.get_anagrams("eyed")
    self.assertEqual(r, ['eyed'])

    _, r = self.anagrams2.get_anagrams("eyeful")
    self.assertEqual(r, ['eyeful'])

    _, r = self.anagrams2.get_anagrams("eyeglass")
    self.assertEqual(r, ['eyeglass'])

    _, r = self.anagrams2.get_anagrams("eyeglasses")
    self.assertEqual(r, ['eyeglasses'])

    _, r = self.anagrams2.get_anagrams("eyeing")
    self.assertEqual(r, ['eyeing'])

    _, r = self.anagrams2.get_anagrams("eyelash")
    self.assertEqual(r, ['eyelash'])

    _, r = self.anagrams2.get_anagrams("eyelid")
    self.assertEqual(r, ['eyelid'])

    _, r = self.anagrams2.get_anagrams("eyelids")
    self.assertEqual(r, ['eyelids'])

    _, r = self.anagrams2.get_anagrams("eyepiece")
    self.assertEqual(r, ['eyepiece'])

    _, r = self.anagrams2.get_anagrams("eyepieces")
    self.assertEqual(r, ['eyepieces'])

    _, r = self.anagrams2.get_anagrams("eyer")
    self.assertEqual(r, ['eyer'])

    _, r = self.anagrams2.get_anagrams("eyers")
    self.assertEqual(r, ['eyers'])

    _, r = self.anagrams2.get_anagrams("eyes")
    self.assertEqual(r, ['eyes'])

    _, r = self.anagrams2.get_anagrams("eyesight")
    self.assertEqual(r, ['eyesight'])

    _, r = self.anagrams2.get_anagrams("eyewitness")
    self.assertEqual(r, ['eyewitness'])

    _, r = self.anagrams2.get_anagrams("eyewitnesses")
    self.assertEqual(r, ['eyewitnesses'])

    _, r = self.anagrams2.get_anagrams("eying")
    self.assertEqual(r, ['eying'])

    _, r = self.anagrams2.get_anagrams("ezekiel")
    self.assertEqual(r, ['ezekiel'])

    _, r = self.anagrams2.get_anagrams("ezra")
    self.assertEqual(r, ['ezra', 'raze'])

    _, r = self.anagrams2.get_anagrams("faber")
    self.assertEqual(r, ['faber'])

    _, r = self.anagrams2.get_anagrams("fabian")
    self.assertEqual(r, ['fabian'])

    _, r = self.anagrams2.get_anagrams("fable")
    self.assertEqual(r, ['fable'])

    _, r = self.anagrams2.get_anagrams("fabled")
    self.assertEqual(r, ['fabled'])

    _, r = self.anagrams2.get_anagrams("fables")
    self.assertEqual(r, ['fables'])

    _, r = self.anagrams2.get_anagrams("fabric")
    self.assertEqual(r, ['fabric'])

    _, r = self.anagrams2.get_anagrams("fabricate")
    self.assertEqual(r, ['fabricate'])

    _, r = self.anagrams2.get_anagrams("fabricated")
    self.assertEqual(r, ['fabricated'])

    _, r = self.anagrams2.get_anagrams("fabricates")
    self.assertEqual(r, ['fabricates'])

    _, r = self.anagrams2.get_anagrams("fabricating")
    self.assertEqual(r, ['fabricating'])

    _, r = self.anagrams2.get_anagrams("fabrication")
    self.assertEqual(r, ['fabrication'])

    _, r = self.anagrams2.get_anagrams("fabrics")
    self.assertEqual(r, ['fabrics'])

    _, r = self.anagrams2.get_anagrams("fabulous")
    self.assertEqual(r, ['fabulous'])

    _, r = self.anagrams2.get_anagrams("fabulously")
    self.assertEqual(r, ['fabulously'])

    _, r = self.anagrams2.get_anagrams("facade")
    self.assertEqual(r, ['facade'])

    _, r = self.anagrams2.get_anagrams("facaded")
    self.assertEqual(r, ['facaded'])

    _, r = self.anagrams2.get_anagrams("facades")
    self.assertEqual(r, ['facades'])

    _, r = self.anagrams2.get_anagrams("face")
    self.assertEqual(r, ['cafe', 'face'])

    _, r = self.anagrams2.get_anagrams("faced")
    self.assertEqual(r, ['faced'])

    _, r = self.anagrams2.get_anagrams("faces")
    self.assertEqual(r, ['cafes', 'faces'])

    _, r = self.anagrams2.get_anagrams("facet")
    self.assertEqual(r, ['facet'])

    _, r = self.anagrams2.get_anagrams("faceted")
    self.assertEqual(r, ['faceted'])

    _, r = self.anagrams2.get_anagrams("facets")
    self.assertEqual(r, ['facets'])

    _, r = self.anagrams2.get_anagrams("facial")
    self.assertEqual(r, ['facial'])

    _, r = self.anagrams2.get_anagrams("facile")
    self.assertEqual(r, ['facile'])

    _, r = self.anagrams2.get_anagrams("facilely")
    self.assertEqual(r, ['facilely'])

    _, r = self.anagrams2.get_anagrams("facilitate")
    self.assertEqual(r, ['facilitate'])

    _, r = self.anagrams2.get_anagrams("facilitated")
    self.assertEqual(r, ['facilitated'])

    _, r = self.anagrams2.get_anagrams("facilitates")
    self.assertEqual(r, ['facilitates'])

    _, r = self.anagrams2.get_anagrams("facilitating")
    self.assertEqual(r, ['facilitating'])

    _, r = self.anagrams2.get_anagrams("facilities")
    self.assertEqual(r, ['facilities'])

    _, r = self.anagrams2.get_anagrams("facility")
    self.assertEqual(r, ['facility'])

    _, r = self.anagrams2.get_anagrams("facing")
    self.assertEqual(r, ['facing'])

    _, r = self.anagrams2.get_anagrams("facings")
    self.assertEqual(r, ['facings'])

    _, r = self.anagrams2.get_anagrams("facsimile")
    self.assertEqual(r, ['facsimile'])

    _, r = self.anagrams2.get_anagrams("facsimiles")
    self.assertEqual(r, ['facsimiles'])

    _, r = self.anagrams2.get_anagrams("fact")
    self.assertEqual(r, ['fact'])

    _, r = self.anagrams2.get_anagrams("faction")
    self.assertEqual(r, ['faction'])

    _, r = self.anagrams2.get_anagrams("factions")
    self.assertEqual(r, ['factions'])

    _, r = self.anagrams2.get_anagrams("factious")
    self.assertEqual(r, ['factious'])

    _, r = self.anagrams2.get_anagrams("facto")
    self.assertEqual(r, ['facto'])

    _, r = self.anagrams2.get_anagrams("factor")
    self.assertEqual(r, ['factor'])

    _, r = self.anagrams2.get_anagrams("factored")
    self.assertEqual(r, ['factored'])

    _, r = self.anagrams2.get_anagrams("factorial")
    self.assertEqual(r, ['factorial'])

    _, r = self.anagrams2.get_anagrams("factories")
    self.assertEqual(r, ['factories'])

    _, r = self.anagrams2.get_anagrams("factoring")
    self.assertEqual(r, ['factoring'])

    _, r = self.anagrams2.get_anagrams("factorization")
    self.assertEqual(r, ['factorization'])

    _, r = self.anagrams2.get_anagrams("factorizations")
    self.assertEqual(r, ['factorizations'])

    _, r = self.anagrams2.get_anagrams("factors")
    self.assertEqual(r, ['factors'])

    _, r = self.anagrams2.get_anagrams("factory")
    self.assertEqual(r, ['factory'])

    _, r = self.anagrams2.get_anagrams("facts")
    self.assertEqual(r, ['facts'])

    _, r = self.anagrams2.get_anagrams("factual")
    self.assertEqual(r, ['factual'])

    _, r = self.anagrams2.get_anagrams("factually")
    self.assertEqual(r, ['factually'])

    _, r = self.anagrams2.get_anagrams("faculties")
    self.assertEqual(r, ['faculties'])

    _, r = self.anagrams2.get_anagrams("faculty")
    self.assertEqual(r, ['faculty'])

    _, r = self.anagrams2.get_anagrams("fade")
    self.assertEqual(r, ['deaf', 'fade'])

    _, r = self.anagrams2.get_anagrams("faded")
    self.assertEqual(r, ['faded'])

    _, r = self.anagrams2.get_anagrams("fadeout")
    self.assertEqual(r, ['fadeout'])

    _, r = self.anagrams2.get_anagrams("fader")
    self.assertEqual(r, ['fader', 'fared'])

    _, r = self.anagrams2.get_anagrams("faders")
    self.assertEqual(r, ['faders'])

    _, r = self.anagrams2.get_anagrams("fades")
    self.assertEqual(r, ['fades'])

    _, r = self.anagrams2.get_anagrams("fading")
    self.assertEqual(r, ['fading'])

    _, r = self.anagrams2.get_anagrams("fafnir")
    self.assertEqual(r, ['fafnir'])

    _, r = self.anagrams2.get_anagrams("fag")
    self.assertEqual(r, ['fag'])

    _, r = self.anagrams2.get_anagrams("fagin")
    self.assertEqual(r, ['fagin'])

    _, r = self.anagrams2.get_anagrams("fags")
    self.assertEqual(r, ['fags'])

    _, r = self.anagrams2.get_anagrams("fahey")
    self.assertEqual(r, ['fahey'])

    _, r = self.anagrams2.get_anagrams("fahrenheit")
    self.assertEqual(r, ['fahrenheit'])

    _, r = self.anagrams2.get_anagrams("fahrenheits")
    self.assertEqual(r, ['fahrenheits'])

    _, r = self.anagrams2.get_anagrams("fail")
    self.assertEqual(r, ['fail'])

    _, r = self.anagrams2.get_anagrams("failed")
    self.assertEqual(r, ['afield', 'failed'])

    _, r = self.anagrams2.get_anagrams("failing")
    self.assertEqual(r, ['failing'])

    _, r = self.anagrams2.get_anagrams("failings")
    self.assertEqual(r, ['failings'])

    _, r = self.anagrams2.get_anagrams("fails")
    self.assertEqual(r, ['fails'])

    _, r = self.anagrams2.get_anagrams("failsoft")
    self.assertEqual(r, ['failsoft'])

    _, r = self.anagrams2.get_anagrams("failure")
    self.assertEqual(r, ['failure'])

    _, r = self.anagrams2.get_anagrams("failures")
    self.assertEqual(r, ['failures'])

    _, r = self.anagrams2.get_anagrams("fain")
    self.assertEqual(r, ['fain'])

    _, r = self.anagrams2.get_anagrams("faint")
    self.assertEqual(r, ['faint'])

    _, r = self.anagrams2.get_anagrams("fainted")
    self.assertEqual(r, ['defiant', 'fainted'])

    _, r = self.anagrams2.get_anagrams("fainter")
    self.assertEqual(r, ['fainter'])

    _, r = self.anagrams2.get_anagrams("faintest")
    self.assertEqual(r, ['faintest'])

    _, r = self.anagrams2.get_anagrams("fainting")
    self.assertEqual(r, ['fainting'])

    _, r = self.anagrams2.get_anagrams("faintly")
    self.assertEqual(r, ['faintly'])

    _, r = self.anagrams2.get_anagrams("faintness")
    self.assertEqual(r, ['faintness'])

    _, r = self.anagrams2.get_anagrams("faints")
    self.assertEqual(r, ['faints'])

    _, r = self.anagrams2.get_anagrams("fair")
    self.assertEqual(r, ['fair'])

    _, r = self.anagrams2.get_anagrams("fairbanks")
    self.assertEqual(r, ['fairbanks'])

    _, r = self.anagrams2.get_anagrams("fairchild")
    self.assertEqual(r, ['fairchild'])

    _, r = self.anagrams2.get_anagrams("fairer")
    self.assertEqual(r, ['fairer'])

    _, r = self.anagrams2.get_anagrams("fairest")
    self.assertEqual(r, ['fairest'])

    _, r = self.anagrams2.get_anagrams("fairfax")
    self.assertEqual(r, ['fairfax'])

    _, r = self.anagrams2.get_anagrams("fairfield")
    self.assertEqual(r, ['fairfield'])

    _, r = self.anagrams2.get_anagrams("fairies")
    self.assertEqual(r, ['fairies'])

    _, r = self.anagrams2.get_anagrams("fairing")
    self.assertEqual(r, ['fairing'])

    _, r = self.anagrams2.get_anagrams("fairly")
    self.assertEqual(r, ['fairly'])

    _, r = self.anagrams2.get_anagrams("fairmont")
    self.assertEqual(r, ['fairmont'])

    _, r = self.anagrams2.get_anagrams("fairness")
    self.assertEqual(r, ['fairness'])

    _, r = self.anagrams2.get_anagrams("fairport")
    self.assertEqual(r, ['fairport'])

    _, r = self.anagrams2.get_anagrams("fairs")
    self.assertEqual(r, ['fairs'])

    _, r = self.anagrams2.get_anagrams("fairview")
    self.assertEqual(r, ['fairview'])

    _, r = self.anagrams2.get_anagrams("fairy")
    self.assertEqual(r, ['fairy'])

    _, r = self.anagrams2.get_anagrams("fairyland")
    self.assertEqual(r, ['fairyland'])

    _, r = self.anagrams2.get_anagrams("faith")
    self.assertEqual(r, ['faith'])

    _, r = self.anagrams2.get_anagrams("faithful")
    self.assertEqual(r, ['faithful'])

    _, r = self.anagrams2.get_anagrams("faithfully")
    self.assertEqual(r, ['faithfully'])

    _, r = self.anagrams2.get_anagrams("faithfulness")
    self.assertEqual(r, ['faithfulness'])

    _, r = self.anagrams2.get_anagrams("faithless")
    self.assertEqual(r, ['faithless'])

    _, r = self.anagrams2.get_anagrams("faithlessly")
    self.assertEqual(r, ['faithlessly'])

    _, r = self.anagrams2.get_anagrams("faithlessness")
    self.assertEqual(r, ['faithlessness'])

    _, r = self.anagrams2.get_anagrams("faiths")
    self.assertEqual(r, ['faiths'])

    _, r = self.anagrams2.get_anagrams("fake")
    self.assertEqual(r, ['fake'])

    _, r = self.anagrams2.get_anagrams("faked")
    self.assertEqual(r, ['faked'])

    _, r = self.anagrams2.get_anagrams("faker")
    self.assertEqual(r, ['faker', 'freak'])

    _, r = self.anagrams2.get_anagrams("fakes")
    self.assertEqual(r, ['fakes'])

    _, r = self.anagrams2.get_anagrams("faking")
    self.assertEqual(r, ['faking'])

    _, r = self.anagrams2.get_anagrams("falcon")
    self.assertEqual(r, ['falcon'])

    _, r = self.anagrams2.get_anagrams("falconer")
    self.assertEqual(r, ['falconer'])

    _, r = self.anagrams2.get_anagrams("falcons")
    self.assertEqual(r, ['falcons'])

    _, r = self.anagrams2.get_anagrams("falk")
    self.assertEqual(r, ['falk', 'flak'])

    _, r = self.anagrams2.get_anagrams("falkland")
    self.assertEqual(r, ['falkland'])

    _, r = self.anagrams2.get_anagrams("falklands")
    self.assertEqual(r, ['falklands'])

    _, r = self.anagrams2.get_anagrams("fall")
    self.assertEqual(r, ['fall'])

    _, r = self.anagrams2.get_anagrams("fallacies")
    self.assertEqual(r, ['fallacies'])

    _, r = self.anagrams2.get_anagrams("fallacious")
    self.assertEqual(r, ['fallacious'])

    _, r = self.anagrams2.get_anagrams("fallacy")
    self.assertEqual(r, ['fallacy'])

    _, r = self.anagrams2.get_anagrams("fallen")
    self.assertEqual(r, ['fallen'])

    _, r = self.anagrams2.get_anagrams("fallibility")
    self.assertEqual(r, ['fallibility'])

    _, r = self.anagrams2.get_anagrams("fallible")
    self.assertEqual(r, ['fallible', 'fillable'])

    _, r = self.anagrams2.get_anagrams("falling")
    self.assertEqual(r, ['falling'])

    _, r = self.anagrams2.get_anagrams("fallopian")
    self.assertEqual(r, ['fallopian'])

    _, r = self.anagrams2.get_anagrams("fallout")
    self.assertEqual(r, ['fallout'])

    _, r = self.anagrams2.get_anagrams("fallow")
    self.assertEqual(r, ['fallow'])

    _, r = self.anagrams2.get_anagrams("falls")
    self.assertEqual(r, ['falls'])

    _, r = self.anagrams2.get_anagrams("falmouth")
    self.assertEqual(r, ['falmouth'])

    _, r = self.anagrams2.get_anagrams("false")
    self.assertEqual(r, ['false', 'fleas'])

    _, r = self.anagrams2.get_anagrams("falsehood")
    self.assertEqual(r, ['falsehood'])

    _, r = self.anagrams2.get_anagrams("falsehoods")
    self.assertEqual(r, ['falsehoods'])

    _, r = self.anagrams2.get_anagrams("falsely")
    self.assertEqual(r, ['falsely'])

    _, r = self.anagrams2.get_anagrams("falseness")
    self.assertEqual(r, ['falseness'])

    _, r = self.anagrams2.get_anagrams("falsification")
    self.assertEqual(r, ['falsification'])

    _, r = self.anagrams2.get_anagrams("falsified")
    self.assertEqual(r, ['falsified'])

    _, r = self.anagrams2.get_anagrams("falsifies")
    self.assertEqual(r, ['falsifies'])

    _, r = self.anagrams2.get_anagrams("falsify")
    self.assertEqual(r, ['falsify'])

    _, r = self.anagrams2.get_anagrams("falsifying")
    self.assertEqual(r, ['falsifying'])

    _, r = self.anagrams2.get_anagrams("falsity")
    self.assertEqual(r, ['falsity'])

    _, r = self.anagrams2.get_anagrams("falstaff")
    self.assertEqual(r, ['falstaff'])

    _, r = self.anagrams2.get_anagrams("falter")
    self.assertEqual(r, ['falter'])

    _, r = self.anagrams2.get_anagrams("faltered")
    self.assertEqual(r, ['deflater', 'faltered'])

    _, r = self.anagrams2.get_anagrams("falters")
    self.assertEqual(r, ['falters'])

    _, r = self.anagrams2.get_anagrams("fame")
    self.assertEqual(r, ['fame'])

    _, r = self.anagrams2.get_anagrams("famed")
    self.assertEqual(r, ['famed'])

    _, r = self.anagrams2.get_anagrams("fames")
    self.assertEqual(r, ['fames'])

    _, r = self.anagrams2.get_anagrams("familial")
    self.assertEqual(r, ['familial'])

    _, r = self.anagrams2.get_anagrams("familiar")
    self.assertEqual(r, ['familiar'])

    _, r = self.anagrams2.get_anagrams("familiarities")
    self.assertEqual(r, ['familiarities'])

    _, r = self.anagrams2.get_anagrams("familiarity")
    self.assertEqual(r, ['familiarity'])

    _, r = self.anagrams2.get_anagrams("familiarization")
    self.assertEqual(r, ['familiarization'])

    _, r = self.anagrams2.get_anagrams("familiarize")
    self.assertEqual(r, ['familiarize'])

    _, r = self.anagrams2.get_anagrams("familiarized")
    self.assertEqual(r, ['familiarized'])

    _, r = self.anagrams2.get_anagrams("familiarizes")
    self.assertEqual(r, ['familiarizes'])

    _, r = self.anagrams2.get_anagrams("familiarizing")
    self.assertEqual(r, ['familiarizing'])

    _, r = self.anagrams2.get_anagrams("familiarly")
    self.assertEqual(r, ['familiarly'])

    _, r = self.anagrams2.get_anagrams("familiarness")
    self.assertEqual(r, ['familiarness'])

    _, r = self.anagrams2.get_anagrams("families")
    self.assertEqual(r, ['families'])

    _, r = self.anagrams2.get_anagrams("familism")
    self.assertEqual(r, ['familism'])

    _, r = self.anagrams2.get_anagrams("family")
    self.assertEqual(r, ['family'])

    _, r = self.anagrams2.get_anagrams("famine")
    self.assertEqual(r, ['famine'])

    _, r = self.anagrams2.get_anagrams("famines")
    self.assertEqual(r, ['famines'])

    _, r = self.anagrams2.get_anagrams("famish")
    self.assertEqual(r, ['famish'])

    _, r = self.anagrams2.get_anagrams("famous")
    self.assertEqual(r, ['famous'])

    _, r = self.anagrams2.get_anagrams("famously")
    self.assertEqual(r, ['famously'])

    _, r = self.anagrams2.get_anagrams("fan")
    self.assertEqual(r, ['fan'])

    _, r = self.anagrams2.get_anagrams("fanatic")
    self.assertEqual(r, ['fanatic'])

    _, r = self.anagrams2.get_anagrams("fanaticism")
    self.assertEqual(r, ['fanaticism'])

    _, r = self.anagrams2.get_anagrams("fanatics")
    self.assertEqual(r, ['fanatics'])

    _, r = self.anagrams2.get_anagrams("fancied")
    self.assertEqual(r, ['fancied'])

    _, r = self.anagrams2.get_anagrams("fancier")
    self.assertEqual(r, ['fancier', 'francie'])

    _, r = self.anagrams2.get_anagrams("fanciers")
    self.assertEqual(r, ['fanciers'])

    _, r = self.anagrams2.get_anagrams("fancies")
    self.assertEqual(r, ['fancies'])

    _, r = self.anagrams2.get_anagrams("fanciest")
    self.assertEqual(r, ['fanciest'])

    _, r = self.anagrams2.get_anagrams("fanciful")
    self.assertEqual(r, ['fanciful'])

    _, r = self.anagrams2.get_anagrams("fancifully")
    self.assertEqual(r, ['fancifully'])

    _, r = self.anagrams2.get_anagrams("fancily")
    self.assertEqual(r, ['fancily'])

    _, r = self.anagrams2.get_anagrams("fanciness")
    self.assertEqual(r, ['fanciness'])

    _, r = self.anagrams2.get_anagrams("fancy")
    self.assertEqual(r, ['fancy'])

    _, r = self.anagrams2.get_anagrams("fancying")
    self.assertEqual(r, ['fancying'])

    _, r = self.anagrams2.get_anagrams("fanfare")
    self.assertEqual(r, ['fanfare'])

    _, r = self.anagrams2.get_anagrams("fanfold")
    self.assertEqual(r, ['fanfold'])

    _, r = self.anagrams2.get_anagrams("fang")
    self.assertEqual(r, ['fang'])

    _, r = self.anagrams2.get_anagrams("fangled")
    self.assertEqual(r, ['fangled'])

    _, r = self.anagrams2.get_anagrams("fangs")
    self.assertEqual(r, ['fangs'])

    _, r = self.anagrams2.get_anagrams("fanned")
    self.assertEqual(r, ['fanned'])

    _, r = self.anagrams2.get_anagrams("fannies")
    self.assertEqual(r, ['fannies'])

    _, r = self.anagrams2.get_anagrams("fanning")
    self.assertEqual(r, ['fanning'])

    _, r = self.anagrams2.get_anagrams("fanny")
    self.assertEqual(r, ['fanny'])

    _, r = self.anagrams2.get_anagrams("fanout")
    self.assertEqual(r, ['fanout'])

    _, r = self.anagrams2.get_anagrams("fans")
    self.assertEqual(r, ['fans'])

    _, r = self.anagrams2.get_anagrams("fantasies")
    self.assertEqual(r, ['fantasies'])

    _, r = self.anagrams2.get_anagrams("fantasize")
    self.assertEqual(r, ['fantasize'])

    _, r = self.anagrams2.get_anagrams("fantastic")
    self.assertEqual(r, ['fantastic'])

    _, r = self.anagrams2.get_anagrams("fantasy")
    self.assertEqual(r, ['fantasy'])

    _, r = self.anagrams2.get_anagrams("faq")
    self.assertEqual(r, ['faq'])

    _, r = self.anagrams2.get_anagrams("far")
    self.assertEqual(r, ['far'])

    _, r = self.anagrams2.get_anagrams("farad")
    self.assertEqual(r, ['farad'])

    _, r = self.anagrams2.get_anagrams("faraday")
    self.assertEqual(r, ['faraday'])

    _, r = self.anagrams2.get_anagrams("faraway")
    self.assertEqual(r, ['faraway'])

    _, r = self.anagrams2.get_anagrams("farber")
    self.assertEqual(r, ['farber'])

    _, r = self.anagrams2.get_anagrams("farce")
    self.assertEqual(r, ['farce'])

    _, r = self.anagrams2.get_anagrams("farces")
    self.assertEqual(r, ['farces'])

    _, r = self.anagrams2.get_anagrams("fare")
    self.assertEqual(r, ['fare', 'fear'])

    _, r = self.anagrams2.get_anagrams("fared")
    self.assertEqual(r, ['fader', 'fared'])

    _, r = self.anagrams2.get_anagrams("fares")
    self.assertEqual(r, ['fares', 'fears', 'safer'])

    _, r = self.anagrams2.get_anagrams("farewell")
    self.assertEqual(r, ['farewell'])

    _, r = self.anagrams2.get_anagrams("farewells")
    self.assertEqual(r, ['farewells'])

    _, r = self.anagrams2.get_anagrams("farfetched")
    self.assertEqual(r, ['farfetched'])

    _, r = self.anagrams2.get_anagrams("fargo")
    self.assertEqual(r, ['fargo'])

    _, r = self.anagrams2.get_anagrams("farina")
    self.assertEqual(r, ['farina'])

    _, r = self.anagrams2.get_anagrams("faring")
    self.assertEqual(r, ['faring'])

    _, r = self.anagrams2.get_anagrams("farkas")
    self.assertEqual(r, ['farkas'])

    _, r = self.anagrams2.get_anagrams("farley")
    self.assertEqual(r, ['farley'])

    _, r = self.anagrams2.get_anagrams("farm")
    self.assertEqual(r, ['farm'])

    _, r = self.anagrams2.get_anagrams("farmed")
    self.assertEqual(r, ['farmed', 'framed'])

    _, r = self.anagrams2.get_anagrams("farmer")
    self.assertEqual(r, ['farmer', 'framer'])

    _, r = self.anagrams2.get_anagrams("farmers")
    self.assertEqual(r, ['farmers'])

    _, r = self.anagrams2.get_anagrams("farmhouse")
    self.assertEqual(r, ['farmhouse'])

    _, r = self.anagrams2.get_anagrams("farmhouses")
    self.assertEqual(r, ['farmhouses'])

    _, r = self.anagrams2.get_anagrams("farming")
    self.assertEqual(r, ['farming', 'framing'])

    _, r = self.anagrams2.get_anagrams("farmington")
    self.assertEqual(r, ['farmington'])

    _, r = self.anagrams2.get_anagrams("farmland")
    self.assertEqual(r, ['farmland'])

    _, r = self.anagrams2.get_anagrams("farms")
    self.assertEqual(r, ['farms'])

    _, r = self.anagrams2.get_anagrams("farmyard")
    self.assertEqual(r, ['farmyard'])

    _, r = self.anagrams2.get_anagrams("farmyards")
    self.assertEqual(r, ['farmyards'])

    _, r = self.anagrams2.get_anagrams("farnsworth")
    self.assertEqual(r, ['farnsworth'])

    _, r = self.anagrams2.get_anagrams("farrell")
    self.assertEqual(r, ['farrell'])

    _, r = self.anagrams2.get_anagrams("farsighted")
    self.assertEqual(r, ['farsighted'])

    _, r = self.anagrams2.get_anagrams("farther")
    self.assertEqual(r, ['farther'])

    _, r = self.anagrams2.get_anagrams("farthest")
    self.assertEqual(r, ['farthest'])

    _, r = self.anagrams2.get_anagrams("farthing")
    self.assertEqual(r, ['farthing'])

    _, r = self.anagrams2.get_anagrams("fascicle")
    self.assertEqual(r, ['fascicle'])

    _, r = self.anagrams2.get_anagrams("fascinate")
    self.assertEqual(r, ['fascinate'])

    _, r = self.anagrams2.get_anagrams("fascinated")
    self.assertEqual(r, ['fascinated'])

    _, r = self.anagrams2.get_anagrams("fascinates")
    self.assertEqual(r, ['fascinates'])

    _, r = self.anagrams2.get_anagrams("fascinating")
    self.assertEqual(r, ['fascinating'])

    _, r = self.anagrams2.get_anagrams("fascination")
    self.assertEqual(r, ['fascination'])

    _, r = self.anagrams2.get_anagrams("fascism")
    self.assertEqual(r, ['fascism'])

    _, r = self.anagrams2.get_anagrams("fascist")
    self.assertEqual(r, ['fascist'])

    _, r = self.anagrams2.get_anagrams("fashion")
    self.assertEqual(r, ['fashion'])

    _, r = self.anagrams2.get_anagrams("fashionable")
    self.assertEqual(r, ['fashionable'])

    _, r = self.anagrams2.get_anagrams("fashionably")
    self.assertEqual(r, ['fashionably'])

    _, r = self.anagrams2.get_anagrams("fashioned")
    self.assertEqual(r, ['fashioned'])

    _, r = self.anagrams2.get_anagrams("fashioning")
    self.assertEqual(r, ['fashioning'])

    _, r = self.anagrams2.get_anagrams("fashions")
    self.assertEqual(r, ['fashions'])

    _, r = self.anagrams2.get_anagrams("fast")
    self.assertEqual(r, ['fast', 'fats'])

    _, r = self.anagrams2.get_anagrams("fasted")
    self.assertEqual(r, ['fasted'])

    _, r = self.anagrams2.get_anagrams("fasten")
    self.assertEqual(r, ['fasten', 'stefan'])

    _, r = self.anagrams2.get_anagrams("fastened")
    self.assertEqual(r, ['fastened'])

    _, r = self.anagrams2.get_anagrams("fastener")
    self.assertEqual(r, ['fastener'])

    _, r = self.anagrams2.get_anagrams("fasteners")
    self.assertEqual(r, ['fasteners'])

    _, r = self.anagrams2.get_anagrams("fastening")
    self.assertEqual(r, ['fastening'])

    _, r = self.anagrams2.get_anagrams("fastenings")
    self.assertEqual(r, ['fastenings'])

    _, r = self.anagrams2.get_anagrams("fastens")
    self.assertEqual(r, ['fastens', 'fatness'])

    _, r = self.anagrams2.get_anagrams("faster")
    self.assertEqual(r, ['faster', 'strafe'])

    _, r = self.anagrams2.get_anagrams("fastest")
    self.assertEqual(r, ['fastest'])

    _, r = self.anagrams2.get_anagrams("fastidious")
    self.assertEqual(r, ['fastidious'])

    _, r = self.anagrams2.get_anagrams("fasting")
    self.assertEqual(r, ['fasting'])

    _, r = self.anagrams2.get_anagrams("fastness")
    self.assertEqual(r, ['fastness'])

    _, r = self.anagrams2.get_anagrams("fasts")
    self.assertEqual(r, ['fasts'])

    _, r = self.anagrams2.get_anagrams("fat")
    self.assertEqual(r, ['aft', 'fat'])

    _, r = self.anagrams2.get_anagrams("fatal")
    self.assertEqual(r, ['fatal'])

    _, r = self.anagrams2.get_anagrams("fatalities")
    self.assertEqual(r, ['fatalities'])

    _, r = self.anagrams2.get_anagrams("fatality")
    self.assertEqual(r, ['fatality'])

    _, r = self.anagrams2.get_anagrams("fatally")
    self.assertEqual(r, ['fatally'])

    _, r = self.anagrams2.get_anagrams("fatals")
    self.assertEqual(r, ['fatals'])

    _, r = self.anagrams2.get_anagrams("fate")
    self.assertEqual(r, ['fate', 'feat'])

    _, r = self.anagrams2.get_anagrams("fated")
    self.assertEqual(r, ['fated'])

    _, r = self.anagrams2.get_anagrams("fateful")
    self.assertEqual(r, ['fateful'])

    _, r = self.anagrams2.get_anagrams("fates")
    self.assertEqual(r, ['fates', 'feast', 'feats'])

    _, r = self.anagrams2.get_anagrams("father")
    self.assertEqual(r, ['father'])

    _, r = self.anagrams2.get_anagrams("fathered")
    self.assertEqual(r, ['fathered'])

    _, r = self.anagrams2.get_anagrams("fatherland")
    self.assertEqual(r, ['fatherland'])

    _, r = self.anagrams2.get_anagrams("fatherly")
    self.assertEqual(r, ['fatherly'])

    _, r = self.anagrams2.get_anagrams("fathers")
    self.assertEqual(r, ['fathers'])

    _, r = self.anagrams2.get_anagrams("fathom")
    self.assertEqual(r, ['fathom'])

    _, r = self.anagrams2.get_anagrams("fathomed")
    self.assertEqual(r, ['fathomed'])

    _, r = self.anagrams2.get_anagrams("fathoming")
    self.assertEqual(r, ['fathoming'])

    _, r = self.anagrams2.get_anagrams("fathoms")
    self.assertEqual(r, ['fathoms'])

    _, r = self.anagrams2.get_anagrams("fatigue")
    self.assertEqual(r, ['fatigue'])

    _, r = self.anagrams2.get_anagrams("fatigued")
    self.assertEqual(r, ['fatigued'])

    _, r = self.anagrams2.get_anagrams("fatigues")
    self.assertEqual(r, ['fatigues'])

    _, r = self.anagrams2.get_anagrams("fatiguing")
    self.assertEqual(r, ['fatiguing'])

    _, r = self.anagrams2.get_anagrams("fatima")
    self.assertEqual(r, ['fatima'])

    _, r = self.anagrams2.get_anagrams("fatness")
    self.assertEqual(r, ['fastens', 'fatness'])

    _, r = self.anagrams2.get_anagrams("fats")
    self.assertEqual(r, ['fast', 'fats'])

    _, r = self.anagrams2.get_anagrams("fatten")
    self.assertEqual(r, ['fatten'])

    _, r = self.anagrams2.get_anagrams("fattened")
    self.assertEqual(r, ['fattened'])

    _, r = self.anagrams2.get_anagrams("fattener")
    self.assertEqual(r, ['fattener'])

    _, r = self.anagrams2.get_anagrams("fatteners")
    self.assertEqual(r, ['fatteners'])

    _, r = self.anagrams2.get_anagrams("fattening")
    self.assertEqual(r, ['fattening'])

    _, r = self.anagrams2.get_anagrams("fattens")
    self.assertEqual(r, ['fattens'])

    _, r = self.anagrams2.get_anagrams("fatter")
    self.assertEqual(r, ['fatter'])

    _, r = self.anagrams2.get_anagrams("fattest")
    self.assertEqual(r, ['fattest'])

    _, r = self.anagrams2.get_anagrams("fatty")
    self.assertEqual(r, ['fatty'])

    _, r = self.anagrams2.get_anagrams("faucet")
    self.assertEqual(r, ['faucet'])

    _, r = self.anagrams2.get_anagrams("faulkner")
    self.assertEqual(r, ['faulkner'])

    _, r = self.anagrams2.get_anagrams("faulknerian")
    self.assertEqual(r, ['faulknerian'])

    _, r = self.anagrams2.get_anagrams("fault")
    self.assertEqual(r, ['fault'])

    _, r = self.anagrams2.get_anagrams("faulted")
    self.assertEqual(r, ['default', 'faulted'])

    _, r = self.anagrams2.get_anagrams("faulting")
    self.assertEqual(r, ['faulting'])

    _, r = self.anagrams2.get_anagrams("faultless")
    self.assertEqual(r, ['faultless'])

    _, r = self.anagrams2.get_anagrams("faultlessly")
    self.assertEqual(r, ['faultlessly'])

    _, r = self.anagrams2.get_anagrams("faults")
    self.assertEqual(r, ['faults', 'flatus'])

    _, r = self.anagrams2.get_anagrams("faulty")
    self.assertEqual(r, ['faulty'])

    _, r = self.anagrams2.get_anagrams("faun")
    self.assertEqual(r, ['faun'])

    _, r = self.anagrams2.get_anagrams("fauna")
    self.assertEqual(r, ['fauna'])

    _, r = self.anagrams2.get_anagrams("fauntleroy")
    self.assertEqual(r, ['fauntleroy'])

    _, r = self.anagrams2.get_anagrams("faust")
    self.assertEqual(r, ['faust'])

    _, r = self.anagrams2.get_anagrams("faustian")
    self.assertEqual(r, ['faustian'])

    _, r = self.anagrams2.get_anagrams("faustus")
    self.assertEqual(r, ['faustus'])

    _, r = self.anagrams2.get_anagrams("favor")
    self.assertEqual(r, ['favor'])

    _, r = self.anagrams2.get_anagrams("favorable")
    self.assertEqual(r, ['favorable'])

    _, r = self.anagrams2.get_anagrams("favorably")
    self.assertEqual(r, ['favorably'])

    _, r = self.anagrams2.get_anagrams("favored")
    self.assertEqual(r, ['favored'])

    _, r = self.anagrams2.get_anagrams("favorer")
    self.assertEqual(r, ['favorer'])

    _, r = self.anagrams2.get_anagrams("favoring")
    self.assertEqual(r, ['favoring'])

    _, r = self.anagrams2.get_anagrams("favorite")
    self.assertEqual(r, ['favorite'])

    _, r = self.anagrams2.get_anagrams("favorites")
    self.assertEqual(r, ['favorites'])

    _, r = self.anagrams2.get_anagrams("favoritism")
    self.assertEqual(r, ['favoritism'])

    _, r = self.anagrams2.get_anagrams("favors")
    self.assertEqual(r, ['favors'])

    _, r = self.anagrams2.get_anagrams("fawkes")
    self.assertEqual(r, ['fawkes'])

    _, r = self.anagrams2.get_anagrams("fawn")
    self.assertEqual(r, ['fawn'])

    _, r = self.anagrams2.get_anagrams("fawned")
    self.assertEqual(r, ['fawned'])

    _, r = self.anagrams2.get_anagrams("fawning")
    self.assertEqual(r, ['fawning'])

    _, r = self.anagrams2.get_anagrams("fawns")
    self.assertEqual(r, ['fawns'])

    _, r = self.anagrams2.get_anagrams("fayette")
    self.assertEqual(r, ['fayette'])

    _, r = self.anagrams2.get_anagrams("fayetteville")
    self.assertEqual(r, ['fayetteville'])

    _, r = self.anagrams2.get_anagrams("faze")
    self.assertEqual(r, ['faze'])

    _, r = self.anagrams2.get_anagrams("fe")
    self.assertEqual(r, ['fe'])

    _, r = self.anagrams2.get_anagrams("fear")
    self.assertEqual(r, ['fare', 'fear'])

    _, r = self.anagrams2.get_anagrams("feared")
    self.assertEqual(r, ['deafer', 'feared'])

    _, r = self.anagrams2.get_anagrams("fearful")
    self.assertEqual(r, ['fearful'])

    _, r = self.anagrams2.get_anagrams("fearfully")
    self.assertEqual(r, ['fearfully'])

    _, r = self.anagrams2.get_anagrams("fearing")
    self.assertEqual(r, ['fearing'])

    _, r = self.anagrams2.get_anagrams("fearless")
    self.assertEqual(r, ['fearless'])

    _, r = self.anagrams2.get_anagrams("fearlessly")
    self.assertEqual(r, ['fearlessly'])

    _, r = self.anagrams2.get_anagrams("fearlessness")
    self.assertEqual(r, ['fearlessness'])

    _, r = self.anagrams2.get_anagrams("fears")
    self.assertEqual(r, ['fares', 'fears', 'safer'])

    _, r = self.anagrams2.get_anagrams("fearsome")
    self.assertEqual(r, ['fearsome'])

    _, r = self.anagrams2.get_anagrams("feasibility")
    self.assertEqual(r, ['feasibility'])

    _, r = self.anagrams2.get_anagrams("feasible")
    self.assertEqual(r, ['feasible'])

    _, r = self.anagrams2.get_anagrams("feast")
    self.assertEqual(r, ['fates', 'feast', 'feats'])

    _, r = self.anagrams2.get_anagrams("feasted")
    self.assertEqual(r, ['deafest', 'defeats', 'feasted'])

    _, r = self.anagrams2.get_anagrams("feasting")
    self.assertEqual(r, ['feasting'])

    _, r = self.anagrams2.get_anagrams("feasts")
    self.assertEqual(r, ['feasts', 'safest'])

    _, r = self.anagrams2.get_anagrams("feat")
    self.assertEqual(r, ['fate', 'feat'])

    _, r = self.anagrams2.get_anagrams("feather")
    self.assertEqual(r, ['feather'])

    _, r = self.anagrams2.get_anagrams("featherbed")
    self.assertEqual(r, ['featherbed'])

    _, r = self.anagrams2.get_anagrams("featherbedding")
    self.assertEqual(r, ['featherbedding'])

    _, r = self.anagrams2.get_anagrams("feathered")
    self.assertEqual(r, ['feathered'])

    _, r = self.anagrams2.get_anagrams("featherer")
    self.assertEqual(r, ['featherer', 'hereafter'])

    _, r = self.anagrams2.get_anagrams("featherers")
    self.assertEqual(r, ['featherers'])

    _, r = self.anagrams2.get_anagrams("feathering")
    self.assertEqual(r, ['feathering'])

    _, r = self.anagrams2.get_anagrams("featherman")
    self.assertEqual(r, ['featherman'])

    _, r = self.anagrams2.get_anagrams("feathers")
    self.assertEqual(r, ['feathers'])

    _, r = self.anagrams2.get_anagrams("featherweight")
    self.assertEqual(r, ['featherweight'])

    _, r = self.anagrams2.get_anagrams("feathery")
    self.assertEqual(r, ['feathery'])

    _, r = self.anagrams2.get_anagrams("feats")
    self.assertEqual(r, ['fates', 'feast', 'feats'])

    _, r = self.anagrams2.get_anagrams("feature")
    self.assertEqual(r, ['feature'])

    _, r = self.anagrams2.get_anagrams("featured")
    self.assertEqual(r, ['featured'])

    _, r = self.anagrams2.get_anagrams("features")
    self.assertEqual(r, ['features'])

    _, r = self.anagrams2.get_anagrams("featuring")
    self.assertEqual(r, ['featuring'])

    _, r = self.anagrams2.get_anagrams("februaries")
    self.assertEqual(r, ['februaries'])

    _, r = self.anagrams2.get_anagrams("february")
    self.assertEqual(r, ['february'])

    _, r = self.anagrams2.get_anagrams("fecund")
    self.assertEqual(r, ['fecund'])

    _, r = self.anagrams2.get_anagrams("fed")
    self.assertEqual(r, ['fed'])

    _, r = self.anagrams2.get_anagrams("fedders")
    self.assertEqual(r, ['fedders'])

    _, r = self.anagrams2.get_anagrams("federal")
    self.assertEqual(r, ['federal'])

    _, r = self.anagrams2.get_anagrams("federalist")
    self.assertEqual(r, ['federalist'])

    _, r = self.anagrams2.get_anagrams("federally")
    self.assertEqual(r, ['federally'])

    _, r = self.anagrams2.get_anagrams("federals")
    self.assertEqual(r, ['federals'])

    _, r = self.anagrams2.get_anagrams("federation")
    self.assertEqual(r, ['federation'])

    _, r = self.anagrams2.get_anagrams("fedora")
    self.assertEqual(r, ['fedora'])

    _, r = self.anagrams2.get_anagrams("fee")
    self.assertEqual(r, ['fee'])

    _, r = self.anagrams2.get_anagrams("feeble")
    self.assertEqual(r, ['feeble'])

    _, r = self.anagrams2.get_anagrams("feebleness")
    self.assertEqual(r, ['feebleness'])

    _, r = self.anagrams2.get_anagrams("feebler")
    self.assertEqual(r, ['feebler'])

    _, r = self.anagrams2.get_anagrams("feeblest")
    self.assertEqual(r, ['feeblest'])

    _, r = self.anagrams2.get_anagrams("feebly")
    self.assertEqual(r, ['feebly'])

    _, r = self.anagrams2.get_anagrams("feed")
    self.assertEqual(r, ['feed'])

    _, r = self.anagrams2.get_anagrams("feedback")
    self.assertEqual(r, ['feedback'])

    _, r = self.anagrams2.get_anagrams("feeder")
    self.assertEqual(r, ['feeder'])

    _, r = self.anagrams2.get_anagrams("feeders")
    self.assertEqual(r, ['feeders'])

    _, r = self.anagrams2.get_anagrams("feeding")
    self.assertEqual(r, ['feeding', 'feigned'])

    _, r = self.anagrams2.get_anagrams("feedings")
    self.assertEqual(r, ['feedings'])

    _, r = self.anagrams2.get_anagrams("feeds")
    self.assertEqual(r, ['feeds'])

    _, r = self.anagrams2.get_anagrams("feel")
    self.assertEqual(r, ['feel', 'flee'])

    _, r = self.anagrams2.get_anagrams("feeler")
    self.assertEqual(r, ['feeler'])

    _, r = self.anagrams2.get_anagrams("feelers")
    self.assertEqual(r, ['feelers'])

    _, r = self.anagrams2.get_anagrams("feeling")
    self.assertEqual(r, ['feeling', 'fleeing'])

    _, r = self.anagrams2.get_anagrams("feelingly")
    self.assertEqual(r, ['feelingly'])

    _, r = self.anagrams2.get_anagrams("feelings")
    self.assertEqual(r, ['feelings'])

    _, r = self.anagrams2.get_anagrams("feels")
    self.assertEqual(r, ['feels', 'flees'])

    _, r = self.anagrams2.get_anagrams("feeney")
    self.assertEqual(r, ['feeney'])

    _, r = self.anagrams2.get_anagrams("fees")
    self.assertEqual(r, ['fees'])

    _, r = self.anagrams2.get_anagrams("feet")
    self.assertEqual(r, ['feet'])

    _, r = self.anagrams2.get_anagrams("feign")
    self.assertEqual(r, ['feign'])

    _, r = self.anagrams2.get_anagrams("feigned")
    self.assertEqual(r, ['feeding', 'feigned'])

    _, r = self.anagrams2.get_anagrams("feigning")
    self.assertEqual(r, ['feigning'])

    _, r = self.anagrams2.get_anagrams("felder")
    self.assertEqual(r, ['felder'])

    _, r = self.anagrams2.get_anagrams("feldman")
    self.assertEqual(r, ['feldman'])

    _, r = self.anagrams2.get_anagrams("felice")
    self.assertEqual(r, ['felice'])

    _, r = self.anagrams2.get_anagrams("felicia")
    self.assertEqual(r, ['felicia'])

    _, r = self.anagrams2.get_anagrams("felicities")
    self.assertEqual(r, ['felicities'])

    _, r = self.anagrams2.get_anagrams("felicity")
    self.assertEqual(r, ['felicity'])

    _, r = self.anagrams2.get_anagrams("feline")
    self.assertEqual(r, ['feline'])

    _, r = self.anagrams2.get_anagrams("felix")
    self.assertEqual(r, ['felix'])

    _, r = self.anagrams2.get_anagrams("fell")
    self.assertEqual(r, ['fell'])

    _, r = self.anagrams2.get_anagrams("fellatio")
    self.assertEqual(r, ['fellatio'])

    _, r = self.anagrams2.get_anagrams("felled")
    self.assertEqual(r, ['felled'])

    _, r = self.anagrams2.get_anagrams("felling")
    self.assertEqual(r, ['felling'])

    _, r = self.anagrams2.get_anagrams("fellini")
    self.assertEqual(r, ['fellini'])

    _, r = self.anagrams2.get_anagrams("fellow")
    self.assertEqual(r, ['fellow'])

    _, r = self.anagrams2.get_anagrams("fellows")
    self.assertEqual(r, ['fellows'])

    _, r = self.anagrams2.get_anagrams("fellowship")
    self.assertEqual(r, ['fellowship'])

    _, r = self.anagrams2.get_anagrams("fellowships")
    self.assertEqual(r, ['fellowships'])

    _, r = self.anagrams2.get_anagrams("felon")
    self.assertEqual(r, ['felon'])

    _, r = self.anagrams2.get_anagrams("felonious")
    self.assertEqual(r, ['felonious'])

    _, r = self.anagrams2.get_anagrams("felony")
    self.assertEqual(r, ['felony'])

    _, r = self.anagrams2.get_anagrams("felt")
    self.assertEqual(r, ['felt', 'left'])

    _, r = self.anagrams2.get_anagrams("felts")
    self.assertEqual(r, ['felts'])

    _, r = self.anagrams2.get_anagrams("female")
    self.assertEqual(r, ['female'])

    _, r = self.anagrams2.get_anagrams("females")
    self.assertEqual(r, ['females'])

    _, r = self.anagrams2.get_anagrams("feminine")
    self.assertEqual(r, ['feminine'])

    _, r = self.anagrams2.get_anagrams("femininity")
    self.assertEqual(r, ['femininity'])

    _, r = self.anagrams2.get_anagrams("feminism")
    self.assertEqual(r, ['feminism'])

    _, r = self.anagrams2.get_anagrams("feminist")
    self.assertEqual(r, ['feminist'])

    _, r = self.anagrams2.get_anagrams("femur")
    self.assertEqual(r, ['femur'])

    _, r = self.anagrams2.get_anagrams("femurs")
    self.assertEqual(r, ['femurs'])

    _, r = self.anagrams2.get_anagrams("fen")
    self.assertEqual(r, ['fen'])

    _, r = self.anagrams2.get_anagrams("fence")
    self.assertEqual(r, ['fence'])

    _, r = self.anagrams2.get_anagrams("fenced")
    self.assertEqual(r, ['fenced'])

    _, r = self.anagrams2.get_anagrams("fencer")
    self.assertEqual(r, ['fencer'])

    _, r = self.anagrams2.get_anagrams("fencers")
    self.assertEqual(r, ['fencers'])

    _, r = self.anagrams2.get_anagrams("fences")
    self.assertEqual(r, ['fences'])

    _, r = self.anagrams2.get_anagrams("fencing")
    self.assertEqual(r, ['fencing'])

    _, r = self.anagrams2.get_anagrams("fend")
    self.assertEqual(r, ['fend'])

    _, r = self.anagrams2.get_anagrams("fenton")
    self.assertEqual(r, ['fenton'])

    _, r = self.anagrams2.get_anagrams("fenwick")
    self.assertEqual(r, ['fenwick'])

    _, r = self.anagrams2.get_anagrams("ferber")
    self.assertEqual(r, ['ferber'])

    _, r = self.anagrams2.get_anagrams("ferdinand")
    self.assertEqual(r, ['ferdinand'])

    _, r = self.anagrams2.get_anagrams("ferdinando")
    self.assertEqual(r, ['ferdinando'])

    _, r = self.anagrams2.get_anagrams("ferguson")
    self.assertEqual(r, ['ferguson'])

    _, r = self.anagrams2.get_anagrams("fermat")
    self.assertEqual(r, ['fermat'])

    _, r = self.anagrams2.get_anagrams("ferment")
    self.assertEqual(r, ['ferment'])

    _, r = self.anagrams2.get_anagrams("fermentation")
    self.assertEqual(r, ['fermentation'])

    _, r = self.anagrams2.get_anagrams("fermentations")
    self.assertEqual(r, ['fermentations'])

    _, r = self.anagrams2.get_anagrams("fermented")
    self.assertEqual(r, ['deferment', 'fermented'])

    _, r = self.anagrams2.get_anagrams("fermenting")
    self.assertEqual(r, ['fermenting'])

    _, r = self.anagrams2.get_anagrams("ferments")
    self.assertEqual(r, ['ferments'])

    _, r = self.anagrams2.get_anagrams("fermi")
    self.assertEqual(r, ['fermi'])

    _, r = self.anagrams2.get_anagrams("fern")
    self.assertEqual(r, ['fern'])

    _, r = self.anagrams2.get_anagrams("fernando")
    self.assertEqual(r, ['fernando'])

    _, r = self.anagrams2.get_anagrams("ferns")
    self.assertEqual(r, ['ferns'])

    _, r = self.anagrams2.get_anagrams("ferocious")
    self.assertEqual(r, ['ferocious'])

    _, r = self.anagrams2.get_anagrams("ferociously")
    self.assertEqual(r, ['ferociously'])

    _, r = self.anagrams2.get_anagrams("ferociousness")
    self.assertEqual(r, ['ferociousness'])

    _, r = self.anagrams2.get_anagrams("ferocity")
    self.assertEqual(r, ['ferocity'])

    _, r = self.anagrams2.get_anagrams("ferreira")
    self.assertEqual(r, ['ferreira'])

    _, r = self.anagrams2.get_anagrams("ferrer")
    self.assertEqual(r, ['ferrer'])

    _, r = self.anagrams2.get_anagrams("ferret")
    self.assertEqual(r, ['ferret'])

    _, r = self.anagrams2.get_anagrams("ferried")
    self.assertEqual(r, ['ferried'])

    _, r = self.anagrams2.get_anagrams("ferries")
    self.assertEqual(r, ['ferries'])

    _, r = self.anagrams2.get_anagrams("ferrite")
    self.assertEqual(r, ['ferrite'])

    _, r = self.anagrams2.get_anagrams("ferry")
    self.assertEqual(r, ['ferry'])

    _, r = self.anagrams2.get_anagrams("fertile")
    self.assertEqual(r, ['fertile'])

    _, r = self.anagrams2.get_anagrams("fertilely")
    self.assertEqual(r, ['fertilely'])

    _, r = self.anagrams2.get_anagrams("fertility")
    self.assertEqual(r, ['fertility'])

    _, r = self.anagrams2.get_anagrams("fertilization")
    self.assertEqual(r, ['fertilization'])

    _, r = self.anagrams2.get_anagrams("fertilize")
    self.assertEqual(r, ['fertilize'])

    _, r = self.anagrams2.get_anagrams("fertilized")
    self.assertEqual(r, ['fertilized'])

    _, r = self.anagrams2.get_anagrams("fertilizer")
    self.assertEqual(r, ['fertilizer'])

    _, r = self.anagrams2.get_anagrams("fertilizers")
    self.assertEqual(r, ['fertilizers'])

    _, r = self.anagrams2.get_anagrams("fertilizes")
    self.assertEqual(r, ['fertilizes'])

    _, r = self.anagrams2.get_anagrams("fertilizing")
    self.assertEqual(r, ['fertilizing'])

    _, r = self.anagrams2.get_anagrams("fervent")
    self.assertEqual(r, ['fervent'])

    _, r = self.anagrams2.get_anagrams("fervently")
    self.assertEqual(r, ['fervently'])

    _, r = self.anagrams2.get_anagrams("fervor")
    self.assertEqual(r, ['fervor'])

    _, r = self.anagrams2.get_anagrams("fervors")
    self.assertEqual(r, ['fervors'])

    _, r = self.anagrams2.get_anagrams("fess")
    self.assertEqual(r, ['fess'])

    _, r = self.anagrams2.get_anagrams("festival")
    self.assertEqual(r, ['festival'])

    _, r = self.anagrams2.get_anagrams("festivals")
    self.assertEqual(r, ['festivals'])

    _, r = self.anagrams2.get_anagrams("festive")
    self.assertEqual(r, ['festive'])

    _, r = self.anagrams2.get_anagrams("festively")
    self.assertEqual(r, ['festively'])

    _, r = self.anagrams2.get_anagrams("festivities")
    self.assertEqual(r, ['festivities'])

    _, r = self.anagrams2.get_anagrams("festivity")
    self.assertEqual(r, ['festivity'])

    _, r = self.anagrams2.get_anagrams("fetal")
    self.assertEqual(r, ['fetal'])

    _, r = self.anagrams2.get_anagrams("fetch")
    self.assertEqual(r, ['fetch'])

    _, r = self.anagrams2.get_anagrams("fetched")
    self.assertEqual(r, ['fetched'])

    _, r = self.anagrams2.get_anagrams("fetches")
    self.assertEqual(r, ['fetches'])

    _, r = self.anagrams2.get_anagrams("fetching")
    self.assertEqual(r, ['fetching'])

    _, r = self.anagrams2.get_anagrams("fetchingly")
    self.assertEqual(r, ['fetchingly'])

    _, r = self.anagrams2.get_anagrams("fetid")
    self.assertEqual(r, ['fetid'])

    _, r = self.anagrams2.get_anagrams("fetish")
    self.assertEqual(r, ['fetish'])

    _, r = self.anagrams2.get_anagrams("fetter")
    self.assertEqual(r, ['fetter'])

    _, r = self.anagrams2.get_anagrams("fettered")
    self.assertEqual(r, ['fettered'])

    _, r = self.anagrams2.get_anagrams("fetters")
    self.assertEqual(r, ['fetters'])

    _, r = self.anagrams2.get_anagrams("fettle")
    self.assertEqual(r, ['fettle'])

    _, r = self.anagrams2.get_anagrams("fetus")
    self.assertEqual(r, ['fetus'])

    _, r = self.anagrams2.get_anagrams("feud")
    self.assertEqual(r, ['feud'])

    _, r = self.anagrams2.get_anagrams("feudal")
    self.assertEqual(r, ['feudal'])

    _, r = self.anagrams2.get_anagrams("feudalism")
    self.assertEqual(r, ['feudalism'])

    _, r = self.anagrams2.get_anagrams("feuds")
    self.assertEqual(r, ['feuds', 'fused'])

    _, r = self.anagrams2.get_anagrams("fever")
    self.assertEqual(r, ['fever'])

    _, r = self.anagrams2.get_anagrams("fevered")
    self.assertEqual(r, ['fevered'])

    _, r = self.anagrams2.get_anagrams("feverish")
    self.assertEqual(r, ['feverish'])

    _, r = self.anagrams2.get_anagrams("feverishly")
    self.assertEqual(r, ['feverishly'])

    _, r = self.anagrams2.get_anagrams("fevers")
    self.assertEqual(r, ['fevers'])

    _, r = self.anagrams2.get_anagrams("few")
    self.assertEqual(r, ['few'])

    _, r = self.anagrams2.get_anagrams("fewer")
    self.assertEqual(r, ['fewer'])

    _, r = self.anagrams2.get_anagrams("fewest")
    self.assertEqual(r, ['fewest'])

    _, r = self.anagrams2.get_anagrams("fewness")
    self.assertEqual(r, ['fewness'])

    _, r = self.anagrams2.get_anagrams("fiance")
    self.assertEqual(r, ['fiance'])

    _, r = self.anagrams2.get_anagrams("fiancee")
    self.assertEqual(r, ['fiancee'])

    _, r = self.anagrams2.get_anagrams("fiasco")
    self.assertEqual(r, ['fiasco'])

    _, r = self.anagrams2.get_anagrams("fiat")
    self.assertEqual(r, ['fiat'])

    _, r = self.anagrams2.get_anagrams("fib")
    self.assertEqual(r, ['fib'])

    _, r = self.anagrams2.get_anagrams("fibbing")
    self.assertEqual(r, ['fibbing'])

    _, r = self.anagrams2.get_anagrams("fiber")
    self.assertEqual(r, ['brief', 'fiber'])

    _, r = self.anagrams2.get_anagrams("fiberglas")
    self.assertEqual(r, ['fiberglas'])

    _, r = self.anagrams2.get_anagrams("fibers")
    self.assertEqual(r, ['briefs', 'fibers'])

    _, r = self.anagrams2.get_anagrams("fibonacci")
    self.assertEqual(r, ['fibonacci'])

    _, r = self.anagrams2.get_anagrams("fibrosities")
    self.assertEqual(r, ['fibrosities'])

    _, r = self.anagrams2.get_anagrams("fibrosity")
    self.assertEqual(r, ['fibrosity'])

    _, r = self.anagrams2.get_anagrams("fibrous")
    self.assertEqual(r, ['fibrous'])

    _, r = self.anagrams2.get_anagrams("fibrously")
    self.assertEqual(r, ['fibrously'])

    _, r = self.anagrams2.get_anagrams("fickle")
    self.assertEqual(r, ['fickle'])

    _, r = self.anagrams2.get_anagrams("fickleness")
    self.assertEqual(r, ['fickleness'])

    _, r = self.anagrams2.get_anagrams("fiction")
    self.assertEqual(r, ['fiction'])

    _, r = self.anagrams2.get_anagrams("fictional")
    self.assertEqual(r, ['fictional'])

    _, r = self.anagrams2.get_anagrams("fictionally")
    self.assertEqual(r, ['fictionally'])

    _, r = self.anagrams2.get_anagrams("fictions")
    self.assertEqual(r, ['fictions'])

    _, r = self.anagrams2.get_anagrams("fictitious")
    self.assertEqual(r, ['fictitious'])

    _, r = self.anagrams2.get_anagrams("fictitiously")
    self.assertEqual(r, ['fictitiously'])

    _, r = self.anagrams2.get_anagrams("fiddle")
    self.assertEqual(r, ['fiddle'])

    _, r = self.anagrams2.get_anagrams("fiddled")
    self.assertEqual(r, ['fiddled'])

    _, r = self.anagrams2.get_anagrams("fiddler")
    self.assertEqual(r, ['fiddler'])

    _, r = self.anagrams2.get_anagrams("fiddles")
    self.assertEqual(r, ['fiddles'])

    _, r = self.anagrams2.get_anagrams("fiddlestick")
    self.assertEqual(r, ['fiddlestick'])

    _, r = self.anagrams2.get_anagrams("fiddlesticks")
    self.assertEqual(r, ['fiddlesticks'])

    _, r = self.anagrams2.get_anagrams("fiddling")
    self.assertEqual(r, ['fiddling'])

    _, r = self.anagrams2.get_anagrams("fidel")
    self.assertEqual(r, ['fidel', 'field', 'filed'])

    _, r = self.anagrams2.get_anagrams("fidelity")
    self.assertEqual(r, ['fidelity'])

    _, r = self.anagrams2.get_anagrams("fidget")
    self.assertEqual(r, ['fidget', 'gifted'])

    _, r = self.anagrams2.get_anagrams("fiducial")
    self.assertEqual(r, ['fiducial'])

    _, r = self.anagrams2.get_anagrams("fief")
    self.assertEqual(r, ['fief', 'fife'])

    _, r = self.anagrams2.get_anagrams("fiefdom")
    self.assertEqual(r, ['fiefdom'])

    _, r = self.anagrams2.get_anagrams("field")
    self.assertEqual(r, ['fidel', 'field', 'filed'])

    _, r = self.anagrams2.get_anagrams("fielded")
    self.assertEqual(r, ['fielded'])

    _, r = self.anagrams2.get_anagrams("fielder")
    self.assertEqual(r, ['fielder'])

    _, r = self.anagrams2.get_anagrams("fielders")
    self.assertEqual(r, ['fielders'])

    _, r = self.anagrams2.get_anagrams("fielding")
    self.assertEqual(r, ['defiling', 'fielding'])

    _, r = self.anagrams2.get_anagrams("fields")
    self.assertEqual(r, ['fields'])

    _, r = self.anagrams2.get_anagrams("fieldwork")
    self.assertEqual(r, ['fieldwork'])

    _, r = self.anagrams2.get_anagrams("fiend")
    self.assertEqual(r, ['fiend', 'fined'])

    _, r = self.anagrams2.get_anagrams("fiendish")
    self.assertEqual(r, ['fiendish', 'finished'])

    _, r = self.anagrams2.get_anagrams("fierce")
    self.assertEqual(r, ['fierce', 'recife'])

    _, r = self.anagrams2.get_anagrams("fiercely")
    self.assertEqual(r, ['fiercely'])

    _, r = self.anagrams2.get_anagrams("fierceness")
    self.assertEqual(r, ['fierceness'])

    _, r = self.anagrams2.get_anagrams("fiercer")
    self.assertEqual(r, ['fiercer'])

    _, r = self.anagrams2.get_anagrams("fiercest")
    self.assertEqual(r, ['fiercest'])

    _, r = self.anagrams2.get_anagrams("fiery")
    self.assertEqual(r, ['fiery'])

    _, r = self.anagrams2.get_anagrams("fife")
    self.assertEqual(r, ['fief', 'fife'])

    _, r = self.anagrams2.get_anagrams("fifteen")
    self.assertEqual(r, ['fifteen'])

    _, r = self.anagrams2.get_anagrams("fifteens")
    self.assertEqual(r, ['fifteens'])

    _, r = self.anagrams2.get_anagrams("fifteenth")
    self.assertEqual(r, ['fifteenth'])

    _, r = self.anagrams2.get_anagrams("fifth")
    self.assertEqual(r, ['fifth'])

    _, r = self.anagrams2.get_anagrams("fifties")
    self.assertEqual(r, ['fifties'])

    _, r = self.anagrams2.get_anagrams("fiftieth")
    self.assertEqual(r, ['fiftieth'])

    _, r = self.anagrams2.get_anagrams("fifty")
    self.assertEqual(r, ['fifty'])

    _, r = self.anagrams2.get_anagrams("fig")
    self.assertEqual(r, ['fig'])

    _, r = self.anagrams2.get_anagrams("figaro")
    self.assertEqual(r, ['figaro'])

    _, r = self.anagrams2.get_anagrams("fight")
    self.assertEqual(r, ['fight'])

    _, r = self.anagrams2.get_anagrams("fighter")
    self.assertEqual(r, ['fighter', 'freight'])

    _, r = self.anagrams2.get_anagrams("fighters")
    self.assertEqual(r, ['fighters', 'freights'])

    _, r = self.anagrams2.get_anagrams("fighting")
    self.assertEqual(r, ['fighting'])

    _, r = self.anagrams2.get_anagrams("fights")
    self.assertEqual(r, ['fights'])

    _, r = self.anagrams2.get_anagrams("figs")
    self.assertEqual(r, ['figs'])

    _, r = self.anagrams2.get_anagrams("figurative")
    self.assertEqual(r, ['figurative'])

    _, r = self.anagrams2.get_anagrams("figuratively")
    self.assertEqual(r, ['figuratively'])

    _, r = self.anagrams2.get_anagrams("figure")
    self.assertEqual(r, ['figure'])

    _, r = self.anagrams2.get_anagrams("figured")
    self.assertEqual(r, ['figured'])

    _, r = self.anagrams2.get_anagrams("figures")
    self.assertEqual(r, ['figures'])

    _, r = self.anagrams2.get_anagrams("figuring")
    self.assertEqual(r, ['figuring'])

    _, r = self.anagrams2.get_anagrams("figurings")
    self.assertEqual(r, ['figurings'])

    _, r = self.anagrams2.get_anagrams("fiji")
    self.assertEqual(r, ['fiji'])

    _, r = self.anagrams2.get_anagrams("fijian")
    self.assertEqual(r, ['fijian'])

    _, r = self.anagrams2.get_anagrams("fijians")
    self.assertEqual(r, ['fijians'])

    _, r = self.anagrams2.get_anagrams("filament")
    self.assertEqual(r, ['filament'])

    _, r = self.anagrams2.get_anagrams("filaments")
    self.assertEqual(r, ['filaments'])

    _, r = self.anagrams2.get_anagrams("file")
    self.assertEqual(r, ['file', 'life'])

    _, r = self.anagrams2.get_anagrams("filed")
    self.assertEqual(r, ['fidel', 'field', 'filed'])

    _, r = self.anagrams2.get_anagrams("filename")
    self.assertEqual(r, ['filename'])

    _, r = self.anagrams2.get_anagrams("filenames")
    self.assertEqual(r, ['filenames'])

    _, r = self.anagrams2.get_anagrams("filer")
    self.assertEqual(r, ['filer', 'flier', 'lifer', 'rifle'])

    _, r = self.anagrams2.get_anagrams("files")
    self.assertEqual(r, ['files', 'flies'])

    _, r = self.anagrams2.get_anagrams("filial")
    self.assertEqual(r, ['filial'])

    _, r = self.anagrams2.get_anagrams("filibuster")
    self.assertEqual(r, ['filibuster'])

    _, r = self.anagrams2.get_anagrams("filing")
    self.assertEqual(r, ['filing'])

    _, r = self.anagrams2.get_anagrams("filings")
    self.assertEqual(r, ['filings'])

    _, r = self.anagrams2.get_anagrams("filipino")
    self.assertEqual(r, ['filipino'])

    _, r = self.anagrams2.get_anagrams("filipinos")
    self.assertEqual(r, ['filipinos'])

    _, r = self.anagrams2.get_anagrams("filippo")
    self.assertEqual(r, ['filippo'])

    _, r = self.anagrams2.get_anagrams("fill")
    self.assertEqual(r, ['fill'])

    _, r = self.anagrams2.get_anagrams("fillable")
    self.assertEqual(r, ['fallible', 'fillable'])

    _, r = self.anagrams2.get_anagrams("filled")
    self.assertEqual(r, ['filled'])

    _, r = self.anagrams2.get_anagrams("filler")
    self.assertEqual(r, ['filler', 'refill'])

    _, r = self.anagrams2.get_anagrams("fillers")
    self.assertEqual(r, ['fillers', 'refills'])

    _, r = self.anagrams2.get_anagrams("filling")
    self.assertEqual(r, ['filling'])

    _, r = self.anagrams2.get_anagrams("fillings")
    self.assertEqual(r, ['fillings'])

    _, r = self.anagrams2.get_anagrams("fillmore")
    self.assertEqual(r, ['fillmore'])

    _, r = self.anagrams2.get_anagrams("fills")
    self.assertEqual(r, ['fills'])

    _, r = self.anagrams2.get_anagrams("filly")
    self.assertEqual(r, ['filly'])

    _, r = self.anagrams2.get_anagrams("film")
    self.assertEqual(r, ['film'])

    _, r = self.anagrams2.get_anagrams("filmed")
    self.assertEqual(r, ['filmed'])

    _, r = self.anagrams2.get_anagrams("filming")
    self.assertEqual(r, ['filming'])

    _, r = self.anagrams2.get_anagrams("films")
    self.assertEqual(r, ['films'])

    _, r = self.anagrams2.get_anagrams("filter")
    self.assertEqual(r, ['filter', 'lifter', 'trifle'])

    _, r = self.anagrams2.get_anagrams("filtered")
    self.assertEqual(r, ['filtered'])

    _, r = self.anagrams2.get_anagrams("filtering")
    self.assertEqual(r, ['filtering'])

    _, r = self.anagrams2.get_anagrams("filters")
    self.assertEqual(r, ['filters', 'lifters', 'trifles'])

    _, r = self.anagrams2.get_anagrams("filth")
    self.assertEqual(r, ['filth'])

    _, r = self.anagrams2.get_anagrams("filthier")
    self.assertEqual(r, ['filthier'])

    _, r = self.anagrams2.get_anagrams("filthiest")
    self.assertEqual(r, ['filthiest'])

    _, r = self.anagrams2.get_anagrams("filthiness")
    self.assertEqual(r, ['filthiness'])

    _, r = self.anagrams2.get_anagrams("filthy")
    self.assertEqual(r, ['filthy'])

    _, r = self.anagrams2.get_anagrams("fin")
    self.assertEqual(r, ['fin'])

    _, r = self.anagrams2.get_anagrams("final")
    self.assertEqual(r, ['final'])

    _, r = self.anagrams2.get_anagrams("finality")
    self.assertEqual(r, ['finality'])

    _, r = self.anagrams2.get_anagrams("finalization")
    self.assertEqual(r, ['finalization'])

    _, r = self.anagrams2.get_anagrams("finalize")
    self.assertEqual(r, ['finalize'])

    _, r = self.anagrams2.get_anagrams("finalized")
    self.assertEqual(r, ['finalized'])

    _, r = self.anagrams2.get_anagrams("finalizes")
    self.assertEqual(r, ['finalizes'])

    _, r = self.anagrams2.get_anagrams("finalizing")
    self.assertEqual(r, ['finalizing'])

    _, r = self.anagrams2.get_anagrams("finally")
    self.assertEqual(r, ['finally'])

    _, r = self.anagrams2.get_anagrams("finals")
    self.assertEqual(r, ['finals'])

    _, r = self.anagrams2.get_anagrams("finance")
    self.assertEqual(r, ['finance'])

    _, r = self.anagrams2.get_anagrams("financed")
    self.assertEqual(r, ['financed'])

    _, r = self.anagrams2.get_anagrams("finances")
    self.assertEqual(r, ['finances'])

    _, r = self.anagrams2.get_anagrams("financial")
    self.assertEqual(r, ['financial'])

    _, r = self.anagrams2.get_anagrams("financially")
    self.assertEqual(r, ['financially'])

    _, r = self.anagrams2.get_anagrams("financier")
    self.assertEqual(r, ['financier'])

    _, r = self.anagrams2.get_anagrams("financiers")
    self.assertEqual(r, ['financiers'])

    _, r = self.anagrams2.get_anagrams("financing")
    self.assertEqual(r, ['financing'])

    _, r = self.anagrams2.get_anagrams("find")
    self.assertEqual(r, ['find'])

    _, r = self.anagrams2.get_anagrams("finder")
    self.assertEqual(r, ['finder', 'friend'])

    _, r = self.anagrams2.get_anagrams("finders")
    self.assertEqual(r, ['finders', 'friends'])

    _, r = self.anagrams2.get_anagrams("finding")
    self.assertEqual(r, ['finding'])

    _, r = self.anagrams2.get_anagrams("findings")
    self.assertEqual(r, ['findings'])

    _, r = self.anagrams2.get_anagrams("finds")
    self.assertEqual(r, ['finds'])

    _, r = self.anagrams2.get_anagrams("fine")
    self.assertEqual(r, ['fine'])

    _, r = self.anagrams2.get_anagrams("fined")
    self.assertEqual(r, ['fiend', 'fined'])

    _, r = self.anagrams2.get_anagrams("finely")
    self.assertEqual(r, ['finely', 'finley'])

    _, r = self.anagrams2.get_anagrams("fineness")
    self.assertEqual(r, ['fineness'])

    _, r = self.anagrams2.get_anagrams("finer")
    self.assertEqual(r, ['finer', 'infer'])

    _, r = self.anagrams2.get_anagrams("fines")
    self.assertEqual(r, ['fines'])

    _, r = self.anagrams2.get_anagrams("finesse")
    self.assertEqual(r, ['finesse'])

    _, r = self.anagrams2.get_anagrams("finessed")
    self.assertEqual(r, ['finessed'])

    _, r = self.anagrams2.get_anagrams("finessing")
    self.assertEqual(r, ['finessing'])

    _, r = self.anagrams2.get_anagrams("finest")
    self.assertEqual(r, ['finest', 'infest'])

    _, r = self.anagrams2.get_anagrams("finger")
    self.assertEqual(r, ['finger', 'fringe'])

    _, r = self.anagrams2.get_anagrams("fingered")
    self.assertEqual(r, ['fingered'])

    _, r = self.anagrams2.get_anagrams("fingering")
    self.assertEqual(r, ['fingering'])

    _, r = self.anagrams2.get_anagrams("fingerings")
    self.assertEqual(r, ['fingerings'])

    _, r = self.anagrams2.get_anagrams("fingernail")
    self.assertEqual(r, ['fingernail'])

    _, r = self.anagrams2.get_anagrams("fingerprint")
    self.assertEqual(r, ['fingerprint'])

    _, r = self.anagrams2.get_anagrams("fingerprints")
    self.assertEqual(r, ['fingerprints'])

    _, r = self.anagrams2.get_anagrams("fingers")
    self.assertEqual(r, ['fingers'])

    _, r = self.anagrams2.get_anagrams("fingertip")
    self.assertEqual(r, ['fingertip'])

    _, r = self.anagrams2.get_anagrams("finicky")
    self.assertEqual(r, ['finicky'])

    _, r = self.anagrams2.get_anagrams("fining")
    self.assertEqual(r, ['fining'])

    _, r = self.anagrams2.get_anagrams("finish")
    self.assertEqual(r, ['finish'])

    _, r = self.anagrams2.get_anagrams("finished")
    self.assertEqual(r, ['fiendish', 'finished'])

    _, r = self.anagrams2.get_anagrams("finisher")
    self.assertEqual(r, ['finisher'])

    _, r = self.anagrams2.get_anagrams("finishers")
    self.assertEqual(r, ['finishers'])

    _, r = self.anagrams2.get_anagrams("finishes")
    self.assertEqual(r, ['finishes'])

    _, r = self.anagrams2.get_anagrams("finishing")
    self.assertEqual(r, ['finishing'])

    _, r = self.anagrams2.get_anagrams("finite")
    self.assertEqual(r, ['finite'])

    _, r = self.anagrams2.get_anagrams("finitely")
    self.assertEqual(r, ['finitely'])

    _, r = self.anagrams2.get_anagrams("finiteness")
    self.assertEqual(r, ['finiteness'])

    _, r = self.anagrams2.get_anagrams("fink")
    self.assertEqual(r, ['fink'])

    _, r = self.anagrams2.get_anagrams("finland")
    self.assertEqual(r, ['finland'])

    _, r = self.anagrams2.get_anagrams("finley")
    self.assertEqual(r, ['finely', 'finley'])

    _, r = self.anagrams2.get_anagrams("finn")
    self.assertEqual(r, ['finn'])

    _, r = self.anagrams2.get_anagrams("finnegan")
    self.assertEqual(r, ['finnegan'])

    _, r = self.anagrams2.get_anagrams("finnish")
    self.assertEqual(r, ['finnish'])

    _, r = self.anagrams2.get_anagrams("finns")
    self.assertEqual(r, ['finns'])

    _, r = self.anagrams2.get_anagrams("finny")
    self.assertEqual(r, ['finny'])

    _, r = self.anagrams2.get_anagrams("fins")
    self.assertEqual(r, ['fins'])

    _, r = self.anagrams2.get_anagrams("fiorello")
    self.assertEqual(r, ['fiorello'])

    _, r = self.anagrams2.get_anagrams("fiori")
    self.assertEqual(r, ['fiori'])

    _, r = self.anagrams2.get_anagrams("fir")
    self.assertEqual(r, ['fir'])

    _, r = self.anagrams2.get_anagrams("fire")
    self.assertEqual(r, ['fire'])

    _, r = self.anagrams2.get_anagrams("firearm")
    self.assertEqual(r, ['firearm'])

    _, r = self.anagrams2.get_anagrams("firearms")
    self.assertEqual(r, ['firearms'])

    _, r = self.anagrams2.get_anagrams("fireboat")
    self.assertEqual(r, ['fireboat'])

    _, r = self.anagrams2.get_anagrams("firebreak")
    self.assertEqual(r, ['firebreak'])

    _, r = self.anagrams2.get_anagrams("firebug")
    self.assertEqual(r, ['firebug'])

    _, r = self.anagrams2.get_anagrams("firecracker")
    self.assertEqual(r, ['firecracker'])

    _, r = self.anagrams2.get_anagrams("fired")
    self.assertEqual(r, ['fired', 'fried'])

    _, r = self.anagrams2.get_anagrams("fireflies")
    self.assertEqual(r, ['fireflies'])

    _, r = self.anagrams2.get_anagrams("firefly")
    self.assertEqual(r, ['firefly'])

    _, r = self.anagrams2.get_anagrams("firehouse")
    self.assertEqual(r, ['firehouse'])

    _, r = self.anagrams2.get_anagrams("firelight")
    self.assertEqual(r, ['firelight'])

    _, r = self.anagrams2.get_anagrams("fireman")
    self.assertEqual(r, ['fireman'])

    _, r = self.anagrams2.get_anagrams("firemen")
    self.assertEqual(r, ['firemen'])

    _, r = self.anagrams2.get_anagrams("fireplace")
    self.assertEqual(r, ['fireplace'])

    _, r = self.anagrams2.get_anagrams("fireplaces")
    self.assertEqual(r, ['fireplaces'])

    _, r = self.anagrams2.get_anagrams("firepower")
    self.assertEqual(r, ['firepower'])

    _, r = self.anagrams2.get_anagrams("fireproof")
    self.assertEqual(r, ['fireproof'])

    _, r = self.anagrams2.get_anagrams("firer")
    self.assertEqual(r, ['firer'])

    _, r = self.anagrams2.get_anagrams("firers")
    self.assertEqual(r, ['firers'])

    _, r = self.anagrams2.get_anagrams("fires")
    self.assertEqual(r, ['fires', 'fries', 'serif'])

    _, r = self.anagrams2.get_anagrams("fireside")
    self.assertEqual(r, ['fireside'])

    _, r = self.anagrams2.get_anagrams("firestone")
    self.assertEqual(r, ['firestone'])

    _, r = self.anagrams2.get_anagrams("firewall")
    self.assertEqual(r, ['firewall'])

    _, r = self.anagrams2.get_anagrams("firewood")
    self.assertEqual(r, ['firewood'])

    _, r = self.anagrams2.get_anagrams("fireworks")
    self.assertEqual(r, ['fireworks'])

    _, r = self.anagrams2.get_anagrams("firing")
    self.assertEqual(r, ['firing'])

    _, r = self.anagrams2.get_anagrams("firings")
    self.assertEqual(r, ['firings'])

    _, r = self.anagrams2.get_anagrams("firm")
    self.assertEqual(r, ['firm'])

    _, r = self.anagrams2.get_anagrams("firmament")
    self.assertEqual(r, ['firmament'])

    _, r = self.anagrams2.get_anagrams("firmed")
    self.assertEqual(r, ['firmed'])

    _, r = self.anagrams2.get_anagrams("firmer")
    self.assertEqual(r, ['firmer'])

    _, r = self.anagrams2.get_anagrams("firmest")
    self.assertEqual(r, ['firmest'])

    _, r = self.anagrams2.get_anagrams("firming")
    self.assertEqual(r, ['firming'])

    _, r = self.anagrams2.get_anagrams("firmly")
    self.assertEqual(r, ['firmly'])

    _, r = self.anagrams2.get_anagrams("firmness")
    self.assertEqual(r, ['firmness'])

    _, r = self.anagrams2.get_anagrams("firms")
    self.assertEqual(r, ['firms'])

    _, r = self.anagrams2.get_anagrams("firmware")
    self.assertEqual(r, ['firmware'])

    _, r = self.anagrams2.get_anagrams("first")
    self.assertEqual(r, ['first'])

    _, r = self.anagrams2.get_anagrams("firsthand")
    self.assertEqual(r, ['firsthand'])

    _, r = self.anagrams2.get_anagrams("firstly")
    self.assertEqual(r, ['firstly'])

    _, r = self.anagrams2.get_anagrams("firsts")
    self.assertEqual(r, ['firsts'])

    _, r = self.anagrams2.get_anagrams("fiscal")
    self.assertEqual(r, ['fiscal'])

    _, r = self.anagrams2.get_anagrams("fiscally")
    self.assertEqual(r, ['fiscally'])

    _, r = self.anagrams2.get_anagrams("fischbein")
    self.assertEqual(r, ['fischbein'])

    _, r = self.anagrams2.get_anagrams("fischer")
    self.assertEqual(r, ['fischer'])

    _, r = self.anagrams2.get_anagrams("fish")
    self.assertEqual(r, ['fish'])

    _, r = self.anagrams2.get_anagrams("fished")
    self.assertEqual(r, ['fished'])

    _, r = self.anagrams2.get_anagrams("fisher")
    self.assertEqual(r, ['fisher'])

    _, r = self.anagrams2.get_anagrams("fisherman")
    self.assertEqual(r, ['fisherman'])

    _, r = self.anagrams2.get_anagrams("fishermen")
    self.assertEqual(r, ['fishermen'])

    _, r = self.anagrams2.get_anagrams("fishers")
    self.assertEqual(r, ['fishers'])

    _, r = self.anagrams2.get_anagrams("fishery")
    self.assertEqual(r, ['fishery'])

    _, r = self.anagrams2.get_anagrams("fishes")
    self.assertEqual(r, ['fishes'])

    _, r = self.anagrams2.get_anagrams("fishing")
    self.assertEqual(r, ['fishing'])

    _, r = self.anagrams2.get_anagrams("fishkill")
    self.assertEqual(r, ['fishkill'])

    _, r = self.anagrams2.get_anagrams("fishmonger")
    self.assertEqual(r, ['fishmonger'])

    _, r = self.anagrams2.get_anagrams("fishpond")
    self.assertEqual(r, ['fishpond'])

    _, r = self.anagrams2.get_anagrams("fishy")
    self.assertEqual(r, ['fishy'])

    _, r = self.anagrams2.get_anagrams("fisk")
    self.assertEqual(r, ['fisk'])

    _, r = self.anagrams2.get_anagrams("fiske")
    self.assertEqual(r, ['fiske'])

    _, r = self.anagrams2.get_anagrams("fission")
    self.assertEqual(r, ['fission'])

    _, r = self.anagrams2.get_anagrams("fissure")
    self.assertEqual(r, ['fissure'])

    _, r = self.anagrams2.get_anagrams("fissured")
    self.assertEqual(r, ['fissured'])

    _, r = self.anagrams2.get_anagrams("fist")
    self.assertEqual(r, ['fist', 'fits', 'sift'])

    _, r = self.anagrams2.get_anagrams("fisted")
    self.assertEqual(r, ['fisted', 'sifted'])

    _, r = self.anagrams2.get_anagrams("fisticuff")
    self.assertEqual(r, ['fisticuff'])

    _, r = self.anagrams2.get_anagrams("fists")
    self.assertEqual(r, ['fists'])

    _, r = self.anagrams2.get_anagrams("fit")
    self.assertEqual(r, ['fit'])

    _, r = self.anagrams2.get_anagrams("fitch")
    self.assertEqual(r, ['fitch'])

    _, r = self.anagrams2.get_anagrams("fitchburg")
    self.assertEqual(r, ['fitchburg'])

    _, r = self.anagrams2.get_anagrams("fitful")
    self.assertEqual(r, ['fitful'])

    _, r = self.anagrams2.get_anagrams("fitfully")
    self.assertEqual(r, ['fitfully'])

    _, r = self.anagrams2.get_anagrams("fitly")
    self.assertEqual(r, ['fitly'])

    _, r = self.anagrams2.get_anagrams("fitness")
    self.assertEqual(r, ['fitness', 'infests'])

    _, r = self.anagrams2.get_anagrams("fits")
    self.assertEqual(r, ['fist', 'fits', 'sift'])

    _, r = self.anagrams2.get_anagrams("fitted")
    self.assertEqual(r, ['fitted'])

    _, r = self.anagrams2.get_anagrams("fitter")
    self.assertEqual(r, ['fitter'])

    _, r = self.anagrams2.get_anagrams("fitters")
    self.assertEqual(r, ['fitters'])

    _, r = self.anagrams2.get_anagrams("fitting")
    self.assertEqual(r, ['fitting'])

    _, r = self.anagrams2.get_anagrams("fittingly")
    self.assertEqual(r, ['fittingly'])

    _, r = self.anagrams2.get_anagrams("fittings")
    self.assertEqual(r, ['fittings'])

    _, r = self.anagrams2.get_anagrams("fitzgerald")
    self.assertEqual(r, ['fitzgerald'])

    _, r = self.anagrams2.get_anagrams("fitzpatrick")
    self.assertEqual(r, ['fitzpatrick'])

    _, r = self.anagrams2.get_anagrams("fitzroy")
    self.assertEqual(r, ['fitzroy'])

    _, r = self.anagrams2.get_anagrams("five")
    self.assertEqual(r, ['five'])

    _, r = self.anagrams2.get_anagrams("fivefold")
    self.assertEqual(r, ['fivefold'])

    _, r = self.anagrams2.get_anagrams("fives")
    self.assertEqual(r, ['fives'])

    _, r = self.anagrams2.get_anagrams("fix")
    self.assertEqual(r, ['fix'])

    _, r = self.anagrams2.get_anagrams("fixate")
    self.assertEqual(r, ['fixate'])

    _, r = self.anagrams2.get_anagrams("fixated")
    self.assertEqual(r, ['fixated'])

    _, r = self.anagrams2.get_anagrams("fixates")
    self.assertEqual(r, ['fixates'])

    _, r = self.anagrams2.get_anagrams("fixating")
    self.assertEqual(r, ['fixating'])

    _, r = self.anagrams2.get_anagrams("fixation")
    self.assertEqual(r, ['fixation'])

    _, r = self.anagrams2.get_anagrams("fixations")
    self.assertEqual(r, ['fixations'])

    _, r = self.anagrams2.get_anagrams("fixed")
    self.assertEqual(r, ['fixed'])

    _, r = self.anagrams2.get_anagrams("fixedly")
    self.assertEqual(r, ['fixedly'])

    _, r = self.anagrams2.get_anagrams("fixedness")
    self.assertEqual(r, ['fixedness'])

    _, r = self.anagrams2.get_anagrams("fixer")
    self.assertEqual(r, ['fixer'])

    _, r = self.anagrams2.get_anagrams("fixers")
    self.assertEqual(r, ['fixers'])

    _, r = self.anagrams2.get_anagrams("fixes")
    self.assertEqual(r, ['fixes'])

    _, r = self.anagrams2.get_anagrams("fixing")
    self.assertEqual(r, ['fixing'])

    _, r = self.anagrams2.get_anagrams("fixings")
    self.assertEqual(r, ['fixings'])

    _, r = self.anagrams2.get_anagrams("fixture")
    self.assertEqual(r, ['fixture'])

    _, r = self.anagrams2.get_anagrams("fixtures")
    self.assertEqual(r, ['fixtures'])

    _, r = self.anagrams2.get_anagrams("fizeau")
    self.assertEqual(r, ['fizeau'])

    _, r = self.anagrams2.get_anagrams("fizzle")
    self.assertEqual(r, ['fizzle'])

    _, r = self.anagrams2.get_anagrams("fizzled")
    self.assertEqual(r, ['fizzled'])

    _, r = self.anagrams2.get_anagrams("flabbergast")
    self.assertEqual(r, ['flabbergast'])

    _, r = self.anagrams2.get_anagrams("flabbergasted")
    self.assertEqual(r, ['flabbergasted'])

    _, r = self.anagrams2.get_anagrams("flack")
    self.assertEqual(r, ['flack'])

    _, r = self.anagrams2.get_anagrams("flag")
    self.assertEqual(r, ['flag'])

    _, r = self.anagrams2.get_anagrams("flagellate")
    self.assertEqual(r, ['flagellate'])

    _, r = self.anagrams2.get_anagrams("flagged")
    self.assertEqual(r, ['flagged'])

    _, r = self.anagrams2.get_anagrams("flagging")
    self.assertEqual(r, ['flagging'])

    _, r = self.anagrams2.get_anagrams("flagler")
    self.assertEqual(r, ['flagler'])

    _, r = self.anagrams2.get_anagrams("flagpole")
    self.assertEqual(r, ['flagpole'])

    _, r = self.anagrams2.get_anagrams("flagrant")
    self.assertEqual(r, ['flagrant'])

    _, r = self.anagrams2.get_anagrams("flagrantly")
    self.assertEqual(r, ['flagrantly'])

    _, r = self.anagrams2.get_anagrams("flags")
    self.assertEqual(r, ['flags'])

    _, r = self.anagrams2.get_anagrams("flagstaff")
    self.assertEqual(r, ['flagstaff'])

    _, r = self.anagrams2.get_anagrams("flail")
    self.assertEqual(r, ['flail'])

    _, r = self.anagrams2.get_anagrams("flair")
    self.assertEqual(r, ['flair', 'frail'])

    _, r = self.anagrams2.get_anagrams("flak")
    self.assertEqual(r, ['falk', 'flak'])

    _, r = self.anagrams2.get_anagrams("flake")
    self.assertEqual(r, ['flake'])

    _, r = self.anagrams2.get_anagrams("flaked")
    self.assertEqual(r, ['flaked'])

    _, r = self.anagrams2.get_anagrams("flakes")
    self.assertEqual(r, ['flakes'])

    _, r = self.anagrams2.get_anagrams("flaking")
    self.assertEqual(r, ['flaking'])

    _, r = self.anagrams2.get_anagrams("flaky")
    self.assertEqual(r, ['flaky'])

    _, r = self.anagrams2.get_anagrams("flam")
    self.assertEqual(r, ['flam'])

    _, r = self.anagrams2.get_anagrams("flamboyant")
    self.assertEqual(r, ['flamboyant'])

    _, r = self.anagrams2.get_anagrams("flame")
    self.assertEqual(r, ['flame'])

    _, r = self.anagrams2.get_anagrams("flamed")
    self.assertEqual(r, ['flamed'])

    _, r = self.anagrams2.get_anagrams("flamer")
    self.assertEqual(r, ['flamer'])

    _, r = self.anagrams2.get_anagrams("flamers")
    self.assertEqual(r, ['flamers'])

    _, r = self.anagrams2.get_anagrams("flames")
    self.assertEqual(r, ['flames'])

    _, r = self.anagrams2.get_anagrams("flaming")
    self.assertEqual(r, ['flaming'])

    _, r = self.anagrams2.get_anagrams("flammable")
    self.assertEqual(r, ['flammable'])

    _, r = self.anagrams2.get_anagrams("flanagan")
    self.assertEqual(r, ['flanagan'])

    _, r = self.anagrams2.get_anagrams("flanders")
    self.assertEqual(r, ['flanders'])

    _, r = self.anagrams2.get_anagrams("flank")
    self.assertEqual(r, ['flank'])

    _, r = self.anagrams2.get_anagrams("flanked")
    self.assertEqual(r, ['flanked'])

    _, r = self.anagrams2.get_anagrams("flanker")
    self.assertEqual(r, ['flanker', 'frankel'])

    _, r = self.anagrams2.get_anagrams("flanking")
    self.assertEqual(r, ['flanking'])

    _, r = self.anagrams2.get_anagrams("flanks")
    self.assertEqual(r, ['flanks'])

    _, r = self.anagrams2.get_anagrams("flannel")
    self.assertEqual(r, ['flannel'])

    _, r = self.anagrams2.get_anagrams("flannels")
    self.assertEqual(r, ['flannels'])

    _, r = self.anagrams2.get_anagrams("flap")
    self.assertEqual(r, ['flap'])

    _, r = self.anagrams2.get_anagrams("flaps")
    self.assertEqual(r, ['flaps'])

    _, r = self.anagrams2.get_anagrams("flare")
    self.assertEqual(r, ['flare'])

    _, r = self.anagrams2.get_anagrams("flared")
    self.assertEqual(r, ['alfred', 'flared'])

    _, r = self.anagrams2.get_anagrams("flares")
    self.assertEqual(r, ['flares'])

    _, r = self.anagrams2.get_anagrams("flaring")
    self.assertEqual(r, ['flaring'])

    _, r = self.anagrams2.get_anagrams("flash")
    self.assertEqual(r, ['flash'])

    _, r = self.anagrams2.get_anagrams("flashback")
    self.assertEqual(r, ['flashback'])

    _, r = self.anagrams2.get_anagrams("flashed")
    self.assertEqual(r, ['flashed'])

    _, r = self.anagrams2.get_anagrams("flasher")
    self.assertEqual(r, ['flasher'])

    _, r = self.anagrams2.get_anagrams("flashers")
    self.assertEqual(r, ['flashers'])

    _, r = self.anagrams2.get_anagrams("flashes")
    self.assertEqual(r, ['flashes'])

    _, r = self.anagrams2.get_anagrams("flashing")
    self.assertEqual(r, ['flashing'])

    _, r = self.anagrams2.get_anagrams("flashlight")
    self.assertEqual(r, ['flashlight'])

    _, r = self.anagrams2.get_anagrams("flashlights")
    self.assertEqual(r, ['flashlights'])

    _, r = self.anagrams2.get_anagrams("flashy")
    self.assertEqual(r, ['flashy'])

    _, r = self.anagrams2.get_anagrams("flask")
    self.assertEqual(r, ['flask'])

    _, r = self.anagrams2.get_anagrams("flat")
    self.assertEqual(r, ['flat'])

    _, r = self.anagrams2.get_anagrams("flatbed")
    self.assertEqual(r, ['flatbed'])

    _, r = self.anagrams2.get_anagrams("flatly")
    self.assertEqual(r, ['flatly'])

    _, r = self.anagrams2.get_anagrams("flatness")
    self.assertEqual(r, ['flatness'])

    _, r = self.anagrams2.get_anagrams("flats")
    self.assertEqual(r, ['flats'])

    _, r = self.anagrams2.get_anagrams("flatten")
    self.assertEqual(r, ['flatten'])

    _, r = self.anagrams2.get_anagrams("flattened")
    self.assertEqual(r, ['flattened'])

    _, r = self.anagrams2.get_anagrams("flattening")
    self.assertEqual(r, ['flattening'])

    _, r = self.anagrams2.get_anagrams("flatter")
    self.assertEqual(r, ['flatter'])

    _, r = self.anagrams2.get_anagrams("flattered")
    self.assertEqual(r, ['flattered'])

    _, r = self.anagrams2.get_anagrams("flatterer")
    self.assertEqual(r, ['flatterer'])

    _, r = self.anagrams2.get_anagrams("flattering")
    self.assertEqual(r, ['flattering'])

    _, r = self.anagrams2.get_anagrams("flattery")
    self.assertEqual(r, ['flattery'])

    _, r = self.anagrams2.get_anagrams("flattest")
    self.assertEqual(r, ['flattest'])

    _, r = self.anagrams2.get_anagrams("flatulent")
    self.assertEqual(r, ['flatulent'])

    _, r = self.anagrams2.get_anagrams("flatus")
    self.assertEqual(r, ['faults', 'flatus'])

    _, r = self.anagrams2.get_anagrams("flatworm")
    self.assertEqual(r, ['flatworm'])

    _, r = self.anagrams2.get_anagrams("flaunt")
    self.assertEqual(r, ['flaunt'])

    _, r = self.anagrams2.get_anagrams("flaunted")
    self.assertEqual(r, ['flaunted'])

    _, r = self.anagrams2.get_anagrams("flaunting")
    self.assertEqual(r, ['flaunting'])

    _, r = self.anagrams2.get_anagrams("flaunts")
    self.assertEqual(r, ['flaunts'])

    _, r = self.anagrams2.get_anagrams("flavor")
    self.assertEqual(r, ['flavor'])

    _, r = self.anagrams2.get_anagrams("flavored")
    self.assertEqual(r, ['flavored'])

    _, r = self.anagrams2.get_anagrams("flavoring")
    self.assertEqual(r, ['flavoring'])

    _, r = self.anagrams2.get_anagrams("flavorings")
    self.assertEqual(r, ['flavorings'])

    _, r = self.anagrams2.get_anagrams("flavors")
    self.assertEqual(r, ['flavors'])

    _, r = self.anagrams2.get_anagrams("flaw")
    self.assertEqual(r, ['flaw'])

    _, r = self.anagrams2.get_anagrams("flawed")
    self.assertEqual(r, ['flawed'])

    _, r = self.anagrams2.get_anagrams("flawless")
    self.assertEqual(r, ['flawless'])

    _, r = self.anagrams2.get_anagrams("flawlessly")
    self.assertEqual(r, ['flawlessly'])

    _, r = self.anagrams2.get_anagrams("flaws")
    self.assertEqual(r, ['flaws'])

    _, r = self.anagrams2.get_anagrams("flax")
    self.assertEqual(r, ['flax'])

    _, r = self.anagrams2.get_anagrams("flaxen")
    self.assertEqual(r, ['flaxen'])

    _, r = self.anagrams2.get_anagrams("flea")
    self.assertEqual(r, ['flea', 'leaf'])

    _, r = self.anagrams2.get_anagrams("fleas")
    self.assertEqual(r, ['false', 'fleas'])

    _, r = self.anagrams2.get_anagrams("fled")
    self.assertEqual(r, ['fled'])

    _, r = self.anagrams2.get_anagrams("fledermaus")
    self.assertEqual(r, ['fledermaus'])

    _, r = self.anagrams2.get_anagrams("fledged")
    self.assertEqual(r, ['fledged'])

    _, r = self.anagrams2.get_anagrams("fledgling")
    self.assertEqual(r, ['fledgling'])

    _, r = self.anagrams2.get_anagrams("fledglings")
    self.assertEqual(r, ['fledglings'])

    _, r = self.anagrams2.get_anagrams("flee")
    self.assertEqual(r, ['feel', 'flee'])

    _, r = self.anagrams2.get_anagrams("fleece")
    self.assertEqual(r, ['fleece'])

    _, r = self.anagrams2.get_anagrams("fleeces")
    self.assertEqual(r, ['fleeces'])

    _, r = self.anagrams2.get_anagrams("fleecy")
    self.assertEqual(r, ['fleecy'])

    _, r = self.anagrams2.get_anagrams("fleeing")
    self.assertEqual(r, ['feeling', 'fleeing'])

    _, r = self.anagrams2.get_anagrams("flees")
    self.assertEqual(r, ['feels', 'flees'])

    _, r = self.anagrams2.get_anagrams("fleet")
    self.assertEqual(r, ['fleet'])

    _, r = self.anagrams2.get_anagrams("fleetest")
    self.assertEqual(r, ['fleetest'])

    _, r = self.anagrams2.get_anagrams("fleeting")
    self.assertEqual(r, ['fleeting'])

    _, r = self.anagrams2.get_anagrams("fleetly")
    self.assertEqual(r, ['fleetly'])

    _, r = self.anagrams2.get_anagrams("fleetness")
    self.assertEqual(r, ['fleetness'])

    _, r = self.anagrams2.get_anagrams("fleets")
    self.assertEqual(r, ['fleets'])

    _, r = self.anagrams2.get_anagrams("fleischman")
    self.assertEqual(r, ['fleischman'])

    _, r = self.anagrams2.get_anagrams("fleisher")
    self.assertEqual(r, ['fleisher'])

    _, r = self.anagrams2.get_anagrams("fleming")
    self.assertEqual(r, ['fleming'])

    _, r = self.anagrams2.get_anagrams("flemings")
    self.assertEqual(r, ['flemings'])

    _, r = self.anagrams2.get_anagrams("flemish")
    self.assertEqual(r, ['flemish', 'himself'])

    _, r = self.anagrams2.get_anagrams("flemished")
    self.assertEqual(r, ['flemished'])

    _, r = self.anagrams2.get_anagrams("flemishes")
    self.assertEqual(r, ['flemishes'])

    _, r = self.anagrams2.get_anagrams("flemishing")
    self.assertEqual(r, ['flemishing'])

    _, r = self.anagrams2.get_anagrams("flesh")
    self.assertEqual(r, ['flesh', 'shelf'])

    _, r = self.anagrams2.get_anagrams("fleshed")
    self.assertEqual(r, ['fleshed'])

    _, r = self.anagrams2.get_anagrams("fleshes")
    self.assertEqual(r, ['fleshes'])

    _, r = self.anagrams2.get_anagrams("fleshing")
    self.assertEqual(r, ['fleshing'])

    _, r = self.anagrams2.get_anagrams("fleshly")
    self.assertEqual(r, ['fleshly'])

    _, r = self.anagrams2.get_anagrams("fleshy")
    self.assertEqual(r, ['fleshy'])

    _, r = self.anagrams2.get_anagrams("fletcher")
    self.assertEqual(r, ['fletcher'])

    _, r = self.anagrams2.get_anagrams("fletcherize")
    self.assertEqual(r, ['fletcherize'])

    _, r = self.anagrams2.get_anagrams("fletcherizes")
    self.assertEqual(r, ['fletcherizes'])

    _, r = self.anagrams2.get_anagrams("flew")
    self.assertEqual(r, ['flew'])

    _, r = self.anagrams2.get_anagrams("flex")
    self.assertEqual(r, ['flex'])

    _, r = self.anagrams2.get_anagrams("flexibilities")
    self.assertEqual(r, ['flexibilities'])

    _, r = self.anagrams2.get_anagrams("flexibility")
    self.assertEqual(r, ['flexibility'])

    _, r = self.anagrams2.get_anagrams("flexible")
    self.assertEqual(r, ['flexible'])

    _, r = self.anagrams2.get_anagrams("flexibly")
    self.assertEqual(r, ['flexibly'])

    _, r = self.anagrams2.get_anagrams("flick")
    self.assertEqual(r, ['flick'])

    _, r = self.anagrams2.get_anagrams("flicked")
    self.assertEqual(r, ['flicked'])

    _, r = self.anagrams2.get_anagrams("flicker")
    self.assertEqual(r, ['flicker'])

    _, r = self.anagrams2.get_anagrams("flickering")
    self.assertEqual(r, ['flickering'])

    _, r = self.anagrams2.get_anagrams("flicking")
    self.assertEqual(r, ['flicking'])

    _, r = self.anagrams2.get_anagrams("flicks")
    self.assertEqual(r, ['flicks'])

    _, r = self.anagrams2.get_anagrams("flier")
    self.assertEqual(r, ['filer', 'flier', 'lifer', 'rifle'])

    _, r = self.anagrams2.get_anagrams("fliers")
    self.assertEqual(r, ['fliers', 'rifles'])

    _, r = self.anagrams2.get_anagrams("flies")
    self.assertEqual(r, ['files', 'flies'])

    _, r = self.anagrams2.get_anagrams("flight")
    self.assertEqual(r, ['flight'])

    _, r = self.anagrams2.get_anagrams("flights")
    self.assertEqual(r, ['flights'])

    _, r = self.anagrams2.get_anagrams("flimsy")
    self.assertEqual(r, ['flimsy'])

    _, r = self.anagrams2.get_anagrams("flinch")
    self.assertEqual(r, ['flinch'])

    _, r = self.anagrams2.get_anagrams("flinched")
    self.assertEqual(r, ['flinched'])

    _, r = self.anagrams2.get_anagrams("flinches")
    self.assertEqual(r, ['flinches'])

    _, r = self.anagrams2.get_anagrams("flinching")
    self.assertEqual(r, ['flinching'])

    _, r = self.anagrams2.get_anagrams("fling")
    self.assertEqual(r, ['fling'])

    _, r = self.anagrams2.get_anagrams("flings")
    self.assertEqual(r, ['flings'])

    _, r = self.anagrams2.get_anagrams("flint")
    self.assertEqual(r, ['flint'])

    _, r = self.anagrams2.get_anagrams("flinty")
    self.assertEqual(r, ['flinty'])

    _, r = self.anagrams2.get_anagrams("flip")
    self.assertEqual(r, ['flip'])

    _, r = self.anagrams2.get_anagrams("flipflop")
    self.assertEqual(r, ['flipflop'])

    _, r = self.anagrams2.get_anagrams("flipped")
    self.assertEqual(r, ['flipped'])

    _, r = self.anagrams2.get_anagrams("flips")
    self.assertEqual(r, ['flips'])

    _, r = self.anagrams2.get_anagrams("flirt")
    self.assertEqual(r, ['flirt'])

    _, r = self.anagrams2.get_anagrams("flirtation")
    self.assertEqual(r, ['flirtation'])

    _, r = self.anagrams2.get_anagrams("flirtatious")
    self.assertEqual(r, ['flirtatious'])

    _, r = self.anagrams2.get_anagrams("flirted")
    self.assertEqual(r, ['flirted'])

    _, r = self.anagrams2.get_anagrams("flirting")
    self.assertEqual(r, ['flirting', 'trifling'])

    _, r = self.anagrams2.get_anagrams("flirts")
    self.assertEqual(r, ['flirts'])

    _, r = self.anagrams2.get_anagrams("flit")
    self.assertEqual(r, ['flit', 'lift'])

    _, r = self.anagrams2.get_anagrams("flitting")
    self.assertEqual(r, ['flitting'])

    _, r = self.anagrams2.get_anagrams("flo")
    self.assertEqual(r, ['flo'])

    _, r = self.anagrams2.get_anagrams("float")
    self.assertEqual(r, ['aloft', 'float'])

    _, r = self.anagrams2.get_anagrams("floated")
    self.assertEqual(r, ['floated'])

    _, r = self.anagrams2.get_anagrams("floater")
    self.assertEqual(r, ['floater'])

    _, r = self.anagrams2.get_anagrams("floating")
    self.assertEqual(r, ['floating'])

    _, r = self.anagrams2.get_anagrams("floats")
    self.assertEqual(r, ['floats'])

    _, r = self.anagrams2.get_anagrams("flock")
    self.assertEqual(r, ['flock'])

    _, r = self.anagrams2.get_anagrams("flocked")
    self.assertEqual(r, ['flocked'])

    _, r = self.anagrams2.get_anagrams("flocking")
    self.assertEqual(r, ['flocking'])

    _, r = self.anagrams2.get_anagrams("flocks")
    self.assertEqual(r, ['flocks'])

    _, r = self.anagrams2.get_anagrams("flog")
    self.assertEqual(r, ['flog', 'golf'])

    _, r = self.anagrams2.get_anagrams("flogging")
    self.assertEqual(r, ['flogging'])

    _, r = self.anagrams2.get_anagrams("flood")
    self.assertEqual(r, ['flood'])

    _, r = self.anagrams2.get_anagrams("flooded")
    self.assertEqual(r, ['flooded'])

    _, r = self.anagrams2.get_anagrams("flooding")
    self.assertEqual(r, ['flooding'])

    _, r = self.anagrams2.get_anagrams("floodlight")
    self.assertEqual(r, ['floodlight'])

    _, r = self.anagrams2.get_anagrams("floodlit")
    self.assertEqual(r, ['floodlit'])

    _, r = self.anagrams2.get_anagrams("floods")
    self.assertEqual(r, ['floods'])

    _, r = self.anagrams2.get_anagrams("floor")
    self.assertEqual(r, ['floor'])

    _, r = self.anagrams2.get_anagrams("floored")
    self.assertEqual(r, ['floored'])

    _, r = self.anagrams2.get_anagrams("flooring")
    self.assertEqual(r, ['flooring'])

    _, r = self.anagrams2.get_anagrams("floorings")
    self.assertEqual(r, ['floorings'])

    _, r = self.anagrams2.get_anagrams("floors")
    self.assertEqual(r, ['floors'])

    _, r = self.anagrams2.get_anagrams("flop")
    self.assertEqual(r, ['flop'])

    _, r = self.anagrams2.get_anagrams("floppies")
    self.assertEqual(r, ['floppies'])

    _, r = self.anagrams2.get_anagrams("floppily")
    self.assertEqual(r, ['floppily'])

    _, r = self.anagrams2.get_anagrams("flopping")
    self.assertEqual(r, ['flopping'])

    _, r = self.anagrams2.get_anagrams("floppy")
    self.assertEqual(r, ['floppy'])

    _, r = self.anagrams2.get_anagrams("flops")
    self.assertEqual(r, ['flops'])

    _, r = self.anagrams2.get_anagrams("flora")
    self.assertEqual(r, ['flora'])

    _, r = self.anagrams2.get_anagrams("floral")
    self.assertEqual(r, ['floral'])

    _, r = self.anagrams2.get_anagrams("florence")
    self.assertEqual(r, ['florence'])

    _, r = self.anagrams2.get_anagrams("florentine")
    self.assertEqual(r, ['florentine'])

    _, r = self.anagrams2.get_anagrams("florid")
    self.assertEqual(r, ['florid'])

    _, r = self.anagrams2.get_anagrams("florida")
    self.assertEqual(r, ['florida'])

    _, r = self.anagrams2.get_anagrams("floridian")
    self.assertEqual(r, ['floridian'])

    _, r = self.anagrams2.get_anagrams("floridians")
    self.assertEqual(r, ['floridians'])

    _, r = self.anagrams2.get_anagrams("florin")
    self.assertEqual(r, ['florin'])

    _, r = self.anagrams2.get_anagrams("florist")
    self.assertEqual(r, ['florist'])

    _, r = self.anagrams2.get_anagrams("floss")
    self.assertEqual(r, ['floss'])

    _, r = self.anagrams2.get_anagrams("flossed")
    self.assertEqual(r, ['flossed'])

    _, r = self.anagrams2.get_anagrams("flosses")
    self.assertEqual(r, ['flosses'])

    _, r = self.anagrams2.get_anagrams("flossing")
    self.assertEqual(r, ['flossing'])

    _, r = self.anagrams2.get_anagrams("flotation")
    self.assertEqual(r, ['flotation'])

    _, r = self.anagrams2.get_anagrams("flotilla")
    self.assertEqual(r, ['flotilla'])

    _, r = self.anagrams2.get_anagrams("flounder")
    self.assertEqual(r, ['flounder'])

    _, r = self.anagrams2.get_anagrams("floundered")
    self.assertEqual(r, ['floundered'])

    _, r = self.anagrams2.get_anagrams("floundering")
    self.assertEqual(r, ['floundering'])

    _, r = self.anagrams2.get_anagrams("flounders")
    self.assertEqual(r, ['flounders'])

    _, r = self.anagrams2.get_anagrams("flour")
    self.assertEqual(r, ['flour'])

    _, r = self.anagrams2.get_anagrams("floured")
    self.assertEqual(r, ['floured'])

    _, r = self.anagrams2.get_anagrams("flourish")
    self.assertEqual(r, ['flourish'])

    _, r = self.anagrams2.get_anagrams("flourished")
    self.assertEqual(r, ['flourished'])

    _, r = self.anagrams2.get_anagrams("flourishes")
    self.assertEqual(r, ['flourishes'])

    _, r = self.anagrams2.get_anagrams("flourishing")
    self.assertEqual(r, ['flourishing'])

    _, r = self.anagrams2.get_anagrams("flow")
    self.assertEqual(r, ['flow', 'fowl', 'wolf'])

    _, r = self.anagrams2.get_anagrams("flowchart")
    self.assertEqual(r, ['flowchart'])

    _, r = self.anagrams2.get_anagrams("flowcharting")
    self.assertEqual(r, ['flowcharting'])

    _, r = self.anagrams2.get_anagrams("flowcharts")
    self.assertEqual(r, ['flowcharts'])

    _, r = self.anagrams2.get_anagrams("flowed")
    self.assertEqual(r, ['flowed'])

    _, r = self.anagrams2.get_anagrams("flower")
    self.assertEqual(r, ['flower', 'fowler'])

    _, r = self.anagrams2.get_anagrams("flowered")
    self.assertEqual(r, ['flowered'])

    _, r = self.anagrams2.get_anagrams("floweriness")
    self.assertEqual(r, ['floweriness'])

    _, r = self.anagrams2.get_anagrams("flowering")
    self.assertEqual(r, ['flowering'])

    _, r = self.anagrams2.get_anagrams("flowerpot")
    self.assertEqual(r, ['flowerpot'])

    _, r = self.anagrams2.get_anagrams("flowers")
    self.assertEqual(r, ['flowers'])

    _, r = self.anagrams2.get_anagrams("flowery")
    self.assertEqual(r, ['flowery'])

    _, r = self.anagrams2.get_anagrams("flowing")
    self.assertEqual(r, ['flowing'])

    _, r = self.anagrams2.get_anagrams("flown")
    self.assertEqual(r, ['flown'])

    _, r = self.anagrams2.get_anagrams("flows")
    self.assertEqual(r, ['flows', 'fowls'])

    _, r = self.anagrams2.get_anagrams("floyd")
    self.assertEqual(r, ['floyd'])

    _, r = self.anagrams2.get_anagrams("flu")
    self.assertEqual(r, ['flu'])

    _, r = self.anagrams2.get_anagrams("fluctuate")
    self.assertEqual(r, ['fluctuate'])

    _, r = self.anagrams2.get_anagrams("fluctuates")
    self.assertEqual(r, ['fluctuates'])

    _, r = self.anagrams2.get_anagrams("fluctuating")
    self.assertEqual(r, ['fluctuating'])

    _, r = self.anagrams2.get_anagrams("fluctuation")
    self.assertEqual(r, ['fluctuation'])

    _, r = self.anagrams2.get_anagrams("fluctuations")
    self.assertEqual(r, ['fluctuations'])

    _, r = self.anagrams2.get_anagrams("flue")
    self.assertEqual(r, ['flue', 'fuel'])

    _, r = self.anagrams2.get_anagrams("fluency")
    self.assertEqual(r, ['fluency'])

    _, r = self.anagrams2.get_anagrams("fluent")
    self.assertEqual(r, ['fluent'])

    _, r = self.anagrams2.get_anagrams("fluently")
    self.assertEqual(r, ['fluently'])

    _, r = self.anagrams2.get_anagrams("fluff")
    self.assertEqual(r, ['fluff'])

    _, r = self.anagrams2.get_anagrams("fluffier")
    self.assertEqual(r, ['fluffier'])

    _, r = self.anagrams2.get_anagrams("fluffiest")
    self.assertEqual(r, ['fluffiest'])

    _, r = self.anagrams2.get_anagrams("fluffy")
    self.assertEqual(r, ['fluffy'])

    _, r = self.anagrams2.get_anagrams("fluid")
    self.assertEqual(r, ['fluid'])

    _, r = self.anagrams2.get_anagrams("fluidity")
    self.assertEqual(r, ['fluidity'])

    _, r = self.anagrams2.get_anagrams("fluidly")
    self.assertEqual(r, ['fluidly'])

    _, r = self.anagrams2.get_anagrams("fluids")
    self.assertEqual(r, ['fluids'])

    _, r = self.anagrams2.get_anagrams("fluke")
    self.assertEqual(r, ['fluke'])

    _, r = self.anagrams2.get_anagrams("flung")
    self.assertEqual(r, ['flung'])

    _, r = self.anagrams2.get_anagrams("flunked")
    self.assertEqual(r, ['flunked'])

    _, r = self.anagrams2.get_anagrams("fluoresce")
    self.assertEqual(r, ['fluoresce'])

    _, r = self.anagrams2.get_anagrams("fluorescent")
    self.assertEqual(r, ['fluorescent'])

    _, r = self.anagrams2.get_anagrams("flurried")
    self.assertEqual(r, ['flurried'])

    _, r = self.anagrams2.get_anagrams("flurry")
    self.assertEqual(r, ['flurry'])

    _, r = self.anagrams2.get_anagrams("flush")
    self.assertEqual(r, ['flush'])

    _, r = self.anagrams2.get_anagrams("flushed")
    self.assertEqual(r, ['flushed'])

    _, r = self.anagrams2.get_anagrams("flushes")
    self.assertEqual(r, ['flushes'])

    _, r = self.anagrams2.get_anagrams("flushing")
    self.assertEqual(r, ['flushing'])

    _, r = self.anagrams2.get_anagrams("flute")
    self.assertEqual(r, ['flute'])

    _, r = self.anagrams2.get_anagrams("fluted")
    self.assertEqual(r, ['fluted'])

    _, r = self.anagrams2.get_anagrams("fluting")
    self.assertEqual(r, ['fluting'])

    _, r = self.anagrams2.get_anagrams("flutter")
    self.assertEqual(r, ['flutter'])

    _, r = self.anagrams2.get_anagrams("fluttered")
    self.assertEqual(r, ['fluttered'])

    _, r = self.anagrams2.get_anagrams("fluttering")
    self.assertEqual(r, ['fluttering'])

    _, r = self.anagrams2.get_anagrams("flutters")
    self.assertEqual(r, ['flutters'])

    _, r = self.anagrams2.get_anagrams("flux")
    self.assertEqual(r, ['flux'])

    _, r = self.anagrams2.get_anagrams("fly")
    self.assertEqual(r, ['fly'])

    _, r = self.anagrams2.get_anagrams("flyable")
    self.assertEqual(r, ['flyable'])

    _, r = self.anagrams2.get_anagrams("flyer")
    self.assertEqual(r, ['flyer'])

    _, r = self.anagrams2.get_anagrams("flyers")
    self.assertEqual(r, ['flyers'])

    _, r = self.anagrams2.get_anagrams("flying")
    self.assertEqual(r, ['flying'])

    _, r = self.anagrams2.get_anagrams("flynn")
    self.assertEqual(r, ['flynn'])

    _, r = self.anagrams2.get_anagrams("foal")
    self.assertEqual(r, ['foal', 'loaf', 'olaf'])

    _, r = self.anagrams2.get_anagrams("foam")
    self.assertEqual(r, ['foam'])

    _, r = self.anagrams2.get_anagrams("foamed")
    self.assertEqual(r, ['foamed'])

    _, r = self.anagrams2.get_anagrams("foaming")
    self.assertEqual(r, ['foaming'])

    _, r = self.anagrams2.get_anagrams("foams")
    self.assertEqual(r, ['foams'])

    _, r = self.anagrams2.get_anagrams("foamy")
    self.assertEqual(r, ['foamy'])

    _, r = self.anagrams2.get_anagrams("fob")
    self.assertEqual(r, ['fob'])

    _, r = self.anagrams2.get_anagrams("fobbing")
    self.assertEqual(r, ['fobbing'])

    _, r = self.anagrams2.get_anagrams("focal")
    self.assertEqual(r, ['focal'])

    _, r = self.anagrams2.get_anagrams("focally")
    self.assertEqual(r, ['focally'])

    _, r = self.anagrams2.get_anagrams("foci")
    self.assertEqual(r, ['foci'])

    _, r = self.anagrams2.get_anagrams("focus")
    self.assertEqual(r, ['focus'])

    _, r = self.anagrams2.get_anagrams("focused")
    self.assertEqual(r, ['defocus', 'focused'])

    _, r = self.anagrams2.get_anagrams("focuses")
    self.assertEqual(r, ['focuses'])

    _, r = self.anagrams2.get_anagrams("focusing")
    self.assertEqual(r, ['focusing'])

    _, r = self.anagrams2.get_anagrams("focussed")
    self.assertEqual(r, ['focussed'])

    _, r = self.anagrams2.get_anagrams("fodder")
    self.assertEqual(r, ['fodder'])

    _, r = self.anagrams2.get_anagrams("foe")
    self.assertEqual(r, ['foe'])

    _, r = self.anagrams2.get_anagrams("foes")
    self.assertEqual(r, ['foes'])

    _, r = self.anagrams2.get_anagrams("fog")
    self.assertEqual(r, ['fog'])

    _, r = self.anagrams2.get_anagrams("fogarty")
    self.assertEqual(r, ['fogarty'])

    _, r = self.anagrams2.get_anagrams("fogged")
    self.assertEqual(r, ['fogged'])

    _, r = self.anagrams2.get_anagrams("foggier")
    self.assertEqual(r, ['foggier'])

    _, r = self.anagrams2.get_anagrams("foggiest")
    self.assertEqual(r, ['foggiest'])

    _, r = self.anagrams2.get_anagrams("foggily")
    self.assertEqual(r, ['foggily'])

    _, r = self.anagrams2.get_anagrams("fogging")
    self.assertEqual(r, ['fogging'])

    _, r = self.anagrams2.get_anagrams("foggy")
    self.assertEqual(r, ['foggy'])

    _, r = self.anagrams2.get_anagrams("fogs")
    self.assertEqual(r, ['fogs'])

    _, r = self.anagrams2.get_anagrams("fogy")
    self.assertEqual(r, ['fogy'])

    _, r = self.anagrams2.get_anagrams("foible")
    self.assertEqual(r, ['foible'])

    _, r = self.anagrams2.get_anagrams("foil")
    self.assertEqual(r, ['foil'])

    _, r = self.anagrams2.get_anagrams("foiled")
    self.assertEqual(r, ['foiled'])

    _, r = self.anagrams2.get_anagrams("foiling")
    self.assertEqual(r, ['foiling'])

    _, r = self.anagrams2.get_anagrams("foils")
    self.assertEqual(r, ['foils'])

    _, r = self.anagrams2.get_anagrams("foist")
    self.assertEqual(r, ['foist'])

    _, r = self.anagrams2.get_anagrams("fold")
    self.assertEqual(r, ['fold'])

    _, r = self.anagrams2.get_anagrams("folded")
    self.assertEqual(r, ['folded'])

    _, r = self.anagrams2.get_anagrams("folder")
    self.assertEqual(r, ['folder'])

    _, r = self.anagrams2.get_anagrams("folders")
    self.assertEqual(r, ['folders'])

    _, r = self.anagrams2.get_anagrams("folding")
    self.assertEqual(r, ['folding'])

    _, r = self.anagrams2.get_anagrams("foldout")
    self.assertEqual(r, ['foldout'])

    _, r = self.anagrams2.get_anagrams("folds")
    self.assertEqual(r, ['folds'])

    _, r = self.anagrams2.get_anagrams("foley")
    self.assertEqual(r, ['foley'])

    _, r = self.anagrams2.get_anagrams("foliage")
    self.assertEqual(r, ['foliage'])

    _, r = self.anagrams2.get_anagrams("folk")
    self.assertEqual(r, ['folk'])

    _, r = self.anagrams2.get_anagrams("folklore")
    self.assertEqual(r, ['folklore'])

    _, r = self.anagrams2.get_anagrams("folks")
    self.assertEqual(r, ['folks'])

    _, r = self.anagrams2.get_anagrams("folksong")
    self.assertEqual(r, ['folksong'])

    _, r = self.anagrams2.get_anagrams("folksy")
    self.assertEqual(r, ['folksy'])

    _, r = self.anagrams2.get_anagrams("follies")
    self.assertEqual(r, ['follies'])

    _, r = self.anagrams2.get_anagrams("follow")
    self.assertEqual(r, ['follow'])

    _, r = self.anagrams2.get_anagrams("followed")
    self.assertEqual(r, ['followed'])

    _, r = self.anagrams2.get_anagrams("follower")
    self.assertEqual(r, ['follower'])

    _, r = self.anagrams2.get_anagrams("followers")
    self.assertEqual(r, ['followers'])

    _, r = self.anagrams2.get_anagrams("following")
    self.assertEqual(r, ['following'])

    _, r = self.anagrams2.get_anagrams("followings")
    self.assertEqual(r, ['followings'])

    _, r = self.anagrams2.get_anagrams("follows")
    self.assertEqual(r, ['follows'])

    _, r = self.anagrams2.get_anagrams("folly")
    self.assertEqual(r, ['folly'])

    _, r = self.anagrams2.get_anagrams("folsom")
    self.assertEqual(r, ['folsom'])

    _, r = self.anagrams2.get_anagrams("fomalhaut")
    self.assertEqual(r, ['fomalhaut'])

    _, r = self.anagrams2.get_anagrams("fond")
    self.assertEqual(r, ['fond'])

    _, r = self.anagrams2.get_anagrams("fonder")
    self.assertEqual(r, ['fonder'])

    _, r = self.anagrams2.get_anagrams("fondle")
    self.assertEqual(r, ['fondle'])

    _, r = self.anagrams2.get_anagrams("fondled")
    self.assertEqual(r, ['fondled'])

    _, r = self.anagrams2.get_anagrams("fondles")
    self.assertEqual(r, ['fondles'])

    _, r = self.anagrams2.get_anagrams("fondling")
    self.assertEqual(r, ['fondling'])

    _, r = self.anagrams2.get_anagrams("fondly")
    self.assertEqual(r, ['fondly'])

    _, r = self.anagrams2.get_anagrams("fondness")
    self.assertEqual(r, ['fondness'])

    _, r = self.anagrams2.get_anagrams("font")
    self.assertEqual(r, ['font'])

    _, r = self.anagrams2.get_anagrams("fontaine")
    self.assertEqual(r, ['fontaine'])

    _, r = self.anagrams2.get_anagrams("fontainebleau")
    self.assertEqual(r, ['fontainebleau'])

    _, r = self.anagrams2.get_anagrams("fontana")
    self.assertEqual(r, ['fontana'])

    _, r = self.anagrams2.get_anagrams("fonts")
    self.assertEqual(r, ['fonts'])

    _, r = self.anagrams2.get_anagrams("food")
    self.assertEqual(r, ['food'])

    _, r = self.anagrams2.get_anagrams("foods")
    self.assertEqual(r, ['foods'])

    _, r = self.anagrams2.get_anagrams("foodstuff")
    self.assertEqual(r, ['foodstuff'])

    _, r = self.anagrams2.get_anagrams("foodstuffs")
    self.assertEqual(r, ['foodstuffs'])

    _, r = self.anagrams2.get_anagrams("fool")
    self.assertEqual(r, ['fool'])

    _, r = self.anagrams2.get_anagrams("fooled")
    self.assertEqual(r, ['fooled'])

    _, r = self.anagrams2.get_anagrams("foolhardy")
    self.assertEqual(r, ['foolhardy'])

    _, r = self.anagrams2.get_anagrams("fooling")
    self.assertEqual(r, ['fooling'])

    _, r = self.anagrams2.get_anagrams("foolish")
    self.assertEqual(r, ['foolish'])

    _, r = self.anagrams2.get_anagrams("foolishly")
    self.assertEqual(r, ['foolishly'])

    _, r = self.anagrams2.get_anagrams("foolishness")
    self.assertEqual(r, ['foolishness'])

    _, r = self.anagrams2.get_anagrams("foolproof")
    self.assertEqual(r, ['foolproof'])

    _, r = self.anagrams2.get_anagrams("fools")
    self.assertEqual(r, ['fools'])

    _, r = self.anagrams2.get_anagrams("foot")
    self.assertEqual(r, ['foot'])

    _, r = self.anagrams2.get_anagrams("footage")
    self.assertEqual(r, ['footage'])

    _, r = self.anagrams2.get_anagrams("football")
    self.assertEqual(r, ['football'])

    _, r = self.anagrams2.get_anagrams("footballs")
    self.assertEqual(r, ['footballs'])

    _, r = self.anagrams2.get_anagrams("footbridge")
    self.assertEqual(r, ['footbridge'])

    _, r = self.anagrams2.get_anagrams("foote")
    self.assertEqual(r, ['foote'])

    _, r = self.anagrams2.get_anagrams("footed")
    self.assertEqual(r, ['footed'])

    _, r = self.anagrams2.get_anagrams("footer")
    self.assertEqual(r, ['footer'])

    _, r = self.anagrams2.get_anagrams("footers")
    self.assertEqual(r, ['footers'])

    _, r = self.anagrams2.get_anagrams("footfall")
    self.assertEqual(r, ['footfall'])

    _, r = self.anagrams2.get_anagrams("foothill")
    self.assertEqual(r, ['foothill'])

    _, r = self.anagrams2.get_anagrams("foothold")
    self.assertEqual(r, ['foothold'])

    _, r = self.anagrams2.get_anagrams("footing")
    self.assertEqual(r, ['footing'])

    _, r = self.anagrams2.get_anagrams("footman")
    self.assertEqual(r, ['footman'])

    _, r = self.anagrams2.get_anagrams("footnote")
    self.assertEqual(r, ['footnote'])

    _, r = self.anagrams2.get_anagrams("footnotes")
    self.assertEqual(r, ['footnotes'])

    _, r = self.anagrams2.get_anagrams("footpath")
    self.assertEqual(r, ['footpath'])

    _, r = self.anagrams2.get_anagrams("footprint")
    self.assertEqual(r, ['footprint'])

    _, r = self.anagrams2.get_anagrams("footprints")
    self.assertEqual(r, ['footprints'])

    _, r = self.anagrams2.get_anagrams("footstep")
    self.assertEqual(r, ['footstep'])

    _, r = self.anagrams2.get_anagrams("footsteps")
    self.assertEqual(r, ['footsteps'])

    _, r = self.anagrams2.get_anagrams("for")
    self.assertEqual(r, ['for', 'fro'])

    _, r = self.anagrams2.get_anagrams("forage")
    self.assertEqual(r, ['forage'])

    _, r = self.anagrams2.get_anagrams("foraged")
    self.assertEqual(r, ['foraged'])

    _, r = self.anagrams2.get_anagrams("forages")
    self.assertEqual(r, ['forages'])

    _, r = self.anagrams2.get_anagrams("foraging")
    self.assertEqual(r, ['foraging'])

    _, r = self.anagrams2.get_anagrams("foray")
    self.assertEqual(r, ['foray'])

    _, r = self.anagrams2.get_anagrams("forays")
    self.assertEqual(r, ['forays'])

    _, r = self.anagrams2.get_anagrams("forbade")
    self.assertEqual(r, ['forbade'])

    _, r = self.anagrams2.get_anagrams("forbear")
    self.assertEqual(r, ['forbear'])

    _, r = self.anagrams2.get_anagrams("forbearance")
    self.assertEqual(r, ['forbearance'])

    _, r = self.anagrams2.get_anagrams("forbears")
    self.assertEqual(r, ['forbears'])

    _, r = self.anagrams2.get_anagrams("forbes")
    self.assertEqual(r, ['forbes'])

    _, r = self.anagrams2.get_anagrams("forbid")
    self.assertEqual(r, ['forbid'])

    _, r = self.anagrams2.get_anagrams("forbidden")
    self.assertEqual(r, ['forbidden'])

    _, r = self.anagrams2.get_anagrams("forbidding")
    self.assertEqual(r, ['forbidding'])

    _, r = self.anagrams2.get_anagrams("forbids")
    self.assertEqual(r, ['forbids'])

    _, r = self.anagrams2.get_anagrams("force")
    self.assertEqual(r, ['force'])

    _, r = self.anagrams2.get_anagrams("forced")
    self.assertEqual(r, ['forced'])

    _, r = self.anagrams2.get_anagrams("forceful")
    self.assertEqual(r, ['forceful'])

    _, r = self.anagrams2.get_anagrams("forcefully")
    self.assertEqual(r, ['forcefully'])

    _, r = self.anagrams2.get_anagrams("forcefulness")
    self.assertEqual(r, ['forcefulness'])

    _, r = self.anagrams2.get_anagrams("forcer")
    self.assertEqual(r, ['forcer'])

    _, r = self.anagrams2.get_anagrams("forces")
    self.assertEqual(r, ['forces', 'fresco'])

    _, r = self.anagrams2.get_anagrams("forcible")
    self.assertEqual(r, ['forcible'])

    _, r = self.anagrams2.get_anagrams("forcibly")
    self.assertEqual(r, ['forcibly'])

    _, r = self.anagrams2.get_anagrams("forcing")
    self.assertEqual(r, ['forcing'])

    _, r = self.anagrams2.get_anagrams("ford")
    self.assertEqual(r, ['ford'])

    _, r = self.anagrams2.get_anagrams("fordham")
    self.assertEqual(r, ['fordham'])

    _, r = self.anagrams2.get_anagrams("fords")
    self.assertEqual(r, ['fords'])

    _, r = self.anagrams2.get_anagrams("fore")
    self.assertEqual(r, ['fore'])

    _, r = self.anagrams2.get_anagrams("forearm")
    self.assertEqual(r, ['forearm'])

    _, r = self.anagrams2.get_anagrams("forearms")
    self.assertEqual(r, ['forearms'])

    _, r = self.anagrams2.get_anagrams("foreboding")
    self.assertEqual(r, ['foreboding'])

    _, r = self.anagrams2.get_anagrams("forecast")
    self.assertEqual(r, ['forecast'])

    _, r = self.anagrams2.get_anagrams("forecasted")
    self.assertEqual(r, ['forecasted'])

    _, r = self.anagrams2.get_anagrams("forecaster")
    self.assertEqual(r, ['forecaster'])

    _, r = self.anagrams2.get_anagrams("forecasters")
    self.assertEqual(r, ['forecasters'])

    _, r = self.anagrams2.get_anagrams("forecasting")
    self.assertEqual(r, ['forecasting'])

    _, r = self.anagrams2.get_anagrams("forecastle")
    self.assertEqual(r, ['forecastle'])

    _, r = self.anagrams2.get_anagrams("forecasts")
    self.assertEqual(r, ['forecasts'])

    _, r = self.anagrams2.get_anagrams("forefather")
    self.assertEqual(r, ['forefather'])

    _, r = self.anagrams2.get_anagrams("forefathers")
    self.assertEqual(r, ['forefathers'])

    _, r = self.anagrams2.get_anagrams("forefinger")
    self.assertEqual(r, ['forefinger'])

    _, r = self.anagrams2.get_anagrams("forefingers")
    self.assertEqual(r, ['forefingers'])

    _, r = self.anagrams2.get_anagrams("forego")
    self.assertEqual(r, ['forego'])

    _, r = self.anagrams2.get_anagrams("foregoes")
    self.assertEqual(r, ['foregoes'])

    _, r = self.anagrams2.get_anagrams("foregoing")
    self.assertEqual(r, ['foregoing'])

    _, r = self.anagrams2.get_anagrams("foregone")
    self.assertEqual(r, ['foregone'])

    _, r = self.anagrams2.get_anagrams("foreground")
    self.assertEqual(r, ['foreground'])

    _, r = self.anagrams2.get_anagrams("forehead")
    self.assertEqual(r, ['forehead'])

    _, r = self.anagrams2.get_anagrams("foreheads")
    self.assertEqual(r, ['foreheads'])

    _, r = self.anagrams2.get_anagrams("foreign")
    self.assertEqual(r, ['foreign'])

    _, r = self.anagrams2.get_anagrams("foreigner")
    self.assertEqual(r, ['foreigner'])

    _, r = self.anagrams2.get_anagrams("foreigners")
    self.assertEqual(r, ['foreigners'])

    _, r = self.anagrams2.get_anagrams("foreigns")
    self.assertEqual(r, ['foreigns'])

    _, r = self.anagrams2.get_anagrams("foreman")
    self.assertEqual(r, ['foreman'])

    _, r = self.anagrams2.get_anagrams("foremost")
    self.assertEqual(r, ['foremost'])

    _, r = self.anagrams2.get_anagrams("forenoon")
    self.assertEqual(r, ['forenoon'])

    _, r = self.anagrams2.get_anagrams("forensic")
    self.assertEqual(r, ['forensic'])

    _, r = self.anagrams2.get_anagrams("forerunners")
    self.assertEqual(r, ['forerunners'])

    _, r = self.anagrams2.get_anagrams("foresee")
    self.assertEqual(r, ['foresee'])

    _, r = self.anagrams2.get_anagrams("foreseeable")
    self.assertEqual(r, ['foreseeable'])

    _, r = self.anagrams2.get_anagrams("foreseen")
    self.assertEqual(r, ['foreseen'])

    _, r = self.anagrams2.get_anagrams("foresees")
    self.assertEqual(r, ['foresees'])

    _, r = self.anagrams2.get_anagrams("foresight")
    self.assertEqual(r, ['foresight'])

    _, r = self.anagrams2.get_anagrams("foresighted")
    self.assertEqual(r, ['foresighted'])

    _, r = self.anagrams2.get_anagrams("forest")
    self.assertEqual(r, ['forest', 'foster', 'softer'])

    _, r = self.anagrams2.get_anagrams("forestall")
    self.assertEqual(r, ['forestall'])

    _, r = self.anagrams2.get_anagrams("forestalled")
    self.assertEqual(r, ['forestalled'])

    _, r = self.anagrams2.get_anagrams("forestalling")
    self.assertEqual(r, ['forestalling'])

    _, r = self.anagrams2.get_anagrams("forestallment")
    self.assertEqual(r, ['forestallment'])

    _, r = self.anagrams2.get_anagrams("forestalls")
    self.assertEqual(r, ['forestalls'])

    _, r = self.anagrams2.get_anagrams("forested")
    self.assertEqual(r, ['deforest', 'forested', 'fostered'])

    _, r = self.anagrams2.get_anagrams("forester")
    self.assertEqual(r, ['forester'])

    _, r = self.anagrams2.get_anagrams("foresters")
    self.assertEqual(r, ['foresters'])

    _, r = self.anagrams2.get_anagrams("forestry")
    self.assertEqual(r, ['forestry'])

    _, r = self.anagrams2.get_anagrams("forests")
    self.assertEqual(r, ['forests', 'fosters'])

    _, r = self.anagrams2.get_anagrams("foretell")
    self.assertEqual(r, ['foretell'])

    _, r = self.anagrams2.get_anagrams("foretelling")
    self.assertEqual(r, ['foretelling'])

    _, r = self.anagrams2.get_anagrams("foretells")
    self.assertEqual(r, ['foretells'])

    _, r = self.anagrams2.get_anagrams("foretold")
    self.assertEqual(r, ['foretold'])

    _, r = self.anagrams2.get_anagrams("forever")
    self.assertEqual(r, ['forever'])

    _, r = self.anagrams2.get_anagrams("forewarn")
    self.assertEqual(r, ['forewarn'])

    _, r = self.anagrams2.get_anagrams("forewarned")
    self.assertEqual(r, ['forewarned'])

    _, r = self.anagrams2.get_anagrams("forewarning")
    self.assertEqual(r, ['forewarning'])

    _, r = self.anagrams2.get_anagrams("forewarnings")
    self.assertEqual(r, ['forewarnings'])

    _, r = self.anagrams2.get_anagrams("forewarns")
    self.assertEqual(r, ['forewarns'])

    _, r = self.anagrams2.get_anagrams("forfeit")
    self.assertEqual(r, ['forfeit'])

    _, r = self.anagrams2.get_anagrams("forfeited")
    self.assertEqual(r, ['forfeited'])

    _, r = self.anagrams2.get_anagrams("forfeiture")
    self.assertEqual(r, ['forfeiture'])

    _, r = self.anagrams2.get_anagrams("forgave")
    self.assertEqual(r, ['forgave'])

    _, r = self.anagrams2.get_anagrams("forge")
    self.assertEqual(r, ['forge'])

    _, r = self.anagrams2.get_anagrams("forged")
    self.assertEqual(r, ['forged'])

    _, r = self.anagrams2.get_anagrams("forger")
    self.assertEqual(r, ['forger'])

    _, r = self.anagrams2.get_anagrams("forgeries")
    self.assertEqual(r, ['forgeries'])

    _, r = self.anagrams2.get_anagrams("forgery")
    self.assertEqual(r, ['forgery'])

    _, r = self.anagrams2.get_anagrams("forges")
    self.assertEqual(r, ['forges'])

    _, r = self.anagrams2.get_anagrams("forget")
    self.assertEqual(r, ['forget'])

    _, r = self.anagrams2.get_anagrams("forgetful")
    self.assertEqual(r, ['forgetful'])

    _, r = self.anagrams2.get_anagrams("forgetfulness")
    self.assertEqual(r, ['forgetfulness'])

    _, r = self.anagrams2.get_anagrams("forgets")
    self.assertEqual(r, ['forgets'])

    _, r = self.anagrams2.get_anagrams("forgettable")
    self.assertEqual(r, ['forgettable'])

    _, r = self.anagrams2.get_anagrams("forgettably")
    self.assertEqual(r, ['forgettably'])

    _, r = self.anagrams2.get_anagrams("forgetting")
    self.assertEqual(r, ['forgetting'])

    _, r = self.anagrams2.get_anagrams("forging")
    self.assertEqual(r, ['forging'])

    _, r = self.anagrams2.get_anagrams("forgivable")
    self.assertEqual(r, ['forgivable'])

    _, r = self.anagrams2.get_anagrams("forgivably")
    self.assertEqual(r, ['forgivably'])

    _, r = self.anagrams2.get_anagrams("forgive")
    self.assertEqual(r, ['forgive'])

    _, r = self.anagrams2.get_anagrams("forgiven")
    self.assertEqual(r, ['forgiven'])

    _, r = self.anagrams2.get_anagrams("forgiveness")
    self.assertEqual(r, ['forgiveness'])

    _, r = self.anagrams2.get_anagrams("forgives")
    self.assertEqual(r, ['forgives'])

    _, r = self.anagrams2.get_anagrams("forgiving")
    self.assertEqual(r, ['forgiving'])

    _, r = self.anagrams2.get_anagrams("forgivingly")
    self.assertEqual(r, ['forgivingly'])

    _, r = self.anagrams2.get_anagrams("forgot")
    self.assertEqual(r, ['forgot'])

    _, r = self.anagrams2.get_anagrams("forgotten")
    self.assertEqual(r, ['forgotten'])

    _, r = self.anagrams2.get_anagrams("fork")
    self.assertEqual(r, ['fork'])

    _, r = self.anagrams2.get_anagrams("forked")
    self.assertEqual(r, ['forked'])

    _, r = self.anagrams2.get_anagrams("forking")
    self.assertEqual(r, ['forking'])

    _, r = self.anagrams2.get_anagrams("forklift")
    self.assertEqual(r, ['forklift'])

    _, r = self.anagrams2.get_anagrams("forks")
    self.assertEqual(r, ['forks'])

    _, r = self.anagrams2.get_anagrams("forlorn")
    self.assertEqual(r, ['forlorn'])

    _, r = self.anagrams2.get_anagrams("forlornly")
    self.assertEqual(r, ['forlornly'])

    _, r = self.anagrams2.get_anagrams("form")
    self.assertEqual(r, ['form', 'from'])

    _, r = self.anagrams2.get_anagrams("formal")
    self.assertEqual(r, ['formal'])

    _, r = self.anagrams2.get_anagrams("formalism")
    self.assertEqual(r, ['formalism'])

    _, r = self.anagrams2.get_anagrams("formalisms")
    self.assertEqual(r, ['formalisms'])

    _, r = self.anagrams2.get_anagrams("formalities")
    self.assertEqual(r, ['formalities'])

    _, r = self.anagrams2.get_anagrams("formality")
    self.assertEqual(r, ['formality'])

    _, r = self.anagrams2.get_anagrams("formalization")
    self.assertEqual(r, ['formalization'])

    _, r = self.anagrams2.get_anagrams("formalizations")
    self.assertEqual(r, ['formalizations'])

    _, r = self.anagrams2.get_anagrams("formalize")
    self.assertEqual(r, ['formalize'])

    _, r = self.anagrams2.get_anagrams("formalized")
    self.assertEqual(r, ['formalized'])

    _, r = self.anagrams2.get_anagrams("formalizes")
    self.assertEqual(r, ['formalizes'])

    _, r = self.anagrams2.get_anagrams("formalizing")
    self.assertEqual(r, ['formalizing'])

    _, r = self.anagrams2.get_anagrams("formally")
    self.assertEqual(r, ['formally'])

    _, r = self.anagrams2.get_anagrams("formant")
    self.assertEqual(r, ['formant'])

    _, r = self.anagrams2.get_anagrams("formants")
    self.assertEqual(r, ['formants'])

    _, r = self.anagrams2.get_anagrams("format")
    self.assertEqual(r, ['format'])

    _, r = self.anagrams2.get_anagrams("formation")
    self.assertEqual(r, ['formation'])

    _, r = self.anagrams2.get_anagrams("formations")
    self.assertEqual(r, ['formations'])

    _, r = self.anagrams2.get_anagrams("formative")
    self.assertEqual(r, ['formative'])

    _, r = self.anagrams2.get_anagrams("formatively")
    self.assertEqual(r, ['formatively'])

    _, r = self.anagrams2.get_anagrams("formats")
    self.assertEqual(r, ['formats'])

    _, r = self.anagrams2.get_anagrams("formatted")
    self.assertEqual(r, ['formatted'])

    _, r = self.anagrams2.get_anagrams("formatter")
    self.assertEqual(r, ['formatter'])

    _, r = self.anagrams2.get_anagrams("formatters")
    self.assertEqual(r, ['formatters'])

    _, r = self.anagrams2.get_anagrams("formatting")
    self.assertEqual(r, ['formatting'])

    _, r = self.anagrams2.get_anagrams("formed")
    self.assertEqual(r, ['deform', 'formed'])

    _, r = self.anagrams2.get_anagrams("former")
    self.assertEqual(r, ['former', 'reform'])

    _, r = self.anagrams2.get_anagrams("formerly")
    self.assertEqual(r, ['formerly'])

    _, r = self.anagrams2.get_anagrams("formica")
    self.assertEqual(r, ['formica'])

    _, r = self.anagrams2.get_anagrams("formicas")
    self.assertEqual(r, ['formicas'])

    _, r = self.anagrams2.get_anagrams("formidable")
    self.assertEqual(r, ['formidable'])

    _, r = self.anagrams2.get_anagrams("forming")
    self.assertEqual(r, ['forming'])

    _, r = self.anagrams2.get_anagrams("formosa")
    self.assertEqual(r, ['formosa'])

    _, r = self.anagrams2.get_anagrams("formosan")
    self.assertEqual(r, ['formosan'])

    _, r = self.anagrams2.get_anagrams("forms")
    self.assertEqual(r, ['forms'])

    _, r = self.anagrams2.get_anagrams("formula")
    self.assertEqual(r, ['formula'])

    _, r = self.anagrams2.get_anagrams("formulae")
    self.assertEqual(r, ['formulae'])

    _, r = self.anagrams2.get_anagrams("formulas")
    self.assertEqual(r, ['formulas'])

    _, r = self.anagrams2.get_anagrams("formulate")
    self.assertEqual(r, ['formulate'])

    _, r = self.anagrams2.get_anagrams("formulated")
    self.assertEqual(r, ['formulated'])

    _, r = self.anagrams2.get_anagrams("formulates")
    self.assertEqual(r, ['formulates'])

    _, r = self.anagrams2.get_anagrams("formulating")
    self.assertEqual(r, ['formulating'])

    _, r = self.anagrams2.get_anagrams("formulation")
    self.assertEqual(r, ['formulation'])

    _, r = self.anagrams2.get_anagrams("formulations")
    self.assertEqual(r, ['formulations'])

    _, r = self.anagrams2.get_anagrams("formulator")
    self.assertEqual(r, ['formulator'])

    _, r = self.anagrams2.get_anagrams("formulators")
    self.assertEqual(r, ['formulators'])

    _, r = self.anagrams2.get_anagrams("fornication")
    self.assertEqual(r, ['fornication'])

    _, r = self.anagrams2.get_anagrams("forrest")
    self.assertEqual(r, ['forrest'])

    _, r = self.anagrams2.get_anagrams("forsake")
    self.assertEqual(r, ['forsake'])

    _, r = self.anagrams2.get_anagrams("forsaken")
    self.assertEqual(r, ['forsaken'])

    _, r = self.anagrams2.get_anagrams("forsakes")
    self.assertEqual(r, ['forsakes'])

    _, r = self.anagrams2.get_anagrams("forsaking")
    self.assertEqual(r, ['forsaking'])

    _, r = self.anagrams2.get_anagrams("forsythe")
    self.assertEqual(r, ['forsythe'])

    _, r = self.anagrams2.get_anagrams("fort")
    self.assertEqual(r, ['fort'])

    _, r = self.anagrams2.get_anagrams("forte")
    self.assertEqual(r, ['forte'])

    _, r = self.anagrams2.get_anagrams("fortescue")
    self.assertEqual(r, ['fortescue'])

    _, r = self.anagrams2.get_anagrams("forth")
    self.assertEqual(r, ['forth', 'froth'])

    _, r = self.anagrams2.get_anagrams("forthcoming")
    self.assertEqual(r, ['forthcoming'])

    _, r = self.anagrams2.get_anagrams("forthright")
    self.assertEqual(r, ['forthright'])

    _, r = self.anagrams2.get_anagrams("forthwith")
    self.assertEqual(r, ['forthwith'])

    _, r = self.anagrams2.get_anagrams("fortier")
    self.assertEqual(r, ['fortier'])

    _, r = self.anagrams2.get_anagrams("forties")
    self.assertEqual(r, ['forties'])

    _, r = self.anagrams2.get_anagrams("fortieth")
    self.assertEqual(r, ['fortieth'])

    _, r = self.anagrams2.get_anagrams("fortification")
    self.assertEqual(r, ['fortification'])

    _, r = self.anagrams2.get_anagrams("fortifications")
    self.assertEqual(r, ['fortifications'])

    _, r = self.anagrams2.get_anagrams("fortified")
    self.assertEqual(r, ['fortified'])

    _, r = self.anagrams2.get_anagrams("fortifies")
    self.assertEqual(r, ['fortifies'])

    _, r = self.anagrams2.get_anagrams("fortify")
    self.assertEqual(r, ['fortify'])

    _, r = self.anagrams2.get_anagrams("fortifying")
    self.assertEqual(r, ['fortifying'])

    _, r = self.anagrams2.get_anagrams("fortiori")
    self.assertEqual(r, ['fortiori'])

    _, r = self.anagrams2.get_anagrams("fortitude")
    self.assertEqual(r, ['fortitude'])

    _, r = self.anagrams2.get_anagrams("fortnight")
    self.assertEqual(r, ['fortnight'])

    _, r = self.anagrams2.get_anagrams("fortnightly")
    self.assertEqual(r, ['fortnightly'])

    _, r = self.anagrams2.get_anagrams("fortran")
    self.assertEqual(r, ['fortran', 'fortran'])

    _, r = self.anagrams2.get_anagrams("fortran")
    self.assertEqual(r, ['fortran', 'fortran'])

    _, r = self.anagrams2.get_anagrams("fortress")
    self.assertEqual(r, ['fortress'])

    _, r = self.anagrams2.get_anagrams("fortresses")
    self.assertEqual(r, ['fortresses'])

    _, r = self.anagrams2.get_anagrams("forts")
    self.assertEqual(r, ['forts', 'frost'])

    _, r = self.anagrams2.get_anagrams("fortuitous")
    self.assertEqual(r, ['fortuitous'])

    _, r = self.anagrams2.get_anagrams("fortuitously")
    self.assertEqual(r, ['fortuitously'])

    _, r = self.anagrams2.get_anagrams("fortunate")
    self.assertEqual(r, ['fortunate'])

    _, r = self.anagrams2.get_anagrams("fortunately")
    self.assertEqual(r, ['fortunately'])

    _, r = self.anagrams2.get_anagrams("fortune")
    self.assertEqual(r, ['fortune'])

    _, r = self.anagrams2.get_anagrams("fortunes")
    self.assertEqual(r, ['fortunes'])

    _, r = self.anagrams2.get_anagrams("forty")
    self.assertEqual(r, ['forty'])

    _, r = self.anagrams2.get_anagrams("forum")
    self.assertEqual(r, ['forum'])

    _, r = self.anagrams2.get_anagrams("forums")
    self.assertEqual(r, ['forums'])

    _, r = self.anagrams2.get_anagrams("forward")
    self.assertEqual(r, ['forward'])

    _, r = self.anagrams2.get_anagrams("forwarded")
    self.assertEqual(r, ['forwarded'])

    _, r = self.anagrams2.get_anagrams("forwarder")
    self.assertEqual(r, ['forwarder'])

    _, r = self.anagrams2.get_anagrams("forwarding")
    self.assertEqual(r, ['forwarding'])

    _, r = self.anagrams2.get_anagrams("forwardness")
    self.assertEqual(r, ['forwardness'])

    _, r = self.anagrams2.get_anagrams("forwards")
    self.assertEqual(r, ['forwards'])

    _, r = self.anagrams2.get_anagrams("foss")
    self.assertEqual(r, ['foss'])

    _, r = self.anagrams2.get_anagrams("fossil")
    self.assertEqual(r, ['fossil'])

    _, r = self.anagrams2.get_anagrams("foster")
    self.assertEqual(r, ['forest', 'foster', 'softer'])

    _, r = self.anagrams2.get_anagrams("fostered")
    self.assertEqual(r, ['deforest', 'forested', 'fostered'])

    _, r = self.anagrams2.get_anagrams("fostering")
    self.assertEqual(r, ['fostering'])

    _, r = self.anagrams2.get_anagrams("fosters")
    self.assertEqual(r, ['forests', 'fosters'])

    _, r = self.anagrams2.get_anagrams("fought")
    self.assertEqual(r, ['fought'])

    _, r = self.anagrams2.get_anagrams("foul")
    self.assertEqual(r, ['foul'])

    _, r = self.anagrams2.get_anagrams("fouled")
    self.assertEqual(r, ['fouled'])

    _, r = self.anagrams2.get_anagrams("foulest")
    self.assertEqual(r, ['foulest'])

    _, r = self.anagrams2.get_anagrams("fouling")
    self.assertEqual(r, ['fouling'])

    _, r = self.anagrams2.get_anagrams("foully")
    self.assertEqual(r, ['foully'])

    _, r = self.anagrams2.get_anagrams("foulmouth")
    self.assertEqual(r, ['foulmouth'])

    _, r = self.anagrams2.get_anagrams("foulness")
    self.assertEqual(r, ['foulness'])

    _, r = self.anagrams2.get_anagrams("fouls")
    self.assertEqual(r, ['fouls'])

    _, r = self.anagrams2.get_anagrams("found")
    self.assertEqual(r, ['found'])

    _, r = self.anagrams2.get_anagrams("foundation")
    self.assertEqual(r, ['foundation'])

    _, r = self.anagrams2.get_anagrams("foundations")
    self.assertEqual(r, ['foundations'])

    _, r = self.anagrams2.get_anagrams("founded")
    self.assertEqual(r, ['founded'])

    _, r = self.anagrams2.get_anagrams("founder")
    self.assertEqual(r, ['founder'])

    _, r = self.anagrams2.get_anagrams("foundered")
    self.assertEqual(r, ['foundered'])

    _, r = self.anagrams2.get_anagrams("founders")
    self.assertEqual(r, ['founders'])

    _, r = self.anagrams2.get_anagrams("founding")
    self.assertEqual(r, ['founding'])

    _, r = self.anagrams2.get_anagrams("foundling")
    self.assertEqual(r, ['foundling', 'unfolding'])

    _, r = self.anagrams2.get_anagrams("foundries")
    self.assertEqual(r, ['foundries'])

    _, r = self.anagrams2.get_anagrams("foundry")
    self.assertEqual(r, ['foundry'])

    _, r = self.anagrams2.get_anagrams("founds")
    self.assertEqual(r, ['founds'])

    _, r = self.anagrams2.get_anagrams("fount")
    self.assertEqual(r, ['fount'])

    _, r = self.anagrams2.get_anagrams("fountain")
    self.assertEqual(r, ['fountain'])

    _, r = self.anagrams2.get_anagrams("fountains")
    self.assertEqual(r, ['fountains'])

    _, r = self.anagrams2.get_anagrams("founts")
    self.assertEqual(r, ['founts'])

    _, r = self.anagrams2.get_anagrams("four")
    self.assertEqual(r, ['four'])

    _, r = self.anagrams2.get_anagrams("fourfold")
    self.assertEqual(r, ['fourfold'])

    _, r = self.anagrams2.get_anagrams("fourier")
    self.assertEqual(r, ['fourier'])

    _, r = self.anagrams2.get_anagrams("fours")
    self.assertEqual(r, ['fours'])

    _, r = self.anagrams2.get_anagrams("fourscore")
    self.assertEqual(r, ['fourscore'])

    _, r = self.anagrams2.get_anagrams("foursome")
    self.assertEqual(r, ['foursome'])

    _, r = self.anagrams2.get_anagrams("foursquare")
    self.assertEqual(r, ['foursquare'])

    _, r = self.anagrams2.get_anagrams("fourteen")
    self.assertEqual(r, ['fourteen'])

    _, r = self.anagrams2.get_anagrams("fourteens")
    self.assertEqual(r, ['fourteens'])

    _, r = self.anagrams2.get_anagrams("fourteenth")
    self.assertEqual(r, ['fourteenth'])

    _, r = self.anagrams2.get_anagrams("fourth")
    self.assertEqual(r, ['fourth'])

    _, r = self.anagrams2.get_anagrams("fowl")
    self.assertEqual(r, ['flow', 'fowl', 'wolf'])

    _, r = self.anagrams2.get_anagrams("fowler")
    self.assertEqual(r, ['flower', 'fowler'])

    _, r = self.anagrams2.get_anagrams("fowls")
    self.assertEqual(r, ['flows', 'fowls'])

    _, r = self.anagrams2.get_anagrams("fox")
    self.assertEqual(r, ['fox'])

    _, r = self.anagrams2.get_anagrams("foxes")
    self.assertEqual(r, ['foxes'])

    _, r = self.anagrams2.get_anagrams("foxhall")
    self.assertEqual(r, ['foxhall'])

    _, r = self.anagrams2.get_anagrams("fraction")
    self.assertEqual(r, ['fraction'])

    _, r = self.anagrams2.get_anagrams("fractional")
    self.assertEqual(r, ['fractional'])

    _, r = self.anagrams2.get_anagrams("fractionally")
    self.assertEqual(r, ['fractionally'])

    _, r = self.anagrams2.get_anagrams("fractions")
    self.assertEqual(r, ['fractions'])

    _, r = self.anagrams2.get_anagrams("fracture")
    self.assertEqual(r, ['fracture'])

    _, r = self.anagrams2.get_anagrams("fractured")
    self.assertEqual(r, ['fractured'])

    _, r = self.anagrams2.get_anagrams("fractures")
    self.assertEqual(r, ['fractures'])

    _, r = self.anagrams2.get_anagrams("fracturing")
    self.assertEqual(r, ['fracturing'])

    _, r = self.anagrams2.get_anagrams("fragile")
    self.assertEqual(r, ['fragile'])

    _, r = self.anagrams2.get_anagrams("fragment")
    self.assertEqual(r, ['fragment'])

    _, r = self.anagrams2.get_anagrams("fragmentary")
    self.assertEqual(r, ['fragmentary'])

    _, r = self.anagrams2.get_anagrams("fragmentation")
    self.assertEqual(r, ['fragmentation'])

    _, r = self.anagrams2.get_anagrams("fragmented")
    self.assertEqual(r, ['fragmented'])

    _, r = self.anagrams2.get_anagrams("fragmenting")
    self.assertEqual(r, ['fragmenting'])

    _, r = self.anagrams2.get_anagrams("fragments")
    self.assertEqual(r, ['fragments'])

    _, r = self.anagrams2.get_anagrams("fragrance")
    self.assertEqual(r, ['fragrance'])

    _, r = self.anagrams2.get_anagrams("fragrances")
    self.assertEqual(r, ['fragrances'])

    _, r = self.anagrams2.get_anagrams("fragrant")
    self.assertEqual(r, ['fragrant'])

    _, r = self.anagrams2.get_anagrams("fragrantly")
    self.assertEqual(r, ['fragrantly'])

    _, r = self.anagrams2.get_anagrams("frail")
    self.assertEqual(r, ['flair', 'frail'])

    _, r = self.anagrams2.get_anagrams("frailest")
    self.assertEqual(r, ['frailest'])

    _, r = self.anagrams2.get_anagrams("frailty")
    self.assertEqual(r, ['frailty'])

    _, r = self.anagrams2.get_anagrams("frame")
    self.assertEqual(r, ['frame'])

    _, r = self.anagrams2.get_anagrams("framed")
    self.assertEqual(r, ['farmed', 'framed'])

    _, r = self.anagrams2.get_anagrams("framer")
    self.assertEqual(r, ['farmer', 'framer'])

    _, r = self.anagrams2.get_anagrams("frames")
    self.assertEqual(r, ['frames'])

    _, r = self.anagrams2.get_anagrams("framework")
    self.assertEqual(r, ['framework'])

    _, r = self.anagrams2.get_anagrams("frameworks")
    self.assertEqual(r, ['frameworks'])

    _, r = self.anagrams2.get_anagrams("framing")
    self.assertEqual(r, ['farming', 'framing'])

    _, r = self.anagrams2.get_anagrams("fran")
    self.assertEqual(r, ['fran'])

    _, r = self.anagrams2.get_anagrams("franc")
    self.assertEqual(r, ['franc'])

    _, r = self.anagrams2.get_anagrams("francaise")
    self.assertEqual(r, ['francaise'])

    _, r = self.anagrams2.get_anagrams("france")
    self.assertEqual(r, ['france'])

    _, r = self.anagrams2.get_anagrams("frances")
    self.assertEqual(r, ['frances'])

    _, r = self.anagrams2.get_anagrams("francesca")
    self.assertEqual(r, ['francesca'])

    _, r = self.anagrams2.get_anagrams("francesco")
    self.assertEqual(r, ['francesco'])

    _, r = self.anagrams2.get_anagrams("franchise")
    self.assertEqual(r, ['franchise'])

    _, r = self.anagrams2.get_anagrams("franchises")
    self.assertEqual(r, ['franchises'])

    _, r = self.anagrams2.get_anagrams("francie")
    self.assertEqual(r, ['fancier', 'francie'])

    _, r = self.anagrams2.get_anagrams("francine")
    self.assertEqual(r, ['francine'])

    _, r = self.anagrams2.get_anagrams("francis")
    self.assertEqual(r, ['francis'])

    _, r = self.anagrams2.get_anagrams("franciscan")
    self.assertEqual(r, ['franciscan'])

    _, r = self.anagrams2.get_anagrams("franciscans")
    self.assertEqual(r, ['franciscans'])

    _, r = self.anagrams2.get_anagrams("francisco")
    self.assertEqual(r, ['francisco'])

    _, r = self.anagrams2.get_anagrams("francize")
    self.assertEqual(r, ['francize'])

    _, r = self.anagrams2.get_anagrams("francizes")
    self.assertEqual(r, ['francizes'])

    _, r = self.anagrams2.get_anagrams("franco")
    self.assertEqual(r, ['franco'])

    _, r = self.anagrams2.get_anagrams("francois")
    self.assertEqual(r, ['francois'])

    _, r = self.anagrams2.get_anagrams("francoise")
    self.assertEqual(r, ['francoise'])

    _, r = self.anagrams2.get_anagrams("francs")
    self.assertEqual(r, ['francs'])

    _, r = self.anagrams2.get_anagrams("frank")
    self.assertEqual(r, ['frank'])

    _, r = self.anagrams2.get_anagrams("franked")
    self.assertEqual(r, ['franked'])

    _, r = self.anagrams2.get_anagrams("frankel")
    self.assertEqual(r, ['flanker', 'frankel'])

    _, r = self.anagrams2.get_anagrams("franker")
    self.assertEqual(r, ['franker'])

    _, r = self.anagrams2.get_anagrams("frankest")
    self.assertEqual(r, ['frankest'])

    _, r = self.anagrams2.get_anagrams("frankfort")
    self.assertEqual(r, ['frankfort'])

    _, r = self.anagrams2.get_anagrams("frankfurt")
    self.assertEqual(r, ['frankfurt'])

    _, r = self.anagrams2.get_anagrams("frankie")
    self.assertEqual(r, ['frankie'])

    _, r = self.anagrams2.get_anagrams("franking")
    self.assertEqual(r, ['franking'])

    _, r = self.anagrams2.get_anagrams("franklinization")
    self.assertEqual(r, ['franklinization'])

    _, r = self.anagrams2.get_anagrams("franklinizations")
    self.assertEqual(r, ['franklinizations'])

    _, r = self.anagrams2.get_anagrams("frankly")
    self.assertEqual(r, ['frankly'])

    _, r = self.anagrams2.get_anagrams("frankness")
    self.assertEqual(r, ['frankness'])

    _, r = self.anagrams2.get_anagrams("franks")
    self.assertEqual(r, ['franks'])

    _, r = self.anagrams2.get_anagrams("franny")
    self.assertEqual(r, ['franny'])

    _, r = self.anagrams2.get_anagrams("frantic")
    self.assertEqual(r, ['frantic', 'infarct'])

    _, r = self.anagrams2.get_anagrams("frantically")
    self.assertEqual(r, ['frantically'])

    _, r = self.anagrams2.get_anagrams("franz")
    self.assertEqual(r, ['franz'])

    _, r = self.anagrams2.get_anagrams("fraser")
    self.assertEqual(r, ['fraser'])

    _, r = self.anagrams2.get_anagrams("fraternal")
    self.assertEqual(r, ['fraternal'])

    _, r = self.anagrams2.get_anagrams("fraternally")
    self.assertEqual(r, ['fraternally'])

    _, r = self.anagrams2.get_anagrams("fraternities")
    self.assertEqual(r, ['fraternities'])

    _, r = self.anagrams2.get_anagrams("fraternity")
    self.assertEqual(r, ['fraternity'])

    _, r = self.anagrams2.get_anagrams("frau")
    self.assertEqual(r, ['frau'])

    _, r = self.anagrams2.get_anagrams("fraud")
    self.assertEqual(r, ['fraud'])

    _, r = self.anagrams2.get_anagrams("frauds")
    self.assertEqual(r, ['frauds'])

    _, r = self.anagrams2.get_anagrams("fraudulent")
    self.assertEqual(r, ['fraudulent'])

    _, r = self.anagrams2.get_anagrams("fraught")
    self.assertEqual(r, ['fraught'])

    _, r = self.anagrams2.get_anagrams("fray")
    self.assertEqual(r, ['fray'])

    _, r = self.anagrams2.get_anagrams("frayed")
    self.assertEqual(r, ['defray', 'frayed'])

    _, r = self.anagrams2.get_anagrams("fraying")
    self.assertEqual(r, ['fraying'])

    _, r = self.anagrams2.get_anagrams("frayne")
    self.assertEqual(r, ['frayne'])

    _, r = self.anagrams2.get_anagrams("frays")
    self.assertEqual(r, ['frays'])

    _, r = self.anagrams2.get_anagrams("frazier")
    self.assertEqual(r, ['frazier'])

    _, r = self.anagrams2.get_anagrams("frazzle")
    self.assertEqual(r, ['frazzle'])

    _, r = self.anagrams2.get_anagrams("freak")
    self.assertEqual(r, ['faker', 'freak'])

    _, r = self.anagrams2.get_anagrams("freakish")
    self.assertEqual(r, ['freakish'])

    _, r = self.anagrams2.get_anagrams("freaks")
    self.assertEqual(r, ['freaks'])

    _, r = self.anagrams2.get_anagrams("freckle")
    self.assertEqual(r, ['freckle'])

    _, r = self.anagrams2.get_anagrams("freckled")
    self.assertEqual(r, ['freckled'])

    _, r = self.anagrams2.get_anagrams("freckles")
    self.assertEqual(r, ['freckles'])

    _, r = self.anagrams2.get_anagrams("fred")
    self.assertEqual(r, ['fred'])

    _, r = self.anagrams2.get_anagrams("freddie")
    self.assertEqual(r, ['freddie'])

    _, r = self.anagrams2.get_anagrams("freddy")
    self.assertEqual(r, ['freddy'])

    _, r = self.anagrams2.get_anagrams("frederic")
    self.assertEqual(r, ['frederic'])

    _, r = self.anagrams2.get_anagrams("frederick")
    self.assertEqual(r, ['frederick'])

    _, r = self.anagrams2.get_anagrams("fredericks")
    self.assertEqual(r, ['fredericks'])

    _, r = self.anagrams2.get_anagrams("fredericksburg")
    self.assertEqual(r, ['fredericksburg'])

    _, r = self.anagrams2.get_anagrams("frederico")
    self.assertEqual(r, ['frederico'])

    _, r = self.anagrams2.get_anagrams("fredericton")
    self.assertEqual(r, ['fredericton'])

    _, r = self.anagrams2.get_anagrams("fredholm")
    self.assertEqual(r, ['fredholm'])

    _, r = self.anagrams2.get_anagrams("fredrick")
    self.assertEqual(r, ['fredrick'])

    _, r = self.anagrams2.get_anagrams("fredrickson")
    self.assertEqual(r, ['fredrickson'])

    _, r = self.anagrams2.get_anagrams("free")
    self.assertEqual(r, ['free', 'reef'])

    _, r = self.anagrams2.get_anagrams("freed")
    self.assertEqual(r, ['defer', 'freed'])

    _, r = self.anagrams2.get_anagrams("freedman")
    self.assertEqual(r, ['freedman'])

    _, r = self.anagrams2.get_anagrams("freedom")
    self.assertEqual(r, ['freedom'])

    _, r = self.anagrams2.get_anagrams("freedoms")
    self.assertEqual(r, ['freedoms'])

    _, r = self.anagrams2.get_anagrams("freeing")
    self.assertEqual(r, ['freeing'])

    _, r = self.anagrams2.get_anagrams("freeings")
    self.assertEqual(r, ['freeings'])

    _, r = self.anagrams2.get_anagrams("freely")
    self.assertEqual(r, ['freely'])

    _, r = self.anagrams2.get_anagrams("freeman")
    self.assertEqual(r, ['freeman'])

    _, r = self.anagrams2.get_anagrams("freemason")
    self.assertEqual(r, ['freemason'])

    _, r = self.anagrams2.get_anagrams("freemasonry")
    self.assertEqual(r, ['freemasonry'])

    _, r = self.anagrams2.get_anagrams("freemasons")
    self.assertEqual(r, ['freemasons'])

    _, r = self.anagrams2.get_anagrams("freeness")
    self.assertEqual(r, ['freeness'])

    _, r = self.anagrams2.get_anagrams("freeport")
    self.assertEqual(r, ['freeport'])

    _, r = self.anagrams2.get_anagrams("freer")
    self.assertEqual(r, ['freer', 'refer'])

    _, r = self.anagrams2.get_anagrams("frees")
    self.assertEqual(r, ['frees', 'reefs'])

    _, r = self.anagrams2.get_anagrams("freest")
    self.assertEqual(r, ['freest'])

    _, r = self.anagrams2.get_anagrams("freestyle")
    self.assertEqual(r, ['freestyle'])

    _, r = self.anagrams2.get_anagrams("freetown")
    self.assertEqual(r, ['freetown'])

    _, r = self.anagrams2.get_anagrams("freeway")
    self.assertEqual(r, ['freeway'])

    _, r = self.anagrams2.get_anagrams("freewheel")
    self.assertEqual(r, ['freewheel'])

    _, r = self.anagrams2.get_anagrams("freeze")
    self.assertEqual(r, ['freeze'])

    _, r = self.anagrams2.get_anagrams("freezer")
    self.assertEqual(r, ['freezer'])

    _, r = self.anagrams2.get_anagrams("freezers")
    self.assertEqual(r, ['freezers'])

    _, r = self.anagrams2.get_anagrams("freezes")
    self.assertEqual(r, ['freezes'])

    _, r = self.anagrams2.get_anagrams("freezing")
    self.assertEqual(r, ['freezing'])

    _, r = self.anagrams2.get_anagrams("freida")
    self.assertEqual(r, ['freida'])

    _, r = self.anagrams2.get_anagrams("freight")
    self.assertEqual(r, ['fighter', 'freight'])

    _, r = self.anagrams2.get_anagrams("freighted")
    self.assertEqual(r, ['freighted'])

    _, r = self.anagrams2.get_anagrams("freighter")
    self.assertEqual(r, ['freighter'])

    _, r = self.anagrams2.get_anagrams("freighters")
    self.assertEqual(r, ['freighters'])

    _, r = self.anagrams2.get_anagrams("freighting")
    self.assertEqual(r, ['freighting'])

    _, r = self.anagrams2.get_anagrams("freights")
    self.assertEqual(r, ['fighters', 'freights'])

    _, r = self.anagrams2.get_anagrams("french")
    self.assertEqual(r, ['french'])

    _, r = self.anagrams2.get_anagrams("frenchize")
    self.assertEqual(r, ['frenchize'])

    _, r = self.anagrams2.get_anagrams("frenchizes")
    self.assertEqual(r, ['frenchizes'])

    _, r = self.anagrams2.get_anagrams("frenchman")
    self.assertEqual(r, ['frenchman'])

    _, r = self.anagrams2.get_anagrams("frenchmen")
    self.assertEqual(r, ['frenchmen'])

    _, r = self.anagrams2.get_anagrams("frenetic")
    self.assertEqual(r, ['frenetic'])

    _, r = self.anagrams2.get_anagrams("frenzied")
    self.assertEqual(r, ['frenzied'])

    _, r = self.anagrams2.get_anagrams("frenzy")
    self.assertEqual(r, ['frenzy'])

    _, r = self.anagrams2.get_anagrams("freon")
    self.assertEqual(r, ['freon'])

    _, r = self.anagrams2.get_anagrams("frequencies")
    self.assertEqual(r, ['frequencies'])

    _, r = self.anagrams2.get_anagrams("frequency")
    self.assertEqual(r, ['frequency'])

    _, r = self.anagrams2.get_anagrams("frequent")
    self.assertEqual(r, ['frequent'])

    _, r = self.anagrams2.get_anagrams("frequented")
    self.assertEqual(r, ['frequented'])

    _, r = self.anagrams2.get_anagrams("frequenter")
    self.assertEqual(r, ['frequenter'])

    _, r = self.anagrams2.get_anagrams("frequenters")
    self.assertEqual(r, ['frequenters'])

    _, r = self.anagrams2.get_anagrams("frequenting")
    self.assertEqual(r, ['frequenting'])

    _, r = self.anagrams2.get_anagrams("frequently")
    self.assertEqual(r, ['frequently'])

    _, r = self.anagrams2.get_anagrams("frequents")
    self.assertEqual(r, ['frequents'])

    _, r = self.anagrams2.get_anagrams("fresco")
    self.assertEqual(r, ['forces', 'fresco'])

    _, r = self.anagrams2.get_anagrams("frescoes")
    self.assertEqual(r, ['frescoes'])

    _, r = self.anagrams2.get_anagrams("fresh")
    self.assertEqual(r, ['fresh'])

    _, r = self.anagrams2.get_anagrams("freshen")
    self.assertEqual(r, ['freshen'])

    _, r = self.anagrams2.get_anagrams("freshened")
    self.assertEqual(r, ['freshened'])

    _, r = self.anagrams2.get_anagrams("freshener")
    self.assertEqual(r, ['freshener'])

    _, r = self.anagrams2.get_anagrams("fresheners")
    self.assertEqual(r, ['fresheners'])

    _, r = self.anagrams2.get_anagrams("freshening")
    self.assertEqual(r, ['freshening'])

    _, r = self.anagrams2.get_anagrams("freshens")
    self.assertEqual(r, ['freshens'])

    _, r = self.anagrams2.get_anagrams("fresher")
    self.assertEqual(r, ['fresher', 'refresh'])

    _, r = self.anagrams2.get_anagrams("freshest")
    self.assertEqual(r, ['freshest'])

    _, r = self.anagrams2.get_anagrams("freshly")
    self.assertEqual(r, ['freshly'])

    _, r = self.anagrams2.get_anagrams("freshman")
    self.assertEqual(r, ['freshman'])

    _, r = self.anagrams2.get_anagrams("freshmen")
    self.assertEqual(r, ['freshmen'])

    _, r = self.anagrams2.get_anagrams("freshness")
    self.assertEqual(r, ['freshness'])

    _, r = self.anagrams2.get_anagrams("freshwater")
    self.assertEqual(r, ['freshwater'])

    _, r = self.anagrams2.get_anagrams("fresnel")
    self.assertEqual(r, ['fresnel'])

    _, r = self.anagrams2.get_anagrams("fresno")
    self.assertEqual(r, ['fresno'])

    _, r = self.anagrams2.get_anagrams("fret")
    self.assertEqual(r, ['fret'])

    _, r = self.anagrams2.get_anagrams("fretful")
    self.assertEqual(r, ['fretful'])

    _, r = self.anagrams2.get_anagrams("fretfully")
    self.assertEqual(r, ['fretfully'])

    _, r = self.anagrams2.get_anagrams("fretfulness")
    self.assertEqual(r, ['fretfulness'])

    _, r = self.anagrams2.get_anagrams("freud")
    self.assertEqual(r, ['freud'])

    _, r = self.anagrams2.get_anagrams("freudian")
    self.assertEqual(r, ['freudian'])

    _, r = self.anagrams2.get_anagrams("freudianism")
    self.assertEqual(r, ['freudianism'])

    _, r = self.anagrams2.get_anagrams("freudianisms")
    self.assertEqual(r, ['freudianisms'])

    _, r = self.anagrams2.get_anagrams("freudians")
    self.assertEqual(r, ['freudians'])

    _, r = self.anagrams2.get_anagrams("frey")
    self.assertEqual(r, ['frey', 'frye'])

    _, r = self.anagrams2.get_anagrams("freya")
    self.assertEqual(r, ['freya'])

    _, r = self.anagrams2.get_anagrams("friar")
    self.assertEqual(r, ['friar'])

    _, r = self.anagrams2.get_anagrams("friars")
    self.assertEqual(r, ['friars'])

    _, r = self.anagrams2.get_anagrams("fricative")
    self.assertEqual(r, ['fricative'])

    _, r = self.anagrams2.get_anagrams("fricatives")
    self.assertEqual(r, ['fricatives'])

    _, r = self.anagrams2.get_anagrams("frick")
    self.assertEqual(r, ['frick'])

    _, r = self.anagrams2.get_anagrams("friction")
    self.assertEqual(r, ['friction'])

    _, r = self.anagrams2.get_anagrams("frictionless")
    self.assertEqual(r, ['frictionless'])

    _, r = self.anagrams2.get_anagrams("frictions")
    self.assertEqual(r, ['frictions'])

    _, r = self.anagrams2.get_anagrams("friday")
    self.assertEqual(r, ['friday'])

    _, r = self.anagrams2.get_anagrams("fridays")
    self.assertEqual(r, ['fridays'])

    _, r = self.anagrams2.get_anagrams("fried")
    self.assertEqual(r, ['fired', 'fried'])

    _, r = self.anagrams2.get_anagrams("friedman")
    self.assertEqual(r, ['friedman'])

    _, r = self.anagrams2.get_anagrams("friedrich")
    self.assertEqual(r, ['friedrich'])

    _, r = self.anagrams2.get_anagrams("friend")
    self.assertEqual(r, ['finder', 'friend'])

    _, r = self.anagrams2.get_anagrams("friendless")
    self.assertEqual(r, ['friendless'])

    _, r = self.anagrams2.get_anagrams("friendlier")
    self.assertEqual(r, ['friendlier'])

    _, r = self.anagrams2.get_anagrams("friendliest")
    self.assertEqual(r, ['friendliest'])

    _, r = self.anagrams2.get_anagrams("friendliness")
    self.assertEqual(r, ['friendliness'])

    _, r = self.anagrams2.get_anagrams("friendly")
    self.assertEqual(r, ['friendly'])

    _, r = self.anagrams2.get_anagrams("friends")
    self.assertEqual(r, ['finders', 'friends'])

    _, r = self.anagrams2.get_anagrams("friendship")
    self.assertEqual(r, ['friendship'])

    _, r = self.anagrams2.get_anagrams("friendships")
    self.assertEqual(r, ['friendships'])

    _, r = self.anagrams2.get_anagrams("fries")
    self.assertEqual(r, ['fires', 'fries', 'serif'])

    _, r = self.anagrams2.get_anagrams("friesland")
    self.assertEqual(r, ['friesland'])

    _, r = self.anagrams2.get_anagrams("frieze")
    self.assertEqual(r, ['frieze'])

    _, r = self.anagrams2.get_anagrams("friezes")
    self.assertEqual(r, ['friezes'])

    _, r = self.anagrams2.get_anagrams("frigate")
    self.assertEqual(r, ['frigate'])

    _, r = self.anagrams2.get_anagrams("frigates")
    self.assertEqual(r, ['frigates'])

    _, r = self.anagrams2.get_anagrams("frigga")
    self.assertEqual(r, ['frigga'])

    _, r = self.anagrams2.get_anagrams("fright")
    self.assertEqual(r, ['fright'])

    _, r = self.anagrams2.get_anagrams("frighten")
    self.assertEqual(r, ['frighten'])

    _, r = self.anagrams2.get_anagrams("frightened")
    self.assertEqual(r, ['frightened'])

    _, r = self.anagrams2.get_anagrams("frightening")
    self.assertEqual(r, ['frightening'])

    _, r = self.anagrams2.get_anagrams("frighteningly")
    self.assertEqual(r, ['frighteningly'])

    _, r = self.anagrams2.get_anagrams("frightens")
    self.assertEqual(r, ['frightens'])

    _, r = self.anagrams2.get_anagrams("frightful")
    self.assertEqual(r, ['frightful'])

    _, r = self.anagrams2.get_anagrams("frightfully")
    self.assertEqual(r, ['frightfully'])

    _, r = self.anagrams2.get_anagrams("frightfulness")
    self.assertEqual(r, ['frightfulness'])

    _, r = self.anagrams2.get_anagrams("frigid")
    self.assertEqual(r, ['frigid'])

    _, r = self.anagrams2.get_anagrams("frigidaire")
    self.assertEqual(r, ['frigidaire'])

    _, r = self.anagrams2.get_anagrams("frill")
    self.assertEqual(r, ['frill'])

    _, r = self.anagrams2.get_anagrams("frills")
    self.assertEqual(r, ['frills'])

    _, r = self.anagrams2.get_anagrams("fringe")
    self.assertEqual(r, ['finger', 'fringe'])

    _, r = self.anagrams2.get_anagrams("fringed")
    self.assertEqual(r, ['fringed'])

    _, r = self.anagrams2.get_anagrams("frisbee")
    self.assertEqual(r, ['frisbee'])

    _, r = self.anagrams2.get_anagrams("frisia")
    self.assertEqual(r, ['frisia'])

    _, r = self.anagrams2.get_anagrams("frisian")
    self.assertEqual(r, ['frisian'])

    _, r = self.anagrams2.get_anagrams("frisk")
    self.assertEqual(r, ['frisk'])

    _, r = self.anagrams2.get_anagrams("frisked")
    self.assertEqual(r, ['frisked'])

    _, r = self.anagrams2.get_anagrams("frisking")
    self.assertEqual(r, ['frisking'])

    _, r = self.anagrams2.get_anagrams("frisks")
    self.assertEqual(r, ['frisks'])

    _, r = self.anagrams2.get_anagrams("frisky")
    self.assertEqual(r, ['frisky'])

    _, r = self.anagrams2.get_anagrams("frito")
    self.assertEqual(r, ['frito'])

    _, r = self.anagrams2.get_anagrams("fritter")
    self.assertEqual(r, ['fritter'])

    _, r = self.anagrams2.get_anagrams("fritz")
    self.assertEqual(r, ['fritz'])

    _, r = self.anagrams2.get_anagrams("frivolity")
    self.assertEqual(r, ['frivolity'])

    _, r = self.anagrams2.get_anagrams("frivolous")
    self.assertEqual(r, ['frivolous'])

    _, r = self.anagrams2.get_anagrams("frivolously")
    self.assertEqual(r, ['frivolously'])

    _, r = self.anagrams2.get_anagrams("fro")
    self.assertEqual(r, ['for', 'fro'])

    _, r = self.anagrams2.get_anagrams("frock")
    self.assertEqual(r, ['frock'])

    _, r = self.anagrams2.get_anagrams("frocks")
    self.assertEqual(r, ['frocks'])

    _, r = self.anagrams2.get_anagrams("frog")
    self.assertEqual(r, ['frog'])

    _, r = self.anagrams2.get_anagrams("frogs")
    self.assertEqual(r, ['frogs'])

    _, r = self.anagrams2.get_anagrams("frolic")
    self.assertEqual(r, ['frolic'])

    _, r = self.anagrams2.get_anagrams("frolics")
    self.assertEqual(r, ['frolics'])

    _, r = self.anagrams2.get_anagrams("from")
    self.assertEqual(r, ['form', 'from'])

    _, r = self.anagrams2.get_anagrams("front")
    self.assertEqual(r, ['front'])

    _, r = self.anagrams2.get_anagrams("frontage")
    self.assertEqual(r, ['frontage'])

    _, r = self.anagrams2.get_anagrams("frontal")
    self.assertEqual(r, ['frontal'])

    _, r = self.anagrams2.get_anagrams("fronted")
    self.assertEqual(r, ['fronted'])

    _, r = self.anagrams2.get_anagrams("frontier")
    self.assertEqual(r, ['frontier'])

    _, r = self.anagrams2.get_anagrams("frontiers")
    self.assertEqual(r, ['frontiers'])

    _, r = self.anagrams2.get_anagrams("frontiersman")
    self.assertEqual(r, ['frontiersman'])

    _, r = self.anagrams2.get_anagrams("frontiersmen")
    self.assertEqual(r, ['frontiersmen'])

    _, r = self.anagrams2.get_anagrams("fronting")
    self.assertEqual(r, ['fronting'])

    _, r = self.anagrams2.get_anagrams("fronts")
    self.assertEqual(r, ['fronts'])

    _, r = self.anagrams2.get_anagrams("frost")
    self.assertEqual(r, ['forts', 'frost'])

    _, r = self.anagrams2.get_anagrams("frostbelt")
    self.assertEqual(r, ['frostbelt'])

    _, r = self.anagrams2.get_anagrams("frostbite")
    self.assertEqual(r, ['frostbite'])

    _, r = self.anagrams2.get_anagrams("frostbitten")
    self.assertEqual(r, ['frostbitten'])

    _, r = self.anagrams2.get_anagrams("frosted")
    self.assertEqual(r, ['defrost', 'frosted'])

    _, r = self.anagrams2.get_anagrams("frosting")
    self.assertEqual(r, ['frosting'])

    _, r = self.anagrams2.get_anagrams("frosts")
    self.assertEqual(r, ['frosts'])

    _, r = self.anagrams2.get_anagrams("frosty")
    self.assertEqual(r, ['frosty'])

    _, r = self.anagrams2.get_anagrams("froth")
    self.assertEqual(r, ['forth', 'froth'])

    _, r = self.anagrams2.get_anagrams("frothing")
    self.assertEqual(r, ['frothing'])

    _, r = self.anagrams2.get_anagrams("frothy")
    self.assertEqual(r, ['frothy'])

    _, r = self.anagrams2.get_anagrams("frown")
    self.assertEqual(r, ['frown'])

    _, r = self.anagrams2.get_anagrams("frowned")
    self.assertEqual(r, ['frowned'])

    _, r = self.anagrams2.get_anagrams("frowning")
    self.assertEqual(r, ['frowning'])

    _, r = self.anagrams2.get_anagrams("frowns")
    self.assertEqual(r, ['frowns'])

    _, r = self.anagrams2.get_anagrams("froze")
    self.assertEqual(r, ['froze'])

    _, r = self.anagrams2.get_anagrams("frozen")
    self.assertEqual(r, ['frozen'])

    _, r = self.anagrams2.get_anagrams("frozenly")
    self.assertEqual(r, ['frozenly'])

    _, r = self.anagrams2.get_anagrams("fruehauf")
    self.assertEqual(r, ['fruehauf'])

    _, r = self.anagrams2.get_anagrams("frugal")
    self.assertEqual(r, ['frugal'])

    _, r = self.anagrams2.get_anagrams("frugally")
    self.assertEqual(r, ['frugally'])

    _, r = self.anagrams2.get_anagrams("fruit")
    self.assertEqual(r, ['fruit'])

    _, r = self.anagrams2.get_anagrams("fruitful")
    self.assertEqual(r, ['fruitful'])

    _, r = self.anagrams2.get_anagrams("fruitfully")
    self.assertEqual(r, ['fruitfully'])

    _, r = self.anagrams2.get_anagrams("fruitfulness")
    self.assertEqual(r, ['fruitfulness'])

    _, r = self.anagrams2.get_anagrams("fruition")
    self.assertEqual(r, ['fruition'])

    _, r = self.anagrams2.get_anagrams("fruitless")
    self.assertEqual(r, ['fruitless'])

    _, r = self.anagrams2.get_anagrams("fruitlessly")
    self.assertEqual(r, ['fruitlessly'])

    _, r = self.anagrams2.get_anagrams("fruits")
    self.assertEqual(r, ['fruits'])

    _, r = self.anagrams2.get_anagrams("frustrate")
    self.assertEqual(r, ['frustrate'])

    _, r = self.anagrams2.get_anagrams("frustrated")
    self.assertEqual(r, ['frustrated'])

    _, r = self.anagrams2.get_anagrams("frustrates")
    self.assertEqual(r, ['frustrates'])

    _, r = self.anagrams2.get_anagrams("frustrating")
    self.assertEqual(r, ['frustrating'])

    _, r = self.anagrams2.get_anagrams("frustration")
    self.assertEqual(r, ['frustration'])

    _, r = self.anagrams2.get_anagrams("frustrations")
    self.assertEqual(r, ['frustrations'])

    _, r = self.anagrams2.get_anagrams("fry")
    self.assertEqual(r, ['fry'])

    _, r = self.anagrams2.get_anagrams("frye")
    self.assertEqual(r, ['frey', 'frye'])

    _, r = self.anagrams2.get_anagrams("fuchs")
    self.assertEqual(r, ['fuchs'])

    _, r = self.anagrams2.get_anagrams("fuchsia")
    self.assertEqual(r, ['fuchsia'])

    _, r = self.anagrams2.get_anagrams("fudge")
    self.assertEqual(r, ['fudge'])

    _, r = self.anagrams2.get_anagrams("fuel")
    self.assertEqual(r, ['flue', 'fuel'])

    _, r = self.anagrams2.get_anagrams("fueled")
    self.assertEqual(r, ['fueled'])

    _, r = self.anagrams2.get_anagrams("fueling")
    self.assertEqual(r, ['fueling'])

    _, r = self.anagrams2.get_anagrams("fuels")
    self.assertEqual(r, ['fuels'])

    _, r = self.anagrams2.get_anagrams("fugitive")
    self.assertEqual(r, ['fugitive'])

    _, r = self.anagrams2.get_anagrams("fugitives")
    self.assertEqual(r, ['fugitives'])

    _, r = self.anagrams2.get_anagrams("fugue")
    self.assertEqual(r, ['fugue'])

    _, r = self.anagrams2.get_anagrams("fuji")
    self.assertEqual(r, ['fuji'])

    _, r = self.anagrams2.get_anagrams("fujitsu")
    self.assertEqual(r, ['fujitsu'])

    _, r = self.anagrams2.get_anagrams("fulbright")
    self.assertEqual(r, ['fulbright'])

    _, r = self.anagrams2.get_anagrams("fulbrights")
    self.assertEqual(r, ['fulbrights'])

    _, r = self.anagrams2.get_anagrams("fulcrum")
    self.assertEqual(r, ['fulcrum'])

    _, r = self.anagrams2.get_anagrams("fulfill")
    self.assertEqual(r, ['fulfill'])

    _, r = self.anagrams2.get_anagrams("fulfilled")
    self.assertEqual(r, ['fulfilled'])

    _, r = self.anagrams2.get_anagrams("fulfilling")
    self.assertEqual(r, ['fulfilling'])

    _, r = self.anagrams2.get_anagrams("fulfillment")
    self.assertEqual(r, ['fulfillment'])

    _, r = self.anagrams2.get_anagrams("fulfillments")
    self.assertEqual(r, ['fulfillments'])

    _, r = self.anagrams2.get_anagrams("fulfills")
    self.assertEqual(r, ['fulfills'])

    _, r = self.anagrams2.get_anagrams("full")
    self.assertEqual(r, ['full'])

    _, r = self.anagrams2.get_anagrams("fuller")
    self.assertEqual(r, ['fuller'])

    _, r = self.anagrams2.get_anagrams("fullerton")
    self.assertEqual(r, ['fullerton'])

    _, r = self.anagrams2.get_anagrams("fullest")
    self.assertEqual(r, ['fullest'])

    _, r = self.anagrams2.get_anagrams("fullness")
    self.assertEqual(r, ['fullness'])

    _, r = self.anagrams2.get_anagrams("fully")
    self.assertEqual(r, ['fully'])

    _, r = self.anagrams2.get_anagrams("fulminate")
    self.assertEqual(r, ['fulminate'])

    _, r = self.anagrams2.get_anagrams("fulton")
    self.assertEqual(r, ['fulton'])

    _, r = self.anagrams2.get_anagrams("fumble")
    self.assertEqual(r, ['fumble'])

    _, r = self.anagrams2.get_anagrams("fumbled")
    self.assertEqual(r, ['fumbled'])

    _, r = self.anagrams2.get_anagrams("fumbling")
    self.assertEqual(r, ['fumbling'])

    _, r = self.anagrams2.get_anagrams("fume")
    self.assertEqual(r, ['fume'])

    _, r = self.anagrams2.get_anagrams("fumed")
    self.assertEqual(r, ['fumed'])

    _, r = self.anagrams2.get_anagrams("fumes")
    self.assertEqual(r, ['fumes'])

    _, r = self.anagrams2.get_anagrams("fuming")
    self.assertEqual(r, ['fuming'])

    _, r = self.anagrams2.get_anagrams("fun")
    self.assertEqual(r, ['fun'])

    _, r = self.anagrams2.get_anagrams("function")
    self.assertEqual(r, ['function'])

    _, r = self.anagrams2.get_anagrams("functional")
    self.assertEqual(r, ['functional'])

    _, r = self.anagrams2.get_anagrams("functionalities")
    self.assertEqual(r, ['functionalities'])

    _, r = self.anagrams2.get_anagrams("functionality")
    self.assertEqual(r, ['functionality'])

    _, r = self.anagrams2.get_anagrams("functionally")
    self.assertEqual(r, ['functionally'])

    _, r = self.anagrams2.get_anagrams("functionals")
    self.assertEqual(r, ['functionals'])

    _, r = self.anagrams2.get_anagrams("functionary")
    self.assertEqual(r, ['functionary'])

    _, r = self.anagrams2.get_anagrams("functioned")
    self.assertEqual(r, ['functioned'])

    _, r = self.anagrams2.get_anagrams("functioning")
    self.assertEqual(r, ['functioning'])

    _, r = self.anagrams2.get_anagrams("functions")
    self.assertEqual(r, ['functions'])

    _, r = self.anagrams2.get_anagrams("functor")
    self.assertEqual(r, ['functor'])

    _, r = self.anagrams2.get_anagrams("functors")
    self.assertEqual(r, ['functors'])

    _, r = self.anagrams2.get_anagrams("fund")
    self.assertEqual(r, ['fund'])

    _, r = self.anagrams2.get_anagrams("fundamental")
    self.assertEqual(r, ['fundamental'])

    _, r = self.anagrams2.get_anagrams("fundamentally")
    self.assertEqual(r, ['fundamentally'])

    _, r = self.anagrams2.get_anagrams("fundamentals")
    self.assertEqual(r, ['fundamentals'])

    _, r = self.anagrams2.get_anagrams("funded")
    self.assertEqual(r, ['funded'])

    _, r = self.anagrams2.get_anagrams("funder")
    self.assertEqual(r, ['funder'])

    _, r = self.anagrams2.get_anagrams("funders")
    self.assertEqual(r, ['funders'])

    _, r = self.anagrams2.get_anagrams("funding")
    self.assertEqual(r, ['funding'])

    _, r = self.anagrams2.get_anagrams("funds")
    self.assertEqual(r, ['funds'])

    _, r = self.anagrams2.get_anagrams("funeral")
    self.assertEqual(r, ['funeral'])

    _, r = self.anagrams2.get_anagrams("funerals")
    self.assertEqual(r, ['funerals'])

    _, r = self.anagrams2.get_anagrams("funereal")
    self.assertEqual(r, ['funereal'])

    _, r = self.anagrams2.get_anagrams("fungal")
    self.assertEqual(r, ['fungal'])

    _, r = self.anagrams2.get_anagrams("fungi")
    self.assertEqual(r, ['fungi'])

    _, r = self.anagrams2.get_anagrams("fungible")
    self.assertEqual(r, ['fungible'])

    _, r = self.anagrams2.get_anagrams("fungicide")
    self.assertEqual(r, ['fungicide'])

    _, r = self.anagrams2.get_anagrams("fungus")
    self.assertEqual(r, ['fungus'])

    _, r = self.anagrams2.get_anagrams("funk")
    self.assertEqual(r, ['funk'])

    _, r = self.anagrams2.get_anagrams("funnel")
    self.assertEqual(r, ['funnel'])

    _, r = self.anagrams2.get_anagrams("funneled")
    self.assertEqual(r, ['funneled'])

    _, r = self.anagrams2.get_anagrams("funneling")
    self.assertEqual(r, ['funneling'])

    _, r = self.anagrams2.get_anagrams("funnels")
    self.assertEqual(r, ['funnels'])

    _, r = self.anagrams2.get_anagrams("funnier")
    self.assertEqual(r, ['funnier'])

    _, r = self.anagrams2.get_anagrams("funniest")
    self.assertEqual(r, ['funniest'])

    _, r = self.anagrams2.get_anagrams("funnily")
    self.assertEqual(r, ['funnily'])

    _, r = self.anagrams2.get_anagrams("funniness")
    self.assertEqual(r, ['funniness'])

    _, r = self.anagrams2.get_anagrams("funny")
    self.assertEqual(r, ['funny'])

    _, r = self.anagrams2.get_anagrams("fur")
    self.assertEqual(r, ['fur'])

    _, r = self.anagrams2.get_anagrams("furies")
    self.assertEqual(r, ['furies'])

    _, r = self.anagrams2.get_anagrams("furious")
    self.assertEqual(r, ['furious'])

    _, r = self.anagrams2.get_anagrams("furiouser")
    self.assertEqual(r, ['furiouser'])

    _, r = self.anagrams2.get_anagrams("furiously")
    self.assertEqual(r, ['furiously'])

    _, r = self.anagrams2.get_anagrams("furlong")
    self.assertEqual(r, ['furlong'])

    _, r = self.anagrams2.get_anagrams("furlough")
    self.assertEqual(r, ['furlough'])

    _, r = self.anagrams2.get_anagrams("furman")
    self.assertEqual(r, ['furman'])

    _, r = self.anagrams2.get_anagrams("furnace")
    self.assertEqual(r, ['furnace'])

    _, r = self.anagrams2.get_anagrams("furnaces")
    self.assertEqual(r, ['furnaces'])

    _, r = self.anagrams2.get_anagrams("furnish")
    self.assertEqual(r, ['furnish'])

    _, r = self.anagrams2.get_anagrams("furnished")
    self.assertEqual(r, ['furnished'])

    _, r = self.anagrams2.get_anagrams("furnishes")
    self.assertEqual(r, ['furnishes'])

    _, r = self.anagrams2.get_anagrams("furnishing")
    self.assertEqual(r, ['furnishing'])

    _, r = self.anagrams2.get_anagrams("furnishings")
    self.assertEqual(r, ['furnishings'])

    _, r = self.anagrams2.get_anagrams("furniture")
    self.assertEqual(r, ['furniture'])

    _, r = self.anagrams2.get_anagrams("furrier")
    self.assertEqual(r, ['furrier'])

    _, r = self.anagrams2.get_anagrams("furrow")
    self.assertEqual(r, ['furrow'])

    _, r = self.anagrams2.get_anagrams("furrowed")
    self.assertEqual(r, ['furrowed'])

    _, r = self.anagrams2.get_anagrams("furrows")
    self.assertEqual(r, ['furrows'])

    _, r = self.anagrams2.get_anagrams("furry")
    self.assertEqual(r, ['furry'])

    _, r = self.anagrams2.get_anagrams("furs")
    self.assertEqual(r, ['furs', 'surf'])

    _, r = self.anagrams2.get_anagrams("further")
    self.assertEqual(r, ['further'])

    _, r = self.anagrams2.get_anagrams("furthered")
    self.assertEqual(r, ['furthered'])

    _, r = self.anagrams2.get_anagrams("furthering")
    self.assertEqual(r, ['furthering'])

    _, r = self.anagrams2.get_anagrams("furthermore")
    self.assertEqual(r, ['furthermore'])

    _, r = self.anagrams2.get_anagrams("furthermost")
    self.assertEqual(r, ['furthermost'])

    _, r = self.anagrams2.get_anagrams("furthers")
    self.assertEqual(r, ['furthers'])

    _, r = self.anagrams2.get_anagrams("furthest")
    self.assertEqual(r, ['furthest'])

    _, r = self.anagrams2.get_anagrams("furtive")
    self.assertEqual(r, ['furtive'])

    _, r = self.anagrams2.get_anagrams("furtively")
    self.assertEqual(r, ['furtively'])

    _, r = self.anagrams2.get_anagrams("furtiveness")
    self.assertEqual(r, ['furtiveness'])

    _, r = self.anagrams2.get_anagrams("fury")
    self.assertEqual(r, ['fury'])

    _, r = self.anagrams2.get_anagrams("fuse")
    self.assertEqual(r, ['fuse'])

    _, r = self.anagrams2.get_anagrams("fused")
    self.assertEqual(r, ['feuds', 'fused'])

    _, r = self.anagrams2.get_anagrams("fuses")
    self.assertEqual(r, ['fuses'])

    _, r = self.anagrams2.get_anagrams("fusing")
    self.assertEqual(r, ['fusing'])

    _, r = self.anagrams2.get_anagrams("fusion")
    self.assertEqual(r, ['fusion'])

    _, r = self.anagrams2.get_anagrams("fuss")
    self.assertEqual(r, ['fuss'])

    _, r = self.anagrams2.get_anagrams("fussing")
    self.assertEqual(r, ['fussing'])

    _, r = self.anagrams2.get_anagrams("fussy")
    self.assertEqual(r, ['fussy'])

    _, r = self.anagrams2.get_anagrams("futile")
    self.assertEqual(r, ['futile'])

    _, r = self.anagrams2.get_anagrams("futility")
    self.assertEqual(r, ['futility'])

    _, r = self.anagrams2.get_anagrams("future")
    self.assertEqual(r, ['future'])

    _, r = self.anagrams2.get_anagrams("futures")
    self.assertEqual(r, ['futures'])

    _, r = self.anagrams2.get_anagrams("futuristic")
    self.assertEqual(r, ['futuristic'])

    _, r = self.anagrams2.get_anagrams("fuzz")
    self.assertEqual(r, ['fuzz'])

    _, r = self.anagrams2.get_anagrams("fuzzier")
    self.assertEqual(r, ['fuzzier'])

    _, r = self.anagrams2.get_anagrams("fuzziness")
    self.assertEqual(r, ['fuzziness'])

    _, r = self.anagrams2.get_anagrams("fuzzy")
    self.assertEqual(r, ['fuzzy'])

    _, r = self.anagrams2.get_anagrams("gab")
    self.assertEqual(r, ['bag', 'gab'])

    _, r = self.anagrams2.get_anagrams("gabardine")
    self.assertEqual(r, ['bargained', 'gabardine'])

    _, r = self.anagrams2.get_anagrams("gabbing")
    self.assertEqual(r, ['gabbing'])

    _, r = self.anagrams2.get_anagrams("gaberones")
    self.assertEqual(r, ['gaberones'])

    _, r = self.anagrams2.get_anagrams("gable")
    self.assertEqual(r, ['bagel', 'gable'])

    _, r = self.anagrams2.get_anagrams("gabled")
    self.assertEqual(r, ['gabled'])

    _, r = self.anagrams2.get_anagrams("gabler")
    self.assertEqual(r, ['gabler', 'garble'])

    _, r = self.anagrams2.get_anagrams("gables")
    self.assertEqual(r, ['bagels', 'gables'])

    _, r = self.anagrams2.get_anagrams("gabon")
    self.assertEqual(r, ['gabon'])

    _, r = self.anagrams2.get_anagrams("gaborone")
    self.assertEqual(r, ['gaborone'])

    _, r = self.anagrams2.get_anagrams("gabriel")
    self.assertEqual(r, ['gabriel'])

    _, r = self.anagrams2.get_anagrams("gabrielle")
    self.assertEqual(r, ['gabrielle'])

    _, r = self.anagrams2.get_anagrams("gad")
    self.assertEqual(r, ['gad'])

    _, r = self.anagrams2.get_anagrams("gadfly")
    self.assertEqual(r, ['gadfly'])

    _, r = self.anagrams2.get_anagrams("gadget")
    self.assertEqual(r, ['gadget', 'tagged'])

    _, r = self.anagrams2.get_anagrams("gadgetry")
    self.assertEqual(r, ['gadgetry'])

    _, r = self.anagrams2.get_anagrams("gadgets")
    self.assertEqual(r, ['gadgets'])

    _, r = self.anagrams2.get_anagrams("gaelic")
    self.assertEqual(r, ['gaelic'])

    _, r = self.anagrams2.get_anagrams("gaelicization")
    self.assertEqual(r, ['gaelicization'])

    _, r = self.anagrams2.get_anagrams("gaelicizations")
    self.assertEqual(r, ['gaelicizations'])

    _, r = self.anagrams2.get_anagrams("gaelicize")
    self.assertEqual(r, ['gaelicize'])

    _, r = self.anagrams2.get_anagrams("gaelicizes")
    self.assertEqual(r, ['gaelicizes'])

    _, r = self.anagrams2.get_anagrams("gag")
    self.assertEqual(r, ['gag'])

    _, r = self.anagrams2.get_anagrams("gagged")
    self.assertEqual(r, ['gagged'])

    _, r = self.anagrams2.get_anagrams("gagging")
    self.assertEqual(r, ['gagging'])

    _, r = self.anagrams2.get_anagrams("gaging")
    self.assertEqual(r, ['gaging'])

    _, r = self.anagrams2.get_anagrams("gags")
    self.assertEqual(r, ['gags'])

    _, r = self.anagrams2.get_anagrams("gaieties")
    self.assertEqual(r, ['gaieties'])

    _, r = self.anagrams2.get_anagrams("gaiety")
    self.assertEqual(r, ['gaiety'])

    _, r = self.anagrams2.get_anagrams("gail")
    self.assertEqual(r, ['gail'])

    _, r = self.anagrams2.get_anagrams("gaily")
    self.assertEqual(r, ['gaily'])

    _, r = self.anagrams2.get_anagrams("gain")
    self.assertEqual(r, ['gain', 'gina'])

    _, r = self.anagrams2.get_anagrams("gained")
    self.assertEqual(r, ['gained'])

    _, r = self.anagrams2.get_anagrams("gainer")
    self.assertEqual(r, ['gainer', 'regain', 'regina'])

    _, r = self.anagrams2.get_anagrams("gainers")
    self.assertEqual(r, ['erasing', 'gainers', 'regains', 'searing'])

    _, r = self.anagrams2.get_anagrams("gaines")
    self.assertEqual(r, ['easing', 'gaines'])

    _, r = self.anagrams2.get_anagrams("gainesville")
    self.assertEqual(r, ['gainesville'])

    _, r = self.anagrams2.get_anagrams("gainful")
    self.assertEqual(r, ['gainful'])

    _, r = self.anagrams2.get_anagrams("gaining")
    self.assertEqual(r, ['gaining'])

    _, r = self.anagrams2.get_anagrams("gains")
    self.assertEqual(r, ['gains'])

    _, r = self.anagrams2.get_anagrams("gait")
    self.assertEqual(r, ['gait'])

    _, r = self.anagrams2.get_anagrams("gaited")
    self.assertEqual(r, ['gaited'])

    _, r = self.anagrams2.get_anagrams("gaiter")
    self.assertEqual(r, ['gaiter'])

    _, r = self.anagrams2.get_anagrams("gaiters")
    self.assertEqual(r, ['gaiters'])

    _, r = self.anagrams2.get_anagrams("gaithersburg")
    self.assertEqual(r, ['gaithersburg'])

    _, r = self.anagrams2.get_anagrams("galactic")
    self.assertEqual(r, ['galactic'])

    _, r = self.anagrams2.get_anagrams("galahad")
    self.assertEqual(r, ['galahad'])

    _, r = self.anagrams2.get_anagrams("galapagos")
    self.assertEqual(r, ['galapagos'])

    _, r = self.anagrams2.get_anagrams("galatea")
    self.assertEqual(r, ['galatea'])

    _, r = self.anagrams2.get_anagrams("galatean")
    self.assertEqual(r, ['galatean'])

    _, r = self.anagrams2.get_anagrams("galateans")
    self.assertEqual(r, ['galateans'])

    _, r = self.anagrams2.get_anagrams("galatia")
    self.assertEqual(r, ['galatia'])

    _, r = self.anagrams2.get_anagrams("galatians")
    self.assertEqual(r, ['galatians'])

    _, r = self.anagrams2.get_anagrams("galaxies")
    self.assertEqual(r, ['galaxies'])

    _, r = self.anagrams2.get_anagrams("galaxy")
    self.assertEqual(r, ['galaxy'])

    _, r = self.anagrams2.get_anagrams("galbreath")
    self.assertEqual(r, ['galbreath'])

    _, r = self.anagrams2.get_anagrams("gale")
    self.assertEqual(r, ['gale'])

    _, r = self.anagrams2.get_anagrams("galen")
    self.assertEqual(r, ['angel', 'angle', 'galen', 'glean', 'lange'])

    _, r = self.anagrams2.get_anagrams("galilean")
    self.assertEqual(r, ['galilean'])

    _, r = self.anagrams2.get_anagrams("galilee")
    self.assertEqual(r, ['galilee'])

    _, r = self.anagrams2.get_anagrams("galileo")
    self.assertEqual(r, ['galileo'])

    _, r = self.anagrams2.get_anagrams("gall")
    self.assertEqual(r, ['gall'])

    _, r = self.anagrams2.get_anagrams("gallagher")
    self.assertEqual(r, ['gallagher'])

    _, r = self.anagrams2.get_anagrams("gallant")
    self.assertEqual(r, ['gallant'])

    _, r = self.anagrams2.get_anagrams("gallantly")
    self.assertEqual(r, ['gallantly'])

    _, r = self.anagrams2.get_anagrams("gallantry")
    self.assertEqual(r, ['gallantry'])

    _, r = self.anagrams2.get_anagrams("gallants")
    self.assertEqual(r, ['gallants'])

    _, r = self.anagrams2.get_anagrams("galled")
    self.assertEqual(r, ['galled'])

    _, r = self.anagrams2.get_anagrams("galleried")
    self.assertEqual(r, ['galleried'])

    _, r = self.anagrams2.get_anagrams("galleries")
    self.assertEqual(r, ['allergies', 'galleries'])

    _, r = self.anagrams2.get_anagrams("gallery")
    self.assertEqual(r, ['allergy', 'gallery', 'largely', 'regally'])

    _, r = self.anagrams2.get_anagrams("galley")
    self.assertEqual(r, ['galley'])

    _, r = self.anagrams2.get_anagrams("galleys")
    self.assertEqual(r, ['galleys'])

    _, r = self.anagrams2.get_anagrams("galling")
    self.assertEqual(r, ['galling'])

    _, r = self.anagrams2.get_anagrams("gallon")
    self.assertEqual(r, ['gallon'])

    _, r = self.anagrams2.get_anagrams("gallons")
    self.assertEqual(r, ['gallons'])

    _, r = self.anagrams2.get_anagrams("gallop")
    self.assertEqual(r, ['gallop'])

    _, r = self.anagrams2.get_anagrams("galloped")
    self.assertEqual(r, ['galloped'])

    _, r = self.anagrams2.get_anagrams("galloper")
    self.assertEqual(r, ['galloper'])

    _, r = self.anagrams2.get_anagrams("galloping")
    self.assertEqual(r, ['galloping'])

    _, r = self.anagrams2.get_anagrams("gallops")
    self.assertEqual(r, ['gallops'])

    _, r = self.anagrams2.get_anagrams("galloway")
    self.assertEqual(r, ['galloway'])

    _, r = self.anagrams2.get_anagrams("gallows")
    self.assertEqual(r, ['gallows'])

    _, r = self.anagrams2.get_anagrams("galls")
    self.assertEqual(r, ['galls'])

    _, r = self.anagrams2.get_anagrams("gallstone")
    self.assertEqual(r, ['gallstone'])

    _, r = self.anagrams2.get_anagrams("gallup")
    self.assertEqual(r, ['gallup'])

    _, r = self.anagrams2.get_anagrams("galois")
    self.assertEqual(r, ['galois'])

    _, r = self.anagrams2.get_anagrams("galt")
    self.assertEqual(r, ['galt'])

    _, r = self.anagrams2.get_anagrams("galveston")
    self.assertEqual(r, ['galveston'])

    _, r = self.anagrams2.get_anagrams("galvin")
    self.assertEqual(r, ['galvin'])

    _, r = self.anagrams2.get_anagrams("galway")
    self.assertEqual(r, ['galway'])

    _, r = self.anagrams2.get_anagrams("gambia")
    self.assertEqual(r, ['gambia'])

    _, r = self.anagrams2.get_anagrams("gambit")
    self.assertEqual(r, ['gambit'])

    _, r = self.anagrams2.get_anagrams("gamble")
    self.assertEqual(r, ['gamble'])

    _, r = self.anagrams2.get_anagrams("gambled")
    self.assertEqual(r, ['gambled'])

    _, r = self.anagrams2.get_anagrams("gambler")
    self.assertEqual(r, ['gambler'])

    _, r = self.anagrams2.get_anagrams("gamblers")
    self.assertEqual(r, ['gamblers'])

    _, r = self.anagrams2.get_anagrams("gambles")
    self.assertEqual(r, ['gambles'])

    _, r = self.anagrams2.get_anagrams("gambling")
    self.assertEqual(r, ['gambling'])

    _, r = self.anagrams2.get_anagrams("gambol")
    self.assertEqual(r, ['gambol'])

    _, r = self.anagrams2.get_anagrams("game")
    self.assertEqual(r, ['game'])

    _, r = self.anagrams2.get_anagrams("gamed")
    self.assertEqual(r, ['gamed'])

    _, r = self.anagrams2.get_anagrams("gamely")
    self.assertEqual(r, ['gamely'])

    _, r = self.anagrams2.get_anagrams("gameness")
    self.assertEqual(r, ['gameness'])

    _, r = self.anagrams2.get_anagrams("games")
    self.assertEqual(r, ['games'])

    _, r = self.anagrams2.get_anagrams("gaming")
    self.assertEqual(r, ['gaming'])

    _, r = self.anagrams2.get_anagrams("gamma")
    self.assertEqual(r, ['gamma'])

    _, r = self.anagrams2.get_anagrams("gander")
    self.assertEqual(r, ['danger', 'gander', 'garden', 'ranged'])

    _, r = self.anagrams2.get_anagrams("gandhi")
    self.assertEqual(r, ['gandhi'])

    _, r = self.anagrams2.get_anagrams("gandhian")
    self.assertEqual(r, ['gandhian'])

    _, r = self.anagrams2.get_anagrams("gang")
    self.assertEqual(r, ['gang'])

    _, r = self.anagrams2.get_anagrams("ganges")
    self.assertEqual(r, ['ganges'])

    _, r = self.anagrams2.get_anagrams("gangland")
    self.assertEqual(r, ['gangland'])

    _, r = self.anagrams2.get_anagrams("gangling")
    self.assertEqual(r, ['gangling'])

    _, r = self.anagrams2.get_anagrams("gangplank")
    self.assertEqual(r, ['gangplank'])

    _, r = self.anagrams2.get_anagrams("gangrene")
    self.assertEqual(r, ['gangrene'])

    _, r = self.anagrams2.get_anagrams("gangs")
    self.assertEqual(r, ['gangs'])

    _, r = self.anagrams2.get_anagrams("gangster")
    self.assertEqual(r, ['gangster'])

    _, r = self.anagrams2.get_anagrams("gangsters")
    self.assertEqual(r, ['gangsters'])

    _, r = self.anagrams2.get_anagrams("gannett")
    self.assertEqual(r, ['gannett', 'tangent'])

    _, r = self.anagrams2.get_anagrams("gantry")
    self.assertEqual(r, ['gantry'])

    _, r = self.anagrams2.get_anagrams("ganymede")
    self.assertEqual(r, ['ganymede'])

    _, r = self.anagrams2.get_anagrams("gap")
    self.assertEqual(r, ['gap'])

    _, r = self.anagrams2.get_anagrams("gape")
    self.assertEqual(r, ['gape', 'page'])

    _, r = self.anagrams2.get_anagrams("gaped")
    self.assertEqual(r, ['gaped', 'paged'])

    _, r = self.anagrams2.get_anagrams("gapes")
    self.assertEqual(r, ['gapes', 'pages'])

    _, r = self.anagrams2.get_anagrams("gaping")
    self.assertEqual(r, ['gaping', 'paging'])

    _, r = self.anagrams2.get_anagrams("gaps")
    self.assertEqual(r, ['gaps', 'gasp'])

    _, r = self.anagrams2.get_anagrams("garage")
    self.assertEqual(r, ['garage'])

    _, r = self.anagrams2.get_anagrams("garaged")
    self.assertEqual(r, ['garaged'])

    _, r = self.anagrams2.get_anagrams("garages")
    self.assertEqual(r, ['garages'])

    _, r = self.anagrams2.get_anagrams("garb")
    self.assertEqual(r, ['brag', 'garb', 'grab'])

    _, r = self.anagrams2.get_anagrams("garbage")
    self.assertEqual(r, ['garbage'])

    _, r = self.anagrams2.get_anagrams("garbages")
    self.assertEqual(r, ['garbages'])

    _, r = self.anagrams2.get_anagrams("garbed")
    self.assertEqual(r, ['badger', 'garbed'])

    _, r = self.anagrams2.get_anagrams("garble")
    self.assertEqual(r, ['gabler', 'garble'])

    _, r = self.anagrams2.get_anagrams("garbled")
    self.assertEqual(r, ['garbled'])

    _, r = self.anagrams2.get_anagrams("garcia")
    self.assertEqual(r, ['garcia'])

    _, r = self.anagrams2.get_anagrams("garden")
    self.assertEqual(r, ['danger', 'gander', 'garden', 'ranged'])

    _, r = self.anagrams2.get_anagrams("gardened")
    self.assertEqual(r, ['gardened'])

    _, r = self.anagrams2.get_anagrams("gardener")
    self.assertEqual(r, ['gardener', 'garnered'])

    _, r = self.anagrams2.get_anagrams("gardeners")
    self.assertEqual(r, ['gardeners'])

    _, r = self.anagrams2.get_anagrams("gardening")
    self.assertEqual(r, ['gardening'])

    _, r = self.anagrams2.get_anagrams("gardens")
    self.assertEqual(r, ['dangers', 'gardens'])

    _, r = self.anagrams2.get_anagrams("gardner")
    self.assertEqual(r, ['gardner', 'grander'])

    _, r = self.anagrams2.get_anagrams("garfield")
    self.assertEqual(r, ['garfield'])

    _, r = self.anagrams2.get_anagrams("garfunkel")
    self.assertEqual(r, ['garfunkel'])

    _, r = self.anagrams2.get_anagrams("gargantuan")
    self.assertEqual(r, ['gargantuan'])

    _, r = self.anagrams2.get_anagrams("gargle")
    self.assertEqual(r, ['gargle'])

    _, r = self.anagrams2.get_anagrams("gargled")
    self.assertEqual(r, ['gargled'])

    _, r = self.anagrams2.get_anagrams("gargles")
    self.assertEqual(r, ['gargles'])

    _, r = self.anagrams2.get_anagrams("gargling")
    self.assertEqual(r, ['gargling'])

    _, r = self.anagrams2.get_anagrams("garibaldi")
    self.assertEqual(r, ['garibaldi'])

    _, r = self.anagrams2.get_anagrams("garland")
    self.assertEqual(r, ['garland'])

    _, r = self.anagrams2.get_anagrams("garlanded")
    self.assertEqual(r, ['garlanded'])

    _, r = self.anagrams2.get_anagrams("garlic")
    self.assertEqual(r, ['garlic'])

    _, r = self.anagrams2.get_anagrams("garment")
    self.assertEqual(r, ['garment'])

    _, r = self.anagrams2.get_anagrams("garments")
    self.assertEqual(r, ['garments'])

    _, r = self.anagrams2.get_anagrams("garner")
    self.assertEqual(r, ['garner', 'ranger'])

    _, r = self.anagrams2.get_anagrams("garnered")
    self.assertEqual(r, ['gardener', 'garnered'])

    _, r = self.anagrams2.get_anagrams("garnett")
    self.assertEqual(r, ['garnett'])

    _, r = self.anagrams2.get_anagrams("garnish")
    self.assertEqual(r, ['garnish', 'sharing'])

    _, r = self.anagrams2.get_anagrams("garrett")
    self.assertEqual(r, ['garrett'])

    _, r = self.anagrams2.get_anagrams("garrison")
    self.assertEqual(r, ['garrison'])

    _, r = self.anagrams2.get_anagrams("garrisoned")
    self.assertEqual(r, ['garrisoned'])

    _, r = self.anagrams2.get_anagrams("garrisonian")
    self.assertEqual(r, ['garrisonian'])

    _, r = self.anagrams2.get_anagrams("garry")
    self.assertEqual(r, ['garry'])

    _, r = self.anagrams2.get_anagrams("garter")
    self.assertEqual(r, ['garter', 'grater'])

    _, r = self.anagrams2.get_anagrams("garters")
    self.assertEqual(r, ['garters'])

    _, r = self.anagrams2.get_anagrams("garth")
    self.assertEqual(r, ['garth'])

    _, r = self.anagrams2.get_anagrams("garvey")
    self.assertEqual(r, ['garvey'])

    _, r = self.anagrams2.get_anagrams("gary")
    self.assertEqual(r, ['gary', 'gray'])

    _, r = self.anagrams2.get_anagrams("gas")
    self.assertEqual(r, ['gas', 'sag'])

    _, r = self.anagrams2.get_anagrams("gascony")
    self.assertEqual(r, ['gascony'])

    _, r = self.anagrams2.get_anagrams("gaseous")
    self.assertEqual(r, ['gaseous'])

    _, r = self.anagrams2.get_anagrams("gaseously")
    self.assertEqual(r, ['gaseously'])

    _, r = self.anagrams2.get_anagrams("gases")
    self.assertEqual(r, ['gases', 'sages'])

    _, r = self.anagrams2.get_anagrams("gash")
    self.assertEqual(r, ['gash'])

    _, r = self.anagrams2.get_anagrams("gashes")
    self.assertEqual(r, ['gashes'])

    _, r = self.anagrams2.get_anagrams("gasket")
    self.assertEqual(r, ['gasket'])

    _, r = self.anagrams2.get_anagrams("gaslight")
    self.assertEqual(r, ['gaslight'])

    _, r = self.anagrams2.get_anagrams("gasoline")
    self.assertEqual(r, ['gasoline'])

    _, r = self.anagrams2.get_anagrams("gasp")
    self.assertEqual(r, ['gaps', 'gasp'])

    _, r = self.anagrams2.get_anagrams("gasped")
    self.assertEqual(r, ['gasped'])

    _, r = self.anagrams2.get_anagrams("gaspee")
    self.assertEqual(r, ['gaspee'])

    _, r = self.anagrams2.get_anagrams("gasping")
    self.assertEqual(r, ['gasping'])

    _, r = self.anagrams2.get_anagrams("gasps")
    self.assertEqual(r, ['gasps'])

    _, r = self.anagrams2.get_anagrams("gassed")
    self.assertEqual(r, ['gassed'])

    _, r = self.anagrams2.get_anagrams("gasser")
    self.assertEqual(r, ['gasser'])

    _, r = self.anagrams2.get_anagrams("gasset")
    self.assertEqual(r, ['gasset', 'stages'])

    _, r = self.anagrams2.get_anagrams("gassing")
    self.assertEqual(r, ['gassing'])

    _, r = self.anagrams2.get_anagrams("gassings")
    self.assertEqual(r, ['gassings'])

    _, r = self.anagrams2.get_anagrams("gassy")
    self.assertEqual(r, ['gassy'])

    _, r = self.anagrams2.get_anagrams("gaston")
    self.assertEqual(r, ['gaston'])

    _, r = self.anagrams2.get_anagrams("gastric")
    self.assertEqual(r, ['gastric'])

    _, r = self.anagrams2.get_anagrams("gastrointestinal")
    self.assertEqual(r, ['gastrointestinal'])

    _, r = self.anagrams2.get_anagrams("gastronome")
    self.assertEqual(r, ['gastronome'])

    _, r = self.anagrams2.get_anagrams("gastronomy")
    self.assertEqual(r, ['gastronomy'])

    _, r = self.anagrams2.get_anagrams("gate")
    self.assertEqual(r, ['gate'])

    _, r = self.anagrams2.get_anagrams("gated")
    self.assertEqual(r, ['gated'])

    _, r = self.anagrams2.get_anagrams("gates")
    self.assertEqual(r, ['gates', 'stage'])

    _, r = self.anagrams2.get_anagrams("gateway")
    self.assertEqual(r, ['gateway', 'getaway'])

    _, r = self.anagrams2.get_anagrams("gateways")
    self.assertEqual(r, ['gateways'])

    _, r = self.anagrams2.get_anagrams("gather")
    self.assertEqual(r, ['gather'])

    _, r = self.anagrams2.get_anagrams("gathered")
    self.assertEqual(r, ['gathered'])

    _, r = self.anagrams2.get_anagrams("gatherer")
    self.assertEqual(r, ['gatherer'])

    _, r = self.anagrams2.get_anagrams("gatherers")
    self.assertEqual(r, ['gatherers'])

    _, r = self.anagrams2.get_anagrams("gathering")
    self.assertEqual(r, ['gathering'])

    _, r = self.anagrams2.get_anagrams("gatherings")
    self.assertEqual(r, ['gatherings'])

    _, r = self.anagrams2.get_anagrams("gathers")
    self.assertEqual(r, ['gathers'])

    _, r = self.anagrams2.get_anagrams("gating")
    self.assertEqual(r, ['gating'])

    _, r = self.anagrams2.get_anagrams("gatlinburg")
    self.assertEqual(r, ['gatlinburg'])

    _, r = self.anagrams2.get_anagrams("gator")
    self.assertEqual(r, ['argot', 'gator'])

    _, r = self.anagrams2.get_anagrams("gatsby")
    self.assertEqual(r, ['gatsby'])

    _, r = self.anagrams2.get_anagrams("gauche")
    self.assertEqual(r, ['gauche'])

    _, r = self.anagrams2.get_anagrams("gaudiness")
    self.assertEqual(r, ['gaudiness'])

    _, r = self.anagrams2.get_anagrams("gaudy")
    self.assertEqual(r, ['gaudy'])

    _, r = self.anagrams2.get_anagrams("gauge")
    self.assertEqual(r, ['gauge'])

    _, r = self.anagrams2.get_anagrams("gauged")
    self.assertEqual(r, ['gauged'])

    _, r = self.anagrams2.get_anagrams("gauges")
    self.assertEqual(r, ['gauges'])

    _, r = self.anagrams2.get_anagrams("gauguin")
    self.assertEqual(r, ['gauguin'])

    _, r = self.anagrams2.get_anagrams("gaul")
    self.assertEqual(r, ['gaul'])

    _, r = self.anagrams2.get_anagrams("gaulle")
    self.assertEqual(r, ['gaulle'])

    _, r = self.anagrams2.get_anagrams("gauls")
    self.assertEqual(r, ['gauls'])

    _, r = self.anagrams2.get_anagrams("gaunt")
    self.assertEqual(r, ['gaunt'])

    _, r = self.anagrams2.get_anagrams("gauntley")
    self.assertEqual(r, ['gauntley'])

    _, r = self.anagrams2.get_anagrams("gauntness")
    self.assertEqual(r, ['gauntness'])

    _, r = self.anagrams2.get_anagrams("gaussian")
    self.assertEqual(r, ['gaussian'])

    _, r = self.anagrams2.get_anagrams("gautama")
    self.assertEqual(r, ['gautama'])

    _, r = self.anagrams2.get_anagrams("gauze")
    self.assertEqual(r, ['gauze'])

    _, r = self.anagrams2.get_anagrams("gave")
    self.assertEqual(r, ['gave', 'vega'])

    _, r = self.anagrams2.get_anagrams("gavel")
    self.assertEqual(r, ['gavel'])

    _, r = self.anagrams2.get_anagrams("gavin")
    self.assertEqual(r, ['gavin'])

    _, r = self.anagrams2.get_anagrams("gawk")
    self.assertEqual(r, ['gawk'])

    _, r = self.anagrams2.get_anagrams("gawky")
    self.assertEqual(r, ['gawky'])

    _, r = self.anagrams2.get_anagrams("gay")
    self.assertEqual(r, ['gay'])

    _, r = self.anagrams2.get_anagrams("gayer")
    self.assertEqual(r, ['gayer', 'geary'])

    _, r = self.anagrams2.get_anagrams("gayest")
    self.assertEqual(r, ['gayest'])

    _, r = self.anagrams2.get_anagrams("gayety")
    self.assertEqual(r, ['gayety'])

    _, r = self.anagrams2.get_anagrams("gaylor")
    self.assertEqual(r, ['gaylor'])

    _, r = self.anagrams2.get_anagrams("gaylord")
    self.assertEqual(r, ['gaylord'])

    _, r = self.anagrams2.get_anagrams("gayly")
    self.assertEqual(r, ['gayly'])

    _, r = self.anagrams2.get_anagrams("gayness")
    self.assertEqual(r, ['gayness'])

    _, r = self.anagrams2.get_anagrams("gaynor")
    self.assertEqual(r, ['gaynor'])

    _, r = self.anagrams2.get_anagrams("gaze")
    self.assertEqual(r, ['gaze'])

    _, r = self.anagrams2.get_anagrams("gazed")
    self.assertEqual(r, ['gazed'])

    _, r = self.anagrams2.get_anagrams("gazelle")
    self.assertEqual(r, ['gazelle'])

    _, r = self.anagrams2.get_anagrams("gazer")
    self.assertEqual(r, ['gazer', 'graze'])

    _, r = self.anagrams2.get_anagrams("gazers")
    self.assertEqual(r, ['gazers'])

    _, r = self.anagrams2.get_anagrams("gazes")
    self.assertEqual(r, ['gazes'])

    _, r = self.anagrams2.get_anagrams("gazette")
    self.assertEqual(r, ['gazette'])

    _, r = self.anagrams2.get_anagrams("gazing")
    self.assertEqual(r, ['gazing'])

    _, r = self.anagrams2.get_anagrams("gear")
    self.assertEqual(r, ['ager', 'gear', 'rage'])

    _, r = self.anagrams2.get_anagrams("geared")
    self.assertEqual(r, ['agreed', 'geared'])

    _, r = self.anagrams2.get_anagrams("gearing")
    self.assertEqual(r, ['gearing'])

    _, r = self.anagrams2.get_anagrams("gears")
    self.assertEqual(r, ['agers', 'gears', 'rages'])

    _, r = self.anagrams2.get_anagrams("geary")
    self.assertEqual(r, ['gayer', 'geary'])

    _, r = self.anagrams2.get_anagrams("gecko")
    self.assertEqual(r, ['gecko'])

    _, r = self.anagrams2.get_anagrams("geese")
    self.assertEqual(r, ['geese'])

    _, r = self.anagrams2.get_anagrams("gehrig")
    self.assertEqual(r, ['gehrig'])

    _, r = self.anagrams2.get_anagrams("geiger")
    self.assertEqual(r, ['geiger'])

    _, r = self.anagrams2.get_anagrams("geigy")
    self.assertEqual(r, ['geigy'])

    _, r = self.anagrams2.get_anagrams("geisha")
    self.assertEqual(r, ['geisha'])

    _, r = self.anagrams2.get_anagrams("gel")
    self.assertEqual(r, ['gel', 'leg'])

    _, r = self.anagrams2.get_anagrams("gelatin")
    self.assertEqual(r, ['gelatin'])

    _, r = self.anagrams2.get_anagrams("gelatine")
    self.assertEqual(r, ['gelatine'])

    _, r = self.anagrams2.get_anagrams("gelatinous")
    self.assertEqual(r, ['gelatinous'])

    _, r = self.anagrams2.get_anagrams("geld")
    self.assertEqual(r, ['geld'])

    _, r = self.anagrams2.get_anagrams("gelled")
    self.assertEqual(r, ['gelled'])

    _, r = self.anagrams2.get_anagrams("gelling")
    self.assertEqual(r, ['gelling'])

    _, r = self.anagrams2.get_anagrams("gels")
    self.assertEqual(r, ['gels', 'legs'])

    _, r = self.anagrams2.get_anagrams("gem")
    self.assertEqual(r, ['gem', 'meg'])

    _, r = self.anagrams2.get_anagrams("gemini")
    self.assertEqual(r, ['gemini'])

    _, r = self.anagrams2.get_anagrams("geminid")
    self.assertEqual(r, ['geminid'])

    _, r = self.anagrams2.get_anagrams("gemma")
    self.assertEqual(r, ['gemma'])

    _, r = self.anagrams2.get_anagrams("gems")
    self.assertEqual(r, ['gems'])

    _, r = self.anagrams2.get_anagrams("gender")
    self.assertEqual(r, ['gender'])

    _, r = self.anagrams2.get_anagrams("genders")
    self.assertEqual(r, ['genders'])

    _, r = self.anagrams2.get_anagrams("gene")
    self.assertEqual(r, ['gene'])

    _, r = self.anagrams2.get_anagrams("genealogy")
    self.assertEqual(r, ['genealogy'])

    _, r = self.anagrams2.get_anagrams("general")
    self.assertEqual(r, ['enlarge', 'general', 'gleaner'])

    _, r = self.anagrams2.get_anagrams("generalist")
    self.assertEqual(r, ['generalist'])

    _, r = self.anagrams2.get_anagrams("generalists")
    self.assertEqual(r, ['generalists'])

    _, r = self.anagrams2.get_anagrams("generalities")
    self.assertEqual(r, ['generalities'])

    _, r = self.anagrams2.get_anagrams("generality")
    self.assertEqual(r, ['generality'])

    _, r = self.anagrams2.get_anagrams("generalization")
    self.assertEqual(r, ['generalization'])

    _, r = self.anagrams2.get_anagrams("generalizations")
    self.assertEqual(r, ['generalizations'])

    _, r = self.anagrams2.get_anagrams("generalize")
    self.assertEqual(r, ['generalize'])

    _, r = self.anagrams2.get_anagrams("generalized")
    self.assertEqual(r, ['generalized'])

    _, r = self.anagrams2.get_anagrams("generalizer")
    self.assertEqual(r, ['generalizer'])

    _, r = self.anagrams2.get_anagrams("generalizers")
    self.assertEqual(r, ['generalizers'])

    _, r = self.anagrams2.get_anagrams("generalizes")
    self.assertEqual(r, ['generalizes'])

    _, r = self.anagrams2.get_anagrams("generalizing")
    self.assertEqual(r, ['generalizing'])

    _, r = self.anagrams2.get_anagrams("generally")
    self.assertEqual(r, ['generally'])

    _, r = self.anagrams2.get_anagrams("generals")
    self.assertEqual(r, ['enlarges', 'generals'])

    _, r = self.anagrams2.get_anagrams("generate")
    self.assertEqual(r, ['generate', 'teenager'])

    _, r = self.anagrams2.get_anagrams("generated")
    self.assertEqual(r, ['generated'])

    _, r = self.anagrams2.get_anagrams("generates")
    self.assertEqual(r, ['generates', 'teenagers'])

    _, r = self.anagrams2.get_anagrams("generating")
    self.assertEqual(r, ['generating'])

    _, r = self.anagrams2.get_anagrams("generation")
    self.assertEqual(r, ['generation'])

    _, r = self.anagrams2.get_anagrams("generations")
    self.assertEqual(r, ['generations'])

    _, r = self.anagrams2.get_anagrams("generative")
    self.assertEqual(r, ['generative'])

    _, r = self.anagrams2.get_anagrams("generator")
    self.assertEqual(r, ['generator'])

    _, r = self.anagrams2.get_anagrams("generators")
    self.assertEqual(r, ['generators'])

    _, r = self.anagrams2.get_anagrams("generic")
    self.assertEqual(r, ['generic'])

    _, r = self.anagrams2.get_anagrams("generically")
    self.assertEqual(r, ['generically'])

    _, r = self.anagrams2.get_anagrams("generosities")
    self.assertEqual(r, ['generosities'])

    _, r = self.anagrams2.get_anagrams("generosity")
    self.assertEqual(r, ['generosity'])

    _, r = self.anagrams2.get_anagrams("generous")
    self.assertEqual(r, ['generous'])

    _, r = self.anagrams2.get_anagrams("generously")
    self.assertEqual(r, ['generously'])

    _, r = self.anagrams2.get_anagrams("generousness")
    self.assertEqual(r, ['generousness'])

    _, r = self.anagrams2.get_anagrams("genes")
    self.assertEqual(r, ['genes'])

    _, r = self.anagrams2.get_anagrams("genesco")
    self.assertEqual(r, ['genesco'])

    _, r = self.anagrams2.get_anagrams("genesis")
    self.assertEqual(r, ['genesis'])

    _, r = self.anagrams2.get_anagrams("genetic")
    self.assertEqual(r, ['genetic'])

    _, r = self.anagrams2.get_anagrams("genetically")
    self.assertEqual(r, ['genetically'])

    _, r = self.anagrams2.get_anagrams("geneva")
    self.assertEqual(r, ['avenge', 'geneva'])

    _, r = self.anagrams2.get_anagrams("genevieve")
    self.assertEqual(r, ['genevieve'])

    _, r = self.anagrams2.get_anagrams("genial")
    self.assertEqual(r, ['genial'])

    _, r = self.anagrams2.get_anagrams("genially")
    self.assertEqual(r, ['genially'])

    _, r = self.anagrams2.get_anagrams("genie")
    self.assertEqual(r, ['genie'])

    _, r = self.anagrams2.get_anagrams("genius")
    self.assertEqual(r, ['genius'])

    _, r = self.anagrams2.get_anagrams("geniuses")
    self.assertEqual(r, ['geniuses'])

    _, r = self.anagrams2.get_anagrams("genoa")
    self.assertEqual(r, ['genoa'])

    _, r = self.anagrams2.get_anagrams("genre")
    self.assertEqual(r, ['genre', 'green'])

    _, r = self.anagrams2.get_anagrams("genres")
    self.assertEqual(r, ['genres', 'greens'])

    _, r = self.anagrams2.get_anagrams("gent")
    self.assertEqual(r, ['gent'])

    _, r = self.anagrams2.get_anagrams("genteel")
    self.assertEqual(r, ['genteel'])

    _, r = self.anagrams2.get_anagrams("gentile")
    self.assertEqual(r, ['gentile'])

    _, r = self.anagrams2.get_anagrams("gentle")
    self.assertEqual(r, ['gentle'])

    _, r = self.anagrams2.get_anagrams("gentleman")
    self.assertEqual(r, ['gentleman'])

    _, r = self.anagrams2.get_anagrams("gentlemanly")
    self.assertEqual(r, ['gentlemanly'])

    _, r = self.anagrams2.get_anagrams("gentlemen")
    self.assertEqual(r, ['gentlemen'])

    _, r = self.anagrams2.get_anagrams("gentleness")
    self.assertEqual(r, ['gentleness'])

    _, r = self.anagrams2.get_anagrams("gentler")
    self.assertEqual(r, ['gentler'])

    _, r = self.anagrams2.get_anagrams("gentlest")
    self.assertEqual(r, ['gentlest'])

    _, r = self.anagrams2.get_anagrams("gentlewoman")
    self.assertEqual(r, ['gentlewoman'])

    _, r = self.anagrams2.get_anagrams("gently")
    self.assertEqual(r, ['gently'])

    _, r = self.anagrams2.get_anagrams("gentry")
    self.assertEqual(r, ['gentry'])

    _, r = self.anagrams2.get_anagrams("genuine")
    self.assertEqual(r, ['genuine'])

    _, r = self.anagrams2.get_anagrams("genuinely")
    self.assertEqual(r, ['genuinely'])

    _, r = self.anagrams2.get_anagrams("genuineness")
    self.assertEqual(r, ['genuineness'])

    _, r = self.anagrams2.get_anagrams("genus")
    self.assertEqual(r, ['genus'])

    _, r = self.anagrams2.get_anagrams("geocentric")
    self.assertEqual(r, ['egocentric', 'geocentric'])

    _, r = self.anagrams2.get_anagrams("geodesic")
    self.assertEqual(r, ['geodesic'])

    _, r = self.anagrams2.get_anagrams("geodesy")
    self.assertEqual(r, ['geodesy'])

    _, r = self.anagrams2.get_anagrams("geodetic")
    self.assertEqual(r, ['geodetic'])

    _, r = self.anagrams2.get_anagrams("geoff")
    self.assertEqual(r, ['geoff'])

    _, r = self.anagrams2.get_anagrams("geoffrey")
    self.assertEqual(r, ['geoffrey'])

    _, r = self.anagrams2.get_anagrams("geographer")
    self.assertEqual(r, ['geographer'])

    _, r = self.anagrams2.get_anagrams("geographic")
    self.assertEqual(r, ['geographic'])

    _, r = self.anagrams2.get_anagrams("geographical")
    self.assertEqual(r, ['geographical'])

    _, r = self.anagrams2.get_anagrams("geographically")
    self.assertEqual(r, ['geographically'])

    _, r = self.anagrams2.get_anagrams("geography")
    self.assertEqual(r, ['geography'])

    _, r = self.anagrams2.get_anagrams("geological")
    self.assertEqual(r, ['geological'])

    _, r = self.anagrams2.get_anagrams("geologist")
    self.assertEqual(r, ['geologist'])

    _, r = self.anagrams2.get_anagrams("geologists")
    self.assertEqual(r, ['geologists'])

    _, r = self.anagrams2.get_anagrams("geology")
    self.assertEqual(r, ['geology'])

    _, r = self.anagrams2.get_anagrams("geometric")
    self.assertEqual(r, ['geometric'])

    _, r = self.anagrams2.get_anagrams("geometrical")
    self.assertEqual(r, ['geometrical'])

    _, r = self.anagrams2.get_anagrams("geometrically")
    self.assertEqual(r, ['geometrically'])

    _, r = self.anagrams2.get_anagrams("geometrician")
    self.assertEqual(r, ['geometrician'])

    _, r = self.anagrams2.get_anagrams("geometries")
    self.assertEqual(r, ['geometries'])

    _, r = self.anagrams2.get_anagrams("geometry")
    self.assertEqual(r, ['geometry'])

    _, r = self.anagrams2.get_anagrams("geophysical")
    self.assertEqual(r, ['geophysical'])

    _, r = self.anagrams2.get_anagrams("geophysics")
    self.assertEqual(r, ['geophysics'])

    _, r = self.anagrams2.get_anagrams("george")
    self.assertEqual(r, ['george'])

    _, r = self.anagrams2.get_anagrams("georges")
    self.assertEqual(r, ['georges'])

    _, r = self.anagrams2.get_anagrams("georgetown")
    self.assertEqual(r, ['georgetown'])

    _, r = self.anagrams2.get_anagrams("georgia")
    self.assertEqual(r, ['georgia'])

    _, r = self.anagrams2.get_anagrams("georgian")
    self.assertEqual(r, ['georgian'])

    _, r = self.anagrams2.get_anagrams("georgians")
    self.assertEqual(r, ['georgians'])

    _, r = self.anagrams2.get_anagrams("geosynchronous")
    self.assertEqual(r, ['geosynchronous'])

    _, r = self.anagrams2.get_anagrams("gerald")
    self.assertEqual(r, ['gerald', 'glared'])

    _, r = self.anagrams2.get_anagrams("geraldine")
    self.assertEqual(r, ['geraldine', 'realigned'])

    _, r = self.anagrams2.get_anagrams("geranium")
    self.assertEqual(r, ['geranium'])

    _, r = self.anagrams2.get_anagrams("gerard")
    self.assertEqual(r, ['gerard', 'grader', 'regard'])

    _, r = self.anagrams2.get_anagrams("gerber")
    self.assertEqual(r, ['gerber'])

    _, r = self.anagrams2.get_anagrams("gerbil")
    self.assertEqual(r, ['gerbil'])

    _, r = self.anagrams2.get_anagrams("gerhard")
    self.assertEqual(r, ['gerhard'])

    _, r = self.anagrams2.get_anagrams("gerhardt")
    self.assertEqual(r, ['gerhardt'])

    _, r = self.anagrams2.get_anagrams("geriatric")
    self.assertEqual(r, ['geriatric'])

    _, r = self.anagrams2.get_anagrams("germ")
    self.assertEqual(r, ['germ'])

    _, r = self.anagrams2.get_anagrams("german")
    self.assertEqual(r, ['german', 'manger'])

    _, r = self.anagrams2.get_anagrams("germane")
    self.assertEqual(r, ['germane'])

    _, r = self.anagrams2.get_anagrams("germania")
    self.assertEqual(r, ['germania'])

    _, r = self.anagrams2.get_anagrams("germanic")
    self.assertEqual(r, ['creaming', 'germanic'])

    _, r = self.anagrams2.get_anagrams("germans")
    self.assertEqual(r, ['germans', 'mangers'])

    _, r = self.anagrams2.get_anagrams("germantown")
    self.assertEqual(r, ['germantown'])

    _, r = self.anagrams2.get_anagrams("germany")
    self.assertEqual(r, ['germany'])

    _, r = self.anagrams2.get_anagrams("germicide")
    self.assertEqual(r, ['germicide'])

    _, r = self.anagrams2.get_anagrams("germinal")
    self.assertEqual(r, ['germinal'])

    _, r = self.anagrams2.get_anagrams("germinate")
    self.assertEqual(r, ['germinate'])

    _, r = self.anagrams2.get_anagrams("germinated")
    self.assertEqual(r, ['germinated'])

    _, r = self.anagrams2.get_anagrams("germinates")
    self.assertEqual(r, ['germinates'])

    _, r = self.anagrams2.get_anagrams("germinating")
    self.assertEqual(r, ['germinating'])

    _, r = self.anagrams2.get_anagrams("germination")
    self.assertEqual(r, ['germination'])

    _, r = self.anagrams2.get_anagrams("germs")
    self.assertEqual(r, ['germs'])

    _, r = self.anagrams2.get_anagrams("gerome")
    self.assertEqual(r, ['gerome'])

    _, r = self.anagrams2.get_anagrams("gerry")
    self.assertEqual(r, ['gerry'])

    _, r = self.anagrams2.get_anagrams("gershwin")
    self.assertEqual(r, ['gershwin'])

    _, r = self.anagrams2.get_anagrams("gershwins")
    self.assertEqual(r, ['gershwins'])

    _, r = self.anagrams2.get_anagrams("gertrude")
    self.assertEqual(r, ['gertrude'])

    _, r = self.anagrams2.get_anagrams("gerund")
    self.assertEqual(r, ['gerund'])

    _, r = self.anagrams2.get_anagrams("gestapo")
    self.assertEqual(r, ['gestapo', 'postage'])

    _, r = self.anagrams2.get_anagrams("gesture")
    self.assertEqual(r, ['gesture'])

    _, r = self.anagrams2.get_anagrams("gestured")
    self.assertEqual(r, ['gestured'])

    _, r = self.anagrams2.get_anagrams("gestures")
    self.assertEqual(r, ['gestures'])

    _, r = self.anagrams2.get_anagrams("gesturing")
    self.assertEqual(r, ['gesturing'])

    _, r = self.anagrams2.get_anagrams("get")
    self.assertEqual(r, ['get'])

    _, r = self.anagrams2.get_anagrams("getaway")
    self.assertEqual(r, ['gateway', 'getaway'])

    _, r = self.anagrams2.get_anagrams("gets")
    self.assertEqual(r, ['gets'])

    _, r = self.anagrams2.get_anagrams("getter")
    self.assertEqual(r, ['getter'])

    _, r = self.anagrams2.get_anagrams("getters")
    self.assertEqual(r, ['getters'])

    _, r = self.anagrams2.get_anagrams("getting")
    self.assertEqual(r, ['getting'])

    _, r = self.anagrams2.get_anagrams("getty")
    self.assertEqual(r, ['getty'])

    _, r = self.anagrams2.get_anagrams("gettysburg")
    self.assertEqual(r, ['gettysburg'])

    _, r = self.anagrams2.get_anagrams("geyser")
    self.assertEqual(r, ['geyser'])

    _, r = self.anagrams2.get_anagrams("ghana")
    self.assertEqual(r, ['ghana'])

    _, r = self.anagrams2.get_anagrams("ghanian")
    self.assertEqual(r, ['ghanian'])

    _, r = self.anagrams2.get_anagrams("ghastly")
    self.assertEqual(r, ['ghastly'])

    _, r = self.anagrams2.get_anagrams("ghent")
    self.assertEqual(r, ['ghent'])

    _, r = self.anagrams2.get_anagrams("ghetto")
    self.assertEqual(r, ['ghetto'])

    _, r = self.anagrams2.get_anagrams("ghost")
    self.assertEqual(r, ['ghost'])

    _, r = self.anagrams2.get_anagrams("ghosted")
    self.assertEqual(r, ['ghosted'])

    _, r = self.anagrams2.get_anagrams("ghostly")
    self.assertEqual(r, ['ghostly'])

    _, r = self.anagrams2.get_anagrams("ghosts")
    self.assertEqual(r, ['ghosts'])

    _, r = self.anagrams2.get_anagrams("giacomo")
    self.assertEqual(r, ['giacomo'])

    _, r = self.anagrams2.get_anagrams("giant")
    self.assertEqual(r, ['giant'])

    _, r = self.anagrams2.get_anagrams("giants")
    self.assertEqual(r, ['giants', 'sating'])

    _, r = self.anagrams2.get_anagrams("gibberish")
    self.assertEqual(r, ['gibberish'])

    _, r = self.anagrams2.get_anagrams("gibbons")
    self.assertEqual(r, ['gibbons', 'sobbing'])

    _, r = self.anagrams2.get_anagrams("gibbs")
    self.assertEqual(r, ['gibbs'])

    _, r = self.anagrams2.get_anagrams("gibby")
    self.assertEqual(r, ['gibby'])

    _, r = self.anagrams2.get_anagrams("gibraltar")
    self.assertEqual(r, ['gibraltar'])

    _, r = self.anagrams2.get_anagrams("gibson")
    self.assertEqual(r, ['gibson'])

    _, r = self.anagrams2.get_anagrams("giddiness")
    self.assertEqual(r, ['giddiness'])

    _, r = self.anagrams2.get_anagrams("giddings")
    self.assertEqual(r, ['giddings'])

    _, r = self.anagrams2.get_anagrams("giddy")
    self.assertEqual(r, ['giddy'])

    _, r = self.anagrams2.get_anagrams("gideon")
    self.assertEqual(r, ['gideon'])

    _, r = self.anagrams2.get_anagrams("gifford")
    self.assertEqual(r, ['gifford'])

    _, r = self.anagrams2.get_anagrams("gift")
    self.assertEqual(r, ['gift'])

    _, r = self.anagrams2.get_anagrams("gifted")
    self.assertEqual(r, ['fidget', 'gifted'])

    _, r = self.anagrams2.get_anagrams("gifts")
    self.assertEqual(r, ['gifts'])

    _, r = self.anagrams2.get_anagrams("gig")
    self.assertEqual(r, ['gig'])

    _, r = self.anagrams2.get_anagrams("gigabit")
    self.assertEqual(r, ['gigabit'])

    _, r = self.anagrams2.get_anagrams("gigabits")
    self.assertEqual(r, ['gigabits'])

    _, r = self.anagrams2.get_anagrams("gigabyte")
    self.assertEqual(r, ['gigabyte'])

    _, r = self.anagrams2.get_anagrams("gigabytes")
    self.assertEqual(r, ['gigabytes'])

    _, r = self.anagrams2.get_anagrams("gigacycle")
    self.assertEqual(r, ['gigacycle'])

    _, r = self.anagrams2.get_anagrams("gigahertz")
    self.assertEqual(r, ['gigahertz'])

    _, r = self.anagrams2.get_anagrams("gigantic")
    self.assertEqual(r, ['gigantic'])

    _, r = self.anagrams2.get_anagrams("gigavolt")
    self.assertEqual(r, ['gigavolt'])

    _, r = self.anagrams2.get_anagrams("gigawatt")
    self.assertEqual(r, ['gigawatt'])

    _, r = self.anagrams2.get_anagrams("giggle")
    self.assertEqual(r, ['giggle'])

    _, r = self.anagrams2.get_anagrams("giggled")
    self.assertEqual(r, ['giggled'])

    _, r = self.anagrams2.get_anagrams("giggles")
    self.assertEqual(r, ['giggles'])

    _, r = self.anagrams2.get_anagrams("giggling")
    self.assertEqual(r, ['giggling'])

    _, r = self.anagrams2.get_anagrams("gil")
    self.assertEqual(r, ['gil'])

    _, r = self.anagrams2.get_anagrams("gilbertson")
    self.assertEqual(r, ['bolstering', 'gilbertson'])

    _, r = self.anagrams2.get_anagrams("gilchrist")
    self.assertEqual(r, ['gilchrist'])

    _, r = self.anagrams2.get_anagrams("gild")
    self.assertEqual(r, ['gild'])

    _, r = self.anagrams2.get_anagrams("gilded")
    self.assertEqual(r, ['gilded', 'glided'])

    _, r = self.anagrams2.get_anagrams("gilding")
    self.assertEqual(r, ['gilding'])

    _, r = self.anagrams2.get_anagrams("gilds")
    self.assertEqual(r, ['gilds'])

    _, r = self.anagrams2.get_anagrams("gilead")
    self.assertEqual(r, ['gilead'])

    _, r = self.anagrams2.get_anagrams("giles")
    self.assertEqual(r, ['giles'])

    _, r = self.anagrams2.get_anagrams("gilkson")
    self.assertEqual(r, ['gilkson'])

    _, r = self.anagrams2.get_anagrams("gill")
    self.assertEqual(r, ['gill'])

    _, r = self.anagrams2.get_anagrams("gillespie")
    self.assertEqual(r, ['gillespie'])

    _, r = self.anagrams2.get_anagrams("gillette")
    self.assertEqual(r, ['gillette'])

    _, r = self.anagrams2.get_anagrams("gilligan")
    self.assertEqual(r, ['gilligan'])

    _, r = self.anagrams2.get_anagrams("gills")
    self.assertEqual(r, ['gills'])

    _, r = self.anagrams2.get_anagrams("gilmore")
    self.assertEqual(r, ['gilmore'])

    _, r = self.anagrams2.get_anagrams("gilt")
    self.assertEqual(r, ['gilt'])

    _, r = self.anagrams2.get_anagrams("gimbel")
    self.assertEqual(r, ['gimbel'])

    _, r = self.anagrams2.get_anagrams("gimmick")
    self.assertEqual(r, ['gimmick'])

    _, r = self.anagrams2.get_anagrams("gimmicks")
    self.assertEqual(r, ['gimmicks'])

    _, r = self.anagrams2.get_anagrams("gin")
    self.assertEqual(r, ['gin'])

    _, r = self.anagrams2.get_anagrams("gina")
    self.assertEqual(r, ['gain', 'gina'])

    _, r = self.anagrams2.get_anagrams("ginger")
    self.assertEqual(r, ['ginger'])

    _, r = self.anagrams2.get_anagrams("gingerbread")
    self.assertEqual(r, ['gingerbread'])

    _, r = self.anagrams2.get_anagrams("gingerly")
    self.assertEqual(r, ['gingerly'])

    _, r = self.anagrams2.get_anagrams("gingham")
    self.assertEqual(r, ['gingham'])

    _, r = self.anagrams2.get_anagrams("ginghams")
    self.assertEqual(r, ['ginghams'])

    _, r = self.anagrams2.get_anagrams("ginn")
    self.assertEqual(r, ['ginn'])

    _, r = self.anagrams2.get_anagrams("gino")
    self.assertEqual(r, ['gino'])

    _, r = self.anagrams2.get_anagrams("gins")
    self.assertEqual(r, ['gins', 'sign', 'sing'])

    _, r = self.anagrams2.get_anagrams("ginsberg")
    self.assertEqual(r, ['ginsberg'])

    _, r = self.anagrams2.get_anagrams("ginsburg")
    self.assertEqual(r, ['ginsburg'])

    _, r = self.anagrams2.get_anagrams("gioconda")
    self.assertEqual(r, ['gioconda'])

    _, r = self.anagrams2.get_anagrams("giorgio")
    self.assertEqual(r, ['giorgio'])

    _, r = self.anagrams2.get_anagrams("giovanni")
    self.assertEqual(r, ['giovanni'])

    _, r = self.anagrams2.get_anagrams("gipsies")
    self.assertEqual(r, ['gipsies'])

    _, r = self.anagrams2.get_anagrams("gipsy")
    self.assertEqual(r, ['gipsy'])

    _, r = self.anagrams2.get_anagrams("giraffe")
    self.assertEqual(r, ['giraffe'])

    _, r = self.anagrams2.get_anagrams("giraffes")
    self.assertEqual(r, ['giraffes'])

    _, r = self.anagrams2.get_anagrams("gird")
    self.assertEqual(r, ['gird', 'grid'])

    _, r = self.anagrams2.get_anagrams("girder")
    self.assertEqual(r, ['girder'])

    _, r = self.anagrams2.get_anagrams("girders")
    self.assertEqual(r, ['girders'])

    _, r = self.anagrams2.get_anagrams("girdle")
    self.assertEqual(r, ['girdle', 'glider'])

    _, r = self.anagrams2.get_anagrams("girl")
    self.assertEqual(r, ['girl'])

    _, r = self.anagrams2.get_anagrams("girlfriend")
    self.assertEqual(r, ['girlfriend'])

    _, r = self.anagrams2.get_anagrams("girlie")
    self.assertEqual(r, ['girlie'])

    _, r = self.anagrams2.get_anagrams("girlish")
    self.assertEqual(r, ['girlish'])

    _, r = self.anagrams2.get_anagrams("girls")
    self.assertEqual(r, ['girls'])

    _, r = self.anagrams2.get_anagrams("girt")
    self.assertEqual(r, ['girt', 'grit'])

    _, r = self.anagrams2.get_anagrams("girth")
    self.assertEqual(r, ['girth', 'right'])

    _, r = self.anagrams2.get_anagrams("gist")
    self.assertEqual(r, ['gist'])

    _, r = self.anagrams2.get_anagrams("giuliano")
    self.assertEqual(r, ['giuliano'])

    _, r = self.anagrams2.get_anagrams("giuseppe")
    self.assertEqual(r, ['giuseppe'])

    _, r = self.anagrams2.get_anagrams("give")
    self.assertEqual(r, ['give'])

    _, r = self.anagrams2.get_anagrams("giveaway")
    self.assertEqual(r, ['giveaway'])

    _, r = self.anagrams2.get_anagrams("given")
    self.assertEqual(r, ['given'])

    _, r = self.anagrams2.get_anagrams("giver")
    self.assertEqual(r, ['giver'])

    _, r = self.anagrams2.get_anagrams("givers")
    self.assertEqual(r, ['givers'])

    _, r = self.anagrams2.get_anagrams("gives")
    self.assertEqual(r, ['gives'])

    _, r = self.anagrams2.get_anagrams("giving")
    self.assertEqual(r, ['giving'])

    _, r = self.anagrams2.get_anagrams("glacial")
    self.assertEqual(r, ['glacial'])

    _, r = self.anagrams2.get_anagrams("glacier")
    self.assertEqual(r, ['glacier'])

    _, r = self.anagrams2.get_anagrams("glaciers")
    self.assertEqual(r, ['glaciers'])

    _, r = self.anagrams2.get_anagrams("glad")
    self.assertEqual(r, ['glad'])

    _, r = self.anagrams2.get_anagrams("gladden")
    self.assertEqual(r, ['dangled', 'gladden'])

    _, r = self.anagrams2.get_anagrams("gladder")
    self.assertEqual(r, ['gladder'])

    _, r = self.anagrams2.get_anagrams("gladdest")
    self.assertEqual(r, ['gladdest'])

    _, r = self.anagrams2.get_anagrams("glade")
    self.assertEqual(r, ['glade'])

    _, r = self.anagrams2.get_anagrams("gladiator")
    self.assertEqual(r, ['gladiator'])

    _, r = self.anagrams2.get_anagrams("gladly")
    self.assertEqual(r, ['gladly'])

    _, r = self.anagrams2.get_anagrams("gladness")
    self.assertEqual(r, ['gladness'])

    _, r = self.anagrams2.get_anagrams("gladstone")
    self.assertEqual(r, ['gladstone'])

    _, r = self.anagrams2.get_anagrams("gladys")
    self.assertEqual(r, ['gladys'])

    _, r = self.anagrams2.get_anagrams("glamor")
    self.assertEqual(r, ['glamor'])

    _, r = self.anagrams2.get_anagrams("glamorous")
    self.assertEqual(r, ['glamorous'])

    _, r = self.anagrams2.get_anagrams("glamour")
    self.assertEqual(r, ['glamour'])

    _, r = self.anagrams2.get_anagrams("glance")
    self.assertEqual(r, ['glance'])

    _, r = self.anagrams2.get_anagrams("glanced")
    self.assertEqual(r, ['clanged', 'glanced'])

    _, r = self.anagrams2.get_anagrams("glances")
    self.assertEqual(r, ['glances'])

    _, r = self.anagrams2.get_anagrams("glancing")
    self.assertEqual(r, ['clanging', 'glancing'])

    _, r = self.anagrams2.get_anagrams("gland")
    self.assertEqual(r, ['gland'])

    _, r = self.anagrams2.get_anagrams("glands")
    self.assertEqual(r, ['glands'])

    _, r = self.anagrams2.get_anagrams("glandular")
    self.assertEqual(r, ['glandular'])

    _, r = self.anagrams2.get_anagrams("glare")
    self.assertEqual(r, ['alger', 'glare', 'lager', 'large', 'regal'])

    _, r = self.anagrams2.get_anagrams("glared")
    self.assertEqual(r, ['gerald', 'glared'])

    _, r = self.anagrams2.get_anagrams("glares")
    self.assertEqual(r, ['glares', 'lagers'])

    _, r = self.anagrams2.get_anagrams("glaring")
    self.assertEqual(r, ['glaring'])

    _, r = self.anagrams2.get_anagrams("glaringly")
    self.assertEqual(r, ['glaringly'])

    _, r = self.anagrams2.get_anagrams("glasgow")
    self.assertEqual(r, ['glasgow'])

    _, r = self.anagrams2.get_anagrams("glass")
    self.assertEqual(r, ['glass'])

    _, r = self.anagrams2.get_anagrams("glassed")
    self.assertEqual(r, ['glassed'])

    _, r = self.anagrams2.get_anagrams("glasses")
    self.assertEqual(r, ['glasses'])

    _, r = self.anagrams2.get_anagrams("glassy")
    self.assertEqual(r, ['glassy'])

    _, r = self.anagrams2.get_anagrams("glaswegian")
    self.assertEqual(r, ['glaswegian'])

    _, r = self.anagrams2.get_anagrams("glaucoma")
    self.assertEqual(r, ['glaucoma'])

    _, r = self.anagrams2.get_anagrams("glaze")
    self.assertEqual(r, ['glaze'])

    _, r = self.anagrams2.get_anagrams("glazed")
    self.assertEqual(r, ['glazed'])

    _, r = self.anagrams2.get_anagrams("glazer")
    self.assertEqual(r, ['glazer'])

    _, r = self.anagrams2.get_anagrams("glazes")
    self.assertEqual(r, ['glazes'])

    _, r = self.anagrams2.get_anagrams("glazing")
    self.assertEqual(r, ['glazing'])

    _, r = self.anagrams2.get_anagrams("gleam")
    self.assertEqual(r, ['gleam'])

    _, r = self.anagrams2.get_anagrams("gleamed")
    self.assertEqual(r, ['gleamed'])

    _, r = self.anagrams2.get_anagrams("gleaming")
    self.assertEqual(r, ['gleaming'])

    _, r = self.anagrams2.get_anagrams("gleams")
    self.assertEqual(r, ['gleams'])

    _, r = self.anagrams2.get_anagrams("glean")
    self.assertEqual(r, ['angel', 'angle', 'galen', 'glean', 'lange'])

    _, r = self.anagrams2.get_anagrams("gleaned")
    self.assertEqual(r, ['gleaned'])

    _, r = self.anagrams2.get_anagrams("gleaner")
    self.assertEqual(r, ['enlarge', 'general', 'gleaner'])

    _, r = self.anagrams2.get_anagrams("gleaning")
    self.assertEqual(r, ['gleaning'])

    _, r = self.anagrams2.get_anagrams("gleanings")
    self.assertEqual(r, ['gleanings'])

    _, r = self.anagrams2.get_anagrams("gleans")
    self.assertEqual(r, ['angels', 'angles', 'gleans'])

    _, r = self.anagrams2.get_anagrams("gleason")
    self.assertEqual(r, ['gleason'])

    _, r = self.anagrams2.get_anagrams("glee")
    self.assertEqual(r, ['glee'])

    _, r = self.anagrams2.get_anagrams("gleeful")
    self.assertEqual(r, ['gleeful'])

    _, r = self.anagrams2.get_anagrams("gleefully")
    self.assertEqual(r, ['gleefully'])

    _, r = self.anagrams2.get_anagrams("glees")
    self.assertEqual(r, ['glees'])

    _, r = self.anagrams2.get_anagrams("glen")
    self.assertEqual(r, ['glen'])

    _, r = self.anagrams2.get_anagrams("glenda")
    self.assertEqual(r, ['angled', 'dangle', 'glenda'])

    _, r = self.anagrams2.get_anagrams("glendale")
    self.assertEqual(r, ['glendale'])

    _, r = self.anagrams2.get_anagrams("glenn")
    self.assertEqual(r, ['glenn'])

    _, r = self.anagrams2.get_anagrams("glens")
    self.assertEqual(r, ['glens'])

    _, r = self.anagrams2.get_anagrams("glidden")
    self.assertEqual(r, ['glidden'])

    _, r = self.anagrams2.get_anagrams("glide")
    self.assertEqual(r, ['glide'])

    _, r = self.anagrams2.get_anagrams("glided")
    self.assertEqual(r, ['gilded', 'glided'])

    _, r = self.anagrams2.get_anagrams("glider")
    self.assertEqual(r, ['girdle', 'glider'])

    _, r = self.anagrams2.get_anagrams("gliders")
    self.assertEqual(r, ['gliders'])

    _, r = self.anagrams2.get_anagrams("glides")
    self.assertEqual(r, ['glides'])

    _, r = self.anagrams2.get_anagrams("glimmer")
    self.assertEqual(r, ['glimmer'])

    _, r = self.anagrams2.get_anagrams("glimmered")
    self.assertEqual(r, ['glimmered'])

    _, r = self.anagrams2.get_anagrams("glimmering")
    self.assertEqual(r, ['glimmering'])

    _, r = self.anagrams2.get_anagrams("glimmers")
    self.assertEqual(r, ['glimmers'])

    _, r = self.anagrams2.get_anagrams("glimpse")
    self.assertEqual(r, ['glimpse'])

    _, r = self.anagrams2.get_anagrams("glimpsed")
    self.assertEqual(r, ['glimpsed'])

    _, r = self.anagrams2.get_anagrams("glimpses")
    self.assertEqual(r, ['glimpses'])

    _, r = self.anagrams2.get_anagrams("glint")
    self.assertEqual(r, ['glint'])

    _, r = self.anagrams2.get_anagrams("glinted")
    self.assertEqual(r, ['glinted', 'tingled'])

    _, r = self.anagrams2.get_anagrams("glinting")
    self.assertEqual(r, ['glinting', 'tingling'])

    _, r = self.anagrams2.get_anagrams("glints")
    self.assertEqual(r, ['glints'])

    _, r = self.anagrams2.get_anagrams("glisten")
    self.assertEqual(r, ['glisten', 'singlet', 'tingles'])

    _, r = self.anagrams2.get_anagrams("glistened")
    self.assertEqual(r, ['glistened'])

    _, r = self.anagrams2.get_anagrams("glistening")
    self.assertEqual(r, ['glistening'])

    _, r = self.anagrams2.get_anagrams("glistens")
    self.assertEqual(r, ['glistens'])

    _, r = self.anagrams2.get_anagrams("glitch")
    self.assertEqual(r, ['glitch'])

    _, r = self.anagrams2.get_anagrams("glitter")
    self.assertEqual(r, ['glitter'])

    _, r = self.anagrams2.get_anagrams("glittered")
    self.assertEqual(r, ['glittered'])

    _, r = self.anagrams2.get_anagrams("glittering")
    self.assertEqual(r, ['glittering'])

    _, r = self.anagrams2.get_anagrams("glitters")
    self.assertEqual(r, ['glitters'])

    _, r = self.anagrams2.get_anagrams("gloat")
    self.assertEqual(r, ['gloat'])

    _, r = self.anagrams2.get_anagrams("global")
    self.assertEqual(r, ['global'])

    _, r = self.anagrams2.get_anagrams("globally")
    self.assertEqual(r, ['globally'])

    _, r = self.anagrams2.get_anagrams("globe")
    self.assertEqual(r, ['globe'])

    _, r = self.anagrams2.get_anagrams("globes")
    self.assertEqual(r, ['globes'])

    _, r = self.anagrams2.get_anagrams("globular")
    self.assertEqual(r, ['globular'])

    _, r = self.anagrams2.get_anagrams("globularity")
    self.assertEqual(r, ['globularity'])

    _, r = self.anagrams2.get_anagrams("gloom")
    self.assertEqual(r, ['gloom'])

    _, r = self.anagrams2.get_anagrams("gloomily")
    self.assertEqual(r, ['gloomily'])

    _, r = self.anagrams2.get_anagrams("gloomy")
    self.assertEqual(r, ['gloomy'])

    _, r = self.anagrams2.get_anagrams("gloria")
    self.assertEqual(r, ['gloria'])

    _, r = self.anagrams2.get_anagrams("gloriana")
    self.assertEqual(r, ['gloriana'])

    _, r = self.anagrams2.get_anagrams("glories")
    self.assertEqual(r, ['glories'])

    _, r = self.anagrams2.get_anagrams("glorification")
    self.assertEqual(r, ['glorification'])

    _, r = self.anagrams2.get_anagrams("glorified")
    self.assertEqual(r, ['glorified'])

    _, r = self.anagrams2.get_anagrams("glorifies")
    self.assertEqual(r, ['glorifies'])

    _, r = self.anagrams2.get_anagrams("glorify")
    self.assertEqual(r, ['glorify'])

    _, r = self.anagrams2.get_anagrams("glorious")
    self.assertEqual(r, ['glorious'])

    _, r = self.anagrams2.get_anagrams("gloriously")
    self.assertEqual(r, ['gloriously'])

    _, r = self.anagrams2.get_anagrams("glory")
    self.assertEqual(r, ['glory'])

    _, r = self.anagrams2.get_anagrams("glorying")
    self.assertEqual(r, ['glorying'])

    _, r = self.anagrams2.get_anagrams("gloss")
    self.assertEqual(r, ['gloss'])

    _, r = self.anagrams2.get_anagrams("glossaries")
    self.assertEqual(r, ['glossaries'])

    _, r = self.anagrams2.get_anagrams("glossary")
    self.assertEqual(r, ['glossary'])

    _, r = self.anagrams2.get_anagrams("glossed")
    self.assertEqual(r, ['glossed'])

    _, r = self.anagrams2.get_anagrams("glosses")
    self.assertEqual(r, ['glosses'])

    _, r = self.anagrams2.get_anagrams("glossing")
    self.assertEqual(r, ['glossing'])

    _, r = self.anagrams2.get_anagrams("glossy")
    self.assertEqual(r, ['glossy'])

    _, r = self.anagrams2.get_anagrams("glottal")
    self.assertEqual(r, ['glottal'])

    _, r = self.anagrams2.get_anagrams("gloucester")
    self.assertEqual(r, ['gloucester'])

    _, r = self.anagrams2.get_anagrams("glove")
    self.assertEqual(r, ['glove', 'vogel'])

    _, r = self.anagrams2.get_anagrams("gloved")
    self.assertEqual(r, ['gloved'])

    _, r = self.anagrams2.get_anagrams("glover")
    self.assertEqual(r, ['glover', 'grovel'])

    _, r = self.anagrams2.get_anagrams("glovers")
    self.assertEqual(r, ['glovers', 'grovels'])

    _, r = self.anagrams2.get_anagrams("gloves")
    self.assertEqual(r, ['gloves'])

    _, r = self.anagrams2.get_anagrams("gloving")
    self.assertEqual(r, ['gloving'])

    _, r = self.anagrams2.get_anagrams("glow")
    self.assertEqual(r, ['glow'])

    _, r = self.anagrams2.get_anagrams("glowed")
    self.assertEqual(r, ['glowed'])

    _, r = self.anagrams2.get_anagrams("glower")
    self.assertEqual(r, ['glower'])

    _, r = self.anagrams2.get_anagrams("glowers")
    self.assertEqual(r, ['glowers'])

    _, r = self.anagrams2.get_anagrams("glowing")
    self.assertEqual(r, ['glowing'])

    _, r = self.anagrams2.get_anagrams("glowingly")
    self.assertEqual(r, ['glowingly'])

    _, r = self.anagrams2.get_anagrams("glows")
    self.assertEqual(r, ['glows'])

    _, r = self.anagrams2.get_anagrams("glue")
    self.assertEqual(r, ['glue'])

    _, r = self.anagrams2.get_anagrams("glued")
    self.assertEqual(r, ['glued'])

    _, r = self.anagrams2.get_anagrams("glues")
    self.assertEqual(r, ['glues'])

    _, r = self.anagrams2.get_anagrams("gluing")
    self.assertEqual(r, ['gluing'])

    _, r = self.anagrams2.get_anagrams("glut")
    self.assertEqual(r, ['glut'])

    _, r = self.anagrams2.get_anagrams("glutton")
    self.assertEqual(r, ['glutton'])

    _, r = self.anagrams2.get_anagrams("glynn")
    self.assertEqual(r, ['glynn'])

    _, r = self.anagrams2.get_anagrams("gnash")
    self.assertEqual(r, ['gnash', 'hangs'])

    _, r = self.anagrams2.get_anagrams("gnat")
    self.assertEqual(r, ['gnat', 'tang'])

    _, r = self.anagrams2.get_anagrams("gnats")
    self.assertEqual(r, ['angst', 'gnats'])

    _, r = self.anagrams2.get_anagrams("gnaw")
    self.assertEqual(r, ['gnaw', 'wang'])

    _, r = self.anagrams2.get_anagrams("gnawed")
    self.assertEqual(r, ['gnawed'])

    _, r = self.anagrams2.get_anagrams("gnawing")
    self.assertEqual(r, ['gnawing'])

    _, r = self.anagrams2.get_anagrams("gnaws")
    self.assertEqual(r, ['gnaws'])

    _, r = self.anagrams2.get_anagrams("gnome")
    self.assertEqual(r, ['gnome'])

    _, r = self.anagrams2.get_anagrams("gnomon")
    self.assertEqual(r, ['gnomon'])

    _, r = self.anagrams2.get_anagrams("gnu")
    self.assertEqual(r, ['gnu', 'gun'])

    _, r = self.anagrams2.get_anagrams("go")
    self.assertEqual(r, ['go'])

    _, r = self.anagrams2.get_anagrams("goa")
    self.assertEqual(r, ['ago', 'goa'])

    _, r = self.anagrams2.get_anagrams("goad")
    self.assertEqual(r, ['goad'])

    _, r = self.anagrams2.get_anagrams("goaded")
    self.assertEqual(r, ['goaded'])

    _, r = self.anagrams2.get_anagrams("goal")
    self.assertEqual(r, ['goal', 'olga'])

    _, r = self.anagrams2.get_anagrams("goals")
    self.assertEqual(r, ['goals', 'lagos'])

    _, r = self.anagrams2.get_anagrams("goat")
    self.assertEqual(r, ['goat'])

    _, r = self.anagrams2.get_anagrams("goatee")
    self.assertEqual(r, ['goatee'])

    _, r = self.anagrams2.get_anagrams("goatees")
    self.assertEqual(r, ['goatees'])

    _, r = self.anagrams2.get_anagrams("goats")
    self.assertEqual(r, ['goats'])

    _, r = self.anagrams2.get_anagrams("gobble")
    self.assertEqual(r, ['gobble'])

    _, r = self.anagrams2.get_anagrams("gobbled")
    self.assertEqual(r, ['gobbled'])

    _, r = self.anagrams2.get_anagrams("gobbler")
    self.assertEqual(r, ['gobbler'])

    _, r = self.anagrams2.get_anagrams("gobblers")
    self.assertEqual(r, ['gobblers'])

    _, r = self.anagrams2.get_anagrams("gobbles")
    self.assertEqual(r, ['gobbles'])

    _, r = self.anagrams2.get_anagrams("gobi")
    self.assertEqual(r, ['gobi'])

    _, r = self.anagrams2.get_anagrams("goblet")
    self.assertEqual(r, ['goblet'])

    _, r = self.anagrams2.get_anagrams("goblets")
    self.assertEqual(r, ['goblets'])

    _, r = self.anagrams2.get_anagrams("goblin")
    self.assertEqual(r, ['goblin'])

    _, r = self.anagrams2.get_anagrams("goblins")
    self.assertEqual(r, ['goblins'])

    _, r = self.anagrams2.get_anagrams("god")
    self.assertEqual(r, ['dog', 'god'])

    _, r = self.anagrams2.get_anagrams("goddard")
    self.assertEqual(r, ['goddard'])

    _, r = self.anagrams2.get_anagrams("goddess")
    self.assertEqual(r, ['goddess'])

    _, r = self.anagrams2.get_anagrams("goddesses")
    self.assertEqual(r, ['goddesses'])

    _, r = self.anagrams2.get_anagrams("godfather")
    self.assertEqual(r, ['godfather'])

    _, r = self.anagrams2.get_anagrams("godfrey")
    self.assertEqual(r, ['godfrey'])

    _, r = self.anagrams2.get_anagrams("godhead")
    self.assertEqual(r, ['godhead'])

    _, r = self.anagrams2.get_anagrams("godlike")
    self.assertEqual(r, ['godlike'])

    _, r = self.anagrams2.get_anagrams("godly")
    self.assertEqual(r, ['godly'])

    _, r = self.anagrams2.get_anagrams("godmother")
    self.assertEqual(r, ['godmother'])

    _, r = self.anagrams2.get_anagrams("godmothers")
    self.assertEqual(r, ['godmothers'])

    _, r = self.anagrams2.get_anagrams("godot")
    self.assertEqual(r, ['godot'])

    _, r = self.anagrams2.get_anagrams("godparent")
    self.assertEqual(r, ['godparent'])

    _, r = self.anagrams2.get_anagrams("gods")
    self.assertEqual(r, ['dogs', 'gods'])

    _, r = self.anagrams2.get_anagrams("godsend")
    self.assertEqual(r, ['godsend'])

    _, r = self.anagrams2.get_anagrams("godson")
    self.assertEqual(r, ['godson'])

    _, r = self.anagrams2.get_anagrams("godwin")
    self.assertEqual(r, ['godwin'])

    _, r = self.anagrams2.get_anagrams("godzilla")
    self.assertEqual(r, ['godzilla'])

    _, r = self.anagrams2.get_anagrams("goes")
    self.assertEqual(r, ['egos', 'goes'])

    _, r = self.anagrams2.get_anagrams("goethe")
    self.assertEqual(r, ['goethe'])

    _, r = self.anagrams2.get_anagrams("goff")
    self.assertEqual(r, ['goff'])

    _, r = self.anagrams2.get_anagrams("goggles")
    self.assertEqual(r, ['goggles'])

    _, r = self.anagrams2.get_anagrams("gogh")
    self.assertEqual(r, ['gogh'])

    _, r = self.anagrams2.get_anagrams("going")
    self.assertEqual(r, ['going'])

    _, r = self.anagrams2.get_anagrams("goings")
    self.assertEqual(r, ['goings'])

    _, r = self.anagrams2.get_anagrams("gold")
    self.assertEqual(r, ['gold'])

    _, r = self.anagrams2.get_anagrams("golda")
    self.assertEqual(r, ['golda'])

    _, r = self.anagrams2.get_anagrams("goldberg")
    self.assertEqual(r, ['goldberg'])

    _, r = self.anagrams2.get_anagrams("golden")
    self.assertEqual(r, ['golden', 'longed'])

    _, r = self.anagrams2.get_anagrams("goldenly")
    self.assertEqual(r, ['goldenly'])

    _, r = self.anagrams2.get_anagrams("goldenness")
    self.assertEqual(r, ['goldenness'])

    _, r = self.anagrams2.get_anagrams("goldenrod")
    self.assertEqual(r, ['goldenrod'])

    _, r = self.anagrams2.get_anagrams("goldfield")
    self.assertEqual(r, ['goldfield'])

    _, r = self.anagrams2.get_anagrams("goldfish")
    self.assertEqual(r, ['goldfish'])

    _, r = self.anagrams2.get_anagrams("golding")
    self.assertEqual(r, ['golding', 'lodging'])

    _, r = self.anagrams2.get_anagrams("goldman")
    self.assertEqual(r, ['goldman'])

    _, r = self.anagrams2.get_anagrams("golds")
    self.assertEqual(r, ['golds'])

    _, r = self.anagrams2.get_anagrams("goldsmith")
    self.assertEqual(r, ['goldsmith'])

    _, r = self.anagrams2.get_anagrams("goldstein")
    self.assertEqual(r, ['goldstein', 'goldstine'])

    _, r = self.anagrams2.get_anagrams("goldstine")
    self.assertEqual(r, ['goldstein', 'goldstine'])

    _, r = self.anagrams2.get_anagrams("goldwater")
    self.assertEqual(r, ['goldwater'])

    _, r = self.anagrams2.get_anagrams("goleta")
    self.assertEqual(r, ['goleta'])

    _, r = self.anagrams2.get_anagrams("golf")
    self.assertEqual(r, ['flog', 'golf'])

    _, r = self.anagrams2.get_anagrams("golfer")
    self.assertEqual(r, ['golfer'])

    _, r = self.anagrams2.get_anagrams("golfers")
    self.assertEqual(r, ['golfers'])

    _, r = self.anagrams2.get_anagrams("golfing")
    self.assertEqual(r, ['golfing'])

    _, r = self.anagrams2.get_anagrams("goliath")
    self.assertEqual(r, ['goliath'])

    _, r = self.anagrams2.get_anagrams("golly")
    self.assertEqual(r, ['golly'])

    _, r = self.anagrams2.get_anagrams("gomez")
    self.assertEqual(r, ['gomez'])

    _, r = self.anagrams2.get_anagrams("gondola")
    self.assertEqual(r, ['gondola'])

    _, r = self.anagrams2.get_anagrams("gone")
    self.assertEqual(r, ['gone'])

    _, r = self.anagrams2.get_anagrams("goner")
    self.assertEqual(r, ['goner', 'goren', 'negro'])

    _, r = self.anagrams2.get_anagrams("gong")
    self.assertEqual(r, ['gong'])

    _, r = self.anagrams2.get_anagrams("gongs")
    self.assertEqual(r, ['gongs'])

    _, r = self.anagrams2.get_anagrams("gonzales")
    self.assertEqual(r, ['gonzales'])

    _, r = self.anagrams2.get_anagrams("gonzalez")
    self.assertEqual(r, ['gonzalez'])

    _, r = self.anagrams2.get_anagrams("good")
    self.assertEqual(r, ['good'])

    _, r = self.anagrams2.get_anagrams("goodby")
    self.assertEqual(r, ['goodby'])

    _, r = self.anagrams2.get_anagrams("goodbye")
    self.assertEqual(r, ['goodbye'])

    _, r = self.anagrams2.get_anagrams("goode")
    self.assertEqual(r, ['goode'])

    _, r = self.anagrams2.get_anagrams("goodies")
    self.assertEqual(r, ['goodies'])

    _, r = self.anagrams2.get_anagrams("goodly")
    self.assertEqual(r, ['goodly'])

    _, r = self.anagrams2.get_anagrams("goodman")
    self.assertEqual(r, ['goodman'])

    _, r = self.anagrams2.get_anagrams("goodness")
    self.assertEqual(r, ['goodness'])

    _, r = self.anagrams2.get_anagrams("goodrich")
    self.assertEqual(r, ['goodrich'])

    _, r = self.anagrams2.get_anagrams("goods")
    self.assertEqual(r, ['goods'])

    _, r = self.anagrams2.get_anagrams("goodwill")
    self.assertEqual(r, ['goodwill'])

    _, r = self.anagrams2.get_anagrams("goodwin")
    self.assertEqual(r, ['goodwin'])

    _, r = self.anagrams2.get_anagrams("goody")
    self.assertEqual(r, ['goody'])

    _, r = self.anagrams2.get_anagrams("goodyear")
    self.assertEqual(r, ['goodyear'])

    _, r = self.anagrams2.get_anagrams("goof")
    self.assertEqual(r, ['goof'])

    _, r = self.anagrams2.get_anagrams("goofed")
    self.assertEqual(r, ['goofed'])

    _, r = self.anagrams2.get_anagrams("goofs")
    self.assertEqual(r, ['goofs'])

    _, r = self.anagrams2.get_anagrams("goofy")
    self.assertEqual(r, ['goofy'])

    _, r = self.anagrams2.get_anagrams("goose")
    self.assertEqual(r, ['goose'])

    _, r = self.anagrams2.get_anagrams("gopher")
    self.assertEqual(r, ['gopher'])

    _, r = self.anagrams2.get_anagrams("gordian")
    self.assertEqual(r, ['gordian'])

    _, r = self.anagrams2.get_anagrams("gordon")
    self.assertEqual(r, ['gordon'])

    _, r = self.anagrams2.get_anagrams("gore")
    self.assertEqual(r, ['ergo', 'gore'])

    _, r = self.anagrams2.get_anagrams("goren")
    self.assertEqual(r, ['goner', 'goren', 'negro'])

    _, r = self.anagrams2.get_anagrams("gorge")
    self.assertEqual(r, ['gorge'])

    _, r = self.anagrams2.get_anagrams("gorgeous")
    self.assertEqual(r, ['gorgeous'])

    _, r = self.anagrams2.get_anagrams("gorgeously")
    self.assertEqual(r, ['gorgeously'])

    _, r = self.anagrams2.get_anagrams("gorges")
    self.assertEqual(r, ['gorges'])

    _, r = self.anagrams2.get_anagrams("gorging")
    self.assertEqual(r, ['gorging'])

    _, r = self.anagrams2.get_anagrams("gorham")
    self.assertEqual(r, ['gorham'])

    _, r = self.anagrams2.get_anagrams("gorilla")
    self.assertEqual(r, ['gorilla'])

    _, r = self.anagrams2.get_anagrams("gorillas")
    self.assertEqual(r, ['gorillas'])

    _, r = self.anagrams2.get_anagrams("gorky")
    self.assertEqual(r, ['gorky'])

    _, r = self.anagrams2.get_anagrams("gorton")
    self.assertEqual(r, ['gorton', 'groton'])

    _, r = self.anagrams2.get_anagrams("gory")
    self.assertEqual(r, ['gory', 'gyro', 'orgy'])

    _, r = self.anagrams2.get_anagrams("gosh")
    self.assertEqual(r, ['gosh', 'hogs'])

    _, r = self.anagrams2.get_anagrams("gospel")
    self.assertEqual(r, ['gospel'])

    _, r = self.anagrams2.get_anagrams("gospelers")
    self.assertEqual(r, ['gospelers'])

    _, r = self.anagrams2.get_anagrams("gospels")
    self.assertEqual(r, ['gospels'])

    _, r = self.anagrams2.get_anagrams("gossip")
    self.assertEqual(r, ['gossip'])

    _, r = self.anagrams2.get_anagrams("gossiped")
    self.assertEqual(r, ['gossiped'])

    _, r = self.anagrams2.get_anagrams("gossiping")
    self.assertEqual(r, ['gossiping'])

    _, r = self.anagrams2.get_anagrams("gossips")
    self.assertEqual(r, ['gossips'])

    _, r = self.anagrams2.get_anagrams("got")
    self.assertEqual(r, ['got'])

    _, r = self.anagrams2.get_anagrams("gotham")
    self.assertEqual(r, ['gotham'])

    _, r = self.anagrams2.get_anagrams("gothic")
    self.assertEqual(r, ['gothic'])

    _, r = self.anagrams2.get_anagrams("gothically")
    self.assertEqual(r, ['gothically'])

    _, r = self.anagrams2.get_anagrams("gothicism")
    self.assertEqual(r, ['gothicism'])

    _, r = self.anagrams2.get_anagrams("gothicize")
    self.assertEqual(r, ['gothicize'])

    _, r = self.anagrams2.get_anagrams("gothicized")
    self.assertEqual(r, ['gothicized'])

    _, r = self.anagrams2.get_anagrams("gothicizer")
    self.assertEqual(r, ['gothicizer'])

    _, r = self.anagrams2.get_anagrams("gothicizers")
    self.assertEqual(r, ['gothicizers'])

    _, r = self.anagrams2.get_anagrams("gothicizes")
    self.assertEqual(r, ['gothicizes'])

    _, r = self.anagrams2.get_anagrams("gothicizing")
    self.assertEqual(r, ['gothicizing'])

    _, r = self.anagrams2.get_anagrams("goto")
    self.assertEqual(r, ['goto', 'togo'])

    _, r = self.anagrams2.get_anagrams("gotos")
    self.assertEqual(r, ['gotos'])

    _, r = self.anagrams2.get_anagrams("gotten")
    self.assertEqual(r, ['gotten'])

    _, r = self.anagrams2.get_anagrams("gottfried")
    self.assertEqual(r, ['gottfried'])

    _, r = self.anagrams2.get_anagrams("goucher")
    self.assertEqual(r, ['goucher'])

    _, r = self.anagrams2.get_anagrams("gouda")
    self.assertEqual(r, ['gouda'])

    _, r = self.anagrams2.get_anagrams("gouge")
    self.assertEqual(r, ['gouge'])

    _, r = self.anagrams2.get_anagrams("gouged")
    self.assertEqual(r, ['gouged'])

    _, r = self.anagrams2.get_anagrams("gouges")
    self.assertEqual(r, ['gouges'])

    _, r = self.anagrams2.get_anagrams("gouging")
    self.assertEqual(r, ['gouging'])

    _, r = self.anagrams2.get_anagrams("gould")
    self.assertEqual(r, ['gould'])

    _, r = self.anagrams2.get_anagrams("gourd")
    self.assertEqual(r, ['gourd'])

    _, r = self.anagrams2.get_anagrams("gourmet")
    self.assertEqual(r, ['gourmet'])

    _, r = self.anagrams2.get_anagrams("gout")
    self.assertEqual(r, ['gout'])

    _, r = self.anagrams2.get_anagrams("govern")
    self.assertEqual(r, ['govern'])

    _, r = self.anagrams2.get_anagrams("governance")
    self.assertEqual(r, ['governance'])

    _, r = self.anagrams2.get_anagrams("governed")
    self.assertEqual(r, ['governed'])

    _, r = self.anagrams2.get_anagrams("governess")
    self.assertEqual(r, ['governess'])

    _, r = self.anagrams2.get_anagrams("governing")
    self.assertEqual(r, ['governing'])

    _, r = self.anagrams2.get_anagrams("government")
    self.assertEqual(r, ['government'])

    _, r = self.anagrams2.get_anagrams("governmental")
    self.assertEqual(r, ['governmental'])

    _, r = self.anagrams2.get_anagrams("governmentally")
    self.assertEqual(r, ['governmentally'])

    _, r = self.anagrams2.get_anagrams("governments")
    self.assertEqual(r, ['governments'])

    _, r = self.anagrams2.get_anagrams("governor")
    self.assertEqual(r, ['governor'])

    _, r = self.anagrams2.get_anagrams("governors")
    self.assertEqual(r, ['governors', 'grosvenor'])

    _, r = self.anagrams2.get_anagrams("governs")
    self.assertEqual(r, ['governs'])

    _, r = self.anagrams2.get_anagrams("gown")
    self.assertEqual(r, ['gown', 'wong'])

    _, r = self.anagrams2.get_anagrams("gowned")
    self.assertEqual(r, ['gowned'])

    _, r = self.anagrams2.get_anagrams("gowns")
    self.assertEqual(r, ['gowns'])

    _, r = self.anagrams2.get_anagrams("grab")
    self.assertEqual(r, ['brag', 'garb', 'grab'])

    _, r = self.anagrams2.get_anagrams("grabbed")
    self.assertEqual(r, ['grabbed'])

    _, r = self.anagrams2.get_anagrams("grabber")
    self.assertEqual(r, ['grabber'])

    _, r = self.anagrams2.get_anagrams("grabbers")
    self.assertEqual(r, ['grabbers'])

    _, r = self.anagrams2.get_anagrams("grabbing")
    self.assertEqual(r, ['grabbing'])

    _, r = self.anagrams2.get_anagrams("grabbings")
    self.assertEqual(r, ['grabbings'])

    _, r = self.anagrams2.get_anagrams("grabs")
    self.assertEqual(r, ['brags', 'grabs'])

    _, r = self.anagrams2.get_anagrams("grace")
    self.assertEqual(r, ['cager', 'grace'])

    _, r = self.anagrams2.get_anagrams("graced")
    self.assertEqual(r, ['graced'])

    _, r = self.anagrams2.get_anagrams("graceful")
    self.assertEqual(r, ['graceful'])

    _, r = self.anagrams2.get_anagrams("gracefully")
    self.assertEqual(r, ['gracefully'])

    _, r = self.anagrams2.get_anagrams("gracefulness")
    self.assertEqual(r, ['gracefulness'])

    _, r = self.anagrams2.get_anagrams("graces")
    self.assertEqual(r, ['cagers', 'graces'])

    _, r = self.anagrams2.get_anagrams("gracie")
    self.assertEqual(r, ['gracie'])

    _, r = self.anagrams2.get_anagrams("gracing")
    self.assertEqual(r, ['gracing'])

    _, r = self.anagrams2.get_anagrams("gracious")
    self.assertEqual(r, ['gracious'])

    _, r = self.anagrams2.get_anagrams("graciously")
    self.assertEqual(r, ['graciously'])

    _, r = self.anagrams2.get_anagrams("graciousness")
    self.assertEqual(r, ['graciousness'])

    _, r = self.anagrams2.get_anagrams("grad")
    self.assertEqual(r, ['drag', 'grad'])

    _, r = self.anagrams2.get_anagrams("gradation")
    self.assertEqual(r, ['gradation'])

    _, r = self.anagrams2.get_anagrams("gradations")
    self.assertEqual(r, ['gradations'])

    _, r = self.anagrams2.get_anagrams("grade")
    self.assertEqual(r, ['edgar', 'grade', 'raged'])

    _, r = self.anagrams2.get_anagrams("graded")
    self.assertEqual(r, ['graded'])

    _, r = self.anagrams2.get_anagrams("grader")
    self.assertEqual(r, ['gerard', 'grader', 'regard'])

    _, r = self.anagrams2.get_anagrams("graders")
    self.assertEqual(r, ['graders', 'regards'])

    _, r = self.anagrams2.get_anagrams("grades")
    self.assertEqual(r, ['grades'])

    _, r = self.anagrams2.get_anagrams("gradient")
    self.assertEqual(r, ['gradient', 'treading'])

    _, r = self.anagrams2.get_anagrams("gradients")
    self.assertEqual(r, ['gradients'])

    _, r = self.anagrams2.get_anagrams("grading")
    self.assertEqual(r, ['grading'])

    _, r = self.anagrams2.get_anagrams("gradings")
    self.assertEqual(r, ['gradings'])

    _, r = self.anagrams2.get_anagrams("gradual")
    self.assertEqual(r, ['gradual'])

    _, r = self.anagrams2.get_anagrams("gradually")
    self.assertEqual(r, ['gradually'])

    _, r = self.anagrams2.get_anagrams("graduate")
    self.assertEqual(r, ['graduate'])

    _, r = self.anagrams2.get_anagrams("graduated")
    self.assertEqual(r, ['graduated'])

    _, r = self.anagrams2.get_anagrams("graduates")
    self.assertEqual(r, ['graduates'])

    _, r = self.anagrams2.get_anagrams("graduating")
    self.assertEqual(r, ['graduating'])

    _, r = self.anagrams2.get_anagrams("graduation")
    self.assertEqual(r, ['graduation'])

    _, r = self.anagrams2.get_anagrams("graduations")
    self.assertEqual(r, ['graduations'])

    _, r = self.anagrams2.get_anagrams("grady")
    self.assertEqual(r, ['grady'])

    _, r = self.anagrams2.get_anagrams("graff")
    self.assertEqual(r, ['graff'])

    _, r = self.anagrams2.get_anagrams("graft")
    self.assertEqual(r, ['graft'])

    _, r = self.anagrams2.get_anagrams("grafted")
    self.assertEqual(r, ['grafted'])

    _, r = self.anagrams2.get_anagrams("grafter")
    self.assertEqual(r, ['grafter'])

    _, r = self.anagrams2.get_anagrams("grafting")
    self.assertEqual(r, ['grafting'])

    _, r = self.anagrams2.get_anagrams("grafton")
    self.assertEqual(r, ['grafton'])

    _, r = self.anagrams2.get_anagrams("grafts")
    self.assertEqual(r, ['grafts'])

    _, r = self.anagrams2.get_anagrams("graham")
    self.assertEqual(r, ['graham'])

    _, r = self.anagrams2.get_anagrams("grahams")
    self.assertEqual(r, ['grahams'])

    _, r = self.anagrams2.get_anagrams("grail")
    self.assertEqual(r, ['grail'])

    _, r = self.anagrams2.get_anagrams("grain")
    self.assertEqual(r, ['grain'])

    _, r = self.anagrams2.get_anagrams("grained")
    self.assertEqual(r, ['grained', 'reading'])

    _, r = self.anagrams2.get_anagrams("graining")
    self.assertEqual(r, ['graining'])

    _, r = self.anagrams2.get_anagrams("grains")
    self.assertEqual(r, ['grains'])

    _, r = self.anagrams2.get_anagrams("gram")
    self.assertEqual(r, ['gram'])

    _, r = self.anagrams2.get_anagrams("grammar")
    self.assertEqual(r, ['grammar'])

    _, r = self.anagrams2.get_anagrams("grammarian")
    self.assertEqual(r, ['grammarian'])

    _, r = self.anagrams2.get_anagrams("grammars")
    self.assertEqual(r, ['grammars'])

    _, r = self.anagrams2.get_anagrams("grammatic")
    self.assertEqual(r, ['grammatic'])

    _, r = self.anagrams2.get_anagrams("grammatical")
    self.assertEqual(r, ['grammatical'])

    _, r = self.anagrams2.get_anagrams("grammatically")
    self.assertEqual(r, ['grammatically'])

    _, r = self.anagrams2.get_anagrams("grams")
    self.assertEqual(r, ['grams'])

    _, r = self.anagrams2.get_anagrams("granaries")
    self.assertEqual(r, ['granaries'])

    _, r = self.anagrams2.get_anagrams("granary")
    self.assertEqual(r, ['granary'])

    _, r = self.anagrams2.get_anagrams("grand")
    self.assertEqual(r, ['grand'])

    _, r = self.anagrams2.get_anagrams("grandchild")
    self.assertEqual(r, ['grandchild'])

    _, r = self.anagrams2.get_anagrams("grandchildren")
    self.assertEqual(r, ['grandchildren'])

    _, r = self.anagrams2.get_anagrams("granddaughter")
    self.assertEqual(r, ['granddaughter'])

    _, r = self.anagrams2.get_anagrams("grander")
    self.assertEqual(r, ['gardner', 'grander'])

    _, r = self.anagrams2.get_anagrams("grandest")
    self.assertEqual(r, ['grandest'])

    _, r = self.anagrams2.get_anagrams("grandeur")
    self.assertEqual(r, ['grandeur'])

    _, r = self.anagrams2.get_anagrams("grandfather")
    self.assertEqual(r, ['grandfather'])

    _, r = self.anagrams2.get_anagrams("grandfathers")
    self.assertEqual(r, ['grandfathers'])

    _, r = self.anagrams2.get_anagrams("grandiose")
    self.assertEqual(r, ['grandiose'])

    _, r = self.anagrams2.get_anagrams("grandly")
    self.assertEqual(r, ['grandly'])

    _, r = self.anagrams2.get_anagrams("grandma")
    self.assertEqual(r, ['grandma'])

    _, r = self.anagrams2.get_anagrams("grandmother")
    self.assertEqual(r, ['grandmother'])

    _, r = self.anagrams2.get_anagrams("grandmothers")
    self.assertEqual(r, ['grandmothers'])

    _, r = self.anagrams2.get_anagrams("grandnephew")
    self.assertEqual(r, ['grandnephew'])

    _, r = self.anagrams2.get_anagrams("grandness")
    self.assertEqual(r, ['grandness'])

    _, r = self.anagrams2.get_anagrams("grandniece")
    self.assertEqual(r, ['grandniece'])

    _, r = self.anagrams2.get_anagrams("grandpa")
    self.assertEqual(r, ['grandpa'])

    _, r = self.anagrams2.get_anagrams("grandparent")
    self.assertEqual(r, ['grandparent'])

    _, r = self.anagrams2.get_anagrams("grands")
    self.assertEqual(r, ['grands'])

    _, r = self.anagrams2.get_anagrams("grandson")
    self.assertEqual(r, ['grandson'])

    _, r = self.anagrams2.get_anagrams("grandsons")
    self.assertEqual(r, ['grandsons'])

    _, r = self.anagrams2.get_anagrams("grandstand")
    self.assertEqual(r, ['grandstand'])

    _, r = self.anagrams2.get_anagrams("grange")
    self.assertEqual(r, ['grange'])

    _, r = self.anagrams2.get_anagrams("granite")
    self.assertEqual(r, ['granite', 'ingrate', 'tearing'])

    _, r = self.anagrams2.get_anagrams("granny")
    self.assertEqual(r, ['granny'])

    _, r = self.anagrams2.get_anagrams("granola")
    self.assertEqual(r, ['granola'])

    _, r = self.anagrams2.get_anagrams("grant")
    self.assertEqual(r, ['grant'])

    _, r = self.anagrams2.get_anagrams("granted")
    self.assertEqual(r, ['dragnet', 'granted'])

    _, r = self.anagrams2.get_anagrams("grantee")
    self.assertEqual(r, ['grantee'])

    _, r = self.anagrams2.get_anagrams("granter")
    self.assertEqual(r, ['granter'])

    _, r = self.anagrams2.get_anagrams("granting")
    self.assertEqual(r, ['granting'])

    _, r = self.anagrams2.get_anagrams("grantor")
    self.assertEqual(r, ['grantor'])

    _, r = self.anagrams2.get_anagrams("grants")
    self.assertEqual(r, ['grants'])

    _, r = self.anagrams2.get_anagrams("granularity")
    self.assertEqual(r, ['granularity'])

    _, r = self.anagrams2.get_anagrams("granulate")
    self.assertEqual(r, ['granulate'])

    _, r = self.anagrams2.get_anagrams("granulated")
    self.assertEqual(r, ['granulated'])

    _, r = self.anagrams2.get_anagrams("granulates")
    self.assertEqual(r, ['granulates'])

    _, r = self.anagrams2.get_anagrams("granulating")
    self.assertEqual(r, ['granulating'])

    _, r = self.anagrams2.get_anagrams("granville")
    self.assertEqual(r, ['granville'])

    _, r = self.anagrams2.get_anagrams("grape")
    self.assertEqual(r, ['grape', 'pager'])

    _, r = self.anagrams2.get_anagrams("grapefruit")
    self.assertEqual(r, ['grapefruit'])

    _, r = self.anagrams2.get_anagrams("grapes")
    self.assertEqual(r, ['grapes', 'pagers'])

    _, r = self.anagrams2.get_anagrams("grapevine")
    self.assertEqual(r, ['grapevine'])

    _, r = self.anagrams2.get_anagrams("graph")
    self.assertEqual(r, ['graph'])

    _, r = self.anagrams2.get_anagrams("graphed")
    self.assertEqual(r, ['graphed'])

    _, r = self.anagrams2.get_anagrams("graphic")
    self.assertEqual(r, ['graphic'])

    _, r = self.anagrams2.get_anagrams("graphical")
    self.assertEqual(r, ['graphical'])

    _, r = self.anagrams2.get_anagrams("graphically")
    self.assertEqual(r, ['graphically'])

    _, r = self.anagrams2.get_anagrams("graphics")
    self.assertEqual(r, ['graphics'])

    _, r = self.anagrams2.get_anagrams("graphing")
    self.assertEqual(r, ['graphing'])

    _, r = self.anagrams2.get_anagrams("graphite")
    self.assertEqual(r, ['graphite'])

    _, r = self.anagrams2.get_anagrams("graphs")
    self.assertEqual(r, ['graphs'])

    _, r = self.anagrams2.get_anagrams("grapple")
    self.assertEqual(r, ['grapple'])

    _, r = self.anagrams2.get_anagrams("grappled")
    self.assertEqual(r, ['grappled'])

    _, r = self.anagrams2.get_anagrams("grappling")
    self.assertEqual(r, ['grappling'])

    _, r = self.anagrams2.get_anagrams("grasp")
    self.assertEqual(r, ['grasp'])

    _, r = self.anagrams2.get_anagrams("graspable")
    self.assertEqual(r, ['graspable'])

    _, r = self.anagrams2.get_anagrams("grasped")
    self.assertEqual(r, ['grasped'])

    _, r = self.anagrams2.get_anagrams("grasping")
    self.assertEqual(r, ['grasping'])

    _, r = self.anagrams2.get_anagrams("graspingly")
    self.assertEqual(r, ['graspingly'])

    _, r = self.anagrams2.get_anagrams("grasps")
    self.assertEqual(r, ['grasps'])

    _, r = self.anagrams2.get_anagrams("grass")
    self.assertEqual(r, ['grass'])

    _, r = self.anagrams2.get_anagrams("grassed")
    self.assertEqual(r, ['grassed'])

    _, r = self.anagrams2.get_anagrams("grassers")
    self.assertEqual(r, ['grassers'])

    _, r = self.anagrams2.get_anagrams("grasses")
    self.assertEqual(r, ['grasses'])

    _, r = self.anagrams2.get_anagrams("grassier")
    self.assertEqual(r, ['grassier'])

    _, r = self.anagrams2.get_anagrams("grassiest")
    self.assertEqual(r, ['grassiest'])

    _, r = self.anagrams2.get_anagrams("grassland")
    self.assertEqual(r, ['grassland'])

    _, r = self.anagrams2.get_anagrams("grassy")
    self.assertEqual(r, ['grassy'])

    _, r = self.anagrams2.get_anagrams("grate")
    self.assertEqual(r, ['grate', 'great', 'greta'])

    _, r = self.anagrams2.get_anagrams("grated")
    self.assertEqual(r, ['grated'])

    _, r = self.anagrams2.get_anagrams("grateful")
    self.assertEqual(r, ['grateful'])

    _, r = self.anagrams2.get_anagrams("gratefully")
    self.assertEqual(r, ['gratefully'])

    _, r = self.anagrams2.get_anagrams("gratefulness")
    self.assertEqual(r, ['gratefulness'])

    _, r = self.anagrams2.get_anagrams("grater")
    self.assertEqual(r, ['garter', 'grater'])

    _, r = self.anagrams2.get_anagrams("grates")
    self.assertEqual(r, ['grates', 'stager'])

    _, r = self.anagrams2.get_anagrams("gratification")
    self.assertEqual(r, ['gratification'])

    _, r = self.anagrams2.get_anagrams("gratified")
    self.assertEqual(r, ['gratified'])

    _, r = self.anagrams2.get_anagrams("gratify")
    self.assertEqual(r, ['gratify'])

    _, r = self.anagrams2.get_anagrams("gratifying")
    self.assertEqual(r, ['gratifying'])

    _, r = self.anagrams2.get_anagrams("grating")
    self.assertEqual(r, ['grating'])

    _, r = self.anagrams2.get_anagrams("gratings")
    self.assertEqual(r, ['gratings'])

    _, r = self.anagrams2.get_anagrams("gratis")
    self.assertEqual(r, ['gratis'])

    _, r = self.anagrams2.get_anagrams("gratitude")
    self.assertEqual(r, ['gratitude'])

    _, r = self.anagrams2.get_anagrams("gratuities")
    self.assertEqual(r, ['gratuities'])

    _, r = self.anagrams2.get_anagrams("gratuitous")
    self.assertEqual(r, ['gratuitous'])

    _, r = self.anagrams2.get_anagrams("gratuitously")
    self.assertEqual(r, ['gratuitously'])

    _, r = self.anagrams2.get_anagrams("gratuitousness")
    self.assertEqual(r, ['gratuitousness'])

    _, r = self.anagrams2.get_anagrams("gratuity")
    self.assertEqual(r, ['gratuity'])

    _, r = self.anagrams2.get_anagrams("grave")
    self.assertEqual(r, ['grave'])

    _, r = self.anagrams2.get_anagrams("gravel")
    self.assertEqual(r, ['gravel', 'verlag'])

    _, r = self.anagrams2.get_anagrams("gravelly")
    self.assertEqual(r, ['gravelly'])

    _, r = self.anagrams2.get_anagrams("gravely")
    self.assertEqual(r, ['gravely'])

    _, r = self.anagrams2.get_anagrams("graven")
    self.assertEqual(r, ['graven'])

    _, r = self.anagrams2.get_anagrams("graveness")
    self.assertEqual(r, ['graveness'])

    _, r = self.anagrams2.get_anagrams("graver")
    self.assertEqual(r, ['graver'])

    _, r = self.anagrams2.get_anagrams("graves")
    self.assertEqual(r, ['graves'])

    _, r = self.anagrams2.get_anagrams("gravest")
    self.assertEqual(r, ['gravest'])

    _, r = self.anagrams2.get_anagrams("gravestone")
    self.assertEqual(r, ['gravestone'])

    _, r = self.anagrams2.get_anagrams("graveyard")
    self.assertEqual(r, ['graveyard'])

    _, r = self.anagrams2.get_anagrams("gravitate")
    self.assertEqual(r, ['gravitate'])

    _, r = self.anagrams2.get_anagrams("gravitation")
    self.assertEqual(r, ['gravitation'])

    _, r = self.anagrams2.get_anagrams("gravitational")
    self.assertEqual(r, ['gravitational'])

    _, r = self.anagrams2.get_anagrams("gravity")
    self.assertEqual(r, ['gravity'])

    _, r = self.anagrams2.get_anagrams("gravy")
    self.assertEqual(r, ['gravy'])

    _, r = self.anagrams2.get_anagrams("gray")
    self.assertEqual(r, ['gary', 'gray'])

    _, r = self.anagrams2.get_anagrams("grayed")
    self.assertEqual(r, ['grayed'])

    _, r = self.anagrams2.get_anagrams("grayer")
    self.assertEqual(r, ['grayer'])

    _, r = self.anagrams2.get_anagrams("grayest")
    self.assertEqual(r, ['grayest'])

    _, r = self.anagrams2.get_anagrams("graying")
    self.assertEqual(r, ['graying'])

    _, r = self.anagrams2.get_anagrams("grayness")
    self.assertEqual(r, ['grayness'])

    _, r = self.anagrams2.get_anagrams("grayson")
    self.assertEqual(r, ['grayson'])

    _, r = self.anagrams2.get_anagrams("graze")
    self.assertEqual(r, ['gazer', 'graze'])

    _, r = self.anagrams2.get_anagrams("grazed")
    self.assertEqual(r, ['grazed'])

    _, r = self.anagrams2.get_anagrams("grazer")
    self.assertEqual(r, ['grazer'])

    _, r = self.anagrams2.get_anagrams("grazing")
    self.assertEqual(r, ['grazing'])

    _, r = self.anagrams2.get_anagrams("grease")
    self.assertEqual(r, ['agrees', 'grease'])

    _, r = self.anagrams2.get_anagrams("greased")
    self.assertEqual(r, ['greased'])

    _, r = self.anagrams2.get_anagrams("greases")
    self.assertEqual(r, ['greases'])

    _, r = self.anagrams2.get_anagrams("greasy")
    self.assertEqual(r, ['greasy'])

    _, r = self.anagrams2.get_anagrams("great")
    self.assertEqual(r, ['grate', 'great', 'greta'])

    _, r = self.anagrams2.get_anagrams("greater")
    self.assertEqual(r, ['greater'])

    _, r = self.anagrams2.get_anagrams("greatest")
    self.assertEqual(r, ['greatest'])

    _, r = self.anagrams2.get_anagrams("greatly")
    self.assertEqual(r, ['greatly'])

    _, r = self.anagrams2.get_anagrams("greatness")
    self.assertEqual(r, ['greatness', 'sergeants'])

    _, r = self.anagrams2.get_anagrams("grecian")
    self.assertEqual(r, ['grecian'])

    _, r = self.anagrams2.get_anagrams("grecianize")
    self.assertEqual(r, ['grecianize'])

    _, r = self.anagrams2.get_anagrams("grecianizes")
    self.assertEqual(r, ['grecianizes'])

    _, r = self.anagrams2.get_anagrams("greece")
    self.assertEqual(r, ['greece'])

    _, r = self.anagrams2.get_anagrams("greed")
    self.assertEqual(r, ['greed'])

    _, r = self.anagrams2.get_anagrams("greedily")
    self.assertEqual(r, ['greedily'])

    _, r = self.anagrams2.get_anagrams("greediness")
    self.assertEqual(r, ['greediness'])

    _, r = self.anagrams2.get_anagrams("greedy")
    self.assertEqual(r, ['greedy'])

    _, r = self.anagrams2.get_anagrams("greek")
    self.assertEqual(r, ['greek'])

    _, r = self.anagrams2.get_anagrams("greekize")
    self.assertEqual(r, ['greekize'])

    _, r = self.anagrams2.get_anagrams("greekizes")
    self.assertEqual(r, ['greekizes'])

    _, r = self.anagrams2.get_anagrams("greeks")
    self.assertEqual(r, ['greeks', 'kresge'])

    _, r = self.anagrams2.get_anagrams("green")
    self.assertEqual(r, ['genre', 'green'])

    _, r = self.anagrams2.get_anagrams("greenbelt")
    self.assertEqual(r, ['greenbelt'])

    _, r = self.anagrams2.get_anagrams("greenberg")
    self.assertEqual(r, ['greenberg'])

    _, r = self.anagrams2.get_anagrams("greenblatt")
    self.assertEqual(r, ['greenblatt'])

    _, r = self.anagrams2.get_anagrams("greenbriar")
    self.assertEqual(r, ['greenbriar'])

    _, r = self.anagrams2.get_anagrams("greene")
    self.assertEqual(r, ['greene'])

    _, r = self.anagrams2.get_anagrams("greener")
    self.assertEqual(r, ['greener'])

    _, r = self.anagrams2.get_anagrams("greenery")
    self.assertEqual(r, ['greenery'])

    _, r = self.anagrams2.get_anagrams("greenest")
    self.assertEqual(r, ['greenest'])

    _, r = self.anagrams2.get_anagrams("greenfeld")
    self.assertEqual(r, ['greenfeld'])

    _, r = self.anagrams2.get_anagrams("greenfield")
    self.assertEqual(r, ['greenfield'])

    _, r = self.anagrams2.get_anagrams("greengrocer")
    self.assertEqual(r, ['greengrocer'])

    _, r = self.anagrams2.get_anagrams("greenhouse")
    self.assertEqual(r, ['greenhouse'])

    _, r = self.anagrams2.get_anagrams("greenhouses")
    self.assertEqual(r, ['greenhouses'])

    _, r = self.anagrams2.get_anagrams("greening")
    self.assertEqual(r, ['greening'])

    _, r = self.anagrams2.get_anagrams("greenish")
    self.assertEqual(r, ['greenish'])

    _, r = self.anagrams2.get_anagrams("greenland")
    self.assertEqual(r, ['englander', 'greenland'])

    _, r = self.anagrams2.get_anagrams("greenly")
    self.assertEqual(r, ['greenly'])

    _, r = self.anagrams2.get_anagrams("greenness")
    self.assertEqual(r, ['greenness'])

    _, r = self.anagrams2.get_anagrams("greens")
    self.assertEqual(r, ['genres', 'greens'])

    _, r = self.anagrams2.get_anagrams("greensboro")
    self.assertEqual(r, ['greensboro'])

    _, r = self.anagrams2.get_anagrams("greensville")
    self.assertEqual(r, ['greensville'])

    _, r = self.anagrams2.get_anagrams("greentree")
    self.assertEqual(r, ['greentree'])

    _, r = self.anagrams2.get_anagrams("greenville")
    self.assertEqual(r, ['greenville'])

    _, r = self.anagrams2.get_anagrams("greenware")
    self.assertEqual(r, ['greenware'])

    _, r = self.anagrams2.get_anagrams("greenwich")
    self.assertEqual(r, ['greenwich'])

    _, r = self.anagrams2.get_anagrams("greer")
    self.assertEqual(r, ['greer'])

    _, r = self.anagrams2.get_anagrams("greet")
    self.assertEqual(r, ['greet'])

    _, r = self.anagrams2.get_anagrams("greeted")
    self.assertEqual(r, ['greeted'])

    _, r = self.anagrams2.get_anagrams("greeter")
    self.assertEqual(r, ['greeter'])

    _, r = self.anagrams2.get_anagrams("greeting")
    self.assertEqual(r, ['greeting'])

    _, r = self.anagrams2.get_anagrams("greetings")
    self.assertEqual(r, ['greetings'])

    _, r = self.anagrams2.get_anagrams("greets")
    self.assertEqual(r, ['greets'])

    _, r = self.anagrams2.get_anagrams("greg")
    self.assertEqual(r, ['greg'])

    _, r = self.anagrams2.get_anagrams("gregarious")
    self.assertEqual(r, ['gregarious'])

    _, r = self.anagrams2.get_anagrams("gregg")
    self.assertEqual(r, ['gregg'])

    _, r = self.anagrams2.get_anagrams("gregorian")
    self.assertEqual(r, ['gregorian'])

    _, r = self.anagrams2.get_anagrams("gregory")
    self.assertEqual(r, ['gregory'])

    _, r = self.anagrams2.get_anagrams("grenade")
    self.assertEqual(r, ['angered', 'enraged', 'grenade'])

    _, r = self.anagrams2.get_anagrams("grenades")
    self.assertEqual(r, ['grenades'])

    _, r = self.anagrams2.get_anagrams("grendel")
    self.assertEqual(r, ['grendel'])

    _, r = self.anagrams2.get_anagrams("grenier")
    self.assertEqual(r, ['grenier'])

    _, r = self.anagrams2.get_anagrams("grenoble")
    self.assertEqual(r, ['grenoble'])

    _, r = self.anagrams2.get_anagrams("grenville")
    self.assertEqual(r, ['grenville'])

    _, r = self.anagrams2.get_anagrams("gresham")
    self.assertEqual(r, ['gresham'])

    _, r = self.anagrams2.get_anagrams("greta")
    self.assertEqual(r, ['grate', 'great', 'greta'])

    _, r = self.anagrams2.get_anagrams("gretchen")
    self.assertEqual(r, ['gretchen'])

    _, r = self.anagrams2.get_anagrams("grew")
    self.assertEqual(r, ['grew'])

    _, r = self.anagrams2.get_anagrams("grey")
    self.assertEqual(r, ['grey'])

    _, r = self.anagrams2.get_anagrams("greyest")
    self.assertEqual(r, ['greyest'])

    _, r = self.anagrams2.get_anagrams("greyhound")
    self.assertEqual(r, ['greyhound'])

    _, r = self.anagrams2.get_anagrams("greying")
    self.assertEqual(r, ['greying'])

    _, r = self.anagrams2.get_anagrams("grid")
    self.assertEqual(r, ['gird', 'grid'])

    _, r = self.anagrams2.get_anagrams("griddle")
    self.assertEqual(r, ['griddle'])

    _, r = self.anagrams2.get_anagrams("gridiron")
    self.assertEqual(r, ['gridiron'])

    _, r = self.anagrams2.get_anagrams("grids")
    self.assertEqual(r, ['grids'])

    _, r = self.anagrams2.get_anagrams("grief")
    self.assertEqual(r, ['grief'])

    _, r = self.anagrams2.get_anagrams("griefs")
    self.assertEqual(r, ['griefs'])

    _, r = self.anagrams2.get_anagrams("grievance")
    self.assertEqual(r, ['grievance'])

    _, r = self.anagrams2.get_anagrams("grievances")
    self.assertEqual(r, ['grievances'])

    _, r = self.anagrams2.get_anagrams("grieve")
    self.assertEqual(r, ['grieve'])

    _, r = self.anagrams2.get_anagrams("grieved")
    self.assertEqual(r, ['diverge', 'grieved'])

    _, r = self.anagrams2.get_anagrams("griever")
    self.assertEqual(r, ['griever'])

    _, r = self.anagrams2.get_anagrams("grievers")
    self.assertEqual(r, ['grievers'])

    _, r = self.anagrams2.get_anagrams("grieves")
    self.assertEqual(r, ['grieves'])

    _, r = self.anagrams2.get_anagrams("grieving")
    self.assertEqual(r, ['grieving'])

    _, r = self.anagrams2.get_anagrams("grievingly")
    self.assertEqual(r, ['grievingly'])

    _, r = self.anagrams2.get_anagrams("grievous")
    self.assertEqual(r, ['grievous'])

    _, r = self.anagrams2.get_anagrams("grievously")
    self.assertEqual(r, ['grievously'])

    _, r = self.anagrams2.get_anagrams("griffith")
    self.assertEqual(r, ['griffith'])

    _, r = self.anagrams2.get_anagrams("grill")
    self.assertEqual(r, ['grill'])

    _, r = self.anagrams2.get_anagrams("grilled")
    self.assertEqual(r, ['grilled'])

    _, r = self.anagrams2.get_anagrams("grilling")
    self.assertEqual(r, ['grilling'])

    _, r = self.anagrams2.get_anagrams("grills")
    self.assertEqual(r, ['grills'])

    _, r = self.anagrams2.get_anagrams("grim")
    self.assertEqual(r, ['grim'])

    _, r = self.anagrams2.get_anagrams("grimace")
    self.assertEqual(r, ['grimace'])

    _, r = self.anagrams2.get_anagrams("grimaldi")
    self.assertEqual(r, ['grimaldi'])

    _, r = self.anagrams2.get_anagrams("grime")
    self.assertEqual(r, ['grime'])

    _, r = self.anagrams2.get_anagrams("grimed")
    self.assertEqual(r, ['grimed'])

    _, r = self.anagrams2.get_anagrams("grimes")
    self.assertEqual(r, ['grimes'])

    _, r = self.anagrams2.get_anagrams("grimly")
    self.assertEqual(r, ['grimly'])

    _, r = self.anagrams2.get_anagrams("grimm")
    self.assertEqual(r, ['grimm'])

    _, r = self.anagrams2.get_anagrams("grimness")
    self.assertEqual(r, ['grimness'])

    _, r = self.anagrams2.get_anagrams("grin")
    self.assertEqual(r, ['grin', 'ring'])

    _, r = self.anagrams2.get_anagrams("grind")
    self.assertEqual(r, ['grind'])

    _, r = self.anagrams2.get_anagrams("grinder")
    self.assertEqual(r, ['grinder'])

    _, r = self.anagrams2.get_anagrams("grinders")
    self.assertEqual(r, ['grinders'])

    _, r = self.anagrams2.get_anagrams("grinding")
    self.assertEqual(r, ['grinding'])

    _, r = self.anagrams2.get_anagrams("grindings")
    self.assertEqual(r, ['grindings'])

    _, r = self.anagrams2.get_anagrams("grinds")
    self.assertEqual(r, ['grinds'])

    _, r = self.anagrams2.get_anagrams("grindstone")
    self.assertEqual(r, ['grindstone'])

    _, r = self.anagrams2.get_anagrams("grindstones")
    self.assertEqual(r, ['grindstones'])

    _, r = self.anagrams2.get_anagrams("grinning")
    self.assertEqual(r, ['grinning'])

    _, r = self.anagrams2.get_anagrams("grins")
    self.assertEqual(r, ['grins', 'rings'])

    _, r = self.anagrams2.get_anagrams("grip")
    self.assertEqual(r, ['grip'])

    _, r = self.anagrams2.get_anagrams("gripe")
    self.assertEqual(r, ['gripe'])

    _, r = self.anagrams2.get_anagrams("griped")
    self.assertEqual(r, ['griped'])

    _, r = self.anagrams2.get_anagrams("gripes")
    self.assertEqual(r, ['gripes'])

    _, r = self.anagrams2.get_anagrams("griping")
    self.assertEqual(r, ['griping'])

    _, r = self.anagrams2.get_anagrams("gripped")
    self.assertEqual(r, ['gripped'])

    _, r = self.anagrams2.get_anagrams("gripping")
    self.assertEqual(r, ['gripping'])

    _, r = self.anagrams2.get_anagrams("grippingly")
    self.assertEqual(r, ['grippingly'])

    _, r = self.anagrams2.get_anagrams("grips")
    self.assertEqual(r, ['grips', 'sprig'])

    _, r = self.anagrams2.get_anagrams("gris")
    self.assertEqual(r, ['gris', 'rigs'])

    _, r = self.anagrams2.get_anagrams("grisly")
    self.assertEqual(r, ['grisly'])

    _, r = self.anagrams2.get_anagrams("grist")
    self.assertEqual(r, ['grist', 'grits'])

    _, r = self.anagrams2.get_anagrams("griswold")
    self.assertEqual(r, ['griswold'])

    _, r = self.anagrams2.get_anagrams("grit")
    self.assertEqual(r, ['girt', 'grit'])

    _, r = self.anagrams2.get_anagrams("grits")
    self.assertEqual(r, ['grist', 'grits'])

    _, r = self.anagrams2.get_anagrams("gritty")
    self.assertEqual(r, ['gritty'])

    _, r = self.anagrams2.get_anagrams("grizzly")
    self.assertEqual(r, ['grizzly'])

    _, r = self.anagrams2.get_anagrams("groan")
    self.assertEqual(r, ['argon', 'groan', 'organ'])

    _, r = self.anagrams2.get_anagrams("groaned")
    self.assertEqual(r, ['groaned'])

    _, r = self.anagrams2.get_anagrams("groaner")
    self.assertEqual(r, ['groaner'])

    _, r = self.anagrams2.get_anagrams("groaners")
    self.assertEqual(r, ['groaners'])

    _, r = self.anagrams2.get_anagrams("groaning")
    self.assertEqual(r, ['groaning'])

    _, r = self.anagrams2.get_anagrams("groans")
    self.assertEqual(r, ['groans', 'organs'])

    _, r = self.anagrams2.get_anagrams("grocer")
    self.assertEqual(r, ['grocer'])

    _, r = self.anagrams2.get_anagrams("groceries")
    self.assertEqual(r, ['groceries'])

    _, r = self.anagrams2.get_anagrams("grocers")
    self.assertEqual(r, ['grocers'])

    _, r = self.anagrams2.get_anagrams("grocery")
    self.assertEqual(r, ['grocery'])

    _, r = self.anagrams2.get_anagrams("groggy")
    self.assertEqual(r, ['groggy'])

    _, r = self.anagrams2.get_anagrams("groin")
    self.assertEqual(r, ['groin'])

    _, r = self.anagrams2.get_anagrams("groom")
    self.assertEqual(r, ['groom'])

    _, r = self.anagrams2.get_anagrams("groomed")
    self.assertEqual(r, ['groomed'])

    _, r = self.anagrams2.get_anagrams("grooming")
    self.assertEqual(r, ['grooming'])

    _, r = self.anagrams2.get_anagrams("grooms")
    self.assertEqual(r, ['grooms'])

    _, r = self.anagrams2.get_anagrams("groot")
    self.assertEqual(r, ['groot'])

    _, r = self.anagrams2.get_anagrams("groove")
    self.assertEqual(r, ['groove'])

    _, r = self.anagrams2.get_anagrams("grooved")
    self.assertEqual(r, ['grooved'])

    _, r = self.anagrams2.get_anagrams("grooves")
    self.assertEqual(r, ['grooves'])

    _, r = self.anagrams2.get_anagrams("grope")
    self.assertEqual(r, ['grope'])

    _, r = self.anagrams2.get_anagrams("groped")
    self.assertEqual(r, ['groped'])

    _, r = self.anagrams2.get_anagrams("gropes")
    self.assertEqual(r, ['gropes'])

    _, r = self.anagrams2.get_anagrams("groping")
    self.assertEqual(r, ['groping'])

    _, r = self.anagrams2.get_anagrams("gross")
    self.assertEqual(r, ['gross'])

    _, r = self.anagrams2.get_anagrams("grossed")
    self.assertEqual(r, ['grossed'])

    _, r = self.anagrams2.get_anagrams("grosser")
    self.assertEqual(r, ['grosser'])

    _, r = self.anagrams2.get_anagrams("grosses")
    self.assertEqual(r, ['grosses'])

    _, r = self.anagrams2.get_anagrams("grossest")
    self.assertEqual(r, ['grossest'])

    _, r = self.anagrams2.get_anagrams("grosset")
    self.assertEqual(r, ['grosset'])

    _, r = self.anagrams2.get_anagrams("grossing")
    self.assertEqual(r, ['grossing'])

    _, r = self.anagrams2.get_anagrams("grossly")
    self.assertEqual(r, ['grossly'])

    _, r = self.anagrams2.get_anagrams("grossman")
    self.assertEqual(r, ['grossman'])

    _, r = self.anagrams2.get_anagrams("grossness")
    self.assertEqual(r, ['grossness'])

    _, r = self.anagrams2.get_anagrams("grosvenor")
    self.assertEqual(r, ['governors', 'grosvenor'])

    _, r = self.anagrams2.get_anagrams("grotesque")
    self.assertEqual(r, ['grotesque'])

    _, r = self.anagrams2.get_anagrams("grotesquely")
    self.assertEqual(r, ['grotesquely'])

    _, r = self.anagrams2.get_anagrams("grotesques")
    self.assertEqual(r, ['grotesques'])

    _, r = self.anagrams2.get_anagrams("groton")
    self.assertEqual(r, ['gorton', 'groton'])

    _, r = self.anagrams2.get_anagrams("grotto")
    self.assertEqual(r, ['grotto'])

    _, r = self.anagrams2.get_anagrams("grottos")
    self.assertEqual(r, ['grottos'])

    _, r = self.anagrams2.get_anagrams("ground")
    self.assertEqual(r, ['ground'])

    _, r = self.anagrams2.get_anagrams("grounded")
    self.assertEqual(r, ['grounded'])

    _, r = self.anagrams2.get_anagrams("grounder")
    self.assertEqual(r, ['grounder'])

    _, r = self.anagrams2.get_anagrams("grounders")
    self.assertEqual(r, ['grounders'])

    _, r = self.anagrams2.get_anagrams("grounding")
    self.assertEqual(r, ['grounding'])

    _, r = self.anagrams2.get_anagrams("grounds")
    self.assertEqual(r, ['grounds'])

    _, r = self.anagrams2.get_anagrams("groundwork")
    self.assertEqual(r, ['groundwork'])

    _, r = self.anagrams2.get_anagrams("group")
    self.assertEqual(r, ['group'])

    _, r = self.anagrams2.get_anagrams("grouped")
    self.assertEqual(r, ['grouped'])

    _, r = self.anagrams2.get_anagrams("grouping")
    self.assertEqual(r, ['grouping'])

    _, r = self.anagrams2.get_anagrams("groupings")
    self.assertEqual(r, ['groupings'])

    _, r = self.anagrams2.get_anagrams("groups")
    self.assertEqual(r, ['groups'])

    _, r = self.anagrams2.get_anagrams("grouse")
    self.assertEqual(r, ['grouse', 'rogues'])

    _, r = self.anagrams2.get_anagrams("grove")
    self.assertEqual(r, ['grove'])

    _, r = self.anagrams2.get_anagrams("grovel")
    self.assertEqual(r, ['glover', 'grovel'])

    _, r = self.anagrams2.get_anagrams("groveled")
    self.assertEqual(r, ['groveled'])

    _, r = self.anagrams2.get_anagrams("groveling")
    self.assertEqual(r, ['groveling'])

    _, r = self.anagrams2.get_anagrams("grovels")
    self.assertEqual(r, ['glovers', 'grovels'])

    _, r = self.anagrams2.get_anagrams("grover")
    self.assertEqual(r, ['grover'])

    _, r = self.anagrams2.get_anagrams("grovers")
    self.assertEqual(r, ['grovers'])

    _, r = self.anagrams2.get_anagrams("groves")
    self.assertEqual(r, ['groves'])

    _, r = self.anagrams2.get_anagrams("grow")
    self.assertEqual(r, ['grow'])

    _, r = self.anagrams2.get_anagrams("grower")
    self.assertEqual(r, ['grower'])

    _, r = self.anagrams2.get_anagrams("growers")
    self.assertEqual(r, ['growers'])

    _, r = self.anagrams2.get_anagrams("growing")
    self.assertEqual(r, ['growing'])

    _, r = self.anagrams2.get_anagrams("growl")
    self.assertEqual(r, ['growl'])

    _, r = self.anagrams2.get_anagrams("growled")
    self.assertEqual(r, ['growled'])

    _, r = self.anagrams2.get_anagrams("growling")
    self.assertEqual(r, ['growling'])

    _, r = self.anagrams2.get_anagrams("growls")
    self.assertEqual(r, ['growls'])

    _, r = self.anagrams2.get_anagrams("grown")
    self.assertEqual(r, ['grown', 'wrong'])

    _, r = self.anagrams2.get_anagrams("grownup")
    self.assertEqual(r, ['grownup'])

    _, r = self.anagrams2.get_anagrams("grownups")
    self.assertEqual(r, ['grownups'])

    _, r = self.anagrams2.get_anagrams("grows")
    self.assertEqual(r, ['grows'])

    _, r = self.anagrams2.get_anagrams("growth")
    self.assertEqual(r, ['growth'])

    _, r = self.anagrams2.get_anagrams("growths")
    self.assertEqual(r, ['growths'])

    _, r = self.anagrams2.get_anagrams("grub")
    self.assertEqual(r, ['grub'])

    _, r = self.anagrams2.get_anagrams("grubby")
    self.assertEqual(r, ['grubby'])

    _, r = self.anagrams2.get_anagrams("grubs")
    self.assertEqual(r, ['grubs'])

    _, r = self.anagrams2.get_anagrams("grudge")
    self.assertEqual(r, ['grudge', 'rugged'])

    _, r = self.anagrams2.get_anagrams("grudges")
    self.assertEqual(r, ['grudges'])

    _, r = self.anagrams2.get_anagrams("grudgingly")
    self.assertEqual(r, ['grudgingly'])

    _, r = self.anagrams2.get_anagrams("gruesome")
    self.assertEqual(r, ['gruesome'])

    _, r = self.anagrams2.get_anagrams("gruff")
    self.assertEqual(r, ['gruff'])

    _, r = self.anagrams2.get_anagrams("gruffly")
    self.assertEqual(r, ['gruffly'])

    _, r = self.anagrams2.get_anagrams("grumble")
    self.assertEqual(r, ['grumble'])

    _, r = self.anagrams2.get_anagrams("grumbled")
    self.assertEqual(r, ['grumbled'])

    _, r = self.anagrams2.get_anagrams("grumbles")
    self.assertEqual(r, ['grumbles'])

    _, r = self.anagrams2.get_anagrams("grumbling")
    self.assertEqual(r, ['grumbling'])

    _, r = self.anagrams2.get_anagrams("grumman")
    self.assertEqual(r, ['grumman'])

    _, r = self.anagrams2.get_anagrams("grunt")
    self.assertEqual(r, ['grunt'])

    _, r = self.anagrams2.get_anagrams("grunted")
    self.assertEqual(r, ['grunted'])

    _, r = self.anagrams2.get_anagrams("grunting")
    self.assertEqual(r, ['grunting'])

    _, r = self.anagrams2.get_anagrams("grunts")
    self.assertEqual(r, ['grunts', 'strung'])

    _, r = self.anagrams2.get_anagrams("grusky")
    self.assertEqual(r, ['grusky'])

    _, r = self.anagrams2.get_anagrams("gruyere")
    self.assertEqual(r, ['gruyere'])

    _, r = self.anagrams2.get_anagrams("guadalupe")
    self.assertEqual(r, ['guadalupe'])

    _, r = self.anagrams2.get_anagrams("guam")
    self.assertEqual(r, ['guam'])

    _, r = self.anagrams2.get_anagrams("guano")
    self.assertEqual(r, ['guano'])

    _, r = self.anagrams2.get_anagrams("guarantee")
    self.assertEqual(r, ['guarantee'])

    _, r = self.anagrams2.get_anagrams("guaranteed")
    self.assertEqual(r, ['guaranteed'])

    _, r = self.anagrams2.get_anagrams("guaranteeing")
    self.assertEqual(r, ['guaranteeing'])

    _, r = self.anagrams2.get_anagrams("guaranteer")
    self.assertEqual(r, ['guaranteer'])

    _, r = self.anagrams2.get_anagrams("guaranteers")
    self.assertEqual(r, ['guaranteers'])

    _, r = self.anagrams2.get_anagrams("guarantees")
    self.assertEqual(r, ['guarantees'])

    _, r = self.anagrams2.get_anagrams("guaranty")
    self.assertEqual(r, ['guaranty'])

    _, r = self.anagrams2.get_anagrams("guard")
    self.assertEqual(r, ['guard'])

    _, r = self.anagrams2.get_anagrams("guarded")
    self.assertEqual(r, ['guarded'])

    _, r = self.anagrams2.get_anagrams("guardedly")
    self.assertEqual(r, ['guardedly'])

    _, r = self.anagrams2.get_anagrams("guardhouse")
    self.assertEqual(r, ['guardhouse'])

    _, r = self.anagrams2.get_anagrams("guardia")
    self.assertEqual(r, ['guardia'])

    _, r = self.anagrams2.get_anagrams("guardian")
    self.assertEqual(r, ['guardian'])

    _, r = self.anagrams2.get_anagrams("guardians")
    self.assertEqual(r, ['guardians'])

    _, r = self.anagrams2.get_anagrams("guardianship")
    self.assertEqual(r, ['guardianship'])

    _, r = self.anagrams2.get_anagrams("guarding")
    self.assertEqual(r, ['guarding'])

    _, r = self.anagrams2.get_anagrams("guards")
    self.assertEqual(r, ['guards'])

    _, r = self.anagrams2.get_anagrams("guatemala")
    self.assertEqual(r, ['guatemala'])

    _, r = self.anagrams2.get_anagrams("guatemalan")
    self.assertEqual(r, ['guatemalan'])

    _, r = self.anagrams2.get_anagrams("gubernatorial")
    self.assertEqual(r, ['gubernatorial'])

    _, r = self.anagrams2.get_anagrams("guelph")
    self.assertEqual(r, ['guelph'])

    _, r = self.anagrams2.get_anagrams("guenther")
    self.assertEqual(r, ['guenther'])

    _, r = self.anagrams2.get_anagrams("guerrilla")
    self.assertEqual(r, ['guerrilla'])

    _, r = self.anagrams2.get_anagrams("guerrillas")
    self.assertEqual(r, ['guerrillas'])

    _, r = self.anagrams2.get_anagrams("guess")
    self.assertEqual(r, ['guess'])

    _, r = self.anagrams2.get_anagrams("guessed")
    self.assertEqual(r, ['guessed'])

    _, r = self.anagrams2.get_anagrams("guesses")
    self.assertEqual(r, ['guesses'])

    _, r = self.anagrams2.get_anagrams("guessing")
    self.assertEqual(r, ['guessing'])

    _, r = self.anagrams2.get_anagrams("guesswork")
    self.assertEqual(r, ['guesswork'])

    _, r = self.anagrams2.get_anagrams("guest")
    self.assertEqual(r, ['guest'])

    _, r = self.anagrams2.get_anagrams("guests")
    self.assertEqual(r, ['guests'])

    _, r = self.anagrams2.get_anagrams("guggenheim")
    self.assertEqual(r, ['guggenheim'])

    _, r = self.anagrams2.get_anagrams("guhleman")
    self.assertEqual(r, ['guhleman'])

    _, r = self.anagrams2.get_anagrams("guiana")
    self.assertEqual(r, ['guiana'])

    _, r = self.anagrams2.get_anagrams("guidance")
    self.assertEqual(r, ['guidance'])

    _, r = self.anagrams2.get_anagrams("guide")
    self.assertEqual(r, ['guide'])

    _, r = self.anagrams2.get_anagrams("guidebook")
    self.assertEqual(r, ['guidebook'])

    _, r = self.anagrams2.get_anagrams("guidebooks")
    self.assertEqual(r, ['guidebooks'])

    _, r = self.anagrams2.get_anagrams("guided")
    self.assertEqual(r, ['guided'])

    _, r = self.anagrams2.get_anagrams("guideline")
    self.assertEqual(r, ['guideline'])

    _, r = self.anagrams2.get_anagrams("guidelines")
    self.assertEqual(r, ['guidelines'])

    _, r = self.anagrams2.get_anagrams("guides")
    self.assertEqual(r, ['guides'])

    _, r = self.anagrams2.get_anagrams("guiding")
    self.assertEqual(r, ['guiding'])

    _, r = self.anagrams2.get_anagrams("guild")
    self.assertEqual(r, ['guild'])

    _, r = self.anagrams2.get_anagrams("guilder")
    self.assertEqual(r, ['guilder'])

    _, r = self.anagrams2.get_anagrams("guilders")
    self.assertEqual(r, ['guilders'])

    _, r = self.anagrams2.get_anagrams("guile")
    self.assertEqual(r, ['guile'])

    _, r = self.anagrams2.get_anagrams("guilford")
    self.assertEqual(r, ['guilford'])

    _, r = self.anagrams2.get_anagrams("guilt")
    self.assertEqual(r, ['guilt'])

    _, r = self.anagrams2.get_anagrams("guiltier")
    self.assertEqual(r, ['guiltier'])

    _, r = self.anagrams2.get_anagrams("guiltiest")
    self.assertEqual(r, ['guiltiest'])

    _, r = self.anagrams2.get_anagrams("guiltily")
    self.assertEqual(r, ['guiltily'])

    _, r = self.anagrams2.get_anagrams("guiltiness")
    self.assertEqual(r, ['guiltiness'])

    _, r = self.anagrams2.get_anagrams("guiltless")
    self.assertEqual(r, ['guiltless'])

    _, r = self.anagrams2.get_anagrams("guiltlessly")
    self.assertEqual(r, ['guiltlessly'])

    _, r = self.anagrams2.get_anagrams("guilty")
    self.assertEqual(r, ['guilty'])

    _, r = self.anagrams2.get_anagrams("guinea")
    self.assertEqual(r, ['guinea'])

    _, r = self.anagrams2.get_anagrams("guinevere")
    self.assertEqual(r, ['guinevere'])

    _, r = self.anagrams2.get_anagrams("guise")
    self.assertEqual(r, ['guise'])

    _, r = self.anagrams2.get_anagrams("guises")
    self.assertEqual(r, ['guises'])

    _, r = self.anagrams2.get_anagrams("guitar")
    self.assertEqual(r, ['guitar'])

    _, r = self.anagrams2.get_anagrams("guitars")
    self.assertEqual(r, ['guitars'])

    _, r = self.anagrams2.get_anagrams("gujarat")
    self.assertEqual(r, ['gujarat'])

    _, r = self.anagrams2.get_anagrams("gujarati")
    self.assertEqual(r, ['gujarati'])

    _, r = self.anagrams2.get_anagrams("gulch")
    self.assertEqual(r, ['gulch'])

    _, r = self.anagrams2.get_anagrams("gulches")
    self.assertEqual(r, ['gulches'])

    _, r = self.anagrams2.get_anagrams("gulf")
    self.assertEqual(r, ['gulf'])

    _, r = self.anagrams2.get_anagrams("gulfs")
    self.assertEqual(r, ['gulfs'])

    _, r = self.anagrams2.get_anagrams("gull")
    self.assertEqual(r, ['gull'])

    _, r = self.anagrams2.get_anagrams("gullah")
    self.assertEqual(r, ['gullah'])

    _, r = self.anagrams2.get_anagrams("gulled")
    self.assertEqual(r, ['gulled'])

    _, r = self.anagrams2.get_anagrams("gullies")
    self.assertEqual(r, ['gullies'])

    _, r = self.anagrams2.get_anagrams("gulling")
    self.assertEqual(r, ['gulling'])

    _, r = self.anagrams2.get_anagrams("gulls")
    self.assertEqual(r, ['gulls'])

    _, r = self.anagrams2.get_anagrams("gully")
    self.assertEqual(r, ['gully'])

    _, r = self.anagrams2.get_anagrams("gulp")
    self.assertEqual(r, ['gulp', 'plug'])

    _, r = self.anagrams2.get_anagrams("gulped")
    self.assertEqual(r, ['gulped'])

    _, r = self.anagrams2.get_anagrams("gulps")
    self.assertEqual(r, ['gulps', 'plugs'])

    _, r = self.anagrams2.get_anagrams("gum")
    self.assertEqual(r, ['gum', 'mug'])

    _, r = self.anagrams2.get_anagrams("gumming")
    self.assertEqual(r, ['gumming'])

    _, r = self.anagrams2.get_anagrams("gumption")
    self.assertEqual(r, ['gumption'])

    _, r = self.anagrams2.get_anagrams("gums")
    self.assertEqual(r, ['gums', 'mugs', 'smug'])

    _, r = self.anagrams2.get_anagrams("gun")
    self.assertEqual(r, ['gnu', 'gun'])

    _, r = self.anagrams2.get_anagrams("gunderson")
    self.assertEqual(r, ['gunderson'])

    _, r = self.anagrams2.get_anagrams("gunfire")
    self.assertEqual(r, ['gunfire'])

    _, r = self.anagrams2.get_anagrams("gunman")
    self.assertEqual(r, ['gunman'])

    _, r = self.anagrams2.get_anagrams("gunmen")
    self.assertEqual(r, ['gunmen'])

    _, r = self.anagrams2.get_anagrams("gunnar")
    self.assertEqual(r, ['gunnar'])

    _, r = self.anagrams2.get_anagrams("gunned")
    self.assertEqual(r, ['gunned'])

    _, r = self.anagrams2.get_anagrams("gunner")
    self.assertEqual(r, ['gunner'])

    _, r = self.anagrams2.get_anagrams("gunners")
    self.assertEqual(r, ['gunners'])

    _, r = self.anagrams2.get_anagrams("gunnery")
    self.assertEqual(r, ['gunnery'])

    _, r = self.anagrams2.get_anagrams("gunning")
    self.assertEqual(r, ['gunning'])

    _, r = self.anagrams2.get_anagrams("gunny")
    self.assertEqual(r, ['gunny'])

    _, r = self.anagrams2.get_anagrams("gunplay")
    self.assertEqual(r, ['gunplay'])

    _, r = self.anagrams2.get_anagrams("gunpowder")
    self.assertEqual(r, ['gunpowder'])

    _, r = self.anagrams2.get_anagrams("guns")
    self.assertEqual(r, ['guns', 'snug', 'sung'])

    _, r = self.anagrams2.get_anagrams("gunshot")
    self.assertEqual(r, ['gunshot', 'shotgun'])

    _, r = self.anagrams2.get_anagrams("gunther")
    self.assertEqual(r, ['gunther'])

    _, r = self.anagrams2.get_anagrams("gurgle")
    self.assertEqual(r, ['gurgle'])

    _, r = self.anagrams2.get_anagrams("gurkha")
    self.assertEqual(r, ['gurkha'])

    _, r = self.anagrams2.get_anagrams("guru")
    self.assertEqual(r, ['guru'])

    _, r = self.anagrams2.get_anagrams("gus")
    self.assertEqual(r, ['gus'])

    _, r = self.anagrams2.get_anagrams("gush")
    self.assertEqual(r, ['gush'])

    _, r = self.anagrams2.get_anagrams("gushed")
    self.assertEqual(r, ['gushed'])

    _, r = self.anagrams2.get_anagrams("gusher")
    self.assertEqual(r, ['gusher'])

    _, r = self.anagrams2.get_anagrams("gushes")
    self.assertEqual(r, ['gushes'])

    _, r = self.anagrams2.get_anagrams("gushing")
    self.assertEqual(r, ['gushing', 'huggins'])

    _, r = self.anagrams2.get_anagrams("gust")
    self.assertEqual(r, ['gust', 'guts', 'tugs'])

    _, r = self.anagrams2.get_anagrams("gustafson")
    self.assertEqual(r, ['gustafson'])

    _, r = self.anagrams2.get_anagrams("gustav")
    self.assertEqual(r, ['gustav'])

    _, r = self.anagrams2.get_anagrams("gustave")
    self.assertEqual(r, ['gustave', 'vaguest'])

    _, r = self.anagrams2.get_anagrams("gustavus")
    self.assertEqual(r, ['gustavus'])

    _, r = self.anagrams2.get_anagrams("gusto")
    self.assertEqual(r, ['gusto'])

    _, r = self.anagrams2.get_anagrams("gusts")
    self.assertEqual(r, ['gusts'])

    _, r = self.anagrams2.get_anagrams("gusty")
    self.assertEqual(r, ['gusty', 'gutsy'])

    _, r = self.anagrams2.get_anagrams("gut")
    self.assertEqual(r, ['gut', 'tug'])

    _, r = self.anagrams2.get_anagrams("gutenberg")
    self.assertEqual(r, ['gutenberg'])

    _, r = self.anagrams2.get_anagrams("guthrie")
    self.assertEqual(r, ['guthrie'])

    _, r = self.anagrams2.get_anagrams("guts")
    self.assertEqual(r, ['gust', 'guts', 'tugs'])

    _, r = self.anagrams2.get_anagrams("gutsy")
    self.assertEqual(r, ['gusty', 'gutsy'])

    _, r = self.anagrams2.get_anagrams("gutter")
    self.assertEqual(r, ['gutter'])

    _, r = self.anagrams2.get_anagrams("guttered")
    self.assertEqual(r, ['guttered'])

    _, r = self.anagrams2.get_anagrams("gutters")
    self.assertEqual(r, ['gutters'])

    _, r = self.anagrams2.get_anagrams("gutting")
    self.assertEqual(r, ['gutting'])

    _, r = self.anagrams2.get_anagrams("guttural")
    self.assertEqual(r, ['guttural'])

    _, r = self.anagrams2.get_anagrams("guy")
    self.assertEqual(r, ['guy'])

    _, r = self.anagrams2.get_anagrams("guyana")
    self.assertEqual(r, ['guyana'])

    _, r = self.anagrams2.get_anagrams("guyed")
    self.assertEqual(r, ['guyed'])

    _, r = self.anagrams2.get_anagrams("guyer")
    self.assertEqual(r, ['guyer'])

    _, r = self.anagrams2.get_anagrams("guyers")
    self.assertEqual(r, ['guyers'])

    _, r = self.anagrams2.get_anagrams("guying")
    self.assertEqual(r, ['guying'])

    _, r = self.anagrams2.get_anagrams("guys")
    self.assertEqual(r, ['guys'])

    _, r = self.anagrams2.get_anagrams("gwen")
    self.assertEqual(r, ['gwen'])

    _, r = self.anagrams2.get_anagrams("gwyn")
    self.assertEqual(r, ['gwyn'])

    _, r = self.anagrams2.get_anagrams("gymnasium")
    self.assertEqual(r, ['gymnasium'])

    _, r = self.anagrams2.get_anagrams("gymnasiums")
    self.assertEqual(r, ['gymnasiums'])

    _, r = self.anagrams2.get_anagrams("gymnast")
    self.assertEqual(r, ['gymnast'])

    _, r = self.anagrams2.get_anagrams("gymnastic")
    self.assertEqual(r, ['gymnastic'])

    _, r = self.anagrams2.get_anagrams("gymnastics")
    self.assertEqual(r, ['gymnastics'])

    _, r = self.anagrams2.get_anagrams("gymnasts")
    self.assertEqual(r, ['gymnasts'])

    _, r = self.anagrams2.get_anagrams("gypsies")
    self.assertEqual(r, ['gypsies'])

    _, r = self.anagrams2.get_anagrams("gypsy")
    self.assertEqual(r, ['gypsy'])

    _, r = self.anagrams2.get_anagrams("gyro")
    self.assertEqual(r, ['gory', 'gyro', 'orgy'])

    _, r = self.anagrams2.get_anagrams("gyrocompass")
    self.assertEqual(r, ['gyrocompass'])

    _, r = self.anagrams2.get_anagrams("gyroscope")
    self.assertEqual(r, ['gyroscope'])

    _, r = self.anagrams2.get_anagrams("gyroscopes")
    self.assertEqual(r, ['gyroscopes'])

    _, r = self.anagrams2.get_anagrams("ha")
    self.assertEqual(r, ['ah', 'ha'])

    _, r = self.anagrams2.get_anagrams("haag")
    self.assertEqual(r, ['haag'])

    _, r = self.anagrams2.get_anagrams("haas")
    self.assertEqual(r, ['haas'])

    _, r = self.anagrams2.get_anagrams("habeas")
    self.assertEqual(r, ['habeas'])

    _, r = self.anagrams2.get_anagrams("haberman")
    self.assertEqual(r, ['haberman'])

    _, r = self.anagrams2.get_anagrams("habib")
    self.assertEqual(r, ['habib'])

    _, r = self.anagrams2.get_anagrams("habit")
    self.assertEqual(r, ['habit'])

    _, r = self.anagrams2.get_anagrams("habitat")
    self.assertEqual(r, ['habitat'])

    _, r = self.anagrams2.get_anagrams("habitation")
    self.assertEqual(r, ['habitation'])

    _, r = self.anagrams2.get_anagrams("habitations")
    self.assertEqual(r, ['habitations'])

    _, r = self.anagrams2.get_anagrams("habitats")
    self.assertEqual(r, ['habitats'])

    _, r = self.anagrams2.get_anagrams("habits")
    self.assertEqual(r, ['habits'])

    _, r = self.anagrams2.get_anagrams("habitual")
    self.assertEqual(r, ['habitual'])

    _, r = self.anagrams2.get_anagrams("habitually")
    self.assertEqual(r, ['habitually'])

    _, r = self.anagrams2.get_anagrams("habitualness")
    self.assertEqual(r, ['habitualness'])

    _, r = self.anagrams2.get_anagrams("hack")
    self.assertEqual(r, ['hack'])

    _, r = self.anagrams2.get_anagrams("hacked")
    self.assertEqual(r, ['hacked'])

    _, r = self.anagrams2.get_anagrams("hacker")
    self.assertEqual(r, ['hacker'])

    _, r = self.anagrams2.get_anagrams("hackers")
    self.assertEqual(r, ['hackers'])

    _, r = self.anagrams2.get_anagrams("hackett")
    self.assertEqual(r, ['hackett'])

    _, r = self.anagrams2.get_anagrams("hacking")
    self.assertEqual(r, ['hacking'])

    _, r = self.anagrams2.get_anagrams("hackneyed")
    self.assertEqual(r, ['hackneyed'])

    _, r = self.anagrams2.get_anagrams("hacks")
    self.assertEqual(r, ['hacks', 'shack'])

    _, r = self.anagrams2.get_anagrams("hacksaw")
    self.assertEqual(r, ['hacksaw'])

    _, r = self.anagrams2.get_anagrams("had")
    self.assertEqual(r, ['had'])

    _, r = self.anagrams2.get_anagrams("hadamard")
    self.assertEqual(r, ['hadamard'])

    _, r = self.anagrams2.get_anagrams("haddad")
    self.assertEqual(r, ['haddad'])

    _, r = self.anagrams2.get_anagrams("haddock")
    self.assertEqual(r, ['haddock'])

    _, r = self.anagrams2.get_anagrams("hades")
    self.assertEqual(r, ['hades', 'heads', 'shade'])

    _, r = self.anagrams2.get_anagrams("hadley")
    self.assertEqual(r, ['hadley'])

    _, r = self.anagrams2.get_anagrams("hadrian")
    self.assertEqual(r, ['hadrian'])

    _, r = self.anagrams2.get_anagrams("hafiz")
    self.assertEqual(r, ['hafiz'])

    _, r = self.anagrams2.get_anagrams("hag")
    self.assertEqual(r, ['hag'])

    _, r = self.anagrams2.get_anagrams("hagen")
    self.assertEqual(r, ['hagen'])

    _, r = self.anagrams2.get_anagrams("hager")
    self.assertEqual(r, ['hager'])

    _, r = self.anagrams2.get_anagrams("haggard")
    self.assertEqual(r, ['haggard'])

    _, r = self.anagrams2.get_anagrams("haggardly")
    self.assertEqual(r, ['haggardly'])

    _, r = self.anagrams2.get_anagrams("haggle")
    self.assertEqual(r, ['haggle'])

    _, r = self.anagrams2.get_anagrams("hagstrom")
    self.assertEqual(r, ['hagstrom'])

    _, r = self.anagrams2.get_anagrams("hague")
    self.assertEqual(r, ['hague'])

    _, r = self.anagrams2.get_anagrams("hahn")
    self.assertEqual(r, ['hahn'])

    _, r = self.anagrams2.get_anagrams("haifa")
    self.assertEqual(r, ['haifa'])

    _, r = self.anagrams2.get_anagrams("hail")
    self.assertEqual(r, ['hail'])

    _, r = self.anagrams2.get_anagrams("hailed")
    self.assertEqual(r, ['hailed'])

    _, r = self.anagrams2.get_anagrams("hailing")
    self.assertEqual(r, ['hailing'])

    _, r = self.anagrams2.get_anagrams("hails")
    self.assertEqual(r, ['hails'])

    _, r = self.anagrams2.get_anagrams("hailstone")
    self.assertEqual(r, ['hailstone'])

    _, r = self.anagrams2.get_anagrams("hailstorm")
    self.assertEqual(r, ['hailstorm'])

    _, r = self.anagrams2.get_anagrams("haines")
    self.assertEqual(r, ['haines'])

    _, r = self.anagrams2.get_anagrams("hair")
    self.assertEqual(r, ['hair'])

    _, r = self.anagrams2.get_anagrams("haircut")
    self.assertEqual(r, ['haircut'])

    _, r = self.anagrams2.get_anagrams("haircuts")
    self.assertEqual(r, ['haircuts'])

    _, r = self.anagrams2.get_anagrams("hairier")
    self.assertEqual(r, ['hairier'])

    _, r = self.anagrams2.get_anagrams("hairiness")
    self.assertEqual(r, ['hairiness'])

    _, r = self.anagrams2.get_anagrams("hairless")
    self.assertEqual(r, ['hairless'])

    _, r = self.anagrams2.get_anagrams("hairpin")
    self.assertEqual(r, ['hairpin'])

    _, r = self.anagrams2.get_anagrams("hairs")
    self.assertEqual(r, ['hairs', 'shari'])

    _, r = self.anagrams2.get_anagrams("hairy")
    self.assertEqual(r, ['hairy'])

    _, r = self.anagrams2.get_anagrams("haiti")
    self.assertEqual(r, ['haiti'])

    _, r = self.anagrams2.get_anagrams("haitian")
    self.assertEqual(r, ['haitian'])

    _, r = self.anagrams2.get_anagrams("hal")
    self.assertEqual(r, ['hal'])

    _, r = self.anagrams2.get_anagrams("halcyon")
    self.assertEqual(r, ['halcyon'])

    _, r = self.anagrams2.get_anagrams("hale")
    self.assertEqual(r, ['hale', 'heal'])

    _, r = self.anagrams2.get_anagrams("haler")
    self.assertEqual(r, ['haler'])

    _, r = self.anagrams2.get_anagrams("haley")
    self.assertEqual(r, ['haley', 'healy'])

    _, r = self.anagrams2.get_anagrams("half")
    self.assertEqual(r, ['half'])

    _, r = self.anagrams2.get_anagrams("halfhearted")
    self.assertEqual(r, ['halfhearted'])

    _, r = self.anagrams2.get_anagrams("halfway")
    self.assertEqual(r, ['halfway'])

    _, r = self.anagrams2.get_anagrams("halifax")
    self.assertEqual(r, ['halifax'])

    _, r = self.anagrams2.get_anagrams("hall")
    self.assertEqual(r, ['hall'])

    _, r = self.anagrams2.get_anagrams("halley")
    self.assertEqual(r, ['halley'])

    _, r = self.anagrams2.get_anagrams("hallinan")
    self.assertEqual(r, ['hallinan'])

    _, r = self.anagrams2.get_anagrams("hallmark")
    self.assertEqual(r, ['hallmark'])

    _, r = self.anagrams2.get_anagrams("hallmarks")
    self.assertEqual(r, ['hallmarks'])

    _, r = self.anagrams2.get_anagrams("hallow")
    self.assertEqual(r, ['hallow'])

    _, r = self.anagrams2.get_anagrams("hallowed")
    self.assertEqual(r, ['hallowed'])

    _, r = self.anagrams2.get_anagrams("halloween")
    self.assertEqual(r, ['halloween'])

    _, r = self.anagrams2.get_anagrams("halls")
    self.assertEqual(r, ['halls', 'shall'])

    _, r = self.anagrams2.get_anagrams("hallucinate")
    self.assertEqual(r, ['hallucinate'])

    _, r = self.anagrams2.get_anagrams("hallway")
    self.assertEqual(r, ['hallway'])

    _, r = self.anagrams2.get_anagrams("hallways")
    self.assertEqual(r, ['hallways'])

    _, r = self.anagrams2.get_anagrams("halogen")
    self.assertEqual(r, ['halogen'])

    _, r = self.anagrams2.get_anagrams("halpern")
    self.assertEqual(r, ['halpern'])

    _, r = self.anagrams2.get_anagrams("halsey")
    self.assertEqual(r, ['ashley', 'halsey'])

    _, r = self.anagrams2.get_anagrams("halstead")
    self.assertEqual(r, ['halstead'])

    _, r = self.anagrams2.get_anagrams("halt")
    self.assertEqual(r, ['halt'])

    _, r = self.anagrams2.get_anagrams("halted")
    self.assertEqual(r, ['halted'])

    _, r = self.anagrams2.get_anagrams("halter")
    self.assertEqual(r, ['halter'])

    _, r = self.anagrams2.get_anagrams("halters")
    self.assertEqual(r, ['halters'])

    _, r = self.anagrams2.get_anagrams("halting")
    self.assertEqual(r, ['halting'])

    _, r = self.anagrams2.get_anagrams("haltingly")
    self.assertEqual(r, ['haltingly'])

    _, r = self.anagrams2.get_anagrams("halts")
    self.assertEqual(r, ['halts', 'stahl'])

    _, r = self.anagrams2.get_anagrams("halve")
    self.assertEqual(r, ['halve'])

    _, r = self.anagrams2.get_anagrams("halved")
    self.assertEqual(r, ['halved'])

    _, r = self.anagrams2.get_anagrams("halvers")
    self.assertEqual(r, ['halvers'])

    _, r = self.anagrams2.get_anagrams("halverson")
    self.assertEqual(r, ['halverson'])

    _, r = self.anagrams2.get_anagrams("halves")
    self.assertEqual(r, ['halves'])

    _, r = self.anagrams2.get_anagrams("halving")
    self.assertEqual(r, ['halving'])

    _, r = self.anagrams2.get_anagrams("ham")
    self.assertEqual(r, ['ham'])

    _, r = self.anagrams2.get_anagrams("hamal")
    self.assertEqual(r, ['hamal'])

    _, r = self.anagrams2.get_anagrams("hamburg")
    self.assertEqual(r, ['hamburg'])

    _, r = self.anagrams2.get_anagrams("hamburger")
    self.assertEqual(r, ['hamburger'])

    _, r = self.anagrams2.get_anagrams("hamburgers")
    self.assertEqual(r, ['hamburgers'])

    _, r = self.anagrams2.get_anagrams("hamey")
    self.assertEqual(r, ['hamey'])

    _, r = self.anagrams2.get_anagrams("hamilton")
    self.assertEqual(r, ['hamilton'])

    _, r = self.anagrams2.get_anagrams("hamiltonian")
    self.assertEqual(r, ['hamiltonian'])

    _, r = self.anagrams2.get_anagrams("hamiltonians")
    self.assertEqual(r, ['hamiltonians'])

    _, r = self.anagrams2.get_anagrams("hamlet")
    self.assertEqual(r, ['hamlet', 'thelma'])

    _, r = self.anagrams2.get_anagrams("hamlets")
    self.assertEqual(r, ['hamlets'])

    _, r = self.anagrams2.get_anagrams("hamlin")
    self.assertEqual(r, ['hamlin'])

    _, r = self.anagrams2.get_anagrams("hammer")
    self.assertEqual(r, ['hammer'])

    _, r = self.anagrams2.get_anagrams("hammered")
    self.assertEqual(r, ['hammered'])

    _, r = self.anagrams2.get_anagrams("hammering")
    self.assertEqual(r, ['hammering'])

    _, r = self.anagrams2.get_anagrams("hammers")
    self.assertEqual(r, ['hammers'])

    _, r = self.anagrams2.get_anagrams("hammett")
    self.assertEqual(r, ['hammett'])

    _, r = self.anagrams2.get_anagrams("hamming")
    self.assertEqual(r, ['hamming'])

    _, r = self.anagrams2.get_anagrams("hammock")
    self.assertEqual(r, ['hammock'])

    _, r = self.anagrams2.get_anagrams("hammocks")
    self.assertEqual(r, ['hammocks'])

    _, r = self.anagrams2.get_anagrams("hammond")
    self.assertEqual(r, ['hammond'])

    _, r = self.anagrams2.get_anagrams("hamper")
    self.assertEqual(r, ['hamper'])

    _, r = self.anagrams2.get_anagrams("hampered")
    self.assertEqual(r, ['hampered'])

    _, r = self.anagrams2.get_anagrams("hampers")
    self.assertEqual(r, ['hampers'])

    _, r = self.anagrams2.get_anagrams("hampshire")
    self.assertEqual(r, ['hampshire'])

    _, r = self.anagrams2.get_anagrams("hampton")
    self.assertEqual(r, ['hampton', 'phantom'])

    _, r = self.anagrams2.get_anagrams("hams")
    self.assertEqual(r, ['hams', 'mash', 'sham'])

    _, r = self.anagrams2.get_anagrams("hamster")
    self.assertEqual(r, ['amherst', 'hamster'])

    _, r = self.anagrams2.get_anagrams("han")
    self.assertEqual(r, ['han'])

    _, r = self.anagrams2.get_anagrams("hancock")
    self.assertEqual(r, ['hancock'])

    _, r = self.anagrams2.get_anagrams("hand")
    self.assertEqual(r, ['hand'])

    _, r = self.anagrams2.get_anagrams("handbag")
    self.assertEqual(r, ['handbag'])

    _, r = self.anagrams2.get_anagrams("handbags")
    self.assertEqual(r, ['handbags'])

    _, r = self.anagrams2.get_anagrams("handbook")
    self.assertEqual(r, ['handbook'])

    _, r = self.anagrams2.get_anagrams("handbooks")
    self.assertEqual(r, ['handbooks'])

    _, r = self.anagrams2.get_anagrams("handcuff")
    self.assertEqual(r, ['handcuff'])

    _, r = self.anagrams2.get_anagrams("handcuffed")
    self.assertEqual(r, ['handcuffed'])

    _, r = self.anagrams2.get_anagrams("handcuffing")
    self.assertEqual(r, ['handcuffing'])

    _, r = self.anagrams2.get_anagrams("handcuffs")
    self.assertEqual(r, ['handcuffs'])

    _, r = self.anagrams2.get_anagrams("handed")
    self.assertEqual(r, ['handed'])

    _, r = self.anagrams2.get_anagrams("handel")
    self.assertEqual(r, ['handel', 'handle'])

    _, r = self.anagrams2.get_anagrams("handful")
    self.assertEqual(r, ['handful'])

    _, r = self.anagrams2.get_anagrams("handfuls")
    self.assertEqual(r, ['handfuls'])

    _, r = self.anagrams2.get_anagrams("handgun")
    self.assertEqual(r, ['handgun'])

    _, r = self.anagrams2.get_anagrams("handicap")
    self.assertEqual(r, ['handicap'])

    _, r = self.anagrams2.get_anagrams("handicapped")
    self.assertEqual(r, ['handicapped'])

    _, r = self.anagrams2.get_anagrams("handicaps")
    self.assertEqual(r, ['handicaps'])

    _, r = self.anagrams2.get_anagrams("handier")
    self.assertEqual(r, ['handier'])

    _, r = self.anagrams2.get_anagrams("handiest")
    self.assertEqual(r, ['handiest'])

    _, r = self.anagrams2.get_anagrams("handily")
    self.assertEqual(r, ['handily'])

    _, r = self.anagrams2.get_anagrams("handiness")
    self.assertEqual(r, ['handiness'])

    _, r = self.anagrams2.get_anagrams("handing")
    self.assertEqual(r, ['handing'])

    _, r = self.anagrams2.get_anagrams("handiwork")
    self.assertEqual(r, ['handiwork'])

    _, r = self.anagrams2.get_anagrams("handkerchief")
    self.assertEqual(r, ['handkerchief'])

    _, r = self.anagrams2.get_anagrams("handkerchiefs")
    self.assertEqual(r, ['handkerchiefs'])

    _, r = self.anagrams2.get_anagrams("handle")
    self.assertEqual(r, ['handel', 'handle'])

    _, r = self.anagrams2.get_anagrams("handled")
    self.assertEqual(r, ['handled'])

    _, r = self.anagrams2.get_anagrams("handler")
    self.assertEqual(r, ['handler'])

    _, r = self.anagrams2.get_anagrams("handlers")
    self.assertEqual(r, ['handlers'])

    _, r = self.anagrams2.get_anagrams("handles")
    self.assertEqual(r, ['handles'])

    _, r = self.anagrams2.get_anagrams("handling")
    self.assertEqual(r, ['handling'])

    _, r = self.anagrams2.get_anagrams("handmaid")
    self.assertEqual(r, ['handmaid'])

    _, r = self.anagrams2.get_anagrams("handout")
    self.assertEqual(r, ['handout'])

    _, r = self.anagrams2.get_anagrams("hands")
    self.assertEqual(r, ['hands'])

    _, r = self.anagrams2.get_anagrams("handshake")
    self.assertEqual(r, ['handshake'])

    _, r = self.anagrams2.get_anagrams("handshakes")
    self.assertEqual(r, ['handshakes'])

    _, r = self.anagrams2.get_anagrams("handshaking")
    self.assertEqual(r, ['handshaking'])

    _, r = self.anagrams2.get_anagrams("handsome")
    self.assertEqual(r, ['handsome'])

    _, r = self.anagrams2.get_anagrams("handsomely")
    self.assertEqual(r, ['handsomely'])

    _, r = self.anagrams2.get_anagrams("handsomeness")
    self.assertEqual(r, ['handsomeness'])

    _, r = self.anagrams2.get_anagrams("handsomer")
    self.assertEqual(r, ['handsomer'])

    _, r = self.anagrams2.get_anagrams("handsomest")
    self.assertEqual(r, ['handsomest'])

    _, r = self.anagrams2.get_anagrams("handwriting")
    self.assertEqual(r, ['handwriting'])

    _, r = self.anagrams2.get_anagrams("handwritten")
    self.assertEqual(r, ['handwritten'])

    _, r = self.anagrams2.get_anagrams("handy")
    self.assertEqual(r, ['handy', 'haydn'])

    _, r = self.anagrams2.get_anagrams("haney")
    self.assertEqual(r, ['haney', 'hyena'])

    _, r = self.anagrams2.get_anagrams("hanford")
    self.assertEqual(r, ['hanford'])

    _, r = self.anagrams2.get_anagrams("hang")
    self.assertEqual(r, ['hang'])

    _, r = self.anagrams2.get_anagrams("hangar")
    self.assertEqual(r, ['hangar'])

    _, r = self.anagrams2.get_anagrams("hangars")
    self.assertEqual(r, ['hangars'])

    _, r = self.anagrams2.get_anagrams("hanged")
    self.assertEqual(r, ['hanged'])

    _, r = self.anagrams2.get_anagrams("hanger")
    self.assertEqual(r, ['hanger'])

    _, r = self.anagrams2.get_anagrams("hangers")
    self.assertEqual(r, ['hangers'])

    _, r = self.anagrams2.get_anagrams("hanging")
    self.assertEqual(r, ['hanging'])

    _, r = self.anagrams2.get_anagrams("hangman")
    self.assertEqual(r, ['hangman'])

    _, r = self.anagrams2.get_anagrams("hangmen")
    self.assertEqual(r, ['hangmen'])

    _, r = self.anagrams2.get_anagrams("hangout")
    self.assertEqual(r, ['hangout'])

    _, r = self.anagrams2.get_anagrams("hangover")
    self.assertEqual(r, ['hangover', 'overhang'])

    _, r = self.anagrams2.get_anagrams("hangovers")
    self.assertEqual(r, ['hangovers', 'overhangs'])

    _, r = self.anagrams2.get_anagrams("hangs")
    self.assertEqual(r, ['gnash', 'hangs'])

    _, r = self.anagrams2.get_anagrams("hankel")
    self.assertEqual(r, ['hankel'])

    _, r = self.anagrams2.get_anagrams("hanley")
    self.assertEqual(r, ['hanley'])

    _, r = self.anagrams2.get_anagrams("hanlon")
    self.assertEqual(r, ['hanlon'])

    _, r = self.anagrams2.get_anagrams("hanna")
    self.assertEqual(r, ['hanna'])

    _, r = self.anagrams2.get_anagrams("hannah")
    self.assertEqual(r, ['hannah'])

    _, r = self.anagrams2.get_anagrams("hannibal")
    self.assertEqual(r, ['hannibal'])

    _, r = self.anagrams2.get_anagrams("hanoi")
    self.assertEqual(r, ['hanoi'])

    _, r = self.anagrams2.get_anagrams("hanover")
    self.assertEqual(r, ['hanover'])

    _, r = self.anagrams2.get_anagrams("hanoverian")
    self.assertEqual(r, ['hanoverian'])

    _, r = self.anagrams2.get_anagrams("hanoverianize")
    self.assertEqual(r, ['hanoverianize'])

    _, r = self.anagrams2.get_anagrams("hanoverianizes")
    self.assertEqual(r, ['hanoverianizes'])

    _, r = self.anagrams2.get_anagrams("hanoverize")
    self.assertEqual(r, ['hanoverize'])

    _, r = self.anagrams2.get_anagrams("hanoverizes")
    self.assertEqual(r, ['hanoverizes'])

    _, r = self.anagrams2.get_anagrams("hans")
    self.assertEqual(r, ['hans', 'nash'])

    _, r = self.anagrams2.get_anagrams("hansel")
    self.assertEqual(r, ['hansel'])

    _, r = self.anagrams2.get_anagrams("hansen")
    self.assertEqual(r, ['hansen'])

    _, r = self.anagrams2.get_anagrams("hanson")
    self.assertEqual(r, ['hanson'])

    _, r = self.anagrams2.get_anagrams("hanukkah")
    self.assertEqual(r, ['hanukkah'])

    _, r = self.anagrams2.get_anagrams("hap")
    self.assertEqual(r, ['hap'])

    _, r = self.anagrams2.get_anagrams("hapgood")
    self.assertEqual(r, ['hapgood'])

    _, r = self.anagrams2.get_anagrams("haphazard")
    self.assertEqual(r, ['haphazard'])

    _, r = self.anagrams2.get_anagrams("haphazardly")
    self.assertEqual(r, ['haphazardly'])

    _, r = self.anagrams2.get_anagrams("haphazardness")
    self.assertEqual(r, ['haphazardness'])

    _, r = self.anagrams2.get_anagrams("hapless")
    self.assertEqual(r, ['hapless'])

    _, r = self.anagrams2.get_anagrams("haplessly")
    self.assertEqual(r, ['haplessly'])

    _, r = self.anagrams2.get_anagrams("haplessness")
    self.assertEqual(r, ['haplessness'])

    _, r = self.anagrams2.get_anagrams("haply")
    self.assertEqual(r, ['haply', 'phyla'])

    _, r = self.anagrams2.get_anagrams("happen")
    self.assertEqual(r, ['happen'])

    _, r = self.anagrams2.get_anagrams("happened")
    self.assertEqual(r, ['happened'])

    _, r = self.anagrams2.get_anagrams("happening")
    self.assertEqual(r, ['happening'])

    _, r = self.anagrams2.get_anagrams("happenings")
    self.assertEqual(r, ['happenings'])

    _, r = self.anagrams2.get_anagrams("happens")
    self.assertEqual(r, ['happens'])

    _, r = self.anagrams2.get_anagrams("happier")
    self.assertEqual(r, ['happier'])

    _, r = self.anagrams2.get_anagrams("happiest")
    self.assertEqual(r, ['epitaphs', 'happiest'])

    _, r = self.anagrams2.get_anagrams("happily")
    self.assertEqual(r, ['happily'])

    _, r = self.anagrams2.get_anagrams("happiness")
    self.assertEqual(r, ['happiness'])

    _, r = self.anagrams2.get_anagrams("happy")
    self.assertEqual(r, ['happy'])

    _, r = self.anagrams2.get_anagrams("hapsburg")
    self.assertEqual(r, ['hapsburg', 'subgraph'])

    _, r = self.anagrams2.get_anagrams("harass")
    self.assertEqual(r, ['harass'])

    _, r = self.anagrams2.get_anagrams("harassed")
    self.assertEqual(r, ['harassed'])

    _, r = self.anagrams2.get_anagrams("harasses")
    self.assertEqual(r, ['harasses'])

    _, r = self.anagrams2.get_anagrams("harassing")
    self.assertEqual(r, ['harassing'])

    _, r = self.anagrams2.get_anagrams("harassment")
    self.assertEqual(r, ['harassment'])

    _, r = self.anagrams2.get_anagrams("harbin")
    self.assertEqual(r, ['harbin'])

    _, r = self.anagrams2.get_anagrams("harbinger")
    self.assertEqual(r, ['harbinger'])

    _, r = self.anagrams2.get_anagrams("harbor")
    self.assertEqual(r, ['harbor'])

    _, r = self.anagrams2.get_anagrams("harbored")
    self.assertEqual(r, ['abhorred', 'harbored'])

    _, r = self.anagrams2.get_anagrams("harboring")
    self.assertEqual(r, ['abhorring', 'harboring'])

    _, r = self.anagrams2.get_anagrams("harbors")
    self.assertEqual(r, ['harbors'])

    _, r = self.anagrams2.get_anagrams("harcourt")
    self.assertEqual(r, ['harcourt'])

    _, r = self.anagrams2.get_anagrams("hard")
    self.assertEqual(r, ['hard'])

    _, r = self.anagrams2.get_anagrams("hardboiled")
    self.assertEqual(r, ['hardboiled'])

    _, r = self.anagrams2.get_anagrams("hardcopy")
    self.assertEqual(r, ['hardcopy'])

    _, r = self.anagrams2.get_anagrams("harden")
    self.assertEqual(r, ['harden'])

    _, r = self.anagrams2.get_anagrams("harder")
    self.assertEqual(r, ['harder'])

    _, r = self.anagrams2.get_anagrams("hardest")
    self.assertEqual(r, ['dearths', 'hardest', 'threads'])

    _, r = self.anagrams2.get_anagrams("hardhat")
    self.assertEqual(r, ['hardhat'])

    _, r = self.anagrams2.get_anagrams("hardin")
    self.assertEqual(r, ['hardin'])

    _, r = self.anagrams2.get_anagrams("hardiness")
    self.assertEqual(r, ['hardiness'])

    _, r = self.anagrams2.get_anagrams("harding")
    self.assertEqual(r, ['harding'])

    _, r = self.anagrams2.get_anagrams("hardly")
    self.assertEqual(r, ['hardly'])

    _, r = self.anagrams2.get_anagrams("hardness")
    self.assertEqual(r, ['hardness'])

    _, r = self.anagrams2.get_anagrams("hardscrabble")
    self.assertEqual(r, ['hardscrabble'])

    _, r = self.anagrams2.get_anagrams("hardship")
    self.assertEqual(r, ['hardship'])

    _, r = self.anagrams2.get_anagrams("hardships")
    self.assertEqual(r, ['hardships'])

    _, r = self.anagrams2.get_anagrams("hardware")
    self.assertEqual(r, ['hardware'])

    _, r = self.anagrams2.get_anagrams("hardwired")
    self.assertEqual(r, ['hardwired'])

    _, r = self.anagrams2.get_anagrams("hardworking")
    self.assertEqual(r, ['hardworking'])

    _, r = self.anagrams2.get_anagrams("hardy")
    self.assertEqual(r, ['hardy', 'hydra'])

    _, r = self.anagrams2.get_anagrams("hare")
    self.assertEqual(r, ['hare', 'hear', 'hera', 'rhea'])

    _, r = self.anagrams2.get_anagrams("harelip")
    self.assertEqual(r, ['harelip'])

    _, r = self.anagrams2.get_anagrams("harem")
    self.assertEqual(r, ['harem'])

    _, r = self.anagrams2.get_anagrams("hares")
    self.assertEqual(r, ['asher', 'hares', 'hears', 'share', 'shear'])

    _, r = self.anagrams2.get_anagrams("hark")
    self.assertEqual(r, ['hark'])

    _, r = self.anagrams2.get_anagrams("harken")
    self.assertEqual(r, ['harken'])

    _, r = self.anagrams2.get_anagrams("harlan")
    self.assertEqual(r, ['harlan'])

    _, r = self.anagrams2.get_anagrams("harlem")
    self.assertEqual(r, ['harlem'])

    _, r = self.anagrams2.get_anagrams("harley")
    self.assertEqual(r, ['harley'])

    _, r = self.anagrams2.get_anagrams("harlot")
    self.assertEqual(r, ['harlot'])

    _, r = self.anagrams2.get_anagrams("harlots")
    self.assertEqual(r, ['harlots'])

    _, r = self.anagrams2.get_anagrams("harm")
    self.assertEqual(r, ['harm'])

    _, r = self.anagrams2.get_anagrams("harmed")
    self.assertEqual(r, ['harmed'])

    _, r = self.anagrams2.get_anagrams("harmful")
    self.assertEqual(r, ['harmful'])

    _, r = self.anagrams2.get_anagrams("harmfully")
    self.assertEqual(r, ['harmfully'])

    _, r = self.anagrams2.get_anagrams("harmfulness")
    self.assertEqual(r, ['harmfulness'])

    _, r = self.anagrams2.get_anagrams("harming")
    self.assertEqual(r, ['harming'])

    _, r = self.anagrams2.get_anagrams("harmless")
    self.assertEqual(r, ['harmless'])

    _, r = self.anagrams2.get_anagrams("harmlessly")
    self.assertEqual(r, ['harmlessly'])

    _, r = self.anagrams2.get_anagrams("harmlessness")
    self.assertEqual(r, ['harmlessness'])

    _, r = self.anagrams2.get_anagrams("harmon")
    self.assertEqual(r, ['harmon'])

    _, r = self.anagrams2.get_anagrams("harmonic")
    self.assertEqual(r, ['harmonic'])

    _, r = self.anagrams2.get_anagrams("harmonics")
    self.assertEqual(r, ['harmonics'])

    _, r = self.anagrams2.get_anagrams("harmonies")
    self.assertEqual(r, ['harmonies'])

    _, r = self.anagrams2.get_anagrams("harmonious")
    self.assertEqual(r, ['harmonious'])

    _, r = self.anagrams2.get_anagrams("harmoniously")
    self.assertEqual(r, ['harmoniously'])

    _, r = self.anagrams2.get_anagrams("harmoniousness")
    self.assertEqual(r, ['harmoniousness'])

    _, r = self.anagrams2.get_anagrams("harmonist")
    self.assertEqual(r, ['harmonist'])

    _, r = self.anagrams2.get_anagrams("harmonistic")
    self.assertEqual(r, ['anchoritism', 'harmonistic'])

    _, r = self.anagrams2.get_anagrams("harmonistically")
    self.assertEqual(r, ['harmonistically'])

    _, r = self.anagrams2.get_anagrams("harmonize")
    self.assertEqual(r, ['harmonize'])

    _, r = self.anagrams2.get_anagrams("harmony")
    self.assertEqual(r, ['harmony'])

    _, r = self.anagrams2.get_anagrams("harms")
    self.assertEqual(r, ['harms', 'marsh'])

    _, r = self.anagrams2.get_anagrams("harness")
    self.assertEqual(r, ['harness'])

    _, r = self.anagrams2.get_anagrams("harnessed")
    self.assertEqual(r, ['harnessed'])

    _, r = self.anagrams2.get_anagrams("harnessing")
    self.assertEqual(r, ['harnessing'])

    _, r = self.anagrams2.get_anagrams("harold")
    self.assertEqual(r, ['harold'])

    _, r = self.anagrams2.get_anagrams("harp")
    self.assertEqual(r, ['harp'])

    _, r = self.anagrams2.get_anagrams("harper")
    self.assertEqual(r, ['harper'])

    _, r = self.anagrams2.get_anagrams("harpers")
    self.assertEqual(r, ['harpers', 'sharper'])

    _, r = self.anagrams2.get_anagrams("harping")
    self.assertEqual(r, ['harping'])

    _, r = self.anagrams2.get_anagrams("harpy")
    self.assertEqual(r, ['harpy'])

    _, r = self.anagrams2.get_anagrams("harried")
    self.assertEqual(r, ['harried'])

    _, r = self.anagrams2.get_anagrams("harrier")
    self.assertEqual(r, ['harrier'])

    _, r = self.anagrams2.get_anagrams("harriet")
    self.assertEqual(r, ['harriet'])

    _, r = self.anagrams2.get_anagrams("harriman")
    self.assertEqual(r, ['harriman'])

    _, r = self.anagrams2.get_anagrams("harrington")
    self.assertEqual(r, ['harrington'])

    _, r = self.anagrams2.get_anagrams("harris")
    self.assertEqual(r, ['harris'])

    _, r = self.anagrams2.get_anagrams("harrisburg")
    self.assertEqual(r, ['harrisburg'])

    _, r = self.anagrams2.get_anagrams("harrison")
    self.assertEqual(r, ['harrison'])

    _, r = self.anagrams2.get_anagrams("harrisonburg")
    self.assertEqual(r, ['harrisonburg'])

    _, r = self.anagrams2.get_anagrams("harrow")
    self.assertEqual(r, ['harrow'])

    _, r = self.anagrams2.get_anagrams("harrowed")
    self.assertEqual(r, ['harrowed'])

    _, r = self.anagrams2.get_anagrams("harrowing")
    self.assertEqual(r, ['harrowing'])

    _, r = self.anagrams2.get_anagrams("harrows")
    self.assertEqual(r, ['harrows'])

    _, r = self.anagrams2.get_anagrams("harry")
    self.assertEqual(r, ['harry'])

    _, r = self.anagrams2.get_anagrams("harsh")
    self.assertEqual(r, ['harsh'])

    _, r = self.anagrams2.get_anagrams("harsher")
    self.assertEqual(r, ['harsher'])

    _, r = self.anagrams2.get_anagrams("harshly")
    self.assertEqual(r, ['harshly'])

    _, r = self.anagrams2.get_anagrams("harshness")
    self.assertEqual(r, ['harshness'])

    _, r = self.anagrams2.get_anagrams("hart")
    self.assertEqual(r, ['hart'])

    _, r = self.anagrams2.get_anagrams("hartford")
    self.assertEqual(r, ['hartford'])

    _, r = self.anagrams2.get_anagrams("hartley")
    self.assertEqual(r, ['earthly', 'hartley'])

    _, r = self.anagrams2.get_anagrams("hartman")
    self.assertEqual(r, ['hartman'])

    _, r = self.anagrams2.get_anagrams("harvard")
    self.assertEqual(r, ['harvard'])

    _, r = self.anagrams2.get_anagrams("harvardize")
    self.assertEqual(r, ['harvardize'])

    _, r = self.anagrams2.get_anagrams("harvardizes")
    self.assertEqual(r, ['harvardizes'])

    _, r = self.anagrams2.get_anagrams("harvest")
    self.assertEqual(r, ['harvest'])

    _, r = self.anagrams2.get_anagrams("harvested")
    self.assertEqual(r, ['harvested'])

    _, r = self.anagrams2.get_anagrams("harvester")
    self.assertEqual(r, ['harvester'])

    _, r = self.anagrams2.get_anagrams("harvesting")
    self.assertEqual(r, ['harvesting'])

    _, r = self.anagrams2.get_anagrams("harvests")
    self.assertEqual(r, ['harvests'])

    _, r = self.anagrams2.get_anagrams("harvey")
    self.assertEqual(r, ['harvey'])

    _, r = self.anagrams2.get_anagrams("harveyize")
    self.assertEqual(r, ['harveyize'])

    _, r = self.anagrams2.get_anagrams("harveyizes")
    self.assertEqual(r, ['harveyizes'])

    _, r = self.anagrams2.get_anagrams("harveys")
    self.assertEqual(r, ['harveys'])

    _, r = self.anagrams2.get_anagrams("has")
    self.assertEqual(r, ['ash', 'has'])

    _, r = self.anagrams2.get_anagrams("hash")
    self.assertEqual(r, ['hash'])

    _, r = self.anagrams2.get_anagrams("hashed")
    self.assertEqual(r, ['hashed'])

    _, r = self.anagrams2.get_anagrams("hasher")
    self.assertEqual(r, ['hasher'])

    _, r = self.anagrams2.get_anagrams("hashes")
    self.assertEqual(r, ['hashes'])

    _, r = self.anagrams2.get_anagrams("hashing")
    self.assertEqual(r, ['hashing'])

    _, r = self.anagrams2.get_anagrams("hashish")
    self.assertEqual(r, ['hashish'])

    _, r = self.anagrams2.get_anagrams("haskell")
    self.assertEqual(r, ['haskell'])

    _, r = self.anagrams2.get_anagrams("haskins")
    self.assertEqual(r, ['haskins'])

    _, r = self.anagrams2.get_anagrams("hassle")
    self.assertEqual(r, ['hassle', 'lashes'])

    _, r = self.anagrams2.get_anagrams("haste")
    self.assertEqual(r, ['haste', 'hates', 'heats'])

    _, r = self.anagrams2.get_anagrams("hasten")
    self.assertEqual(r, ['athens', 'hasten'])

    _, r = self.anagrams2.get_anagrams("hastened")
    self.assertEqual(r, ['hastened'])

    _, r = self.anagrams2.get_anagrams("hastening")
    self.assertEqual(r, ['hastening'])

    _, r = self.anagrams2.get_anagrams("hastens")
    self.assertEqual(r, ['hastens'])

    _, r = self.anagrams2.get_anagrams("hastily")
    self.assertEqual(r, ['hastily'])

    _, r = self.anagrams2.get_anagrams("hastiness")
    self.assertEqual(r, ['hastiness'])

    _, r = self.anagrams2.get_anagrams("hastings")
    self.assertEqual(r, ['hastings'])

    _, r = self.anagrams2.get_anagrams("hasty")
    self.assertEqual(r, ['hasty'])

    _, r = self.anagrams2.get_anagrams("hat")
    self.assertEqual(r, ['hat'])

    _, r = self.anagrams2.get_anagrams("hatch")
    self.assertEqual(r, ['hatch'])

    _, r = self.anagrams2.get_anagrams("hatched")
    self.assertEqual(r, ['hatched'])

    _, r = self.anagrams2.get_anagrams("hatchet")
    self.assertEqual(r, ['hatchet'])

    _, r = self.anagrams2.get_anagrams("hatchets")
    self.assertEqual(r, ['hatchets', 'thatches'])

    _, r = self.anagrams2.get_anagrams("hatching")
    self.assertEqual(r, ['hatching'])

    _, r = self.anagrams2.get_anagrams("hatchure")
    self.assertEqual(r, ['hatchure'])

    _, r = self.anagrams2.get_anagrams("hate")
    self.assertEqual(r, ['hate', 'heat', 'thea'])

    _, r = self.anagrams2.get_anagrams("hated")
    self.assertEqual(r, ['death', 'hated'])

    _, r = self.anagrams2.get_anagrams("hateful")
    self.assertEqual(r, ['hateful'])

    _, r = self.anagrams2.get_anagrams("hatefully")
    self.assertEqual(r, ['hatefully'])

    _, r = self.anagrams2.get_anagrams("hatefulness")
    self.assertEqual(r, ['hatefulness'])

    _, r = self.anagrams2.get_anagrams("hater")
    self.assertEqual(r, ['earth', 'hater', 'heart'])

    _, r = self.anagrams2.get_anagrams("hates")
    self.assertEqual(r, ['haste', 'hates', 'heats'])

    _, r = self.anagrams2.get_anagrams("hatfield")
    self.assertEqual(r, ['hatfield'])

    _, r = self.anagrams2.get_anagrams("hathaway")
    self.assertEqual(r, ['hathaway'])

    _, r = self.anagrams2.get_anagrams("hating")
    self.assertEqual(r, ['hating'])

    _, r = self.anagrams2.get_anagrams("hatred")
    self.assertEqual(r, ['dearth', 'hatred', 'thread'])

    _, r = self.anagrams2.get_anagrams("hats")
    self.assertEqual(r, ['hats'])

    _, r = self.anagrams2.get_anagrams("hatteras")
    self.assertEqual(r, ['hatteras'])

    _, r = self.anagrams2.get_anagrams("hattie")
    self.assertEqual(r, ['hattie'])

    _, r = self.anagrams2.get_anagrams("hattiesburg")
    self.assertEqual(r, ['hattiesburg'])

    _, r = self.anagrams2.get_anagrams("hattize")
    self.assertEqual(r, ['hattize'])

    _, r = self.anagrams2.get_anagrams("hattizes")
    self.assertEqual(r, ['hattizes'])

    _, r = self.anagrams2.get_anagrams("haugen")
    self.assertEqual(r, ['haugen'])

    _, r = self.anagrams2.get_anagrams("haughtily")
    self.assertEqual(r, ['haughtily'])

    _, r = self.anagrams2.get_anagrams("haughtiness")
    self.assertEqual(r, ['haughtiness'])

    _, r = self.anagrams2.get_anagrams("haughty")
    self.assertEqual(r, ['haughty'])

    _, r = self.anagrams2.get_anagrams("haul")
    self.assertEqual(r, ['haul'])

    _, r = self.anagrams2.get_anagrams("hauled")
    self.assertEqual(r, ['hauled'])

    _, r = self.anagrams2.get_anagrams("hauler")
    self.assertEqual(r, ['hauler'])

    _, r = self.anagrams2.get_anagrams("hauling")
    self.assertEqual(r, ['hauling'])

    _, r = self.anagrams2.get_anagrams("hauls")
    self.assertEqual(r, ['hauls'])

    _, r = self.anagrams2.get_anagrams("haunch")
    self.assertEqual(r, ['haunch'])

    _, r = self.anagrams2.get_anagrams("haunches")
    self.assertEqual(r, ['haunches'])

    _, r = self.anagrams2.get_anagrams("haunt")
    self.assertEqual(r, ['haunt'])

    _, r = self.anagrams2.get_anagrams("haunted")
    self.assertEqual(r, ['haunted'])

    _, r = self.anagrams2.get_anagrams("haunter")
    self.assertEqual(r, ['haunter'])

    _, r = self.anagrams2.get_anagrams("haunting")
    self.assertEqual(r, ['haunting'])

    _, r = self.anagrams2.get_anagrams("haunts")
    self.assertEqual(r, ['haunts'])

    _, r = self.anagrams2.get_anagrams("hausa")
    self.assertEqual(r, ['hausa'])

    _, r = self.anagrams2.get_anagrams("hausdorff")
    self.assertEqual(r, ['hausdorff'])

    _, r = self.anagrams2.get_anagrams("hauser")
    self.assertEqual(r, ['hauser'])

    _, r = self.anagrams2.get_anagrams("havana")
    self.assertEqual(r, ['havana'])

    _, r = self.anagrams2.get_anagrams("have")
    self.assertEqual(r, ['have'])

    _, r = self.anagrams2.get_anagrams("haven")
    self.assertEqual(r, ['haven'])

    _, r = self.anagrams2.get_anagrams("havens")
    self.assertEqual(r, ['havens', 'shaven'])

    _, r = self.anagrams2.get_anagrams("haves")
    self.assertEqual(r, ['haves', 'shave'])

    _, r = self.anagrams2.get_anagrams("havilland")
    self.assertEqual(r, ['havilland'])

    _, r = self.anagrams2.get_anagrams("having")
    self.assertEqual(r, ['having'])

    _, r = self.anagrams2.get_anagrams("havoc")
    self.assertEqual(r, ['havoc'])

    _, r = self.anagrams2.get_anagrams("hawaii")
    self.assertEqual(r, ['hawaii'])

    _, r = self.anagrams2.get_anagrams("hawaiian")
    self.assertEqual(r, ['hawaiian'])

    _, r = self.anagrams2.get_anagrams("hawk")
    self.assertEqual(r, ['hawk'])

    _, r = self.anagrams2.get_anagrams("hawked")
    self.assertEqual(r, ['hawked'])

    _, r = self.anagrams2.get_anagrams("hawker")
    self.assertEqual(r, ['hawker'])

    _, r = self.anagrams2.get_anagrams("hawkers")
    self.assertEqual(r, ['hawkers'])

    _, r = self.anagrams2.get_anagrams("hawkins")
    self.assertEqual(r, ['hawkins'])

    _, r = self.anagrams2.get_anagrams("hawks")
    self.assertEqual(r, ['hawks'])

    _, r = self.anagrams2.get_anagrams("hawley")
    self.assertEqual(r, ['hawley'])

    _, r = self.anagrams2.get_anagrams("hawthorne")
    self.assertEqual(r, ['hawthorne'])

    _, r = self.anagrams2.get_anagrams("hay")
    self.assertEqual(r, ['hay'])

    _, r = self.anagrams2.get_anagrams("hayden")
    self.assertEqual(r, ['hayden'])

    _, r = self.anagrams2.get_anagrams("haydn")
    self.assertEqual(r, ['handy', 'haydn'])

    _, r = self.anagrams2.get_anagrams("hayes")
    self.assertEqual(r, ['hayes'])

    _, r = self.anagrams2.get_anagrams("haying")
    self.assertEqual(r, ['haying'])

    _, r = self.anagrams2.get_anagrams("haynes")
    self.assertEqual(r, ['haynes'])

    _, r = self.anagrams2.get_anagrams("hays")
    self.assertEqual(r, ['hays'])

    _, r = self.anagrams2.get_anagrams("haystack")
    self.assertEqual(r, ['haystack'])

    _, r = self.anagrams2.get_anagrams("hayward")
    self.assertEqual(r, ['hayward'])

    _, r = self.anagrams2.get_anagrams("haywood")
    self.assertEqual(r, ['haywood'])

    _, r = self.anagrams2.get_anagrams("hazard")
    self.assertEqual(r, ['hazard'])

    _, r = self.anagrams2.get_anagrams("hazardous")
    self.assertEqual(r, ['hazardous'])

    _, r = self.anagrams2.get_anagrams("hazards")
    self.assertEqual(r, ['hazards'])

    _, r = self.anagrams2.get_anagrams("haze")
    self.assertEqual(r, ['haze'])

    _, r = self.anagrams2.get_anagrams("hazel")
    self.assertEqual(r, ['hazel'])

    _, r = self.anagrams2.get_anagrams("hazes")
    self.assertEqual(r, ['hazes'])

    _, r = self.anagrams2.get_anagrams("haziness")
    self.assertEqual(r, ['haziness'])

    _, r = self.anagrams2.get_anagrams("hazy")
    self.assertEqual(r, ['hazy'])

    _, r = self.anagrams2.get_anagrams("he")
    self.assertEqual(r, ['he'])

    _, r = self.anagrams2.get_anagrams("head")
    self.assertEqual(r, ['head'])

    _, r = self.anagrams2.get_anagrams("headache")
    self.assertEqual(r, ['headache'])

    _, r = self.anagrams2.get_anagrams("headaches")
    self.assertEqual(r, ['headaches'])

    _, r = self.anagrams2.get_anagrams("headed")
    self.assertEqual(r, ['headed'])

    _, r = self.anagrams2.get_anagrams("header")
    self.assertEqual(r, ['adhere', 'header'])

    _, r = self.anagrams2.get_anagrams("headers")
    self.assertEqual(r, ['adheres', 'headers', 'sheared'])

    _, r = self.anagrams2.get_anagrams("headgear")
    self.assertEqual(r, ['headgear'])

    _, r = self.anagrams2.get_anagrams("heading")
    self.assertEqual(r, ['heading'])

    _, r = self.anagrams2.get_anagrams("headings")
    self.assertEqual(r, ['headings'])

    _, r = self.anagrams2.get_anagrams("headland")
    self.assertEqual(r, ['headland'])

    _, r = self.anagrams2.get_anagrams("headlands")
    self.assertEqual(r, ['headlands'])

    _, r = self.anagrams2.get_anagrams("headlight")
    self.assertEqual(r, ['headlight'])

    _, r = self.anagrams2.get_anagrams("headline")
    self.assertEqual(r, ['headline'])

    _, r = self.anagrams2.get_anagrams("headlined")
    self.assertEqual(r, ['headlined'])

    _, r = self.anagrams2.get_anagrams("headlines")
    self.assertEqual(r, ['headlines'])

    _, r = self.anagrams2.get_anagrams("headlining")
    self.assertEqual(r, ['headlining'])

    _, r = self.anagrams2.get_anagrams("headlong")
    self.assertEqual(r, ['headlong'])

    _, r = self.anagrams2.get_anagrams("headmaster")
    self.assertEqual(r, ['headmaster'])

    _, r = self.anagrams2.get_anagrams("headphone")
    self.assertEqual(r, ['headphone'])

    _, r = self.anagrams2.get_anagrams("headquarters")
    self.assertEqual(r, ['headquarters'])

    _, r = self.anagrams2.get_anagrams("headroom")
    self.assertEqual(r, ['headroom'])

    _, r = self.anagrams2.get_anagrams("heads")
    self.assertEqual(r, ['hades', 'heads', 'shade'])

    _, r = self.anagrams2.get_anagrams("headset")
    self.assertEqual(r, ['headset'])

    _, r = self.anagrams2.get_anagrams("headway")
    self.assertEqual(r, ['headway'])

    _, r = self.anagrams2.get_anagrams("heal")
    self.assertEqual(r, ['hale', 'heal'])

    _, r = self.anagrams2.get_anagrams("healed")
    self.assertEqual(r, ['healed'])

    _, r = self.anagrams2.get_anagrams("healer")
    self.assertEqual(r, ['healer'])

    _, r = self.anagrams2.get_anagrams("healers")
    self.assertEqual(r, ['healers'])

    _, r = self.anagrams2.get_anagrams("healey")
    self.assertEqual(r, ['healey'])

    _, r = self.anagrams2.get_anagrams("healing")
    self.assertEqual(r, ['healing'])

    _, r = self.anagrams2.get_anagrams("heals")
    self.assertEqual(r, ['heals', 'leash', 'shale'])

    _, r = self.anagrams2.get_anagrams("health")
    self.assertEqual(r, ['health'])

    _, r = self.anagrams2.get_anagrams("healthful")
    self.assertEqual(r, ['healthful'])

    _, r = self.anagrams2.get_anagrams("healthfully")
    self.assertEqual(r, ['healthfully'])

    _, r = self.anagrams2.get_anagrams("healthfulness")
    self.assertEqual(r, ['healthfulness'])

    _, r = self.anagrams2.get_anagrams("healthier")
    self.assertEqual(r, ['healthier'])

    _, r = self.anagrams2.get_anagrams("healthiest")
    self.assertEqual(r, ['healthiest'])

    _, r = self.anagrams2.get_anagrams("healthily")
    self.assertEqual(r, ['healthily'])

    _, r = self.anagrams2.get_anagrams("healthiness")
    self.assertEqual(r, ['healthiness'])

    _, r = self.anagrams2.get_anagrams("healthy")
    self.assertEqual(r, ['healthy'])

    _, r = self.anagrams2.get_anagrams("healy")
    self.assertEqual(r, ['haley', 'healy'])

    _, r = self.anagrams2.get_anagrams("heap")
    self.assertEqual(r, ['heap'])

    _, r = self.anagrams2.get_anagrams("heaped")
    self.assertEqual(r, ['heaped'])

    _, r = self.anagrams2.get_anagrams("heaping")
    self.assertEqual(r, ['heaping'])

    _, r = self.anagrams2.get_anagrams("heaps")
    self.assertEqual(r, ['heaps', 'phase', 'shape'])

    _, r = self.anagrams2.get_anagrams("hear")
    self.assertEqual(r, ['hare', 'hear', 'hera', 'rhea'])

    _, r = self.anagrams2.get_anagrams("heard")
    self.assertEqual(r, ['heard'])

    _, r = self.anagrams2.get_anagrams("hearer")
    self.assertEqual(r, ['hearer'])

    _, r = self.anagrams2.get_anagrams("hearers")
    self.assertEqual(r, ['hearers', 'shearer'])

    _, r = self.anagrams2.get_anagrams("hearing")
    self.assertEqual(r, ['hearing'])

    _, r = self.anagrams2.get_anagrams("hearings")
    self.assertEqual(r, ['hearings', 'shearing'])

    _, r = self.anagrams2.get_anagrams("hearken")
    self.assertEqual(r, ['hearken'])

    _, r = self.anagrams2.get_anagrams("hears")
    self.assertEqual(r, ['asher', 'hares', 'hears', 'share', 'shear'])

    _, r = self.anagrams2.get_anagrams("hearsay")
    self.assertEqual(r, ['hearsay'])

    _, r = self.anagrams2.get_anagrams("hearst")
    self.assertEqual(r, ['earths', 'hearst', 'hearts'])

    _, r = self.anagrams2.get_anagrams("heart")
    self.assertEqual(r, ['earth', 'hater', 'heart'])

    _, r = self.anagrams2.get_anagrams("heartbeat")
    self.assertEqual(r, ['heartbeat'])

    _, r = self.anagrams2.get_anagrams("heartbreak")
    self.assertEqual(r, ['heartbreak'])

    _, r = self.anagrams2.get_anagrams("hearten")
    self.assertEqual(r, ['earthen', 'hearten', 'teheran'])

    _, r = self.anagrams2.get_anagrams("heartiest")
    self.assertEqual(r, ['heartiest'])

    _, r = self.anagrams2.get_anagrams("heartily")
    self.assertEqual(r, ['heartily'])

    _, r = self.anagrams2.get_anagrams("heartiness")
    self.assertEqual(r, ['heartiness'])

    _, r = self.anagrams2.get_anagrams("heartless")
    self.assertEqual(r, ['heartless'])

    _, r = self.anagrams2.get_anagrams("hearts")
    self.assertEqual(r, ['earths', 'hearst', 'hearts'])

    _, r = self.anagrams2.get_anagrams("heartwood")
    self.assertEqual(r, ['heartwood'])

    _, r = self.anagrams2.get_anagrams("hearty")
    self.assertEqual(r, ['earthy', 'hearty', 'thayer'])

    _, r = self.anagrams2.get_anagrams("heat")
    self.assertEqual(r, ['hate', 'heat', 'thea'])

    _, r = self.anagrams2.get_anagrams("heatable")
    self.assertEqual(r, ['heatable'])

    _, r = self.anagrams2.get_anagrams("heated")
    self.assertEqual(r, ['heated'])

    _, r = self.anagrams2.get_anagrams("heatedly")
    self.assertEqual(r, ['heatedly'])

    _, r = self.anagrams2.get_anagrams("heater")
    self.assertEqual(r, ['heater'])

    _, r = self.anagrams2.get_anagrams("heaters")
    self.assertEqual(r, ['heaters', 'theresa'])

    _, r = self.anagrams2.get_anagrams("heath")
    self.assertEqual(r, ['heath'])

    _, r = self.anagrams2.get_anagrams("heathen")
    self.assertEqual(r, ['heathen'])

    _, r = self.anagrams2.get_anagrams("heather")
    self.assertEqual(r, ['heather'])

    _, r = self.anagrams2.get_anagrams("heathkit")
    self.assertEqual(r, ['heathkit'])

    _, r = self.anagrams2.get_anagrams("heathman")
    self.assertEqual(r, ['heathman'])

    _, r = self.anagrams2.get_anagrams("heating")
    self.assertEqual(r, ['heating'])

    _, r = self.anagrams2.get_anagrams("heats")
    self.assertEqual(r, ['haste', 'hates', 'heats'])

    _, r = self.anagrams2.get_anagrams("heave")
    self.assertEqual(r, ['heave'])

    _, r = self.anagrams2.get_anagrams("heaved")
    self.assertEqual(r, ['heaved'])

    _, r = self.anagrams2.get_anagrams("heaven")
    self.assertEqual(r, ['heaven'])

    _, r = self.anagrams2.get_anagrams("heavenly")
    self.assertEqual(r, ['heavenly'])

    _, r = self.anagrams2.get_anagrams("heavens")
    self.assertEqual(r, ['heavens'])

    _, r = self.anagrams2.get_anagrams("heaver")
    self.assertEqual(r, ['heaver'])

    _, r = self.anagrams2.get_anagrams("heavers")
    self.assertEqual(r, ['heavers'])

    _, r = self.anagrams2.get_anagrams("heaves")
    self.assertEqual(r, ['heaves'])

    _, r = self.anagrams2.get_anagrams("heavier")
    self.assertEqual(r, ['heavier'])

    _, r = self.anagrams2.get_anagrams("heaviest")
    self.assertEqual(r, ['heaviest'])

    _, r = self.anagrams2.get_anagrams("heavily")
    self.assertEqual(r, ['heavily'])

    _, r = self.anagrams2.get_anagrams("heaviness")
    self.assertEqual(r, ['heaviness'])

    _, r = self.anagrams2.get_anagrams("heaving")
    self.assertEqual(r, ['heaving'])

    _, r = self.anagrams2.get_anagrams("heavy")
    self.assertEqual(r, ['heavy'])

    _, r = self.anagrams2.get_anagrams("heavyweight")
    self.assertEqual(r, ['heavyweight'])

    _, r = self.anagrams2.get_anagrams("hebe")
    self.assertEqual(r, ['hebe'])

    _, r = self.anagrams2.get_anagrams("hebraic")
    self.assertEqual(r, ['hebraic'])

    _, r = self.anagrams2.get_anagrams("hebraicize")
    self.assertEqual(r, ['hebraicize'])

    _, r = self.anagrams2.get_anagrams("hebraicizes")
    self.assertEqual(r, ['hebraicizes'])

    _, r = self.anagrams2.get_anagrams("hebrew")
    self.assertEqual(r, ['hebrew'])

    _, r = self.anagrams2.get_anagrams("hebrews")
    self.assertEqual(r, ['hebrews'])

    _, r = self.anagrams2.get_anagrams("hebrides")
    self.assertEqual(r, ['hebrides'])

    _, r = self.anagrams2.get_anagrams("hecate")
    self.assertEqual(r, ['hecate'])

    _, r = self.anagrams2.get_anagrams("heck")
    self.assertEqual(r, ['heck'])

    _, r = self.anagrams2.get_anagrams("heckle")
    self.assertEqual(r, ['heckle'])

    _, r = self.anagrams2.get_anagrams("heckman")
    self.assertEqual(r, ['heckman'])

    _, r = self.anagrams2.get_anagrams("hectic")
    self.assertEqual(r, ['hectic'])

    _, r = self.anagrams2.get_anagrams("hecuba")
    self.assertEqual(r, ['hecuba'])

    _, r = self.anagrams2.get_anagrams("hedda")
    self.assertEqual(r, ['hedda'])

    _, r = self.anagrams2.get_anagrams("hedge")
    self.assertEqual(r, ['hedge'])

    _, r = self.anagrams2.get_anagrams("hedged")
    self.assertEqual(r, ['hedged'])

    _, r = self.anagrams2.get_anagrams("hedgehog")
    self.assertEqual(r, ['hedgehog'])

    _, r = self.anagrams2.get_anagrams("hedgehogs")
    self.assertEqual(r, ['hedgehogs'])

    _, r = self.anagrams2.get_anagrams("hedges")
    self.assertEqual(r, ['hedges'])

    _, r = self.anagrams2.get_anagrams("hedonism")
    self.assertEqual(r, ['hedonism'])

    _, r = self.anagrams2.get_anagrams("hedonist")
    self.assertEqual(r, ['hedonist'])

    _, r = self.anagrams2.get_anagrams("heed")
    self.assertEqual(r, ['heed'])

    _, r = self.anagrams2.get_anagrams("heeded")
    self.assertEqual(r, ['heeded'])

    _, r = self.anagrams2.get_anagrams("heedless")
    self.assertEqual(r, ['heedless'])

    _, r = self.anagrams2.get_anagrams("heedlessly")
    self.assertEqual(r, ['heedlessly'])

    _, r = self.anagrams2.get_anagrams("heedlessness")
    self.assertEqual(r, ['heedlessness'])

    _, r = self.anagrams2.get_anagrams("heeds")
    self.assertEqual(r, ['heeds'])

    _, r = self.anagrams2.get_anagrams("heel")
    self.assertEqual(r, ['heel'])

    _, r = self.anagrams2.get_anagrams("heeled")
    self.assertEqual(r, ['heeled'])

    _, r = self.anagrams2.get_anagrams("heelers")
    self.assertEqual(r, ['heelers'])

    _, r = self.anagrams2.get_anagrams("heeling")
    self.assertEqual(r, ['heeling'])

    _, r = self.anagrams2.get_anagrams("heels")
    self.assertEqual(r, ['heels'])

    _, r = self.anagrams2.get_anagrams("hefty")
    self.assertEqual(r, ['hefty'])

    _, r = self.anagrams2.get_anagrams("hegel")
    self.assertEqual(r, ['hegel'])

    _, r = self.anagrams2.get_anagrams("hegelian")
    self.assertEqual(r, ['hegelian'])

    _, r = self.anagrams2.get_anagrams("hegelianize")
    self.assertEqual(r, ['hegelianize'])

    _, r = self.anagrams2.get_anagrams("hegelianizes")
    self.assertEqual(r, ['hegelianizes'])

    _, r = self.anagrams2.get_anagrams("hegemony")
    self.assertEqual(r, ['hegemony'])

    _, r = self.anagrams2.get_anagrams("heidegger")
    self.assertEqual(r, ['heidegger'])

    _, r = self.anagrams2.get_anagrams("heidelberg")
    self.assertEqual(r, ['heidelberg'])

    _, r = self.anagrams2.get_anagrams("heifer")
    self.assertEqual(r, ['heifer'])

    _, r = self.anagrams2.get_anagrams("height")
    self.assertEqual(r, ['eighth', 'height'])

    _, r = self.anagrams2.get_anagrams("heighten")
    self.assertEqual(r, ['heighten'])

    _, r = self.anagrams2.get_anagrams("heightened")
    self.assertEqual(r, ['heightened'])

    _, r = self.anagrams2.get_anagrams("heightening")
    self.assertEqual(r, ['heightening'])

    _, r = self.anagrams2.get_anagrams("heightens")
    self.assertEqual(r, ['heightens'])

    _, r = self.anagrams2.get_anagrams("heights")
    self.assertEqual(r, ['heights', 'highest'])

    _, r = self.anagrams2.get_anagrams("heine")
    self.assertEqual(r, ['heine'])

    _, r = self.anagrams2.get_anagrams("heinlein")
    self.assertEqual(r, ['heinlein'])

    _, r = self.anagrams2.get_anagrams("heinous")
    self.assertEqual(r, ['heinous'])

    _, r = self.anagrams2.get_anagrams("heinously")
    self.assertEqual(r, ['heinously'])

    _, r = self.anagrams2.get_anagrams("heinrich")
    self.assertEqual(r, ['heinrich'])

    _, r = self.anagrams2.get_anagrams("heinz")
    self.assertEqual(r, ['heinz'])

    _, r = self.anagrams2.get_anagrams("heinze")
    self.assertEqual(r, ['heinze'])

    _, r = self.anagrams2.get_anagrams("heir")
    self.assertEqual(r, ['heir', 'hire'])

    _, r = self.anagrams2.get_anagrams("heiress")
    self.assertEqual(r, ['heiress'])

    _, r = self.anagrams2.get_anagrams("heiresses")
    self.assertEqual(r, ['heiresses'])

    _, r = self.anagrams2.get_anagrams("heirs")
    self.assertEqual(r, ['heirs', 'hires', 'shire'])

    _, r = self.anagrams2.get_anagrams("heisenberg")
    self.assertEqual(r, ['heisenberg'])

    _, r = self.anagrams2.get_anagrams("heiser")
    self.assertEqual(r, ['heiser'])

    _, r = self.anagrams2.get_anagrams("held")
    self.assertEqual(r, ['held'])

    _, r = self.anagrams2.get_anagrams("helen")
    self.assertEqual(r, ['helen'])

    _, r = self.anagrams2.get_anagrams("helena")
    self.assertEqual(r, ['helena'])

    _, r = self.anagrams2.get_anagrams("helene")
    self.assertEqual(r, ['helene'])

    _, r = self.anagrams2.get_anagrams("helga")
    self.assertEqual(r, ['helga'])

    _, r = self.anagrams2.get_anagrams("helical")
    self.assertEqual(r, ['helical'])

    _, r = self.anagrams2.get_anagrams("helicopter")
    self.assertEqual(r, ['helicopter'])

    _, r = self.anagrams2.get_anagrams("heliocentric")
    self.assertEqual(r, ['heliocentric'])

    _, r = self.anagrams2.get_anagrams("heliopolis")
    self.assertEqual(r, ['heliopolis'])

    _, r = self.anagrams2.get_anagrams("helium")
    self.assertEqual(r, ['helium'])

    _, r = self.anagrams2.get_anagrams("helix")
    self.assertEqual(r, ['helix'])

    _, r = self.anagrams2.get_anagrams("hell")
    self.assertEqual(r, ['hell'])

    _, r = self.anagrams2.get_anagrams("hellenic")
    self.assertEqual(r, ['hellenic'])

    _, r = self.anagrams2.get_anagrams("hellenization")
    self.assertEqual(r, ['hellenization'])

    _, r = self.anagrams2.get_anagrams("hellenizations")
    self.assertEqual(r, ['hellenizations'])

    _, r = self.anagrams2.get_anagrams("hellenize")
    self.assertEqual(r, ['hellenize'])

    _, r = self.anagrams2.get_anagrams("hellenized")
    self.assertEqual(r, ['hellenized'])

    _, r = self.anagrams2.get_anagrams("hellenizes")
    self.assertEqual(r, ['hellenizes'])

    _, r = self.anagrams2.get_anagrams("hellenizing")
    self.assertEqual(r, ['hellenizing'])

    _, r = self.anagrams2.get_anagrams("hellespont")
    self.assertEqual(r, ['hellespont'])

    _, r = self.anagrams2.get_anagrams("hellfire")
    self.assertEqual(r, ['hellfire'])

    _, r = self.anagrams2.get_anagrams("hellish")
    self.assertEqual(r, ['hellish'])

    _, r = self.anagrams2.get_anagrams("hellman")
    self.assertEqual(r, ['hellman'])

    _, r = self.anagrams2.get_anagrams("hello")
    self.assertEqual(r, ['hello'])

    _, r = self.anagrams2.get_anagrams("hells")
    self.assertEqual(r, ['hells', 'shell'])

    _, r = self.anagrams2.get_anagrams("helm")
    self.assertEqual(r, ['helm'])

    _, r = self.anagrams2.get_anagrams("helmet")
    self.assertEqual(r, ['helmet'])

    _, r = self.anagrams2.get_anagrams("helmets")
    self.assertEqual(r, ['helmets'])

    _, r = self.anagrams2.get_anagrams("helmholtz")
    self.assertEqual(r, ['helmholtz'])

    _, r = self.anagrams2.get_anagrams("helmsman")
    self.assertEqual(r, ['helmsman'])

    _, r = self.anagrams2.get_anagrams("helmut")
    self.assertEqual(r, ['helmut'])

    _, r = self.anagrams2.get_anagrams("help")
    self.assertEqual(r, ['help'])

    _, r = self.anagrams2.get_anagrams("helped")
    self.assertEqual(r, ['helped'])

    _, r = self.anagrams2.get_anagrams("helper")
    self.assertEqual(r, ['helper'])

    _, r = self.anagrams2.get_anagrams("helpers")
    self.assertEqual(r, ['helpers'])

    _, r = self.anagrams2.get_anagrams("helpful")
    self.assertEqual(r, ['helpful'])

    _, r = self.anagrams2.get_anagrams("helpfully")
    self.assertEqual(r, ['helpfully'])

    _, r = self.anagrams2.get_anagrams("helpfulness")
    self.assertEqual(r, ['helpfulness'])

    _, r = self.anagrams2.get_anagrams("helping")
    self.assertEqual(r, ['helping'])

    _, r = self.anagrams2.get_anagrams("helpless")
    self.assertEqual(r, ['helpless'])

    _, r = self.anagrams2.get_anagrams("helplessly")
    self.assertEqual(r, ['helplessly'])

    _, r = self.anagrams2.get_anagrams("helplessness")
    self.assertEqual(r, ['helplessness'])

    _, r = self.anagrams2.get_anagrams("helpmate")
    self.assertEqual(r, ['helpmate'])

    _, r = self.anagrams2.get_anagrams("helps")
    self.assertEqual(r, ['helps'])

    _, r = self.anagrams2.get_anagrams("helsinki")
    self.assertEqual(r, ['helsinki'])

    _, r = self.anagrams2.get_anagrams("helvetica")
    self.assertEqual(r, ['helvetica'])

    _, r = self.anagrams2.get_anagrams("hem")
    self.assertEqual(r, ['hem'])

    _, r = self.anagrams2.get_anagrams("hemingway")
    self.assertEqual(r, ['hemingway'])

    _, r = self.anagrams2.get_anagrams("hemisphere")
    self.assertEqual(r, ['hemisphere'])

    _, r = self.anagrams2.get_anagrams("hemispheres")
    self.assertEqual(r, ['hemispheres'])

    _, r = self.anagrams2.get_anagrams("hemlock")
    self.assertEqual(r, ['hemlock'])

    _, r = self.anagrams2.get_anagrams("hemlocks")
    self.assertEqual(r, ['hemlocks'])

    _, r = self.anagrams2.get_anagrams("hemoglobin")
    self.assertEqual(r, ['hemoglobin'])

    _, r = self.anagrams2.get_anagrams("hemorrhoid")
    self.assertEqual(r, ['hemorrhoid'])

    _, r = self.anagrams2.get_anagrams("hemostat")
    self.assertEqual(r, ['hemostat'])

    _, r = self.anagrams2.get_anagrams("hemostats")
    self.assertEqual(r, ['hemostats'])

    _, r = self.anagrams2.get_anagrams("hemp")
    self.assertEqual(r, ['hemp'])

    _, r = self.anagrams2.get_anagrams("hempen")
    self.assertEqual(r, ['hempen'])

    _, r = self.anagrams2.get_anagrams("hempstead")
    self.assertEqual(r, ['hempstead'])

    _, r = self.anagrams2.get_anagrams("hems")
    self.assertEqual(r, ['hems', 'mesh'])

    _, r = self.anagrams2.get_anagrams("hen")
    self.assertEqual(r, ['hen'])

    _, r = self.anagrams2.get_anagrams("hence")
    self.assertEqual(r, ['hence'])

    _, r = self.anagrams2.get_anagrams("henceforth")
    self.assertEqual(r, ['henceforth'])

    _, r = self.anagrams2.get_anagrams("henchman")
    self.assertEqual(r, ['henchman'])

    _, r = self.anagrams2.get_anagrams("henchmen")
    self.assertEqual(r, ['henchmen'])

    _, r = self.anagrams2.get_anagrams("henderson")
    self.assertEqual(r, ['henderson'])

    _, r = self.anagrams2.get_anagrams("hendrick")
    self.assertEqual(r, ['hendrick'])

    _, r = self.anagrams2.get_anagrams("hendricks")
    self.assertEqual(r, ['hendricks'])

    _, r = self.anagrams2.get_anagrams("hendrickson")
    self.assertEqual(r, ['hendrickson'])

    _, r = self.anagrams2.get_anagrams("hendrix")
    self.assertEqual(r, ['hendrix'])

    _, r = self.anagrams2.get_anagrams("henley")
    self.assertEqual(r, ['henley'])

    _, r = self.anagrams2.get_anagrams("hennessey")
    self.assertEqual(r, ['hennessey'])

    _, r = self.anagrams2.get_anagrams("hennessy")
    self.assertEqual(r, ['hennessy'])

    _, r = self.anagrams2.get_anagrams("henning")
    self.assertEqual(r, ['henning'])

    _, r = self.anagrams2.get_anagrams("henpeck")
    self.assertEqual(r, ['henpeck'])

    _, r = self.anagrams2.get_anagrams("henri")
    self.assertEqual(r, ['henri', 'rhine'])

    _, r = self.anagrams2.get_anagrams("henrietta")
    self.assertEqual(r, ['henrietta'])

    _, r = self.anagrams2.get_anagrams("hens")
    self.assertEqual(r, ['hens'])

    _, r = self.anagrams2.get_anagrams("hepatitis")
    self.assertEqual(r, ['hepatitis'])

    _, r = self.anagrams2.get_anagrams("hepburn")
    self.assertEqual(r, ['hepburn'])

    _, r = self.anagrams2.get_anagrams("her")
    self.assertEqual(r, ['her'])

    _, r = self.anagrams2.get_anagrams("hera")
    self.assertEqual(r, ['hare', 'hear', 'hera', 'rhea'])

    _, r = self.anagrams2.get_anagrams("heraclitus")
    self.assertEqual(r, ['heraclitus'])

    _, r = self.anagrams2.get_anagrams("herald")
    self.assertEqual(r, ['herald'])

    _, r = self.anagrams2.get_anagrams("heralded")
    self.assertEqual(r, ['heralded'])

    _, r = self.anagrams2.get_anagrams("heralding")
    self.assertEqual(r, ['heralding'])

    _, r = self.anagrams2.get_anagrams("heralds")
    self.assertEqual(r, ['heralds'])

    _, r = self.anagrams2.get_anagrams("herb")
    self.assertEqual(r, ['herb'])

    _, r = self.anagrams2.get_anagrams("herbert")
    self.assertEqual(r, ['herbert'])

    _, r = self.anagrams2.get_anagrams("herbivore")
    self.assertEqual(r, ['herbivore'])

    _, r = self.anagrams2.get_anagrams("herbivorous")
    self.assertEqual(r, ['herbivorous'])

    _, r = self.anagrams2.get_anagrams("herbs")
    self.assertEqual(r, ['herbs'])

    _, r = self.anagrams2.get_anagrams("herculean")
    self.assertEqual(r, ['herculean'])

    _, r = self.anagrams2.get_anagrams("hercules")
    self.assertEqual(r, ['hercules'])

    _, r = self.anagrams2.get_anagrams("herd")
    self.assertEqual(r, ['herd'])

    _, r = self.anagrams2.get_anagrams("herded")
    self.assertEqual(r, ['herded'])

    _, r = self.anagrams2.get_anagrams("herder")
    self.assertEqual(r, ['herder'])

    _, r = self.anagrams2.get_anagrams("herding")
    self.assertEqual(r, ['herding'])

    _, r = self.anagrams2.get_anagrams("herds")
    self.assertEqual(r, ['herds', 'shred'])

    _, r = self.anagrams2.get_anagrams("here")
    self.assertEqual(r, ['here'])

    _, r = self.anagrams2.get_anagrams("hereabout")
    self.assertEqual(r, ['hereabout'])

    _, r = self.anagrams2.get_anagrams("hereabouts")
    self.assertEqual(r, ['hereabouts'])

    _, r = self.anagrams2.get_anagrams("hereafter")
    self.assertEqual(r, ['featherer', 'hereafter'])

    _, r = self.anagrams2.get_anagrams("hereby")
    self.assertEqual(r, ['hereby'])

    _, r = self.anagrams2.get_anagrams("hereditary")
    self.assertEqual(r, ['hereditary'])

    _, r = self.anagrams2.get_anagrams("heredity")
    self.assertEqual(r, ['heredity'])

    _, r = self.anagrams2.get_anagrams("hereford")
    self.assertEqual(r, ['hereford'])

    _, r = self.anagrams2.get_anagrams("herein")
    self.assertEqual(r, ['herein', 'inhere'])

    _, r = self.anagrams2.get_anagrams("hereinafter")
    self.assertEqual(r, ['hereinafter'])

    _, r = self.anagrams2.get_anagrams("hereof")
    self.assertEqual(r, ['hereof'])

    _, r = self.anagrams2.get_anagrams("heres")
    self.assertEqual(r, ['heres', 'sheer'])

    _, r = self.anagrams2.get_anagrams("heresy")
    self.assertEqual(r, ['heresy', 'hersey'])

    _, r = self.anagrams2.get_anagrams("heretic")
    self.assertEqual(r, ['heretic'])

    _, r = self.anagrams2.get_anagrams("heretics")
    self.assertEqual(r, ['heretics'])

    _, r = self.anagrams2.get_anagrams("hereto")
    self.assertEqual(r, ['hereto'])

    _, r = self.anagrams2.get_anagrams("heretofore")
    self.assertEqual(r, ['heretofore'])

    _, r = self.anagrams2.get_anagrams("hereunder")
    self.assertEqual(r, ['hereunder'])

    _, r = self.anagrams2.get_anagrams("herewith")
    self.assertEqual(r, ['herewith'])

    _, r = self.anagrams2.get_anagrams("heritage")
    self.assertEqual(r, ['heritage'])

    _, r = self.anagrams2.get_anagrams("heritages")
    self.assertEqual(r, ['heritages'])

    _, r = self.anagrams2.get_anagrams("herkimer")
    self.assertEqual(r, ['herkimer'])

    _, r = self.anagrams2.get_anagrams("herman")
    self.assertEqual(r, ['herman'])

    _, r = self.anagrams2.get_anagrams("hermann")
    self.assertEqual(r, ['hermann'])

    _, r = self.anagrams2.get_anagrams("hermes")
    self.assertEqual(r, ['hermes'])

    _, r = self.anagrams2.get_anagrams("hermetic")
    self.assertEqual(r, ['hermetic'])

    _, r = self.anagrams2.get_anagrams("hermetically")
    self.assertEqual(r, ['hermetically'])

    _, r = self.anagrams2.get_anagrams("hermit")
    self.assertEqual(r, ['hermit'])

    _, r = self.anagrams2.get_anagrams("hermite")
    self.assertEqual(r, ['hermite'])

    _, r = self.anagrams2.get_anagrams("hermitian")
    self.assertEqual(r, ['hermitian'])

    _, r = self.anagrams2.get_anagrams("hermits")
    self.assertEqual(r, ['hermits'])

    _, r = self.anagrams2.get_anagrams("hermosa")
    self.assertEqual(r, ['hermosa'])

    _, r = self.anagrams2.get_anagrams("hernandez")
    self.assertEqual(r, ['hernandez'])

    _, r = self.anagrams2.get_anagrams("hero")
    self.assertEqual(r, ['hero'])

    _, r = self.anagrams2.get_anagrams("herodotus")
    self.assertEqual(r, ['herodotus'])

    _, r = self.anagrams2.get_anagrams("heroes")
    self.assertEqual(r, ['heroes'])

    _, r = self.anagrams2.get_anagrams("heroic")
    self.assertEqual(r, ['heroic'])

    _, r = self.anagrams2.get_anagrams("heroically")
    self.assertEqual(r, ['heroically'])

    _, r = self.anagrams2.get_anagrams("heroics")
    self.assertEqual(r, ['heroics'])

    _, r = self.anagrams2.get_anagrams("heroin")
    self.assertEqual(r, ['heroin'])

    _, r = self.anagrams2.get_anagrams("heroine")
    self.assertEqual(r, ['heroine'])

    _, r = self.anagrams2.get_anagrams("heroines")
    self.assertEqual(r, ['heroines'])

    _, r = self.anagrams2.get_anagrams("heroism")
    self.assertEqual(r, ['heroism'])

    _, r = self.anagrams2.get_anagrams("heron")
    self.assertEqual(r, ['heron', 'honer'])

    _, r = self.anagrams2.get_anagrams("herons")
    self.assertEqual(r, ['herons'])

    _, r = self.anagrams2.get_anagrams("herpes")
    self.assertEqual(r, ['herpes', 'sphere'])

    _, r = self.anagrams2.get_anagrams("herr")
    self.assertEqual(r, ['herr'])

    _, r = self.anagrams2.get_anagrams("herring")
    self.assertEqual(r, ['herring'])

    _, r = self.anagrams2.get_anagrams("herrings")
    self.assertEqual(r, ['herrings'])

    _, r = self.anagrams2.get_anagrams("herrington")
    self.assertEqual(r, ['herrington'])

    _, r = self.anagrams2.get_anagrams("hers")
    self.assertEqual(r, ['hers'])

    _, r = self.anagrams2.get_anagrams("herschel")
    self.assertEqual(r, ['herschel'])

    _, r = self.anagrams2.get_anagrams("herself")
    self.assertEqual(r, ['herself'])

    _, r = self.anagrams2.get_anagrams("hersey")
    self.assertEqual(r, ['heresy', 'hersey'])

    _, r = self.anagrams2.get_anagrams("hershel")
    self.assertEqual(r, ['hershel'])

    _, r = self.anagrams2.get_anagrams("hershey")
    self.assertEqual(r, ['hershey'])

    _, r = self.anagrams2.get_anagrams("hertz")
    self.assertEqual(r, ['hertz'])

    _, r = self.anagrams2.get_anagrams("hertzog")
    self.assertEqual(r, ['hertzog'])

    _, r = self.anagrams2.get_anagrams("hesitant")
    self.assertEqual(r, ['hesitant'])

    _, r = self.anagrams2.get_anagrams("hesitantly")
    self.assertEqual(r, ['hesitantly'])

    _, r = self.anagrams2.get_anagrams("hesitate")
    self.assertEqual(r, ['hesitate'])

    _, r = self.anagrams2.get_anagrams("hesitated")
    self.assertEqual(r, ['hesitated'])

    _, r = self.anagrams2.get_anagrams("hesitates")
    self.assertEqual(r, ['hesitates'])

    _, r = self.anagrams2.get_anagrams("hesitating")
    self.assertEqual(r, ['hesitating'])

    _, r = self.anagrams2.get_anagrams("hesitatingly")
    self.assertEqual(r, ['hesitatingly'])

    _, r = self.anagrams2.get_anagrams("hesitation")
    self.assertEqual(r, ['hesitation'])

    _, r = self.anagrams2.get_anagrams("hesitations")
    self.assertEqual(r, ['hesitations'])

    _, r = self.anagrams2.get_anagrams("hesperus")
    self.assertEqual(r, ['hesperus'])

    _, r = self.anagrams2.get_anagrams("hess")
    self.assertEqual(r, ['hess'])

    _, r = self.anagrams2.get_anagrams("hesse")
    self.assertEqual(r, ['hesse'])

    _, r = self.anagrams2.get_anagrams("hessian")
    self.assertEqual(r, ['hessian'])

    _, r = self.anagrams2.get_anagrams("hessians")
    self.assertEqual(r, ['hessians'])

    _, r = self.anagrams2.get_anagrams("hester")
    self.assertEqual(r, ['esther', 'ethers', 'hester', 'threes'])

    _, r = self.anagrams2.get_anagrams("heterogeneity")
    self.assertEqual(r, ['heterogeneity'])

    _, r = self.anagrams2.get_anagrams("heterogeneous")
    self.assertEqual(r, ['heterogeneous'])

    _, r = self.anagrams2.get_anagrams("heterogeneously")
    self.assertEqual(r, ['heterogeneously'])

    _, r = self.anagrams2.get_anagrams("heterogeneousness")
    self.assertEqual(r, ['heterogeneousness'])

    _, r = self.anagrams2.get_anagrams("heterogenous")
    self.assertEqual(r, ['heterogenous'])

    _, r = self.anagrams2.get_anagrams("heterosexual")
    self.assertEqual(r, ['heterosexual'])

    _, r = self.anagrams2.get_anagrams("hetman")
    self.assertEqual(r, ['anthem', 'hetman'])

    _, r = self.anagrams2.get_anagrams("hettie")
    self.assertEqual(r, ['hettie'])

    _, r = self.anagrams2.get_anagrams("hetty")
    self.assertEqual(r, ['hetty'])

    _, r = self.anagrams2.get_anagrams("heublein")
    self.assertEqual(r, ['heublein'])

    _, r = self.anagrams2.get_anagrams("heuristic")
    self.assertEqual(r, ['heuristic'])

    _, r = self.anagrams2.get_anagrams("heuristically")
    self.assertEqual(r, ['heuristically'])

    _, r = self.anagrams2.get_anagrams("heuristics")
    self.assertEqual(r, ['heuristics'])

    _, r = self.anagrams2.get_anagrams("heusen")
    self.assertEqual(r, ['heusen'])

    _, r = self.anagrams2.get_anagrams("heuser")
    self.assertEqual(r, ['heuser'])

    _, r = self.anagrams2.get_anagrams("hew")
    self.assertEqual(r, ['hew'])

    _, r = self.anagrams2.get_anagrams("hewed")
    self.assertEqual(r, ['hewed'])

    _, r = self.anagrams2.get_anagrams("hewer")
    self.assertEqual(r, ['hewer', 'where'])

    _, r = self.anagrams2.get_anagrams("hewett")
    self.assertEqual(r, ['hewett'])

    _, r = self.anagrams2.get_anagrams("hewitt")
    self.assertEqual(r, ['hewitt'])

    _, r = self.anagrams2.get_anagrams("hewlett")
    self.assertEqual(r, ['hewlett'])

    _, r = self.anagrams2.get_anagrams("hews")
    self.assertEqual(r, ['hews'])

    _, r = self.anagrams2.get_anagrams("hex")
    self.assertEqual(r, ['hex'])

    _, r = self.anagrams2.get_anagrams("hexadecimal")
    self.assertEqual(r, ['hexadecimal'])

    _, r = self.anagrams2.get_anagrams("hexagon")
    self.assertEqual(r, ['hexagon'])

    _, r = self.anagrams2.get_anagrams("hexagonal")
    self.assertEqual(r, ['hexagonal'])

    _, r = self.anagrams2.get_anagrams("hexagonally")
    self.assertEqual(r, ['hexagonally'])

    _, r = self.anagrams2.get_anagrams("hexagons")
    self.assertEqual(r, ['hexagons'])

    _, r = self.anagrams2.get_anagrams("hey")
    self.assertEqual(r, ['hey'])

    _, r = self.anagrams2.get_anagrams("heywood")
    self.assertEqual(r, ['heywood'])

    _, r = self.anagrams2.get_anagrams("hi")
    self.assertEqual(r, ['hi'])

    _, r = self.anagrams2.get_anagrams("hiatt")
    self.assertEqual(r, ['hiatt'])

    _, r = self.anagrams2.get_anagrams("hiawatha")
    self.assertEqual(r, ['hiawatha'])

    _, r = self.anagrams2.get_anagrams("hibbard")
    self.assertEqual(r, ['hibbard'])

    _, r = self.anagrams2.get_anagrams("hibernate")
    self.assertEqual(r, ['hibernate'])

    _, r = self.anagrams2.get_anagrams("hibernia")
    self.assertEqual(r, ['hibernia'])

    _, r = self.anagrams2.get_anagrams("hick")
    self.assertEqual(r, ['hick'])

    _, r = self.anagrams2.get_anagrams("hickey")
    self.assertEqual(r, ['hickey'])

    _, r = self.anagrams2.get_anagrams("hickeys")
    self.assertEqual(r, ['hickeys'])

    _, r = self.anagrams2.get_anagrams("hickman")
    self.assertEqual(r, ['hickman'])

    _, r = self.anagrams2.get_anagrams("hickok")
    self.assertEqual(r, ['hickok'])

    _, r = self.anagrams2.get_anagrams("hickory")
    self.assertEqual(r, ['hickory'])

    _, r = self.anagrams2.get_anagrams("hicks")
    self.assertEqual(r, ['hicks'])

    _, r = self.anagrams2.get_anagrams("hid")
    self.assertEqual(r, ['hid'])

    _, r = self.anagrams2.get_anagrams("hidden")
    self.assertEqual(r, ['hidden'])

    _, r = self.anagrams2.get_anagrams("hide")
    self.assertEqual(r, ['hide'])

    _, r = self.anagrams2.get_anagrams("hideous")
    self.assertEqual(r, ['hideous'])

    _, r = self.anagrams2.get_anagrams("hideously")
    self.assertEqual(r, ['hideously'])

    _, r = self.anagrams2.get_anagrams("hideousness")
    self.assertEqual(r, ['hideousness'])

    _, r = self.anagrams2.get_anagrams("hideout")
    self.assertEqual(r, ['hideout'])

    _, r = self.anagrams2.get_anagrams("hideouts")
    self.assertEqual(r, ['hideouts'])

    _, r = self.anagrams2.get_anagrams("hides")
    self.assertEqual(r, ['hides', 'shied'])

    _, r = self.anagrams2.get_anagrams("hiding")
    self.assertEqual(r, ['hiding'])

    _, r = self.anagrams2.get_anagrams("hierarchal")
    self.assertEqual(r, ['hierarchal'])

    _, r = self.anagrams2.get_anagrams("hierarchic")
    self.assertEqual(r, ['hierarchic'])

    _, r = self.anagrams2.get_anagrams("hierarchical")
    self.assertEqual(r, ['hierarchical'])

    _, r = self.anagrams2.get_anagrams("hierarchically")
    self.assertEqual(r, ['hierarchically'])

    _, r = self.anagrams2.get_anagrams("hierarchies")
    self.assertEqual(r, ['hierarchies'])

    _, r = self.anagrams2.get_anagrams("hierarchy")
    self.assertEqual(r, ['hierarchy'])

    _, r = self.anagrams2.get_anagrams("hieronymus")
    self.assertEqual(r, ['hieronymus'])

    _, r = self.anagrams2.get_anagrams("higgins")
    self.assertEqual(r, ['higgins', 'sighing'])

    _, r = self.anagrams2.get_anagrams("high")
    self.assertEqual(r, ['high'])

    _, r = self.anagrams2.get_anagrams("higher")
    self.assertEqual(r, ['higher'])

    _, r = self.anagrams2.get_anagrams("highest")
    self.assertEqual(r, ['heights', 'highest'])

    _, r = self.anagrams2.get_anagrams("highfield")
    self.assertEqual(r, ['highfield'])

    _, r = self.anagrams2.get_anagrams("highland")
    self.assertEqual(r, ['highland'])

    _, r = self.anagrams2.get_anagrams("highlander")
    self.assertEqual(r, ['highlander'])

    _, r = self.anagrams2.get_anagrams("highlands")
    self.assertEqual(r, ['highlands'])

    _, r = self.anagrams2.get_anagrams("highlight")
    self.assertEqual(r, ['highlight'])

    _, r = self.anagrams2.get_anagrams("highlighted")
    self.assertEqual(r, ['highlighted'])

    _, r = self.anagrams2.get_anagrams("highlighting")
    self.assertEqual(r, ['highlighting'])

    _, r = self.anagrams2.get_anagrams("highlights")
    self.assertEqual(r, ['highlights'])

    _, r = self.anagrams2.get_anagrams("highly")
    self.assertEqual(r, ['highly'])

    _, r = self.anagrams2.get_anagrams("highness")
    self.assertEqual(r, ['highness'])

    _, r = self.anagrams2.get_anagrams("highnesses")
    self.assertEqual(r, ['highnesses'])

    _, r = self.anagrams2.get_anagrams("highway")
    self.assertEqual(r, ['highway'])

    _, r = self.anagrams2.get_anagrams("highwayman")
    self.assertEqual(r, ['highwayman'])

    _, r = self.anagrams2.get_anagrams("highwaymen")
    self.assertEqual(r, ['highwaymen'])

    _, r = self.anagrams2.get_anagrams("highways")
    self.assertEqual(r, ['highways'])

    _, r = self.anagrams2.get_anagrams("hijack")
    self.assertEqual(r, ['hijack'])

    _, r = self.anagrams2.get_anagrams("hijacked")
    self.assertEqual(r, ['hijacked'])

    _, r = self.anagrams2.get_anagrams("hike")
    self.assertEqual(r, ['hike'])

    _, r = self.anagrams2.get_anagrams("hiked")
    self.assertEqual(r, ['hiked'])

    _, r = self.anagrams2.get_anagrams("hiker")
    self.assertEqual(r, ['hiker'])

    _, r = self.anagrams2.get_anagrams("hikes")
    self.assertEqual(r, ['hikes', 'sheik'])

    _, r = self.anagrams2.get_anagrams("hiking")
    self.assertEqual(r, ['hiking'])

    _, r = self.anagrams2.get_anagrams("hilarious")
    self.assertEqual(r, ['hilarious'])

    _, r = self.anagrams2.get_anagrams("hilariously")
    self.assertEqual(r, ['hilariously'])

    _, r = self.anagrams2.get_anagrams("hilarity")
    self.assertEqual(r, ['hilarity'])

    _, r = self.anagrams2.get_anagrams("hilbert")
    self.assertEqual(r, ['hilbert'])

    _, r = self.anagrams2.get_anagrams("hildebrand")
    self.assertEqual(r, ['hildebrand'])

    _, r = self.anagrams2.get_anagrams("hill")
    self.assertEqual(r, ['hill'])

    _, r = self.anagrams2.get_anagrams("hillary")
    self.assertEqual(r, ['hillary'])

    _, r = self.anagrams2.get_anagrams("hillbilly")
    self.assertEqual(r, ['hillbilly'])

    _, r = self.anagrams2.get_anagrams("hillcrest")
    self.assertEqual(r, ['hillcrest'])

    _, r = self.anagrams2.get_anagrams("hillel")
    self.assertEqual(r, ['hillel'])

    _, r = self.anagrams2.get_anagrams("hillock")
    self.assertEqual(r, ['hillock'])

    _, r = self.anagrams2.get_anagrams("hills")
    self.assertEqual(r, ['hills', 'shill'])

    _, r = self.anagrams2.get_anagrams("hillsboro")
    self.assertEqual(r, ['hillsboro'])

    _, r = self.anagrams2.get_anagrams("hillsdale")
    self.assertEqual(r, ['hillsdale'])

    _, r = self.anagrams2.get_anagrams("hillside")
    self.assertEqual(r, ['hillside'])

    _, r = self.anagrams2.get_anagrams("hillsides")
    self.assertEqual(r, ['hillsides'])

    _, r = self.anagrams2.get_anagrams("hilltop")
    self.assertEqual(r, ['hilltop'])

    _, r = self.anagrams2.get_anagrams("hilltops")
    self.assertEqual(r, ['hilltops'])

    _, r = self.anagrams2.get_anagrams("hilt")
    self.assertEqual(r, ['hilt'])

    _, r = self.anagrams2.get_anagrams("hilton")
    self.assertEqual(r, ['hilton'])

    _, r = self.anagrams2.get_anagrams("hilts")
    self.assertEqual(r, ['hilts'])

    _, r = self.anagrams2.get_anagrams("him")
    self.assertEqual(r, ['him'])

    _, r = self.anagrams2.get_anagrams("himalaya")
    self.assertEqual(r, ['himalaya'])

    _, r = self.anagrams2.get_anagrams("himalayas")
    self.assertEqual(r, ['himalayas'])

    _, r = self.anagrams2.get_anagrams("himmler")
    self.assertEqual(r, ['himmler'])

    _, r = self.anagrams2.get_anagrams("himself")
    self.assertEqual(r, ['flemish', 'himself'])

    _, r = self.anagrams2.get_anagrams("hind")
    self.assertEqual(r, ['hind'])

    _, r = self.anagrams2.get_anagrams("hinder")
    self.assertEqual(r, ['hinder'])

    _, r = self.anagrams2.get_anagrams("hindered")
    self.assertEqual(r, ['hindered'])

    _, r = self.anagrams2.get_anagrams("hindering")
    self.assertEqual(r, ['hindering'])

    _, r = self.anagrams2.get_anagrams("hinders")
    self.assertEqual(r, ['hinders'])

    _, r = self.anagrams2.get_anagrams("hindi")
    self.assertEqual(r, ['hindi'])

    _, r = self.anagrams2.get_anagrams("hindrance")
    self.assertEqual(r, ['hindrance'])

    _, r = self.anagrams2.get_anagrams("hindrances")
    self.assertEqual(r, ['hindrances'])

    _, r = self.anagrams2.get_anagrams("hindsight")
    self.assertEqual(r, ['hindsight'])

    _, r = self.anagrams2.get_anagrams("hindu")
    self.assertEqual(r, ['hindu'])

    _, r = self.anagrams2.get_anagrams("hinduism")
    self.assertEqual(r, ['hinduism'])

    _, r = self.anagrams2.get_anagrams("hindus")
    self.assertEqual(r, ['hindus'])

    _, r = self.anagrams2.get_anagrams("hindustan")
    self.assertEqual(r, ['hindustan'])

    _, r = self.anagrams2.get_anagrams("hines")
    self.assertEqual(r, ['hines', 'shine'])

    _, r = self.anagrams2.get_anagrams("hinge")
    self.assertEqual(r, ['hinge', 'neigh'])

    _, r = self.anagrams2.get_anagrams("hinged")
    self.assertEqual(r, ['hinged'])

    _, r = self.anagrams2.get_anagrams("hinges")
    self.assertEqual(r, ['hinges'])

    _, r = self.anagrams2.get_anagrams("hinkle")
    self.assertEqual(r, ['hinkle'])

    _, r = self.anagrams2.get_anagrams("hinman")
    self.assertEqual(r, ['hinman'])

    _, r = self.anagrams2.get_anagrams("hinsdale")
    self.assertEqual(r, ['hinsdale'])

    _, r = self.anagrams2.get_anagrams("hint")
    self.assertEqual(r, ['hint', 'thin'])

    _, r = self.anagrams2.get_anagrams("hinted")
    self.assertEqual(r, ['hinted'])

    _, r = self.anagrams2.get_anagrams("hinting")
    self.assertEqual(r, ['hinting'])

    _, r = self.anagrams2.get_anagrams("hints")
    self.assertEqual(r, ['hints'])

    _, r = self.anagrams2.get_anagrams("hip")
    self.assertEqual(r, ['hip', 'phi'])

    _, r = self.anagrams2.get_anagrams("hippo")
    self.assertEqual(r, ['hippo'])

    _, r = self.anagrams2.get_anagrams("hippocrates")
    self.assertEqual(r, ['hippocrates'])

    _, r = self.anagrams2.get_anagrams("hippocratic")
    self.assertEqual(r, ['hippocratic'])

    _, r = self.anagrams2.get_anagrams("hippopotamus")
    self.assertEqual(r, ['hippopotamus'])

    _, r = self.anagrams2.get_anagrams("hips")
    self.assertEqual(r, ['hips', 'ship'])

    _, r = self.anagrams2.get_anagrams("hiram")
    self.assertEqual(r, ['hiram'])

    _, r = self.anagrams2.get_anagrams("hire")
    self.assertEqual(r, ['heir', 'hire'])

    _, r = self.anagrams2.get_anagrams("hired")
    self.assertEqual(r, ['hired'])

    _, r = self.anagrams2.get_anagrams("hirer")
    self.assertEqual(r, ['hirer'])

    _, r = self.anagrams2.get_anagrams("hirers")
    self.assertEqual(r, ['hirers'])

    _, r = self.anagrams2.get_anagrams("hires")
    self.assertEqual(r, ['heirs', 'hires', 'shire'])

    _, r = self.anagrams2.get_anagrams("hirey")
    self.assertEqual(r, ['hirey'])

    _, r = self.anagrams2.get_anagrams("hiring")
    self.assertEqual(r, ['hiring'])

    _, r = self.anagrams2.get_anagrams("hirings")
    self.assertEqual(r, ['hirings'])

    _, r = self.anagrams2.get_anagrams("hiroshi")
    self.assertEqual(r, ['hiroshi'])

    _, r = self.anagrams2.get_anagrams("hiroshima")
    self.assertEqual(r, ['hiroshima'])

    _, r = self.anagrams2.get_anagrams("hirsch")
    self.assertEqual(r, ['hirsch'])

    _, r = self.anagrams2.get_anagrams("his")
    self.assertEqual(r, ['his'])

    _, r = self.anagrams2.get_anagrams("hispanic")
    self.assertEqual(r, ['hispanic'])

    _, r = self.anagrams2.get_anagrams("hispanicize")
    self.assertEqual(r, ['hispanicize'])

    _, r = self.anagrams2.get_anagrams("hispanicizes")
    self.assertEqual(r, ['hispanicizes'])

    _, r = self.anagrams2.get_anagrams("hispanics")
    self.assertEqual(r, ['hispanics'])

    _, r = self.anagrams2.get_anagrams("hiss")
    self.assertEqual(r, ['hiss'])

    _, r = self.anagrams2.get_anagrams("hissed")
    self.assertEqual(r, ['dishes', 'hissed'])

    _, r = self.anagrams2.get_anagrams("hisses")
    self.assertEqual(r, ['hisses'])

    _, r = self.anagrams2.get_anagrams("hissing")
    self.assertEqual(r, ['hissing'])

    _, r = self.anagrams2.get_anagrams("histogram")
    self.assertEqual(r, ['histogram'])

    _, r = self.anagrams2.get_anagrams("histograms")
    self.assertEqual(r, ['histograms'])

    _, r = self.anagrams2.get_anagrams("historian")
    self.assertEqual(r, ['historian'])

    _, r = self.anagrams2.get_anagrams("historians")
    self.assertEqual(r, ['historians'])

    _, r = self.anagrams2.get_anagrams("historic")
    self.assertEqual(r, ['historic'])

    _, r = self.anagrams2.get_anagrams("historical")
    self.assertEqual(r, ['historical'])

    _, r = self.anagrams2.get_anagrams("historically")
    self.assertEqual(r, ['historically'])

    _, r = self.anagrams2.get_anagrams("histories")
    self.assertEqual(r, ['histories'])

    _, r = self.anagrams2.get_anagrams("history")
    self.assertEqual(r, ['history'])

    _, r = self.anagrams2.get_anagrams("hit")
    self.assertEqual(r, ['hit'])

    _, r = self.anagrams2.get_anagrams("hitachi")
    self.assertEqual(r, ['hitachi'])

    _, r = self.anagrams2.get_anagrams("hitch")
    self.assertEqual(r, ['hitch'])

    _, r = self.anagrams2.get_anagrams("hitchcock")
    self.assertEqual(r, ['hitchcock'])

    _, r = self.anagrams2.get_anagrams("hitched")
    self.assertEqual(r, ['hitched'])

    _, r = self.anagrams2.get_anagrams("hitchhike")
    self.assertEqual(r, ['hitchhike'])

    _, r = self.anagrams2.get_anagrams("hitchhiked")
    self.assertEqual(r, ['hitchhiked'])

    _, r = self.anagrams2.get_anagrams("hitchhiker")
    self.assertEqual(r, ['hitchhiker'])

    _, r = self.anagrams2.get_anagrams("hitchhikers")
    self.assertEqual(r, ['hitchhikers'])

    _, r = self.anagrams2.get_anagrams("hitchhikes")
    self.assertEqual(r, ['hitchhikes'])

    _, r = self.anagrams2.get_anagrams("hitchhiking")
    self.assertEqual(r, ['hitchhiking'])

    _, r = self.anagrams2.get_anagrams("hitching")
    self.assertEqual(r, ['hitching'])

    _, r = self.anagrams2.get_anagrams("hither")
    self.assertEqual(r, ['hither'])

    _, r = self.anagrams2.get_anagrams("hitherto")
    self.assertEqual(r, ['hitherto'])

    _, r = self.anagrams2.get_anagrams("hitler")
    self.assertEqual(r, ['hitler'])

    _, r = self.anagrams2.get_anagrams("hitlerian")
    self.assertEqual(r, ['hitlerian'])

    _, r = self.anagrams2.get_anagrams("hitlerism")
    self.assertEqual(r, ['hitlerism'])

    _, r = self.anagrams2.get_anagrams("hitlerite")
    self.assertEqual(r, ['hitlerite'])

    _, r = self.anagrams2.get_anagrams("hitlerites")
    self.assertEqual(r, ['hitlerites'])

    _, r = self.anagrams2.get_anagrams("hits")
    self.assertEqual(r, ['hits', 'shit', 'this'])

    _, r = self.anagrams2.get_anagrams("hitter")
    self.assertEqual(r, ['hitter', 'tither'])

    _, r = self.anagrams2.get_anagrams("hitters")
    self.assertEqual(r, ['hitters'])

    _, r = self.anagrams2.get_anagrams("hitting")
    self.assertEqual(r, ['hitting', 'tithing'])

    _, r = self.anagrams2.get_anagrams("hive")
    self.assertEqual(r, ['hive'])

    _, r = self.anagrams2.get_anagrams("hoagland")
    self.assertEqual(r, ['hoagland'])

    _, r = self.anagrams2.get_anagrams("hoar")
    self.assertEqual(r, ['hoar'])

    _, r = self.anagrams2.get_anagrams("hoard")
    self.assertEqual(r, ['hoard', 'rhoda'])

    _, r = self.anagrams2.get_anagrams("hoarder")
    self.assertEqual(r, ['hoarder'])

    _, r = self.anagrams2.get_anagrams("hoarding")
    self.assertEqual(r, ['hoarding'])

    _, r = self.anagrams2.get_anagrams("hoariness")
    self.assertEqual(r, ['hoariness'])

    _, r = self.anagrams2.get_anagrams("hoarse")
    self.assertEqual(r, ['ashore', 'hoarse'])

    _, r = self.anagrams2.get_anagrams("hoarsely")
    self.assertEqual(r, ['hoarsely'])

    _, r = self.anagrams2.get_anagrams("hoarseness")
    self.assertEqual(r, ['hoarseness'])

    _, r = self.anagrams2.get_anagrams("hoary")
    self.assertEqual(r, ['hoary'])

    _, r = self.anagrams2.get_anagrams("hobart")
    self.assertEqual(r, ['hobart'])

    _, r = self.anagrams2.get_anagrams("hobbes")
    self.assertEqual(r, ['hobbes'])

    _, r = self.anagrams2.get_anagrams("hobbies")
    self.assertEqual(r, ['hobbies'])

    _, r = self.anagrams2.get_anagrams("hobble")
    self.assertEqual(r, ['hobble'])

    _, r = self.anagrams2.get_anagrams("hobbled")
    self.assertEqual(r, ['hobbled'])

    _, r = self.anagrams2.get_anagrams("hobbles")
    self.assertEqual(r, ['hobbles'])

    _, r = self.anagrams2.get_anagrams("hobbling")
    self.assertEqual(r, ['hobbling'])

    _, r = self.anagrams2.get_anagrams("hobbs")
    self.assertEqual(r, ['hobbs'])

    _, r = self.anagrams2.get_anagrams("hobby")
    self.assertEqual(r, ['hobby'])

    _, r = self.anagrams2.get_anagrams("hobbyhorse")
    self.assertEqual(r, ['hobbyhorse'])

    _, r = self.anagrams2.get_anagrams("hobbyist")
    self.assertEqual(r, ['hobbyist'])

    _, r = self.anagrams2.get_anagrams("hobbyists")
    self.assertEqual(r, ['hobbyists'])

    _, r = self.anagrams2.get_anagrams("hobday")
    self.assertEqual(r, ['hobday'])

    _, r = self.anagrams2.get_anagrams("hoboken")
    self.assertEqual(r, ['hoboken'])

    _, r = self.anagrams2.get_anagrams("hockey")
    self.assertEqual(r, ['hockey'])

    _, r = self.anagrams2.get_anagrams("hodgepodge")
    self.assertEqual(r, ['hodgepodge'])

    _, r = self.anagrams2.get_anagrams("hodges")
    self.assertEqual(r, ['hodges'])

    _, r = self.anagrams2.get_anagrams("hodgkin")
    self.assertEqual(r, ['hodgkin'])

    _, r = self.anagrams2.get_anagrams("hoe")
    self.assertEqual(r, ['hoe'])

    _, r = self.anagrams2.get_anagrams("hoes")
    self.assertEqual(r, ['hoes', 'hose', 'shoe'])

    _, r = self.anagrams2.get_anagrams("hoff")
    self.assertEqual(r, ['hoff'])

    _, r = self.anagrams2.get_anagrams("hoffman")
    self.assertEqual(r, ['hoffman'])

    _, r = self.anagrams2.get_anagrams("hog")
    self.assertEqual(r, ['hog'])

    _, r = self.anagrams2.get_anagrams("hogging")
    self.assertEqual(r, ['hogging'])

    _, r = self.anagrams2.get_anagrams("hogs")
    self.assertEqual(r, ['gosh', 'hogs'])

    _, r = self.anagrams2.get_anagrams("hoist")
    self.assertEqual(r, ['hoist'])

    _, r = self.anagrams2.get_anagrams("hoisted")
    self.assertEqual(r, ['hoisted'])

    _, r = self.anagrams2.get_anagrams("hoisting")
    self.assertEqual(r, ['hoisting'])

    _, r = self.anagrams2.get_anagrams("hoists")
    self.assertEqual(r, ['hoists'])

    _, r = self.anagrams2.get_anagrams("hokan")
    self.assertEqual(r, ['hokan'])

    _, r = self.anagrams2.get_anagrams("holbrook")
    self.assertEqual(r, ['holbrook'])

    _, r = self.anagrams2.get_anagrams("holcomb")
    self.assertEqual(r, ['holcomb'])

    _, r = self.anagrams2.get_anagrams("hold")
    self.assertEqual(r, ['hold'])

    _, r = self.anagrams2.get_anagrams("holden")
    self.assertEqual(r, ['holden'])

    _, r = self.anagrams2.get_anagrams("holder")
    self.assertEqual(r, ['holder'])

    _, r = self.anagrams2.get_anagrams("holders")
    self.assertEqual(r, ['holders'])

    _, r = self.anagrams2.get_anagrams("holding")
    self.assertEqual(r, ['holding'])

    _, r = self.anagrams2.get_anagrams("holdings")
    self.assertEqual(r, ['holdings'])

    _, r = self.anagrams2.get_anagrams("holds")
    self.assertEqual(r, ['holds'])

    _, r = self.anagrams2.get_anagrams("hole")
    self.assertEqual(r, ['hole'])

    _, r = self.anagrams2.get_anagrams("holed")
    self.assertEqual(r, ['holed'])

    _, r = self.anagrams2.get_anagrams("holes")
    self.assertEqual(r, ['holes'])

    _, r = self.anagrams2.get_anagrams("holiday")
    self.assertEqual(r, ['holiday'])

    _, r = self.anagrams2.get_anagrams("holidays")
    self.assertEqual(r, ['holidays'])

    _, r = self.anagrams2.get_anagrams("holies")
    self.assertEqual(r, ['holies'])

    _, r = self.anagrams2.get_anagrams("holiness")
    self.assertEqual(r, ['holiness'])

    _, r = self.anagrams2.get_anagrams("holistic")
    self.assertEqual(r, ['holistic'])

    _, r = self.anagrams2.get_anagrams("holland")
    self.assertEqual(r, ['holland'])

    _, r = self.anagrams2.get_anagrams("hollandaise")
    self.assertEqual(r, ['hollandaise'])

    _, r = self.anagrams2.get_anagrams("hollander")
    self.assertEqual(r, ['hollander'])

    _, r = self.anagrams2.get_anagrams("hollerith")
    self.assertEqual(r, ['hollerith'])

    _, r = self.anagrams2.get_anagrams("hollingsworth")
    self.assertEqual(r, ['hollingsworth'])

    _, r = self.anagrams2.get_anagrams("hollister")
    self.assertEqual(r, ['hollister'])

    _, r = self.anagrams2.get_anagrams("hollow")
    self.assertEqual(r, ['hollow'])

    _, r = self.anagrams2.get_anagrams("holloway")
    self.assertEqual(r, ['holloway'])

    _, r = self.anagrams2.get_anagrams("hollowed")
    self.assertEqual(r, ['hollowed'])

    _, r = self.anagrams2.get_anagrams("hollowing")
    self.assertEqual(r, ['hollowing'])

    _, r = self.anagrams2.get_anagrams("hollowly")
    self.assertEqual(r, ['hollowly'])

    _, r = self.anagrams2.get_anagrams("hollowness")
    self.assertEqual(r, ['hollowness'])

    _, r = self.anagrams2.get_anagrams("hollows")
    self.assertEqual(r, ['hollows'])

    _, r = self.anagrams2.get_anagrams("holly")
    self.assertEqual(r, ['holly'])

    _, r = self.anagrams2.get_anagrams("hollywood")
    self.assertEqual(r, ['hollywood'])

    _, r = self.anagrams2.get_anagrams("hollywoodize")
    self.assertEqual(r, ['hollywoodize'])

    _, r = self.anagrams2.get_anagrams("hollywoodizes")
    self.assertEqual(r, ['hollywoodizes'])

    _, r = self.anagrams2.get_anagrams("holm")
    self.assertEqual(r, ['holm'])

    _, r = self.anagrams2.get_anagrams("holman")
    self.assertEqual(r, ['holman'])

    _, r = self.anagrams2.get_anagrams("holmdel")
    self.assertEqual(r, ['holmdel'])

    _, r = self.anagrams2.get_anagrams("holmes")
    self.assertEqual(r, ['holmes'])

    _, r = self.anagrams2.get_anagrams("holocaust")
    self.assertEqual(r, ['holocaust'])

    _, r = self.anagrams2.get_anagrams("holocene")
    self.assertEqual(r, ['holocene'])

    _, r = self.anagrams2.get_anagrams("hologram")
    self.assertEqual(r, ['hologram'])

    _, r = self.anagrams2.get_anagrams("holograms")
    self.assertEqual(r, ['holograms'])

    _, r = self.anagrams2.get_anagrams("holst")
    self.assertEqual(r, ['holst', 'sloth'])

    _, r = self.anagrams2.get_anagrams("holstein")
    self.assertEqual(r, ['holstein'])

    _, r = self.anagrams2.get_anagrams("holy")
    self.assertEqual(r, ['holy'])

    _, r = self.anagrams2.get_anagrams("holyoke")
    self.assertEqual(r, ['holyoke'])

    _, r = self.anagrams2.get_anagrams("holzman")
    self.assertEqual(r, ['holzman'])

    _, r = self.anagrams2.get_anagrams("hom")
    self.assertEqual(r, ['hom', 'ohm'])

    _, r = self.anagrams2.get_anagrams("homage")
    self.assertEqual(r, ['homage'])

    _, r = self.anagrams2.get_anagrams("home")
    self.assertEqual(r, ['home'])

    _, r = self.anagrams2.get_anagrams("home-brew")
    self.assertEqual(r, ['home-brew'])

    _, r = self.anagrams2.get_anagrams("homed")
    self.assertEqual(r, ['homed'])

    _, r = self.anagrams2.get_anagrams("homeless")
    self.assertEqual(r, ['homeless'])

    _, r = self.anagrams2.get_anagrams("homely")
    self.assertEqual(r, ['homely'])

    _, r = self.anagrams2.get_anagrams("homemade")
    self.assertEqual(r, ['homemade'])

    _, r = self.anagrams2.get_anagrams("homemaker")
    self.assertEqual(r, ['homemaker'])

    _, r = self.anagrams2.get_anagrams("homemakers")
    self.assertEqual(r, ['homemakers'])

    _, r = self.anagrams2.get_anagrams("homeomorphic")
    self.assertEqual(r, ['homeomorphic'])

    _, r = self.anagrams2.get_anagrams("homeomorphism")
    self.assertEqual(r, ['homeomorphism'])

    _, r = self.anagrams2.get_anagrams("homeomorphisms")
    self.assertEqual(r, ['homeomorphisms'])

    _, r = self.anagrams2.get_anagrams("homeopath")
    self.assertEqual(r, ['homeopath'])

    _, r = self.anagrams2.get_anagrams("homeowner")
    self.assertEqual(r, ['homeowner'])

    _, r = self.anagrams2.get_anagrams("homer")
    self.assertEqual(r, ['homer'])

    _, r = self.anagrams2.get_anagrams("homeric")
    self.assertEqual(r, ['homeric'])

    _, r = self.anagrams2.get_anagrams("homers")
    self.assertEqual(r, ['homers'])

    _, r = self.anagrams2.get_anagrams("homes")
    self.assertEqual(r, ['homes'])

    _, r = self.anagrams2.get_anagrams("homesick")
    self.assertEqual(r, ['homesick'])

    _, r = self.anagrams2.get_anagrams("homesickness")
    self.assertEqual(r, ['homesickness'])

    _, r = self.anagrams2.get_anagrams("homespun")
    self.assertEqual(r, ['homespun'])

    _, r = self.anagrams2.get_anagrams("homestead")
    self.assertEqual(r, ['homestead'])

    _, r = self.anagrams2.get_anagrams("homesteader")
    self.assertEqual(r, ['homesteader'])

    _, r = self.anagrams2.get_anagrams("homesteaders")
    self.assertEqual(r, ['homesteaders'])

    _, r = self.anagrams2.get_anagrams("homesteads")
    self.assertEqual(r, ['homesteads'])

    _, r = self.anagrams2.get_anagrams("homeward")
    self.assertEqual(r, ['homeward'])

    _, r = self.anagrams2.get_anagrams("homewards")
    self.assertEqual(r, ['homewards'])

    _, r = self.anagrams2.get_anagrams("homework")
    self.assertEqual(r, ['homework'])

    _, r = self.anagrams2.get_anagrams("homicidal")
    self.assertEqual(r, ['homicidal'])

    _, r = self.anagrams2.get_anagrams("homicide")
    self.assertEqual(r, ['homicide'])

    _, r = self.anagrams2.get_anagrams("homing")
    self.assertEqual(r, ['homing'])

    _, r = self.anagrams2.get_anagrams("homo")
    self.assertEqual(r, ['homo'])

    _, r = self.anagrams2.get_anagrams("homogeneities")
    self.assertEqual(r, ['homogeneities'])

    _, r = self.anagrams2.get_anagrams("homogeneity")
    self.assertEqual(r, ['homogeneity'])

    _, r = self.anagrams2.get_anagrams("homogeneous")
    self.assertEqual(r, ['homogeneous'])

    _, r = self.anagrams2.get_anagrams("homogeneously")
    self.assertEqual(r, ['homogeneously'])

    _, r = self.anagrams2.get_anagrams("homogeneousness")
    self.assertEqual(r, ['homogeneousness'])

    _, r = self.anagrams2.get_anagrams("homomorphic")
    self.assertEqual(r, ['homomorphic'])

    _, r = self.anagrams2.get_anagrams("homomorphism")
    self.assertEqual(r, ['homomorphism'])

    _, r = self.anagrams2.get_anagrams("homomorphisms")
    self.assertEqual(r, ['homomorphisms'])

    _, r = self.anagrams2.get_anagrams("homosexual")
    self.assertEqual(r, ['homosexual'])

    _, r = self.anagrams2.get_anagrams("honda")
    self.assertEqual(r, ['honda'])

    _, r = self.anagrams2.get_anagrams("hondo")
    self.assertEqual(r, ['hondo'])

    _, r = self.anagrams2.get_anagrams("honduras")
    self.assertEqual(r, ['honduras'])

    _, r = self.anagrams2.get_anagrams("hone")
    self.assertEqual(r, ['hone'])

    _, r = self.anagrams2.get_anagrams("honed")
    self.assertEqual(r, ['honed'])

    _, r = self.anagrams2.get_anagrams("honer")
    self.assertEqual(r, ['heron', 'honer'])

    _, r = self.anagrams2.get_anagrams("hones")
    self.assertEqual(r, ['hones', 'shone'])

    _, r = self.anagrams2.get_anagrams("honest")
    self.assertEqual(r, ['honest'])

    _, r = self.anagrams2.get_anagrams("honestly")
    self.assertEqual(r, ['honestly'])

    _, r = self.anagrams2.get_anagrams("honesty")
    self.assertEqual(r, ['honesty'])

    _, r = self.anagrams2.get_anagrams("honey")
    self.assertEqual(r, ['honey'])

    _, r = self.anagrams2.get_anagrams("honeybee")
    self.assertEqual(r, ['honeybee'])

    _, r = self.anagrams2.get_anagrams("honeycomb")
    self.assertEqual(r, ['honeycomb'])

    _, r = self.anagrams2.get_anagrams("honeycombed")
    self.assertEqual(r, ['honeycombed'])

    _, r = self.anagrams2.get_anagrams("honeydew")
    self.assertEqual(r, ['honeydew'])

    _, r = self.anagrams2.get_anagrams("honeymoon")
    self.assertEqual(r, ['honeymoon'])

    _, r = self.anagrams2.get_anagrams("honeymooned")
    self.assertEqual(r, ['honeymooned'])

    _, r = self.anagrams2.get_anagrams("honeymooner")
    self.assertEqual(r, ['honeymooner'])

    _, r = self.anagrams2.get_anagrams("honeymooners")
    self.assertEqual(r, ['honeymooners'])

    _, r = self.anagrams2.get_anagrams("honeymooning")
    self.assertEqual(r, ['honeymooning'])

    _, r = self.anagrams2.get_anagrams("honeymoons")
    self.assertEqual(r, ['honeymoons'])

    _, r = self.anagrams2.get_anagrams("honeysuckle")
    self.assertEqual(r, ['honeysuckle'])

    _, r = self.anagrams2.get_anagrams("honeywell")
    self.assertEqual(r, ['honeywell'])

    _, r = self.anagrams2.get_anagrams("honing")
    self.assertEqual(r, ['honing'])

    _, r = self.anagrams2.get_anagrams("honolulu")
    self.assertEqual(r, ['honolulu'])

    _, r = self.anagrams2.get_anagrams("honor")
    self.assertEqual(r, ['honor'])

    _, r = self.anagrams2.get_anagrams("honorable")
    self.assertEqual(r, ['honorable'])

    _, r = self.anagrams2.get_anagrams("honorableness")
    self.assertEqual(r, ['honorableness'])

    _, r = self.anagrams2.get_anagrams("honorably")
    self.assertEqual(r, ['honorably'])

    _, r = self.anagrams2.get_anagrams("honoraries")
    self.assertEqual(r, ['honoraries'])

    _, r = self.anagrams2.get_anagrams("honorarium")
    self.assertEqual(r, ['honorarium'])

    _, r = self.anagrams2.get_anagrams("honorary")
    self.assertEqual(r, ['honorary'])

    _, r = self.anagrams2.get_anagrams("honored")
    self.assertEqual(r, ['honored'])

    _, r = self.anagrams2.get_anagrams("honorer")
    self.assertEqual(r, ['honorer'])

    _, r = self.anagrams2.get_anagrams("honoring")
    self.assertEqual(r, ['honoring'])

    _, r = self.anagrams2.get_anagrams("honors")
    self.assertEqual(r, ['honors'])

    _, r = self.anagrams2.get_anagrams("honshu")
    self.assertEqual(r, ['honshu'])

    _, r = self.anagrams2.get_anagrams("hood")
    self.assertEqual(r, ['hood'])

    _, r = self.anagrams2.get_anagrams("hooded")
    self.assertEqual(r, ['hooded'])

    _, r = self.anagrams2.get_anagrams("hoodlum")
    self.assertEqual(r, ['hoodlum'])

    _, r = self.anagrams2.get_anagrams("hoods")
    self.assertEqual(r, ['hoods'])

    _, r = self.anagrams2.get_anagrams("hoodwink")
    self.assertEqual(r, ['hoodwink'])

    _, r = self.anagrams2.get_anagrams("hoodwinked")
    self.assertEqual(r, ['hoodwinked'])

    _, r = self.anagrams2.get_anagrams("hoodwinking")
    self.assertEqual(r, ['hoodwinking'])

    _, r = self.anagrams2.get_anagrams("hoodwinks")
    self.assertEqual(r, ['hoodwinks'])

    _, r = self.anagrams2.get_anagrams("hoof")
    self.assertEqual(r, ['hoof'])

    _, r = self.anagrams2.get_anagrams("hoofs")
    self.assertEqual(r, ['hoofs'])

    _, r = self.anagrams2.get_anagrams("hook")
    self.assertEqual(r, ['hook'])

    _, r = self.anagrams2.get_anagrams("hooked")
    self.assertEqual(r, ['hooked'])

    _, r = self.anagrams2.get_anagrams("hooker")
    self.assertEqual(r, ['hooker'])

    _, r = self.anagrams2.get_anagrams("hookers")
    self.assertEqual(r, ['hookers'])

    _, r = self.anagrams2.get_anagrams("hooking")
    self.assertEqual(r, ['hooking'])

    _, r = self.anagrams2.get_anagrams("hooks")
    self.assertEqual(r, ['hooks', 'shook'])

    _, r = self.anagrams2.get_anagrams("hookup")
    self.assertEqual(r, ['hookup'])

    _, r = self.anagrams2.get_anagrams("hookups")
    self.assertEqual(r, ['hookups'])

    _, r = self.anagrams2.get_anagrams("hoop")
    self.assertEqual(r, ['hoop'])

    _, r = self.anagrams2.get_anagrams("hooper")
    self.assertEqual(r, ['hooper'])

    _, r = self.anagrams2.get_anagrams("hoops")
    self.assertEqual(r, ['hoops'])

    _, r = self.anagrams2.get_anagrams("hoosier")
    self.assertEqual(r, ['hoosier'])

    _, r = self.anagrams2.get_anagrams("hoosierize")
    self.assertEqual(r, ['hoosierize'])

    _, r = self.anagrams2.get_anagrams("hoosierizes")
    self.assertEqual(r, ['hoosierizes'])

    _, r = self.anagrams2.get_anagrams("hoot")
    self.assertEqual(r, ['hoot'])

    _, r = self.anagrams2.get_anagrams("hooted")
    self.assertEqual(r, ['hooted'])

    _, r = self.anagrams2.get_anagrams("hooter")
    self.assertEqual(r, ['hooter'])

    _, r = self.anagrams2.get_anagrams("hooting")
    self.assertEqual(r, ['hooting'])

    _, r = self.anagrams2.get_anagrams("hoots")
    self.assertEqual(r, ['hoots', 'shoot', 'sooth'])

    _, r = self.anagrams2.get_anagrams("hoover")
    self.assertEqual(r, ['hoover'])

    _, r = self.anagrams2.get_anagrams("hooverize")
    self.assertEqual(r, ['hooverize'])

    _, r = self.anagrams2.get_anagrams("hooverizes")
    self.assertEqual(r, ['hooverizes'])

    _, r = self.anagrams2.get_anagrams("hooves")
    self.assertEqual(r, ['hooves'])

    _, r = self.anagrams2.get_anagrams("hop")
    self.assertEqual(r, ['hop'])

    _, r = self.anagrams2.get_anagrams("hope")
    self.assertEqual(r, ['hope'])

    _, r = self.anagrams2.get_anagrams("hoped")
    self.assertEqual(r, ['hoped'])

    _, r = self.anagrams2.get_anagrams("hopeful")
    self.assertEqual(r, ['hopeful'])

    _, r = self.anagrams2.get_anagrams("hopefully")
    self.assertEqual(r, ['hopefully'])

    _, r = self.anagrams2.get_anagrams("hopefulness")
    self.assertEqual(r, ['hopefulness'])

    _, r = self.anagrams2.get_anagrams("hopefuls")
    self.assertEqual(r, ['hopefuls'])

    _, r = self.anagrams2.get_anagrams("hopeless")
    self.assertEqual(r, ['hopeless'])

    _, r = self.anagrams2.get_anagrams("hopelessly")
    self.assertEqual(r, ['hopelessly'])

    _, r = self.anagrams2.get_anagrams("hopelessness")
    self.assertEqual(r, ['hopelessness'])

    _, r = self.anagrams2.get_anagrams("hopes")
    self.assertEqual(r, ['hopes'])

    _, r = self.anagrams2.get_anagrams("hopi")
    self.assertEqual(r, ['hopi'])

    _, r = self.anagrams2.get_anagrams("hoping")
    self.assertEqual(r, ['hoping'])

    _, r = self.anagrams2.get_anagrams("hopkins")
    self.assertEqual(r, ['hopkins'])

    _, r = self.anagrams2.get_anagrams("hopkinsian")
    self.assertEqual(r, ['hopkinsian'])

    _, r = self.anagrams2.get_anagrams("hopper")
    self.assertEqual(r, ['hopper'])

    _, r = self.anagrams2.get_anagrams("hoppers")
    self.assertEqual(r, ['hoppers', 'shopper'])

    _, r = self.anagrams2.get_anagrams("hopping")
    self.assertEqual(r, ['hopping'])

    _, r = self.anagrams2.get_anagrams("hops")
    self.assertEqual(r, ['hops', 'posh', 'shop'])

    _, r = self.anagrams2.get_anagrams("horace")
    self.assertEqual(r, ['horace'])

    _, r = self.anagrams2.get_anagrams("horatio")
    self.assertEqual(r, ['horatio'])

    _, r = self.anagrams2.get_anagrams("horde")
    self.assertEqual(r, ['horde', 'rhode'])

    _, r = self.anagrams2.get_anagrams("hordes")
    self.assertEqual(r, ['hordes', 'rhodes'])

    _, r = self.anagrams2.get_anagrams("horizon")
    self.assertEqual(r, ['horizon'])

    _, r = self.anagrams2.get_anagrams("horizons")
    self.assertEqual(r, ['horizons'])

    _, r = self.anagrams2.get_anagrams("horizontal")
    self.assertEqual(r, ['horizontal'])

    _, r = self.anagrams2.get_anagrams("horizontally")
    self.assertEqual(r, ['horizontally'])

    _, r = self.anagrams2.get_anagrams("hormone")
    self.assertEqual(r, ['hormone'])

    _, r = self.anagrams2.get_anagrams("hormones")
    self.assertEqual(r, ['hormones'])

    _, r = self.anagrams2.get_anagrams("horn")
    self.assertEqual(r, ['horn'])

    _, r = self.anagrams2.get_anagrams("hornblower")
    self.assertEqual(r, ['hornblower'])

    _, r = self.anagrams2.get_anagrams("horned")
    self.assertEqual(r, ['horned'])

    _, r = self.anagrams2.get_anagrams("hornet")
    self.assertEqual(r, ['hornet', 'throne'])

    _, r = self.anagrams2.get_anagrams("hornets")
    self.assertEqual(r, ['hornets', 'shorten', 'thrones'])

    _, r = self.anagrams2.get_anagrams("horns")
    self.assertEqual(r, ['horns', 'shorn'])

    _, r = self.anagrams2.get_anagrams("horny")
    self.assertEqual(r, ['horny'])

    _, r = self.anagrams2.get_anagrams("horowitz")
    self.assertEqual(r, ['horowitz'])

    _, r = self.anagrams2.get_anagrams("horrendous")
    self.assertEqual(r, ['horrendous'])

    _, r = self.anagrams2.get_anagrams("horrendously")
    self.assertEqual(r, ['horrendously'])

    _, r = self.anagrams2.get_anagrams("horrible")
    self.assertEqual(r, ['horrible'])

    _, r = self.anagrams2.get_anagrams("horribleness")
    self.assertEqual(r, ['horribleness'])

    _, r = self.anagrams2.get_anagrams("horribly")
    self.assertEqual(r, ['horribly'])

    _, r = self.anagrams2.get_anagrams("horrid")
    self.assertEqual(r, ['horrid'])

    _, r = self.anagrams2.get_anagrams("horridly")
    self.assertEqual(r, ['horridly'])

    _, r = self.anagrams2.get_anagrams("horrified")
    self.assertEqual(r, ['horrified'])

    _, r = self.anagrams2.get_anagrams("horrifies")
    self.assertEqual(r, ['horrifies'])

    _, r = self.anagrams2.get_anagrams("horrify")
    self.assertEqual(r, ['horrify'])

    _, r = self.anagrams2.get_anagrams("horrifying")
    self.assertEqual(r, ['horrifying'])

    _, r = self.anagrams2.get_anagrams("horror")
    self.assertEqual(r, ['horror'])

    _, r = self.anagrams2.get_anagrams("horrors")
    self.assertEqual(r, ['horrors'])

    _, r = self.anagrams2.get_anagrams("horse")
    self.assertEqual(r, ['horse', 'shore'])

    _, r = self.anagrams2.get_anagrams("horseback")
    self.assertEqual(r, ['horseback'])

    _, r = self.anagrams2.get_anagrams("horseflesh")
    self.assertEqual(r, ['horseflesh'])

    _, r = self.anagrams2.get_anagrams("horsefly")
    self.assertEqual(r, ['horsefly'])

    _, r = self.anagrams2.get_anagrams("horseman")
    self.assertEqual(r, ['horseman'])

    _, r = self.anagrams2.get_anagrams("horseplay")
    self.assertEqual(r, ['horseplay'])

    _, r = self.anagrams2.get_anagrams("horsepower")
    self.assertEqual(r, ['horsepower'])

    _, r = self.anagrams2.get_anagrams("horses")
    self.assertEqual(r, ['horses', 'shores'])

    _, r = self.anagrams2.get_anagrams("horseshoe")
    self.assertEqual(r, ['horseshoe'])

    _, r = self.anagrams2.get_anagrams("horseshoer")
    self.assertEqual(r, ['horseshoer'])

    _, r = self.anagrams2.get_anagrams("horticulture")
    self.assertEqual(r, ['horticulture'])

    _, r = self.anagrams2.get_anagrams("horton")
    self.assertEqual(r, ['horton'])

    _, r = self.anagrams2.get_anagrams("horus")
    self.assertEqual(r, ['horus', 'hours'])

    _, r = self.anagrams2.get_anagrams("hose")
    self.assertEqual(r, ['hoes', 'hose', 'shoe'])

    _, r = self.anagrams2.get_anagrams("hoses")
    self.assertEqual(r, ['hoses', 'shoes'])

    _, r = self.anagrams2.get_anagrams("hospitable")
    self.assertEqual(r, ['hospitable'])

    _, r = self.anagrams2.get_anagrams("hospitably")
    self.assertEqual(r, ['hospitably'])

    _, r = self.anagrams2.get_anagrams("hospital")
    self.assertEqual(r, ['hospital'])

    _, r = self.anagrams2.get_anagrams("hospitality")
    self.assertEqual(r, ['hospitality'])

    _, r = self.anagrams2.get_anagrams("hospitalize")
    self.assertEqual(r, ['hospitalize'])

    _, r = self.anagrams2.get_anagrams("hospitalized")
    self.assertEqual(r, ['hospitalized'])

    _, r = self.anagrams2.get_anagrams("hospitalizes")
    self.assertEqual(r, ['hospitalizes'])

    _, r = self.anagrams2.get_anagrams("hospitalizing")
    self.assertEqual(r, ['hospitalizing'])

    _, r = self.anagrams2.get_anagrams("hospitals")
    self.assertEqual(r, ['hospitals'])

    _, r = self.anagrams2.get_anagrams("host")
    self.assertEqual(r, ['host', 'shot'])

    _, r = self.anagrams2.get_anagrams("hostage")
    self.assertEqual(r, ['hostage'])

    _, r = self.anagrams2.get_anagrams("hostages")
    self.assertEqual(r, ['hostages'])

    _, r = self.anagrams2.get_anagrams("hosted")
    self.assertEqual(r, ['hosted'])

    _, r = self.anagrams2.get_anagrams("hostess")
    self.assertEqual(r, ['hostess'])

    _, r = self.anagrams2.get_anagrams("hostesses")
    self.assertEqual(r, ['hostesses'])

    _, r = self.anagrams2.get_anagrams("hostile")
    self.assertEqual(r, ['hostile'])

    _, r = self.anagrams2.get_anagrams("hostilely")
    self.assertEqual(r, ['hostilely'])

    _, r = self.anagrams2.get_anagrams("hostilities")
    self.assertEqual(r, ['hostilities'])

    _, r = self.anagrams2.get_anagrams("hostility")
    self.assertEqual(r, ['hostility'])

    _, r = self.anagrams2.get_anagrams("hosting")
    self.assertEqual(r, ['hosting'])

    _, r = self.anagrams2.get_anagrams("hosts")
    self.assertEqual(r, ['hosts', 'shots'])

    _, r = self.anagrams2.get_anagrams("hot")
    self.assertEqual(r, ['hot'])

    _, r = self.anagrams2.get_anagrams("hotel")
    self.assertEqual(r, ['hotel'])

    _, r = self.anagrams2.get_anagrams("hotels")
    self.assertEqual(r, ['hotels'])

    _, r = self.anagrams2.get_anagrams("hotly")
    self.assertEqual(r, ['hotly'])

    _, r = self.anagrams2.get_anagrams("hotness")
    self.assertEqual(r, ['hotness'])

    _, r = self.anagrams2.get_anagrams("hottentot")
    self.assertEqual(r, ['hottentot'])

    _, r = self.anagrams2.get_anagrams("hotter")
    self.assertEqual(r, ['hotter'])

    _, r = self.anagrams2.get_anagrams("hottest")
    self.assertEqual(r, ['hottest'])

    _, r = self.anagrams2.get_anagrams("houdaille")
    self.assertEqual(r, ['houdaille'])

    _, r = self.anagrams2.get_anagrams("houdini")
    self.assertEqual(r, ['houdini'])

    _, r = self.anagrams2.get_anagrams("houghton")
    self.assertEqual(r, ['houghton'])

    _, r = self.anagrams2.get_anagrams("hound")
    self.assertEqual(r, ['hound'])

    _, r = self.anagrams2.get_anagrams("hounded")
    self.assertEqual(r, ['hounded'])

    _, r = self.anagrams2.get_anagrams("hounding")
    self.assertEqual(r, ['hounding'])

    _, r = self.anagrams2.get_anagrams("hounds")
    self.assertEqual(r, ['hounds', 'hudson'])

    _, r = self.anagrams2.get_anagrams("hour")
    self.assertEqual(r, ['hour'])

    _, r = self.anagrams2.get_anagrams("hourglass")
    self.assertEqual(r, ['hourglass'])

    _, r = self.anagrams2.get_anagrams("hourly")
    self.assertEqual(r, ['hourly'])

    _, r = self.anagrams2.get_anagrams("hours")
    self.assertEqual(r, ['horus', 'hours'])

    _, r = self.anagrams2.get_anagrams("house")
    self.assertEqual(r, ['house'])

    _, r = self.anagrams2.get_anagrams("houseboat")
    self.assertEqual(r, ['boathouse', 'houseboat'])

    _, r = self.anagrams2.get_anagrams("housebroken")
    self.assertEqual(r, ['housebroken'])

    _, r = self.anagrams2.get_anagrams("housed")
    self.assertEqual(r, ['housed'])

    _, r = self.anagrams2.get_anagrams("houseflies")
    self.assertEqual(r, ['houseflies'])

    _, r = self.anagrams2.get_anagrams("housefly")
    self.assertEqual(r, ['housefly'])

    _, r = self.anagrams2.get_anagrams("household")
    self.assertEqual(r, ['household'])

    _, r = self.anagrams2.get_anagrams("householder")
    self.assertEqual(r, ['householder'])

    _, r = self.anagrams2.get_anagrams("householders")
    self.assertEqual(r, ['householders'])

    _, r = self.anagrams2.get_anagrams("households")
    self.assertEqual(r, ['households'])

    _, r = self.anagrams2.get_anagrams("housekeeper")
    self.assertEqual(r, ['housekeeper'])

    _, r = self.anagrams2.get_anagrams("housekeepers")
    self.assertEqual(r, ['housekeepers'])

    _, r = self.anagrams2.get_anagrams("housekeeping")
    self.assertEqual(r, ['housekeeping'])

    _, r = self.anagrams2.get_anagrams("houses")
    self.assertEqual(r, ['houses'])

    _, r = self.anagrams2.get_anagrams("housetop")
    self.assertEqual(r, ['housetop'])

    _, r = self.anagrams2.get_anagrams("housetops")
    self.assertEqual(r, ['housetops'])

    _, r = self.anagrams2.get_anagrams("housewife")
    self.assertEqual(r, ['housewife'])

    _, r = self.anagrams2.get_anagrams("housewifely")
    self.assertEqual(r, ['housewifely'])

    _, r = self.anagrams2.get_anagrams("housewives")
    self.assertEqual(r, ['housewives'])

    _, r = self.anagrams2.get_anagrams("housework")
    self.assertEqual(r, ['housework'])

    _, r = self.anagrams2.get_anagrams("housing")
    self.assertEqual(r, ['housing'])

    _, r = self.anagrams2.get_anagrams("houston")
    self.assertEqual(r, ['houston'])

    _, r = self.anagrams2.get_anagrams("hovel")
    self.assertEqual(r, ['hovel'])

    _, r = self.anagrams2.get_anagrams("hovels")
    self.assertEqual(r, ['hovels', 'shovel'])

    _, r = self.anagrams2.get_anagrams("hover")
    self.assertEqual(r, ['hover'])

    _, r = self.anagrams2.get_anagrams("hovered")
    self.assertEqual(r, ['hovered'])

    _, r = self.anagrams2.get_anagrams("hovering")
    self.assertEqual(r, ['hovering'])

    _, r = self.anagrams2.get_anagrams("hovers")
    self.assertEqual(r, ['hovers'])

    _, r = self.anagrams2.get_anagrams("how")
    self.assertEqual(r, ['how', 'who'])

    _, r = self.anagrams2.get_anagrams("howard")
    self.assertEqual(r, ['howard'])

    _, r = self.anagrams2.get_anagrams("howe")
    self.assertEqual(r, ['howe'])

    _, r = self.anagrams2.get_anagrams("howell")
    self.assertEqual(r, ['howell'])

    _, r = self.anagrams2.get_anagrams("however")
    self.assertEqual(r, ['however', 'whoever'])

    _, r = self.anagrams2.get_anagrams("howl")
    self.assertEqual(r, ['howl'])

    _, r = self.anagrams2.get_anagrams("howled")
    self.assertEqual(r, ['howled'])

    _, r = self.anagrams2.get_anagrams("howler")
    self.assertEqual(r, ['howler'])

    _, r = self.anagrams2.get_anagrams("howling")
    self.assertEqual(r, ['howling'])

    _, r = self.anagrams2.get_anagrams("howls")
    self.assertEqual(r, ['howls'])

    _, r = self.anagrams2.get_anagrams("hoyt")
    self.assertEqual(r, ['hoyt'])

    _, r = self.anagrams2.get_anagrams("hrothgar")
    self.assertEqual(r, ['hrothgar'])

    _, r = self.anagrams2.get_anagrams("hub")
    self.assertEqual(r, ['hub'])

    _, r = self.anagrams2.get_anagrams("hubbard")
    self.assertEqual(r, ['hubbard'])

    _, r = self.anagrams2.get_anagrams("hubbell")
    self.assertEqual(r, ['hubbell'])

    _, r = self.anagrams2.get_anagrams("huber")
    self.assertEqual(r, ['huber'])

    _, r = self.anagrams2.get_anagrams("hubert")
    self.assertEqual(r, ['hubert'])

    _, r = self.anagrams2.get_anagrams("hubris")
    self.assertEqual(r, ['hubris'])

    _, r = self.anagrams2.get_anagrams("hubs")
    self.assertEqual(r, ['bush', 'hubs'])

    _, r = self.anagrams2.get_anagrams("huck")
    self.assertEqual(r, ['huck'])

    _, r = self.anagrams2.get_anagrams("huddle")
    self.assertEqual(r, ['huddle'])

    _, r = self.anagrams2.get_anagrams("huddled")
    self.assertEqual(r, ['huddled'])

    _, r = self.anagrams2.get_anagrams("huddling")
    self.assertEqual(r, ['huddling'])

    _, r = self.anagrams2.get_anagrams("hudson")
    self.assertEqual(r, ['hounds', 'hudson'])

    _, r = self.anagrams2.get_anagrams("hue")
    self.assertEqual(r, ['hue'])

    _, r = self.anagrams2.get_anagrams("hues")
    self.assertEqual(r, ['hues'])

    _, r = self.anagrams2.get_anagrams("huey")
    self.assertEqual(r, ['huey'])

    _, r = self.anagrams2.get_anagrams("huffman")
    self.assertEqual(r, ['huffman'])

    _, r = self.anagrams2.get_anagrams("hug")
    self.assertEqual(r, ['hug', 'ugh'])

    _, r = self.anagrams2.get_anagrams("huge")
    self.assertEqual(r, ['huge'])

    _, r = self.anagrams2.get_anagrams("hugely")
    self.assertEqual(r, ['hugely'])

    _, r = self.anagrams2.get_anagrams("hugeness")
    self.assertEqual(r, ['hugeness'])

    _, r = self.anagrams2.get_anagrams("hugging")
    self.assertEqual(r, ['hugging'])

    _, r = self.anagrams2.get_anagrams("huggins")
    self.assertEqual(r, ['gushing', 'huggins'])

    _, r = self.anagrams2.get_anagrams("hugh")
    self.assertEqual(r, ['hugh'])

    _, r = self.anagrams2.get_anagrams("hughes")
    self.assertEqual(r, ['hughes'])

    _, r = self.anagrams2.get_anagrams("hugo")
    self.assertEqual(r, ['hugo'])

    _, r = self.anagrams2.get_anagrams("huh")
    self.assertEqual(r, ['huh'])

    _, r = self.anagrams2.get_anagrams("hull")
    self.assertEqual(r, ['hull'])

    _, r = self.anagrams2.get_anagrams("hulls")
    self.assertEqual(r, ['hulls'])

    _, r = self.anagrams2.get_anagrams("hum")
    self.assertEqual(r, ['hum'])

    _, r = self.anagrams2.get_anagrams("human")
    self.assertEqual(r, ['human'])

    _, r = self.anagrams2.get_anagrams("humane")
    self.assertEqual(r, ['humane'])

    _, r = self.anagrams2.get_anagrams("humanely")
    self.assertEqual(r, ['humanely'])

    _, r = self.anagrams2.get_anagrams("humaneness")
    self.assertEqual(r, ['humaneness'])

    _, r = self.anagrams2.get_anagrams("humanitarian")
    self.assertEqual(r, ['humanitarian'])

    _, r = self.anagrams2.get_anagrams("humanities")
    self.assertEqual(r, ['humanities'])

    _, r = self.anagrams2.get_anagrams("humanity")
    self.assertEqual(r, ['humanity'])

    _, r = self.anagrams2.get_anagrams("humanly")
    self.assertEqual(r, ['humanly'])

    _, r = self.anagrams2.get_anagrams("humanness")
    self.assertEqual(r, ['humanness'])

    _, r = self.anagrams2.get_anagrams("humans")
    self.assertEqual(r, ['humans'])

    _, r = self.anagrams2.get_anagrams("humble")
    self.assertEqual(r, ['humble'])

    _, r = self.anagrams2.get_anagrams("humbled")
    self.assertEqual(r, ['humbled'])

    _, r = self.anagrams2.get_anagrams("humbleness")
    self.assertEqual(r, ['humbleness'])

    _, r = self.anagrams2.get_anagrams("humbler")
    self.assertEqual(r, ['humbler'])

    _, r = self.anagrams2.get_anagrams("humblest")
    self.assertEqual(r, ['humblest'])

    _, r = self.anagrams2.get_anagrams("humbling")
    self.assertEqual(r, ['humbling'])

    _, r = self.anagrams2.get_anagrams("humbly")
    self.assertEqual(r, ['humbly'])

    _, r = self.anagrams2.get_anagrams("humboldt")
    self.assertEqual(r, ['humboldt'])

    _, r = self.anagrams2.get_anagrams("humbug")
    self.assertEqual(r, ['humbug'])

    _, r = self.anagrams2.get_anagrams("hume")
    self.assertEqual(r, ['hume'])

    _, r = self.anagrams2.get_anagrams("humerus")
    self.assertEqual(r, ['humerus'])

    _, r = self.anagrams2.get_anagrams("humid")
    self.assertEqual(r, ['humid'])

    _, r = self.anagrams2.get_anagrams("humidification")
    self.assertEqual(r, ['humidification'])

    _, r = self.anagrams2.get_anagrams("humidified")
    self.assertEqual(r, ['humidified'])

    _, r = self.anagrams2.get_anagrams("humidifier")
    self.assertEqual(r, ['humidifier'])

    _, r = self.anagrams2.get_anagrams("humidifiers")
    self.assertEqual(r, ['humidifiers'])

    _, r = self.anagrams2.get_anagrams("humidifies")
    self.assertEqual(r, ['humidifies'])

    _, r = self.anagrams2.get_anagrams("humidify")
    self.assertEqual(r, ['humidify'])

    _, r = self.anagrams2.get_anagrams("humidifying")
    self.assertEqual(r, ['humidifying'])

    _, r = self.anagrams2.get_anagrams("humidity")
    self.assertEqual(r, ['humidity'])

    _, r = self.anagrams2.get_anagrams("humidly")
    self.assertEqual(r, ['humidly'])

    _, r = self.anagrams2.get_anagrams("humiliate")
    self.assertEqual(r, ['humiliate'])

    _, r = self.anagrams2.get_anagrams("humiliated")
    self.assertEqual(r, ['humiliated'])

    _, r = self.anagrams2.get_anagrams("humiliates")
    self.assertEqual(r, ['humiliates'])

    _, r = self.anagrams2.get_anagrams("humiliating")
    self.assertEqual(r, ['humiliating'])

    _, r = self.anagrams2.get_anagrams("humiliation")
    self.assertEqual(r, ['humiliation'])

    _, r = self.anagrams2.get_anagrams("humiliations")
    self.assertEqual(r, ['humiliations'])

    _, r = self.anagrams2.get_anagrams("humility")
    self.assertEqual(r, ['humility'])

    _, r = self.anagrams2.get_anagrams("hummed")
    self.assertEqual(r, ['hummed'])

    _, r = self.anagrams2.get_anagrams("hummel")
    self.assertEqual(r, ['hummel'])

    _, r = self.anagrams2.get_anagrams("humming")
    self.assertEqual(r, ['humming'])

    _, r = self.anagrams2.get_anagrams("hummingbird")
    self.assertEqual(r, ['hummingbird'])

    _, r = self.anagrams2.get_anagrams("humor")
    self.assertEqual(r, ['humor'])

    _, r = self.anagrams2.get_anagrams("humored")
    self.assertEqual(r, ['humored'])

    _, r = self.anagrams2.get_anagrams("humorer")
    self.assertEqual(r, ['humorer'])

    _, r = self.anagrams2.get_anagrams("humorers")
    self.assertEqual(r, ['humorers', 'rushmore'])

    _, r = self.anagrams2.get_anagrams("humoring")
    self.assertEqual(r, ['humoring'])

    _, r = self.anagrams2.get_anagrams("humorous")
    self.assertEqual(r, ['humorous'])

    _, r = self.anagrams2.get_anagrams("humorously")
    self.assertEqual(r, ['humorously'])

    _, r = self.anagrams2.get_anagrams("humorousness")
    self.assertEqual(r, ['humorousness'])

    _, r = self.anagrams2.get_anagrams("humors")
    self.assertEqual(r, ['humors'])

    _, r = self.anagrams2.get_anagrams("hump")
    self.assertEqual(r, ['hump'])

    _, r = self.anagrams2.get_anagrams("humpback")
    self.assertEqual(r, ['humpback'])

    _, r = self.anagrams2.get_anagrams("humped")
    self.assertEqual(r, ['humped'])

    _, r = self.anagrams2.get_anagrams("humphrey")
    self.assertEqual(r, ['humphrey'])

    _, r = self.anagrams2.get_anagrams("humpty")
    self.assertEqual(r, ['humpty'])

    _, r = self.anagrams2.get_anagrams("hums")
    self.assertEqual(r, ['hums', 'mush'])

    _, r = self.anagrams2.get_anagrams("hun")
    self.assertEqual(r, ['hun'])

    _, r = self.anagrams2.get_anagrams("hunch")
    self.assertEqual(r, ['hunch'])

    _, r = self.anagrams2.get_anagrams("hunched")
    self.assertEqual(r, ['hunched'])

    _, r = self.anagrams2.get_anagrams("hunches")
    self.assertEqual(r, ['hunches'])

    _, r = self.anagrams2.get_anagrams("hundred")
    self.assertEqual(r, ['hundred'])

    _, r = self.anagrams2.get_anagrams("hundredfold")
    self.assertEqual(r, ['hundredfold'])

    _, r = self.anagrams2.get_anagrams("hundreds")
    self.assertEqual(r, ['hundreds'])

    _, r = self.anagrams2.get_anagrams("hundredth")
    self.assertEqual(r, ['hundredth'])

    _, r = self.anagrams2.get_anagrams("hung")
    self.assertEqual(r, ['hung'])

    _, r = self.anagrams2.get_anagrams("hungarian")
    self.assertEqual(r, ['hungarian'])

    _, r = self.anagrams2.get_anagrams("hungary")
    self.assertEqual(r, ['hungary'])

    _, r = self.anagrams2.get_anagrams("hunger")
    self.assertEqual(r, ['hunger'])

    _, r = self.anagrams2.get_anagrams("hungered")
    self.assertEqual(r, ['hungered'])

    _, r = self.anagrams2.get_anagrams("hungering")
    self.assertEqual(r, ['hungering'])

    _, r = self.anagrams2.get_anagrams("hungers")
    self.assertEqual(r, ['hungers'])

    _, r = self.anagrams2.get_anagrams("hungrier")
    self.assertEqual(r, ['hungrier'])

    _, r = self.anagrams2.get_anagrams("hungriest")
    self.assertEqual(r, ['hungriest'])

    _, r = self.anagrams2.get_anagrams("hungrily")
    self.assertEqual(r, ['hungrily'])

    _, r = self.anagrams2.get_anagrams("hungry")
    self.assertEqual(r, ['hungry'])

    _, r = self.anagrams2.get_anagrams("hunk")
    self.assertEqual(r, ['hunk', 'kuhn'])

    _, r = self.anagrams2.get_anagrams("hunks")
    self.assertEqual(r, ['hunks'])

    _, r = self.anagrams2.get_anagrams("huns")
    self.assertEqual(r, ['huns', 'shun'])

    _, r = self.anagrams2.get_anagrams("hunt")
    self.assertEqual(r, ['hunt'])

    _, r = self.anagrams2.get_anagrams("hunted")
    self.assertEqual(r, ['hunted'])

    _, r = self.anagrams2.get_anagrams("hunter")
    self.assertEqual(r, ['hunter'])

    _, r = self.anagrams2.get_anagrams("hunters")
    self.assertEqual(r, ['hunters'])

    _, r = self.anagrams2.get_anagrams("hunting")
    self.assertEqual(r, ['hunting'])

    _, r = self.anagrams2.get_anagrams("huntington")
    self.assertEqual(r, ['huntington'])

    _, r = self.anagrams2.get_anagrams("huntley")
    self.assertEqual(r, ['huntley'])

    _, r = self.anagrams2.get_anagrams("hunts")
    self.assertEqual(r, ['hunts', 'shunt'])

    _, r = self.anagrams2.get_anagrams("huntsman")
    self.assertEqual(r, ['huntsman'])

    _, r = self.anagrams2.get_anagrams("huntsville")
    self.assertEqual(r, ['huntsville'])

    _, r = self.anagrams2.get_anagrams("hurd")
    self.assertEqual(r, ['hurd'])

    _, r = self.anagrams2.get_anagrams("hurdle")
    self.assertEqual(r, ['hurdle', 'hurled'])

    _, r = self.anagrams2.get_anagrams("hurl")
    self.assertEqual(r, ['hurl'])

    _, r = self.anagrams2.get_anagrams("hurled")
    self.assertEqual(r, ['hurdle', 'hurled'])

    _, r = self.anagrams2.get_anagrams("hurler")
    self.assertEqual(r, ['hurler'])

    _, r = self.anagrams2.get_anagrams("hurlers")
    self.assertEqual(r, ['hurlers'])

    _, r = self.anagrams2.get_anagrams("hurling")
    self.assertEqual(r, ['hurling'])

    _, r = self.anagrams2.get_anagrams("huron")
    self.assertEqual(r, ['huron'])

    _, r = self.anagrams2.get_anagrams("hurons")
    self.assertEqual(r, ['hurons', 'onrush'])

    _, r = self.anagrams2.get_anagrams("hurrah")
    self.assertEqual(r, ['hurrah'])

    _, r = self.anagrams2.get_anagrams("hurricane")
    self.assertEqual(r, ['hurricane'])

    _, r = self.anagrams2.get_anagrams("hurricanes")
    self.assertEqual(r, ['hurricanes'])

    _, r = self.anagrams2.get_anagrams("hurried")
    self.assertEqual(r, ['hurried'])

    _, r = self.anagrams2.get_anagrams("hurriedly")
    self.assertEqual(r, ['hurriedly'])

    _, r = self.anagrams2.get_anagrams("hurries")
    self.assertEqual(r, ['hurries'])

    _, r = self.anagrams2.get_anagrams("hurry")
    self.assertEqual(r, ['hurry'])

    _, r = self.anagrams2.get_anagrams("hurrying")
    self.assertEqual(r, ['hurrying'])

    _, r = self.anagrams2.get_anagrams("hurst")
    self.assertEqual(r, ['hurst', 'hurts'])

    _, r = self.anagrams2.get_anagrams("hurt")
    self.assertEqual(r, ['hurt', 'ruth'])

    _, r = self.anagrams2.get_anagrams("hurting")
    self.assertEqual(r, ['hurting'])

    _, r = self.anagrams2.get_anagrams("hurtle")
    self.assertEqual(r, ['hurtle', 'luther'])

    _, r = self.anagrams2.get_anagrams("hurtling")
    self.assertEqual(r, ['hurtling'])

    _, r = self.anagrams2.get_anagrams("hurts")
    self.assertEqual(r, ['hurst', 'hurts'])

    _, r = self.anagrams2.get_anagrams("hurwitz")
    self.assertEqual(r, ['hurwitz'])

    _, r = self.anagrams2.get_anagrams("husband")
    self.assertEqual(r, ['husband'])

    _, r = self.anagrams2.get_anagrams("husbandry")
    self.assertEqual(r, ['husbandry'])

    _, r = self.anagrams2.get_anagrams("husbands")
    self.assertEqual(r, ['husbands'])

    _, r = self.anagrams2.get_anagrams("hush")
    self.assertEqual(r, ['hush'])

    _, r = self.anagrams2.get_anagrams("hushed")
    self.assertEqual(r, ['hushed'])

    _, r = self.anagrams2.get_anagrams("hushes")
    self.assertEqual(r, ['hushes'])

    _, r = self.anagrams2.get_anagrams("hushing")
    self.assertEqual(r, ['hushing'])

    _, r = self.anagrams2.get_anagrams("husk")
    self.assertEqual(r, ['husk'])

    _, r = self.anagrams2.get_anagrams("husked")
    self.assertEqual(r, ['husked'])

    _, r = self.anagrams2.get_anagrams("husker")
    self.assertEqual(r, ['husker'])

    _, r = self.anagrams2.get_anagrams("huskiness")
    self.assertEqual(r, ['huskiness'])

    _, r = self.anagrams2.get_anagrams("husking")
    self.assertEqual(r, ['husking'])

    _, r = self.anagrams2.get_anagrams("husks")
    self.assertEqual(r, ['husks'])

    _, r = self.anagrams2.get_anagrams("husky")
    self.assertEqual(r, ['husky'])

    _, r = self.anagrams2.get_anagrams("hustle")
    self.assertEqual(r, ['hustle', 'sleuth'])

    _, r = self.anagrams2.get_anagrams("hustled")
    self.assertEqual(r, ['hustled'])

    _, r = self.anagrams2.get_anagrams("hustler")
    self.assertEqual(r, ['hustler'])

    _, r = self.anagrams2.get_anagrams("hustles")
    self.assertEqual(r, ['hustles'])

    _, r = self.anagrams2.get_anagrams("hustling")
    self.assertEqual(r, ['hustling', 'sunlight'])

    _, r = self.anagrams2.get_anagrams("huston")
    self.assertEqual(r, ['huston'])

    _, r = self.anagrams2.get_anagrams("hut")
    self.assertEqual(r, ['hut'])

    _, r = self.anagrams2.get_anagrams("hutch")
    self.assertEqual(r, ['hutch'])

    _, r = self.anagrams2.get_anagrams("hutchins")
    self.assertEqual(r, ['hutchins'])

    _, r = self.anagrams2.get_anagrams("hutchinson")
    self.assertEqual(r, ['hutchinson'])

    _, r = self.anagrams2.get_anagrams("hutchison")
    self.assertEqual(r, ['hutchison'])

    _, r = self.anagrams2.get_anagrams("huts")
    self.assertEqual(r, ['huts', 'shut', 'thus'])

    _, r = self.anagrams2.get_anagrams("huxley")
    self.assertEqual(r, ['huxley'])

    _, r = self.anagrams2.get_anagrams("huxtable")
    self.assertEqual(r, ['huxtable'])

    _, r = self.anagrams2.get_anagrams("hyacinth")
    self.assertEqual(r, ['hyacinth'])

    _, r = self.anagrams2.get_anagrams("hyades")
    self.assertEqual(r, ['hyades'])

    _, r = self.anagrams2.get_anagrams("hyannis")
    self.assertEqual(r, ['hyannis'])

    _, r = self.anagrams2.get_anagrams("hybrid")
    self.assertEqual(r, ['hybrid'])

    _, r = self.anagrams2.get_anagrams("hyde")
    self.assertEqual(r, ['hyde'])

    _, r = self.anagrams2.get_anagrams("hydra")
    self.assertEqual(r, ['hardy', 'hydra'])

    _, r = self.anagrams2.get_anagrams("hydrant")
    self.assertEqual(r, ['hydrant'])

    _, r = self.anagrams2.get_anagrams("hydraulic")
    self.assertEqual(r, ['hydraulic'])

    _, r = self.anagrams2.get_anagrams("hydro")
    self.assertEqual(r, ['hydro'])

    _, r = self.anagrams2.get_anagrams("hydrodynamic")
    self.assertEqual(r, ['hydrodynamic'])

    _, r = self.anagrams2.get_anagrams("hydrodynamics")
    self.assertEqual(r, ['hydrodynamics'])

    _, r = self.anagrams2.get_anagrams("hydrogen")
    self.assertEqual(r, ['hydrogen'])

    _, r = self.anagrams2.get_anagrams("hydrogens")
    self.assertEqual(r, ['hydrogens'])

    _, r = self.anagrams2.get_anagrams("hyena")
    self.assertEqual(r, ['haney', 'hyena'])

    _, r = self.anagrams2.get_anagrams("hygiene")
    self.assertEqual(r, ['hygiene'])

    _, r = self.anagrams2.get_anagrams("hyman")
    self.assertEqual(r, ['hyman'])

    _, r = self.anagrams2.get_anagrams("hymen")
    self.assertEqual(r, ['hymen'])

    _, r = self.anagrams2.get_anagrams("hymn")
    self.assertEqual(r, ['hymn'])

    _, r = self.anagrams2.get_anagrams("hymns")
    self.assertEqual(r, ['hymns'])

    _, r = self.anagrams2.get_anagrams("hyper")
    self.assertEqual(r, ['hyper'])

    _, r = self.anagrams2.get_anagrams("hyperbola")
    self.assertEqual(r, ['hyperbola'])

    _, r = self.anagrams2.get_anagrams("hyperbolic")
    self.assertEqual(r, ['hyperbolic'])

    _, r = self.anagrams2.get_anagrams("hypertext")
    self.assertEqual(r, ['hypertext'])

    _, r = self.anagrams2.get_anagrams("hyphen")
    self.assertEqual(r, ['hyphen'])

    _, r = self.anagrams2.get_anagrams("hyphenate")
    self.assertEqual(r, ['hyphenate'])

    _, r = self.anagrams2.get_anagrams("hyphens")
    self.assertEqual(r, ['hyphens'])

    _, r = self.anagrams2.get_anagrams("hypnosis")
    self.assertEqual(r, ['hypnosis'])

    _, r = self.anagrams2.get_anagrams("hypnotic")
    self.assertEqual(r, ['hypnotic'])

    _, r = self.anagrams2.get_anagrams("hypocrisies")
    self.assertEqual(r, ['hypocrisies'])

    _, r = self.anagrams2.get_anagrams("hypocrisy")
    self.assertEqual(r, ['hypocrisy'])

    _, r = self.anagrams2.get_anagrams("hypocrite")
    self.assertEqual(r, ['hypocrite'])

    _, r = self.anagrams2.get_anagrams("hypocrites")
    self.assertEqual(r, ['hypocrites'])

    _, r = self.anagrams2.get_anagrams("hypodermic")
    self.assertEqual(r, ['hypodermic'])

    _, r = self.anagrams2.get_anagrams("hypodermics")
    self.assertEqual(r, ['hypodermics'])

    _, r = self.anagrams2.get_anagrams("hypotheses")
    self.assertEqual(r, ['hypotheses'])

    _, r = self.anagrams2.get_anagrams("hypothesis")
    self.assertEqual(r, ['hypothesis'])

    _, r = self.anagrams2.get_anagrams("hypothesize")
    self.assertEqual(r, ['hypothesize'])

    _, r = self.anagrams2.get_anagrams("hypothesized")
    self.assertEqual(r, ['hypothesized'])

    _, r = self.anagrams2.get_anagrams("hypothesizer")
    self.assertEqual(r, ['hypothesizer'])

    _, r = self.anagrams2.get_anagrams("hypothesizes")
    self.assertEqual(r, ['hypothesizes'])

    _, r = self.anagrams2.get_anagrams("hypothesizing")
    self.assertEqual(r, ['hypothesizing'])

    _, r = self.anagrams2.get_anagrams("hypothetical")
    self.assertEqual(r, ['hypothetical'])

    _, r = self.anagrams2.get_anagrams("hypothetically")
    self.assertEqual(r, ['hypothetically'])

    _, r = self.anagrams2.get_anagrams("hysteresis")
    self.assertEqual(r, ['hysteresis'])

    _, r = self.anagrams2.get_anagrams("hysterical")
    self.assertEqual(r, ['hysterical'])

    _, r = self.anagrams2.get_anagrams("hysterically")
    self.assertEqual(r, ['hysterically'])

    _, r = self.anagrams2.get_anagrams("ian")
    self.assertEqual(r, ['ian'])

    _, r = self.anagrams2.get_anagrams("iberia")
    self.assertEqual(r, ['iberia'])

    _, r = self.anagrams2.get_anagrams("iberian")
    self.assertEqual(r, ['iberian'])

    _, r = self.anagrams2.get_anagrams("ibero-")
    self.assertEqual(r, ['ibero-'])

    _, r = self.anagrams2.get_anagrams("ibex")
    self.assertEqual(r, ['ibex'])

    _, r = self.anagrams2.get_anagrams("ibid")
    self.assertEqual(r, ['ibid'])

    _, r = self.anagrams2.get_anagrams("ibis")
    self.assertEqual(r, ['ibis'])

    _, r = self.anagrams2.get_anagrams("ibn")
    self.assertEqual(r, ['bin', 'ibn'])

    _, r = self.anagrams2.get_anagrams("ibsen")
    self.assertEqual(r, ['ibsen'])

    _, r = self.anagrams2.get_anagrams("icarus")
    self.assertEqual(r, ['icarus'])

    _, r = self.anagrams2.get_anagrams("ice")
    self.assertEqual(r, ['ice'])

    _, r = self.anagrams2.get_anagrams("iceberg")
    self.assertEqual(r, ['iceberg'])

    _, r = self.anagrams2.get_anagrams("icebergs")
    self.assertEqual(r, ['icebergs'])

    _, r = self.anagrams2.get_anagrams("icebox")
    self.assertEqual(r, ['icebox'])

    _, r = self.anagrams2.get_anagrams("iced")
    self.assertEqual(r, ['dice', 'iced'])

    _, r = self.anagrams2.get_anagrams("iceland")
    self.assertEqual(r, ['iceland'])

    _, r = self.anagrams2.get_anagrams("icelandic")
    self.assertEqual(r, ['icelandic'])

    _, r = self.anagrams2.get_anagrams("ices")
    self.assertEqual(r, ['ices'])

    _, r = self.anagrams2.get_anagrams("icicle")
    self.assertEqual(r, ['icicle'])

    _, r = self.anagrams2.get_anagrams("iciness")
    self.assertEqual(r, ['iciness'])

    _, r = self.anagrams2.get_anagrams("icing")
    self.assertEqual(r, ['icing'])

    _, r = self.anagrams2.get_anagrams("icings")
    self.assertEqual(r, ['icings'])

    _, r = self.anagrams2.get_anagrams("icon")
    self.assertEqual(r, ['coin', 'icon'])

    _, r = self.anagrams2.get_anagrams("iconoclasm")
    self.assertEqual(r, ['iconoclasm'])

    _, r = self.anagrams2.get_anagrams("iconoclast")
    self.assertEqual(r, ['iconoclast'])

    _, r = self.anagrams2.get_anagrams("icons")
    self.assertEqual(r, ['coins', 'icons', 'sonic'])

    _, r = self.anagrams2.get_anagrams("icosahedra")
    self.assertEqual(r, ['icosahedra'])

    _, r = self.anagrams2.get_anagrams("icosahedral")
    self.assertEqual(r, ['icosahedral'])

    _, r = self.anagrams2.get_anagrams("icosahedron")
    self.assertEqual(r, ['icosahedron'])

    _, r = self.anagrams2.get_anagrams("icy")
    self.assertEqual(r, ['icy'])

    _, r = self.anagrams2.get_anagrams("ida")
    self.assertEqual(r, ['aid', 'ida'])

    _, r = self.anagrams2.get_anagrams("idaho")
    self.assertEqual(r, ['idaho'])

    _, r = self.anagrams2.get_anagrams("idea")
    self.assertEqual(r, ['aide', 'idea'])

    _, r = self.anagrams2.get_anagrams("ideal")
    self.assertEqual(r, ['delia', 'ideal'])

    _, r = self.anagrams2.get_anagrams("idealism")
    self.assertEqual(r, ['idealism'])

    _, r = self.anagrams2.get_anagrams("idealistic")
    self.assertEqual(r, ['idealistic'])

    _, r = self.anagrams2.get_anagrams("idealization")
    self.assertEqual(r, ['idealization'])

    _, r = self.anagrams2.get_anagrams("idealizations")
    self.assertEqual(r, ['idealizations'])

    _, r = self.anagrams2.get_anagrams("idealize")
    self.assertEqual(r, ['idealize'])

    _, r = self.anagrams2.get_anagrams("idealized")
    self.assertEqual(r, ['idealized'])

    _, r = self.anagrams2.get_anagrams("idealizes")
    self.assertEqual(r, ['idealizes'])

    _, r = self.anagrams2.get_anagrams("idealizing")
    self.assertEqual(r, ['idealizing'])

    _, r = self.anagrams2.get_anagrams("ideally")
    self.assertEqual(r, ['ideally'])

    _, r = self.anagrams2.get_anagrams("ideals")
    self.assertEqual(r, ['ideals', 'ladies', 'sailed'])

    _, r = self.anagrams2.get_anagrams("ideas")
    self.assertEqual(r, ['aides', 'aside', 'ideas', 'sadie'])

    _, r = self.anagrams2.get_anagrams("idem")
    self.assertEqual(r, ['diem', 'dime', 'idem'])

    _, r = self.anagrams2.get_anagrams("idempotency")
    self.assertEqual(r, ['idempotency'])

    _, r = self.anagrams2.get_anagrams("idempotent")
    self.assertEqual(r, ['idempotent'])

    _, r = self.anagrams2.get_anagrams("identical")
    self.assertEqual(r, ['identical'])

    _, r = self.anagrams2.get_anagrams("identically")
    self.assertEqual(r, ['identically'])

    _, r = self.anagrams2.get_anagrams("identifiable")
    self.assertEqual(r, ['identifiable'])

    _, r = self.anagrams2.get_anagrams("identifiably")
    self.assertEqual(r, ['identifiably'])

    _, r = self.anagrams2.get_anagrams("identification")
    self.assertEqual(r, ['identification'])

    _, r = self.anagrams2.get_anagrams("identifications")
    self.assertEqual(r, ['identifications'])

    _, r = self.anagrams2.get_anagrams("identified")
    self.assertEqual(r, ['identified'])

    _, r = self.anagrams2.get_anagrams("identifier")
    self.assertEqual(r, ['identifier'])

    _, r = self.anagrams2.get_anagrams("identifiers")
    self.assertEqual(r, ['identifiers'])

    _, r = self.anagrams2.get_anagrams("identifies")
    self.assertEqual(r, ['identifies'])

    _, r = self.anagrams2.get_anagrams("identify")
    self.assertEqual(r, ['identify'])

    _, r = self.anagrams2.get_anagrams("identifying")
    self.assertEqual(r, ['identifying'])

    _, r = self.anagrams2.get_anagrams("identities")
    self.assertEqual(r, ['identities'])

    _, r = self.anagrams2.get_anagrams("identity")
    self.assertEqual(r, ['identity'])

    _, r = self.anagrams2.get_anagrams("ideological")
    self.assertEqual(r, ['ideological'])

    _, r = self.anagrams2.get_anagrams("ideologically")
    self.assertEqual(r, ['ideologically'])

    _, r = self.anagrams2.get_anagrams("ideology")
    self.assertEqual(r, ['ideology'])

    _, r = self.anagrams2.get_anagrams("idiocy")
    self.assertEqual(r, ['idiocy'])

    _, r = self.anagrams2.get_anagrams("idiom")
    self.assertEqual(r, ['idiom'])

    _, r = self.anagrams2.get_anagrams("idiosyncrasies")
    self.assertEqual(r, ['idiosyncrasies'])

    _, r = self.anagrams2.get_anagrams("idiosyncrasy")
    self.assertEqual(r, ['idiosyncrasy'])

    _, r = self.anagrams2.get_anagrams("idiosyncratic")
    self.assertEqual(r, ['idiosyncratic'])

    _, r = self.anagrams2.get_anagrams("idiot")
    self.assertEqual(r, ['idiot'])

    _, r = self.anagrams2.get_anagrams("idiotic")
    self.assertEqual(r, ['idiotic'])

    _, r = self.anagrams2.get_anagrams("idiots")
    self.assertEqual(r, ['idiots'])

    _, r = self.anagrams2.get_anagrams("idle")
    self.assertEqual(r, ['idle', 'lied'])

    _, r = self.anagrams2.get_anagrams("idled")
    self.assertEqual(r, ['idled'])

    _, r = self.anagrams2.get_anagrams("idleness")
    self.assertEqual(r, ['idleness'])

    _, r = self.anagrams2.get_anagrams("idler")
    self.assertEqual(r, ['idler'])

    _, r = self.anagrams2.get_anagrams("idlers")
    self.assertEqual(r, ['idlers', 'slider'])

    _, r = self.anagrams2.get_anagrams("idles")
    self.assertEqual(r, ['idles', 'slide'])

    _, r = self.anagrams2.get_anagrams("idlest")
    self.assertEqual(r, ['idlest', 'listed', 'silted'])

    _, r = self.anagrams2.get_anagrams("idling")
    self.assertEqual(r, ['idling'])

    _, r = self.anagrams2.get_anagrams("idly")
    self.assertEqual(r, ['idly'])

    _, r = self.anagrams2.get_anagrams("idol")
    self.assertEqual(r, ['idol'])

    _, r = self.anagrams2.get_anagrams("idolatry")
    self.assertEqual(r, ['idolatry'])

    _, r = self.anagrams2.get_anagrams("idols")
    self.assertEqual(r, ['idols', 'solid'])

    _, r = self.anagrams2.get_anagrams("if")
    self.assertEqual(r, ['if'])

    _, r = self.anagrams2.get_anagrams("ifni")
    self.assertEqual(r, ['ifni'])

    _, r = self.anagrams2.get_anagrams("igloo")
    self.assertEqual(r, ['igloo'])

    _, r = self.anagrams2.get_anagrams("ignite")
    self.assertEqual(r, ['ignite'])

    _, r = self.anagrams2.get_anagrams("ignition")
    self.assertEqual(r, ['ignition'])

    _, r = self.anagrams2.get_anagrams("ignoble")
    self.assertEqual(r, ['ignoble'])

    _, r = self.anagrams2.get_anagrams("ignominious")
    self.assertEqual(r, ['ignominious'])

    _, r = self.anagrams2.get_anagrams("ignoramus")
    self.assertEqual(r, ['ignoramus'])

    _, r = self.anagrams2.get_anagrams("ignorance")
    self.assertEqual(r, ['ignorance'])

    _, r = self.anagrams2.get_anagrams("ignorant")
    self.assertEqual(r, ['ignorant'])

    _, r = self.anagrams2.get_anagrams("ignorantly")
    self.assertEqual(r, ['ignorantly'])

    _, r = self.anagrams2.get_anagrams("ignore")
    self.assertEqual(r, ['ignore', 'region'])

    _, r = self.anagrams2.get_anagrams("ignored")
    self.assertEqual(r, ['ignored', 'negroid'])

    _, r = self.anagrams2.get_anagrams("ignores")
    self.assertEqual(r, ['ignores', 'regions'])

    _, r = self.anagrams2.get_anagrams("ignoring")
    self.assertEqual(r, ['ignoring'])

    _, r = self.anagrams2.get_anagrams("igor")
    self.assertEqual(r, ['igor'])

    _, r = self.anagrams2.get_anagrams("ike")
    self.assertEqual(r, ['ike'])

    _, r = self.anagrams2.get_anagrams("iliad")
    self.assertEqual(r, ['iliad'])

    _, r = self.anagrams2.get_anagrams("iliadize")
    self.assertEqual(r, ['iliadize'])

    _, r = self.anagrams2.get_anagrams("iliadizes")
    self.assertEqual(r, ['iliadizes'])

    _, r = self.anagrams2.get_anagrams("ill")
    self.assertEqual(r, ['ill'])

    _, r = self.anagrams2.get_anagrams("illegal")
    self.assertEqual(r, ['illegal'])

    _, r = self.anagrams2.get_anagrams("illegalities")
    self.assertEqual(r, ['illegalities'])

    _, r = self.anagrams2.get_anagrams("illegality")
    self.assertEqual(r, ['illegality'])

    _, r = self.anagrams2.get_anagrams("illegally")
    self.assertEqual(r, ['illegally'])

    _, r = self.anagrams2.get_anagrams("illegitimate")
    self.assertEqual(r, ['illegitimate'])

    _, r = self.anagrams2.get_anagrams("illicit")
    self.assertEqual(r, ['illicit'])

    _, r = self.anagrams2.get_anagrams("illicitly")
    self.assertEqual(r, ['illicitly'])

    _, r = self.anagrams2.get_anagrams("illinois")
    self.assertEqual(r, ['illinois'])

    _, r = self.anagrams2.get_anagrams("illiteracy")
    self.assertEqual(r, ['illiteracy'])

    _, r = self.anagrams2.get_anagrams("illiterate")
    self.assertEqual(r, ['illiterate'])

    _, r = self.anagrams2.get_anagrams("illness")
    self.assertEqual(r, ['illness'])

    _, r = self.anagrams2.get_anagrams("illnesses")
    self.assertEqual(r, ['illnesses'])

    _, r = self.anagrams2.get_anagrams("illogical")
    self.assertEqual(r, ['illogical'])

    _, r = self.anagrams2.get_anagrams("illogically")
    self.assertEqual(r, ['illogically'])

    _, r = self.anagrams2.get_anagrams("ills")
    self.assertEqual(r, ['ills', 'sill'])

    _, r = self.anagrams2.get_anagrams("illuminate")
    self.assertEqual(r, ['illuminate'])

    _, r = self.anagrams2.get_anagrams("illuminated")
    self.assertEqual(r, ['illuminated'])

    _, r = self.anagrams2.get_anagrams("illuminates")
    self.assertEqual(r, ['illuminates'])

    _, r = self.anagrams2.get_anagrams("illuminating")
    self.assertEqual(r, ['illuminating'])

    _, r = self.anagrams2.get_anagrams("illumination")
    self.assertEqual(r, ['illumination'])

    _, r = self.anagrams2.get_anagrams("illuminations")
    self.assertEqual(r, ['illuminations'])

    _, r = self.anagrams2.get_anagrams("illusion")
    self.assertEqual(r, ['illusion'])

    _, r = self.anagrams2.get_anagrams("illusions")
    self.assertEqual(r, ['illusions'])

    _, r = self.anagrams2.get_anagrams("illusive")
    self.assertEqual(r, ['illusive'])

    _, r = self.anagrams2.get_anagrams("illusively")
    self.assertEqual(r, ['illusively'])

    _, r = self.anagrams2.get_anagrams("illusory")
    self.assertEqual(r, ['illusory'])

    _, r = self.anagrams2.get_anagrams("illustrate")
    self.assertEqual(r, ['illustrate'])

    _, r = self.anagrams2.get_anagrams("illustrated")
    self.assertEqual(r, ['illustrated'])

    _, r = self.anagrams2.get_anagrams("illustrates")
    self.assertEqual(r, ['illustrates'])

    _, r = self.anagrams2.get_anagrams("illustrating")
    self.assertEqual(r, ['illustrating'])

    _, r = self.anagrams2.get_anagrams("illustration")
    self.assertEqual(r, ['illustration'])

    _, r = self.anagrams2.get_anagrams("illustrations")
    self.assertEqual(r, ['illustrations'])

    _, r = self.anagrams2.get_anagrams("illustrative")
    self.assertEqual(r, ['illustrative'])

    _, r = self.anagrams2.get_anagrams("illustratively")
    self.assertEqual(r, ['illustratively'])

    _, r = self.anagrams2.get_anagrams("illustrator")
    self.assertEqual(r, ['illustrator'])

    _, r = self.anagrams2.get_anagrams("illustrators")
    self.assertEqual(r, ['illustrators'])

    _, r = self.anagrams2.get_anagrams("illustrious")
    self.assertEqual(r, ['illustrious'])

    _, r = self.anagrams2.get_anagrams("illustriousness")
    self.assertEqual(r, ['illustriousness'])

    _, r = self.anagrams2.get_anagrams("illy")
    self.assertEqual(r, ['illy', 'lily'])

    _, r = self.anagrams2.get_anagrams("ilona")
    self.assertEqual(r, ['ilona'])

    _, r = self.anagrams2.get_anagrams("ilyushin")
    self.assertEqual(r, ['ilyushin'])

    _, r = self.anagrams2.get_anagrams("image")
    self.assertEqual(r, ['image'])

    _, r = self.anagrams2.get_anagrams("imagen")
    self.assertEqual(r, ['enigma', 'imagen'])

    _, r = self.anagrams2.get_anagrams("imagery")
    self.assertEqual(r, ['imagery'])

    _, r = self.anagrams2.get_anagrams("images")
    self.assertEqual(r, ['images'])

    _, r = self.anagrams2.get_anagrams("imaginable")
    self.assertEqual(r, ['imaginable'])

    _, r = self.anagrams2.get_anagrams("imaginably")
    self.assertEqual(r, ['imaginably'])

    _, r = self.anagrams2.get_anagrams("imaginary")
    self.assertEqual(r, ['imaginary'])

    _, r = self.anagrams2.get_anagrams("imagination")
    self.assertEqual(r, ['imagination'])

    _, r = self.anagrams2.get_anagrams("imaginations")
    self.assertEqual(r, ['imaginations'])

    _, r = self.anagrams2.get_anagrams("imaginative")
    self.assertEqual(r, ['imaginative'])

    _, r = self.anagrams2.get_anagrams("imaginatively")
    self.assertEqual(r, ['imaginatively'])

    _, r = self.anagrams2.get_anagrams("imagine")
    self.assertEqual(r, ['imagine'])

    _, r = self.anagrams2.get_anagrams("imagined")
    self.assertEqual(r, ['imagined'])

    _, r = self.anagrams2.get_anagrams("imagines")
    self.assertEqual(r, ['imagines'])

    _, r = self.anagrams2.get_anagrams("imaging")
    self.assertEqual(r, ['imaging'])

    _, r = self.anagrams2.get_anagrams("imagining")
    self.assertEqual(r, ['imagining'])

    _, r = self.anagrams2.get_anagrams("imaginings")
    self.assertEqual(r, ['imaginings'])

    _, r = self.anagrams2.get_anagrams("imbalance")
    self.assertEqual(r, ['imbalance'])

    _, r = self.anagrams2.get_anagrams("imbalances")
    self.assertEqual(r, ['imbalances'])

    _, r = self.anagrams2.get_anagrams("imbecile")
    self.assertEqual(r, ['imbecile'])

    _, r = self.anagrams2.get_anagrams("imbibe")
    self.assertEqual(r, ['imbibe'])

    _, r = self.anagrams2.get_anagrams("imbrium")
    self.assertEqual(r, ['imbrium'])

    _, r = self.anagrams2.get_anagrams("imitate")
    self.assertEqual(r, ['imitate'])

    _, r = self.anagrams2.get_anagrams("imitated")
    self.assertEqual(r, ['imitated'])

    _, r = self.anagrams2.get_anagrams("imitates")
    self.assertEqual(r, ['imitates'])

    _, r = self.anagrams2.get_anagrams("imitating")
    self.assertEqual(r, ['imitating'])

    _, r = self.anagrams2.get_anagrams("imitation")
    self.assertEqual(r, ['imitation'])

    _, r = self.anagrams2.get_anagrams("imitations")
    self.assertEqual(r, ['imitations'])

    _, r = self.anagrams2.get_anagrams("imitative")
    self.assertEqual(r, ['imitative'])

    _, r = self.anagrams2.get_anagrams("immaculate")
    self.assertEqual(r, ['immaculate'])

    _, r = self.anagrams2.get_anagrams("immaculately")
    self.assertEqual(r, ['immaculately'])

    _, r = self.anagrams2.get_anagrams("immaterial")
    self.assertEqual(r, ['immaterial'])

    _, r = self.anagrams2.get_anagrams("immaterially")
    self.assertEqual(r, ['immaterially'])

    _, r = self.anagrams2.get_anagrams("immature")
    self.assertEqual(r, ['immature'])

    _, r = self.anagrams2.get_anagrams("immaturity")
    self.assertEqual(r, ['immaturity'])

    _, r = self.anagrams2.get_anagrams("immediacies")
    self.assertEqual(r, ['immediacies'])

    _, r = self.anagrams2.get_anagrams("immediacy")
    self.assertEqual(r, ['immediacy'])

    _, r = self.anagrams2.get_anagrams("immediate")
    self.assertEqual(r, ['immediate'])

    _, r = self.anagrams2.get_anagrams("immediately")
    self.assertEqual(r, ['immediately'])

    _, r = self.anagrams2.get_anagrams("immemorial")
    self.assertEqual(r, ['immemorial'])

    _, r = self.anagrams2.get_anagrams("immense")
    self.assertEqual(r, ['immense'])

    _, r = self.anagrams2.get_anagrams("immensely")
    self.assertEqual(r, ['immensely'])

    _, r = self.anagrams2.get_anagrams("immerse")
    self.assertEqual(r, ['immerse'])

    _, r = self.anagrams2.get_anagrams("immersed")
    self.assertEqual(r, ['immersed', 'simmered'])

    _, r = self.anagrams2.get_anagrams("immerses")
    self.assertEqual(r, ['immerses'])

    _, r = self.anagrams2.get_anagrams("immersion")
    self.assertEqual(r, ['immersion'])

    _, r = self.anagrams2.get_anagrams("immigrant")
    self.assertEqual(r, ['immigrant'])

    _, r = self.anagrams2.get_anagrams("immigrants")
    self.assertEqual(r, ['immigrants'])

    _, r = self.anagrams2.get_anagrams("immigrate")
    self.assertEqual(r, ['immigrate'])

    _, r = self.anagrams2.get_anagrams("immigrated")
    self.assertEqual(r, ['immigrated'])

    _, r = self.anagrams2.get_anagrams("immigrates")
    self.assertEqual(r, ['immigrates'])

    _, r = self.anagrams2.get_anagrams("immigrating")
    self.assertEqual(r, ['immigrating'])

    _, r = self.anagrams2.get_anagrams("immigration")
    self.assertEqual(r, ['immigration'])

    _, r = self.anagrams2.get_anagrams("imminent")
    self.assertEqual(r, ['imminent'])

    _, r = self.anagrams2.get_anagrams("imminently")
    self.assertEqual(r, ['imminently'])

    _, r = self.anagrams2.get_anagrams("immoderate")
    self.assertEqual(r, ['immoderate'])

    _, r = self.anagrams2.get_anagrams("immodest")
    self.assertEqual(r, ['immodest'])

    _, r = self.anagrams2.get_anagrams("immoral")
    self.assertEqual(r, ['immoral'])

    _, r = self.anagrams2.get_anagrams("immortal")
    self.assertEqual(r, ['immortal'])

    _, r = self.anagrams2.get_anagrams("immortality")
    self.assertEqual(r, ['immortality'])

    _, r = self.anagrams2.get_anagrams("immortally")
    self.assertEqual(r, ['immortally'])

    _, r = self.anagrams2.get_anagrams("immovability")
    self.assertEqual(r, ['immovability'])

    _, r = self.anagrams2.get_anagrams("immovable")
    self.assertEqual(r, ['immovable'])

    _, r = self.anagrams2.get_anagrams("immovably")
    self.assertEqual(r, ['immovably'])

    _, r = self.anagrams2.get_anagrams("immune")
    self.assertEqual(r, ['immune'])

    _, r = self.anagrams2.get_anagrams("immunities")
    self.assertEqual(r, ['immunities'])

    _, r = self.anagrams2.get_anagrams("immunity")
    self.assertEqual(r, ['immunity'])

    _, r = self.anagrams2.get_anagrams("immunization")
    self.assertEqual(r, ['immunization'])

    _, r = self.anagrams2.get_anagrams("immutable")
    self.assertEqual(r, ['immutable'])

    _, r = self.anagrams2.get_anagrams("imp")
    self.assertEqual(r, ['imp'])

    _, r = self.anagrams2.get_anagrams("impact")
    self.assertEqual(r, ['impact'])

    _, r = self.anagrams2.get_anagrams("impacted")
    self.assertEqual(r, ['impacted'])

    _, r = self.anagrams2.get_anagrams("impacting")
    self.assertEqual(r, ['impacting'])

    _, r = self.anagrams2.get_anagrams("impaction")
    self.assertEqual(r, ['impaction'])

    _, r = self.anagrams2.get_anagrams("impactor")
    self.assertEqual(r, ['impactor'])

    _, r = self.anagrams2.get_anagrams("impactors")
    self.assertEqual(r, ['impactors'])

    _, r = self.anagrams2.get_anagrams("impacts")
    self.assertEqual(r, ['impacts'])

    _, r = self.anagrams2.get_anagrams("impair")
    self.assertEqual(r, ['impair'])

    _, r = self.anagrams2.get_anagrams("impaired")
    self.assertEqual(r, ['impaired'])

    _, r = self.anagrams2.get_anagrams("impairing")
    self.assertEqual(r, ['impairing'])

    _, r = self.anagrams2.get_anagrams("impairs")
    self.assertEqual(r, ['impairs'])

    _, r = self.anagrams2.get_anagrams("impale")
    self.assertEqual(r, ['impale'])

    _, r = self.anagrams2.get_anagrams("impart")
    self.assertEqual(r, ['armpit', 'impart'])

    _, r = self.anagrams2.get_anagrams("imparted")
    self.assertEqual(r, ['imparted'])

    _, r = self.anagrams2.get_anagrams("impartial")
    self.assertEqual(r, ['impartial'])

    _, r = self.anagrams2.get_anagrams("impartially")
    self.assertEqual(r, ['impartially'])

    _, r = self.anagrams2.get_anagrams("imparts")
    self.assertEqual(r, ['armpits', 'imparts'])

    _, r = self.anagrams2.get_anagrams("impasse")
    self.assertEqual(r, ['impasse'])

    _, r = self.anagrams2.get_anagrams("impassive")
    self.assertEqual(r, ['impassive'])

    _, r = self.anagrams2.get_anagrams("impatience")
    self.assertEqual(r, ['impatience'])

    _, r = self.anagrams2.get_anagrams("impatient")
    self.assertEqual(r, ['impatient'])

    _, r = self.anagrams2.get_anagrams("impatiently")
    self.assertEqual(r, ['impatiently'])

    _, r = self.anagrams2.get_anagrams("impeach")
    self.assertEqual(r, ['impeach'])

    _, r = self.anagrams2.get_anagrams("impeachable")
    self.assertEqual(r, ['impeachable'])

    _, r = self.anagrams2.get_anagrams("impeached")
    self.assertEqual(r, ['impeached'])

    _, r = self.anagrams2.get_anagrams("impeachment")
    self.assertEqual(r, ['impeachment'])

    _, r = self.anagrams2.get_anagrams("impeccable")
    self.assertEqual(r, ['impeccable'])

    _, r = self.anagrams2.get_anagrams("impedance")
    self.assertEqual(r, ['impedance'])

    _, r = self.anagrams2.get_anagrams("impedances")
    self.assertEqual(r, ['impedances'])

    _, r = self.anagrams2.get_anagrams("impede")
    self.assertEqual(r, ['impede'])

    _, r = self.anagrams2.get_anagrams("impeded")
    self.assertEqual(r, ['impeded'])

    _, r = self.anagrams2.get_anagrams("impedes")
    self.assertEqual(r, ['impedes'])

    _, r = self.anagrams2.get_anagrams("impediment")
    self.assertEqual(r, ['impediment'])

    _, r = self.anagrams2.get_anagrams("impediments")
    self.assertEqual(r, ['impediments'])

    _, r = self.anagrams2.get_anagrams("impeding")
    self.assertEqual(r, ['impeding', 'impinged'])

    _, r = self.anagrams2.get_anagrams("impel")
    self.assertEqual(r, ['impel'])

    _, r = self.anagrams2.get_anagrams("impelled")
    self.assertEqual(r, ['impelled'])

    _, r = self.anagrams2.get_anagrams("impelling")
    self.assertEqual(r, ['impelling'])

    _, r = self.anagrams2.get_anagrams("impend")
    self.assertEqual(r, ['impend'])

    _, r = self.anagrams2.get_anagrams("impending")
    self.assertEqual(r, ['impending'])

    _, r = self.anagrams2.get_anagrams("impenetrability")
    self.assertEqual(r, ['impenetrability'])

    _, r = self.anagrams2.get_anagrams("impenetrable")
    self.assertEqual(r, ['impenetrable'])

    _, r = self.anagrams2.get_anagrams("impenetrably")
    self.assertEqual(r, ['impenetrably'])

    _, r = self.anagrams2.get_anagrams("imperative")
    self.assertEqual(r, ['imperative'])

    _, r = self.anagrams2.get_anagrams("imperatively")
    self.assertEqual(r, ['imperatively'])

    _, r = self.anagrams2.get_anagrams("imperatives")
    self.assertEqual(r, ['imperatives'])

    _, r = self.anagrams2.get_anagrams("imperceivable")
    self.assertEqual(r, ['imperceivable'])

    _, r = self.anagrams2.get_anagrams("imperceptible")
    self.assertEqual(r, ['imperceptible'])

    _, r = self.anagrams2.get_anagrams("imperfect")
    self.assertEqual(r, ['imperfect'])

    _, r = self.anagrams2.get_anagrams("imperfection")
    self.assertEqual(r, ['imperfection'])

    _, r = self.anagrams2.get_anagrams("imperfections")
    self.assertEqual(r, ['imperfections'])

    _, r = self.anagrams2.get_anagrams("imperfectly")
    self.assertEqual(r, ['imperfectly'])

    _, r = self.anagrams2.get_anagrams("imperial")
    self.assertEqual(r, ['imperial'])

    _, r = self.anagrams2.get_anagrams("imperialism")
    self.assertEqual(r, ['imperialism'])

    _, r = self.anagrams2.get_anagrams("imperialist")
    self.assertEqual(r, ['imperialist'])

    _, r = self.anagrams2.get_anagrams("imperialists")
    self.assertEqual(r, ['imperialists'])

    _, r = self.anagrams2.get_anagrams("imperil")
    self.assertEqual(r, ['imperil'])

    _, r = self.anagrams2.get_anagrams("imperiled")
    self.assertEqual(r, ['imperiled'])

    _, r = self.anagrams2.get_anagrams("imperious")
    self.assertEqual(r, ['imperious'])

    _, r = self.anagrams2.get_anagrams("imperiously")
    self.assertEqual(r, ['imperiously'])

    _, r = self.anagrams2.get_anagrams("impermanence")
    self.assertEqual(r, ['impermanence'])

    _, r = self.anagrams2.get_anagrams("impermanent")
    self.assertEqual(r, ['impermanent'])

    _, r = self.anagrams2.get_anagrams("impermeable")
    self.assertEqual(r, ['impermeable'])

    _, r = self.anagrams2.get_anagrams("impermissible")
    self.assertEqual(r, ['impermissible'])

    _, r = self.anagrams2.get_anagrams("impersonal")
    self.assertEqual(r, ['impersonal'])

    _, r = self.anagrams2.get_anagrams("impersonally")
    self.assertEqual(r, ['impersonally'])

    _, r = self.anagrams2.get_anagrams("impersonate")
    self.assertEqual(r, ['impersonate'])

    _, r = self.anagrams2.get_anagrams("impersonated")
    self.assertEqual(r, ['impersonated', 'predominates'])

    _, r = self.anagrams2.get_anagrams("impersonates")
    self.assertEqual(r, ['impersonates'])

    _, r = self.anagrams2.get_anagrams("impersonating")
    self.assertEqual(r, ['impersonating'])

    _, r = self.anagrams2.get_anagrams("impersonation")
    self.assertEqual(r, ['impersonation'])

    _, r = self.anagrams2.get_anagrams("impersonations")
    self.assertEqual(r, ['impersonations'])

    _, r = self.anagrams2.get_anagrams("impertinent")
    self.assertEqual(r, ['impertinent'])

    _, r = self.anagrams2.get_anagrams("impertinently")
    self.assertEqual(r, ['impertinently'])

    _, r = self.anagrams2.get_anagrams("impervious")
    self.assertEqual(r, ['impervious'])

    _, r = self.anagrams2.get_anagrams("imperviously")
    self.assertEqual(r, ['imperviously'])

    _, r = self.anagrams2.get_anagrams("impetuous")
    self.assertEqual(r, ['impetuous'])

    _, r = self.anagrams2.get_anagrams("impetuously")
    self.assertEqual(r, ['impetuously'])

    _, r = self.anagrams2.get_anagrams("impetus")
    self.assertEqual(r, ['impetus'])

    _, r = self.anagrams2.get_anagrams("impinge")
    self.assertEqual(r, ['impinge'])

    _, r = self.anagrams2.get_anagrams("impinged")
    self.assertEqual(r, ['impeding', 'impinged'])

    _, r = self.anagrams2.get_anagrams("impinges")
    self.assertEqual(r, ['impinges'])

    _, r = self.anagrams2.get_anagrams("impinging")
    self.assertEqual(r, ['impinging'])

    _, r = self.anagrams2.get_anagrams("impious")
    self.assertEqual(r, ['impious'])

    _, r = self.anagrams2.get_anagrams("implacable")
    self.assertEqual(r, ['implacable'])

    _, r = self.anagrams2.get_anagrams("implant")
    self.assertEqual(r, ['implant'])

    _, r = self.anagrams2.get_anagrams("implanted")
    self.assertEqual(r, ['implanted'])

    _, r = self.anagrams2.get_anagrams("implanting")
    self.assertEqual(r, ['implanting'])

    _, r = self.anagrams2.get_anagrams("implants")
    self.assertEqual(r, ['implants'])

    _, r = self.anagrams2.get_anagrams("implausible")
    self.assertEqual(r, ['implausible'])

    _, r = self.anagrams2.get_anagrams("implement")
    self.assertEqual(r, ['implement'])

    _, r = self.anagrams2.get_anagrams("implementable")
    self.assertEqual(r, ['implementable'])

    _, r = self.anagrams2.get_anagrams("implementation")
    self.assertEqual(r, ['implementation'])

    _, r = self.anagrams2.get_anagrams("implementations")
    self.assertEqual(r, ['implementations'])

    _, r = self.anagrams2.get_anagrams("implemented")
    self.assertEqual(r, ['implemented'])

    _, r = self.anagrams2.get_anagrams("implementer")
    self.assertEqual(r, ['implementer'])

    _, r = self.anagrams2.get_anagrams("implementing")
    self.assertEqual(r, ['implementing'])

    _, r = self.anagrams2.get_anagrams("implementor")
    self.assertEqual(r, ['implementor'])

    _, r = self.anagrams2.get_anagrams("implementors")
    self.assertEqual(r, ['implementors'])

    _, r = self.anagrams2.get_anagrams("implements")
    self.assertEqual(r, ['implements'])

    _, r = self.anagrams2.get_anagrams("implicant")
    self.assertEqual(r, ['implicant'])

    _, r = self.anagrams2.get_anagrams("implicants")
    self.assertEqual(r, ['implicants'])

    _, r = self.anagrams2.get_anagrams("implicate")
    self.assertEqual(r, ['implicate'])

    _, r = self.anagrams2.get_anagrams("implicated")
    self.assertEqual(r, ['implicated'])

    _, r = self.anagrams2.get_anagrams("implicates")
    self.assertEqual(r, ['implicates'])

    _, r = self.anagrams2.get_anagrams("implicating")
    self.assertEqual(r, ['implicating'])

    _, r = self.anagrams2.get_anagrams("implication")
    self.assertEqual(r, ['implication'])

    _, r = self.anagrams2.get_anagrams("implications")
    self.assertEqual(r, ['implications'])

    _, r = self.anagrams2.get_anagrams("implicit")
    self.assertEqual(r, ['implicit'])

    _, r = self.anagrams2.get_anagrams("implicitly")
    self.assertEqual(r, ['implicitly'])

    _, r = self.anagrams2.get_anagrams("implicitness")
    self.assertEqual(r, ['implicitness'])

    _, r = self.anagrams2.get_anagrams("implied")
    self.assertEqual(r, ['implied'])

    _, r = self.anagrams2.get_anagrams("implies")
    self.assertEqual(r, ['implies'])

    _, r = self.anagrams2.get_anagrams("implore")
    self.assertEqual(r, ['implore'])

    _, r = self.anagrams2.get_anagrams("implored")
    self.assertEqual(r, ['implored'])

    _, r = self.anagrams2.get_anagrams("imploring")
    self.assertEqual(r, ['imploring'])

    _, r = self.anagrams2.get_anagrams("imply")
    self.assertEqual(r, ['imply'])

    _, r = self.anagrams2.get_anagrams("implying")
    self.assertEqual(r, ['implying'])

    _, r = self.anagrams2.get_anagrams("impolite")
    self.assertEqual(r, ['impolite'])

    _, r = self.anagrams2.get_anagrams("import")
    self.assertEqual(r, ['import'])

    _, r = self.anagrams2.get_anagrams("importance")
    self.assertEqual(r, ['importance'])

    _, r = self.anagrams2.get_anagrams("important")
    self.assertEqual(r, ['important'])

    _, r = self.anagrams2.get_anagrams("importantly")
    self.assertEqual(r, ['importantly'])

    _, r = self.anagrams2.get_anagrams("importation")
    self.assertEqual(r, ['importation'])

    _, r = self.anagrams2.get_anagrams("imported")
    self.assertEqual(r, ['imported'])

    _, r = self.anagrams2.get_anagrams("importer")
    self.assertEqual(r, ['importer'])

    _, r = self.anagrams2.get_anagrams("importers")
    self.assertEqual(r, ['importers'])

    _, r = self.anagrams2.get_anagrams("importing")
    self.assertEqual(r, ['importing'])

    _, r = self.anagrams2.get_anagrams("imports")
    self.assertEqual(r, ['imports'])

    _, r = self.anagrams2.get_anagrams("impose")
    self.assertEqual(r, ['impose'])

    _, r = self.anagrams2.get_anagrams("imposed")
    self.assertEqual(r, ['imposed'])

    _, r = self.anagrams2.get_anagrams("imposes")
    self.assertEqual(r, ['imposes'])

    _, r = self.anagrams2.get_anagrams("imposing")
    self.assertEqual(r, ['imposing'])

    _, r = self.anagrams2.get_anagrams("imposition")
    self.assertEqual(r, ['imposition'])

    _, r = self.anagrams2.get_anagrams("impositions")
    self.assertEqual(r, ['impositions'])

    _, r = self.anagrams2.get_anagrams("impossibilities")
    self.assertEqual(r, ['impossibilities'])

    _, r = self.anagrams2.get_anagrams("impossibility")
    self.assertEqual(r, ['impossibility'])

    _, r = self.anagrams2.get_anagrams("impossible")
    self.assertEqual(r, ['impossible'])

    _, r = self.anagrams2.get_anagrams("impossibly")
    self.assertEqual(r, ['impossibly'])

    _, r = self.anagrams2.get_anagrams("impostor")
    self.assertEqual(r, ['impostor'])

    _, r = self.anagrams2.get_anagrams("impostors")
    self.assertEqual(r, ['impostors'])

    _, r = self.anagrams2.get_anagrams("impotence")
    self.assertEqual(r, ['impotence'])

    _, r = self.anagrams2.get_anagrams("impotency")
    self.assertEqual(r, ['impotency'])

    _, r = self.anagrams2.get_anagrams("impotent")
    self.assertEqual(r, ['impotent'])

    _, r = self.anagrams2.get_anagrams("impound")
    self.assertEqual(r, ['impound'])

    _, r = self.anagrams2.get_anagrams("impoverish")
    self.assertEqual(r, ['impoverish'])

    _, r = self.anagrams2.get_anagrams("impoverished")
    self.assertEqual(r, ['impoverished'])

    _, r = self.anagrams2.get_anagrams("impoverishment")
    self.assertEqual(r, ['impoverishment'])

    _, r = self.anagrams2.get_anagrams("impracticable")
    self.assertEqual(r, ['impracticable'])

    _, r = self.anagrams2.get_anagrams("impractical")
    self.assertEqual(r, ['impractical'])

    _, r = self.anagrams2.get_anagrams("impracticality")
    self.assertEqual(r, ['impracticality'])

    _, r = self.anagrams2.get_anagrams("impractically")
    self.assertEqual(r, ['impractically'])

    _, r = self.anagrams2.get_anagrams("imprecise")
    self.assertEqual(r, ['imprecise'])

    _, r = self.anagrams2.get_anagrams("imprecisely")
    self.assertEqual(r, ['imprecisely'])

    _, r = self.anagrams2.get_anagrams("imprecision")
    self.assertEqual(r, ['imprecision'])

    _, r = self.anagrams2.get_anagrams("impregnable")
    self.assertEqual(r, ['impregnable'])

    _, r = self.anagrams2.get_anagrams("impregnate")
    self.assertEqual(r, ['impregnate', 'permeating'])

    _, r = self.anagrams2.get_anagrams("impress")
    self.assertEqual(r, ['impress'])

    _, r = self.anagrams2.get_anagrams("impressed")
    self.assertEqual(r, ['impressed'])

    _, r = self.anagrams2.get_anagrams("impresser")
    self.assertEqual(r, ['impresser'])

    _, r = self.anagrams2.get_anagrams("impresses")
    self.assertEqual(r, ['impresses'])

    _, r = self.anagrams2.get_anagrams("impressible")
    self.assertEqual(r, ['impressible', 'permissible'])

    _, r = self.anagrams2.get_anagrams("impressing")
    self.assertEqual(r, ['impressing'])

    _, r = self.anagrams2.get_anagrams("impression")
    self.assertEqual(r, ['impression', 'permission'])

    _, r = self.anagrams2.get_anagrams("impressionable")
    self.assertEqual(r, ['impressionable'])

    _, r = self.anagrams2.get_anagrams("impressionist")
    self.assertEqual(r, ['impressionist'])

    _, r = self.anagrams2.get_anagrams("impressionistic")
    self.assertEqual(r, ['impressionistic'])

    _, r = self.anagrams2.get_anagrams("impressions")
    self.assertEqual(r, ['impressions', 'permissions'])

    _, r = self.anagrams2.get_anagrams("impressive")
    self.assertEqual(r, ['impressive', 'permissive'])

    _, r = self.anagrams2.get_anagrams("impressively")
    self.assertEqual(r, ['impressively', 'permissively'])

    _, r = self.anagrams2.get_anagrams("impressiveness")
    self.assertEqual(r, ['impressiveness'])

    _, r = self.anagrams2.get_anagrams("impressment")
    self.assertEqual(r, ['impressment'])

    _, r = self.anagrams2.get_anagrams("imprimatur")
    self.assertEqual(r, ['imprimatur'])

    _, r = self.anagrams2.get_anagrams("imprint")
    self.assertEqual(r, ['imprint'])

    _, r = self.anagrams2.get_anagrams("imprinted")
    self.assertEqual(r, ['imprinted'])

    _, r = self.anagrams2.get_anagrams("imprinting")
    self.assertEqual(r, ['imprinting'])

    _, r = self.anagrams2.get_anagrams("imprints")
    self.assertEqual(r, ['imprints'])

    _, r = self.anagrams2.get_anagrams("imprison")
    self.assertEqual(r, ['imprison'])

    _, r = self.anagrams2.get_anagrams("imprisoned")
    self.assertEqual(r, ['imprisoned'])

    _, r = self.anagrams2.get_anagrams("imprisoning")
    self.assertEqual(r, ['imprisoning'])

    _, r = self.anagrams2.get_anagrams("imprisonment")
    self.assertEqual(r, ['imprisonment'])

    _, r = self.anagrams2.get_anagrams("imprisonments")
    self.assertEqual(r, ['imprisonments'])

    _, r = self.anagrams2.get_anagrams("imprisons")
    self.assertEqual(r, ['imprisons'])

    _, r = self.anagrams2.get_anagrams("improbability")
    self.assertEqual(r, ['improbability'])

    _, r = self.anagrams2.get_anagrams("improbable")
    self.assertEqual(r, ['improbable'])

    _, r = self.anagrams2.get_anagrams("impromptu")
    self.assertEqual(r, ['impromptu'])

    _, r = self.anagrams2.get_anagrams("improper")
    self.assertEqual(r, ['improper'])

    _, r = self.anagrams2.get_anagrams("improperly")
    self.assertEqual(r, ['improperly'])

    _, r = self.anagrams2.get_anagrams("impropriety")
    self.assertEqual(r, ['impropriety'])

    _, r = self.anagrams2.get_anagrams("improve")
    self.assertEqual(r, ['improve'])

    _, r = self.anagrams2.get_anagrams("improved")
    self.assertEqual(r, ['improved'])

    _, r = self.anagrams2.get_anagrams("improvement")
    self.assertEqual(r, ['improvement'])

    _, r = self.anagrams2.get_anagrams("improvements")
    self.assertEqual(r, ['improvements'])

    _, r = self.anagrams2.get_anagrams("improves")
    self.assertEqual(r, ['improves'])

    _, r = self.anagrams2.get_anagrams("improving")
    self.assertEqual(r, ['improving'])

    _, r = self.anagrams2.get_anagrams("improvisation")
    self.assertEqual(r, ['improvisation'])

    _, r = self.anagrams2.get_anagrams("improvisational")
    self.assertEqual(r, ['improvisational'])

    _, r = self.anagrams2.get_anagrams("improvisations")
    self.assertEqual(r, ['improvisations'])

    _, r = self.anagrams2.get_anagrams("improvise")
    self.assertEqual(r, ['improvise'])

    _, r = self.anagrams2.get_anagrams("improvised")
    self.assertEqual(r, ['improvised'])

    _, r = self.anagrams2.get_anagrams("improviser")
    self.assertEqual(r, ['improviser'])

    _, r = self.anagrams2.get_anagrams("improvisers")
    self.assertEqual(r, ['improvisers'])

    _, r = self.anagrams2.get_anagrams("improvises")
    self.assertEqual(r, ['improvises'])

    _, r = self.anagrams2.get_anagrams("improvising")
    self.assertEqual(r, ['improvising'])

    _, r = self.anagrams2.get_anagrams("imprudent")
    self.assertEqual(r, ['imprudent'])

    _, r = self.anagrams2.get_anagrams("imps")
    self.assertEqual(r, ['imps', 'mips'])

    _, r = self.anagrams2.get_anagrams("impudent")
    self.assertEqual(r, ['impudent'])

    _, r = self.anagrams2.get_anagrams("impudently")
    self.assertEqual(r, ['impudently'])

    _, r = self.anagrams2.get_anagrams("impugn")
    self.assertEqual(r, ['impugn'])

    _, r = self.anagrams2.get_anagrams("impulse")
    self.assertEqual(r, ['impulse'])

    _, r = self.anagrams2.get_anagrams("impulses")
    self.assertEqual(r, ['impulses'])

    _, r = self.anagrams2.get_anagrams("impulsion")
    self.assertEqual(r, ['impulsion'])

    _, r = self.anagrams2.get_anagrams("impulsive")
    self.assertEqual(r, ['impulsive'])

    _, r = self.anagrams2.get_anagrams("impunity")
    self.assertEqual(r, ['impunity'])

    _, r = self.anagrams2.get_anagrams("impure")
    self.assertEqual(r, ['impure', 'umpire'])

    _, r = self.anagrams2.get_anagrams("impurities")
    self.assertEqual(r, ['impurities'])

    _, r = self.anagrams2.get_anagrams("impurity")
    self.assertEqual(r, ['impurity'])

    _, r = self.anagrams2.get_anagrams("impute")
    self.assertEqual(r, ['impute'])

    _, r = self.anagrams2.get_anagrams("imputed")
    self.assertEqual(r, ['imputed'])

    _, r = self.anagrams2.get_anagrams("in")
    self.assertEqual(r, ['in'])

    _, r = self.anagrams2.get_anagrams("inability")
    self.assertEqual(r, ['inability'])

    _, r = self.anagrams2.get_anagrams("inaccessible")
    self.assertEqual(r, ['inaccessible'])

    _, r = self.anagrams2.get_anagrams("inaccuracies")
    self.assertEqual(r, ['inaccuracies'])

    _, r = self.anagrams2.get_anagrams("inaccuracy")
    self.assertEqual(r, ['inaccuracy'])

    _, r = self.anagrams2.get_anagrams("inaccurate")
    self.assertEqual(r, ['inaccurate'])

    _, r = self.anagrams2.get_anagrams("inaction")
    self.assertEqual(r, ['inaction'])

    _, r = self.anagrams2.get_anagrams("inactivate")
    self.assertEqual(r, ['inactivate'])

    _, r = self.anagrams2.get_anagrams("inactive")
    self.assertEqual(r, ['inactive'])

    _, r = self.anagrams2.get_anagrams("inactivity")
    self.assertEqual(r, ['inactivity'])

    _, r = self.anagrams2.get_anagrams("inadequacies")
    self.assertEqual(r, ['inadequacies'])

    _, r = self.anagrams2.get_anagrams("inadequacy")
    self.assertEqual(r, ['inadequacy'])

    _, r = self.anagrams2.get_anagrams("inadequate")
    self.assertEqual(r, ['inadequate'])

    _, r = self.anagrams2.get_anagrams("inadequately")
    self.assertEqual(r, ['inadequately'])

    _, r = self.anagrams2.get_anagrams("inadequateness")
    self.assertEqual(r, ['inadequateness'])

    _, r = self.anagrams2.get_anagrams("inadmissibility")
    self.assertEqual(r, ['inadmissibility'])

    _, r = self.anagrams2.get_anagrams("inadmissible")
    self.assertEqual(r, ['inadmissible'])

    _, r = self.anagrams2.get_anagrams("inadvertent")
    self.assertEqual(r, ['inadvertent'])

    _, r = self.anagrams2.get_anagrams("inadvertently")
    self.assertEqual(r, ['inadvertently'])

    _, r = self.anagrams2.get_anagrams("inadvisable")
    self.assertEqual(r, ['inadvisable'])

    _, r = self.anagrams2.get_anagrams("inalienable")
    self.assertEqual(r, ['inalienable'])

    _, r = self.anagrams2.get_anagrams("inalterable")
    self.assertEqual(r, ['inalterable'])

    _, r = self.anagrams2.get_anagrams("inane")
    self.assertEqual(r, ['annie', 'inane'])

    _, r = self.anagrams2.get_anagrams("inanimate")
    self.assertEqual(r, ['inanimate'])

    _, r = self.anagrams2.get_anagrams("inanimately")
    self.assertEqual(r, ['inanimately'])

    _, r = self.anagrams2.get_anagrams("inanna")
    self.assertEqual(r, ['inanna'])

    _, r = self.anagrams2.get_anagrams("inapplicable")
    self.assertEqual(r, ['inapplicable'])

    _, r = self.anagrams2.get_anagrams("inapproachable")
    self.assertEqual(r, ['inapproachable'])

    _, r = self.anagrams2.get_anagrams("inappropriate")
    self.assertEqual(r, ['inappropriate'])

    _, r = self.anagrams2.get_anagrams("inappropriateness")
    self.assertEqual(r, ['inappropriateness'])

    _, r = self.anagrams2.get_anagrams("inasmuch")
    self.assertEqual(r, ['inasmuch'])

    _, r = self.anagrams2.get_anagrams("inattention")
    self.assertEqual(r, ['inattention'])

    _, r = self.anagrams2.get_anagrams("inaudible")
    self.assertEqual(r, ['inaudible'])

    _, r = self.anagrams2.get_anagrams("inaugural")
    self.assertEqual(r, ['inaugural'])

    _, r = self.anagrams2.get_anagrams("inaugurate")
    self.assertEqual(r, ['inaugurate'])

    _, r = self.anagrams2.get_anagrams("inaugurated")
    self.assertEqual(r, ['inaugurated'])

    _, r = self.anagrams2.get_anagrams("inaugurating")
    self.assertEqual(r, ['inaugurating'])

    _, r = self.anagrams2.get_anagrams("inauguration")
    self.assertEqual(r, ['inauguration'])

    _, r = self.anagrams2.get_anagrams("inauspicious")
    self.assertEqual(r, ['inauspicious'])

    _, r = self.anagrams2.get_anagrams("inboard")
    self.assertEqual(r, ['inboard'])

    _, r = self.anagrams2.get_anagrams("inbound")
    self.assertEqual(r, ['inbound'])

    _, r = self.anagrams2.get_anagrams("inbreed")
    self.assertEqual(r, ['inbreed'])

    _, r = self.anagrams2.get_anagrams("inca")
    self.assertEqual(r, ['cain', 'inca'])

    _, r = self.anagrams2.get_anagrams("incalculable")
    self.assertEqual(r, ['incalculable'])

    _, r = self.anagrams2.get_anagrams("incandescent")
    self.assertEqual(r, ['incandescent'])

    _, r = self.anagrams2.get_anagrams("incantation")
    self.assertEqual(r, ['incantation'])

    _, r = self.anagrams2.get_anagrams("incapable")
    self.assertEqual(r, ['incapable'])

    _, r = self.anagrams2.get_anagrams("incapacitate")
    self.assertEqual(r, ['incapacitate'])

    _, r = self.anagrams2.get_anagrams("incapacitating")
    self.assertEqual(r, ['incapacitating'])

    _, r = self.anagrams2.get_anagrams("incarcerate")
    self.assertEqual(r, ['incarcerate'])

    _, r = self.anagrams2.get_anagrams("incarnation")
    self.assertEqual(r, ['incarnation'])

    _, r = self.anagrams2.get_anagrams("incarnations")
    self.assertEqual(r, ['incarnations'])

    _, r = self.anagrams2.get_anagrams("incas")
    self.assertEqual(r, ['canis', 'incas'])

    _, r = self.anagrams2.get_anagrams("incendiaries")
    self.assertEqual(r, ['incendiaries'])

    _, r = self.anagrams2.get_anagrams("incendiary")
    self.assertEqual(r, ['incendiary'])

    _, r = self.anagrams2.get_anagrams("incense")
    self.assertEqual(r, ['incense'])

    _, r = self.anagrams2.get_anagrams("incensed")
    self.assertEqual(r, ['incensed'])

    _, r = self.anagrams2.get_anagrams("incenses")
    self.assertEqual(r, ['incenses', 'niceness'])

    _, r = self.anagrams2.get_anagrams("incentive")
    self.assertEqual(r, ['incentive'])

    _, r = self.anagrams2.get_anagrams("incentives")
    self.assertEqual(r, ['incentives'])

    _, r = self.anagrams2.get_anagrams("inception")
    self.assertEqual(r, ['inception'])

    _, r = self.anagrams2.get_anagrams("incessant")
    self.assertEqual(r, ['incessant', 'instances'])

    _, r = self.anagrams2.get_anagrams("incessantly")
    self.assertEqual(r, ['incessantly'])

    _, r = self.anagrams2.get_anagrams("incest")
    self.assertEqual(r, ['incest', 'insect', 'nicest'])

    _, r = self.anagrams2.get_anagrams("incestuous")
    self.assertEqual(r, ['incestuous'])

    _, r = self.anagrams2.get_anagrams("inch")
    self.assertEqual(r, ['chin', 'inch'])

    _, r = self.anagrams2.get_anagrams("inched")
    self.assertEqual(r, ['inched'])

    _, r = self.anagrams2.get_anagrams("inches")
    self.assertEqual(r, ['inches'])

    _, r = self.anagrams2.get_anagrams("inching")
    self.assertEqual(r, ['inching'])

    _, r = self.anagrams2.get_anagrams("incidence")
    self.assertEqual(r, ['incidence'])

    _, r = self.anagrams2.get_anagrams("incident")
    self.assertEqual(r, ['incident'])

    _, r = self.anagrams2.get_anagrams("incidental")
    self.assertEqual(r, ['incidental'])

    _, r = self.anagrams2.get_anagrams("incidentally")
    self.assertEqual(r, ['incidentally'])

    _, r = self.anagrams2.get_anagrams("incidentals")
    self.assertEqual(r, ['incidentals'])

    _, r = self.anagrams2.get_anagrams("incidents")
    self.assertEqual(r, ['incidents'])

    _, r = self.anagrams2.get_anagrams("incinerate")
    self.assertEqual(r, ['incinerate'])

    _, r = self.anagrams2.get_anagrams("incipient")
    self.assertEqual(r, ['incipient'])

    _, r = self.anagrams2.get_anagrams("incisive")
    self.assertEqual(r, ['incisive'])

    _, r = self.anagrams2.get_anagrams("incite")
    self.assertEqual(r, ['incite'])

    _, r = self.anagrams2.get_anagrams("incited")
    self.assertEqual(r, ['incited'])

    _, r = self.anagrams2.get_anagrams("incitement")
    self.assertEqual(r, ['incitement'])

    _, r = self.anagrams2.get_anagrams("incites")
    self.assertEqual(r, ['incites'])

    _, r = self.anagrams2.get_anagrams("inciting")
    self.assertEqual(r, ['inciting'])

    _, r = self.anagrams2.get_anagrams("inclement")
    self.assertEqual(r, ['inclement'])

    _, r = self.anagrams2.get_anagrams("inclination")
    self.assertEqual(r, ['inclination'])

    _, r = self.anagrams2.get_anagrams("inclinations")
    self.assertEqual(r, ['inclinations'])

    _, r = self.anagrams2.get_anagrams("incline")
    self.assertEqual(r, ['incline'])

    _, r = self.anagrams2.get_anagrams("inclined")
    self.assertEqual(r, ['inclined'])

    _, r = self.anagrams2.get_anagrams("inclines")
    self.assertEqual(r, ['inclines'])

    _, r = self.anagrams2.get_anagrams("inclining")
    self.assertEqual(r, ['inclining'])

    _, r = self.anagrams2.get_anagrams("inclose")
    self.assertEqual(r, ['inclose'])

    _, r = self.anagrams2.get_anagrams("inclosed")
    self.assertEqual(r, ['inclosed'])

    _, r = self.anagrams2.get_anagrams("incloses")
    self.assertEqual(r, ['incloses'])

    _, r = self.anagrams2.get_anagrams("inclosing")
    self.assertEqual(r, ['inclosing'])

    _, r = self.anagrams2.get_anagrams("include")
    self.assertEqual(r, ['include', 'nuclide'])

    _, r = self.anagrams2.get_anagrams("included")
    self.assertEqual(r, ['included'])

    _, r = self.anagrams2.get_anagrams("includes")
    self.assertEqual(r, ['includes'])

    _, r = self.anagrams2.get_anagrams("including")
    self.assertEqual(r, ['including'])

    _, r = self.anagrams2.get_anagrams("inclusion")
    self.assertEqual(r, ['inclusion'])

    _, r = self.anagrams2.get_anagrams("inclusions")
    self.assertEqual(r, ['inclusions'])

    _, r = self.anagrams2.get_anagrams("inclusive")
    self.assertEqual(r, ['inclusive'])

    _, r = self.anagrams2.get_anagrams("inclusively")
    self.assertEqual(r, ['inclusively'])

    _, r = self.anagrams2.get_anagrams("inclusiveness")
    self.assertEqual(r, ['inclusiveness'])

    _, r = self.anagrams2.get_anagrams("incoherence")
    self.assertEqual(r, ['incoherence'])

    _, r = self.anagrams2.get_anagrams("incoherent")
    self.assertEqual(r, ['incoherent'])

    _, r = self.anagrams2.get_anagrams("incoherently")
    self.assertEqual(r, ['incoherently'])

    _, r = self.anagrams2.get_anagrams("income")
    self.assertEqual(r, ['income'])

    _, r = self.anagrams2.get_anagrams("incomes")
    self.assertEqual(r, ['incomes'])

    _, r = self.anagrams2.get_anagrams("incoming")
    self.assertEqual(r, ['incoming'])

    _, r = self.anagrams2.get_anagrams("incommensurable")
    self.assertEqual(r, ['incommensurable'])

    _, r = self.anagrams2.get_anagrams("incommensurate")
    self.assertEqual(r, ['incommensurate'])

    _, r = self.anagrams2.get_anagrams("incommunicable")
    self.assertEqual(r, ['incommunicable'])

    _, r = self.anagrams2.get_anagrams("incomparable")
    self.assertEqual(r, ['incomparable'])

    _, r = self.anagrams2.get_anagrams("incomparably")
    self.assertEqual(r, ['incomparably'])

    _, r = self.anagrams2.get_anagrams("incompatibilities")
    self.assertEqual(r, ['incompatibilities'])

    _, r = self.anagrams2.get_anagrams("incompatibility")
    self.assertEqual(r, ['incompatibility'])

    _, r = self.anagrams2.get_anagrams("incompatible")
    self.assertEqual(r, ['incompatible'])

    _, r = self.anagrams2.get_anagrams("incompatibly")
    self.assertEqual(r, ['incompatibly'])

    _, r = self.anagrams2.get_anagrams("incompetence")
    self.assertEqual(r, ['incompetence'])

    _, r = self.anagrams2.get_anagrams("incompetent")
    self.assertEqual(r, ['incompetent'])

    _, r = self.anagrams2.get_anagrams("incompetents")
    self.assertEqual(r, ['incompetents'])

    _, r = self.anagrams2.get_anagrams("incomplete")
    self.assertEqual(r, ['incomplete'])

    _, r = self.anagrams2.get_anagrams("incompletely")
    self.assertEqual(r, ['incompletely'])

    _, r = self.anagrams2.get_anagrams("incompleteness")
    self.assertEqual(r, ['incompleteness'])

    _, r = self.anagrams2.get_anagrams("incomprehensibility")
    self.assertEqual(r, ['incomprehensibility'])

    _, r = self.anagrams2.get_anagrams("incomprehensible")
    self.assertEqual(r, ['incomprehensible'])

    _, r = self.anagrams2.get_anagrams("incomprehensibly")
    self.assertEqual(r, ['incomprehensibly'])

    _, r = self.anagrams2.get_anagrams("incomprehension")
    self.assertEqual(r, ['incomprehension'])

    _, r = self.anagrams2.get_anagrams("incompressible")
    self.assertEqual(r, ['incompressible'])

    _, r = self.anagrams2.get_anagrams("incomputable")
    self.assertEqual(r, ['incomputable'])

    _, r = self.anagrams2.get_anagrams("inconceivable")
    self.assertEqual(r, ['inconceivable'])

    _, r = self.anagrams2.get_anagrams("inconclusive")
    self.assertEqual(r, ['inconclusive'])

    _, r = self.anagrams2.get_anagrams("incongruity")
    self.assertEqual(r, ['incongruity'])

    _, r = self.anagrams2.get_anagrams("incongruous")
    self.assertEqual(r, ['incongruous'])

    _, r = self.anagrams2.get_anagrams("inconsequential")
    self.assertEqual(r, ['inconsequential'])

    _, r = self.anagrams2.get_anagrams("inconsequentially")
    self.assertEqual(r, ['inconsequentially'])

    _, r = self.anagrams2.get_anagrams("inconsiderable")
    self.assertEqual(r, ['inconsiderable'])

    _, r = self.anagrams2.get_anagrams("inconsiderate")
    self.assertEqual(r, ['inconsiderate'])

    _, r = self.anagrams2.get_anagrams("inconsiderately")
    self.assertEqual(r, ['inconsiderately'])

    _, r = self.anagrams2.get_anagrams("inconsiderateness")
    self.assertEqual(r, ['inconsiderateness'])

    _, r = self.anagrams2.get_anagrams("inconsistencies")
    self.assertEqual(r, ['inconsistencies'])

    _, r = self.anagrams2.get_anagrams("inconsistency")
    self.assertEqual(r, ['inconsistency'])

    _, r = self.anagrams2.get_anagrams("inconsistent")
    self.assertEqual(r, ['inconsistent'])

    _, r = self.anagrams2.get_anagrams("inconsistently")
    self.assertEqual(r, ['inconsistently'])

    _, r = self.anagrams2.get_anagrams("inconspicuous")
    self.assertEqual(r, ['inconspicuous'])

    _, r = self.anagrams2.get_anagrams("incontestable")
    self.assertEqual(r, ['incontestable'])

    _, r = self.anagrams2.get_anagrams("incontrovertible")
    self.assertEqual(r, ['incontrovertible'])

    _, r = self.anagrams2.get_anagrams("incontrovertibly")
    self.assertEqual(r, ['incontrovertibly'])

    _, r = self.anagrams2.get_anagrams("inconvenience")
    self.assertEqual(r, ['inconvenience'])

    _, r = self.anagrams2.get_anagrams("inconvenienced")
    self.assertEqual(r, ['inconvenienced'])

    _, r = self.anagrams2.get_anagrams("inconveniences")
    self.assertEqual(r, ['inconveniences'])

    _, r = self.anagrams2.get_anagrams("inconveniencing")
    self.assertEqual(r, ['inconveniencing'])

    _, r = self.anagrams2.get_anagrams("inconvenient")
    self.assertEqual(r, ['inconvenient'])

    _, r = self.anagrams2.get_anagrams("inconveniently")
    self.assertEqual(r, ['inconveniently'])

    _, r = self.anagrams2.get_anagrams("inconvertible")
    self.assertEqual(r, ['inconvertible'])

    _, r = self.anagrams2.get_anagrams("incorporate")
    self.assertEqual(r, ['incorporate'])

    _, r = self.anagrams2.get_anagrams("incorporated")
    self.assertEqual(r, ['incorporated'])

    _, r = self.anagrams2.get_anagrams("incorporates")
    self.assertEqual(r, ['incorporates'])

    _, r = self.anagrams2.get_anagrams("incorporating")
    self.assertEqual(r, ['incorporating'])

    _, r = self.anagrams2.get_anagrams("incorporation")
    self.assertEqual(r, ['incorporation'])

    _, r = self.anagrams2.get_anagrams("incorrect")
    self.assertEqual(r, ['incorrect'])

    _, r = self.anagrams2.get_anagrams("incorrectly")
    self.assertEqual(r, ['incorrectly'])

    _, r = self.anagrams2.get_anagrams("incorrectness")
    self.assertEqual(r, ['incorrectness'])

    _, r = self.anagrams2.get_anagrams("incorrigible")
    self.assertEqual(r, ['incorrigible'])

    _, r = self.anagrams2.get_anagrams("increase")
    self.assertEqual(r, ['increase'])

    _, r = self.anagrams2.get_anagrams("increased")
    self.assertEqual(r, ['increased'])

    _, r = self.anagrams2.get_anagrams("increases")
    self.assertEqual(r, ['increases'])

    _, r = self.anagrams2.get_anagrams("increasing")
    self.assertEqual(r, ['increasing'])

    _, r = self.anagrams2.get_anagrams("increasingly")
    self.assertEqual(r, ['increasingly'])

    _, r = self.anagrams2.get_anagrams("incredible")
    self.assertEqual(r, ['incredible'])

    _, r = self.anagrams2.get_anagrams("incredibly")
    self.assertEqual(r, ['incredibly'])

    _, r = self.anagrams2.get_anagrams("incredulity")
    self.assertEqual(r, ['incredulity'])

    _, r = self.anagrams2.get_anagrams("incredulous")
    self.assertEqual(r, ['incredulous'])

    _, r = self.anagrams2.get_anagrams("incredulously")
    self.assertEqual(r, ['incredulously'])

    _, r = self.anagrams2.get_anagrams("increment")
    self.assertEqual(r, ['increment'])

    _, r = self.anagrams2.get_anagrams("incremental")
    self.assertEqual(r, ['incremental'])

    _, r = self.anagrams2.get_anagrams("incrementally")
    self.assertEqual(r, ['incrementally'])

    _, r = self.anagrams2.get_anagrams("incremented")
    self.assertEqual(r, ['incremented'])

    _, r = self.anagrams2.get_anagrams("incrementer")
    self.assertEqual(r, ['incrementer'])

    _, r = self.anagrams2.get_anagrams("incrementing")
    self.assertEqual(r, ['incrementing'])

    _, r = self.anagrams2.get_anagrams("increments")
    self.assertEqual(r, ['increments'])

    _, r = self.anagrams2.get_anagrams("incriminate")
    self.assertEqual(r, ['incriminate'])

    _, r = self.anagrams2.get_anagrams("incubate")
    self.assertEqual(r, ['incubate'])

    _, r = self.anagrams2.get_anagrams("incubated")
    self.assertEqual(r, ['incubated'])

    _, r = self.anagrams2.get_anagrams("incubates")
    self.assertEqual(r, ['incubates'])

    _, r = self.anagrams2.get_anagrams("incubating")
    self.assertEqual(r, ['incubating'])

    _, r = self.anagrams2.get_anagrams("incubation")
    self.assertEqual(r, ['incubation'])

    _, r = self.anagrams2.get_anagrams("incubator")
    self.assertEqual(r, ['incubator'])

    _, r = self.anagrams2.get_anagrams("incubators")
    self.assertEqual(r, ['incubators'])

    _, r = self.anagrams2.get_anagrams("inculcate")
    self.assertEqual(r, ['inculcate'])

    _, r = self.anagrams2.get_anagrams("incumbent")
    self.assertEqual(r, ['incumbent'])

    _, r = self.anagrams2.get_anagrams("incur")
    self.assertEqual(r, ['incur'])

    _, r = self.anagrams2.get_anagrams("incurable")
    self.assertEqual(r, ['binuclear', 'incurable'])

    _, r = self.anagrams2.get_anagrams("incurred")
    self.assertEqual(r, ['incurred'])

    _, r = self.anagrams2.get_anagrams("incurring")
    self.assertEqual(r, ['incurring'])

    _, r = self.anagrams2.get_anagrams("incurs")
    self.assertEqual(r, ['incurs'])

    _, r = self.anagrams2.get_anagrams("incursion")
    self.assertEqual(r, ['incursion'])

    _, r = self.anagrams2.get_anagrams("indebted")
    self.assertEqual(r, ['indebted'])

    _, r = self.anagrams2.get_anagrams("indebtedness")
    self.assertEqual(r, ['indebtedness'])

    _, r = self.anagrams2.get_anagrams("indecent")
    self.assertEqual(r, ['indecent'])

    _, r = self.anagrams2.get_anagrams("indecipherable")
    self.assertEqual(r, ['indecipherable'])

    _, r = self.anagrams2.get_anagrams("indecision")
    self.assertEqual(r, ['indecision'])

    _, r = self.anagrams2.get_anagrams("indecisive")
    self.assertEqual(r, ['indecisive'])

    _, r = self.anagrams2.get_anagrams("indeed")
    self.assertEqual(r, ['denied', 'indeed'])

    _, r = self.anagrams2.get_anagrams("indefatigable")
    self.assertEqual(r, ['indefatigable'])

    _, r = self.anagrams2.get_anagrams("indefensible")
    self.assertEqual(r, ['indefensible'])

    _, r = self.anagrams2.get_anagrams("indefinite")
    self.assertEqual(r, ['indefinite'])

    _, r = self.anagrams2.get_anagrams("indefinitely")
    self.assertEqual(r, ['indefinitely'])

    _, r = self.anagrams2.get_anagrams("indefiniteness")
    self.assertEqual(r, ['indefiniteness'])

    _, r = self.anagrams2.get_anagrams("indelible")
    self.assertEqual(r, ['indelible'])

    _, r = self.anagrams2.get_anagrams("indemnify")
    self.assertEqual(r, ['indemnify'])

    _, r = self.anagrams2.get_anagrams("indemnity")
    self.assertEqual(r, ['indemnity'])

    _, r = self.anagrams2.get_anagrams("indent")
    self.assertEqual(r, ['indent', 'intend'])

    _, r = self.anagrams2.get_anagrams("indentation")
    self.assertEqual(r, ['indentation'])

    _, r = self.anagrams2.get_anagrams("indentations")
    self.assertEqual(r, ['indentations'])

    _, r = self.anagrams2.get_anagrams("indented")
    self.assertEqual(r, ['indented', 'intended'])

    _, r = self.anagrams2.get_anagrams("indenting")
    self.assertEqual(r, ['indenting', 'intending'])

    _, r = self.anagrams2.get_anagrams("indents")
    self.assertEqual(r, ['indents', 'intends'])

    _, r = self.anagrams2.get_anagrams("indenture")
    self.assertEqual(r, ['indenture'])

    _, r = self.anagrams2.get_anagrams("independence")
    self.assertEqual(r, ['independence'])

    _, r = self.anagrams2.get_anagrams("independent")
    self.assertEqual(r, ['independent'])

    _, r = self.anagrams2.get_anagrams("independently")
    self.assertEqual(r, ['independently'])

    _, r = self.anagrams2.get_anagrams("indescribable")
    self.assertEqual(r, ['indescribable'])

    _, r = self.anagrams2.get_anagrams("indestructible")
    self.assertEqual(r, ['indestructible'])

    _, r = self.anagrams2.get_anagrams("indeterminacies")
    self.assertEqual(r, ['indeterminacies'])

    _, r = self.anagrams2.get_anagrams("indeterminacy")
    self.assertEqual(r, ['indeterminacy'])

    _, r = self.anagrams2.get_anagrams("indeterminate")
    self.assertEqual(r, ['indeterminate'])

    _, r = self.anagrams2.get_anagrams("indeterminately")
    self.assertEqual(r, ['indeterminately'])

    _, r = self.anagrams2.get_anagrams("index")
    self.assertEqual(r, ['index'])

    _, r = self.anagrams2.get_anagrams("indexable")
    self.assertEqual(r, ['indexable'])

    _, r = self.anagrams2.get_anagrams("indexed")
    self.assertEqual(r, ['indexed'])

    _, r = self.anagrams2.get_anagrams("indexes")
    self.assertEqual(r, ['indexes'])

    _, r = self.anagrams2.get_anagrams("indexing")
    self.assertEqual(r, ['indexing'])

    _, r = self.anagrams2.get_anagrams("india")
    self.assertEqual(r, ['india'])

    _, r = self.anagrams2.get_anagrams("indian")
    self.assertEqual(r, ['indian'])

    _, r = self.anagrams2.get_anagrams("indiana")
    self.assertEqual(r, ['indiana'])

    _, r = self.anagrams2.get_anagrams("indianapolis")
    self.assertEqual(r, ['indianapolis'])

    _, r = self.anagrams2.get_anagrams("indians")
    self.assertEqual(r, ['indians'])

    _, r = self.anagrams2.get_anagrams("indicate")
    self.assertEqual(r, ['indicate'])

    _, r = self.anagrams2.get_anagrams("indicated")
    self.assertEqual(r, ['indicated'])

    _, r = self.anagrams2.get_anagrams("indicates")
    self.assertEqual(r, ['indicates'])

    _, r = self.anagrams2.get_anagrams("indicating")
    self.assertEqual(r, ['indicating'])

    _, r = self.anagrams2.get_anagrams("indication")
    self.assertEqual(r, ['indication'])

    _, r = self.anagrams2.get_anagrams("indications")
    self.assertEqual(r, ['indications'])

    _, r = self.anagrams2.get_anagrams("indicative")
    self.assertEqual(r, ['indicative'])

    _, r = self.anagrams2.get_anagrams("indicator")
    self.assertEqual(r, ['indicator'])

    _, r = self.anagrams2.get_anagrams("indicators")
    self.assertEqual(r, ['indicators'])

    _, r = self.anagrams2.get_anagrams("indices")
    self.assertEqual(r, ['indices'])

    _, r = self.anagrams2.get_anagrams("indict")
    self.assertEqual(r, ['indict'])

    _, r = self.anagrams2.get_anagrams("indictment")
    self.assertEqual(r, ['indictment'])

    _, r = self.anagrams2.get_anagrams("indictments")
    self.assertEqual(r, ['indictments'])

    _, r = self.anagrams2.get_anagrams("indies")
    self.assertEqual(r, ['indies', 'inside'])

    _, r = self.anagrams2.get_anagrams("indifference")
    self.assertEqual(r, ['indifference'])

    _, r = self.anagrams2.get_anagrams("indifferent")
    self.assertEqual(r, ['indifferent'])

    _, r = self.anagrams2.get_anagrams("indifferently")
    self.assertEqual(r, ['indifferently'])

    _, r = self.anagrams2.get_anagrams("indigenous")
    self.assertEqual(r, ['indigenous'])

    _, r = self.anagrams2.get_anagrams("indigenously")
    self.assertEqual(r, ['indigenously'])

    _, r = self.anagrams2.get_anagrams("indigenousness")
    self.assertEqual(r, ['indigenousness'])

    _, r = self.anagrams2.get_anagrams("indigestible")
    self.assertEqual(r, ['indigestible'])

    _, r = self.anagrams2.get_anagrams("indigestion")
    self.assertEqual(r, ['indigestion'])

    _, r = self.anagrams2.get_anagrams("indignant")
    self.assertEqual(r, ['indignant'])

    _, r = self.anagrams2.get_anagrams("indignantly")
    self.assertEqual(r, ['indignantly'])

    _, r = self.anagrams2.get_anagrams("indignation")
    self.assertEqual(r, ['indignation'])

    _, r = self.anagrams2.get_anagrams("indignities")
    self.assertEqual(r, ['indignities'])

    _, r = self.anagrams2.get_anagrams("indignity")
    self.assertEqual(r, ['indignity'])

    _, r = self.anagrams2.get_anagrams("indigo")
    self.assertEqual(r, ['indigo'])

    _, r = self.anagrams2.get_anagrams("indira")
    self.assertEqual(r, ['indira'])

    _, r = self.anagrams2.get_anagrams("indirect")
    self.assertEqual(r, ['indirect'])

    _, r = self.anagrams2.get_anagrams("indirected")
    self.assertEqual(r, ['indirected'])

    _, r = self.anagrams2.get_anagrams("indirecting")
    self.assertEqual(r, ['indirecting'])

    _, r = self.anagrams2.get_anagrams("indirection")
    self.assertEqual(r, ['indirection'])

    _, r = self.anagrams2.get_anagrams("indirections")
    self.assertEqual(r, ['indirections', 'indiscretion'])

    _, r = self.anagrams2.get_anagrams("indirectly")
    self.assertEqual(r, ['indirectly'])

    _, r = self.anagrams2.get_anagrams("indirects")
    self.assertEqual(r, ['indirects'])

    _, r = self.anagrams2.get_anagrams("indiscreet")
    self.assertEqual(r, ['indiscreet'])

    _, r = self.anagrams2.get_anagrams("indiscretion")
    self.assertEqual(r, ['indirections', 'indiscretion'])

    _, r = self.anagrams2.get_anagrams("indiscriminate")
    self.assertEqual(r, ['indiscriminate'])

    _, r = self.anagrams2.get_anagrams("indiscriminately")
    self.assertEqual(r, ['indiscriminately'])

    _, r = self.anagrams2.get_anagrams("indispensability")
    self.assertEqual(r, ['indispensability'])

    _, r = self.anagrams2.get_anagrams("indispensable")
    self.assertEqual(r, ['indispensable'])

    _, r = self.anagrams2.get_anagrams("indispensably")
    self.assertEqual(r, ['indispensably'])

    _, r = self.anagrams2.get_anagrams("indisputable")
    self.assertEqual(r, ['indisputable'])

    _, r = self.anagrams2.get_anagrams("indistinct")
    self.assertEqual(r, ['indistinct'])

    _, r = self.anagrams2.get_anagrams("indistinguishable")
    self.assertEqual(r, ['indistinguishable'])

    _, r = self.anagrams2.get_anagrams("individual")
    self.assertEqual(r, ['individual'])

    _, r = self.anagrams2.get_anagrams("individualism")
    self.assertEqual(r, ['individualism'])

    _, r = self.anagrams2.get_anagrams("individualistic")
    self.assertEqual(r, ['individualistic'])

    _, r = self.anagrams2.get_anagrams("individuality")
    self.assertEqual(r, ['individuality'])

    _, r = self.anagrams2.get_anagrams("individualize")
    self.assertEqual(r, ['individualize'])

    _, r = self.anagrams2.get_anagrams("individualized")
    self.assertEqual(r, ['individualized'])

    _, r = self.anagrams2.get_anagrams("individualizes")
    self.assertEqual(r, ['individualizes'])

    _, r = self.anagrams2.get_anagrams("individualizing")
    self.assertEqual(r, ['individualizing'])

    _, r = self.anagrams2.get_anagrams("individually")
    self.assertEqual(r, ['individually'])

    _, r = self.anagrams2.get_anagrams("individuals")
    self.assertEqual(r, ['individuals'])

    _, r = self.anagrams2.get_anagrams("indivisibility")
    self.assertEqual(r, ['indivisibility'])

    _, r = self.anagrams2.get_anagrams("indivisible")
    self.assertEqual(r, ['indivisible'])

    _, r = self.anagrams2.get_anagrams("indo")
    self.assertEqual(r, ['dion', 'indo', 'odin'])

    _, r = self.anagrams2.get_anagrams("indochina")
    self.assertEqual(r, ['indochina'])

    _, r = self.anagrams2.get_anagrams("indochinese")
    self.assertEqual(r, ['indochinese'])

    _, r = self.anagrams2.get_anagrams("indoctrinate")
    self.assertEqual(r, ['indoctrinate'])

    _, r = self.anagrams2.get_anagrams("indoctrinated")
    self.assertEqual(r, ['indoctrinated'])

    _, r = self.anagrams2.get_anagrams("indoctrinates")
    self.assertEqual(r, ['indoctrinates'])

    _, r = self.anagrams2.get_anagrams("indoctrinating")
    self.assertEqual(r, ['indoctrinating'])

    _, r = self.anagrams2.get_anagrams("indoctrination")
    self.assertEqual(r, ['indoctrination'])

    _, r = self.anagrams2.get_anagrams("indoeuropean")
    self.assertEqual(r, ['indoeuropean'])

    _, r = self.anagrams2.get_anagrams("indolent")
    self.assertEqual(r, ['indolent'])

    _, r = self.anagrams2.get_anagrams("indolently")
    self.assertEqual(r, ['indolently'])

    _, r = self.anagrams2.get_anagrams("indomitable")
    self.assertEqual(r, ['indomitable'])

    _, r = self.anagrams2.get_anagrams("indonesia")
    self.assertEqual(r, ['indonesia'])

    _, r = self.anagrams2.get_anagrams("indonesian")
    self.assertEqual(r, ['indonesian'])

    _, r = self.anagrams2.get_anagrams("indoor")
    self.assertEqual(r, ['indoor'])

    _, r = self.anagrams2.get_anagrams("indoors")
    self.assertEqual(r, ['indoors'])

    _, r = self.anagrams2.get_anagrams("indubitable")
    self.assertEqual(r, ['indubitable'])

    _, r = self.anagrams2.get_anagrams("induce")
    self.assertEqual(r, ['induce'])

    _, r = self.anagrams2.get_anagrams("induced")
    self.assertEqual(r, ['induced'])

    _, r = self.anagrams2.get_anagrams("inducement")
    self.assertEqual(r, ['inducement'])

    _, r = self.anagrams2.get_anagrams("inducements")
    self.assertEqual(r, ['inducements'])

    _, r = self.anagrams2.get_anagrams("inducer")
    self.assertEqual(r, ['inducer'])

    _, r = self.anagrams2.get_anagrams("induces")
    self.assertEqual(r, ['induces'])

    _, r = self.anagrams2.get_anagrams("inducing")
    self.assertEqual(r, ['inducing'])

    _, r = self.anagrams2.get_anagrams("induct")
    self.assertEqual(r, ['induct'])

    _, r = self.anagrams2.get_anagrams("inductance")
    self.assertEqual(r, ['inductance'])

    _, r = self.anagrams2.get_anagrams("inductances")
    self.assertEqual(r, ['inductances'])

    _, r = self.anagrams2.get_anagrams("inducted")
    self.assertEqual(r, ['inducted'])

    _, r = self.anagrams2.get_anagrams("inductee")
    self.assertEqual(r, ['inductee'])

    _, r = self.anagrams2.get_anagrams("inducting")
    self.assertEqual(r, ['inducting'])

    _, r = self.anagrams2.get_anagrams("induction")
    self.assertEqual(r, ['induction'])

    _, r = self.anagrams2.get_anagrams("inductions")
    self.assertEqual(r, ['inductions'])

    _, r = self.anagrams2.get_anagrams("inductive")
    self.assertEqual(r, ['inductive'])

    _, r = self.anagrams2.get_anagrams("inductively")
    self.assertEqual(r, ['inductively'])

    _, r = self.anagrams2.get_anagrams("inductor")
    self.assertEqual(r, ['inductor'])

    _, r = self.anagrams2.get_anagrams("inductors")
    self.assertEqual(r, ['inductors'])

    _, r = self.anagrams2.get_anagrams("inducts")
    self.assertEqual(r, ['inducts'])

    _, r = self.anagrams2.get_anagrams("indulge")
    self.assertEqual(r, ['dueling', 'eluding', 'indulge'])

    _, r = self.anagrams2.get_anagrams("indulged")
    self.assertEqual(r, ['deluding', 'indulged'])

    _, r = self.anagrams2.get_anagrams("indulgence")
    self.assertEqual(r, ['indulgence'])

    _, r = self.anagrams2.get_anagrams("indulgences")
    self.assertEqual(r, ['indulgences'])

    _, r = self.anagrams2.get_anagrams("indulgent")
    self.assertEqual(r, ['indulgent'])

    _, r = self.anagrams2.get_anagrams("indulging")
    self.assertEqual(r, ['indulging'])

    _, r = self.anagrams2.get_anagrams("indus")
    self.assertEqual(r, ['indus'])

    _, r = self.anagrams2.get_anagrams("industrial")
    self.assertEqual(r, ['industrial'])

    _, r = self.anagrams2.get_anagrams("industrialism")
    self.assertEqual(r, ['industrialism'])

    _, r = self.anagrams2.get_anagrams("industrialist")
    self.assertEqual(r, ['industrialist'])

    _, r = self.anagrams2.get_anagrams("industrialists")
    self.assertEqual(r, ['industrialists'])

    _, r = self.anagrams2.get_anagrams("industrialization")
    self.assertEqual(r, ['industrialization'])

    _, r = self.anagrams2.get_anagrams("industrialized")
    self.assertEqual(r, ['industrialized'])

    _, r = self.anagrams2.get_anagrams("industrially")
    self.assertEqual(r, ['industrially'])

    _, r = self.anagrams2.get_anagrams("industrials")
    self.assertEqual(r, ['industrials'])

    _, r = self.anagrams2.get_anagrams("industries")
    self.assertEqual(r, ['industries'])

    _, r = self.anagrams2.get_anagrams("industrious")
    self.assertEqual(r, ['industrious'])

    _, r = self.anagrams2.get_anagrams("industriously")
    self.assertEqual(r, ['industriously'])

    _, r = self.anagrams2.get_anagrams("industriousness")
    self.assertEqual(r, ['industriousness'])

    _, r = self.anagrams2.get_anagrams("industry")
    self.assertEqual(r, ['industry'])

    _, r = self.anagrams2.get_anagrams("indy")
    self.assertEqual(r, ['indy'])

    _, r = self.anagrams2.get_anagrams("ineffective")
    self.assertEqual(r, ['ineffective'])

    _, r = self.anagrams2.get_anagrams("ineffectively")
    self.assertEqual(r, ['ineffectively'])

    _, r = self.anagrams2.get_anagrams("ineffectiveness")
    self.assertEqual(r, ['ineffectiveness'])

    _, r = self.anagrams2.get_anagrams("ineffectual")
    self.assertEqual(r, ['ineffectual'])

    _, r = self.anagrams2.get_anagrams("inefficiencies")
    self.assertEqual(r, ['inefficiencies'])

    _, r = self.anagrams2.get_anagrams("inefficiency")
    self.assertEqual(r, ['inefficiency'])

    _, r = self.anagrams2.get_anagrams("inefficient")
    self.assertEqual(r, ['inefficient'])

    _, r = self.anagrams2.get_anagrams("inefficiently")
    self.assertEqual(r, ['inefficiently'])

    _, r = self.anagrams2.get_anagrams("inelegant")
    self.assertEqual(r, ['inelegant'])

    _, r = self.anagrams2.get_anagrams("ineligible")
    self.assertEqual(r, ['ineligible'])

    _, r = self.anagrams2.get_anagrams("inept")
    self.assertEqual(r, ['inept'])

    _, r = self.anagrams2.get_anagrams("inequalities")
    self.assertEqual(r, ['inequalities'])

    _, r = self.anagrams2.get_anagrams("inequality")
    self.assertEqual(r, ['inequality'])

    _, r = self.anagrams2.get_anagrams("inequitable")
    self.assertEqual(r, ['inequitable'])

    _, r = self.anagrams2.get_anagrams("inequity")
    self.assertEqual(r, ['inequity'])

    _, r = self.anagrams2.get_anagrams("inert")
    self.assertEqual(r, ['inert', 'inter'])

    _, r = self.anagrams2.get_anagrams("inertia")
    self.assertEqual(r, ['inertia'])

    _, r = self.anagrams2.get_anagrams("inertial")
    self.assertEqual(r, ['inertial'])

    _, r = self.anagrams2.get_anagrams("inertly")
    self.assertEqual(r, ['inertly'])

    _, r = self.anagrams2.get_anagrams("inertness")
    self.assertEqual(r, ['inertness'])

    _, r = self.anagrams2.get_anagrams("inescapable")
    self.assertEqual(r, ['inescapable'])

    _, r = self.anagrams2.get_anagrams("inescapably")
    self.assertEqual(r, ['inescapably'])

    _, r = self.anagrams2.get_anagrams("inessential")
    self.assertEqual(r, ['inessential'])

    _, r = self.anagrams2.get_anagrams("inestimable")
    self.assertEqual(r, ['inestimable'])

    _, r = self.anagrams2.get_anagrams("inevitabilities")
    self.assertEqual(r, ['inevitabilities'])

    _, r = self.anagrams2.get_anagrams("inevitability")
    self.assertEqual(r, ['inevitability'])

    _, r = self.anagrams2.get_anagrams("inevitable")
    self.assertEqual(r, ['inevitable'])

    _, r = self.anagrams2.get_anagrams("inevitably")
    self.assertEqual(r, ['inevitably'])

    _, r = self.anagrams2.get_anagrams("inexact")
    self.assertEqual(r, ['inexact'])

    _, r = self.anagrams2.get_anagrams("inexcusable")
    self.assertEqual(r, ['inexcusable'])

    _, r = self.anagrams2.get_anagrams("inexcusably")
    self.assertEqual(r, ['inexcusably'])

    _, r = self.anagrams2.get_anagrams("inexhaustible")
    self.assertEqual(r, ['inexhaustible'])

    _, r = self.anagrams2.get_anagrams("inexorable")
    self.assertEqual(r, ['inexorable'])

    _, r = self.anagrams2.get_anagrams("inexorably")
    self.assertEqual(r, ['inexorably'])

    _, r = self.anagrams2.get_anagrams("inexpensive")
    self.assertEqual(r, ['inexpensive'])

    _, r = self.anagrams2.get_anagrams("inexpensively")
    self.assertEqual(r, ['inexpensively'])

    _, r = self.anagrams2.get_anagrams("inexperience")
    self.assertEqual(r, ['inexperience'])

    _, r = self.anagrams2.get_anagrams("inexperienced")
    self.assertEqual(r, ['inexperienced'])

    _, r = self.anagrams2.get_anagrams("inexplicable")
    self.assertEqual(r, ['inexplicable'])

    _, r = self.anagrams2.get_anagrams("infallibility")
    self.assertEqual(r, ['infallibility'])

    _, r = self.anagrams2.get_anagrams("infallible")
    self.assertEqual(r, ['infallible'])

    _, r = self.anagrams2.get_anagrams("infallibly")
    self.assertEqual(r, ['infallibly'])

    _, r = self.anagrams2.get_anagrams("infamous")
    self.assertEqual(r, ['infamous'])

    _, r = self.anagrams2.get_anagrams("infamously")
    self.assertEqual(r, ['infamously'])

    _, r = self.anagrams2.get_anagrams("infamy")
    self.assertEqual(r, ['infamy'])

    _, r = self.anagrams2.get_anagrams("infancy")
    self.assertEqual(r, ['infancy'])

    _, r = self.anagrams2.get_anagrams("infant")
    self.assertEqual(r, ['infant'])

    _, r = self.anagrams2.get_anagrams("infantile")
    self.assertEqual(r, ['infantile'])

    _, r = self.anagrams2.get_anagrams("infantry")
    self.assertEqual(r, ['infantry'])

    _, r = self.anagrams2.get_anagrams("infantryman")
    self.assertEqual(r, ['infantryman'])

    _, r = self.anagrams2.get_anagrams("infantrymen")
    self.assertEqual(r, ['infantrymen'])

    _, r = self.anagrams2.get_anagrams("infants")
    self.assertEqual(r, ['infants'])

    _, r = self.anagrams2.get_anagrams("infarct")
    self.assertEqual(r, ['frantic', 'infarct'])

    _, r = self.anagrams2.get_anagrams("infatuate")
    self.assertEqual(r, ['infatuate'])

    _, r = self.anagrams2.get_anagrams("infeasible")
    self.assertEqual(r, ['infeasible'])

    _, r = self.anagrams2.get_anagrams("infect")
    self.assertEqual(r, ['infect'])

    _, r = self.anagrams2.get_anagrams("infected")
    self.assertEqual(r, ['infected'])

    _, r = self.anagrams2.get_anagrams("infecting")
    self.assertEqual(r, ['infecting'])

    _, r = self.anagrams2.get_anagrams("infection")
    self.assertEqual(r, ['infection'])

    _, r = self.anagrams2.get_anagrams("infections")
    self.assertEqual(r, ['infections'])

    _, r = self.anagrams2.get_anagrams("infectious")
    self.assertEqual(r, ['infectious'])

    _, r = self.anagrams2.get_anagrams("infectiously")
    self.assertEqual(r, ['infectiously'])

    _, r = self.anagrams2.get_anagrams("infective")
    self.assertEqual(r, ['infective'])

    _, r = self.anagrams2.get_anagrams("infects")
    self.assertEqual(r, ['infects'])

    _, r = self.anagrams2.get_anagrams("infer")
    self.assertEqual(r, ['finer', 'infer'])

    _, r = self.anagrams2.get_anagrams("inference")
    self.assertEqual(r, ['inference'])

    _, r = self.anagrams2.get_anagrams("inferences")
    self.assertEqual(r, ['inferences'])

    _, r = self.anagrams2.get_anagrams("inferential")
    self.assertEqual(r, ['inferential'])

    _, r = self.anagrams2.get_anagrams("inferior")
    self.assertEqual(r, ['inferior'])

    _, r = self.anagrams2.get_anagrams("inferiority")
    self.assertEqual(r, ['inferiority'])

    _, r = self.anagrams2.get_anagrams("inferiors")
    self.assertEqual(r, ['inferiors'])

    _, r = self.anagrams2.get_anagrams("infernal")
    self.assertEqual(r, ['infernal'])

    _, r = self.anagrams2.get_anagrams("infernally")
    self.assertEqual(r, ['infernally'])

    _, r = self.anagrams2.get_anagrams("inferno")
    self.assertEqual(r, ['inferno'])

    _, r = self.anagrams2.get_anagrams("infernos")
    self.assertEqual(r, ['infernos'])

    _, r = self.anagrams2.get_anagrams("inferred")
    self.assertEqual(r, ['inferred'])

    _, r = self.anagrams2.get_anagrams("inferring")
    self.assertEqual(r, ['inferring'])

    _, r = self.anagrams2.get_anagrams("infers")
    self.assertEqual(r, ['infers'])

    _, r = self.anagrams2.get_anagrams("infertile")
    self.assertEqual(r, ['infertile'])

    _, r = self.anagrams2.get_anagrams("infest")
    self.assertEqual(r, ['finest', 'infest'])

    _, r = self.anagrams2.get_anagrams("infested")
    self.assertEqual(r, ['infested'])

    _, r = self.anagrams2.get_anagrams("infesting")
    self.assertEqual(r, ['infesting'])

    _, r = self.anagrams2.get_anagrams("infests")
    self.assertEqual(r, ['fitness', 'infests'])

    _, r = self.anagrams2.get_anagrams("infidel")
    self.assertEqual(r, ['infidel'])

    _, r = self.anagrams2.get_anagrams("infidelity")
    self.assertEqual(r, ['infidelity'])

    _, r = self.anagrams2.get_anagrams("infidels")
    self.assertEqual(r, ['infidels'])

    _, r = self.anagrams2.get_anagrams("infighting")
    self.assertEqual(r, ['infighting'])

    _, r = self.anagrams2.get_anagrams("infiltrate")
    self.assertEqual(r, ['infiltrate'])

    _, r = self.anagrams2.get_anagrams("infinite")
    self.assertEqual(r, ['infinite'])

    _, r = self.anagrams2.get_anagrams("infinitely")
    self.assertEqual(r, ['infinitely'])

    _, r = self.anagrams2.get_anagrams("infiniteness")
    self.assertEqual(r, ['infiniteness'])

    _, r = self.anagrams2.get_anagrams("infinitesimal")
    self.assertEqual(r, ['infinitesimal'])

    _, r = self.anagrams2.get_anagrams("infinitive")
    self.assertEqual(r, ['infinitive'])

    _, r = self.anagrams2.get_anagrams("infinitives")
    self.assertEqual(r, ['infinitives'])

    _, r = self.anagrams2.get_anagrams("infinitude")
    self.assertEqual(r, ['infinitude'])

    _, r = self.anagrams2.get_anagrams("infinitum")
    self.assertEqual(r, ['infinitum'])

    _, r = self.anagrams2.get_anagrams("infinity")
    self.assertEqual(r, ['infinity'])

    _, r = self.anagrams2.get_anagrams("infirm")
    self.assertEqual(r, ['infirm'])

    _, r = self.anagrams2.get_anagrams("infirmary")
    self.assertEqual(r, ['infirmary'])

    _, r = self.anagrams2.get_anagrams("infirmity")
    self.assertEqual(r, ['infirmity'])

    _, r = self.anagrams2.get_anagrams("infix")
    self.assertEqual(r, ['infix'])

    _, r = self.anagrams2.get_anagrams("inflame")
    self.assertEqual(r, ['inflame'])

    _, r = self.anagrams2.get_anagrams("inflamed")
    self.assertEqual(r, ['inflamed'])

    _, r = self.anagrams2.get_anagrams("inflammable")
    self.assertEqual(r, ['inflammable'])

    _, r = self.anagrams2.get_anagrams("inflammation")
    self.assertEqual(r, ['inflammation'])

    _, r = self.anagrams2.get_anagrams("inflammatory")
    self.assertEqual(r, ['inflammatory'])

    _, r = self.anagrams2.get_anagrams("inflatable")
    self.assertEqual(r, ['inflatable'])

    _, r = self.anagrams2.get_anagrams("inflate")
    self.assertEqual(r, ['inflate'])

    _, r = self.anagrams2.get_anagrams("inflated")
    self.assertEqual(r, ['inflated'])

    _, r = self.anagrams2.get_anagrams("inflater")
    self.assertEqual(r, ['inflater'])

    _, r = self.anagrams2.get_anagrams("inflates")
    self.assertEqual(r, ['inflates'])

    _, r = self.anagrams2.get_anagrams("inflating")
    self.assertEqual(r, ['inflating'])

    _, r = self.anagrams2.get_anagrams("inflation")
    self.assertEqual(r, ['inflation'])

    _, r = self.anagrams2.get_anagrams("inflationary")
    self.assertEqual(r, ['inflationary'])

    _, r = self.anagrams2.get_anagrams("inflexibility")
    self.assertEqual(r, ['inflexibility'])

    _, r = self.anagrams2.get_anagrams("inflexible")
    self.assertEqual(r, ['inflexible'])

    _, r = self.anagrams2.get_anagrams("inflict")
    self.assertEqual(r, ['inflict'])

    _, r = self.anagrams2.get_anagrams("inflicted")
    self.assertEqual(r, ['inflicted'])

    _, r = self.anagrams2.get_anagrams("inflicting")
    self.assertEqual(r, ['inflicting'])

    _, r = self.anagrams2.get_anagrams("inflicts")
    self.assertEqual(r, ['inflicts'])

    _, r = self.anagrams2.get_anagrams("inflow")
    self.assertEqual(r, ['inflow'])

    _, r = self.anagrams2.get_anagrams("influence")
    self.assertEqual(r, ['influence'])

    _, r = self.anagrams2.get_anagrams("influenced")
    self.assertEqual(r, ['influenced'])

    _, r = self.anagrams2.get_anagrams("influences")
    self.assertEqual(r, ['influences'])

    _, r = self.anagrams2.get_anagrams("influencing")
    self.assertEqual(r, ['influencing'])

    _, r = self.anagrams2.get_anagrams("influential")
    self.assertEqual(r, ['influential'])

    _, r = self.anagrams2.get_anagrams("influentially")
    self.assertEqual(r, ['influentially'])

    _, r = self.anagrams2.get_anagrams("influenza")
    self.assertEqual(r, ['influenza'])

    _, r = self.anagrams2.get_anagrams("inform")
    self.assertEqual(r, ['inform'])

    _, r = self.anagrams2.get_anagrams("informal")
    self.assertEqual(r, ['informal'])

    _, r = self.anagrams2.get_anagrams("informality")
    self.assertEqual(r, ['informality'])

    _, r = self.anagrams2.get_anagrams("informally")
    self.assertEqual(r, ['informally'])

    _, r = self.anagrams2.get_anagrams("informant")
    self.assertEqual(r, ['informant'])

    _, r = self.anagrams2.get_anagrams("informants")
    self.assertEqual(r, ['informants'])

    _, r = self.anagrams2.get_anagrams("informatica")
    self.assertEqual(r, ['informatica'])

    _, r = self.anagrams2.get_anagrams("information")
    self.assertEqual(r, ['information'])

    _, r = self.anagrams2.get_anagrams("informational")
    self.assertEqual(r, ['informational'])

    _, r = self.anagrams2.get_anagrams("informative")
    self.assertEqual(r, ['informative'])

    _, r = self.anagrams2.get_anagrams("informatively")
    self.assertEqual(r, ['informatively'])

    _, r = self.anagrams2.get_anagrams("informed")
    self.assertEqual(r, ['informed'])

    _, r = self.anagrams2.get_anagrams("informer")
    self.assertEqual(r, ['informer'])

    _, r = self.anagrams2.get_anagrams("informers")
    self.assertEqual(r, ['informers'])

    _, r = self.anagrams2.get_anagrams("informing")
    self.assertEqual(r, ['informing'])

    _, r = self.anagrams2.get_anagrams("informs")
    self.assertEqual(r, ['informs'])

    _, r = self.anagrams2.get_anagrams("infra")
    self.assertEqual(r, ['infra'])

    _, r = self.anagrams2.get_anagrams("infrared")
    self.assertEqual(r, ['infrared'])

    _, r = self.anagrams2.get_anagrams("infrastructure")
    self.assertEqual(r, ['infrastructure'])

    _, r = self.anagrams2.get_anagrams("infrequent")
    self.assertEqual(r, ['infrequent'])

    _, r = self.anagrams2.get_anagrams("infrequently")
    self.assertEqual(r, ['infrequently'])

    _, r = self.anagrams2.get_anagrams("infringe")
    self.assertEqual(r, ['infringe', 'refining'])

    _, r = self.anagrams2.get_anagrams("infringed")
    self.assertEqual(r, ['infringed'])

    _, r = self.anagrams2.get_anagrams("infringement")
    self.assertEqual(r, ['infringement'])

    _, r = self.anagrams2.get_anagrams("infringements")
    self.assertEqual(r, ['infringements'])

    _, r = self.anagrams2.get_anagrams("infringes")
    self.assertEqual(r, ['infringes'])

    _, r = self.anagrams2.get_anagrams("infringing")
    self.assertEqual(r, ['infringing'])

    _, r = self.anagrams2.get_anagrams("infuriate")
    self.assertEqual(r, ['infuriate'])

    _, r = self.anagrams2.get_anagrams("infuriated")
    self.assertEqual(r, ['infuriated'])

    _, r = self.anagrams2.get_anagrams("infuriates")
    self.assertEqual(r, ['infuriates'])

    _, r = self.anagrams2.get_anagrams("infuriating")
    self.assertEqual(r, ['infuriating'])

    _, r = self.anagrams2.get_anagrams("infuriation")
    self.assertEqual(r, ['infuriation'])

    _, r = self.anagrams2.get_anagrams("infuse")
    self.assertEqual(r, ['infuse'])

    _, r = self.anagrams2.get_anagrams("infused")
    self.assertEqual(r, ['infused'])

    _, r = self.anagrams2.get_anagrams("infuses")
    self.assertEqual(r, ['infuses'])

    _, r = self.anagrams2.get_anagrams("infusing")
    self.assertEqual(r, ['infusing'])

    _, r = self.anagrams2.get_anagrams("infusion")
    self.assertEqual(r, ['infusion'])

    _, r = self.anagrams2.get_anagrams("infusions")
    self.assertEqual(r, ['infusions'])

    _, r = self.anagrams2.get_anagrams("ingenious")
    self.assertEqual(r, ['ingenious'])

    _, r = self.anagrams2.get_anagrams("ingeniously")
    self.assertEqual(r, ['ingeniously'])

    _, r = self.anagrams2.get_anagrams("ingeniousness")
    self.assertEqual(r, ['ingeniousness'])

    _, r = self.anagrams2.get_anagrams("ingenuity")
    self.assertEqual(r, ['ingenuity'])

    _, r = self.anagrams2.get_anagrams("ingenuous")
    self.assertEqual(r, ['ingenuous'])

    _, r = self.anagrams2.get_anagrams("ingersoll")
    self.assertEqual(r, ['ingersoll'])

    _, r = self.anagrams2.get_anagrams("ingest")
    self.assertEqual(r, ['ingest', 'signet'])

    _, r = self.anagrams2.get_anagrams("ingestion")
    self.assertEqual(r, ['ingestion'])

    _, r = self.anagrams2.get_anagrams("inglorious")
    self.assertEqual(r, ['inglorious'])

    _, r = self.anagrams2.get_anagrams("ingot")
    self.assertEqual(r, ['ingot'])

    _, r = self.anagrams2.get_anagrams("ingram")
    self.assertEqual(r, ['arming', 'ingram', 'margin'])

    _, r = self.anagrams2.get_anagrams("ingrate")
    self.assertEqual(r, ['granite', 'ingrate', 'tearing'])

    _, r = self.anagrams2.get_anagrams("ingratiate")
    self.assertEqual(r, ['ingratiate'])

    _, r = self.anagrams2.get_anagrams("ingratitude")
    self.assertEqual(r, ['ingratitude'])

    _, r = self.anagrams2.get_anagrams("ingredient")
    self.assertEqual(r, ['ingredient'])

    _, r = self.anagrams2.get_anagrams("ingredients")
    self.assertEqual(r, ['ingredients'])

    _, r = self.anagrams2.get_anagrams("ingrown")
    self.assertEqual(r, ['ingrown'])

    _, r = self.anagrams2.get_anagrams("inhabit")
    self.assertEqual(r, ['inhabit'])

    _, r = self.anagrams2.get_anagrams("inhabitable")
    self.assertEqual(r, ['inhabitable'])

    _, r = self.anagrams2.get_anagrams("inhabitance")
    self.assertEqual(r, ['inhabitance'])

    _, r = self.anagrams2.get_anagrams("inhabitant")
    self.assertEqual(r, ['inhabitant'])

    _, r = self.anagrams2.get_anagrams("inhabitants")
    self.assertEqual(r, ['inhabitants'])

    _, r = self.anagrams2.get_anagrams("inhabited")
    self.assertEqual(r, ['inhabited'])

    _, r = self.anagrams2.get_anagrams("inhabiting")
    self.assertEqual(r, ['inhabiting'])

    _, r = self.anagrams2.get_anagrams("inhabits")
    self.assertEqual(r, ['inhabits'])

    _, r = self.anagrams2.get_anagrams("inhale")
    self.assertEqual(r, ['inhale'])

    _, r = self.anagrams2.get_anagrams("inhaled")
    self.assertEqual(r, ['inhaled'])

    _, r = self.anagrams2.get_anagrams("inhaler")
    self.assertEqual(r, ['inhaler'])

    _, r = self.anagrams2.get_anagrams("inhales")
    self.assertEqual(r, ['inhales'])

    _, r = self.anagrams2.get_anagrams("inhaling")
    self.assertEqual(r, ['inhaling'])

    _, r = self.anagrams2.get_anagrams("inhere")
    self.assertEqual(r, ['herein', 'inhere'])

    _, r = self.anagrams2.get_anagrams("inherent")
    self.assertEqual(r, ['inherent'])

    _, r = self.anagrams2.get_anagrams("inherently")
    self.assertEqual(r, ['inherently'])

    _, r = self.anagrams2.get_anagrams("inheres")
    self.assertEqual(r, ['inheres'])

    _, r = self.anagrams2.get_anagrams("inherit")
    self.assertEqual(r, ['inherit'])

    _, r = self.anagrams2.get_anagrams("inheritable")
    self.assertEqual(r, ['inheritable'])

    _, r = self.anagrams2.get_anagrams("inheritance")
    self.assertEqual(r, ['inheritance'])

    _, r = self.anagrams2.get_anagrams("inheritances")
    self.assertEqual(r, ['inheritances'])

    _, r = self.anagrams2.get_anagrams("inherited")
    self.assertEqual(r, ['inherited'])

    _, r = self.anagrams2.get_anagrams("inheriting")
    self.assertEqual(r, ['inheriting'])

    _, r = self.anagrams2.get_anagrams("inheritor")
    self.assertEqual(r, ['inheritor'])

    _, r = self.anagrams2.get_anagrams("inheritors")
    self.assertEqual(r, ['inheritors'])

    _, r = self.anagrams2.get_anagrams("inheritress")
    self.assertEqual(r, ['inheritress'])

    _, r = self.anagrams2.get_anagrams("inheritresses")
    self.assertEqual(r, ['inheritresses'])

    _, r = self.anagrams2.get_anagrams("inheritrices")
    self.assertEqual(r, ['inheritrices'])

    _, r = self.anagrams2.get_anagrams("inheritrix")
    self.assertEqual(r, ['inheritrix'])

    _, r = self.anagrams2.get_anagrams("inherits")
    self.assertEqual(r, ['inherits'])

    _, r = self.anagrams2.get_anagrams("inhibit")
    self.assertEqual(r, ['inhibit'])

    _, r = self.anagrams2.get_anagrams("inhibited")
    self.assertEqual(r, ['inhibited'])

    _, r = self.anagrams2.get_anagrams("inhibiting")
    self.assertEqual(r, ['inhibiting'])

    _, r = self.anagrams2.get_anagrams("inhibition")
    self.assertEqual(r, ['inhibition'])

    _, r = self.anagrams2.get_anagrams("inhibitions")
    self.assertEqual(r, ['inhibitions'])

    _, r = self.anagrams2.get_anagrams("inhibitor")
    self.assertEqual(r, ['inhibitor'])

    _, r = self.anagrams2.get_anagrams("inhibitors")
    self.assertEqual(r, ['inhibitors'])

    _, r = self.anagrams2.get_anagrams("inhibitory")
    self.assertEqual(r, ['inhibitory'])

    _, r = self.anagrams2.get_anagrams("inhibits")
    self.assertEqual(r, ['inhibits'])

    _, r = self.anagrams2.get_anagrams("inhomogeneities")
    self.assertEqual(r, ['inhomogeneities'])

    _, r = self.anagrams2.get_anagrams("inhomogeneity")
    self.assertEqual(r, ['inhomogeneity'])

    _, r = self.anagrams2.get_anagrams("inhomogeneous")
    self.assertEqual(r, ['inhomogeneous'])

    _, r = self.anagrams2.get_anagrams("inhospitable")
    self.assertEqual(r, ['inhospitable'])

    _, r = self.anagrams2.get_anagrams("inhuman")
    self.assertEqual(r, ['inhuman'])

    _, r = self.anagrams2.get_anagrams("inhumane")
    self.assertEqual(r, ['inhumane'])

    _, r = self.anagrams2.get_anagrams("inimical")
    self.assertEqual(r, ['inimical'])

    _, r = self.anagrams2.get_anagrams("inimitable")
    self.assertEqual(r, ['inimitable'])

    _, r = self.anagrams2.get_anagrams("iniquities")
    self.assertEqual(r, ['iniquities'])

    _, r = self.anagrams2.get_anagrams("iniquity")
    self.assertEqual(r, ['iniquity'])

    _, r = self.anagrams2.get_anagrams("initial")
    self.assertEqual(r, ['initial'])

    _, r = self.anagrams2.get_anagrams("initialed")
    self.assertEqual(r, ['initialed'])

    _, r = self.anagrams2.get_anagrams("initialing")
    self.assertEqual(r, ['initialing'])

    _, r = self.anagrams2.get_anagrams("initialization")
    self.assertEqual(r, ['initialization'])

    _, r = self.anagrams2.get_anagrams("initializations")
    self.assertEqual(r, ['initializations'])

    _, r = self.anagrams2.get_anagrams("initialize")
    self.assertEqual(r, ['initialize'])

    _, r = self.anagrams2.get_anagrams("initialized")
    self.assertEqual(r, ['initialized'])

    _, r = self.anagrams2.get_anagrams("initializer")
    self.assertEqual(r, ['initializer'])

    _, r = self.anagrams2.get_anagrams("initializers")
    self.assertEqual(r, ['initializers'])

    _, r = self.anagrams2.get_anagrams("initializes")
    self.assertEqual(r, ['initializes'])

    _, r = self.anagrams2.get_anagrams("initializing")
    self.assertEqual(r, ['initializing'])

    _, r = self.anagrams2.get_anagrams("initially")
    self.assertEqual(r, ['initially'])

    _, r = self.anagrams2.get_anagrams("initials")
    self.assertEqual(r, ['initials'])

    _, r = self.anagrams2.get_anagrams("initiate")
    self.assertEqual(r, ['initiate'])

    _, r = self.anagrams2.get_anagrams("initiated")
    self.assertEqual(r, ['dietitian', 'initiated'])

    _, r = self.anagrams2.get_anagrams("initiates")
    self.assertEqual(r, ['initiates'])

    _, r = self.anagrams2.get_anagrams("initiating")
    self.assertEqual(r, ['initiating'])

    _, r = self.anagrams2.get_anagrams("initiation")
    self.assertEqual(r, ['initiation'])

    _, r = self.anagrams2.get_anagrams("initiations")
    self.assertEqual(r, ['initiations'])

    _, r = self.anagrams2.get_anagrams("initiative")
    self.assertEqual(r, ['initiative'])

    _, r = self.anagrams2.get_anagrams("initiatives")
    self.assertEqual(r, ['initiatives'])

    _, r = self.anagrams2.get_anagrams("initiator")
    self.assertEqual(r, ['initiator'])

    _, r = self.anagrams2.get_anagrams("initiators")
    self.assertEqual(r, ['initiators'])

    _, r = self.anagrams2.get_anagrams("inject")
    self.assertEqual(r, ['inject'])

    _, r = self.anagrams2.get_anagrams("injected")
    self.assertEqual(r, ['injected'])

    _, r = self.anagrams2.get_anagrams("injecting")
    self.assertEqual(r, ['injecting'])

    _, r = self.anagrams2.get_anagrams("injection")
    self.assertEqual(r, ['injection'])

    _, r = self.anagrams2.get_anagrams("injections")
    self.assertEqual(r, ['injections'])

    _, r = self.anagrams2.get_anagrams("injective")
    self.assertEqual(r, ['injective'])

    _, r = self.anagrams2.get_anagrams("injects")
    self.assertEqual(r, ['injects'])

    _, r = self.anagrams2.get_anagrams("injudicious")
    self.assertEqual(r, ['injudicious'])

    _, r = self.anagrams2.get_anagrams("injun")
    self.assertEqual(r, ['injun'])

    _, r = self.anagrams2.get_anagrams("injunction")
    self.assertEqual(r, ['injunction'])

    _, r = self.anagrams2.get_anagrams("injunctions")
    self.assertEqual(r, ['injunctions'])

    _, r = self.anagrams2.get_anagrams("injuns")
    self.assertEqual(r, ['injuns'])

    _, r = self.anagrams2.get_anagrams("injure")
    self.assertEqual(r, ['injure'])

    _, r = self.anagrams2.get_anagrams("injured")
    self.assertEqual(r, ['injured'])

    _, r = self.anagrams2.get_anagrams("injures")
    self.assertEqual(r, ['injures'])

    _, r = self.anagrams2.get_anagrams("injuries")
    self.assertEqual(r, ['injuries'])

    _, r = self.anagrams2.get_anagrams("injuring")
    self.assertEqual(r, ['injuring'])

    _, r = self.anagrams2.get_anagrams("injurious")
    self.assertEqual(r, ['injurious'])

    _, r = self.anagrams2.get_anagrams("injury")
    self.assertEqual(r, ['injury'])

    _, r = self.anagrams2.get_anagrams("injustice")
    self.assertEqual(r, ['injustice'])

    _, r = self.anagrams2.get_anagrams("injustices")
    self.assertEqual(r, ['injustices'])

    _, r = self.anagrams2.get_anagrams("ink")
    self.assertEqual(r, ['ink', 'kin'])

    _, r = self.anagrams2.get_anagrams("inked")
    self.assertEqual(r, ['inked'])

    _, r = self.anagrams2.get_anagrams("inker")
    self.assertEqual(r, ['inker'])

    _, r = self.anagrams2.get_anagrams("inkers")
    self.assertEqual(r, ['inkers', 'sinker'])

    _, r = self.anagrams2.get_anagrams("inking")
    self.assertEqual(r, ['inking'])

    _, r = self.anagrams2.get_anagrams("inkings")
    self.assertEqual(r, ['inkings', 'sinking'])

    _, r = self.anagrams2.get_anagrams("inkling")
    self.assertEqual(r, ['inkling', 'linking'])

    _, r = self.anagrams2.get_anagrams("inklings")
    self.assertEqual(r, ['inklings'])

    _, r = self.anagrams2.get_anagrams("inks")
    self.assertEqual(r, ['inks', 'sink', 'skin'])

    _, r = self.anagrams2.get_anagrams("inlaid")
    self.assertEqual(r, ['inlaid'])

    _, r = self.anagrams2.get_anagrams("inland")
    self.assertEqual(r, ['inland'])

    _, r = self.anagrams2.get_anagrams("inlay")
    self.assertEqual(r, ['inlay'])

    _, r = self.anagrams2.get_anagrams("inlet")
    self.assertEqual(r, ['inlet', 'intel'])

    _, r = self.anagrams2.get_anagrams("inlets")
    self.assertEqual(r, ['enlist', 'inlets', 'listen', 'silent'])

    _, r = self.anagrams2.get_anagrams("inline")
    self.assertEqual(r, ['inline'])

    _, r = self.anagrams2.get_anagrams("inman")
    self.assertEqual(r, ['inman'])

    _, r = self.anagrams2.get_anagrams("inmate")
    self.assertEqual(r, ['inmate'])

    _, r = self.anagrams2.get_anagrams("inmates")
    self.assertEqual(r, ['inmates'])

    _, r = self.anagrams2.get_anagrams("inn")
    self.assertEqual(r, ['inn'])

    _, r = self.anagrams2.get_anagrams("innards")
    self.assertEqual(r, ['innards'])

    _, r = self.anagrams2.get_anagrams("innate")
    self.assertEqual(r, ['innate'])

    _, r = self.anagrams2.get_anagrams("innately")
    self.assertEqual(r, ['innately'])

    _, r = self.anagrams2.get_anagrams("inner")
    self.assertEqual(r, ['inner'])

    _, r = self.anagrams2.get_anagrams("innermost")
    self.assertEqual(r, ['innermost'])

    _, r = self.anagrams2.get_anagrams("inning")
    self.assertEqual(r, ['inning'])

    _, r = self.anagrams2.get_anagrams("innings")
    self.assertEqual(r, ['innings', 'sinning'])

    _, r = self.anagrams2.get_anagrams("innocence")
    self.assertEqual(r, ['innocence'])

    _, r = self.anagrams2.get_anagrams("innocent")
    self.assertEqual(r, ['innocent'])

    _, r = self.anagrams2.get_anagrams("innocently")
    self.assertEqual(r, ['innocently'])

    _, r = self.anagrams2.get_anagrams("innocents")
    self.assertEqual(r, ['innocents'])

    _, r = self.anagrams2.get_anagrams("innocuous")
    self.assertEqual(r, ['innocuous'])

    _, r = self.anagrams2.get_anagrams("innocuously")
    self.assertEqual(r, ['innocuously'])

    _, r = self.anagrams2.get_anagrams("innocuousness")
    self.assertEqual(r, ['innocuousness'])

    _, r = self.anagrams2.get_anagrams("innovate")
    self.assertEqual(r, ['aventino', 'innovate'])

    _, r = self.anagrams2.get_anagrams("innovation")
    self.assertEqual(r, ['innovation'])

    _, r = self.anagrams2.get_anagrams("innovations")
    self.assertEqual(r, ['innovations'])

    _, r = self.anagrams2.get_anagrams("innovative")
    self.assertEqual(r, ['innovative'])

    _, r = self.anagrams2.get_anagrams("inns")
    self.assertEqual(r, ['inns'])

    _, r = self.anagrams2.get_anagrams("innuendo")
    self.assertEqual(r, ['innuendo'])

    _, r = self.anagrams2.get_anagrams("innumerability")
    self.assertEqual(r, ['innumerability'])

    _, r = self.anagrams2.get_anagrams("innumerable")
    self.assertEqual(r, ['innumerable'])

    _, r = self.anagrams2.get_anagrams("innumerably")
    self.assertEqual(r, ['innumerably'])

    _, r = self.anagrams2.get_anagrams("inoculate")
    self.assertEqual(r, ['inoculate'])

    _, r = self.anagrams2.get_anagrams("inoperable")
    self.assertEqual(r, ['inoperable'])

    _, r = self.anagrams2.get_anagrams("inoperative")
    self.assertEqual(r, ['inoperative'])

    _, r = self.anagrams2.get_anagrams("inopportune")
    self.assertEqual(r, ['inopportune'])

    _, r = self.anagrams2.get_anagrams("inordinate")
    self.assertEqual(r, ['inordinate'])

    _, r = self.anagrams2.get_anagrams("inordinately")
    self.assertEqual(r, ['inordinately'])

    _, r = self.anagrams2.get_anagrams("inorganic")
    self.assertEqual(r, ['inorganic'])

    _, r = self.anagrams2.get_anagrams("input")
    self.assertEqual(r, ['input'])

    _, r = self.anagrams2.get_anagrams("inputs")
    self.assertEqual(r, ['inputs'])

    _, r = self.anagrams2.get_anagrams("inquest")
    self.assertEqual(r, ['inquest'])

    _, r = self.anagrams2.get_anagrams("inquire")
    self.assertEqual(r, ['inquire'])

    _, r = self.anagrams2.get_anagrams("inquired")
    self.assertEqual(r, ['inquired'])

    _, r = self.anagrams2.get_anagrams("inquirer")
    self.assertEqual(r, ['inquirer'])

    _, r = self.anagrams2.get_anagrams("inquirers")
    self.assertEqual(r, ['inquirers'])

    _, r = self.anagrams2.get_anagrams("inquires")
    self.assertEqual(r, ['inquires'])

    _, r = self.anagrams2.get_anagrams("inquiries")
    self.assertEqual(r, ['inquiries'])

    _, r = self.anagrams2.get_anagrams("inquiring")
    self.assertEqual(r, ['inquiring'])

    _, r = self.anagrams2.get_anagrams("inquiry")
    self.assertEqual(r, ['inquiry'])

    _, r = self.anagrams2.get_anagrams("inquisition")
    self.assertEqual(r, ['inquisition'])

    _, r = self.anagrams2.get_anagrams("inquisitions")
    self.assertEqual(r, ['inquisitions'])

    _, r = self.anagrams2.get_anagrams("inquisitive")
    self.assertEqual(r, ['inquisitive'])

    _, r = self.anagrams2.get_anagrams("inquisitively")
    self.assertEqual(r, ['inquisitively'])

    _, r = self.anagrams2.get_anagrams("inquisitiveness")
    self.assertEqual(r, ['inquisitiveness'])

    _, r = self.anagrams2.get_anagrams("inroad")
    self.assertEqual(r, ['inroad', 'ordain'])

    _, r = self.anagrams2.get_anagrams("inroads")
    self.assertEqual(r, ['inroads', 'ordains'])

    _, r = self.anagrams2.get_anagrams("insane")
    self.assertEqual(r, ['insane'])

    _, r = self.anagrams2.get_anagrams("insanely")
    self.assertEqual(r, ['insanely'])

    _, r = self.anagrams2.get_anagrams("insanity")
    self.assertEqual(r, ['insanity'])

    _, r = self.anagrams2.get_anagrams("insatiable")
    self.assertEqual(r, ['insatiable'])

    _, r = self.anagrams2.get_anagrams("inscribe")
    self.assertEqual(r, ['inscribe'])

    _, r = self.anagrams2.get_anagrams("inscribed")
    self.assertEqual(r, ['inscribed'])

    _, r = self.anagrams2.get_anagrams("inscribes")
    self.assertEqual(r, ['inscribes'])

    _, r = self.anagrams2.get_anagrams("inscribing")
    self.assertEqual(r, ['inscribing'])

    _, r = self.anagrams2.get_anagrams("inscription")
    self.assertEqual(r, ['inscription'])

    _, r = self.anagrams2.get_anagrams("inscriptions")
    self.assertEqual(r, ['inscriptions'])

    _, r = self.anagrams2.get_anagrams("inscrutable")
    self.assertEqual(r, ['inscrutable'])

    _, r = self.anagrams2.get_anagrams("insect")
    self.assertEqual(r, ['incest', 'insect', 'nicest'])

    _, r = self.anagrams2.get_anagrams("insecticide")
    self.assertEqual(r, ['insecticide'])

    _, r = self.anagrams2.get_anagrams("insects")
    self.assertEqual(r, ['insects'])

    _, r = self.anagrams2.get_anagrams("insecure")
    self.assertEqual(r, ['insecure'])

    _, r = self.anagrams2.get_anagrams("insecurely")
    self.assertEqual(r, ['insecurely'])

    _, r = self.anagrams2.get_anagrams("inseminate")
    self.assertEqual(r, ['inseminate'])

    _, r = self.anagrams2.get_anagrams("insensible")
    self.assertEqual(r, ['insensible'])

    _, r = self.anagrams2.get_anagrams("insensitive")
    self.assertEqual(r, ['insensitive'])

    _, r = self.anagrams2.get_anagrams("insensitively")
    self.assertEqual(r, ['insensitively'])

    _, r = self.anagrams2.get_anagrams("insensitivity")
    self.assertEqual(r, ['insensitivity'])

    _, r = self.anagrams2.get_anagrams("inseparable")
    self.assertEqual(r, ['inseparable'])

    _, r = self.anagrams2.get_anagrams("insert")
    self.assertEqual(r, ['insert'])

    _, r = self.anagrams2.get_anagrams("inserted")
    self.assertEqual(r, ['inserted', 'resident'])

    _, r = self.anagrams2.get_anagrams("inserting")
    self.assertEqual(r, ['inserting'])

    _, r = self.anagrams2.get_anagrams("insertion")
    self.assertEqual(r, ['insertion'])

    _, r = self.anagrams2.get_anagrams("insertions")
    self.assertEqual(r, ['insertions'])

    _, r = self.anagrams2.get_anagrams("inserts")
    self.assertEqual(r, ['inserts'])

    _, r = self.anagrams2.get_anagrams("inset")
    self.assertEqual(r, ['inset'])

    _, r = self.anagrams2.get_anagrams("inside")
    self.assertEqual(r, ['indies', 'inside'])

    _, r = self.anagrams2.get_anagrams("insider")
    self.assertEqual(r, ['insider'])

    _, r = self.anagrams2.get_anagrams("insiders")
    self.assertEqual(r, ['insiders'])

    _, r = self.anagrams2.get_anagrams("insides")
    self.assertEqual(r, ['insides'])

    _, r = self.anagrams2.get_anagrams("insidious")
    self.assertEqual(r, ['insidious'])

    _, r = self.anagrams2.get_anagrams("insidiously")
    self.assertEqual(r, ['insidiously'])

    _, r = self.anagrams2.get_anagrams("insidiousness")
    self.assertEqual(r, ['insidiousness'])

    _, r = self.anagrams2.get_anagrams("insight")
    self.assertEqual(r, ['insight'])

    _, r = self.anagrams2.get_anagrams("insightful")
    self.assertEqual(r, ['insightful'])

    _, r = self.anagrams2.get_anagrams("insights")
    self.assertEqual(r, ['insights'])

    _, r = self.anagrams2.get_anagrams("insignia")
    self.assertEqual(r, ['insignia'])

    _, r = self.anagrams2.get_anagrams("insignificance")
    self.assertEqual(r, ['insignificance'])

    _, r = self.anagrams2.get_anagrams("insignificant")
    self.assertEqual(r, ['insignificant'])

    _, r = self.anagrams2.get_anagrams("insincere")
    self.assertEqual(r, ['insincere'])

    _, r = self.anagrams2.get_anagrams("insincerity")
    self.assertEqual(r, ['insincerity'])

    _, r = self.anagrams2.get_anagrams("insinuate")
    self.assertEqual(r, ['insinuate'])

    _, r = self.anagrams2.get_anagrams("insinuated")
    self.assertEqual(r, ['insinuated'])

    _, r = self.anagrams2.get_anagrams("insinuates")
    self.assertEqual(r, ['insinuates'])

    _, r = self.anagrams2.get_anagrams("insinuating")
    self.assertEqual(r, ['insinuating'])

    _, r = self.anagrams2.get_anagrams("insinuation")
    self.assertEqual(r, ['insinuation'])

    _, r = self.anagrams2.get_anagrams("insinuations")
    self.assertEqual(r, ['insinuations'])

    _, r = self.anagrams2.get_anagrams("insipid")
    self.assertEqual(r, ['insipid'])

    _, r = self.anagrams2.get_anagrams("insist")
    self.assertEqual(r, ['insist'])

    _, r = self.anagrams2.get_anagrams("insisted")
    self.assertEqual(r, ['insisted', 'tidiness'])

    _, r = self.anagrams2.get_anagrams("insistence")
    self.assertEqual(r, ['insistence'])

    _, r = self.anagrams2.get_anagrams("insistent")
    self.assertEqual(r, ['insistent'])

    _, r = self.anagrams2.get_anagrams("insistently")
    self.assertEqual(r, ['insistently'])

    _, r = self.anagrams2.get_anagrams("insisting")
    self.assertEqual(r, ['insisting'])

    _, r = self.anagrams2.get_anagrams("insists")
    self.assertEqual(r, ['insists'])

    _, r = self.anagrams2.get_anagrams("insofar")
    self.assertEqual(r, ['insofar'])

    _, r = self.anagrams2.get_anagrams("insolence")
    self.assertEqual(r, ['insolence'])

    _, r = self.anagrams2.get_anagrams("insolent")
    self.assertEqual(r, ['insolent'])

    _, r = self.anagrams2.get_anagrams("insolently")
    self.assertEqual(r, ['insolently'])

    _, r = self.anagrams2.get_anagrams("insoluble")
    self.assertEqual(r, ['insoluble'])

    _, r = self.anagrams2.get_anagrams("insolvable")
    self.assertEqual(r, ['insolvable'])

    _, r = self.anagrams2.get_anagrams("insolvent")
    self.assertEqual(r, ['insolvent'])

    _, r = self.anagrams2.get_anagrams("insomnia")
    self.assertEqual(r, ['insomnia'])

    _, r = self.anagrams2.get_anagrams("insomniac")
    self.assertEqual(r, ['insomniac'])

    _, r = self.anagrams2.get_anagrams("inspect")
    self.assertEqual(r, ['inspect'])

    _, r = self.anagrams2.get_anagrams("inspected")
    self.assertEqual(r, ['inspected'])

    _, r = self.anagrams2.get_anagrams("inspecting")
    self.assertEqual(r, ['inspecting'])

    _, r = self.anagrams2.get_anagrams("inspection")
    self.assertEqual(r, ['inspection'])

    _, r = self.anagrams2.get_anagrams("inspections")
    self.assertEqual(r, ['inspections'])

    _, r = self.anagrams2.get_anagrams("inspector")
    self.assertEqual(r, ['inspector'])

    _, r = self.anagrams2.get_anagrams("inspectors")
    self.assertEqual(r, ['inspectors'])

    _, r = self.anagrams2.get_anagrams("inspects")
    self.assertEqual(r, ['inspects'])

    _, r = self.anagrams2.get_anagrams("inspiration")
    self.assertEqual(r, ['inspiration'])

    _, r = self.anagrams2.get_anagrams("inspirations")
    self.assertEqual(r, ['inspirations'])

    _, r = self.anagrams2.get_anagrams("inspire")
    self.assertEqual(r, ['inspire'])

    _, r = self.anagrams2.get_anagrams("inspired")
    self.assertEqual(r, ['inspired'])

    _, r = self.anagrams2.get_anagrams("inspirer")
    self.assertEqual(r, ['inspirer'])

    _, r = self.anagrams2.get_anagrams("inspires")
    self.assertEqual(r, ['inspires'])

    _, r = self.anagrams2.get_anagrams("inspiring")
    self.assertEqual(r, ['inspiring'])

    _, r = self.anagrams2.get_anagrams("instabilities")
    self.assertEqual(r, ['instabilities'])

    _, r = self.anagrams2.get_anagrams("instability")
    self.assertEqual(r, ['instability'])

    _, r = self.anagrams2.get_anagrams("install")
    self.assertEqual(r, ['install'])

    _, r = self.anagrams2.get_anagrams("installation")
    self.assertEqual(r, ['installation'])

    _, r = self.anagrams2.get_anagrams("installations")
    self.assertEqual(r, ['installations'])

    _, r = self.anagrams2.get_anagrams("installed")
    self.assertEqual(r, ['installed'])

    _, r = self.anagrams2.get_anagrams("installer")
    self.assertEqual(r, ['installer'])

    _, r = self.anagrams2.get_anagrams("installers")
    self.assertEqual(r, ['installers'])

    _, r = self.anagrams2.get_anagrams("installing")
    self.assertEqual(r, ['installing'])

    _, r = self.anagrams2.get_anagrams("installment")
    self.assertEqual(r, ['installment'])

    _, r = self.anagrams2.get_anagrams("installments")
    self.assertEqual(r, ['installments'])

    _, r = self.anagrams2.get_anagrams("installs")
    self.assertEqual(r, ['installs'])

    _, r = self.anagrams2.get_anagrams("instance")
    self.assertEqual(r, ['ancients', 'instance'])

    _, r = self.anagrams2.get_anagrams("instances")
    self.assertEqual(r, ['incessant', 'instances'])

    _, r = self.anagrams2.get_anagrams("instant")
    self.assertEqual(r, ['instant'])

    _, r = self.anagrams2.get_anagrams("instantaneous")
    self.assertEqual(r, ['instantaneous'])

    _, r = self.anagrams2.get_anagrams("instantaneously")
    self.assertEqual(r, ['instantaneously'])

    _, r = self.anagrams2.get_anagrams("instanter")
    self.assertEqual(r, ['instanter', 'transient'])

    _, r = self.anagrams2.get_anagrams("instantiate")
    self.assertEqual(r, ['instantiate'])

    _, r = self.anagrams2.get_anagrams("instantiated")
    self.assertEqual(r, ['instantiated'])

    _, r = self.anagrams2.get_anagrams("instantiates")
    self.assertEqual(r, ['instantiates'])

    _, r = self.anagrams2.get_anagrams("instantiating")
    self.assertEqual(r, ['instantiating'])

    _, r = self.anagrams2.get_anagrams("instantiation")
    self.assertEqual(r, ['instantiation'])

    _, r = self.anagrams2.get_anagrams("instantiations")
    self.assertEqual(r, ['instantiations'])

    _, r = self.anagrams2.get_anagrams("instantly")
    self.assertEqual(r, ['instantly'])

    _, r = self.anagrams2.get_anagrams("instants")
    self.assertEqual(r, ['instants'])

    _, r = self.anagrams2.get_anagrams("instead")
    self.assertEqual(r, ['detains', 'instead', 'sainted', 'stained'])

    _, r = self.anagrams2.get_anagrams("instigate")
    self.assertEqual(r, ['instigate'])

    _, r = self.anagrams2.get_anagrams("instigated")
    self.assertEqual(r, ['instigated'])

    _, r = self.anagrams2.get_anagrams("instigates")
    self.assertEqual(r, ['instigates'])

    _, r = self.anagrams2.get_anagrams("instigating")
    self.assertEqual(r, ['instigating'])

    _, r = self.anagrams2.get_anagrams("instigator")
    self.assertEqual(r, ['instigator'])

    _, r = self.anagrams2.get_anagrams("instigators")
    self.assertEqual(r, ['instigators'])

    _, r = self.anagrams2.get_anagrams("instill")
    self.assertEqual(r, ['instill'])

    _, r = self.anagrams2.get_anagrams("instinct")
    self.assertEqual(r, ['instinct'])

    _, r = self.anagrams2.get_anagrams("instinctive")
    self.assertEqual(r, ['instinctive'])

    _, r = self.anagrams2.get_anagrams("instinctively")
    self.assertEqual(r, ['instinctively'])

    _, r = self.anagrams2.get_anagrams("instincts")
    self.assertEqual(r, ['instincts'])

    _, r = self.anagrams2.get_anagrams("instinctual")
    self.assertEqual(r, ['instinctual'])

    _, r = self.anagrams2.get_anagrams("institute")
    self.assertEqual(r, ['institute'])

    _, r = self.anagrams2.get_anagrams("instituted")
    self.assertEqual(r, ['instituted'])

    _, r = self.anagrams2.get_anagrams("instituter")
    self.assertEqual(r, ['instituter'])

    _, r = self.anagrams2.get_anagrams("instituters")
    self.assertEqual(r, ['instituters'])

    _, r = self.anagrams2.get_anagrams("institutes")
    self.assertEqual(r, ['institutes'])

    _, r = self.anagrams2.get_anagrams("instituting")
    self.assertEqual(r, ['instituting'])

    _, r = self.anagrams2.get_anagrams("institution")
    self.assertEqual(r, ['institution'])

    _, r = self.anagrams2.get_anagrams("institutional")
    self.assertEqual(r, ['institutional'])

    _, r = self.anagrams2.get_anagrams("institutionalize")
    self.assertEqual(r, ['institutionalize'])

    _, r = self.anagrams2.get_anagrams("institutionalized")
    self.assertEqual(r, ['institutionalized'])

    _, r = self.anagrams2.get_anagrams("institutionalizes")
    self.assertEqual(r, ['institutionalizes'])

    _, r = self.anagrams2.get_anagrams("institutionalizing")
    self.assertEqual(r, ['institutionalizing'])

    _, r = self.anagrams2.get_anagrams("institutionally")
    self.assertEqual(r, ['institutionally'])

    _, r = self.anagrams2.get_anagrams("institutions")
    self.assertEqual(r, ['institutions'])

    _, r = self.anagrams2.get_anagrams("instruct")
    self.assertEqual(r, ['instruct'])

    _, r = self.anagrams2.get_anagrams("instructed")
    self.assertEqual(r, ['instructed'])

    _, r = self.anagrams2.get_anagrams("instructing")
    self.assertEqual(r, ['instructing'])

    _, r = self.anagrams2.get_anagrams("instruction")
    self.assertEqual(r, ['instruction'])

    _, r = self.anagrams2.get_anagrams("instructional")
    self.assertEqual(r, ['instructional'])

    _, r = self.anagrams2.get_anagrams("instructions")
    self.assertEqual(r, ['instructions'])

    _, r = self.anagrams2.get_anagrams("instructive")
    self.assertEqual(r, ['instructive'])

    _, r = self.anagrams2.get_anagrams("instructively")
    self.assertEqual(r, ['instructively'])

    _, r = self.anagrams2.get_anagrams("instructor")
    self.assertEqual(r, ['instructor'])

    _, r = self.anagrams2.get_anagrams("instructors")
    self.assertEqual(r, ['instructors'])

    _, r = self.anagrams2.get_anagrams("instructs")
    self.assertEqual(r, ['instructs'])

    _, r = self.anagrams2.get_anagrams("instrument")
    self.assertEqual(r, ['instrument'])

    _, r = self.anagrams2.get_anagrams("instrumental")
    self.assertEqual(r, ['instrumental'])

    _, r = self.anagrams2.get_anagrams("instrumentalist")
    self.assertEqual(r, ['instrumentalist'])

    _, r = self.anagrams2.get_anagrams("instrumentalists")
    self.assertEqual(r, ['instrumentalists'])

    _, r = self.anagrams2.get_anagrams("instrumentally")
    self.assertEqual(r, ['instrumentally'])

    _, r = self.anagrams2.get_anagrams("instrumentals")
    self.assertEqual(r, ['instrumentals'])

    _, r = self.anagrams2.get_anagrams("instrumentation")
    self.assertEqual(r, ['instrumentation'])

    _, r = self.anagrams2.get_anagrams("instrumented")
    self.assertEqual(r, ['instrumented'])

    _, r = self.anagrams2.get_anagrams("instrumenting")
    self.assertEqual(r, ['instrumenting'])

    _, r = self.anagrams2.get_anagrams("instruments")
    self.assertEqual(r, ['instruments'])

    _, r = self.anagrams2.get_anagrams("insubordinate")
    self.assertEqual(r, ['insubordinate'])

    _, r = self.anagrams2.get_anagrams("insufferable")
    self.assertEqual(r, ['insufferable'])

    _, r = self.anagrams2.get_anagrams("insufficient")
    self.assertEqual(r, ['insufficient'])

    _, r = self.anagrams2.get_anagrams("insufficiently")
    self.assertEqual(r, ['insufficiently'])

    _, r = self.anagrams2.get_anagrams("insular")
    self.assertEqual(r, ['insular'])

    _, r = self.anagrams2.get_anagrams("insulate")
    self.assertEqual(r, ['insulate'])

    _, r = self.anagrams2.get_anagrams("insulated")
    self.assertEqual(r, ['insulated'])

    _, r = self.anagrams2.get_anagrams("insulates")
    self.assertEqual(r, ['insulates'])

    _, r = self.anagrams2.get_anagrams("insulating")
    self.assertEqual(r, ['insulating'])

    _, r = self.anagrams2.get_anagrams("insulation")
    self.assertEqual(r, ['insulation'])

    _, r = self.anagrams2.get_anagrams("insulator")
    self.assertEqual(r, ['insulator'])

    _, r = self.anagrams2.get_anagrams("insulators")
    self.assertEqual(r, ['insulators'])

    _, r = self.anagrams2.get_anagrams("insulin")
    self.assertEqual(r, ['insulin'])

    _, r = self.anagrams2.get_anagrams("insult")
    self.assertEqual(r, ['insult', 'sunlit'])

    _, r = self.anagrams2.get_anagrams("insulted")
    self.assertEqual(r, ['insulted'])

    _, r = self.anagrams2.get_anagrams("insulting")
    self.assertEqual(r, ['insulting'])

    _, r = self.anagrams2.get_anagrams("insults")
    self.assertEqual(r, ['insults'])

    _, r = self.anagrams2.get_anagrams("insuperable")
    self.assertEqual(r, ['insuperable'])

    _, r = self.anagrams2.get_anagrams("insupportable")
    self.assertEqual(r, ['insupportable'])

    _, r = self.anagrams2.get_anagrams("insurance")
    self.assertEqual(r, ['insurance'])

    _, r = self.anagrams2.get_anagrams("insure")
    self.assertEqual(r, ['insure'])

    _, r = self.anagrams2.get_anagrams("insured")
    self.assertEqual(r, ['insured'])

    _, r = self.anagrams2.get_anagrams("insurer")
    self.assertEqual(r, ['insurer'])

    _, r = self.anagrams2.get_anagrams("insurers")
    self.assertEqual(r, ['insurers'])

    _, r = self.anagrams2.get_anagrams("insures")
    self.assertEqual(r, ['insures', 'sunrise'])

    _, r = self.anagrams2.get_anagrams("insurgent")
    self.assertEqual(r, ['insurgent'])

    _, r = self.anagrams2.get_anagrams("insurgents")
    self.assertEqual(r, ['insurgents'])

    _, r = self.anagrams2.get_anagrams("insuring")
    self.assertEqual(r, ['insuring'])

    _, r = self.anagrams2.get_anagrams("insurmountable")
    self.assertEqual(r, ['insurmountable'])

    _, r = self.anagrams2.get_anagrams("insurrection")
    self.assertEqual(r, ['insurrection'])

    _, r = self.anagrams2.get_anagrams("insurrections")
    self.assertEqual(r, ['insurrections'])

    _, r = self.anagrams2.get_anagrams("intact")
    self.assertEqual(r, ['intact'])

    _, r = self.anagrams2.get_anagrams("intangible")
    self.assertEqual(r, ['intangible'])

    _, r = self.anagrams2.get_anagrams("intangibles")
    self.assertEqual(r, ['intangibles'])

    _, r = self.anagrams2.get_anagrams("integer")
    self.assertEqual(r, ['integer'])

    _, r = self.anagrams2.get_anagrams("integers")
    self.assertEqual(r, ['integers', 'steering'])

    _, r = self.anagrams2.get_anagrams("integrable")
    self.assertEqual(r, ['integrable'])

    _, r = self.anagrams2.get_anagrams("integral")
    self.assertEqual(r, ['alerting', 'altering', 'integral', 'relating', 'triangle'])

    _, r = self.anagrams2.get_anagrams("integrals")
    self.assertEqual(r, ['integrals', 'triangles'])

    _, r = self.anagrams2.get_anagrams("integrand")
    self.assertEqual(r, ['integrand'])

    _, r = self.anagrams2.get_anagrams("integrate")
    self.assertEqual(r, ['integrate'])

    _, r = self.anagrams2.get_anagrams("integrated")
    self.assertEqual(r, ['integrated'])

    _, r = self.anagrams2.get_anagrams("integrates")
    self.assertEqual(r, ['integrates', 'interstage'])

    _, r = self.anagrams2.get_anagrams("integrating")
    self.assertEqual(r, ['integrating'])

    _, r = self.anagrams2.get_anagrams("integration")
    self.assertEqual(r, ['integration'])

    _, r = self.anagrams2.get_anagrams("integrations")
    self.assertEqual(r, ['integrations'])

    _, r = self.anagrams2.get_anagrams("integrative")
    self.assertEqual(r, ['integrative'])

    _, r = self.anagrams2.get_anagrams("integrity")
    self.assertEqual(r, ['integrity'])

    _, r = self.anagrams2.get_anagrams("intel")
    self.assertEqual(r, ['inlet', 'intel'])

    _, r = self.anagrams2.get_anagrams("intellect")
    self.assertEqual(r, ['intellect'])

    _, r = self.anagrams2.get_anagrams("intellects")
    self.assertEqual(r, ['intellects'])

    _, r = self.anagrams2.get_anagrams("intellectual")
    self.assertEqual(r, ['intellectual'])

    _, r = self.anagrams2.get_anagrams("intellectually")
    self.assertEqual(r, ['intellectually'])

    _, r = self.anagrams2.get_anagrams("intellectuals")
    self.assertEqual(r, ['intellectuals'])

    _, r = self.anagrams2.get_anagrams("intelligence")
    self.assertEqual(r, ['intelligence'])

    _, r = self.anagrams2.get_anagrams("intelligent")
    self.assertEqual(r, ['intelligent'])

    _, r = self.anagrams2.get_anagrams("intelligently")
    self.assertEqual(r, ['intelligently'])

    _, r = self.anagrams2.get_anagrams("intelligentsia")
    self.assertEqual(r, ['intelligentsia'])

    _, r = self.anagrams2.get_anagrams("intelligibility")
    self.assertEqual(r, ['intelligibility'])

    _, r = self.anagrams2.get_anagrams("intelligible")
    self.assertEqual(r, ['intelligible'])

    _, r = self.anagrams2.get_anagrams("intelligibly")
    self.assertEqual(r, ['intelligibly'])

    _, r = self.anagrams2.get_anagrams("intelsat")
    self.assertEqual(r, ['intelsat'])

    _, r = self.anagrams2.get_anagrams("intemperate")
    self.assertEqual(r, ['intemperate'])

    _, r = self.anagrams2.get_anagrams("intend")
    self.assertEqual(r, ['indent', 'intend'])

    _, r = self.anagrams2.get_anagrams("intended")
    self.assertEqual(r, ['indented', 'intended'])

    _, r = self.anagrams2.get_anagrams("intending")
    self.assertEqual(r, ['indenting', 'intending'])

    _, r = self.anagrams2.get_anagrams("intends")
    self.assertEqual(r, ['indents', 'intends'])

    _, r = self.anagrams2.get_anagrams("intense")
    self.assertEqual(r, ['intense'])

    _, r = self.anagrams2.get_anagrams("intensely")
    self.assertEqual(r, ['intensely'])

    _, r = self.anagrams2.get_anagrams("intensification")
    self.assertEqual(r, ['intensification'])

    _, r = self.anagrams2.get_anagrams("intensified")
    self.assertEqual(r, ['intensified'])

    _, r = self.anagrams2.get_anagrams("intensifier")
    self.assertEqual(r, ['intensifier'])

    _, r = self.anagrams2.get_anagrams("intensifiers")
    self.assertEqual(r, ['intensifiers'])

    _, r = self.anagrams2.get_anagrams("intensifies")
    self.assertEqual(r, ['intensifies'])

    _, r = self.anagrams2.get_anagrams("intensify")
    self.assertEqual(r, ['intensify'])

    _, r = self.anagrams2.get_anagrams("intensifying")
    self.assertEqual(r, ['intensifying'])

    _, r = self.anagrams2.get_anagrams("intensities")
    self.assertEqual(r, ['intensities'])

    _, r = self.anagrams2.get_anagrams("intensity")
    self.assertEqual(r, ['intensity'])

    _, r = self.anagrams2.get_anagrams("intensive")
    self.assertEqual(r, ['intensive'])

    _, r = self.anagrams2.get_anagrams("intensively")
    self.assertEqual(r, ['intensively'])

    _, r = self.anagrams2.get_anagrams("intent")
    self.assertEqual(r, ['intent'])

    _, r = self.anagrams2.get_anagrams("intention")
    self.assertEqual(r, ['intention'])

    _, r = self.anagrams2.get_anagrams("intentional")
    self.assertEqual(r, ['intentional'])

    _, r = self.anagrams2.get_anagrams("intentionally")
    self.assertEqual(r, ['intentionally'])

    _, r = self.anagrams2.get_anagrams("intentioned")
    self.assertEqual(r, ['intentioned'])

    _, r = self.anagrams2.get_anagrams("intentions")
    self.assertEqual(r, ['intentions'])

    _, r = self.anagrams2.get_anagrams("intently")
    self.assertEqual(r, ['intently'])

    _, r = self.anagrams2.get_anagrams("intentness")
    self.assertEqual(r, ['intentness'])

    _, r = self.anagrams2.get_anagrams("intents")
    self.assertEqual(r, ['intents'])

    _, r = self.anagrams2.get_anagrams("inter")
    self.assertEqual(r, ['inert', 'inter'])

    _, r = self.anagrams2.get_anagrams("interact")
    self.assertEqual(r, ['interact'])

    _, r = self.anagrams2.get_anagrams("interacted")
    self.assertEqual(r, ['interacted'])

    _, r = self.anagrams2.get_anagrams("interacting")
    self.assertEqual(r, ['interacting'])

    _, r = self.anagrams2.get_anagrams("interaction")
    self.assertEqual(r, ['interaction'])

    _, r = self.anagrams2.get_anagrams("interactions")
    self.assertEqual(r, ['interactions'])

    _, r = self.anagrams2.get_anagrams("interactive")
    self.assertEqual(r, ['interactive'])

    _, r = self.anagrams2.get_anagrams("interactively")
    self.assertEqual(r, ['interactively'])

    _, r = self.anagrams2.get_anagrams("interactivity")
    self.assertEqual(r, ['interactivity'])

    _, r = self.anagrams2.get_anagrams("interacts")
    self.assertEqual(r, ['interacts'])

    _, r = self.anagrams2.get_anagrams("intercept")
    self.assertEqual(r, ['intercept'])

    _, r = self.anagrams2.get_anagrams("intercepted")
    self.assertEqual(r, ['intercepted'])

    _, r = self.anagrams2.get_anagrams("intercepting")
    self.assertEqual(r, ['intercepting'])

    _, r = self.anagrams2.get_anagrams("interception")
    self.assertEqual(r, ['interception'])

    _, r = self.anagrams2.get_anagrams("interceptor")
    self.assertEqual(r, ['interceptor'])

    _, r = self.anagrams2.get_anagrams("intercepts")
    self.assertEqual(r, ['intercepts'])

    _, r = self.anagrams2.get_anagrams("interchange")
    self.assertEqual(r, ['interchange'])

    _, r = self.anagrams2.get_anagrams("interchangeability")
    self.assertEqual(r, ['interchangeability'])

    _, r = self.anagrams2.get_anagrams("interchangeable")
    self.assertEqual(r, ['interchangeable'])

    _, r = self.anagrams2.get_anagrams("interchangeably")
    self.assertEqual(r, ['interchangeably'])

    _, r = self.anagrams2.get_anagrams("interchanged")
    self.assertEqual(r, ['interchanged'])

    _, r = self.anagrams2.get_anagrams("interchanger")
    self.assertEqual(r, ['interchanger'])

    _, r = self.anagrams2.get_anagrams("interchanges")
    self.assertEqual(r, ['interchanges'])

    _, r = self.anagrams2.get_anagrams("interchanging")
    self.assertEqual(r, ['interchanging'])

    _, r = self.anagrams2.get_anagrams("interchangings")
    self.assertEqual(r, ['interchangings'])

    _, r = self.anagrams2.get_anagrams("interchannel")
    self.assertEqual(r, ['interchannel'])

    _, r = self.anagrams2.get_anagrams("intercity")
    self.assertEqual(r, ['intercity'])

    _, r = self.anagrams2.get_anagrams("intercom")
    self.assertEqual(r, ['intercom'])

    _, r = self.anagrams2.get_anagrams("intercommunicate")
    self.assertEqual(r, ['intercommunicate'])

    _, r = self.anagrams2.get_anagrams("intercommunicated")
    self.assertEqual(r, ['intercommunicated'])

    _, r = self.anagrams2.get_anagrams("intercommunicates")
    self.assertEqual(r, ['intercommunicates'])

    _, r = self.anagrams2.get_anagrams("intercommunicating")
    self.assertEqual(r, ['intercommunicating'])

    _, r = self.anagrams2.get_anagrams("intercommunication")
    self.assertEqual(r, ['intercommunication'])

    _, r = self.anagrams2.get_anagrams("interconnect")
    self.assertEqual(r, ['interconnect'])

    _, r = self.anagrams2.get_anagrams("interconnected")
    self.assertEqual(r, ['interconnected'])

    _, r = self.anagrams2.get_anagrams("interconnecting")
    self.assertEqual(r, ['interconnecting'])

    _, r = self.anagrams2.get_anagrams("interconnection")
    self.assertEqual(r, ['interconnection'])

    _, r = self.anagrams2.get_anagrams("interconnections")
    self.assertEqual(r, ['interconnections'])

    _, r = self.anagrams2.get_anagrams("interconnects")
    self.assertEqual(r, ['interconnects'])

    _, r = self.anagrams2.get_anagrams("intercontinental")
    self.assertEqual(r, ['intercontinental'])

    _, r = self.anagrams2.get_anagrams("intercourse")
    self.assertEqual(r, ['intercourse'])

    _, r = self.anagrams2.get_anagrams("interdata")
    self.assertEqual(r, ['interdata'])

    _, r = self.anagrams2.get_anagrams("interdependence")
    self.assertEqual(r, ['interdependence'])

    _, r = self.anagrams2.get_anagrams("interdependencies")
    self.assertEqual(r, ['interdependencies'])

    _, r = self.anagrams2.get_anagrams("interdependency")
    self.assertEqual(r, ['interdependency'])

    _, r = self.anagrams2.get_anagrams("interdependent")
    self.assertEqual(r, ['interdependent'])

    _, r = self.anagrams2.get_anagrams("interdict")
    self.assertEqual(r, ['interdict'])

    _, r = self.anagrams2.get_anagrams("interdiction")
    self.assertEqual(r, ['interdiction'])

    _, r = self.anagrams2.get_anagrams("interdisciplinary")
    self.assertEqual(r, ['interdisciplinary'])

    _, r = self.anagrams2.get_anagrams("interest")
    self.assertEqual(r, ['interest'])

    _, r = self.anagrams2.get_anagrams("interested")
    self.assertEqual(r, ['interested'])

    _, r = self.anagrams2.get_anagrams("interesting")
    self.assertEqual(r, ['interesting'])

    _, r = self.anagrams2.get_anagrams("interestingly")
    self.assertEqual(r, ['interestingly'])

    _, r = self.anagrams2.get_anagrams("interests")
    self.assertEqual(r, ['interests'])

    _, r = self.anagrams2.get_anagrams("interface")
    self.assertEqual(r, ['interface'])

    _, r = self.anagrams2.get_anagrams("interfaced")
    self.assertEqual(r, ['interfaced'])

    _, r = self.anagrams2.get_anagrams("interfacer")
    self.assertEqual(r, ['interfacer'])

    _, r = self.anagrams2.get_anagrams("interfaces")
    self.assertEqual(r, ['interfaces'])

    _, r = self.anagrams2.get_anagrams("interfacing")
    self.assertEqual(r, ['interfacing'])

    _, r = self.anagrams2.get_anagrams("interfere")
    self.assertEqual(r, ['interfere'])

    _, r = self.anagrams2.get_anagrams("interfered")
    self.assertEqual(r, ['interfered'])

    _, r = self.anagrams2.get_anagrams("interference")
    self.assertEqual(r, ['interference'])

    _, r = self.anagrams2.get_anagrams("interferences")
    self.assertEqual(r, ['interferences'])

    _, r = self.anagrams2.get_anagrams("interferes")
    self.assertEqual(r, ['interferes'])

    _, r = self.anagrams2.get_anagrams("interfering")
    self.assertEqual(r, ['interfering'])

    _, r = self.anagrams2.get_anagrams("interferingly")
    self.assertEqual(r, ['interferingly'])

    _, r = self.anagrams2.get_anagrams("interferometer")
    self.assertEqual(r, ['interferometer'])

    _, r = self.anagrams2.get_anagrams("interferometric")
    self.assertEqual(r, ['interferometric'])

    _, r = self.anagrams2.get_anagrams("interferometry")
    self.assertEqual(r, ['interferometry'])

    _, r = self.anagrams2.get_anagrams("interframe")
    self.assertEqual(r, ['interframe'])

    _, r = self.anagrams2.get_anagrams("intergroup")
    self.assertEqual(r, ['intergroup'])

    _, r = self.anagrams2.get_anagrams("interim")
    self.assertEqual(r, ['interim'])

    _, r = self.anagrams2.get_anagrams("interior")
    self.assertEqual(r, ['interior'])

    _, r = self.anagrams2.get_anagrams("interiors")
    self.assertEqual(r, ['interiors'])

    _, r = self.anagrams2.get_anagrams("interject")
    self.assertEqual(r, ['interject'])

    _, r = self.anagrams2.get_anagrams("interlace")
    self.assertEqual(r, ['interlace'])

    _, r = self.anagrams2.get_anagrams("interlaced")
    self.assertEqual(r, ['credential', 'interlaced'])

    _, r = self.anagrams2.get_anagrams("interlaces")
    self.assertEqual(r, ['interlaces'])

    _, r = self.anagrams2.get_anagrams("interlacing")
    self.assertEqual(r, ['interlacing'])

    _, r = self.anagrams2.get_anagrams("interleave")
    self.assertEqual(r, ['interleave'])

    _, r = self.anagrams2.get_anagrams("interleaved")
    self.assertEqual(r, ['interleaved'])

    _, r = self.anagrams2.get_anagrams("interleaves")
    self.assertEqual(r, ['interleaves'])

    _, r = self.anagrams2.get_anagrams("interleaving")
    self.assertEqual(r, ['interleaving'])

    _, r = self.anagrams2.get_anagrams("interlink")
    self.assertEqual(r, ['interlink'])

    _, r = self.anagrams2.get_anagrams("interlinked")
    self.assertEqual(r, ['interlinked'])

    _, r = self.anagrams2.get_anagrams("interlinks")
    self.assertEqual(r, ['interlinks'])

    _, r = self.anagrams2.get_anagrams("interlisp")
    self.assertEqual(r, ['interlisp'])

    _, r = self.anagrams2.get_anagrams("intermediary")
    self.assertEqual(r, ['intermediary'])

    _, r = self.anagrams2.get_anagrams("intermediate")
    self.assertEqual(r, ['intermediate'])

    _, r = self.anagrams2.get_anagrams("intermediates")
    self.assertEqual(r, ['intermediates'])

    _, r = self.anagrams2.get_anagrams("interminable")
    self.assertEqual(r, ['interminable'])

    _, r = self.anagrams2.get_anagrams("intermingle")
    self.assertEqual(r, ['intermingle'])

    _, r = self.anagrams2.get_anagrams("intermingled")
    self.assertEqual(r, ['intermingled'])

    _, r = self.anagrams2.get_anagrams("intermingles")
    self.assertEqual(r, ['intermingles'])

    _, r = self.anagrams2.get_anagrams("intermingling")
    self.assertEqual(r, ['intermingling'])

    _, r = self.anagrams2.get_anagrams("intermission")
    self.assertEqual(r, ['intermission'])

    _, r = self.anagrams2.get_anagrams("intermittent")
    self.assertEqual(r, ['intermittent'])

    _, r = self.anagrams2.get_anagrams("intermittently")
    self.assertEqual(r, ['intermittently'])

    _, r = self.anagrams2.get_anagrams("intermix")
    self.assertEqual(r, ['intermix'])

    _, r = self.anagrams2.get_anagrams("intermixed")
    self.assertEqual(r, ['intermixed'])

    _, r = self.anagrams2.get_anagrams("intermodule")
    self.assertEqual(r, ['intermodule'])

    _, r = self.anagrams2.get_anagrams("intern")
    self.assertEqual(r, ['intern'])

    _, r = self.anagrams2.get_anagrams("internal")
    self.assertEqual(r, ['internal'])

    _, r = self.anagrams2.get_anagrams("internalize")
    self.assertEqual(r, ['internalize'])

    _, r = self.anagrams2.get_anagrams("internalized")
    self.assertEqual(r, ['internalized'])

    _, r = self.anagrams2.get_anagrams("internalizes")
    self.assertEqual(r, ['internalizes'])

    _, r = self.anagrams2.get_anagrams("internalizing")
    self.assertEqual(r, ['internalizing'])

    _, r = self.anagrams2.get_anagrams("internally")
    self.assertEqual(r, ['internally'])

    _, r = self.anagrams2.get_anagrams("internals")
    self.assertEqual(r, ['internals'])

    _, r = self.anagrams2.get_anagrams("international")
    self.assertEqual(r, ['international'])

    _, r = self.anagrams2.get_anagrams("internationality")
    self.assertEqual(r, ['internationality'])

    _, r = self.anagrams2.get_anagrams("internationally")
    self.assertEqual(r, ['internationally'])

    _, r = self.anagrams2.get_anagrams("interned")
    self.assertEqual(r, ['interned'])

    _, r = self.anagrams2.get_anagrams("internet")
    self.assertEqual(r, ['internet', 'internet'])

    _, r = self.anagrams2.get_anagrams("internet")
    self.assertEqual(r, ['internet', 'internet'])

    _, r = self.anagrams2.get_anagrams("internetwork")
    self.assertEqual(r, ['internetwork'])

    _, r = self.anagrams2.get_anagrams("interning")
    self.assertEqual(r, ['interning'])

    _, r = self.anagrams2.get_anagrams("interns")
    self.assertEqual(r, ['interns'])

    _, r = self.anagrams2.get_anagrams("internship")
    self.assertEqual(r, ['internship'])

    _, r = self.anagrams2.get_anagrams("interoffice")
    self.assertEqual(r, ['interoffice'])

    _, r = self.anagrams2.get_anagrams("interpersonal")
    self.assertEqual(r, ['interpersonal'])

    _, r = self.anagrams2.get_anagrams("interplay")
    self.assertEqual(r, ['interplay'])

    _, r = self.anagrams2.get_anagrams("interpol")
    self.assertEqual(r, ['interpol'])

    _, r = self.anagrams2.get_anagrams("interpolate")
    self.assertEqual(r, ['interpolate'])

    _, r = self.anagrams2.get_anagrams("interpolated")
    self.assertEqual(r, ['interpolated'])

    _, r = self.anagrams2.get_anagrams("interpolates")
    self.assertEqual(r, ['interpolates'])

    _, r = self.anagrams2.get_anagrams("interpolating")
    self.assertEqual(r, ['interpolating'])

    _, r = self.anagrams2.get_anagrams("interpolation")
    self.assertEqual(r, ['interpolation'])

    _, r = self.anagrams2.get_anagrams("interpolations")
    self.assertEqual(r, ['interpolations'])

    _, r = self.anagrams2.get_anagrams("interpose")
    self.assertEqual(r, ['interpose'])

    _, r = self.anagrams2.get_anagrams("interposed")
    self.assertEqual(r, ['interposed'])

    _, r = self.anagrams2.get_anagrams("interposes")
    self.assertEqual(r, ['interposes'])

    _, r = self.anagrams2.get_anagrams("interposing")
    self.assertEqual(r, ['interposing'])

    _, r = self.anagrams2.get_anagrams("interpret")
    self.assertEqual(r, ['interpret'])

    _, r = self.anagrams2.get_anagrams("interpretable")
    self.assertEqual(r, ['interpretable'])

    _, r = self.anagrams2.get_anagrams("interpretation")
    self.assertEqual(r, ['interpretation'])

    _, r = self.anagrams2.get_anagrams("interpretations")
    self.assertEqual(r, ['interpretations'])

    _, r = self.anagrams2.get_anagrams("interpreted")
    self.assertEqual(r, ['interpreted'])

    _, r = self.anagrams2.get_anagrams("interpreter")
    self.assertEqual(r, ['interpreter', 'reinterpret'])

    _, r = self.anagrams2.get_anagrams("interpreters")
    self.assertEqual(r, ['interpreters', 'reinterprets'])

    _, r = self.anagrams2.get_anagrams("interpreting")
    self.assertEqual(r, ['interpreting'])

    _, r = self.anagrams2.get_anagrams("interpretive")
    self.assertEqual(r, ['interpretive'])

    _, r = self.anagrams2.get_anagrams("interpretively")
    self.assertEqual(r, ['interpretively'])

    _, r = self.anagrams2.get_anagrams("interprets")
    self.assertEqual(r, ['interprets'])

    _, r = self.anagrams2.get_anagrams("interprocess")
    self.assertEqual(r, ['interprocess'])

    _, r = self.anagrams2.get_anagrams("interrelate")
    self.assertEqual(r, ['interrelate'])

    _, r = self.anagrams2.get_anagrams("interrelated")
    self.assertEqual(r, ['interrelated'])

    _, r = self.anagrams2.get_anagrams("interrelates")
    self.assertEqual(r, ['interrelates'])

    _, r = self.anagrams2.get_anagrams("interrelating")
    self.assertEqual(r, ['interrelating'])

    _, r = self.anagrams2.get_anagrams("interrelation")
    self.assertEqual(r, ['interrelation'])

    _, r = self.anagrams2.get_anagrams("interrelations")
    self.assertEqual(r, ['interrelations'])

    _, r = self.anagrams2.get_anagrams("interrelationship")
    self.assertEqual(r, ['interrelationship'])

    _, r = self.anagrams2.get_anagrams("interrelationships")
    self.assertEqual(r, ['interrelationships'])

    _, r = self.anagrams2.get_anagrams("interrogate")
    self.assertEqual(r, ['interrogate'])

    _, r = self.anagrams2.get_anagrams("interrogated")
    self.assertEqual(r, ['interrogated'])

    _, r = self.anagrams2.get_anagrams("interrogates")
    self.assertEqual(r, ['interrogates'])

    _, r = self.anagrams2.get_anagrams("interrogating")
    self.assertEqual(r, ['interrogating'])

    _, r = self.anagrams2.get_anagrams("interrogation")
    self.assertEqual(r, ['interrogation'])

    _, r = self.anagrams2.get_anagrams("interrogations")
    self.assertEqual(r, ['interrogations'])

    _, r = self.anagrams2.get_anagrams("interrogative")
    self.assertEqual(r, ['interrogative'])

    _, r = self.anagrams2.get_anagrams("interrupt")
    self.assertEqual(r, ['interrupt'])

    _, r = self.anagrams2.get_anagrams("interrupted")
    self.assertEqual(r, ['interrupted'])

    _, r = self.anagrams2.get_anagrams("interruptible")
    self.assertEqual(r, ['interruptible'])

    _, r = self.anagrams2.get_anagrams("interrupting")
    self.assertEqual(r, ['interrupting'])

    _, r = self.anagrams2.get_anagrams("interruption")
    self.assertEqual(r, ['interruption'])

    _, r = self.anagrams2.get_anagrams("interruptions")
    self.assertEqual(r, ['interruptions'])

    _, r = self.anagrams2.get_anagrams("interruptive")
    self.assertEqual(r, ['interruptive'])

    _, r = self.anagrams2.get_anagrams("interrupts")
    self.assertEqual(r, ['interrupts'])

    _, r = self.anagrams2.get_anagrams("intersect")
    self.assertEqual(r, ['intersect'])

    _, r = self.anagrams2.get_anagrams("intersected")
    self.assertEqual(r, ['intersected'])

    _, r = self.anagrams2.get_anagrams("intersecting")
    self.assertEqual(r, ['intersecting'])

    _, r = self.anagrams2.get_anagrams("intersection")
    self.assertEqual(r, ['intersection'])

    _, r = self.anagrams2.get_anagrams("intersections")
    self.assertEqual(r, ['intersections'])

    _, r = self.anagrams2.get_anagrams("intersects")
    self.assertEqual(r, ['intersects'])

    _, r = self.anagrams2.get_anagrams("intersperse")
    self.assertEqual(r, ['enterprises', 'intersperse'])

    _, r = self.anagrams2.get_anagrams("interspersed")
    self.assertEqual(r, ['interspersed'])

    _, r = self.anagrams2.get_anagrams("intersperses")
    self.assertEqual(r, ['intersperses'])

    _, r = self.anagrams2.get_anagrams("interspersing")
    self.assertEqual(r, ['interspersing'])

    _, r = self.anagrams2.get_anagrams("interspersion")
    self.assertEqual(r, ['interspersion'])

    _, r = self.anagrams2.get_anagrams("interstage")
    self.assertEqual(r, ['integrates', 'interstage'])

    _, r = self.anagrams2.get_anagrams("interstate")
    self.assertEqual(r, ['interstate'])

    _, r = self.anagrams2.get_anagrams("intertwine")
    self.assertEqual(r, ['intertwine'])

    _, r = self.anagrams2.get_anagrams("intertwined")
    self.assertEqual(r, ['intertwined'])

    _, r = self.anagrams2.get_anagrams("intertwines")
    self.assertEqual(r, ['intertwines'])

    _, r = self.anagrams2.get_anagrams("intertwining")
    self.assertEqual(r, ['intertwining'])

    _, r = self.anagrams2.get_anagrams("interval")
    self.assertEqual(r, ['interval'])

    _, r = self.anagrams2.get_anagrams("intervals")
    self.assertEqual(r, ['intervals'])

    _, r = self.anagrams2.get_anagrams("intervene")
    self.assertEqual(r, ['intervene'])

    _, r = self.anagrams2.get_anagrams("intervened")
    self.assertEqual(r, ['intervened', 'reinvented'])

    _, r = self.anagrams2.get_anagrams("intervenes")
    self.assertEqual(r, ['intervenes'])

    _, r = self.anagrams2.get_anagrams("intervening")
    self.assertEqual(r, ['intervening', 'reinventing'])

    _, r = self.anagrams2.get_anagrams("intervention")
    self.assertEqual(r, ['intervention'])

    _, r = self.anagrams2.get_anagrams("interventions")
    self.assertEqual(r, ['interventions'])

    _, r = self.anagrams2.get_anagrams("interview")
    self.assertEqual(r, ['interview'])

    _, r = self.anagrams2.get_anagrams("interviewed")
    self.assertEqual(r, ['interviewed'])

    _, r = self.anagrams2.get_anagrams("interviewee")
    self.assertEqual(r, ['interviewee'])

    _, r = self.anagrams2.get_anagrams("interviewer")
    self.assertEqual(r, ['interviewer'])

    _, r = self.anagrams2.get_anagrams("interviewers")
    self.assertEqual(r, ['interviewers'])

    _, r = self.anagrams2.get_anagrams("interviewing")
    self.assertEqual(r, ['interviewing'])

    _, r = self.anagrams2.get_anagrams("interviews")
    self.assertEqual(r, ['interviews'])

    _, r = self.anagrams2.get_anagrams("interwoven")
    self.assertEqual(r, ['interwoven'])

    _, r = self.anagrams2.get_anagrams("intestate")
    self.assertEqual(r, ['intestate'])

    _, r = self.anagrams2.get_anagrams("intestinal")
    self.assertEqual(r, ['intestinal'])

    _, r = self.anagrams2.get_anagrams("intestine")
    self.assertEqual(r, ['intestine'])

    _, r = self.anagrams2.get_anagrams("intestines")
    self.assertEqual(r, ['intestines'])

    _, r = self.anagrams2.get_anagrams("intimacy")
    self.assertEqual(r, ['intimacy'])

    _, r = self.anagrams2.get_anagrams("intimate")
    self.assertEqual(r, ['intimate'])

    _, r = self.anagrams2.get_anagrams("intimated")
    self.assertEqual(r, ['intimated'])

    _, r = self.anagrams2.get_anagrams("intimately")
    self.assertEqual(r, ['intimately'])

    _, r = self.anagrams2.get_anagrams("intimating")
    self.assertEqual(r, ['intimating'])

    _, r = self.anagrams2.get_anagrams("intimation")
    self.assertEqual(r, ['intimation'])

    _, r = self.anagrams2.get_anagrams("intimations")
    self.assertEqual(r, ['intimations'])

    _, r = self.anagrams2.get_anagrams("intimidate")
    self.assertEqual(r, ['intimidate'])

    _, r = self.anagrams2.get_anagrams("intimidated")
    self.assertEqual(r, ['intimidated'])

    _, r = self.anagrams2.get_anagrams("intimidates")
    self.assertEqual(r, ['intimidates'])

    _, r = self.anagrams2.get_anagrams("intimidating")
    self.assertEqual(r, ['intimidating'])

    _, r = self.anagrams2.get_anagrams("intimidation")
    self.assertEqual(r, ['intimidation'])

    _, r = self.anagrams2.get_anagrams("into")
    self.assertEqual(r, ['into', 'toni'])

    _, r = self.anagrams2.get_anagrams("intolerable")
    self.assertEqual(r, ['intolerable'])

    _, r = self.anagrams2.get_anagrams("intolerably")
    self.assertEqual(r, ['intolerably'])

    _, r = self.anagrams2.get_anagrams("intolerance")
    self.assertEqual(r, ['intolerance'])

    _, r = self.anagrams2.get_anagrams("intolerant")
    self.assertEqual(r, ['intolerant'])

    _, r = self.anagrams2.get_anagrams("intonation")
    self.assertEqual(r, ['intonation'])

    _, r = self.anagrams2.get_anagrams("intonations")
    self.assertEqual(r, ['intonations'])

    _, r = self.anagrams2.get_anagrams("intone")
    self.assertEqual(r, ['intone'])

    _, r = self.anagrams2.get_anagrams("intoxicant")
    self.assertEqual(r, ['intoxicant'])

    _, r = self.anagrams2.get_anagrams("intoxicate")
    self.assertEqual(r, ['excitation', 'intoxicate'])

    _, r = self.anagrams2.get_anagrams("intoxicated")
    self.assertEqual(r, ['intoxicated'])

    _, r = self.anagrams2.get_anagrams("intoxicating")
    self.assertEqual(r, ['intoxicating'])

    _, r = self.anagrams2.get_anagrams("intoxication")
    self.assertEqual(r, ['intoxication'])

    _, r = self.anagrams2.get_anagrams("intractability")
    self.assertEqual(r, ['intractability'])

    _, r = self.anagrams2.get_anagrams("intractable")
    self.assertEqual(r, ['intractable'])

    _, r = self.anagrams2.get_anagrams("intractably")
    self.assertEqual(r, ['intractably'])

    _, r = self.anagrams2.get_anagrams("intragroup")
    self.assertEqual(r, ['intragroup'])

    _, r = self.anagrams2.get_anagrams("intraline")
    self.assertEqual(r, ['intraline'])

    _, r = self.anagrams2.get_anagrams("intramural")
    self.assertEqual(r, ['intramural'])

    _, r = self.anagrams2.get_anagrams("intramuscular")
    self.assertEqual(r, ['intramuscular'])

    _, r = self.anagrams2.get_anagrams("intransigent")
    self.assertEqual(r, ['intransigent'])

    _, r = self.anagrams2.get_anagrams("intransitive")
    self.assertEqual(r, ['intransitive'])

    _, r = self.anagrams2.get_anagrams("intransitively")
    self.assertEqual(r, ['intransitively'])

    _, r = self.anagrams2.get_anagrams("intraoffice")
    self.assertEqual(r, ['intraoffice'])

    _, r = self.anagrams2.get_anagrams("intraprocess")
    self.assertEqual(r, ['intraprocess'])

    _, r = self.anagrams2.get_anagrams("intrastate")
    self.assertEqual(r, ['intrastate'])

    _, r = self.anagrams2.get_anagrams("intravenous")
    self.assertEqual(r, ['intravenous'])

    _, r = self.anagrams2.get_anagrams("intrepid")
    self.assertEqual(r, ['intrepid'])

    _, r = self.anagrams2.get_anagrams("intricacies")
    self.assertEqual(r, ['intricacies'])

    _, r = self.anagrams2.get_anagrams("intricacy")
    self.assertEqual(r, ['intricacy'])

    _, r = self.anagrams2.get_anagrams("intricate")
    self.assertEqual(r, ['intricate'])

    _, r = self.anagrams2.get_anagrams("intricately")
    self.assertEqual(r, ['intricately'])

    _, r = self.anagrams2.get_anagrams("intrigue")
    self.assertEqual(r, ['intrigue'])

    _, r = self.anagrams2.get_anagrams("intrigued")
    self.assertEqual(r, ['intrigued'])

    _, r = self.anagrams2.get_anagrams("intrigues")
    self.assertEqual(r, ['intrigues'])

    _, r = self.anagrams2.get_anagrams("intriguing")
    self.assertEqual(r, ['intriguing'])

    _, r = self.anagrams2.get_anagrams("intrinsic")
    self.assertEqual(r, ['intrinsic'])

    _, r = self.anagrams2.get_anagrams("intrinsically")
    self.assertEqual(r, ['intrinsically'])

    _, r = self.anagrams2.get_anagrams("introduce")
    self.assertEqual(r, ['introduce', 'reduction'])

    _, r = self.anagrams2.get_anagrams("introduced")
    self.assertEqual(r, ['introduced'])

    _, r = self.anagrams2.get_anagrams("introduces")
    self.assertEqual(r, ['introduces', 'reductions'])

    _, r = self.anagrams2.get_anagrams("introducing")
    self.assertEqual(r, ['introducing'])

    _, r = self.anagrams2.get_anagrams("introduction")
    self.assertEqual(r, ['introduction'])

    _, r = self.anagrams2.get_anagrams("introductions")
    self.assertEqual(r, ['introductions'])

    _, r = self.anagrams2.get_anagrams("introductory")
    self.assertEqual(r, ['introductory'])

    _, r = self.anagrams2.get_anagrams("introspect")
    self.assertEqual(r, ['introspect'])

    _, r = self.anagrams2.get_anagrams("introspection")
    self.assertEqual(r, ['introspection'])

    _, r = self.anagrams2.get_anagrams("introspections")
    self.assertEqual(r, ['introspections'])

    _, r = self.anagrams2.get_anagrams("introspective")
    self.assertEqual(r, ['introspective'])

    _, r = self.anagrams2.get_anagrams("introvert")
    self.assertEqual(r, ['introvert'])

    _, r = self.anagrams2.get_anagrams("introverted")
    self.assertEqual(r, ['introverted'])

    _, r = self.anagrams2.get_anagrams("intrude")
    self.assertEqual(r, ['intrude', 'untried'])

    _, r = self.anagrams2.get_anagrams("intruded")
    self.assertEqual(r, ['intruded'])

    _, r = self.anagrams2.get_anagrams("intruder")
    self.assertEqual(r, ['intruder'])

    _, r = self.anagrams2.get_anagrams("intruders")
    self.assertEqual(r, ['intruders'])

    _, r = self.anagrams2.get_anagrams("intrudes")
    self.assertEqual(r, ['intrudes'])

    _, r = self.anagrams2.get_anagrams("intruding")
    self.assertEqual(r, ['intruding'])

    _, r = self.anagrams2.get_anagrams("intrusion")
    self.assertEqual(r, ['intrusion'])

    _, r = self.anagrams2.get_anagrams("intrusions")
    self.assertEqual(r, ['intrusions'])

    _, r = self.anagrams2.get_anagrams("intrust")
    self.assertEqual(r, ['intrust'])

    _, r = self.anagrams2.get_anagrams("intubate")
    self.assertEqual(r, ['intubate'])

    _, r = self.anagrams2.get_anagrams("intubated")
    self.assertEqual(r, ['intubated'])

    _, r = self.anagrams2.get_anagrams("intubates")
    self.assertEqual(r, ['intubates'])

    _, r = self.anagrams2.get_anagrams("intubation")
    self.assertEqual(r, ['intubation'])

    _, r = self.anagrams2.get_anagrams("intuition")
    self.assertEqual(r, ['intuition'])

    _, r = self.anagrams2.get_anagrams("intuitionist")
    self.assertEqual(r, ['intuitionist'])

    _, r = self.anagrams2.get_anagrams("intuitions")
    self.assertEqual(r, ['intuitions'])

    _, r = self.anagrams2.get_anagrams("intuitive")
    self.assertEqual(r, ['intuitive'])

    _, r = self.anagrams2.get_anagrams("intuitively")
    self.assertEqual(r, ['intuitively'])

    _, r = self.anagrams2.get_anagrams("inundate")
    self.assertEqual(r, ['inundate'])

    _, r = self.anagrams2.get_anagrams("invade")
    self.assertEqual(r, ['invade'])

    _, r = self.anagrams2.get_anagrams("invaded")
    self.assertEqual(r, ['invaded'])

    _, r = self.anagrams2.get_anagrams("invader")
    self.assertEqual(r, ['invader'])

    _, r = self.anagrams2.get_anagrams("invaders")
    self.assertEqual(r, ['invaders'])

    _, r = self.anagrams2.get_anagrams("invades")
    self.assertEqual(r, ['invades'])

    _, r = self.anagrams2.get_anagrams("invading")
    self.assertEqual(r, ['invading'])

    _, r = self.anagrams2.get_anagrams("invalid")
    self.assertEqual(r, ['invalid'])

    _, r = self.anagrams2.get_anagrams("invalidate")
    self.assertEqual(r, ['invalidate'])

    _, r = self.anagrams2.get_anagrams("invalidated")
    self.assertEqual(r, ['invalidated'])

    _, r = self.anagrams2.get_anagrams("invalidates")
    self.assertEqual(r, ['invalidates'])

    _, r = self.anagrams2.get_anagrams("invalidating")
    self.assertEqual(r, ['invalidating'])

    _, r = self.anagrams2.get_anagrams("invalidation")
    self.assertEqual(r, ['invalidation'])

    _, r = self.anagrams2.get_anagrams("invalidations")
    self.assertEqual(r, ['invalidations'])

    _, r = self.anagrams2.get_anagrams("invalidities")
    self.assertEqual(r, ['invalidities'])

    _, r = self.anagrams2.get_anagrams("invalidity")
    self.assertEqual(r, ['invalidity'])

    _, r = self.anagrams2.get_anagrams("invalidly")
    self.assertEqual(r, ['invalidly'])

    _, r = self.anagrams2.get_anagrams("invalids")
    self.assertEqual(r, ['invalids'])

    _, r = self.anagrams2.get_anagrams("invaluable")
    self.assertEqual(r, ['invaluable'])

    _, r = self.anagrams2.get_anagrams("invariable")
    self.assertEqual(r, ['invariable'])

    _, r = self.anagrams2.get_anagrams("invariably")
    self.assertEqual(r, ['invariably'])

    _, r = self.anagrams2.get_anagrams("invariance")
    self.assertEqual(r, ['invariance'])

    _, r = self.anagrams2.get_anagrams("invariant")
    self.assertEqual(r, ['invariant'])

    _, r = self.anagrams2.get_anagrams("invariantly")
    self.assertEqual(r, ['invariantly'])

    _, r = self.anagrams2.get_anagrams("invariants")
    self.assertEqual(r, ['invariants'])

    _, r = self.anagrams2.get_anagrams("invasion")
    self.assertEqual(r, ['invasion'])

    _, r = self.anagrams2.get_anagrams("invasions")
    self.assertEqual(r, ['invasions'])

    _, r = self.anagrams2.get_anagrams("invective")
    self.assertEqual(r, ['invective'])

    _, r = self.anagrams2.get_anagrams("invent")
    self.assertEqual(r, ['invent'])

    _, r = self.anagrams2.get_anagrams("invented")
    self.assertEqual(r, ['invented'])

    _, r = self.anagrams2.get_anagrams("inventing")
    self.assertEqual(r, ['inventing'])

    _, r = self.anagrams2.get_anagrams("invention")
    self.assertEqual(r, ['invention'])

    _, r = self.anagrams2.get_anagrams("inventions")
    self.assertEqual(r, ['inventions'])

    _, r = self.anagrams2.get_anagrams("inventive")
    self.assertEqual(r, ['inventive'])

    _, r = self.anagrams2.get_anagrams("inventively")
    self.assertEqual(r, ['inventively'])

    _, r = self.anagrams2.get_anagrams("inventiveness")
    self.assertEqual(r, ['inventiveness'])

    _, r = self.anagrams2.get_anagrams("inventor")
    self.assertEqual(r, ['inventor'])

    _, r = self.anagrams2.get_anagrams("inventories")
    self.assertEqual(r, ['inventories'])

    _, r = self.anagrams2.get_anagrams("inventors")
    self.assertEqual(r, ['inventors'])

    _, r = self.anagrams2.get_anagrams("inventory")
    self.assertEqual(r, ['inventory'])

    _, r = self.anagrams2.get_anagrams("invents")
    self.assertEqual(r, ['invents'])

    _, r = self.anagrams2.get_anagrams("inverness")
    self.assertEqual(r, ['inverness'])

    _, r = self.anagrams2.get_anagrams("inverse")
    self.assertEqual(r, ['inverse'])

    _, r = self.anagrams2.get_anagrams("inversely")
    self.assertEqual(r, ['inversely'])

    _, r = self.anagrams2.get_anagrams("inverses")
    self.assertEqual(r, ['inverses'])

    _, r = self.anagrams2.get_anagrams("inversion")
    self.assertEqual(r, ['inversion'])

    _, r = self.anagrams2.get_anagrams("inversions")
    self.assertEqual(r, ['inversions'])

    _, r = self.anagrams2.get_anagrams("invert")
    self.assertEqual(r, ['invert'])

    _, r = self.anagrams2.get_anagrams("invertebrate")
    self.assertEqual(r, ['invertebrate'])

    _, r = self.anagrams2.get_anagrams("invertebrates")
    self.assertEqual(r, ['invertebrates'])

    _, r = self.anagrams2.get_anagrams("inverted")
    self.assertEqual(r, ['inverted'])

    _, r = self.anagrams2.get_anagrams("inverter")
    self.assertEqual(r, ['inverter'])

    _, r = self.anagrams2.get_anagrams("inverters")
    self.assertEqual(r, ['inverters'])

    _, r = self.anagrams2.get_anagrams("invertible")
    self.assertEqual(r, ['invertible'])

    _, r = self.anagrams2.get_anagrams("inverting")
    self.assertEqual(r, ['inverting'])

    _, r = self.anagrams2.get_anagrams("inverts")
    self.assertEqual(r, ['inverts', 'striven'])

    _, r = self.anagrams2.get_anagrams("invest")
    self.assertEqual(r, ['invest'])

    _, r = self.anagrams2.get_anagrams("invested")
    self.assertEqual(r, ['invested'])

    _, r = self.anagrams2.get_anagrams("investigate")
    self.assertEqual(r, ['investigate'])

    _, r = self.anagrams2.get_anagrams("investigated")
    self.assertEqual(r, ['investigated'])

    _, r = self.anagrams2.get_anagrams("investigates")
    self.assertEqual(r, ['investigates'])

    _, r = self.anagrams2.get_anagrams("investigating")
    self.assertEqual(r, ['investigating'])

    _, r = self.anagrams2.get_anagrams("investigation")
    self.assertEqual(r, ['investigation'])

    _, r = self.anagrams2.get_anagrams("investigations")
    self.assertEqual(r, ['investigations'])

    _, r = self.anagrams2.get_anagrams("investigative")
    self.assertEqual(r, ['investigative'])

    _, r = self.anagrams2.get_anagrams("investigator")
    self.assertEqual(r, ['investigator'])

    _, r = self.anagrams2.get_anagrams("investigators")
    self.assertEqual(r, ['investigators'])

    _, r = self.anagrams2.get_anagrams("investigatory")
    self.assertEqual(r, ['investigatory'])

    _, r = self.anagrams2.get_anagrams("investing")
    self.assertEqual(r, ['investing'])

    _, r = self.anagrams2.get_anagrams("investment")
    self.assertEqual(r, ['investment'])

    _, r = self.anagrams2.get_anagrams("investments")
    self.assertEqual(r, ['investments'])

    _, r = self.anagrams2.get_anagrams("investor")
    self.assertEqual(r, ['investor'])

    _, r = self.anagrams2.get_anagrams("investors")
    self.assertEqual(r, ['investors'])

    _, r = self.anagrams2.get_anagrams("invests")
    self.assertEqual(r, ['invests'])

    _, r = self.anagrams2.get_anagrams("inveterate")
    self.assertEqual(r, ['inveterate'])

    _, r = self.anagrams2.get_anagrams("invigorate")
    self.assertEqual(r, ['invigorate'])

    _, r = self.anagrams2.get_anagrams("invincible")
    self.assertEqual(r, ['invincible'])

    _, r = self.anagrams2.get_anagrams("invisibility")
    self.assertEqual(r, ['invisibility'])

    _, r = self.anagrams2.get_anagrams("invisible")
    self.assertEqual(r, ['invisible'])

    _, r = self.anagrams2.get_anagrams("invisibly")
    self.assertEqual(r, ['invisibly'])

    _, r = self.anagrams2.get_anagrams("invitation")
    self.assertEqual(r, ['invitation'])

    _, r = self.anagrams2.get_anagrams("invitations")
    self.assertEqual(r, ['invitations'])

    _, r = self.anagrams2.get_anagrams("invite")
    self.assertEqual(r, ['invite'])

    _, r = self.anagrams2.get_anagrams("invited")
    self.assertEqual(r, ['invited'])

    _, r = self.anagrams2.get_anagrams("invites")
    self.assertEqual(r, ['invites'])

    _, r = self.anagrams2.get_anagrams("inviting")
    self.assertEqual(r, ['inviting'])

    _, r = self.anagrams2.get_anagrams("invocable")
    self.assertEqual(r, ['invocable'])

    _, r = self.anagrams2.get_anagrams("invocation")
    self.assertEqual(r, ['invocation'])

    _, r = self.anagrams2.get_anagrams("invocations")
    self.assertEqual(r, ['invocations'])

    _, r = self.anagrams2.get_anagrams("invoice")
    self.assertEqual(r, ['invoice'])

    _, r = self.anagrams2.get_anagrams("invoiced")
    self.assertEqual(r, ['invoiced'])

    _, r = self.anagrams2.get_anagrams("invoices")
    self.assertEqual(r, ['invoices'])

    _, r = self.anagrams2.get_anagrams("invoicing")
    self.assertEqual(r, ['invoicing'])

    _, r = self.anagrams2.get_anagrams("invoke")
    self.assertEqual(r, ['invoke'])

    _, r = self.anagrams2.get_anagrams("invoked")
    self.assertEqual(r, ['invoked'])

    _, r = self.anagrams2.get_anagrams("invoker")
    self.assertEqual(r, ['invoker'])

    _, r = self.anagrams2.get_anagrams("invokes")
    self.assertEqual(r, ['invokes'])

    _, r = self.anagrams2.get_anagrams("invoking")
    self.assertEqual(r, ['invoking'])

    _, r = self.anagrams2.get_anagrams("involuntarily")
    self.assertEqual(r, ['involuntarily'])

    _, r = self.anagrams2.get_anagrams("involuntary")
    self.assertEqual(r, ['involuntary'])

    _, r = self.anagrams2.get_anagrams("involve")
    self.assertEqual(r, ['involve'])

    _, r = self.anagrams2.get_anagrams("involved")
    self.assertEqual(r, ['involved'])

    _, r = self.anagrams2.get_anagrams("involvement")
    self.assertEqual(r, ['involvement'])

    _, r = self.anagrams2.get_anagrams("involvements")
    self.assertEqual(r, ['involvements'])

    _, r = self.anagrams2.get_anagrams("involves")
    self.assertEqual(r, ['involves'])

    _, r = self.anagrams2.get_anagrams("involving")
    self.assertEqual(r, ['involving'])

    _, r = self.anagrams2.get_anagrams("inward")
    self.assertEqual(r, ['darwin', 'inward'])

    _, r = self.anagrams2.get_anagrams("inwardly")
    self.assertEqual(r, ['inwardly'])

    _, r = self.anagrams2.get_anagrams("inwardness")
    self.assertEqual(r, ['inwardness'])

    _, r = self.anagrams2.get_anagrams("inwards")
    self.assertEqual(r, ['inwards'])

    _, r = self.anagrams2.get_anagrams("io")
    self.assertEqual(r, ['io'])

    _, r = self.anagrams2.get_anagrams("iodine")
    self.assertEqual(r, ['iodine'])

    _, r = self.anagrams2.get_anagrams("ion")
    self.assertEqual(r, ['ion'])

    _, r = self.anagrams2.get_anagrams("ionian")
    self.assertEqual(r, ['ionian'])

    _, r = self.anagrams2.get_anagrams("ionians")
    self.assertEqual(r, ['ionians'])

    _, r = self.anagrams2.get_anagrams("ionicization")
    self.assertEqual(r, ['ionicization'])

    _, r = self.anagrams2.get_anagrams("ionicizations")
    self.assertEqual(r, ['ionicizations'])

    _, r = self.anagrams2.get_anagrams("ionicize")
    self.assertEqual(r, ['ionicize'])

    _, r = self.anagrams2.get_anagrams("ionicizes")
    self.assertEqual(r, ['ionicizes'])

    _, r = self.anagrams2.get_anagrams("ionosphere")
    self.assertEqual(r, ['ionosphere'])

    _, r = self.anagrams2.get_anagrams("ionospheric")
    self.assertEqual(r, ['ionospheric'])

    _, r = self.anagrams2.get_anagrams("ions")
    self.assertEqual(r, ['ions'])

    _, r = self.anagrams2.get_anagrams("iota")
    self.assertEqual(r, ['iota'])

    _, r = self.anagrams2.get_anagrams("iowa")
    self.assertEqual(r, ['iowa'])

    _, r = self.anagrams2.get_anagrams("ira")
    self.assertEqual(r, ['air', 'ira'])

    _, r = self.anagrams2.get_anagrams("iran")
    self.assertEqual(r, ['iran', 'nair', 'rain'])

    _, r = self.anagrams2.get_anagrams("iranian")
    self.assertEqual(r, ['iranian'])

    _, r = self.anagrams2.get_anagrams("iranians")
    self.assertEqual(r, ['iranians'])

    _, r = self.anagrams2.get_anagrams("iranize")
    self.assertEqual(r, ['iranize'])

    _, r = self.anagrams2.get_anagrams("iranizes")
    self.assertEqual(r, ['iranizes'])

    _, r = self.anagrams2.get_anagrams("iraq")
    self.assertEqual(r, ['iraq'])

    _, r = self.anagrams2.get_anagrams("iraqi")
    self.assertEqual(r, ['iraqi'])

    _, r = self.anagrams2.get_anagrams("iraqis")
    self.assertEqual(r, ['iraqis'])

    _, r = self.anagrams2.get_anagrams("irate")
    self.assertEqual(r, ['artie', 'irate'])

    _, r = self.anagrams2.get_anagrams("irately")
    self.assertEqual(r, ['irately', 'reality'])

    _, r = self.anagrams2.get_anagrams("irateness")
    self.assertEqual(r, ['irateness'])

    _, r = self.anagrams2.get_anagrams("ire")
    self.assertEqual(r, ['ire'])

    _, r = self.anagrams2.get_anagrams("ireland")
    self.assertEqual(r, ['ireland'])

    _, r = self.anagrams2.get_anagrams("irene")
    self.assertEqual(r, ['ernie', 'irene'])

    _, r = self.anagrams2.get_anagrams("ires")
    self.assertEqual(r, ['eris', 'ires', 'rise', 'sire'])

    _, r = self.anagrams2.get_anagrams("iris")
    self.assertEqual(r, ['iris'])

    _, r = self.anagrams2.get_anagrams("irish")
    self.assertEqual(r, ['irish'])

    _, r = self.anagrams2.get_anagrams("irishize")
    self.assertEqual(r, ['irishize'])

    _, r = self.anagrams2.get_anagrams("irishizes")
    self.assertEqual(r, ['irishizes'])

    _, r = self.anagrams2.get_anagrams("irishman")
    self.assertEqual(r, ['irishman'])

    _, r = self.anagrams2.get_anagrams("irishmen")
    self.assertEqual(r, ['irishmen'])

    _, r = self.anagrams2.get_anagrams("irk")
    self.assertEqual(r, ['irk'])

    _, r = self.anagrams2.get_anagrams("irked")
    self.assertEqual(r, ['irked'])

    _, r = self.anagrams2.get_anagrams("irking")
    self.assertEqual(r, ['irking'])

    _, r = self.anagrams2.get_anagrams("irks")
    self.assertEqual(r, ['irks', 'risk'])

    _, r = self.anagrams2.get_anagrams("irksome")
    self.assertEqual(r, ['irksome'])

    _, r = self.anagrams2.get_anagrams("irma")
    self.assertEqual(r, ['irma', 'mira'])

    _, r = self.anagrams2.get_anagrams("iron")
    self.assertEqual(r, ['iron', 'orin'])

    _, r = self.anagrams2.get_anagrams("ironed")
    self.assertEqual(r, ['ironed'])

    _, r = self.anagrams2.get_anagrams("ironic")
    self.assertEqual(r, ['ironic'])

    _, r = self.anagrams2.get_anagrams("ironical")
    self.assertEqual(r, ['ironical'])

    _, r = self.anagrams2.get_anagrams("ironically")
    self.assertEqual(r, ['ironically'])

    _, r = self.anagrams2.get_anagrams("ironies")
    self.assertEqual(r, ['ironies', 'noisier'])

    _, r = self.anagrams2.get_anagrams("ironing")
    self.assertEqual(r, ['ironing'])

    _, r = self.anagrams2.get_anagrams("ironings")
    self.assertEqual(r, ['ironings'])

    _, r = self.anagrams2.get_anagrams("irons")
    self.assertEqual(r, ['irons'])

    _, r = self.anagrams2.get_anagrams("irony")
    self.assertEqual(r, ['irony'])

    _, r = self.anagrams2.get_anagrams("iroquois")
    self.assertEqual(r, ['iroquois'])

    _, r = self.anagrams2.get_anagrams("irradiate")
    self.assertEqual(r, ['irradiate'])

    _, r = self.anagrams2.get_anagrams("irrational")
    self.assertEqual(r, ['irrational'])

    _, r = self.anagrams2.get_anagrams("irrationally")
    self.assertEqual(r, ['irrationally'])

    _, r = self.anagrams2.get_anagrams("irrationals")
    self.assertEqual(r, ['irrationals'])

    _, r = self.anagrams2.get_anagrams("irrawaddy")
    self.assertEqual(r, ['irrawaddy'])

    _, r = self.anagrams2.get_anagrams("irreconcilable")
    self.assertEqual(r, ['irreconcilable'])

    _, r = self.anagrams2.get_anagrams("irrecoverable")
    self.assertEqual(r, ['irrecoverable'])

    _, r = self.anagrams2.get_anagrams("irreducible")
    self.assertEqual(r, ['irreducible'])

    _, r = self.anagrams2.get_anagrams("irreducibly")
    self.assertEqual(r, ['irreducibly'])

    _, r = self.anagrams2.get_anagrams("irreflexive")
    self.assertEqual(r, ['irreflexive'])

    _, r = self.anagrams2.get_anagrams("irrefutable")
    self.assertEqual(r, ['irrefutable'])

    _, r = self.anagrams2.get_anagrams("irregular")
    self.assertEqual(r, ['irregular'])

    _, r = self.anagrams2.get_anagrams("irregularities")
    self.assertEqual(r, ['irregularities'])

    _, r = self.anagrams2.get_anagrams("irregularity")
    self.assertEqual(r, ['irregularity'])

    _, r = self.anagrams2.get_anagrams("irregularly")
    self.assertEqual(r, ['irregularly'])

    _, r = self.anagrams2.get_anagrams("irregulars")
    self.assertEqual(r, ['irregulars'])

    _, r = self.anagrams2.get_anagrams("irrelevance")
    self.assertEqual(r, ['irrelevance'])

    _, r = self.anagrams2.get_anagrams("irrelevances")
    self.assertEqual(r, ['irrelevances'])

    _, r = self.anagrams2.get_anagrams("irrelevant")
    self.assertEqual(r, ['irrelevant'])

    _, r = self.anagrams2.get_anagrams("irrelevantly")
    self.assertEqual(r, ['irrelevantly'])

    _, r = self.anagrams2.get_anagrams("irreplaceable")
    self.assertEqual(r, ['irreplaceable'])

    _, r = self.anagrams2.get_anagrams("irrepressible")
    self.assertEqual(r, ['irrepressible'])

    _, r = self.anagrams2.get_anagrams("irreproducibility")
    self.assertEqual(r, ['irreproducibility'])

    _, r = self.anagrams2.get_anagrams("irreproducible")
    self.assertEqual(r, ['irreproducible'])

    _, r = self.anagrams2.get_anagrams("irresistible")
    self.assertEqual(r, ['irresistible'])

    _, r = self.anagrams2.get_anagrams("irrespective")
    self.assertEqual(r, ['irrespective'])

    _, r = self.anagrams2.get_anagrams("irrespectively")
    self.assertEqual(r, ['irrespectively'])

    _, r = self.anagrams2.get_anagrams("irresponsible")
    self.assertEqual(r, ['irresponsible'])

    _, r = self.anagrams2.get_anagrams("irresponsibly")
    self.assertEqual(r, ['irresponsibly'])

    _, r = self.anagrams2.get_anagrams("irretrievably")
    self.assertEqual(r, ['irretrievably'])

    _, r = self.anagrams2.get_anagrams("irreverent")
    self.assertEqual(r, ['irreverent'])

    _, r = self.anagrams2.get_anagrams("irreversibility")
    self.assertEqual(r, ['irreversibility'])

    _, r = self.anagrams2.get_anagrams("irreversible")
    self.assertEqual(r, ['irreversible'])

    _, r = self.anagrams2.get_anagrams("irreversibly")
    self.assertEqual(r, ['irreversibly'])

    _, r = self.anagrams2.get_anagrams("irrevocable")
    self.assertEqual(r, ['irrevocable'])

    _, r = self.anagrams2.get_anagrams("irrevocably")
    self.assertEqual(r, ['irrevocably'])

    _, r = self.anagrams2.get_anagrams("irrigate")
    self.assertEqual(r, ['irrigate'])

    _, r = self.anagrams2.get_anagrams("irrigated")
    self.assertEqual(r, ['irrigated'])

    _, r = self.anagrams2.get_anagrams("irrigates")
    self.assertEqual(r, ['irrigates'])

    _, r = self.anagrams2.get_anagrams("irrigating")
    self.assertEqual(r, ['irrigating'])

    _, r = self.anagrams2.get_anagrams("irrigation")
    self.assertEqual(r, ['irrigation'])

    _, r = self.anagrams2.get_anagrams("irritable")
    self.assertEqual(r, ['irritable'])

    _, r = self.anagrams2.get_anagrams("irritant")
    self.assertEqual(r, ['irritant'])

    _, r = self.anagrams2.get_anagrams("irritate")
    self.assertEqual(r, ['irritate'])

    _, r = self.anagrams2.get_anagrams("irritated")
    self.assertEqual(r, ['irritated'])

    _, r = self.anagrams2.get_anagrams("irritates")
    self.assertEqual(r, ['irritates'])

    _, r = self.anagrams2.get_anagrams("irritating")
    self.assertEqual(r, ['irritating'])

    _, r = self.anagrams2.get_anagrams("irritation")
    self.assertEqual(r, ['irritation'])

    _, r = self.anagrams2.get_anagrams("irritations")
    self.assertEqual(r, ['irritations'])

    _, r = self.anagrams2.get_anagrams("irvin")
    self.assertEqual(r, ['irvin'])

    _, r = self.anagrams2.get_anagrams("irvine")
    self.assertEqual(r, ['irvine'])

    _, r = self.anagrams2.get_anagrams("irving")
    self.assertEqual(r, ['irving', 'virgin'])

    _, r = self.anagrams2.get_anagrams("irwin")
    self.assertEqual(r, ['irwin'])

    _, r = self.anagrams2.get_anagrams("is")
    self.assertEqual(r, ['is'])

    _, r = self.anagrams2.get_anagrams("isaac")
    self.assertEqual(r, ['isaac'])

    _, r = self.anagrams2.get_anagrams("isaacs")
    self.assertEqual(r, ['isaacs'])

    _, r = self.anagrams2.get_anagrams("isaacson")
    self.assertEqual(r, ['isaacson'])

    _, r = self.anagrams2.get_anagrams("isabel")
    self.assertEqual(r, ['isabel'])

    _, r = self.anagrams2.get_anagrams("isabella")
    self.assertEqual(r, ['isabella'])

    _, r = self.anagrams2.get_anagrams("isadore")
    self.assertEqual(r, ['isadore'])

    _, r = self.anagrams2.get_anagrams("isaiah")
    self.assertEqual(r, ['isaiah'])

    _, r = self.anagrams2.get_anagrams("isfahan")
    self.assertEqual(r, ['isfahan'])

    _, r = self.anagrams2.get_anagrams("ising")
    self.assertEqual(r, ['ising'])

    _, r = self.anagrams2.get_anagrams("isis")
    self.assertEqual(r, ['isis'])

    _, r = self.anagrams2.get_anagrams("islam")
    self.assertEqual(r, ['islam', 'mails', 'simla'])

    _, r = self.anagrams2.get_anagrams("islamabad")
    self.assertEqual(r, ['islamabad'])

    _, r = self.anagrams2.get_anagrams("islamic")
    self.assertEqual(r, ['islamic'])

    _, r = self.anagrams2.get_anagrams("islamization")
    self.assertEqual(r, ['islamization'])

    _, r = self.anagrams2.get_anagrams("islamizations")
    self.assertEqual(r, ['islamizations'])

    _, r = self.anagrams2.get_anagrams("islamize")
    self.assertEqual(r, ['islamize'])

    _, r = self.anagrams2.get_anagrams("islamizes")
    self.assertEqual(r, ['islamizes'])

    _, r = self.anagrams2.get_anagrams("island")
    self.assertEqual(r, ['island', 'landis'])

    _, r = self.anagrams2.get_anagrams("islander")
    self.assertEqual(r, ['islander'])

    _, r = self.anagrams2.get_anagrams("islanders")
    self.assertEqual(r, ['islanders'])

    _, r = self.anagrams2.get_anagrams("islandia")
    self.assertEqual(r, ['islandia'])

    _, r = self.anagrams2.get_anagrams("islands")
    self.assertEqual(r, ['islands'])

    _, r = self.anagrams2.get_anagrams("isle")
    self.assertEqual(r, ['isle', 'lies', 'lise'])

    _, r = self.anagrams2.get_anagrams("isles")
    self.assertEqual(r, ['isles'])

    _, r = self.anagrams2.get_anagrams("islet")
    self.assertEqual(r, ['islet', 'stile', 'tiles'])

    _, r = self.anagrams2.get_anagrams("islets")
    self.assertEqual(r, ['islets', 'stiles'])

    _, r = self.anagrams2.get_anagrams("isolate")
    self.assertEqual(r, ['isolate'])

    _, r = self.anagrams2.get_anagrams("isolated")
    self.assertEqual(r, ['isolated'])

    _, r = self.anagrams2.get_anagrams("isolates")
    self.assertEqual(r, ['isolates'])

    _, r = self.anagrams2.get_anagrams("isolating")
    self.assertEqual(r, ['isolating'])

    _, r = self.anagrams2.get_anagrams("isolation")
    self.assertEqual(r, ['isolation'])

    _, r = self.anagrams2.get_anagrams("isolations")
    self.assertEqual(r, ['isolations'])

    _, r = self.anagrams2.get_anagrams("isolde")
    self.assertEqual(r, ['isolde', 'soiled'])

    _, r = self.anagrams2.get_anagrams("isometric")
    self.assertEqual(r, ['isometric'])

    _, r = self.anagrams2.get_anagrams("isomorphic")
    self.assertEqual(r, ['isomorphic'])

    _, r = self.anagrams2.get_anagrams("isomorphically")
    self.assertEqual(r, ['isomorphically'])

    _, r = self.anagrams2.get_anagrams("isomorphism")
    self.assertEqual(r, ['isomorphism'])

    _, r = self.anagrams2.get_anagrams("isomorphisms")
    self.assertEqual(r, ['isomorphisms'])

    _, r = self.anagrams2.get_anagrams("isotope")
    self.assertEqual(r, ['isotope'])

    _, r = self.anagrams2.get_anagrams("isotopes")
    self.assertEqual(r, ['esposito', 'isotopes'])

    _, r = self.anagrams2.get_anagrams("israel")
    self.assertEqual(r, ['israel', 'serial'])

    _, r = self.anagrams2.get_anagrams("israeli")
    self.assertEqual(r, ['israeli'])

    _, r = self.anagrams2.get_anagrams("israelis")
    self.assertEqual(r, ['israelis'])

    _, r = self.anagrams2.get_anagrams("israelite")
    self.assertEqual(r, ['israelite', 'realities'])

    _, r = self.anagrams2.get_anagrams("israelites")
    self.assertEqual(r, ['israelites'])

    _, r = self.anagrams2.get_anagrams("israelitize")
    self.assertEqual(r, ['israelitize'])

    _, r = self.anagrams2.get_anagrams("israelitizes")
    self.assertEqual(r, ['israelitizes'])

    _, r = self.anagrams2.get_anagrams("issuance")
    self.assertEqual(r, ['issuance'])

    _, r = self.anagrams2.get_anagrams("issue")
    self.assertEqual(r, ['issue', 'susie'])

    _, r = self.anagrams2.get_anagrams("issued")
    self.assertEqual(r, ['disuse', 'issued'])

    _, r = self.anagrams2.get_anagrams("issuer")
    self.assertEqual(r, ['issuer'])

    _, r = self.anagrams2.get_anagrams("issuers")
    self.assertEqual(r, ['issuers'])

    _, r = self.anagrams2.get_anagrams("issues")
    self.assertEqual(r, ['issues'])

    _, r = self.anagrams2.get_anagrams("issuing")
    self.assertEqual(r, ['issuing'])

    _, r = self.anagrams2.get_anagrams("istanbul")
    self.assertEqual(r, ['istanbul'])

    _, r = self.anagrams2.get_anagrams("isthmus")
    self.assertEqual(r, ['isthmus'])

    _, r = self.anagrams2.get_anagrams("istvan")
    self.assertEqual(r, ['istvan'])

    _, r = self.anagrams2.get_anagrams("it")
    self.assertEqual(r, ['it'])

    _, r = self.anagrams2.get_anagrams("italian")
    self.assertEqual(r, ['italian'])

    _, r = self.anagrams2.get_anagrams("italianization")
    self.assertEqual(r, ['italianization'])

    _, r = self.anagrams2.get_anagrams("italianizations")
    self.assertEqual(r, ['italianizations'])

    _, r = self.anagrams2.get_anagrams("italianize")
    self.assertEqual(r, ['italianize'])

    _, r = self.anagrams2.get_anagrams("italianizer")
    self.assertEqual(r, ['italianizer'])

    _, r = self.anagrams2.get_anagrams("italianizers")
    self.assertEqual(r, ['italianizers'])

    _, r = self.anagrams2.get_anagrams("italianizes")
    self.assertEqual(r, ['italianizes'])

    _, r = self.anagrams2.get_anagrams("italians")
    self.assertEqual(r, ['italians'])

    _, r = self.anagrams2.get_anagrams("italic")
    self.assertEqual(r, ['italic'])

    _, r = self.anagrams2.get_anagrams("italicize")
    self.assertEqual(r, ['italicize'])

    _, r = self.anagrams2.get_anagrams("italicized")
    self.assertEqual(r, ['italicized'])

    _, r = self.anagrams2.get_anagrams("italics")
    self.assertEqual(r, ['italics'])

    _, r = self.anagrams2.get_anagrams("italy")
    self.assertEqual(r, ['italy'])

    _, r = self.anagrams2.get_anagrams("itch")
    self.assertEqual(r, ['chit', 'itch'])

    _, r = self.anagrams2.get_anagrams("itches")
    self.assertEqual(r, ['ethics', 'itches'])

    _, r = self.anagrams2.get_anagrams("itching")
    self.assertEqual(r, ['itching'])

    _, r = self.anagrams2.get_anagrams("itel")
    self.assertEqual(r, ['itel', 'tile'])

    _, r = self.anagrams2.get_anagrams("item")
    self.assertEqual(r, ['emit', 'item', 'time'])

    _, r = self.anagrams2.get_anagrams("itemization")
    self.assertEqual(r, ['itemization'])

    _, r = self.anagrams2.get_anagrams("itemizations")
    self.assertEqual(r, ['itemizations', 'semitization'])

    _, r = self.anagrams2.get_anagrams("itemize")
    self.assertEqual(r, ['itemize'])

    _, r = self.anagrams2.get_anagrams("itemized")
    self.assertEqual(r, ['itemized'])

    _, r = self.anagrams2.get_anagrams("itemizes")
    self.assertEqual(r, ['itemizes', 'semitize'])

    _, r = self.anagrams2.get_anagrams("itemizing")
    self.assertEqual(r, ['itemizing'])

    _, r = self.anagrams2.get_anagrams("items")
    self.assertEqual(r, ['emits', 'items', 'smite', 'times'])

    _, r = self.anagrams2.get_anagrams("iterate")
    self.assertEqual(r, ['iterate'])

    _, r = self.anagrams2.get_anagrams("iterated")
    self.assertEqual(r, ['iterated'])

    _, r = self.anagrams2.get_anagrams("iterates")
    self.assertEqual(r, ['iterates', 'treaties', 'treatise'])

    _, r = self.anagrams2.get_anagrams("iterating")
    self.assertEqual(r, ['iterating'])

    _, r = self.anagrams2.get_anagrams("iteration")
    self.assertEqual(r, ['iteration'])

    _, r = self.anagrams2.get_anagrams("iterations")
    self.assertEqual(r, ['iterations'])

    _, r = self.anagrams2.get_anagrams("iterative")
    self.assertEqual(r, ['iterative'])

    _, r = self.anagrams2.get_anagrams("iteratively")
    self.assertEqual(r, ['iteratively'])

    _, r = self.anagrams2.get_anagrams("iterator")
    self.assertEqual(r, ['iterator'])

    _, r = self.anagrams2.get_anagrams("iterators")
    self.assertEqual(r, ['iterators'])

    _, r = self.anagrams2.get_anagrams("ithaca")
    self.assertEqual(r, ['ithaca'])

    _, r = self.anagrams2.get_anagrams("ithacan")
    self.assertEqual(r, ['ithacan'])

    _, r = self.anagrams2.get_anagrams("itineraries")
    self.assertEqual(r, ['itineraries'])

    _, r = self.anagrams2.get_anagrams("itinerary")
    self.assertEqual(r, ['itinerary'])

    _, r = self.anagrams2.get_anagrams("ito")
    self.assertEqual(r, ['ito'])

    _, r = self.anagrams2.get_anagrams("its")
    self.assertEqual(r, ['its', 'sit'])

    _, r = self.anagrams2.get_anagrams("itself")
    self.assertEqual(r, ['itself', 'stifle'])

    _, r = self.anagrams2.get_anagrams("ivan")
    self.assertEqual(r, ['ivan', 'vain'])

    _, r = self.anagrams2.get_anagrams("ivanhoe")
    self.assertEqual(r, ['ivanhoe'])

    _, r = self.anagrams2.get_anagrams("iverson")
    self.assertEqual(r, ['iverson', 'version'])

    _, r = self.anagrams2.get_anagrams("ivies")
    self.assertEqual(r, ['ivies'])

    _, r = self.anagrams2.get_anagrams("ivory")
    self.assertEqual(r, ['ivory'])

    _, r = self.anagrams2.get_anagrams("ivy")
    self.assertEqual(r, ['ivy'])

    _, r = self.anagrams2.get_anagrams("izaak")
    self.assertEqual(r, ['izaak'])

    _, r = self.anagrams2.get_anagrams("izvestia")
    self.assertEqual(r, ['izvestia'])

    _, r = self.anagrams2.get_anagrams("jab")
    self.assertEqual(r, ['jab'])

    _, r = self.anagrams2.get_anagrams("jabbed")
    self.assertEqual(r, ['jabbed'])

    _, r = self.anagrams2.get_anagrams("jabbing")
    self.assertEqual(r, ['jabbing'])

    _, r = self.anagrams2.get_anagrams("jablonsky")
    self.assertEqual(r, ['jablonsky'])

    _, r = self.anagrams2.get_anagrams("jabs")
    self.assertEqual(r, ['jabs'])

    _, r = self.anagrams2.get_anagrams("jack")
    self.assertEqual(r, ['jack'])

    _, r = self.anagrams2.get_anagrams("jackass")
    self.assertEqual(r, ['jackass'])

    _, r = self.anagrams2.get_anagrams("jacket")
    self.assertEqual(r, ['jacket'])

    _, r = self.anagrams2.get_anagrams("jacketed")
    self.assertEqual(r, ['jacketed'])

    _, r = self.anagrams2.get_anagrams("jackets")
    self.assertEqual(r, ['jackets'])

    _, r = self.anagrams2.get_anagrams("jackie")
    self.assertEqual(r, ['jackie'])

    _, r = self.anagrams2.get_anagrams("jacking")
    self.assertEqual(r, ['jacking'])

    _, r = self.anagrams2.get_anagrams("jackknife")
    self.assertEqual(r, ['jackknife'])

    _, r = self.anagrams2.get_anagrams("jackman")
    self.assertEqual(r, ['jackman'])

    _, r = self.anagrams2.get_anagrams("jackpot")
    self.assertEqual(r, ['jackpot'])

    _, r = self.anagrams2.get_anagrams("jackson")
    self.assertEqual(r, ['jackson'])

    _, r = self.anagrams2.get_anagrams("jacksonian")
    self.assertEqual(r, ['jacksonian'])

    _, r = self.anagrams2.get_anagrams("jacksons")
    self.assertEqual(r, ['jacksons'])

    _, r = self.anagrams2.get_anagrams("jacksonville")
    self.assertEqual(r, ['jacksonville'])

    _, r = self.anagrams2.get_anagrams("jacky")
    self.assertEqual(r, ['jacky'])

    _, r = self.anagrams2.get_anagrams("jacob")
    self.assertEqual(r, ['jacob'])

    _, r = self.anagrams2.get_anagrams("jacobean")
    self.assertEqual(r, ['jacobean'])

    _, r = self.anagrams2.get_anagrams("jacobi")
    self.assertEqual(r, ['jacobi'])

    _, r = self.anagrams2.get_anagrams("jacobian")
    self.assertEqual(r, ['jacobian'])

    _, r = self.anagrams2.get_anagrams("jacobinize")
    self.assertEqual(r, ['jacobinize'])

    _, r = self.anagrams2.get_anagrams("jacobite")
    self.assertEqual(r, ['jacobite'])

    _, r = self.anagrams2.get_anagrams("jacobs")
    self.assertEqual(r, ['jacobs'])

    _, r = self.anagrams2.get_anagrams("jacobsen")
    self.assertEqual(r, ['jacobsen'])

    _, r = self.anagrams2.get_anagrams("jacobson")
    self.assertEqual(r, ['jacobson'])

    _, r = self.anagrams2.get_anagrams("jacobus")
    self.assertEqual(r, ['jacobus'])

    _, r = self.anagrams2.get_anagrams("jacoby")
    self.assertEqual(r, ['jacoby'])

    _, r = self.anagrams2.get_anagrams("jacqueline")
    self.assertEqual(r, ['jacqueline'])

    _, r = self.anagrams2.get_anagrams("jacques")
    self.assertEqual(r, ['jacques'])

    _, r = self.anagrams2.get_anagrams("jade")
    self.assertEqual(r, ['jade'])

    _, r = self.anagrams2.get_anagrams("jaded")
    self.assertEqual(r, ['jaded'])

    _, r = self.anagrams2.get_anagrams("jaeger")
    self.assertEqual(r, ['jaeger'])

    _, r = self.anagrams2.get_anagrams("jaguar")
    self.assertEqual(r, ['jaguar'])

    _, r = self.anagrams2.get_anagrams("jail")
    self.assertEqual(r, ['jail'])

    _, r = self.anagrams2.get_anagrams("jailed")
    self.assertEqual(r, ['jailed'])

    _, r = self.anagrams2.get_anagrams("jailer")
    self.assertEqual(r, ['jailer'])

    _, r = self.anagrams2.get_anagrams("jailers")
    self.assertEqual(r, ['jailers'])

    _, r = self.anagrams2.get_anagrams("jailing")
    self.assertEqual(r, ['jailing'])

    _, r = self.anagrams2.get_anagrams("jails")
    self.assertEqual(r, ['jails'])

    _, r = self.anagrams2.get_anagrams("jaime")
    self.assertEqual(r, ['jaime'])

    _, r = self.anagrams2.get_anagrams("jakarta")
    self.assertEqual(r, ['jakarta'])

    _, r = self.anagrams2.get_anagrams("jake")
    self.assertEqual(r, ['jake'])

    _, r = self.anagrams2.get_anagrams("jakes")
    self.assertEqual(r, ['jakes'])

    _, r = self.anagrams2.get_anagrams("jam")
    self.assertEqual(r, ['jam'])

    _, r = self.anagrams2.get_anagrams("jamaica")
    self.assertEqual(r, ['jamaica'])

    _, r = self.anagrams2.get_anagrams("jamaican")
    self.assertEqual(r, ['jamaican'])

    _, r = self.anagrams2.get_anagrams("james")
    self.assertEqual(r, ['james'])

    _, r = self.anagrams2.get_anagrams("jameson")
    self.assertEqual(r, ['jameson'])

    _, r = self.anagrams2.get_anagrams("jamestown")
    self.assertEqual(r, ['jamestown'])

    _, r = self.anagrams2.get_anagrams("jammed")
    self.assertEqual(r, ['jammed'])

    _, r = self.anagrams2.get_anagrams("jamming")
    self.assertEqual(r, ['jamming'])

    _, r = self.anagrams2.get_anagrams("jams")
    self.assertEqual(r, ['jams'])

    _, r = self.anagrams2.get_anagrams("jane")
    self.assertEqual(r, ['jane', 'jean'])

    _, r = self.anagrams2.get_anagrams("janeiro")
    self.assertEqual(r, ['janeiro'])

    _, r = self.anagrams2.get_anagrams("janesville")
    self.assertEqual(r, ['janesville'])

    _, r = self.anagrams2.get_anagrams("janet")
    self.assertEqual(r, ['janet'])

    _, r = self.anagrams2.get_anagrams("janice")
    self.assertEqual(r, ['janice'])

    _, r = self.anagrams2.get_anagrams("janis")
    self.assertEqual(r, ['janis'])

    _, r = self.anagrams2.get_anagrams("janitor")
    self.assertEqual(r, ['janitor'])

    _, r = self.anagrams2.get_anagrams("janitors")
    self.assertEqual(r, ['janitors'])

    _, r = self.anagrams2.get_anagrams("janos")
    self.assertEqual(r, ['janos', 'jason', 'jonas'])

    _, r = self.anagrams2.get_anagrams("jansen")
    self.assertEqual(r, ['jansen'])

    _, r = self.anagrams2.get_anagrams("jansenist")
    self.assertEqual(r, ['jansenist'])

    _, r = self.anagrams2.get_anagrams("januaries")
    self.assertEqual(r, ['januaries'])

    _, r = self.anagrams2.get_anagrams("january")
    self.assertEqual(r, ['january'])

    _, r = self.anagrams2.get_anagrams("janus")
    self.assertEqual(r, ['janus'])

    _, r = self.anagrams2.get_anagrams("japan")
    self.assertEqual(r, ['japan'])

    _, r = self.anagrams2.get_anagrams("japanese")
    self.assertEqual(r, ['japanese'])

    _, r = self.anagrams2.get_anagrams("japanization")
    self.assertEqual(r, ['japanization'])

    _, r = self.anagrams2.get_anagrams("japanizations")
    self.assertEqual(r, ['japanizations'])

    _, r = self.anagrams2.get_anagrams("japanize")
    self.assertEqual(r, ['japanize'])

    _, r = self.anagrams2.get_anagrams("japanized")
    self.assertEqual(r, ['japanized'])

    _, r = self.anagrams2.get_anagrams("japanizes")
    self.assertEqual(r, ['japanizes'])

    _, r = self.anagrams2.get_anagrams("japanizing")
    self.assertEqual(r, ['japanizing'])

    _, r = self.anagrams2.get_anagrams("jar")
    self.assertEqual(r, ['jar'])

    _, r = self.anagrams2.get_anagrams("jargon")
    self.assertEqual(r, ['jargon'])

    _, r = self.anagrams2.get_anagrams("jarred")
    self.assertEqual(r, ['jarred'])

    _, r = self.anagrams2.get_anagrams("jarring")
    self.assertEqual(r, ['jarring'])

    _, r = self.anagrams2.get_anagrams("jarringly")
    self.assertEqual(r, ['jarringly'])

    _, r = self.anagrams2.get_anagrams("jars")
    self.assertEqual(r, ['jars'])

    _, r = self.anagrams2.get_anagrams("jarvin")
    self.assertEqual(r, ['jarvin'])

    _, r = self.anagrams2.get_anagrams("jason")
    self.assertEqual(r, ['janos', 'jason', 'jonas'])

    _, r = self.anagrams2.get_anagrams("jastrow")
    self.assertEqual(r, ['jastrow'])

    _, r = self.anagrams2.get_anagrams("jaundice")
    self.assertEqual(r, ['jaundice'])

    _, r = self.anagrams2.get_anagrams("jaunt")
    self.assertEqual(r, ['jaunt', 'junta'])

    _, r = self.anagrams2.get_anagrams("jauntiness")
    self.assertEqual(r, ['jauntiness'])

    _, r = self.anagrams2.get_anagrams("jaunts")
    self.assertEqual(r, ['jaunts'])

    _, r = self.anagrams2.get_anagrams("jaunty")
    self.assertEqual(r, ['jaunty'])

    _, r = self.anagrams2.get_anagrams("java")
    self.assertEqual(r, ['java'])

    _, r = self.anagrams2.get_anagrams("javanese")
    self.assertEqual(r, ['javanese'])

    _, r = self.anagrams2.get_anagrams("javelin")
    self.assertEqual(r, ['javelin'])

    _, r = self.anagrams2.get_anagrams("javelins")
    self.assertEqual(r, ['javelins'])

    _, r = self.anagrams2.get_anagrams("jaw")
    self.assertEqual(r, ['jaw'])

    _, r = self.anagrams2.get_anagrams("jawbone")
    self.assertEqual(r, ['jawbone'])

    _, r = self.anagrams2.get_anagrams("jaws")
    self.assertEqual(r, ['jaws'])

    _, r = self.anagrams2.get_anagrams("jay")
    self.assertEqual(r, ['jay'])

    _, r = self.anagrams2.get_anagrams("jaycee")
    self.assertEqual(r, ['jaycee'])

    _, r = self.anagrams2.get_anagrams("jaycees")
    self.assertEqual(r, ['jaycees'])

    _, r = self.anagrams2.get_anagrams("jazz")
    self.assertEqual(r, ['jazz'])

    _, r = self.anagrams2.get_anagrams("jazzy")
    self.assertEqual(r, ['jazzy'])

    _, r = self.anagrams2.get_anagrams("jealous")
    self.assertEqual(r, ['jealous'])

    _, r = self.anagrams2.get_anagrams("jealousies")
    self.assertEqual(r, ['jealousies'])

    _, r = self.anagrams2.get_anagrams("jealously")
    self.assertEqual(r, ['jealously'])

    _, r = self.anagrams2.get_anagrams("jealousy")
    self.assertEqual(r, ['jealousy'])

    _, r = self.anagrams2.get_anagrams("jean")
    self.assertEqual(r, ['jane', 'jean'])

    _, r = self.anagrams2.get_anagrams("jeanne")
    self.assertEqual(r, ['jeanne'])

    _, r = self.anagrams2.get_anagrams("jeannie")
    self.assertEqual(r, ['jeannie'])

    _, r = self.anagrams2.get_anagrams("jeans")
    self.assertEqual(r, ['jeans'])

    _, r = self.anagrams2.get_anagrams("jed")
    self.assertEqual(r, ['jed'])

    _, r = self.anagrams2.get_anagrams("jeep")
    self.assertEqual(r, ['jeep'])

    _, r = self.anagrams2.get_anagrams("jeeps")
    self.assertEqual(r, ['jeeps'])

    _, r = self.anagrams2.get_anagrams("jeer")
    self.assertEqual(r, ['jeer'])

    _, r = self.anagrams2.get_anagrams("jeers")
    self.assertEqual(r, ['jeers', 'jeres'])

    _, r = self.anagrams2.get_anagrams("jeff")
    self.assertEqual(r, ['jeff'])

    _, r = self.anagrams2.get_anagrams("jefferson")
    self.assertEqual(r, ['jefferson'])

    _, r = self.anagrams2.get_anagrams("jeffersonian")
    self.assertEqual(r, ['jeffersonian'])

    _, r = self.anagrams2.get_anagrams("jeffersonians")
    self.assertEqual(r, ['jeffersonians'])

    _, r = self.anagrams2.get_anagrams("jeffrey")
    self.assertEqual(r, ['jeffrey'])

    _, r = self.anagrams2.get_anagrams("jehovah")
    self.assertEqual(r, ['jehovah'])

    _, r = self.anagrams2.get_anagrams("jellies")
    self.assertEqual(r, ['jellies'])

    _, r = self.anagrams2.get_anagrams("jello")
    self.assertEqual(r, ['jello'])

    _, r = self.anagrams2.get_anagrams("jelly")
    self.assertEqual(r, ['jelly'])

    _, r = self.anagrams2.get_anagrams("jellyfish")
    self.assertEqual(r, ['jellyfish'])

    _, r = self.anagrams2.get_anagrams("jenkins")
    self.assertEqual(r, ['jenkins'])

    _, r = self.anagrams2.get_anagrams("jennie")
    self.assertEqual(r, ['jennie'])

    _, r = self.anagrams2.get_anagrams("jennifer")
    self.assertEqual(r, ['jennifer'])

    _, r = self.anagrams2.get_anagrams("jennings")
    self.assertEqual(r, ['jennings'])

    _, r = self.anagrams2.get_anagrams("jenny")
    self.assertEqual(r, ['jenny'])

    _, r = self.anagrams2.get_anagrams("jensen")
    self.assertEqual(r, ['jensen'])

    _, r = self.anagrams2.get_anagrams("jeopardize")
    self.assertEqual(r, ['jeopardize'])

    _, r = self.anagrams2.get_anagrams("jeopardized")
    self.assertEqual(r, ['jeopardized'])

    _, r = self.anagrams2.get_anagrams("jeopardizes")
    self.assertEqual(r, ['jeopardizes'])

    _, r = self.anagrams2.get_anagrams("jeopardizing")
    self.assertEqual(r, ['jeopardizing'])

    _, r = self.anagrams2.get_anagrams("jeopardy")
    self.assertEqual(r, ['jeopardy'])

    _, r = self.anagrams2.get_anagrams("jeremiah")
    self.assertEqual(r, ['jeremiah'])

    _, r = self.anagrams2.get_anagrams("jeremy")
    self.assertEqual(r, ['jeremy'])

    _, r = self.anagrams2.get_anagrams("jeres")
    self.assertEqual(r, ['jeers', 'jeres'])

    _, r = self.anagrams2.get_anagrams("jericho")
    self.assertEqual(r, ['jericho'])

    _, r = self.anagrams2.get_anagrams("jerk")
    self.assertEqual(r, ['jerk'])

    _, r = self.anagrams2.get_anagrams("jerked")
    self.assertEqual(r, ['jerked'])

    _, r = self.anagrams2.get_anagrams("jerkiness")
    self.assertEqual(r, ['jerkiness'])

    _, r = self.anagrams2.get_anagrams("jerking")
    self.assertEqual(r, ['jerking'])

    _, r = self.anagrams2.get_anagrams("jerkings")
    self.assertEqual(r, ['jerkings'])

    _, r = self.anagrams2.get_anagrams("jerks")
    self.assertEqual(r, ['jerks'])

    _, r = self.anagrams2.get_anagrams("jerky")
    self.assertEqual(r, ['jerky'])

    _, r = self.anagrams2.get_anagrams("jeroboam")
    self.assertEqual(r, ['jeroboam'])

    _, r = self.anagrams2.get_anagrams("jerome")
    self.assertEqual(r, ['jerome'])

    _, r = self.anagrams2.get_anagrams("jerry")
    self.assertEqual(r, ['jerry'])

    _, r = self.anagrams2.get_anagrams("jersey")
    self.assertEqual(r, ['jersey'])

    _, r = self.anagrams2.get_anagrams("jerseys")
    self.assertEqual(r, ['jerseys'])

    _, r = self.anagrams2.get_anagrams("jerusalem")
    self.assertEqual(r, ['jerusalem'])

    _, r = self.anagrams2.get_anagrams("jesse")
    self.assertEqual(r, ['jesse'])

    _, r = self.anagrams2.get_anagrams("jessica")
    self.assertEqual(r, ['jessica'])

    _, r = self.anagrams2.get_anagrams("jessie")
    self.assertEqual(r, ['jessie'])

    _, r = self.anagrams2.get_anagrams("jessy")
    self.assertEqual(r, ['jessy'])

    _, r = self.anagrams2.get_anagrams("jest")
    self.assertEqual(r, ['jest', 'jets'])

    _, r = self.anagrams2.get_anagrams("jested")
    self.assertEqual(r, ['jested'])

    _, r = self.anagrams2.get_anagrams("jester")
    self.assertEqual(r, ['jester'])

    _, r = self.anagrams2.get_anagrams("jesting")
    self.assertEqual(r, ['jesting'])

    _, r = self.anagrams2.get_anagrams("jests")
    self.assertEqual(r, ['jests'])

    _, r = self.anagrams2.get_anagrams("jesuit")
    self.assertEqual(r, ['jesuit'])

    _, r = self.anagrams2.get_anagrams("jesuitism")
    self.assertEqual(r, ['jesuitism'])

    _, r = self.anagrams2.get_anagrams("jesuitize")
    self.assertEqual(r, ['jesuitize'])

    _, r = self.anagrams2.get_anagrams("jesuitized")
    self.assertEqual(r, ['jesuitized'])

    _, r = self.anagrams2.get_anagrams("jesuitizes")
    self.assertEqual(r, ['jesuitizes'])

    _, r = self.anagrams2.get_anagrams("jesuitizing")
    self.assertEqual(r, ['jesuitizing'])

    _, r = self.anagrams2.get_anagrams("jesuits")
    self.assertEqual(r, ['jesuits'])

    _, r = self.anagrams2.get_anagrams("jesus")
    self.assertEqual(r, ['jesus'])

    _, r = self.anagrams2.get_anagrams("jet")
    self.assertEqual(r, ['jet'])

    _, r = self.anagrams2.get_anagrams("jetliner")
    self.assertEqual(r, ['jetliner'])

    _, r = self.anagrams2.get_anagrams("jets")
    self.assertEqual(r, ['jest', 'jets'])

    _, r = self.anagrams2.get_anagrams("jetted")
    self.assertEqual(r, ['jetted'])

    _, r = self.anagrams2.get_anagrams("jetting")
    self.assertEqual(r, ['jetting'])

    _, r = self.anagrams2.get_anagrams("jew")
    self.assertEqual(r, ['jew'])

    _, r = self.anagrams2.get_anagrams("jewel")
    self.assertEqual(r, ['jewel'])

    _, r = self.anagrams2.get_anagrams("jeweled")
    self.assertEqual(r, ['jeweled'])

    _, r = self.anagrams2.get_anagrams("jeweler")
    self.assertEqual(r, ['jeweler'])

    _, r = self.anagrams2.get_anagrams("jewell")
    self.assertEqual(r, ['jewell'])

    _, r = self.anagrams2.get_anagrams("jewelled")
    self.assertEqual(r, ['jewelled'])

    _, r = self.anagrams2.get_anagrams("jewelries")
    self.assertEqual(r, ['jewelries'])

    _, r = self.anagrams2.get_anagrams("jewelry")
    self.assertEqual(r, ['jewelry'])

    _, r = self.anagrams2.get_anagrams("jewels")
    self.assertEqual(r, ['jewels'])

    _, r = self.anagrams2.get_anagrams("jewett")
    self.assertEqual(r, ['jewett'])

    _, r = self.anagrams2.get_anagrams("jewish")
    self.assertEqual(r, ['jewish'])

    _, r = self.anagrams2.get_anagrams("jewishness")
    self.assertEqual(r, ['jewishness'])

    _, r = self.anagrams2.get_anagrams("jews")
    self.assertEqual(r, ['jews'])

    _, r = self.anagrams2.get_anagrams("jiffy")
    self.assertEqual(r, ['jiffy'])

    _, r = self.anagrams2.get_anagrams("jig")
    self.assertEqual(r, ['jig'])

    _, r = self.anagrams2.get_anagrams("jigs")
    self.assertEqual(r, ['jigs'])

    _, r = self.anagrams2.get_anagrams("jigsaw")
    self.assertEqual(r, ['jigsaw'])

    _, r = self.anagrams2.get_anagrams("jill")
    self.assertEqual(r, ['jill'])

    _, r = self.anagrams2.get_anagrams("jim")
    self.assertEqual(r, ['jim'])

    _, r = self.anagrams2.get_anagrams("jimenez")
    self.assertEqual(r, ['jimenez'])

    _, r = self.anagrams2.get_anagrams("jimmie")
    self.assertEqual(r, ['jimmie'])

    _, r = self.anagrams2.get_anagrams("jingle")
    self.assertEqual(r, ['jingle'])

    _, r = self.anagrams2.get_anagrams("jingled")
    self.assertEqual(r, ['jingled'])

    _, r = self.anagrams2.get_anagrams("jingling")
    self.assertEqual(r, ['jingling'])

    _, r = self.anagrams2.get_anagrams("jinny")
    self.assertEqual(r, ['jinny'])

    _, r = self.anagrams2.get_anagrams("jitter")
    self.assertEqual(r, ['jitter'])

    _, r = self.anagrams2.get_anagrams("jitterbug")
    self.assertEqual(r, ['jitterbug'])

    _, r = self.anagrams2.get_anagrams("jittery")
    self.assertEqual(r, ['jittery'])

    _, r = self.anagrams2.get_anagrams("jo")
    self.assertEqual(r, ['jo'])

    _, r = self.anagrams2.get_anagrams("joan")
    self.assertEqual(r, ['joan'])

    _, r = self.anagrams2.get_anagrams("joanna")
    self.assertEqual(r, ['joanna'])

    _, r = self.anagrams2.get_anagrams("joanne")
    self.assertEqual(r, ['joanne'])

    _, r = self.anagrams2.get_anagrams("joaquin")
    self.assertEqual(r, ['joaquin'])

    _, r = self.anagrams2.get_anagrams("job")
    self.assertEqual(r, ['job'])

    _, r = self.anagrams2.get_anagrams("jobrel")
    self.assertEqual(r, ['jobrel'])

    _, r = self.anagrams2.get_anagrams("jobs")
    self.assertEqual(r, ['jobs'])

    _, r = self.anagrams2.get_anagrams("jockey")
    self.assertEqual(r, ['jockey'])

    _, r = self.anagrams2.get_anagrams("jockstrap")
    self.assertEqual(r, ['jockstrap'])

    _, r = self.anagrams2.get_anagrams("jocund")
    self.assertEqual(r, ['jocund'])

    _, r = self.anagrams2.get_anagrams("jody")
    self.assertEqual(r, ['jody'])

    _, r = self.anagrams2.get_anagrams("joe")
    self.assertEqual(r, ['joe'])

    _, r = self.anagrams2.get_anagrams("joel")
    self.assertEqual(r, ['joel'])

    _, r = self.anagrams2.get_anagrams("joes")
    self.assertEqual(r, ['joes', 'jose'])

    _, r = self.anagrams2.get_anagrams("jog")
    self.assertEqual(r, ['jog'])

    _, r = self.anagrams2.get_anagrams("jogging")
    self.assertEqual(r, ['jogging'])

    _, r = self.anagrams2.get_anagrams("jogs")
    self.assertEqual(r, ['jogs'])

    _, r = self.anagrams2.get_anagrams("johann")
    self.assertEqual(r, ['johann'])

    _, r = self.anagrams2.get_anagrams("johanna")
    self.assertEqual(r, ['johanna'])

    _, r = self.anagrams2.get_anagrams("johannes")
    self.assertEqual(r, ['johannes', 'johansen'])

    _, r = self.anagrams2.get_anagrams("johannesburg")
    self.assertEqual(r, ['johannesburg'])

    _, r = self.anagrams2.get_anagrams("johansen")
    self.assertEqual(r, ['johannes', 'johansen'])

    _, r = self.anagrams2.get_anagrams("johanson")
    self.assertEqual(r, ['johanson'])

    _, r = self.anagrams2.get_anagrams("john")
    self.assertEqual(r, ['john'])

    _, r = self.anagrams2.get_anagrams("johnnie")
    self.assertEqual(r, ['johnnie'])

    _, r = self.anagrams2.get_anagrams("johnny")
    self.assertEqual(r, ['johnny'])

    _, r = self.anagrams2.get_anagrams("johns")
    self.assertEqual(r, ['johns'])

    _, r = self.anagrams2.get_anagrams("johnsen")
    self.assertEqual(r, ['johnsen'])

    _, r = self.anagrams2.get_anagrams("johnson")
    self.assertEqual(r, ['johnson'])

    _, r = self.anagrams2.get_anagrams("johnston")
    self.assertEqual(r, ['johnston'])

    _, r = self.anagrams2.get_anagrams("johnstown")
    self.assertEqual(r, ['johnstown'])

    _, r = self.anagrams2.get_anagrams("join")
    self.assertEqual(r, ['join'])

    _, r = self.anagrams2.get_anagrams("joined")
    self.assertEqual(r, ['joined'])

    _, r = self.anagrams2.get_anagrams("joiner")
    self.assertEqual(r, ['joiner', 'rejoin'])

    _, r = self.anagrams2.get_anagrams("joiners")
    self.assertEqual(r, ['joiners', 'rejoins'])

    _, r = self.anagrams2.get_anagrams("joining")
    self.assertEqual(r, ['joining'])

    _, r = self.anagrams2.get_anagrams("joins")
    self.assertEqual(r, ['joins'])

    _, r = self.anagrams2.get_anagrams("joint")
    self.assertEqual(r, ['joint'])

    _, r = self.anagrams2.get_anagrams("jointly")
    self.assertEqual(r, ['jointly'])

    _, r = self.anagrams2.get_anagrams("joints")
    self.assertEqual(r, ['joints'])

    _, r = self.anagrams2.get_anagrams("joke")
    self.assertEqual(r, ['joke'])

    _, r = self.anagrams2.get_anagrams("joked")
    self.assertEqual(r, ['joked'])

    _, r = self.anagrams2.get_anagrams("joker")
    self.assertEqual(r, ['joker'])

    _, r = self.anagrams2.get_anagrams("jokers")
    self.assertEqual(r, ['jokers'])

    _, r = self.anagrams2.get_anagrams("jokes")
    self.assertEqual(r, ['jokes'])

    _, r = self.anagrams2.get_anagrams("joking")
    self.assertEqual(r, ['joking'])

    _, r = self.anagrams2.get_anagrams("jokingly")
    self.assertEqual(r, ['jokingly'])

    _, r = self.anagrams2.get_anagrams("joliet")
    self.assertEqual(r, ['joliet'])

    _, r = self.anagrams2.get_anagrams("jolla")
    self.assertEqual(r, ['jolla'])

    _, r = self.anagrams2.get_anagrams("jolly")
    self.assertEqual(r, ['jolly'])

    _, r = self.anagrams2.get_anagrams("jolt")
    self.assertEqual(r, ['jolt'])

    _, r = self.anagrams2.get_anagrams("jolted")
    self.assertEqual(r, ['jolted'])

    _, r = self.anagrams2.get_anagrams("jolting")
    self.assertEqual(r, ['jolting'])

    _, r = self.anagrams2.get_anagrams("jolts")
    self.assertEqual(r, ['jolts'])

    _, r = self.anagrams2.get_anagrams("jon")
    self.assertEqual(r, ['jon'])

    _, r = self.anagrams2.get_anagrams("jonas")
    self.assertEqual(r, ['janos', 'jason', 'jonas'])

    _, r = self.anagrams2.get_anagrams("jonathan")
    self.assertEqual(r, ['jonathan'])

    _, r = self.anagrams2.get_anagrams("jonathanization")
    self.assertEqual(r, ['jonathanization'])

    _, r = self.anagrams2.get_anagrams("jonathanizations")
    self.assertEqual(r, ['jonathanizations'])

    _, r = self.anagrams2.get_anagrams("jones")
    self.assertEqual(r, ['jones'])

    _, r = self.anagrams2.get_anagrams("joneses")
    self.assertEqual(r, ['joneses'])

    _, r = self.anagrams2.get_anagrams("jonquil")
    self.assertEqual(r, ['jonquil'])

    _, r = self.anagrams2.get_anagrams("joplin")
    self.assertEqual(r, ['joplin'])

    _, r = self.anagrams2.get_anagrams("jordan")
    self.assertEqual(r, ['jordan'])

    _, r = self.anagrams2.get_anagrams("jordanian")
    self.assertEqual(r, ['jordanian'])

    _, r = self.anagrams2.get_anagrams("jorge")
    self.assertEqual(r, ['jorge'])

    _, r = self.anagrams2.get_anagrams("jorgensen")
    self.assertEqual(r, ['jorgensen'])

    _, r = self.anagrams2.get_anagrams("jorgenson")
    self.assertEqual(r, ['jorgenson'])

    _, r = self.anagrams2.get_anagrams("jose")
    self.assertEqual(r, ['joes', 'jose'])

    _, r = self.anagrams2.get_anagrams("josef")
    self.assertEqual(r, ['josef'])

    _, r = self.anagrams2.get_anagrams("joseph")
    self.assertEqual(r, ['joseph'])

    _, r = self.anagrams2.get_anagrams("josephine")
    self.assertEqual(r, ['josephine'])

    _, r = self.anagrams2.get_anagrams("josephson")
    self.assertEqual(r, ['josephson'])

    _, r = self.anagrams2.get_anagrams("josephus")
    self.assertEqual(r, ['josephus'])

    _, r = self.anagrams2.get_anagrams("joshua")
    self.assertEqual(r, ['joshua'])

    _, r = self.anagrams2.get_anagrams("josiah")
    self.assertEqual(r, ['josiah'])

    _, r = self.anagrams2.get_anagrams("jostle")
    self.assertEqual(r, ['jostle'])

    _, r = self.anagrams2.get_anagrams("jostled")
    self.assertEqual(r, ['jostled'])

    _, r = self.anagrams2.get_anagrams("jostles")
    self.assertEqual(r, ['jostles'])

    _, r = self.anagrams2.get_anagrams("jostling")
    self.assertEqual(r, ['jostling'])

    _, r = self.anagrams2.get_anagrams("jot")
    self.assertEqual(r, ['jot'])

    _, r = self.anagrams2.get_anagrams("jots")
    self.assertEqual(r, ['jots'])

    _, r = self.anagrams2.get_anagrams("jotted")
    self.assertEqual(r, ['jotted'])

    _, r = self.anagrams2.get_anagrams("jotting")
    self.assertEqual(r, ['jotting'])

    _, r = self.anagrams2.get_anagrams("joule")
    self.assertEqual(r, ['joule'])

    _, r = self.anagrams2.get_anagrams("journal")
    self.assertEqual(r, ['journal'])

    _, r = self.anagrams2.get_anagrams("journalism")
    self.assertEqual(r, ['journalism'])

    _, r = self.anagrams2.get_anagrams("journalist")
    self.assertEqual(r, ['journalist'])

    _, r = self.anagrams2.get_anagrams("journalists")
    self.assertEqual(r, ['journalists'])

    _, r = self.anagrams2.get_anagrams("journalize")
    self.assertEqual(r, ['journalize'])

    _, r = self.anagrams2.get_anagrams("journalized")
    self.assertEqual(r, ['journalized'])

    _, r = self.anagrams2.get_anagrams("journalizes")
    self.assertEqual(r, ['journalizes'])

    _, r = self.anagrams2.get_anagrams("journalizing")
    self.assertEqual(r, ['journalizing'])

    _, r = self.anagrams2.get_anagrams("journals")
    self.assertEqual(r, ['journals'])

    _, r = self.anagrams2.get_anagrams("journey")
    self.assertEqual(r, ['journey'])

    _, r = self.anagrams2.get_anagrams("journeyed")
    self.assertEqual(r, ['journeyed'])

    _, r = self.anagrams2.get_anagrams("journeying")
    self.assertEqual(r, ['journeying'])

    _, r = self.anagrams2.get_anagrams("journeyings")
    self.assertEqual(r, ['journeyings'])

    _, r = self.anagrams2.get_anagrams("journeyman")
    self.assertEqual(r, ['journeyman'])

    _, r = self.anagrams2.get_anagrams("journeymen")
    self.assertEqual(r, ['journeymen'])

    _, r = self.anagrams2.get_anagrams("journeys")
    self.assertEqual(r, ['journeys'])

    _, r = self.anagrams2.get_anagrams("joust")
    self.assertEqual(r, ['joust'])

    _, r = self.anagrams2.get_anagrams("jousted")
    self.assertEqual(r, ['jousted'])

    _, r = self.anagrams2.get_anagrams("jousting")
    self.assertEqual(r, ['jousting'])

    _, r = self.anagrams2.get_anagrams("jousts")
    self.assertEqual(r, ['jousts'])

    _, r = self.anagrams2.get_anagrams("jovanovich")
    self.assertEqual(r, ['jovanovich'])

    _, r = self.anagrams2.get_anagrams("jove")
    self.assertEqual(r, ['jove'])

    _, r = self.anagrams2.get_anagrams("jovial")
    self.assertEqual(r, ['jovial'])

    _, r = self.anagrams2.get_anagrams("jovian")
    self.assertEqual(r, ['jovian'])

    _, r = self.anagrams2.get_anagrams("joy")
    self.assertEqual(r, ['joy'])

    _, r = self.anagrams2.get_anagrams("joyce")
    self.assertEqual(r, ['joyce'])

    _, r = self.anagrams2.get_anagrams("joyful")
    self.assertEqual(r, ['joyful'])

    _, r = self.anagrams2.get_anagrams("joyfully")
    self.assertEqual(r, ['joyfully'])

    _, r = self.anagrams2.get_anagrams("joyous")
    self.assertEqual(r, ['joyous'])

    _, r = self.anagrams2.get_anagrams("joyously")
    self.assertEqual(r, ['joyously'])

    _, r = self.anagrams2.get_anagrams("joyousness")
    self.assertEqual(r, ['joyousness'])

    _, r = self.anagrams2.get_anagrams("joyride")
    self.assertEqual(r, ['joyride'])

    _, r = self.anagrams2.get_anagrams("joys")
    self.assertEqual(r, ['joys'])

    _, r = self.anagrams2.get_anagrams("joystick")
    self.assertEqual(r, ['joystick'])

    _, r = self.anagrams2.get_anagrams("juan")
    self.assertEqual(r, ['juan'])

    _, r = self.anagrams2.get_anagrams("juanita")
    self.assertEqual(r, ['juanita', 'tijuana'])

    _, r = self.anagrams2.get_anagrams("jubal")
    self.assertEqual(r, ['jubal'])

    _, r = self.anagrams2.get_anagrams("jubilee")
    self.assertEqual(r, ['jubilee'])

    _, r = self.anagrams2.get_anagrams("judaica")
    self.assertEqual(r, ['judaica'])

    _, r = self.anagrams2.get_anagrams("judaism")
    self.assertEqual(r, ['judaism'])

    _, r = self.anagrams2.get_anagrams("judas")
    self.assertEqual(r, ['judas'])

    _, r = self.anagrams2.get_anagrams("judd")
    self.assertEqual(r, ['judd'])

    _, r = self.anagrams2.get_anagrams("judder")
    self.assertEqual(r, ['judder'])

    _, r = self.anagrams2.get_anagrams("juddered")
    self.assertEqual(r, ['juddered'])

    _, r = self.anagrams2.get_anagrams("juddering")
    self.assertEqual(r, ['juddering'])

    _, r = self.anagrams2.get_anagrams("judders")
    self.assertEqual(r, ['judders'])

    _, r = self.anagrams2.get_anagrams("jude")
    self.assertEqual(r, ['jude'])

    _, r = self.anagrams2.get_anagrams("judea")
    self.assertEqual(r, ['judea'])

    _, r = self.anagrams2.get_anagrams("judge")
    self.assertEqual(r, ['judge'])

    _, r = self.anagrams2.get_anagrams("judged")
    self.assertEqual(r, ['judged'])

    _, r = self.anagrams2.get_anagrams("judges")
    self.assertEqual(r, ['judges'])

    _, r = self.anagrams2.get_anagrams("judging")
    self.assertEqual(r, ['judging'])

    _, r = self.anagrams2.get_anagrams("judgment")
    self.assertEqual(r, ['judgment'])

    _, r = self.anagrams2.get_anagrams("judgments")
    self.assertEqual(r, ['judgments'])

    _, r = self.anagrams2.get_anagrams("judicial")
    self.assertEqual(r, ['judicial'])

    _, r = self.anagrams2.get_anagrams("judiciary")
    self.assertEqual(r, ['judiciary'])

    _, r = self.anagrams2.get_anagrams("judicious")
    self.assertEqual(r, ['judicious'])

    _, r = self.anagrams2.get_anagrams("judiciously")
    self.assertEqual(r, ['judiciously'])

    _, r = self.anagrams2.get_anagrams("judith")
    self.assertEqual(r, ['judith'])

    _, r = self.anagrams2.get_anagrams("judo")
    self.assertEqual(r, ['judo'])

    _, r = self.anagrams2.get_anagrams("judson")
    self.assertEqual(r, ['judson'])

    _, r = self.anagrams2.get_anagrams("judy")
    self.assertEqual(r, ['judy'])

    _, r = self.anagrams2.get_anagrams("jug")
    self.assertEqual(r, ['jug'])

    _, r = self.anagrams2.get_anagrams("juggle")
    self.assertEqual(r, ['juggle'])

    _, r = self.anagrams2.get_anagrams("juggler")
    self.assertEqual(r, ['juggler'])

    _, r = self.anagrams2.get_anagrams("jugglers")
    self.assertEqual(r, ['jugglers'])

    _, r = self.anagrams2.get_anagrams("juggles")
    self.assertEqual(r, ['juggles'])

    _, r = self.anagrams2.get_anagrams("juggling")
    self.assertEqual(r, ['juggling'])

    _, r = self.anagrams2.get_anagrams("jugoslavia")
    self.assertEqual(r, ['jugoslavia'])

    _, r = self.anagrams2.get_anagrams("jugs")
    self.assertEqual(r, ['jugs'])

    _, r = self.anagrams2.get_anagrams("juice")
    self.assertEqual(r, ['juice'])

    _, r = self.anagrams2.get_anagrams("juices")
    self.assertEqual(r, ['juices'])

    _, r = self.anagrams2.get_anagrams("juiciest")
    self.assertEqual(r, ['juiciest'])

    _, r = self.anagrams2.get_anagrams("juicy")
    self.assertEqual(r, ['juicy'])

    _, r = self.anagrams2.get_anagrams("jukes")
    self.assertEqual(r, ['jukes'])

    _, r = self.anagrams2.get_anagrams("jules")
    self.assertEqual(r, ['jules'])

    _, r = self.anagrams2.get_anagrams("julia")
    self.assertEqual(r, ['julia'])

    _, r = self.anagrams2.get_anagrams("julian")
    self.assertEqual(r, ['julian'])

    _, r = self.anagrams2.get_anagrams("julie")
    self.assertEqual(r, ['julie'])

    _, r = self.anagrams2.get_anagrams("julies")
    self.assertEqual(r, ['julies'])

    _, r = self.anagrams2.get_anagrams("juliet")
    self.assertEqual(r, ['juliet'])

    _, r = self.anagrams2.get_anagrams("julio")
    self.assertEqual(r, ['julio'])

    _, r = self.anagrams2.get_anagrams("julius")
    self.assertEqual(r, ['julius'])

    _, r = self.anagrams2.get_anagrams("july")
    self.assertEqual(r, ['july'])

    _, r = self.anagrams2.get_anagrams("jumble")
    self.assertEqual(r, ['jumble'])

    _, r = self.anagrams2.get_anagrams("jumbled")
    self.assertEqual(r, ['jumbled'])

    _, r = self.anagrams2.get_anagrams("jumbles")
    self.assertEqual(r, ['jumbles'])

    _, r = self.anagrams2.get_anagrams("jumbo")
    self.assertEqual(r, ['jumbo'])

    _, r = self.anagrams2.get_anagrams("jump")
    self.assertEqual(r, ['jump'])

    _, r = self.anagrams2.get_anagrams("jumped")
    self.assertEqual(r, ['jumped'])

    _, r = self.anagrams2.get_anagrams("jumper")
    self.assertEqual(r, ['jumper'])

    _, r = self.anagrams2.get_anagrams("jumpers")
    self.assertEqual(r, ['jumpers'])

    _, r = self.anagrams2.get_anagrams("jumping")
    self.assertEqual(r, ['jumping'])

    _, r = self.anagrams2.get_anagrams("jumps")
    self.assertEqual(r, ['jumps'])

    _, r = self.anagrams2.get_anagrams("jumpy")
    self.assertEqual(r, ['jumpy'])

    _, r = self.anagrams2.get_anagrams("junction")
    self.assertEqual(r, ['junction'])

    _, r = self.anagrams2.get_anagrams("junctions")
    self.assertEqual(r, ['junctions'])

    _, r = self.anagrams2.get_anagrams("juncture")
    self.assertEqual(r, ['juncture'])

    _, r = self.anagrams2.get_anagrams("junctures")
    self.assertEqual(r, ['junctures'])

    _, r = self.anagrams2.get_anagrams("june")
    self.assertEqual(r, ['june'])

    _, r = self.anagrams2.get_anagrams("juneau")
    self.assertEqual(r, ['juneau'])

    _, r = self.anagrams2.get_anagrams("junes")
    self.assertEqual(r, ['junes'])

    _, r = self.anagrams2.get_anagrams("jung")
    self.assertEqual(r, ['jung'])

    _, r = self.anagrams2.get_anagrams("jungian")
    self.assertEqual(r, ['jungian'])

    _, r = self.anagrams2.get_anagrams("jungle")
    self.assertEqual(r, ['jungle'])

    _, r = self.anagrams2.get_anagrams("jungles")
    self.assertEqual(r, ['jungles'])

    _, r = self.anagrams2.get_anagrams("junior")
    self.assertEqual(r, ['junior'])

    _, r = self.anagrams2.get_anagrams("juniors")
    self.assertEqual(r, ['juniors'])

    _, r = self.anagrams2.get_anagrams("juniper")
    self.assertEqual(r, ['juniper'])

    _, r = self.anagrams2.get_anagrams("junk")
    self.assertEqual(r, ['junk'])

    _, r = self.anagrams2.get_anagrams("junker")
    self.assertEqual(r, ['junker'])

    _, r = self.anagrams2.get_anagrams("junkers")
    self.assertEqual(r, ['junkers'])

    _, r = self.anagrams2.get_anagrams("junks")
    self.assertEqual(r, ['junks'])

    _, r = self.anagrams2.get_anagrams("junky")
    self.assertEqual(r, ['junky'])

    _, r = self.anagrams2.get_anagrams("juno")
    self.assertEqual(r, ['juno'])

    _, r = self.anagrams2.get_anagrams("junta")
    self.assertEqual(r, ['jaunt', 'junta'])

    _, r = self.anagrams2.get_anagrams("jupiter")
    self.assertEqual(r, ['jupiter'])

    _, r = self.anagrams2.get_anagrams("jura")
    self.assertEqual(r, ['jura'])

    _, r = self.anagrams2.get_anagrams("juras")
    self.assertEqual(r, ['juras'])

    _, r = self.anagrams2.get_anagrams("jurassic")
    self.assertEqual(r, ['jurassic'])

    _, r = self.anagrams2.get_anagrams("jure")
    self.assertEqual(r, ['jure'])

    _, r = self.anagrams2.get_anagrams("juries")
    self.assertEqual(r, ['juries'])

    _, r = self.anagrams2.get_anagrams("jurisdiction")
    self.assertEqual(r, ['jurisdiction'])

    _, r = self.anagrams2.get_anagrams("jurisdictions")
    self.assertEqual(r, ['jurisdictions'])

    _, r = self.anagrams2.get_anagrams("jurisprudence")
    self.assertEqual(r, ['jurisprudence'])

    _, r = self.anagrams2.get_anagrams("jurist")
    self.assertEqual(r, ['jurist'])

    _, r = self.anagrams2.get_anagrams("juror")
    self.assertEqual(r, ['juror'])

    _, r = self.anagrams2.get_anagrams("jurors")
    self.assertEqual(r, ['jurors'])

    _, r = self.anagrams2.get_anagrams("jury")
    self.assertEqual(r, ['jury'])

    _, r = self.anagrams2.get_anagrams("just")
    self.assertEqual(r, ['just'])

    _, r = self.anagrams2.get_anagrams("justice")
    self.assertEqual(r, ['justice'])

    _, r = self.anagrams2.get_anagrams("justices")
    self.assertEqual(r, ['justices'])

    _, r = self.anagrams2.get_anagrams("justifiable")
    self.assertEqual(r, ['justifiable'])

    _, r = self.anagrams2.get_anagrams("justifiably")
    self.assertEqual(r, ['justifiably'])

    _, r = self.anagrams2.get_anagrams("justification")
    self.assertEqual(r, ['justification'])

    _, r = self.anagrams2.get_anagrams("justifications")
    self.assertEqual(r, ['justifications'])

    _, r = self.anagrams2.get_anagrams("justified")
    self.assertEqual(r, ['justified'])

    _, r = self.anagrams2.get_anagrams("justifier")
    self.assertEqual(r, ['justifier'])

    _, r = self.anagrams2.get_anagrams("justifiers")
    self.assertEqual(r, ['justifiers'])

    _, r = self.anagrams2.get_anagrams("justifies")
    self.assertEqual(r, ['justifies'])

    _, r = self.anagrams2.get_anagrams("justify")
    self.assertEqual(r, ['justify'])

    _, r = self.anagrams2.get_anagrams("justifying")
    self.assertEqual(r, ['justifying'])

    _, r = self.anagrams2.get_anagrams("justine")
    self.assertEqual(r, ['justine'])

    _, r = self.anagrams2.get_anagrams("justinian")
    self.assertEqual(r, ['justinian'])

    _, r = self.anagrams2.get_anagrams("justly")
    self.assertEqual(r, ['justly'])

    _, r = self.anagrams2.get_anagrams("justness")
    self.assertEqual(r, ['justness'])

    _, r = self.anagrams2.get_anagrams("jut")
    self.assertEqual(r, ['jut'])

    _, r = self.anagrams2.get_anagrams("jutish")
    self.assertEqual(r, ['jutish'])

    _, r = self.anagrams2.get_anagrams("jutland")
    self.assertEqual(r, ['jutland'])

    _, r = self.anagrams2.get_anagrams("jutting")
    self.assertEqual(r, ['jutting'])

    _, r = self.anagrams2.get_anagrams("juvenile")
    self.assertEqual(r, ['juvenile'])

    _, r = self.anagrams2.get_anagrams("juveniles")
    self.assertEqual(r, ['juveniles'])

    _, r = self.anagrams2.get_anagrams("juxtapose")
    self.assertEqual(r, ['juxtapose'])

    _, r = self.anagrams2.get_anagrams("juxtaposed")
    self.assertEqual(r, ['juxtaposed'])

    _, r = self.anagrams2.get_anagrams("juxtaposes")
    self.assertEqual(r, ['juxtaposes'])

    _, r = self.anagrams2.get_anagrams("juxtaposing")
    self.assertEqual(r, ['juxtaposing'])

    _, r = self.anagrams2.get_anagrams("kabuki")
    self.assertEqual(r, ['kabuki'])

    _, r = self.anagrams2.get_anagrams("kabul")
    self.assertEqual(r, ['kabul'])

    _, r = self.anagrams2.get_anagrams("kaddish")
    self.assertEqual(r, ['kaddish'])

    _, r = self.anagrams2.get_anagrams("kafka")
    self.assertEqual(r, ['kafka'])

    _, r = self.anagrams2.get_anagrams("kafkaesque")
    self.assertEqual(r, ['kafkaesque'])

    _, r = self.anagrams2.get_anagrams("kahn")
    self.assertEqual(r, ['kahn'])

    _, r = self.anagrams2.get_anagrams("kajar")
    self.assertEqual(r, ['kajar'])

    _, r = self.anagrams2.get_anagrams("kalamazoo")
    self.assertEqual(r, ['kalamazoo'])

    _, r = self.anagrams2.get_anagrams("kali")
    self.assertEqual(r, ['kali'])

    _, r = self.anagrams2.get_anagrams("kalmuk")
    self.assertEqual(r, ['kalmuk'])

    _, r = self.anagrams2.get_anagrams("kamchatka")
    self.assertEqual(r, ['kamchatka'])

    _, r = self.anagrams2.get_anagrams("kamikaze")
    self.assertEqual(r, ['kamikaze'])

    _, r = self.anagrams2.get_anagrams("kamikazes")
    self.assertEqual(r, ['kamikazes'])

    _, r = self.anagrams2.get_anagrams("kampala")
    self.assertEqual(r, ['kampala'])

    _, r = self.anagrams2.get_anagrams("kampuchea")
    self.assertEqual(r, ['kampuchea'])

    _, r = self.anagrams2.get_anagrams("kanarese")
    self.assertEqual(r, ['kanarese'])

    _, r = self.anagrams2.get_anagrams("kane")
    self.assertEqual(r, ['kane'])

    _, r = self.anagrams2.get_anagrams("kangaroo")
    self.assertEqual(r, ['kangaroo'])

    _, r = self.anagrams2.get_anagrams("kanji")
    self.assertEqual(r, ['kanji'])

    _, r = self.anagrams2.get_anagrams("kankakee")
    self.assertEqual(r, ['kankakee'])

    _, r = self.anagrams2.get_anagrams("kannada")
    self.assertEqual(r, ['kannada'])

    _, r = self.anagrams2.get_anagrams("kansas")
    self.assertEqual(r, ['kansas'])

    _, r = self.anagrams2.get_anagrams("kant")
    self.assertEqual(r, ['kant', 'tank'])

    _, r = self.anagrams2.get_anagrams("kantian")
    self.assertEqual(r, ['kantian'])

    _, r = self.anagrams2.get_anagrams("kaplan")
    self.assertEqual(r, ['kaplan'])

    _, r = self.anagrams2.get_anagrams("kappa")
    self.assertEqual(r, ['kappa'])

    _, r = self.anagrams2.get_anagrams("karachi")
    self.assertEqual(r, ['karachi'])

    _, r = self.anagrams2.get_anagrams("karamazov")
    self.assertEqual(r, ['karamazov'])

    _, r = self.anagrams2.get_anagrams("karate")
    self.assertEqual(r, ['karate'])

    _, r = self.anagrams2.get_anagrams("karen")
    self.assertEqual(r, ['karen'])

    _, r = self.anagrams2.get_anagrams("karl")
    self.assertEqual(r, ['karl', 'lark'])

    _, r = self.anagrams2.get_anagrams("karol")
    self.assertEqual(r, ['karol'])

    _, r = self.anagrams2.get_anagrams("karp")
    self.assertEqual(r, ['karp', 'park'])

    _, r = self.anagrams2.get_anagrams("kashmir")
    self.assertEqual(r, ['kashmir'])

    _, r = self.anagrams2.get_anagrams("kaskaskia")
    self.assertEqual(r, ['kaskaskia'])

    _, r = self.anagrams2.get_anagrams("kate")
    self.assertEqual(r, ['kate', 'take'])

    _, r = self.anagrams2.get_anagrams("katharine")
    self.assertEqual(r, ['katharine'])

    _, r = self.anagrams2.get_anagrams("katherine")
    self.assertEqual(r, ['katherine'])

    _, r = self.anagrams2.get_anagrams("kathleen")
    self.assertEqual(r, ['kathleen'])

    _, r = self.anagrams2.get_anagrams("kathy")
    self.assertEqual(r, ['kathy'])

    _, r = self.anagrams2.get_anagrams("katie")
    self.assertEqual(r, ['katie'])

    _, r = self.anagrams2.get_anagrams("katmandu")
    self.assertEqual(r, ['katmandu'])

    _, r = self.anagrams2.get_anagrams("katowice")
    self.assertEqual(r, ['katowice'])

    _, r = self.anagrams2.get_anagrams("katz")
    self.assertEqual(r, ['katz'])

    _, r = self.anagrams2.get_anagrams("kauffman")
    self.assertEqual(r, ['kauffman'])

    _, r = self.anagrams2.get_anagrams("kaufman")
    self.assertEqual(r, ['kaufman'])

    _, r = self.anagrams2.get_anagrams("kay")
    self.assertEqual(r, ['kay'])

    _, r = self.anagrams2.get_anagrams("keaton")
    self.assertEqual(r, ['keaton'])

    _, r = self.anagrams2.get_anagrams("keats")
    self.assertEqual(r, ['keats', 'skate', 'stake', 'steak', 'takes'])

    _, r = self.anagrams2.get_anagrams("keegan")
    self.assertEqual(r, ['keegan'])

    _, r = self.anagrams2.get_anagrams("keel")
    self.assertEqual(r, ['keel', 'leek'])

    _, r = self.anagrams2.get_anagrams("keeled")
    self.assertEqual(r, ['keeled'])

    _, r = self.anagrams2.get_anagrams("keeling")
    self.assertEqual(r, ['keeling'])

    _, r = self.anagrams2.get_anagrams("keels")
    self.assertEqual(r, ['keels', 'sleek'])

    _, r = self.anagrams2.get_anagrams("keen")
    self.assertEqual(r, ['keen', 'knee'])

    _, r = self.anagrams2.get_anagrams("keenan")
    self.assertEqual(r, ['keenan'])

    _, r = self.anagrams2.get_anagrams("keener")
    self.assertEqual(r, ['keener'])

    _, r = self.anagrams2.get_anagrams("keenest")
    self.assertEqual(r, ['keenest'])

    _, r = self.anagrams2.get_anagrams("keenly")
    self.assertEqual(r, ['keenly'])

    _, r = self.anagrams2.get_anagrams("keenness")
    self.assertEqual(r, ['keenness'])

    _, r = self.anagrams2.get_anagrams("keep")
    self.assertEqual(r, ['keep', 'peek'])

    _, r = self.anagrams2.get_anagrams("keeper")
    self.assertEqual(r, ['keeper'])

    _, r = self.anagrams2.get_anagrams("keepers")
    self.assertEqual(r, ['keepers'])

    _, r = self.anagrams2.get_anagrams("keeping")
    self.assertEqual(r, ['keeping', 'peeking'])

    _, r = self.anagrams2.get_anagrams("keeps")
    self.assertEqual(r, ['keeps', 'peeks'])

    _, r = self.anagrams2.get_anagrams("keith")
    self.assertEqual(r, ['keith'])

    _, r = self.anagrams2.get_anagrams("keller")
    self.assertEqual(r, ['keller'])

    _, r = self.anagrams2.get_anagrams("kelley")
    self.assertEqual(r, ['kelley'])

    _, r = self.anagrams2.get_anagrams("kellogg")
    self.assertEqual(r, ['kellogg'])

    _, r = self.anagrams2.get_anagrams("kelly")
    self.assertEqual(r, ['kelly'])

    _, r = self.anagrams2.get_anagrams("kelsey")
    self.assertEqual(r, ['kelsey'])

    _, r = self.anagrams2.get_anagrams("kelvin")
    self.assertEqual(r, ['kelvin'])

    _, r = self.anagrams2.get_anagrams("kemp")
    self.assertEqual(r, ['kemp'])

    _, r = self.anagrams2.get_anagrams("ken")
    self.assertEqual(r, ['ken'])

    _, r = self.anagrams2.get_anagrams("kendall")
    self.assertEqual(r, ['kendall'])

    _, r = self.anagrams2.get_anagrams("kenilworth")
    self.assertEqual(r, ['kenilworth'])

    _, r = self.anagrams2.get_anagrams("kennan")
    self.assertEqual(r, ['kennan'])

    _, r = self.anagrams2.get_anagrams("kennecott")
    self.assertEqual(r, ['kennecott'])

    _, r = self.anagrams2.get_anagrams("kennedy")
    self.assertEqual(r, ['kennedy'])

    _, r = self.anagrams2.get_anagrams("kennel")
    self.assertEqual(r, ['kennel'])

    _, r = self.anagrams2.get_anagrams("kennels")
    self.assertEqual(r, ['kennels'])

    _, r = self.anagrams2.get_anagrams("kenneth")
    self.assertEqual(r, ['kenneth'])

    _, r = self.anagrams2.get_anagrams("kenney")
    self.assertEqual(r, ['kenney'])

    _, r = self.anagrams2.get_anagrams("kenning")
    self.assertEqual(r, ['kenning'])

    _, r = self.anagrams2.get_anagrams("kenny")
    self.assertEqual(r, ['kenny'])

    _, r = self.anagrams2.get_anagrams("kenosha")
    self.assertEqual(r, ['kenosha'])

    _, r = self.anagrams2.get_anagrams("kensington")
    self.assertEqual(r, ['kensington'])

    _, r = self.anagrams2.get_anagrams("kent")
    self.assertEqual(r, ['kent'])

    _, r = self.anagrams2.get_anagrams("kenton")
    self.assertEqual(r, ['kenton'])

    _, r = self.anagrams2.get_anagrams("kentucky")
    self.assertEqual(r, ['kentucky'])

    _, r = self.anagrams2.get_anagrams("kenya")
    self.assertEqual(r, ['kenya'])

    _, r = self.anagrams2.get_anagrams("kenyon")
    self.assertEqual(r, ['kenyon'])

    _, r = self.anagrams2.get_anagrams("kepler")
    self.assertEqual(r, ['kepler'])

    _, r = self.anagrams2.get_anagrams("kept")
    self.assertEqual(r, ['kept'])

    _, r = self.anagrams2.get_anagrams("kerchief")
    self.assertEqual(r, ['kerchief'])

    _, r = self.anagrams2.get_anagrams("kerchiefs")
    self.assertEqual(r, ['kerchiefs'])

    _, r = self.anagrams2.get_anagrams("kermit")
    self.assertEqual(r, ['kermit'])

    _, r = self.anagrams2.get_anagrams("kern")
    self.assertEqual(r, ['kern'])

    _, r = self.anagrams2.get_anagrams("kernel")
    self.assertEqual(r, ['kernel'])

    _, r = self.anagrams2.get_anagrams("kernels")
    self.assertEqual(r, ['kernels'])

    _, r = self.anagrams2.get_anagrams("kernighan")
    self.assertEqual(r, ['kernighan'])

    _, r = self.anagrams2.get_anagrams("kerosene")
    self.assertEqual(r, ['kerosene'])

    _, r = self.anagrams2.get_anagrams("kerouac")
    self.assertEqual(r, ['kerouac'])

    _, r = self.anagrams2.get_anagrams("kerr")
    self.assertEqual(r, ['kerr'])

    _, r = self.anagrams2.get_anagrams("kessler")
    self.assertEqual(r, ['kessler'])

    _, r = self.anagrams2.get_anagrams("ketchup")
    self.assertEqual(r, ['ketchup'])

    _, r = self.anagrams2.get_anagrams("kettering")
    self.assertEqual(r, ['kettering'])

    _, r = self.anagrams2.get_anagrams("kettle")
    self.assertEqual(r, ['kettle'])

    _, r = self.anagrams2.get_anagrams("kettles")
    self.assertEqual(r, ['kettles'])

    _, r = self.anagrams2.get_anagrams("kevin")
    self.assertEqual(r, ['kevin'])

    _, r = self.anagrams2.get_anagrams("kewaskum")
    self.assertEqual(r, ['kewaskum'])

    _, r = self.anagrams2.get_anagrams("kewaunee")
    self.assertEqual(r, ['kewaunee'])

    _, r = self.anagrams2.get_anagrams("key")
    self.assertEqual(r, ['key'])

    _, r = self.anagrams2.get_anagrams("keyboard")
    self.assertEqual(r, ['keyboard'])

    _, r = self.anagrams2.get_anagrams("keyboards")
    self.assertEqual(r, ['keyboards'])

    _, r = self.anagrams2.get_anagrams("keyed")
    self.assertEqual(r, ['keyed'])

    _, r = self.anagrams2.get_anagrams("keyes")
    self.assertEqual(r, ['keyes'])

    _, r = self.anagrams2.get_anagrams("keyhole")
    self.assertEqual(r, ['keyhole'])

    _, r = self.anagrams2.get_anagrams("keying")
    self.assertEqual(r, ['keying'])

    _, r = self.anagrams2.get_anagrams("keynes")
    self.assertEqual(r, ['keynes'])

    _, r = self.anagrams2.get_anagrams("keynesian")
    self.assertEqual(r, ['keynesian'])

    _, r = self.anagrams2.get_anagrams("keynote")
    self.assertEqual(r, ['keynote'])

    _, r = self.anagrams2.get_anagrams("keypad")
    self.assertEqual(r, ['keypad'])

    _, r = self.anagrams2.get_anagrams("keypads")
    self.assertEqual(r, ['keypads'])

    _, r = self.anagrams2.get_anagrams("keys")
    self.assertEqual(r, ['keys', 'skye'])

    _, r = self.anagrams2.get_anagrams("keystroke")
    self.assertEqual(r, ['keystroke'])

    _, r = self.anagrams2.get_anagrams("keystrokes")
    self.assertEqual(r, ['keystrokes'])

    _, r = self.anagrams2.get_anagrams("keyword")
    self.assertEqual(r, ['keyword'])

    _, r = self.anagrams2.get_anagrams("keywords")
    self.assertEqual(r, ['keywords'])

    _, r = self.anagrams2.get_anagrams("khartoum")
    self.assertEqual(r, ['khartoum'])

    _, r = self.anagrams2.get_anagrams("khmer")
    self.assertEqual(r, ['khmer'])

    _, r = self.anagrams2.get_anagrams("khrushchev")
    self.assertEqual(r, ['khrushchev'])

    _, r = self.anagrams2.get_anagrams("khrushchevs")
    self.assertEqual(r, ['khrushchevs'])

    _, r = self.anagrams2.get_anagrams("kick")
    self.assertEqual(r, ['kick'])

    _, r = self.anagrams2.get_anagrams("kickapoo")
    self.assertEqual(r, ['kickapoo'])

    _, r = self.anagrams2.get_anagrams("kicked")
    self.assertEqual(r, ['kicked'])

    _, r = self.anagrams2.get_anagrams("kicker")
    self.assertEqual(r, ['kicker'])

    _, r = self.anagrams2.get_anagrams("kickers")
    self.assertEqual(r, ['kickers'])

    _, r = self.anagrams2.get_anagrams("kicking")
    self.assertEqual(r, ['kicking'])

    _, r = self.anagrams2.get_anagrams("kickoff")
    self.assertEqual(r, ['kickoff'])

    _, r = self.anagrams2.get_anagrams("kicks")
    self.assertEqual(r, ['kicks'])

    _, r = self.anagrams2.get_anagrams("kid")
    self.assertEqual(r, ['kid'])

    _, r = self.anagrams2.get_anagrams("kidde")
    self.assertEqual(r, ['kidde'])

    _, r = self.anagrams2.get_anagrams("kidded")
    self.assertEqual(r, ['kidded'])

    _, r = self.anagrams2.get_anagrams("kiddie")
    self.assertEqual(r, ['kiddie'])

    _, r = self.anagrams2.get_anagrams("kidding")
    self.assertEqual(r, ['kidding'])

    _, r = self.anagrams2.get_anagrams("kidnap")
    self.assertEqual(r, ['kidnap'])

    _, r = self.anagrams2.get_anagrams("kidnapper")
    self.assertEqual(r, ['kidnapper'])

    _, r = self.anagrams2.get_anagrams("kidnappers")
    self.assertEqual(r, ['kidnappers'])

    _, r = self.anagrams2.get_anagrams("kidnapping")
    self.assertEqual(r, ['kidnapping'])

    _, r = self.anagrams2.get_anagrams("kidnappings")
    self.assertEqual(r, ['kidnappings'])

    _, r = self.anagrams2.get_anagrams("kidnaps")
    self.assertEqual(r, ['kidnaps'])

    _, r = self.anagrams2.get_anagrams("kidney")
    self.assertEqual(r, ['kidney'])

    _, r = self.anagrams2.get_anagrams("kidneys")
    self.assertEqual(r, ['kidneys'])

    _, r = self.anagrams2.get_anagrams("kids")
    self.assertEqual(r, ['disk', 'kids', 'skid'])

    _, r = self.anagrams2.get_anagrams("kieffer")
    self.assertEqual(r, ['kieffer'])

    _, r = self.anagrams2.get_anagrams("kiel")
    self.assertEqual(r, ['kiel', 'like'])

    _, r = self.anagrams2.get_anagrams("kiev")
    self.assertEqual(r, ['kiev'])

    _, r = self.anagrams2.get_anagrams("kiewit")
    self.assertEqual(r, ['kiewit'])

    _, r = self.anagrams2.get_anagrams("kigali")
    self.assertEqual(r, ['kigali'])

    _, r = self.anagrams2.get_anagrams("kikuyu")
    self.assertEqual(r, ['kikuyu'])

    _, r = self.anagrams2.get_anagrams("kilgore")
    self.assertEqual(r, ['kilgore'])

    _, r = self.anagrams2.get_anagrams("kilimanjaro")
    self.assertEqual(r, ['kilimanjaro'])

    _, r = self.anagrams2.get_anagrams("kill")
    self.assertEqual(r, ['kill'])

    _, r = self.anagrams2.get_anagrams("killebrew")
    self.assertEqual(r, ['killebrew'])

    _, r = self.anagrams2.get_anagrams("killed")
    self.assertEqual(r, ['killed'])

    _, r = self.anagrams2.get_anagrams("killer")
    self.assertEqual(r, ['killer'])

    _, r = self.anagrams2.get_anagrams("killers")
    self.assertEqual(r, ['killers'])

    _, r = self.anagrams2.get_anagrams("killing")
    self.assertEqual(r, ['killing'])

    _, r = self.anagrams2.get_anagrams("killingly")
    self.assertEqual(r, ['killingly'])

    _, r = self.anagrams2.get_anagrams("killings")
    self.assertEqual(r, ['killings'])

    _, r = self.anagrams2.get_anagrams("killjoy")
    self.assertEqual(r, ['killjoy'])

    _, r = self.anagrams2.get_anagrams("kills")
    self.assertEqual(r, ['kills', 'skill'])

    _, r = self.anagrams2.get_anagrams("kilobit")
    self.assertEqual(r, ['kilobit'])

    _, r = self.anagrams2.get_anagrams("kilobits")
    self.assertEqual(r, ['kilobits'])

    _, r = self.anagrams2.get_anagrams("kiloblock")
    self.assertEqual(r, ['kiloblock'])

    _, r = self.anagrams2.get_anagrams("kilobyte")
    self.assertEqual(r, ['kilobyte'])

    _, r = self.anagrams2.get_anagrams("kilobytes")
    self.assertEqual(r, ['kilobytes'])

    _, r = self.anagrams2.get_anagrams("kilogram")
    self.assertEqual(r, ['kilogram'])

    _, r = self.anagrams2.get_anagrams("kilograms")
    self.assertEqual(r, ['kilograms'])

    _, r = self.anagrams2.get_anagrams("kilohertz")
    self.assertEqual(r, ['kilohertz'])

    _, r = self.anagrams2.get_anagrams("kilohm")
    self.assertEqual(r, ['kilohm'])

    _, r = self.anagrams2.get_anagrams("kilojoule")
    self.assertEqual(r, ['kilojoule'])

    _, r = self.anagrams2.get_anagrams("kilometer")
    self.assertEqual(r, ['kilometer'])

    _, r = self.anagrams2.get_anagrams("kilometers")
    self.assertEqual(r, ['kilometers'])

    _, r = self.anagrams2.get_anagrams("kiloton")
    self.assertEqual(r, ['kiloton'])

    _, r = self.anagrams2.get_anagrams("kilovolt")
    self.assertEqual(r, ['kilovolt'])

    _, r = self.anagrams2.get_anagrams("kilowatt")
    self.assertEqual(r, ['kilowatt'])

    _, r = self.anagrams2.get_anagrams("kiloword")
    self.assertEqual(r, ['kiloword'])

    _, r = self.anagrams2.get_anagrams("kim")
    self.assertEqual(r, ['kim'])

    _, r = self.anagrams2.get_anagrams("kimball")
    self.assertEqual(r, ['kimball'])

    _, r = self.anagrams2.get_anagrams("kimberly")
    self.assertEqual(r, ['kimberly'])

    _, r = self.anagrams2.get_anagrams("kimono")
    self.assertEqual(r, ['kimono'])

    _, r = self.anagrams2.get_anagrams("kin")
    self.assertEqual(r, ['ink', 'kin'])

    _, r = self.anagrams2.get_anagrams("kind")
    self.assertEqual(r, ['kind'])

    _, r = self.anagrams2.get_anagrams("kinder")
    self.assertEqual(r, ['kinder'])

    _, r = self.anagrams2.get_anagrams("kindergarten")
    self.assertEqual(r, ['kindergarten'])

    _, r = self.anagrams2.get_anagrams("kindest")
    self.assertEqual(r, ['kindest'])

    _, r = self.anagrams2.get_anagrams("kindhearted")
    self.assertEqual(r, ['kindhearted'])

    _, r = self.anagrams2.get_anagrams("kindle")
    self.assertEqual(r, ['kindle', 'linked'])

    _, r = self.anagrams2.get_anagrams("kindled")
    self.assertEqual(r, ['kindled'])

    _, r = self.anagrams2.get_anagrams("kindles")
    self.assertEqual(r, ['kindles'])

    _, r = self.anagrams2.get_anagrams("kindling")
    self.assertEqual(r, ['kindling'])

    _, r = self.anagrams2.get_anagrams("kindly")
    self.assertEqual(r, ['kindly'])

    _, r = self.anagrams2.get_anagrams("kindness")
    self.assertEqual(r, ['kindness'])

    _, r = self.anagrams2.get_anagrams("kindred")
    self.assertEqual(r, ['kindred'])

    _, r = self.anagrams2.get_anagrams("kinds")
    self.assertEqual(r, ['kinds'])

    _, r = self.anagrams2.get_anagrams("kinetic")
    self.assertEqual(r, ['kinetic'])

    _, r = self.anagrams2.get_anagrams("king")
    self.assertEqual(r, ['king'])

    _, r = self.anagrams2.get_anagrams("kingdom")
    self.assertEqual(r, ['kingdom'])

    _, r = self.anagrams2.get_anagrams("kingdoms")
    self.assertEqual(r, ['kingdoms'])

    _, r = self.anagrams2.get_anagrams("kingly")
    self.assertEqual(r, ['kingly'])

    _, r = self.anagrams2.get_anagrams("kingpin")
    self.assertEqual(r, ['kingpin'])

    _, r = self.anagrams2.get_anagrams("kings")
    self.assertEqual(r, ['kings'])

    _, r = self.anagrams2.get_anagrams("kingsbury")
    self.assertEqual(r, ['kingsbury'])

    _, r = self.anagrams2.get_anagrams("kingsley")
    self.assertEqual(r, ['kingsley'])

    _, r = self.anagrams2.get_anagrams("kingston")
    self.assertEqual(r, ['kingston'])

    _, r = self.anagrams2.get_anagrams("kingstown")
    self.assertEqual(r, ['kingstown'])

    _, r = self.anagrams2.get_anagrams("kingwood")
    self.assertEqual(r, ['kingwood'])

    _, r = self.anagrams2.get_anagrams("kink")
    self.assertEqual(r, ['kink'])

    _, r = self.anagrams2.get_anagrams("kinky")
    self.assertEqual(r, ['kinky'])

    _, r = self.anagrams2.get_anagrams("kinney")
    self.assertEqual(r, ['kinney'])

    _, r = self.anagrams2.get_anagrams("kinnickinnic")
    self.assertEqual(r, ['kinnickinnic'])

    _, r = self.anagrams2.get_anagrams("kinsey")
    self.assertEqual(r, ['kinsey'])

    _, r = self.anagrams2.get_anagrams("kinshasha")
    self.assertEqual(r, ['kinshasha'])

    _, r = self.anagrams2.get_anagrams("kinship")
    self.assertEqual(r, ['kinship', 'pinkish'])

    _, r = self.anagrams2.get_anagrams("kinsman")
    self.assertEqual(r, ['kinsman'])

    _, r = self.anagrams2.get_anagrams("kiosk")
    self.assertEqual(r, ['kiosk'])

    _, r = self.anagrams2.get_anagrams("kiowa")
    self.assertEqual(r, ['kiowa'])

    _, r = self.anagrams2.get_anagrams("kipling")
    self.assertEqual(r, ['kipling'])

    _, r = self.anagrams2.get_anagrams("kirby")
    self.assertEqual(r, ['kirby'])

    _, r = self.anagrams2.get_anagrams("kirchner")
    self.assertEqual(r, ['kirchner'])

    _, r = self.anagrams2.get_anagrams("kirchoff")
    self.assertEqual(r, ['kirchoff'])

    _, r = self.anagrams2.get_anagrams("kirk")
    self.assertEqual(r, ['kirk'])

    _, r = self.anagrams2.get_anagrams("kirkland")
    self.assertEqual(r, ['kirkland'])

    _, r = self.anagrams2.get_anagrams("kirkpatrick")
    self.assertEqual(r, ['kirkpatrick'])

    _, r = self.anagrams2.get_anagrams("kirkwood")
    self.assertEqual(r, ['kirkwood'])

    _, r = self.anagrams2.get_anagrams("kirov")
    self.assertEqual(r, ['kirov'])

    _, r = self.anagrams2.get_anagrams("kiss")
    self.assertEqual(r, ['kiss', 'skis'])

    _, r = self.anagrams2.get_anagrams("kissed")
    self.assertEqual(r, ['kissed'])

    _, r = self.anagrams2.get_anagrams("kisser")
    self.assertEqual(r, ['kisser'])

    _, r = self.anagrams2.get_anagrams("kissers")
    self.assertEqual(r, ['kissers'])

    _, r = self.anagrams2.get_anagrams("kisses")
    self.assertEqual(r, ['kisses'])

    _, r = self.anagrams2.get_anagrams("kissing")
    self.assertEqual(r, ['kissing'])

    _, r = self.anagrams2.get_anagrams("kit")
    self.assertEqual(r, ['kit'])

    _, r = self.anagrams2.get_anagrams("kitakyushu")
    self.assertEqual(r, ['kitakyushu'])

    _, r = self.anagrams2.get_anagrams("kitchen")
    self.assertEqual(r, ['kitchen', 'thicken'])

    _, r = self.anagrams2.get_anagrams("kitchenette")
    self.assertEqual(r, ['kitchenette'])

    _, r = self.anagrams2.get_anagrams("kitchens")
    self.assertEqual(r, ['kitchens', 'thickens'])

    _, r = self.anagrams2.get_anagrams("kite")
    self.assertEqual(r, ['kite'])

    _, r = self.anagrams2.get_anagrams("kited")
    self.assertEqual(r, ['kited'])

    _, r = self.anagrams2.get_anagrams("kites")
    self.assertEqual(r, ['kites'])

    _, r = self.anagrams2.get_anagrams("kiting")
    self.assertEqual(r, ['kiting'])

    _, r = self.anagrams2.get_anagrams("kits")
    self.assertEqual(r, ['kits', 'skit'])

    _, r = self.anagrams2.get_anagrams("kitten")
    self.assertEqual(r, ['kitten'])

    _, r = self.anagrams2.get_anagrams("kittenish")
    self.assertEqual(r, ['kittenish'])

    _, r = self.anagrams2.get_anagrams("kittens")
    self.assertEqual(r, ['kittens'])

    _, r = self.anagrams2.get_anagrams("kitty")
    self.assertEqual(r, ['kitty'])

    _, r = self.anagrams2.get_anagrams("kiwanis")
    self.assertEqual(r, ['kiwanis'])

    _, r = self.anagrams2.get_anagrams("klan")
    self.assertEqual(r, ['klan'])

    _, r = self.anagrams2.get_anagrams("klaus")
    self.assertEqual(r, ['klaus'])

    _, r = self.anagrams2.get_anagrams("klaxon")
    self.assertEqual(r, ['klaxon'])

    _, r = self.anagrams2.get_anagrams("klein")
    self.assertEqual(r, ['klein', 'kline', 'liken'])

    _, r = self.anagrams2.get_anagrams("kleinrock")
    self.assertEqual(r, ['kleinrock'])

    _, r = self.anagrams2.get_anagrams("kline")
    self.assertEqual(r, ['klein', 'kline', 'liken'])

    _, r = self.anagrams2.get_anagrams("kludge")
    self.assertEqual(r, ['kludge'])

    _, r = self.anagrams2.get_anagrams("kludges")
    self.assertEqual(r, ['kludges'])

    _, r = self.anagrams2.get_anagrams("klux")
    self.assertEqual(r, ['klux'])

    _, r = self.anagrams2.get_anagrams("klystron")
    self.assertEqual(r, ['klystron'])

    _, r = self.anagrams2.get_anagrams("knack")
    self.assertEqual(r, ['knack'])

    _, r = self.anagrams2.get_anagrams("knapp")
    self.assertEqual(r, ['knapp'])

    _, r = self.anagrams2.get_anagrams("knapsack")
    self.assertEqual(r, ['knapsack'])

    _, r = self.anagrams2.get_anagrams("knapsacks")
    self.assertEqual(r, ['knapsacks'])

    _, r = self.anagrams2.get_anagrams("knauer")
    self.assertEqual(r, ['knauer'])

    _, r = self.anagrams2.get_anagrams("knave")
    self.assertEqual(r, ['knave'])

    _, r = self.anagrams2.get_anagrams("knaves")
    self.assertEqual(r, ['knaves'])

    _, r = self.anagrams2.get_anagrams("knead")
    self.assertEqual(r, ['knead', 'naked'])

    _, r = self.anagrams2.get_anagrams("kneads")
    self.assertEqual(r, ['kneads', 'snaked'])

    _, r = self.anagrams2.get_anagrams("knee")
    self.assertEqual(r, ['keen', 'knee'])

    _, r = self.anagrams2.get_anagrams("kneecap")
    self.assertEqual(r, ['kneecap'])

    _, r = self.anagrams2.get_anagrams("kneed")
    self.assertEqual(r, ['kneed'])

    _, r = self.anagrams2.get_anagrams("kneeing")
    self.assertEqual(r, ['kneeing'])

    _, r = self.anagrams2.get_anagrams("kneel")
    self.assertEqual(r, ['kneel'])

    _, r = self.anagrams2.get_anagrams("kneeled")
    self.assertEqual(r, ['kneeled'])

    _, r = self.anagrams2.get_anagrams("kneeling")
    self.assertEqual(r, ['kneeling'])

    _, r = self.anagrams2.get_anagrams("kneels")
    self.assertEqual(r, ['kneels'])

    _, r = self.anagrams2.get_anagrams("knees")
    self.assertEqual(r, ['knees'])

    _, r = self.anagrams2.get_anagrams("knell")
    self.assertEqual(r, ['knell'])

    _, r = self.anagrams2.get_anagrams("knells")
    self.assertEqual(r, ['knells'])

    _, r = self.anagrams2.get_anagrams("knelt")
    self.assertEqual(r, ['knelt'])

    _, r = self.anagrams2.get_anagrams("knew")
    self.assertEqual(r, ['knew'])

    _, r = self.anagrams2.get_anagrams("knickerbocker")
    self.assertEqual(r, ['knickerbocker'])

    _, r = self.anagrams2.get_anagrams("knickerbockers")
    self.assertEqual(r, ['knickerbockers'])

    _, r = self.anagrams2.get_anagrams("knife")
    self.assertEqual(r, ['knife'])

    _, r = self.anagrams2.get_anagrams("knifed")
    self.assertEqual(r, ['knifed'])

    _, r = self.anagrams2.get_anagrams("knifes")
    self.assertEqual(r, ['knifes'])

    _, r = self.anagrams2.get_anagrams("knifing")
    self.assertEqual(r, ['knifing'])

    _, r = self.anagrams2.get_anagrams("knight")
    self.assertEqual(r, ['knight'])

    _, r = self.anagrams2.get_anagrams("knighted")
    self.assertEqual(r, ['knighted'])

    _, r = self.anagrams2.get_anagrams("knighthood")
    self.assertEqual(r, ['knighthood'])

    _, r = self.anagrams2.get_anagrams("knighting")
    self.assertEqual(r, ['knighting'])

    _, r = self.anagrams2.get_anagrams("knightly")
    self.assertEqual(r, ['knightly'])

    _, r = self.anagrams2.get_anagrams("knights")
    self.assertEqual(r, ['knights'])

    _, r = self.anagrams2.get_anagrams("knightsbridge")
    self.assertEqual(r, ['knightsbridge'])

    _, r = self.anagrams2.get_anagrams("knit")
    self.assertEqual(r, ['knit'])

    _, r = self.anagrams2.get_anagrams("knits")
    self.assertEqual(r, ['knits', 'stink'])

    _, r = self.anagrams2.get_anagrams("knives")
    self.assertEqual(r, ['knives'])

    _, r = self.anagrams2.get_anagrams("knob")
    self.assertEqual(r, ['knob'])

    _, r = self.anagrams2.get_anagrams("knobeloch")
    self.assertEqual(r, ['knobeloch'])

    _, r = self.anagrams2.get_anagrams("knobs")
    self.assertEqual(r, ['knobs'])

    _, r = self.anagrams2.get_anagrams("knock")
    self.assertEqual(r, ['knock'])

    _, r = self.anagrams2.get_anagrams("knockdown")
    self.assertEqual(r, ['knockdown'])

    _, r = self.anagrams2.get_anagrams("knocked")
    self.assertEqual(r, ['knocked'])

    _, r = self.anagrams2.get_anagrams("knocker")
    self.assertEqual(r, ['knocker'])

    _, r = self.anagrams2.get_anagrams("knockers")
    self.assertEqual(r, ['knockers'])

    _, r = self.anagrams2.get_anagrams("knocking")
    self.assertEqual(r, ['knocking'])

    _, r = self.anagrams2.get_anagrams("knockout")
    self.assertEqual(r, ['knockout'])

    _, r = self.anagrams2.get_anagrams("knocks")
    self.assertEqual(r, ['knocks'])

    _, r = self.anagrams2.get_anagrams("knoll")
    self.assertEqual(r, ['knoll'])

    _, r = self.anagrams2.get_anagrams("knolls")
    self.assertEqual(r, ['knolls'])

    _, r = self.anagrams2.get_anagrams("knossos")
    self.assertEqual(r, ['knossos'])

    _, r = self.anagrams2.get_anagrams("knot")
    self.assertEqual(r, ['knot'])

    _, r = self.anagrams2.get_anagrams("knots")
    self.assertEqual(r, ['knots'])

    _, r = self.anagrams2.get_anagrams("knott")
    self.assertEqual(r, ['knott'])

    _, r = self.anagrams2.get_anagrams("knotted")
    self.assertEqual(r, ['knotted'])

    _, r = self.anagrams2.get_anagrams("knotting")
    self.assertEqual(r, ['knotting'])

    _, r = self.anagrams2.get_anagrams("know")
    self.assertEqual(r, ['know'])

    _, r = self.anagrams2.get_anagrams("knowable")
    self.assertEqual(r, ['knowable'])

    _, r = self.anagrams2.get_anagrams("knower")
    self.assertEqual(r, ['knower'])

    _, r = self.anagrams2.get_anagrams("knowhow")
    self.assertEqual(r, ['knowhow'])

    _, r = self.anagrams2.get_anagrams("knowing")
    self.assertEqual(r, ['knowing'])

    _, r = self.anagrams2.get_anagrams("knowingly")
    self.assertEqual(r, ['knowingly'])

    _, r = self.anagrams2.get_anagrams("knowledge")
    self.assertEqual(r, ['knowledge'])

    _, r = self.anagrams2.get_anagrams("knowledgeable")
    self.assertEqual(r, ['knowledgeable'])

    _, r = self.anagrams2.get_anagrams("knowles")
    self.assertEqual(r, ['knowles'])

    _, r = self.anagrams2.get_anagrams("knowlton")
    self.assertEqual(r, ['knowlton'])

    _, r = self.anagrams2.get_anagrams("known")
    self.assertEqual(r, ['known'])

    _, r = self.anagrams2.get_anagrams("knows")
    self.assertEqual(r, ['knows'])

    _, r = self.anagrams2.get_anagrams("knox")
    self.assertEqual(r, ['knox'])

    _, r = self.anagrams2.get_anagrams("knoxville")
    self.assertEqual(r, ['knoxville'])

    _, r = self.anagrams2.get_anagrams("knuckle")
    self.assertEqual(r, ['knuckle'])

    _, r = self.anagrams2.get_anagrams("knuckled")
    self.assertEqual(r, ['knuckled'])

    _, r = self.anagrams2.get_anagrams("knuckles")
    self.assertEqual(r, ['knuckles'])

    _, r = self.anagrams2.get_anagrams("knudsen")
    self.assertEqual(r, ['knudsen'])

    _, r = self.anagrams2.get_anagrams("knudson")
    self.assertEqual(r, ['knudson'])

    _, r = self.anagrams2.get_anagrams("knuth")
    self.assertEqual(r, ['knuth'])

    _, r = self.anagrams2.get_anagrams("knutsen")
    self.assertEqual(r, ['knutsen'])

    _, r = self.anagrams2.get_anagrams("knutson")
    self.assertEqual(r, ['knutson'])

    _, r = self.anagrams2.get_anagrams("koala")
    self.assertEqual(r, ['koala'])

    _, r = self.anagrams2.get_anagrams("kobayashi")
    self.assertEqual(r, ['kobayashi'])

    _, r = self.anagrams2.get_anagrams("koch")
    self.assertEqual(r, ['koch'])

    _, r = self.anagrams2.get_anagrams("kochab")
    self.assertEqual(r, ['kochab'])

    _, r = self.anagrams2.get_anagrams("kodachrome")
    self.assertEqual(r, ['kodachrome'])

    _, r = self.anagrams2.get_anagrams("kodak")
    self.assertEqual(r, ['kodak'])

    _, r = self.anagrams2.get_anagrams("kodiak")
    self.assertEqual(r, ['kodiak'])

    _, r = self.anagrams2.get_anagrams("koenig")
    self.assertEqual(r, ['koenig'])

    _, r = self.anagrams2.get_anagrams("koenigsberg")
    self.assertEqual(r, ['koenigsberg'])

    _, r = self.anagrams2.get_anagrams("kohler")
    self.assertEqual(r, ['kohler'])

    _, r = self.anagrams2.get_anagrams("kong")
    self.assertEqual(r, ['kong'])

    _, r = self.anagrams2.get_anagrams("konrad")
    self.assertEqual(r, ['konrad'])

    _, r = self.anagrams2.get_anagrams("koppers")
    self.assertEqual(r, ['koppers'])

    _, r = self.anagrams2.get_anagrams("koran")
    self.assertEqual(r, ['akron', 'koran'])

    _, r = self.anagrams2.get_anagrams("korea")
    self.assertEqual(r, ['korea'])

    _, r = self.anagrams2.get_anagrams("korean")
    self.assertEqual(r, ['korean'])

    _, r = self.anagrams2.get_anagrams("koreans")
    self.assertEqual(r, ['koreans'])

    _, r = self.anagrams2.get_anagrams("kosher")
    self.assertEqual(r, ['kosher'])

    _, r = self.anagrams2.get_anagrams("kovacs")
    self.assertEqual(r, ['kovacs'])

    _, r = self.anagrams2.get_anagrams("kowalewski")
    self.assertEqual(r, ['kowalewski'])

    _, r = self.anagrams2.get_anagrams("kowalski")
    self.assertEqual(r, ['kowalski'])

    _, r = self.anagrams2.get_anagrams("kowloon")
    self.assertEqual(r, ['kowloon'])

    _, r = self.anagrams2.get_anagrams("kowtow")
    self.assertEqual(r, ['kowtow'])

    _, r = self.anagrams2.get_anagrams("kraemer")
    self.assertEqual(r, ['kraemer'])

    _, r = self.anagrams2.get_anagrams("krakatoa")
    self.assertEqual(r, ['krakatoa'])

    _, r = self.anagrams2.get_anagrams("krakow")
    self.assertEqual(r, ['krakow'])

    _, r = self.anagrams2.get_anagrams("kramer")
    self.assertEqual(r, ['kramer', 'marker', 'remark'])

    _, r = self.anagrams2.get_anagrams("krause")
    self.assertEqual(r, ['krause'])

    _, r = self.anagrams2.get_anagrams("krebs")
    self.assertEqual(r, ['krebs'])

    _, r = self.anagrams2.get_anagrams("kremlin")
    self.assertEqual(r, ['kremlin'])

    _, r = self.anagrams2.get_anagrams("kresge")
    self.assertEqual(r, ['greeks', 'kresge'])

    _, r = self.anagrams2.get_anagrams("krieger")
    self.assertEqual(r, ['krieger'])

    _, r = self.anagrams2.get_anagrams("krishna")
    self.assertEqual(r, ['krishna'])

    _, r = self.anagrams2.get_anagrams("kristin")
    self.assertEqual(r, ['kristin'])

    _, r = self.anagrams2.get_anagrams("kronecker")
    self.assertEqual(r, ['kronecker'])

    _, r = self.anagrams2.get_anagrams("krueger")
    self.assertEqual(r, ['krueger'])

    _, r = self.anagrams2.get_anagrams("kruger")
    self.assertEqual(r, ['kruger'])

    _, r = self.anagrams2.get_anagrams("kruse")
    self.assertEqual(r, ['kruse'])

    _, r = self.anagrams2.get_anagrams("ku")
    self.assertEqual(r, ['ku'])

    _, r = self.anagrams2.get_anagrams("kuala")
    self.assertEqual(r, ['kuala'])

    _, r = self.anagrams2.get_anagrams("kudo")
    self.assertEqual(r, ['kudo'])

    _, r = self.anagrams2.get_anagrams("kuenning")
    self.assertEqual(r, ['kuenning'])

    _, r = self.anagrams2.get_anagrams("kuhn")
    self.assertEqual(r, ['hunk', 'kuhn'])

    _, r = self.anagrams2.get_anagrams("kumar")
    self.assertEqual(r, ['kumar'])

    _, r = self.anagrams2.get_anagrams("kurd")
    self.assertEqual(r, ['kurd'])

    _, r = self.anagrams2.get_anagrams("kurdish")
    self.assertEqual(r, ['kurdish'])

    _, r = self.anagrams2.get_anagrams("kurt")
    self.assertEqual(r, ['kurt', 'truk'])

    _, r = self.anagrams2.get_anagrams("kuwait")
    self.assertEqual(r, ['kuwait'])

    _, r = self.anagrams2.get_anagrams("kuwaiti")
    self.assertEqual(r, ['kuwaiti'])

    _, r = self.anagrams2.get_anagrams("kyoto")
    self.assertEqual(r, ['kyoto', 'tokyo'])

    _, r = self.anagrams2.get_anagrams("lab")
    self.assertEqual(r, ['lab'])

    _, r = self.anagrams2.get_anagrams("laban")
    self.assertEqual(r, ['banal', 'laban', 'nabla'])

    _, r = self.anagrams2.get_anagrams("label")
    self.assertEqual(r, ['bella', 'label'])

    _, r = self.anagrams2.get_anagrams("labeled")
    self.assertEqual(r, ['labeled'])

    _, r = self.anagrams2.get_anagrams("labeling")
    self.assertEqual(r, ['labeling'])

    _, r = self.anagrams2.get_anagrams("labelled")
    self.assertEqual(r, ['labelled'])

    _, r = self.anagrams2.get_anagrams("labeller")
    self.assertEqual(r, ['labeller'])

    _, r = self.anagrams2.get_anagrams("labellers")
    self.assertEqual(r, ['labellers'])

    _, r = self.anagrams2.get_anagrams("labelling")
    self.assertEqual(r, ['labelling'])

    _, r = self.anagrams2.get_anagrams("labels")
    self.assertEqual(r, ['labels'])

    _, r = self.anagrams2.get_anagrams("labor")
    self.assertEqual(r, ['labor'])

    _, r = self.anagrams2.get_anagrams("laboratories")
    self.assertEqual(r, ['laboratories'])

    _, r = self.anagrams2.get_anagrams("laboratory")
    self.assertEqual(r, ['laboratory'])

    _, r = self.anagrams2.get_anagrams("labored")
    self.assertEqual(r, ['labored'])

    _, r = self.anagrams2.get_anagrams("laborer")
    self.assertEqual(r, ['laborer'])

    _, r = self.anagrams2.get_anagrams("laborers")
    self.assertEqual(r, ['laborers'])

    _, r = self.anagrams2.get_anagrams("laboring")
    self.assertEqual(r, ['laboring'])

    _, r = self.anagrams2.get_anagrams("laborings")
    self.assertEqual(r, ['laborings'])

    _, r = self.anagrams2.get_anagrams("laborious")
    self.assertEqual(r, ['laborious'])

    _, r = self.anagrams2.get_anagrams("laboriously")
    self.assertEqual(r, ['laboriously'])

    _, r = self.anagrams2.get_anagrams("labors")
    self.assertEqual(r, ['labors'])

    _, r = self.anagrams2.get_anagrams("labrador")
    self.assertEqual(r, ['labrador'])

    _, r = self.anagrams2.get_anagrams("labs")
    self.assertEqual(r, ['labs', 'slab'])

    _, r = self.anagrams2.get_anagrams("labyrinth")
    self.assertEqual(r, ['labyrinth'])

    _, r = self.anagrams2.get_anagrams("labyrinths")
    self.assertEqual(r, ['labyrinths'])

    _, r = self.anagrams2.get_anagrams("lac")
    self.assertEqual(r, ['lac'])

    _, r = self.anagrams2.get_anagrams("lace")
    self.assertEqual(r, ['alec', 'lace'])

    _, r = self.anagrams2.get_anagrams("laced")
    self.assertEqual(r, ['decal', 'laced'])

    _, r = self.anagrams2.get_anagrams("lacerate")
    self.assertEqual(r, ['lacerate'])

    _, r = self.anagrams2.get_anagrams("lacerated")
    self.assertEqual(r, ['lacerated'])

    _, r = self.anagrams2.get_anagrams("lacerates")
    self.assertEqual(r, ['lacerates'])

    _, r = self.anagrams2.get_anagrams("lacerating")
    self.assertEqual(r, ['lacerating'])

    _, r = self.anagrams2.get_anagrams("laceration")
    self.assertEqual(r, ['laceration'])

    _, r = self.anagrams2.get_anagrams("lacerations")
    self.assertEqual(r, ['lacerations'])

    _, r = self.anagrams2.get_anagrams("lacerta")
    self.assertEqual(r, ['lacerta'])

    _, r = self.anagrams2.get_anagrams("laces")
    self.assertEqual(r, ['laces', 'scale'])

    _, r = self.anagrams2.get_anagrams("lacey")
    self.assertEqual(r, ['lacey'])

    _, r = self.anagrams2.get_anagrams("lachesis")
    self.assertEqual(r, ['lachesis'])

    _, r = self.anagrams2.get_anagrams("lacing")
    self.assertEqual(r, ['lacing'])

    _, r = self.anagrams2.get_anagrams("lack")
    self.assertEqual(r, ['lack'])

    _, r = self.anagrams2.get_anagrams("lackawanna")
    self.assertEqual(r, ['lackawanna'])

    _, r = self.anagrams2.get_anagrams("lacked")
    self.assertEqual(r, ['lacked'])

    _, r = self.anagrams2.get_anagrams("lackey")
    self.assertEqual(r, ['ackley', 'lackey'])

    _, r = self.anagrams2.get_anagrams("lacking")
    self.assertEqual(r, ['lacking'])

    _, r = self.anagrams2.get_anagrams("lacks")
    self.assertEqual(r, ['lacks', 'slack'])

    _, r = self.anagrams2.get_anagrams("lacquer")
    self.assertEqual(r, ['lacquer'])

    _, r = self.anagrams2.get_anagrams("lacquered")
    self.assertEqual(r, ['lacquered'])

    _, r = self.anagrams2.get_anagrams("lacquers")
    self.assertEqual(r, ['lacquers'])

    _, r = self.anagrams2.get_anagrams("lacrosse")
    self.assertEqual(r, ['lacrosse'])

    _, r = self.anagrams2.get_anagrams("lacy")
    self.assertEqual(r, ['clay', 'lacy'])

    _, r = self.anagrams2.get_anagrams("lad")
    self.assertEqual(r, ['lad'])

    _, r = self.anagrams2.get_anagrams("ladder")
    self.assertEqual(r, ['ladder'])

    _, r = self.anagrams2.get_anagrams("laden")
    self.assertEqual(r, ['alden', 'laden'])

    _, r = self.anagrams2.get_anagrams("ladies")
    self.assertEqual(r, ['ideals', 'ladies', 'sailed'])

    _, r = self.anagrams2.get_anagrams("lading")
    self.assertEqual(r, ['lading'])

    _, r = self.anagrams2.get_anagrams("ladle")
    self.assertEqual(r, ['della', 'ladle'])

    _, r = self.anagrams2.get_anagrams("lads")
    self.assertEqual(r, ['lads'])

    _, r = self.anagrams2.get_anagrams("lady")
    self.assertEqual(r, ['daly', 'lady'])

    _, r = self.anagrams2.get_anagrams("ladylike")
    self.assertEqual(r, ['ladylike'])

    _, r = self.anagrams2.get_anagrams("lafayette")
    self.assertEqual(r, ['lafayette'])

    _, r = self.anagrams2.get_anagrams("lag")
    self.assertEqual(r, ['lag'])

    _, r = self.anagrams2.get_anagrams("lager")
    self.assertEqual(r, ['alger', 'glare', 'lager', 'large', 'regal'])

    _, r = self.anagrams2.get_anagrams("lagers")
    self.assertEqual(r, ['glares', 'lagers'])

    _, r = self.anagrams2.get_anagrams("lagoon")
    self.assertEqual(r, ['lagoon'])

    _, r = self.anagrams2.get_anagrams("lagoons")
    self.assertEqual(r, ['lagoons'])

    _, r = self.anagrams2.get_anagrams("lagos")
    self.assertEqual(r, ['goals', 'lagos'])

    _, r = self.anagrams2.get_anagrams("lagrange")
    self.assertEqual(r, ['lagrange'])

    _, r = self.anagrams2.get_anagrams("lagrangian")
    self.assertEqual(r, ['lagrangian'])

    _, r = self.anagrams2.get_anagrams("lags")
    self.assertEqual(r, ['lags'])

    _, r = self.anagrams2.get_anagrams("laguerre")
    self.assertEqual(r, ['laguerre'])

    _, r = self.anagrams2.get_anagrams("laguna")
    self.assertEqual(r, ['laguna'])

    _, r = self.anagrams2.get_anagrams("lahore")
    self.assertEqual(r, ['lahore'])

    _, r = self.anagrams2.get_anagrams("laid")
    self.assertEqual(r, ['dali', 'dial', 'laid'])

    _, r = self.anagrams2.get_anagrams("laidlaw")
    self.assertEqual(r, ['laidlaw'])

    _, r = self.anagrams2.get_anagrams("lain")
    self.assertEqual(r, ['lain', 'nail'])

    _, r = self.anagrams2.get_anagrams("lair")
    self.assertEqual(r, ['lair', 'liar', 'rail'])

    _, r = self.anagrams2.get_anagrams("lairs")
    self.assertEqual(r, ['lairs', 'liars', 'rails'])

    _, r = self.anagrams2.get_anagrams("laissez")
    self.assertEqual(r, ['laissez'])

    _, r = self.anagrams2.get_anagrams("lake")
    self.assertEqual(r, ['lake', 'leak'])

    _, r = self.anagrams2.get_anagrams("lakehurst")
    self.assertEqual(r, ['lakehurst'])

    _, r = self.anagrams2.get_anagrams("lakes")
    self.assertEqual(r, ['lakes', 'leaks'])

    _, r = self.anagrams2.get_anagrams("lakewood")
    self.assertEqual(r, ['lakewood'])

    _, r = self.anagrams2.get_anagrams("lamar")
    self.assertEqual(r, ['alarm', 'lamar'])

    _, r = self.anagrams2.get_anagrams("lamarck")
    self.assertEqual(r, ['lamarck'])

    _, r = self.anagrams2.get_anagrams("lamb")
    self.assertEqual(r, ['balm', 'lamb'])

    _, r = self.anagrams2.get_anagrams("lambda")
    self.assertEqual(r, ['lambda'])

    _, r = self.anagrams2.get_anagrams("lambdas")
    self.assertEqual(r, ['lambdas'])

    _, r = self.anagrams2.get_anagrams("lambert")
    self.assertEqual(r, ['lambert'])

    _, r = self.anagrams2.get_anagrams("lambs")
    self.assertEqual(r, ['balms', 'lambs'])

    _, r = self.anagrams2.get_anagrams("lame")
    self.assertEqual(r, ['lame', 'male', 'meal'])

    _, r = self.anagrams2.get_anagrams("lamed")
    self.assertEqual(r, ['lamed', 'medal'])

    _, r = self.anagrams2.get_anagrams("lamely")
    self.assertEqual(r, ['lamely'])

    _, r = self.anagrams2.get_anagrams("lameness")
    self.assertEqual(r, ['lameness', 'maleness', 'nameless', 'salesmen'])

    _, r = self.anagrams2.get_anagrams("lament")
    self.assertEqual(r, ['lament', 'mantel', 'mantle', 'mental'])

    _, r = self.anagrams2.get_anagrams("lamentable")
    self.assertEqual(r, ['lamentable'])

    _, r = self.anagrams2.get_anagrams("lamentation")
    self.assertEqual(r, ['lamentation'])

    _, r = self.anagrams2.get_anagrams("lamentations")
    self.assertEqual(r, ['lamentations'])

    _, r = self.anagrams2.get_anagrams("lamented")
    self.assertEqual(r, ['lamented'])

    _, r = self.anagrams2.get_anagrams("lamenting")
    self.assertEqual(r, ['alignment', 'lamenting'])

    _, r = self.anagrams2.get_anagrams("laments")
    self.assertEqual(r, ['laments', 'mantels', 'mantles'])

    _, r = self.anagrams2.get_anagrams("lames")
    self.assertEqual(r, ['lames', 'males', 'meals', 'salem', 'selma'])

    _, r = self.anagrams2.get_anagrams("laminar")
    self.assertEqual(r, ['laminar'])

    _, r = self.anagrams2.get_anagrams("laming")
    self.assertEqual(r, ['laming', 'malign'])

    _, r = self.anagrams2.get_anagrams("lamp")
    self.assertEqual(r, ['lamp', 'palm'])

    _, r = self.anagrams2.get_anagrams("lamplight")
    self.assertEqual(r, ['lamplight'])

    _, r = self.anagrams2.get_anagrams("lampoon")
    self.assertEqual(r, ['lampoon'])

    _, r = self.anagrams2.get_anagrams("lamport")
    self.assertEqual(r, ['lamport'])

    _, r = self.anagrams2.get_anagrams("lamprey")
    self.assertEqual(r, ['lamprey'])

    _, r = self.anagrams2.get_anagrams("lamps")
    self.assertEqual(r, ['lamps', 'palms', 'psalm'])

    _, r = self.anagrams2.get_anagrams("lana")
    self.assertEqual(r, ['alan', 'anal', 'lana'])

    _, r = self.anagrams2.get_anagrams("lancashire")
    self.assertEqual(r, ['lancashire'])

    _, r = self.anagrams2.get_anagrams("lancaster")
    self.assertEqual(r, ['ancestral', 'lancaster'])

    _, r = self.anagrams2.get_anagrams("lance")
    self.assertEqual(r, ['clean', 'lance'])

    _, r = self.anagrams2.get_anagrams("lanced")
    self.assertEqual(r, ['candle', 'lanced'])

    _, r = self.anagrams2.get_anagrams("lancelot")
    self.assertEqual(r, ['lancelot'])

    _, r = self.anagrams2.get_anagrams("lancer")
    self.assertEqual(r, ['lancer'])

    _, r = self.anagrams2.get_anagrams("lances")
    self.assertEqual(r, ['cleans', 'lances'])

    _, r = self.anagrams2.get_anagrams("land")
    self.assertEqual(r, ['land'])

    _, r = self.anagrams2.get_anagrams("landed")
    self.assertEqual(r, ['landed'])

    _, r = self.anagrams2.get_anagrams("lander")
    self.assertEqual(r, ['lander'])

    _, r = self.anagrams2.get_anagrams("landers")
    self.assertEqual(r, ['landers', 'slander', 'snarled'])

    _, r = self.anagrams2.get_anagrams("landfill")
    self.assertEqual(r, ['landfill'])

    _, r = self.anagrams2.get_anagrams("landing")
    self.assertEqual(r, ['landing'])

    _, r = self.anagrams2.get_anagrams("landings")
    self.assertEqual(r, ['landings'])

    _, r = self.anagrams2.get_anagrams("landis")
    self.assertEqual(r, ['island', 'landis'])

    _, r = self.anagrams2.get_anagrams("landladies")
    self.assertEqual(r, ['landladies'])

    _, r = self.anagrams2.get_anagrams("landlady")
    self.assertEqual(r, ['landlady'])

    _, r = self.anagrams2.get_anagrams("landlord")
    self.assertEqual(r, ['landlord'])

    _, r = self.anagrams2.get_anagrams("landlords")
    self.assertEqual(r, ['landlords'])

    _, r = self.anagrams2.get_anagrams("landmark")
    self.assertEqual(r, ['landmark'])

    _, r = self.anagrams2.get_anagrams("landmarks")
    self.assertEqual(r, ['landmarks'])

    _, r = self.anagrams2.get_anagrams("landowner")
    self.assertEqual(r, ['landowner'])

    _, r = self.anagrams2.get_anagrams("landowners")
    self.assertEqual(r, ['landowners'])

    _, r = self.anagrams2.get_anagrams("lands")
    self.assertEqual(r, ['lands'])

    _, r = self.anagrams2.get_anagrams("landscape")
    self.assertEqual(r, ['landscape'])

    _, r = self.anagrams2.get_anagrams("landscaped")
    self.assertEqual(r, ['landscaped'])

    _, r = self.anagrams2.get_anagrams("landscapes")
    self.assertEqual(r, ['landscapes'])

    _, r = self.anagrams2.get_anagrams("landscaping")
    self.assertEqual(r, ['landscaping'])

    _, r = self.anagrams2.get_anagrams("landslide")
    self.assertEqual(r, ['landslide'])

    _, r = self.anagrams2.get_anagrams("landwehr")
    self.assertEqual(r, ['landwehr'])

    _, r = self.anagrams2.get_anagrams("lane")
    self.assertEqual(r, ['lane', 'lean', 'lena', 'neal'])

    _, r = self.anagrams2.get_anagrams("lanes")
    self.assertEqual(r, ['lanes', 'leans'])

    _, r = self.anagrams2.get_anagrams("lang")
    self.assertEqual(r, ['lang'])

    _, r = self.anagrams2.get_anagrams("lange")
    self.assertEqual(r, ['angel', 'angle', 'galen', 'glean', 'lange'])

    _, r = self.anagrams2.get_anagrams("langeland")
    self.assertEqual(r, ['langeland'])

    _, r = self.anagrams2.get_anagrams("langford")
    self.assertEqual(r, ['langford'])

    _, r = self.anagrams2.get_anagrams("langley")
    self.assertEqual(r, ['langley'])

    _, r = self.anagrams2.get_anagrams("langmuir")
    self.assertEqual(r, ['langmuir'])

    _, r = self.anagrams2.get_anagrams("language")
    self.assertEqual(r, ['language'])

    _, r = self.anagrams2.get_anagrams("languages")
    self.assertEqual(r, ['languages'])

    _, r = self.anagrams2.get_anagrams("languid")
    self.assertEqual(r, ['languid'])

    _, r = self.anagrams2.get_anagrams("languidly")
    self.assertEqual(r, ['languidly'])

    _, r = self.anagrams2.get_anagrams("languidness")
    self.assertEqual(r, ['languidness'])

    _, r = self.anagrams2.get_anagrams("languish")
    self.assertEqual(r, ['languish'])

    _, r = self.anagrams2.get_anagrams("languished")
    self.assertEqual(r, ['languished'])

    _, r = self.anagrams2.get_anagrams("languishes")
    self.assertEqual(r, ['languishes'])

    _, r = self.anagrams2.get_anagrams("languishing")
    self.assertEqual(r, ['languishing'])

    _, r = self.anagrams2.get_anagrams("lanka")
    self.assertEqual(r, ['lanka'])

    _, r = self.anagrams2.get_anagrams("lansing")
    self.assertEqual(r, ['lansing'])

    _, r = self.anagrams2.get_anagrams("lantern")
    self.assertEqual(r, ['lantern'])

    _, r = self.anagrams2.get_anagrams("lanterns")
    self.assertEqual(r, ['lanterns'])

    _, r = self.anagrams2.get_anagrams("lao")
    self.assertEqual(r, ['lao'])

    _, r = self.anagrams2.get_anagrams("laocoon")
    self.assertEqual(r, ['laocoon'])

    _, r = self.anagrams2.get_anagrams("laos")
    self.assertEqual(r, ['also', 'laos'])

    _, r = self.anagrams2.get_anagrams("laotian")
    self.assertEqual(r, ['laotian'])

    _, r = self.anagrams2.get_anagrams("laotians")
    self.assertEqual(r, ['laotians'])

    _, r = self.anagrams2.get_anagrams("lap")
    self.assertEqual(r, ['lap', 'pal'])

    _, r = self.anagrams2.get_anagrams("lapel")
    self.assertEqual(r, ['lapel'])

    _, r = self.anagrams2.get_anagrams("lapels")
    self.assertEqual(r, ['lapels'])

    _, r = self.anagrams2.get_anagrams("laplace")
    self.assertEqual(r, ['laplace'])

    _, r = self.anagrams2.get_anagrams("laplacian")
    self.assertEqual(r, ['laplacian'])

    _, r = self.anagrams2.get_anagrams("lapping")
    self.assertEqual(r, ['lapping'])

    _, r = self.anagrams2.get_anagrams("laps")
    self.assertEqual(r, ['alps', 'laps', 'pals', 'slap'])

    _, r = self.anagrams2.get_anagrams("lapse")
    self.assertEqual(r, ['lapse', 'leaps', 'pales', 'peals', 'pleas'])

    _, r = self.anagrams2.get_anagrams("lapsed")
    self.assertEqual(r, ['lapsed', 'pleads'])

    _, r = self.anagrams2.get_anagrams("lapses")
    self.assertEqual(r, ['lapses'])

    _, r = self.anagrams2.get_anagrams("lapsing")
    self.assertEqual(r, ['lapsing', 'sapling'])

    _, r = self.anagrams2.get_anagrams("laramie")
    self.assertEqual(r, ['laramie'])

    _, r = self.anagrams2.get_anagrams("lard")
    self.assertEqual(r, ['lard'])

    _, r = self.anagrams2.get_anagrams("larder")
    self.assertEqual(r, ['larder'])

    _, r = self.anagrams2.get_anagrams("laredo")
    self.assertEqual(r, ['laredo', 'loader', 'ordeal', 'reload'])

    _, r = self.anagrams2.get_anagrams("lares")
    self.assertEqual(r, ['earls', 'lares', 'laser', 'reals'])

    _, r = self.anagrams2.get_anagrams("large")
    self.assertEqual(r, ['alger', 'glare', 'lager', 'large', 'regal'])

    _, r = self.anagrams2.get_anagrams("largely")
    self.assertEqual(r, ['allergy', 'gallery', 'largely', 'regally'])

    _, r = self.anagrams2.get_anagrams("largeness")
    self.assertEqual(r, ['largeness'])

    _, r = self.anagrams2.get_anagrams("larger")
    self.assertEqual(r, ['larger'])

    _, r = self.anagrams2.get_anagrams("largest")
    self.assertEqual(r, ['largest'])

    _, r = self.anagrams2.get_anagrams("lark")
    self.assertEqual(r, ['karl', 'lark'])

    _, r = self.anagrams2.get_anagrams("larkin")
    self.assertEqual(r, ['larkin'])

    _, r = self.anagrams2.get_anagrams("larks")
    self.assertEqual(r, ['larks'])

    _, r = self.anagrams2.get_anagrams("larry")
    self.assertEqual(r, ['larry'])

    _, r = self.anagrams2.get_anagrams("lars")
    self.assertEqual(r, ['lars'])

    _, r = self.anagrams2.get_anagrams("larsen")
    self.assertEqual(r, ['larsen', 'learns'])

    _, r = self.anagrams2.get_anagrams("larson")
    self.assertEqual(r, ['larson'])

    _, r = self.anagrams2.get_anagrams("larva")
    self.assertEqual(r, ['larva'])

    _, r = self.anagrams2.get_anagrams("larvae")
    self.assertEqual(r, ['larvae'])

    _, r = self.anagrams2.get_anagrams("larynx")
    self.assertEqual(r, ['larynx'])

    _, r = self.anagrams2.get_anagrams("lascivious")
    self.assertEqual(r, ['lascivious'])

    _, r = self.anagrams2.get_anagrams("laser")
    self.assertEqual(r, ['earls', 'lares', 'laser', 'reals'])

    _, r = self.anagrams2.get_anagrams("lasers")
    self.assertEqual(r, ['lasers'])

    _, r = self.anagrams2.get_anagrams("lash")
    self.assertEqual(r, ['lash'])

    _, r = self.anagrams2.get_anagrams("lashed")
    self.assertEqual(r, ['lashed'])

    _, r = self.anagrams2.get_anagrams("lashes")
    self.assertEqual(r, ['hassle', 'lashes'])

    _, r = self.anagrams2.get_anagrams("lashing")
    self.assertEqual(r, ['lashing'])

    _, r = self.anagrams2.get_anagrams("lashings")
    self.assertEqual(r, ['lashings', 'slashing'])

    _, r = self.anagrams2.get_anagrams("lass")
    self.assertEqual(r, ['lass'])

    _, r = self.anagrams2.get_anagrams("lasses")
    self.assertEqual(r, ['lasses'])

    _, r = self.anagrams2.get_anagrams("lasso")
    self.assertEqual(r, ['lasso'])

    _, r = self.anagrams2.get_anagrams("last")
    self.assertEqual(r, ['last', 'salt', 'slat'])

    _, r = self.anagrams2.get_anagrams("lasted")
    self.assertEqual(r, ['deltas', 'lasted', 'salted', 'slated'])

    _, r = self.anagrams2.get_anagrams("lasting")
    self.assertEqual(r, ['lasting', 'salting'])

    _, r = self.anagrams2.get_anagrams("lastly")
    self.assertEqual(r, ['lastly'])

    _, r = self.anagrams2.get_anagrams("lasts")
    self.assertEqual(r, ['lasts', 'salts', 'slats'])

    _, r = self.anagrams2.get_anagrams("laszlo")
    self.assertEqual(r, ['laszlo'])

    _, r = self.anagrams2.get_anagrams("latch")
    self.assertEqual(r, ['latch'])

    _, r = self.anagrams2.get_anagrams("latched")
    self.assertEqual(r, ['latched'])

    _, r = self.anagrams2.get_anagrams("latches")
    self.assertEqual(r, ['latches', 'satchel'])

    _, r = self.anagrams2.get_anagrams("latching")
    self.assertEqual(r, ['latching'])

    _, r = self.anagrams2.get_anagrams("late")
    self.assertEqual(r, ['late', 'tale'])

    _, r = self.anagrams2.get_anagrams("lately")
    self.assertEqual(r, ['lately'])

    _, r = self.anagrams2.get_anagrams("latency")
    self.assertEqual(r, ['latency'])

    _, r = self.anagrams2.get_anagrams("lateness")
    self.assertEqual(r, ['lateness'])

    _, r = self.anagrams2.get_anagrams("latent")
    self.assertEqual(r, ['latent', 'talent'])

    _, r = self.anagrams2.get_anagrams("later")
    self.assertEqual(r, ['alert', 'alter', 'later'])

    _, r = self.anagrams2.get_anagrams("lateral")
    self.assertEqual(r, ['lateral'])

    _, r = self.anagrams2.get_anagrams("laterally")
    self.assertEqual(r, ['laterally'])

    _, r = self.anagrams2.get_anagrams("lateran")
    self.assertEqual(r, ['lateran'])

    _, r = self.anagrams2.get_anagrams("latest")
    self.assertEqual(r, ['latest'])

    _, r = self.anagrams2.get_anagrams("latex")
    self.assertEqual(r, ['exalt', 'latex'])

    _, r = self.anagrams2.get_anagrams("lathe")
    self.assertEqual(r, ['lathe'])

    _, r = self.anagrams2.get_anagrams("lathrop")
    self.assertEqual(r, ['lathrop'])

    _, r = self.anagrams2.get_anagrams("latin")
    self.assertEqual(r, ['latin'])

    _, r = self.anagrams2.get_anagrams("latinate")
    self.assertEqual(r, ['latinate'])

    _, r = self.anagrams2.get_anagrams("latinity")
    self.assertEqual(r, ['latinity'])

    _, r = self.anagrams2.get_anagrams("latinization")
    self.assertEqual(r, ['latinization'])

    _, r = self.anagrams2.get_anagrams("latinizations")
    self.assertEqual(r, ['latinizations'])

    _, r = self.anagrams2.get_anagrams("latinize")
    self.assertEqual(r, ['latinize'])

    _, r = self.anagrams2.get_anagrams("latinized")
    self.assertEqual(r, ['latinized'])

    _, r = self.anagrams2.get_anagrams("latinizer")
    self.assertEqual(r, ['latinizer'])

    _, r = self.anagrams2.get_anagrams("latinizers")
    self.assertEqual(r, ['latinizers'])

    _, r = self.anagrams2.get_anagrams("latinizes")
    self.assertEqual(r, ['latinizes'])

    _, r = self.anagrams2.get_anagrams("latinizing")
    self.assertEqual(r, ['latinizing'])

    _, r = self.anagrams2.get_anagrams("latitude")
    self.assertEqual(r, ['altitude', 'latitude'])

    _, r = self.anagrams2.get_anagrams("latitudes")
    self.assertEqual(r, ['altitudes', 'latitudes'])

    _, r = self.anagrams2.get_anagrams("latrine")
    self.assertEqual(r, ['latrine', 'reliant', 'retinal'])

    _, r = self.anagrams2.get_anagrams("latrines")
    self.assertEqual(r, ['latrines'])

    _, r = self.anagrams2.get_anagrams("latrobe")
    self.assertEqual(r, ['alberto', 'bloater', 'latrobe'])

    _, r = self.anagrams2.get_anagrams("latter")
    self.assertEqual(r, ['latter', 'rattle'])

    _, r = self.anagrams2.get_anagrams("latterly")
    self.assertEqual(r, ['latterly'])

    _, r = self.anagrams2.get_anagrams("lattice")
    self.assertEqual(r, ['lattice', 'tactile'])

    _, r = self.anagrams2.get_anagrams("lattices")
    self.assertEqual(r, ['lattices'])

    _, r = self.anagrams2.get_anagrams("lattimer")
    self.assertEqual(r, ['lattimer'])

    _, r = self.anagrams2.get_anagrams("latvia")
    self.assertEqual(r, ['latvia'])

    _, r = self.anagrams2.get_anagrams("laudable")
    self.assertEqual(r, ['laudable'])

    _, r = self.anagrams2.get_anagrams("lauderdale")
    self.assertEqual(r, ['lauderdale'])

    _, r = self.anagrams2.get_anagrams("laue")
    self.assertEqual(r, ['laue'])

    _, r = self.anagrams2.get_anagrams("laugh")
    self.assertEqual(r, ['laugh'])

    _, r = self.anagrams2.get_anagrams("laughable")
    self.assertEqual(r, ['laughable'])

    _, r = self.anagrams2.get_anagrams("laughably")
    self.assertEqual(r, ['laughably'])

    _, r = self.anagrams2.get_anagrams("laughed")
    self.assertEqual(r, ['laughed'])

    _, r = self.anagrams2.get_anagrams("laughing")
    self.assertEqual(r, ['laughing'])

    _, r = self.anagrams2.get_anagrams("laughingly")
    self.assertEqual(r, ['laughingly'])

    _, r = self.anagrams2.get_anagrams("laughingstock")
    self.assertEqual(r, ['laughingstock'])

    _, r = self.anagrams2.get_anagrams("laughlin")
    self.assertEqual(r, ['laughlin'])

    _, r = self.anagrams2.get_anagrams("laughs")
    self.assertEqual(r, ['laughs'])

    _, r = self.anagrams2.get_anagrams("laughter")
    self.assertEqual(r, ['laughter'])

    _, r = self.anagrams2.get_anagrams("launch")
    self.assertEqual(r, ['launch'])

    _, r = self.anagrams2.get_anagrams("launched")
    self.assertEqual(r, ['launched'])

    _, r = self.anagrams2.get_anagrams("launcher")
    self.assertEqual(r, ['launcher'])

    _, r = self.anagrams2.get_anagrams("launches")
    self.assertEqual(r, ['launches'])

    _, r = self.anagrams2.get_anagrams("launching")
    self.assertEqual(r, ['launching'])

    _, r = self.anagrams2.get_anagrams("launchings")
    self.assertEqual(r, ['launchings'])

    _, r = self.anagrams2.get_anagrams("launder")
    self.assertEqual(r, ['launder'])

    _, r = self.anagrams2.get_anagrams("laundered")
    self.assertEqual(r, ['laundered'])

    _, r = self.anagrams2.get_anagrams("launderer")
    self.assertEqual(r, ['launderer'])

    _, r = self.anagrams2.get_anagrams("laundering")
    self.assertEqual(r, ['laundering'])

    _, r = self.anagrams2.get_anagrams("launderings")
    self.assertEqual(r, ['launderings'])

    _, r = self.anagrams2.get_anagrams("launders")
    self.assertEqual(r, ['launders'])

    _, r = self.anagrams2.get_anagrams("laundromat")
    self.assertEqual(r, ['laundromat'])

    _, r = self.anagrams2.get_anagrams("laundromats")
    self.assertEqual(r, ['laundromats'])

    _, r = self.anagrams2.get_anagrams("laundry")
    self.assertEqual(r, ['laundry'])

    _, r = self.anagrams2.get_anagrams("laureate")
    self.assertEqual(r, ['laureate'])

    _, r = self.anagrams2.get_anagrams("laurel")
    self.assertEqual(r, ['allure', 'laurel'])

    _, r = self.anagrams2.get_anagrams("laurels")
    self.assertEqual(r, ['laurels'])

    _, r = self.anagrams2.get_anagrams("lauren")
    self.assertEqual(r, ['lauren', 'neural', 'unreal'])

    _, r = self.anagrams2.get_anagrams("laurence")
    self.assertEqual(r, ['laurence'])

    _, r = self.anagrams2.get_anagrams("laurent")
    self.assertEqual(r, ['laurent', 'neutral', 'renault'])

    _, r = self.anagrams2.get_anagrams("laurentian")
    self.assertEqual(r, ['laurentian'])

    _, r = self.anagrams2.get_anagrams("laurie")
    self.assertEqual(r, ['laurie'])

    _, r = self.anagrams2.get_anagrams("lausanne")
    self.assertEqual(r, ['lausanne'])

    _, r = self.anagrams2.get_anagrams("lava")
    self.assertEqual(r, ['alva', 'lava'])

    _, r = self.anagrams2.get_anagrams("lavatories")
    self.assertEqual(r, ['lavatories'])

    _, r = self.anagrams2.get_anagrams("lavatory")
    self.assertEqual(r, ['lavatory'])

    _, r = self.anagrams2.get_anagrams("lavender")
    self.assertEqual(r, ['lavender', 'vreeland'])

    _, r = self.anagrams2.get_anagrams("lavish")
    self.assertEqual(r, ['lavish'])

    _, r = self.anagrams2.get_anagrams("lavished")
    self.assertEqual(r, ['lavished'])

    _, r = self.anagrams2.get_anagrams("lavishing")
    self.assertEqual(r, ['lavishing'])

    _, r = self.anagrams2.get_anagrams("lavishly")
    self.assertEqual(r, ['lavishly'])

    _, r = self.anagrams2.get_anagrams("lavoisier")
    self.assertEqual(r, ['lavoisier'])

    _, r = self.anagrams2.get_anagrams("law")
    self.assertEqual(r, ['awl', 'law'])

    _, r = self.anagrams2.get_anagrams("lawbreaker")
    self.assertEqual(r, ['lawbreaker'])

    _, r = self.anagrams2.get_anagrams("lawford")
    self.assertEqual(r, ['lawford', 'waldorf', 'walford'])

    _, r = self.anagrams2.get_anagrams("lawful")
    self.assertEqual(r, ['lawful'])

    _, r = self.anagrams2.get_anagrams("lawfully")
    self.assertEqual(r, ['lawfully'])

    _, r = self.anagrams2.get_anagrams("lawgiver")
    self.assertEqual(r, ['lawgiver'])

    _, r = self.anagrams2.get_anagrams("lawless")
    self.assertEqual(r, ['lawless'])

    _, r = self.anagrams2.get_anagrams("lawlessness")
    self.assertEqual(r, ['lawlessness'])

    _, r = self.anagrams2.get_anagrams("lawn")
    self.assertEqual(r, ['lawn'])

    _, r = self.anagrams2.get_anagrams("lawns")
    self.assertEqual(r, ['lawns'])

    _, r = self.anagrams2.get_anagrams("lawrence")
    self.assertEqual(r, ['lawrence'])

    _, r = self.anagrams2.get_anagrams("lawrenceville")
    self.assertEqual(r, ['lawrenceville'])

    _, r = self.anagrams2.get_anagrams("laws")
    self.assertEqual(r, ['awls', 'laws'])

    _, r = self.anagrams2.get_anagrams("lawson")
    self.assertEqual(r, ['lawson'])

    _, r = self.anagrams2.get_anagrams("lawsuit")
    self.assertEqual(r, ['lawsuit'])

    _, r = self.anagrams2.get_anagrams("lawsuits")
    self.assertEqual(r, ['lawsuits'])

    _, r = self.anagrams2.get_anagrams("lawyer")
    self.assertEqual(r, ['lawyer'])

    _, r = self.anagrams2.get_anagrams("lawyers")
    self.assertEqual(r, ['lawyers'])

    _, r = self.anagrams2.get_anagrams("lax")
    self.assertEqual(r, ['lax'])

    _, r = self.anagrams2.get_anagrams("laxative")
    self.assertEqual(r, ['laxative'])

    _, r = self.anagrams2.get_anagrams("lay")
    self.assertEqual(r, ['lay'])

    _, r = self.anagrams2.get_anagrams("layer")
    self.assertEqual(r, ['early', 'layer', 'leary', 'relay'])

    _, r = self.anagrams2.get_anagrams("layered")
    self.assertEqual(r, ['layered', 'relayed'])

    _, r = self.anagrams2.get_anagrams("layering")
    self.assertEqual(r, ['layering', 'relaying'])

    _, r = self.anagrams2.get_anagrams("layers")
    self.assertEqual(r, ['layers', 'relays', 'slayer'])

    _, r = self.anagrams2.get_anagrams("laying")
    self.assertEqual(r, ['laying'])

    _, r = self.anagrams2.get_anagrams("layman")
    self.assertEqual(r, ['layman'])

    _, r = self.anagrams2.get_anagrams("laymen")
    self.assertEqual(r, ['laymen', 'manley', 'meanly', 'namely'])

    _, r = self.anagrams2.get_anagrams("layoff")
    self.assertEqual(r, ['layoff'])

    _, r = self.anagrams2.get_anagrams("layoffs")
    self.assertEqual(r, ['layoffs'])

    _, r = self.anagrams2.get_anagrams("layout")
    self.assertEqual(r, ['layout', 'outlay'])

    _, r = self.anagrams2.get_anagrams("layouts")
    self.assertEqual(r, ['layouts', 'outlays'])

    _, r = self.anagrams2.get_anagrams("lays")
    self.assertEqual(r, ['lays', 'slay'])

    _, r = self.anagrams2.get_anagrams("layton")
    self.assertEqual(r, ['layton'])

    _, r = self.anagrams2.get_anagrams("lazarus")
    self.assertEqual(r, ['lazarus'])

    _, r = self.anagrams2.get_anagrams("lazed")
    self.assertEqual(r, ['lazed'])

    _, r = self.anagrams2.get_anagrams("lazier")
    self.assertEqual(r, ['lazier'])

    _, r = self.anagrams2.get_anagrams("laziest")
    self.assertEqual(r, ['laziest'])

    _, r = self.anagrams2.get_anagrams("lazily")
    self.assertEqual(r, ['lazily'])

    _, r = self.anagrams2.get_anagrams("laziness")
    self.assertEqual(r, ['laziness'])

    _, r = self.anagrams2.get_anagrams("lazing")
    self.assertEqual(r, ['lazing'])

    _, r = self.anagrams2.get_anagrams("lazy")
    self.assertEqual(r, ['lazy'])

    _, r = self.anagrams2.get_anagrams("lazybones")
    self.assertEqual(r, ['lazybones'])

    _, r = self.anagrams2.get_anagrams("lead")
    self.assertEqual(r, ['dale', 'deal', 'lead'])

    _, r = self.anagrams2.get_anagrams("leaded")
    self.assertEqual(r, ['leaded'])

    _, r = self.anagrams2.get_anagrams("leaden")
    self.assertEqual(r, ['leaden', 'leaned'])

    _, r = self.anagrams2.get_anagrams("leader")
    self.assertEqual(r, ['dealer', 'leader'])

    _, r = self.anagrams2.get_anagrams("leaders")
    self.assertEqual(r, ['dealers', 'leaders'])

    _, r = self.anagrams2.get_anagrams("leadership")
    self.assertEqual(r, ['dealership', 'leadership'])

    _, r = self.anagrams2.get_anagrams("leaderships")
    self.assertEqual(r, ['leaderships'])

    _, r = self.anagrams2.get_anagrams("leading")
    self.assertEqual(r, ['aligned', 'dealing', 'leading'])

    _, r = self.anagrams2.get_anagrams("leadings")
    self.assertEqual(r, ['dealings', 'leadings', 'signaled'])

    _, r = self.anagrams2.get_anagrams("leads")
    self.assertEqual(r, ['dales', 'deals', 'leads'])

    _, r = self.anagrams2.get_anagrams("leaf")
    self.assertEqual(r, ['flea', 'leaf'])

    _, r = self.anagrams2.get_anagrams("leafed")
    self.assertEqual(r, ['leafed'])

    _, r = self.anagrams2.get_anagrams("leafiest")
    self.assertEqual(r, ['leafiest'])

    _, r = self.anagrams2.get_anagrams("leafing")
    self.assertEqual(r, ['leafing'])

    _, r = self.anagrams2.get_anagrams("leafless")
    self.assertEqual(r, ['leafless'])

    _, r = self.anagrams2.get_anagrams("leaflet")
    self.assertEqual(r, ['leaflet'])

    _, r = self.anagrams2.get_anagrams("leaflets")
    self.assertEqual(r, ['leaflets'])

    _, r = self.anagrams2.get_anagrams("leafy")
    self.assertEqual(r, ['leafy'])

    _, r = self.anagrams2.get_anagrams("league")
    self.assertEqual(r, ['league'])

    _, r = self.anagrams2.get_anagrams("leagued")
    self.assertEqual(r, ['leagued'])

    _, r = self.anagrams2.get_anagrams("leaguer")
    self.assertEqual(r, ['leaguer'])

    _, r = self.anagrams2.get_anagrams("leaguers")
    self.assertEqual(r, ['leaguers'])

    _, r = self.anagrams2.get_anagrams("leagues")
    self.assertEqual(r, ['leagues'])

    _, r = self.anagrams2.get_anagrams("leak")
    self.assertEqual(r, ['lake', 'leak'])

    _, r = self.anagrams2.get_anagrams("leakage")
    self.assertEqual(r, ['leakage'])

    _, r = self.anagrams2.get_anagrams("leakages")
    self.assertEqual(r, ['leakages'])

    _, r = self.anagrams2.get_anagrams("leaked")
    self.assertEqual(r, ['leaked'])

    _, r = self.anagrams2.get_anagrams("leaking")
    self.assertEqual(r, ['leaking', 'linkage'])

    _, r = self.anagrams2.get_anagrams("leaks")
    self.assertEqual(r, ['lakes', 'leaks'])

    _, r = self.anagrams2.get_anagrams("leaky")
    self.assertEqual(r, ['leaky'])

    _, r = self.anagrams2.get_anagrams("lean")
    self.assertEqual(r, ['lane', 'lean', 'lena', 'neal'])

    _, r = self.anagrams2.get_anagrams("leander")
    self.assertEqual(r, ['darlene', 'leander', 'learned'])

    _, r = self.anagrams2.get_anagrams("leaned")
    self.assertEqual(r, ['leaden', 'leaned'])

    _, r = self.anagrams2.get_anagrams("leaner")
    self.assertEqual(r, ['arlene', 'leaner'])

    _, r = self.anagrams2.get_anagrams("leanest")
    self.assertEqual(r, ['leanest'])

    _, r = self.anagrams2.get_anagrams("leaning")
    self.assertEqual(r, ['leaning'])

    _, r = self.anagrams2.get_anagrams("leanness")
    self.assertEqual(r, ['leanness'])

    _, r = self.anagrams2.get_anagrams("leans")
    self.assertEqual(r, ['lanes', 'leans'])

    _, r = self.anagrams2.get_anagrams("leap")
    self.assertEqual(r, ['leap', 'pale', 'peal', 'plea'])

    _, r = self.anagrams2.get_anagrams("leaped")
    self.assertEqual(r, ['leaped', 'pealed'])

    _, r = self.anagrams2.get_anagrams("leapfrog")
    self.assertEqual(r, ['leapfrog'])

    _, r = self.anagrams2.get_anagrams("leaping")
    self.assertEqual(r, ['leaping', 'pealing'])

    _, r = self.anagrams2.get_anagrams("leaps")
    self.assertEqual(r, ['lapse', 'leaps', 'pales', 'peals', 'pleas'])

    _, r = self.anagrams2.get_anagrams("leapt")
    self.assertEqual(r, ['leapt', 'petal', 'plate', 'pleat'])

    _, r = self.anagrams2.get_anagrams("lear")
    self.assertEqual(r, ['earl', 'lear', 'real'])

    _, r = self.anagrams2.get_anagrams("learn")
    self.assertEqual(r, ['arlen', 'learn', 'renal'])

    _, r = self.anagrams2.get_anagrams("learned")
    self.assertEqual(r, ['darlene', 'leander', 'learned'])

    _, r = self.anagrams2.get_anagrams("learner")
    self.assertEqual(r, ['learner'])

    _, r = self.anagrams2.get_anagrams("learners")
    self.assertEqual(r, ['learners'])

    _, r = self.anagrams2.get_anagrams("learning")
    self.assertEqual(r, ['learning'])

    _, r = self.anagrams2.get_anagrams("learns")
    self.assertEqual(r, ['larsen', 'learns'])

    _, r = self.anagrams2.get_anagrams("leary")
    self.assertEqual(r, ['early', 'layer', 'leary', 'relay'])

    _, r = self.anagrams2.get_anagrams("lease")
    self.assertEqual(r, ['easel', 'lease'])

    _, r = self.anagrams2.get_anagrams("leased")
    self.assertEqual(r, ['leased', 'sealed'])

    _, r = self.anagrams2.get_anagrams("leases")
    self.assertEqual(r, ['leases'])

    _, r = self.anagrams2.get_anagrams("leash")
    self.assertEqual(r, ['heals', 'leash', 'shale'])

    _, r = self.anagrams2.get_anagrams("leashes")
    self.assertEqual(r, ['leashes'])

    _, r = self.anagrams2.get_anagrams("leasing")
    self.assertEqual(r, ['leasing', 'sealing'])

    _, r = self.anagrams2.get_anagrams("least")
    self.assertEqual(r, ['least', 'slate', 'stale', 'steal', 'tales'])

    _, r = self.anagrams2.get_anagrams("leather")
    self.assertEqual(r, ['leather'])

    _, r = self.anagrams2.get_anagrams("leathered")
    self.assertEqual(r, ['leathered'])

    _, r = self.anagrams2.get_anagrams("leathern")
    self.assertEqual(r, ['leathern'])

    _, r = self.anagrams2.get_anagrams("leatherneck")
    self.assertEqual(r, ['leatherneck'])

    _, r = self.anagrams2.get_anagrams("leathers")
    self.assertEqual(r, ['leathers'])

    _, r = self.anagrams2.get_anagrams("leave")
    self.assertEqual(r, ['leave'])

    _, r = self.anagrams2.get_anagrams("leaved")
    self.assertEqual(r, ['leaved'])

    _, r = self.anagrams2.get_anagrams("leaven")
    self.assertEqual(r, ['leaven'])

    _, r = self.anagrams2.get_anagrams("leavened")
    self.assertEqual(r, ['leavened'])

    _, r = self.anagrams2.get_anagrams("leavening")
    self.assertEqual(r, ['leavening'])

    _, r = self.anagrams2.get_anagrams("leavenworth")
    self.assertEqual(r, ['leavenworth'])

    _, r = self.anagrams2.get_anagrams("leaves")
    self.assertEqual(r, ['leaves'])

    _, r = self.anagrams2.get_anagrams("leaving")
    self.assertEqual(r, ['leaving'])

    _, r = self.anagrams2.get_anagrams("leavings")
    self.assertEqual(r, ['leavings'])

    _, r = self.anagrams2.get_anagrams("lebanese")
    self.assertEqual(r, ['lebanese'])

    _, r = self.anagrams2.get_anagrams("lebanon")
    self.assertEqual(r, ['lebanon'])

    _, r = self.anagrams2.get_anagrams("lebesgue")
    self.assertEqual(r, ['lebesgue'])

    _, r = self.anagrams2.get_anagrams("lechery")
    self.assertEqual(r, ['lechery'])

    _, r = self.anagrams2.get_anagrams("lecture")
    self.assertEqual(r, ['lecture'])

    _, r = self.anagrams2.get_anagrams("lectured")
    self.assertEqual(r, ['lectured'])

    _, r = self.anagrams2.get_anagrams("lecturer")
    self.assertEqual(r, ['lecturer'])

    _, r = self.anagrams2.get_anagrams("lecturers")
    self.assertEqual(r, ['lecturers'])

    _, r = self.anagrams2.get_anagrams("lectures")
    self.assertEqual(r, ['cruelest', 'lectures'])

    _, r = self.anagrams2.get_anagrams("lecturing")
    self.assertEqual(r, ['lecturing'])

    _, r = self.anagrams2.get_anagrams("led")
    self.assertEqual(r, ['del', 'led'])

    _, r = self.anagrams2.get_anagrams("ledge")
    self.assertEqual(r, ['ledge'])

    _, r = self.anagrams2.get_anagrams("ledger")
    self.assertEqual(r, ['ledger'])

    _, r = self.anagrams2.get_anagrams("ledgers")
    self.assertEqual(r, ['ledgers'])

    _, r = self.anagrams2.get_anagrams("ledges")
    self.assertEqual(r, ['ledges', 'sledge'])

    _, r = self.anagrams2.get_anagrams("lee")
    self.assertEqual(r, ['eel', 'lee'])

    _, r = self.anagrams2.get_anagrams("leech")
    self.assertEqual(r, ['leech'])

    _, r = self.anagrams2.get_anagrams("leeches")
    self.assertEqual(r, ['leeches'])

    _, r = self.anagrams2.get_anagrams("leeds")
    self.assertEqual(r, ['leeds'])

    _, r = self.anagrams2.get_anagrams("leek")
    self.assertEqual(r, ['keel', 'leek'])

    _, r = self.anagrams2.get_anagrams("leer")
    self.assertEqual(r, ['leer', 'reel'])

    _, r = self.anagrams2.get_anagrams("leery")
    self.assertEqual(r, ['leery'])

    _, r = self.anagrams2.get_anagrams("lees")
    self.assertEqual(r, ['eels', 'else', 'lees'])

    _, r = self.anagrams2.get_anagrams("leeuwenhoek")
    self.assertEqual(r, ['leeuwenhoek'])

    _, r = self.anagrams2.get_anagrams("leeward")
    self.assertEqual(r, ['leeward'])

    _, r = self.anagrams2.get_anagrams("leeway")
    self.assertEqual(r, ['leeway'])

    _, r = self.anagrams2.get_anagrams("left")
    self.assertEqual(r, ['felt', 'left'])

    _, r = self.anagrams2.get_anagrams("leftist")
    self.assertEqual(r, ['leftist'])

    _, r = self.anagrams2.get_anagrams("leftists")
    self.assertEqual(r, ['leftists'])

    _, r = self.anagrams2.get_anagrams("leftmost")
    self.assertEqual(r, ['leftmost'])

    _, r = self.anagrams2.get_anagrams("leftover")
    self.assertEqual(r, ['leftover'])

    _, r = self.anagrams2.get_anagrams("leftovers")
    self.assertEqual(r, ['leftovers'])

    _, r = self.anagrams2.get_anagrams("leftward")
    self.assertEqual(r, ['leftward'])

    _, r = self.anagrams2.get_anagrams("leg")
    self.assertEqual(r, ['gel', 'leg'])

    _, r = self.anagrams2.get_anagrams("legacies")
    self.assertEqual(r, ['legacies'])

    _, r = self.anagrams2.get_anagrams("legacy")
    self.assertEqual(r, ['legacy'])

    _, r = self.anagrams2.get_anagrams("legal")
    self.assertEqual(r, ['legal'])

    _, r = self.anagrams2.get_anagrams("legality")
    self.assertEqual(r, ['legality'])

    _, r = self.anagrams2.get_anagrams("legalization")
    self.assertEqual(r, ['legalization'])

    _, r = self.anagrams2.get_anagrams("legalize")
    self.assertEqual(r, ['legalize'])

    _, r = self.anagrams2.get_anagrams("legalized")
    self.assertEqual(r, ['legalized'])

    _, r = self.anagrams2.get_anagrams("legalizes")
    self.assertEqual(r, ['legalizes'])

    _, r = self.anagrams2.get_anagrams("legalizing")
    self.assertEqual(r, ['legalizing'])

    _, r = self.anagrams2.get_anagrams("legally")
    self.assertEqual(r, ['legally'])

    _, r = self.anagrams2.get_anagrams("legend")
    self.assertEqual(r, ['legend'])

    _, r = self.anagrams2.get_anagrams("legendary")
    self.assertEqual(r, ['legendary'])

    _, r = self.anagrams2.get_anagrams("legendre")
    self.assertEqual(r, ['legendre'])

    _, r = self.anagrams2.get_anagrams("legends")
    self.assertEqual(r, ['legends'])

    _, r = self.anagrams2.get_anagrams("leger")
    self.assertEqual(r, ['leger'])

    _, r = self.anagrams2.get_anagrams("legers")
    self.assertEqual(r, ['legers'])

    _, r = self.anagrams2.get_anagrams("legged")
    self.assertEqual(r, ['legged'])

    _, r = self.anagrams2.get_anagrams("leggings")
    self.assertEqual(r, ['leggings'])

    _, r = self.anagrams2.get_anagrams("legibility")
    self.assertEqual(r, ['legibility'])

    _, r = self.anagrams2.get_anagrams("legible")
    self.assertEqual(r, ['legible'])

    _, r = self.anagrams2.get_anagrams("legibly")
    self.assertEqual(r, ['legibly'])

    _, r = self.anagrams2.get_anagrams("legion")
    self.assertEqual(r, ['legion'])

    _, r = self.anagrams2.get_anagrams("legions")
    self.assertEqual(r, ['legions'])

    _, r = self.anagrams2.get_anagrams("legislate")
    self.assertEqual(r, ['legislate'])

    _, r = self.anagrams2.get_anagrams("legislated")
    self.assertEqual(r, ['legislated'])

    _, r = self.anagrams2.get_anagrams("legislates")
    self.assertEqual(r, ['legislates'])

    _, r = self.anagrams2.get_anagrams("legislating")
    self.assertEqual(r, ['legislating'])

    _, r = self.anagrams2.get_anagrams("legislation")
    self.assertEqual(r, ['legislation'])

    _, r = self.anagrams2.get_anagrams("legislative")
    self.assertEqual(r, ['legislative'])

    _, r = self.anagrams2.get_anagrams("legislator")
    self.assertEqual(r, ['legislator'])

    _, r = self.anagrams2.get_anagrams("legislators")
    self.assertEqual(r, ['legislators'])

    _, r = self.anagrams2.get_anagrams("legislature")
    self.assertEqual(r, ['legislature'])

    _, r = self.anagrams2.get_anagrams("legislatures")
    self.assertEqual(r, ['legislatures'])

    _, r = self.anagrams2.get_anagrams("legitimacy")
    self.assertEqual(r, ['legitimacy'])

    _, r = self.anagrams2.get_anagrams("legitimate")
    self.assertEqual(r, ['legitimate'])

    _, r = self.anagrams2.get_anagrams("legitimately")
    self.assertEqual(r, ['legitimately'])

    _, r = self.anagrams2.get_anagrams("legs")
    self.assertEqual(r, ['gels', 'legs'])

    _, r = self.anagrams2.get_anagrams("legume")
    self.assertEqual(r, ['legume'])

    _, r = self.anagrams2.get_anagrams("lehigh")
    self.assertEqual(r, ['lehigh'])

    _, r = self.anagrams2.get_anagrams("lehman")
    self.assertEqual(r, ['lehman'])

    _, r = self.anagrams2.get_anagrams("leibniz")
    self.assertEqual(r, ['leibniz'])

    _, r = self.anagrams2.get_anagrams("leiden")
    self.assertEqual(r, ['leiden'])

    _, r = self.anagrams2.get_anagrams("leigh")
    self.assertEqual(r, ['leigh'])

    _, r = self.anagrams2.get_anagrams("leighton")
    self.assertEqual(r, ['leighton'])

    _, r = self.anagrams2.get_anagrams("leila")
    self.assertEqual(r, ['leila'])

    _, r = self.anagrams2.get_anagrams("leipzig")
    self.assertEqual(r, ['leipzig'])

    _, r = self.anagrams2.get_anagrams("leisure")
    self.assertEqual(r, ['leisure'])

    _, r = self.anagrams2.get_anagrams("leisurely")
    self.assertEqual(r, ['leisurely'])

    _, r = self.anagrams2.get_anagrams("leland")
    self.assertEqual(r, ['leland'])

    _, r = self.anagrams2.get_anagrams("lemke")
    self.assertEqual(r, ['lemke'])

    _, r = self.anagrams2.get_anagrams("lemma")
    self.assertEqual(r, ['lemma'])

    _, r = self.anagrams2.get_anagrams("lemmas")
    self.assertEqual(r, ['lemmas'])

    _, r = self.anagrams2.get_anagrams("lemming")
    self.assertEqual(r, ['lemming'])

    _, r = self.anagrams2.get_anagrams("lemmings")
    self.assertEqual(r, ['lemmings'])

    _, r = self.anagrams2.get_anagrams("lemon")
    self.assertEqual(r, ['lemon', 'melon', 'menlo'])

    _, r = self.anagrams2.get_anagrams("lemonade")
    self.assertEqual(r, ['lemonade'])

    _, r = self.anagrams2.get_anagrams("lemons")
    self.assertEqual(r, ['lemons', 'melons', 'solemn'])

    _, r = self.anagrams2.get_anagrams("lemuel")
    self.assertEqual(r, ['lemuel'])

    _, r = self.anagrams2.get_anagrams("len")
    self.assertEqual(r, ['len'])

    _, r = self.anagrams2.get_anagrams("lena")
    self.assertEqual(r, ['lane', 'lean', 'lena', 'neal'])

    _, r = self.anagrams2.get_anagrams("lend")
    self.assertEqual(r, ['lend'])

    _, r = self.anagrams2.get_anagrams("lender")
    self.assertEqual(r, ['lender'])

    _, r = self.anagrams2.get_anagrams("lenders")
    self.assertEqual(r, ['lenders', 'slender'])

    _, r = self.anagrams2.get_anagrams("lending")
    self.assertEqual(r, ['lending'])

    _, r = self.anagrams2.get_anagrams("lends")
    self.assertEqual(r, ['lends'])

    _, r = self.anagrams2.get_anagrams("length")
    self.assertEqual(r, ['length'])

    _, r = self.anagrams2.get_anagrams("lengthen")
    self.assertEqual(r, ['lengthen'])

    _, r = self.anagrams2.get_anagrams("lengthened")
    self.assertEqual(r, ['lengthened'])

    _, r = self.anagrams2.get_anagrams("lengthening")
    self.assertEqual(r, ['lengthening'])

    _, r = self.anagrams2.get_anagrams("lengthens")
    self.assertEqual(r, ['lengthens'])

    _, r = self.anagrams2.get_anagrams("lengthly")
    self.assertEqual(r, ['lengthly'])

    _, r = self.anagrams2.get_anagrams("lengths")
    self.assertEqual(r, ['lengths'])

    _, r = self.anagrams2.get_anagrams("lengthwise")
    self.assertEqual(r, ['lengthwise'])

    _, r = self.anagrams2.get_anagrams("lengthy")
    self.assertEqual(r, ['lengthy'])

    _, r = self.anagrams2.get_anagrams("leniency")
    self.assertEqual(r, ['leniency'])

    _, r = self.anagrams2.get_anagrams("lenient")
    self.assertEqual(r, ['lenient'])

    _, r = self.anagrams2.get_anagrams("leniently")
    self.assertEqual(r, ['leniently'])

    _, r = self.anagrams2.get_anagrams("lenin")
    self.assertEqual(r, ['lenin', 'linen'])

    _, r = self.anagrams2.get_anagrams("leningrad")
    self.assertEqual(r, ['leningrad'])

    _, r = self.anagrams2.get_anagrams("leninism")
    self.assertEqual(r, ['leninism'])

    _, r = self.anagrams2.get_anagrams("leninist")
    self.assertEqual(r, ['leninist'])

    _, r = self.anagrams2.get_anagrams("lennox")
    self.assertEqual(r, ['lennox'])

    _, r = self.anagrams2.get_anagrams("lenny")
    self.assertEqual(r, ['lenny'])

    _, r = self.anagrams2.get_anagrams("lenore")
    self.assertEqual(r, ['lenore'])

    _, r = self.anagrams2.get_anagrams("lens")
    self.assertEqual(r, ['lens'])

    _, r = self.anagrams2.get_anagrams("lenses")
    self.assertEqual(r, ['lenses', 'lessen'])

    _, r = self.anagrams2.get_anagrams("lent")
    self.assertEqual(r, ['lent'])

    _, r = self.anagrams2.get_anagrams("lenten")
    self.assertEqual(r, ['lenten'])

    _, r = self.anagrams2.get_anagrams("lentil")
    self.assertEqual(r, ['lentil'])

    _, r = self.anagrams2.get_anagrams("lentils")
    self.assertEqual(r, ['lentils'])

    _, r = self.anagrams2.get_anagrams("leo")
    self.assertEqual(r, ['leo'])

    _, r = self.anagrams2.get_anagrams("leon")
    self.assertEqual(r, ['leon', 'lone', 'noel'])

    _, r = self.anagrams2.get_anagrams("leona")
    self.assertEqual(r, ['alone', 'leona'])

    _, r = self.anagrams2.get_anagrams("leonard")
    self.assertEqual(r, ['leonard'])

    _, r = self.anagrams2.get_anagrams("leonardo")
    self.assertEqual(r, ['leonardo'])

    _, r = self.anagrams2.get_anagrams("leone")
    self.assertEqual(r, ['leone'])

    _, r = self.anagrams2.get_anagrams("leonid")
    self.assertEqual(r, ['leonid'])

    _, r = self.anagrams2.get_anagrams("leopard")
    self.assertEqual(r, ['leopard', 'paroled'])

    _, r = self.anagrams2.get_anagrams("leopards")
    self.assertEqual(r, ['leopards'])

    _, r = self.anagrams2.get_anagrams("leopold")
    self.assertEqual(r, ['leopold'])

    _, r = self.anagrams2.get_anagrams("leopoldville")
    self.assertEqual(r, ['leopoldville'])

    _, r = self.anagrams2.get_anagrams("leper")
    self.assertEqual(r, ['leper', 'perle', 'repel'])

    _, r = self.anagrams2.get_anagrams("leprosy")
    self.assertEqual(r, ['leprosy'])

    _, r = self.anagrams2.get_anagrams("leroy")
    self.assertEqual(r, ['elroy', 'leroy'])

    _, r = self.anagrams2.get_anagrams("lesbian")
    self.assertEqual(r, ['lesbian'])

    _, r = self.anagrams2.get_anagrams("lesbians")
    self.assertEqual(r, ['lesbians'])

    _, r = self.anagrams2.get_anagrams("leslie")
    self.assertEqual(r, ['leslie'])

    _, r = self.anagrams2.get_anagrams("lesotho")
    self.assertEqual(r, ['lesotho'])

    _, r = self.anagrams2.get_anagrams("less")
    self.assertEqual(r, ['less'])

    _, r = self.anagrams2.get_anagrams("lessen")
    self.assertEqual(r, ['lenses', 'lessen'])

    _, r = self.anagrams2.get_anagrams("lessened")
    self.assertEqual(r, ['lessened', 'needless'])

    _, r = self.anagrams2.get_anagrams("lessening")
    self.assertEqual(r, ['lessening'])

    _, r = self.anagrams2.get_anagrams("lessens")
    self.assertEqual(r, ['lessens'])

    _, r = self.anagrams2.get_anagrams("lesser")
    self.assertEqual(r, ['lesser'])

    _, r = self.anagrams2.get_anagrams("lesson")
    self.assertEqual(r, ['lesson'])

    _, r = self.anagrams2.get_anagrams("lessons")
    self.assertEqual(r, ['lessons'])

    _, r = self.anagrams2.get_anagrams("lessor")
    self.assertEqual(r, ['lessor', 'losers'])

    _, r = self.anagrams2.get_anagrams("lest")
    self.assertEqual(r, ['lest', 'lets'])

    _, r = self.anagrams2.get_anagrams("lester")
    self.assertEqual(r, ['lester'])

    _, r = self.anagrams2.get_anagrams("let")
    self.assertEqual(r, ['let'])

    _, r = self.anagrams2.get_anagrams("lethal")
    self.assertEqual(r, ['lethal'])

    _, r = self.anagrams2.get_anagrams("lethe")
    self.assertEqual(r, ['ethel', 'lethe'])

    _, r = self.anagrams2.get_anagrams("letitia")
    self.assertEqual(r, ['letitia'])

    _, r = self.anagrams2.get_anagrams("lets")
    self.assertEqual(r, ['lest', 'lets'])

    _, r = self.anagrams2.get_anagrams("letter")
    self.assertEqual(r, ['letter'])

    _, r = self.anagrams2.get_anagrams("lettered")
    self.assertEqual(r, ['lettered'])

    _, r = self.anagrams2.get_anagrams("letterer")
    self.assertEqual(r, ['letterer'])

    _, r = self.anagrams2.get_anagrams("letterhead")
    self.assertEqual(r, ['letterhead'])

    _, r = self.anagrams2.get_anagrams("lettering")
    self.assertEqual(r, ['lettering'])

    _, r = self.anagrams2.get_anagrams("letters")
    self.assertEqual(r, ['letters', 'settler'])

    _, r = self.anagrams2.get_anagrams("letting")
    self.assertEqual(r, ['letting'])

    _, r = self.anagrams2.get_anagrams("lettuce")
    self.assertEqual(r, ['lettuce'])

    _, r = self.anagrams2.get_anagrams("leukemia")
    self.assertEqual(r, ['leukemia'])

    _, r = self.anagrams2.get_anagrams("lev")
    self.assertEqual(r, ['lev'])

    _, r = self.anagrams2.get_anagrams("levee")
    self.assertEqual(r, ['levee'])

    _, r = self.anagrams2.get_anagrams("levees")
    self.assertEqual(r, ['levees', 'sleeve'])

    _, r = self.anagrams2.get_anagrams("level")
    self.assertEqual(r, ['level'])

    _, r = self.anagrams2.get_anagrams("leveled")
    self.assertEqual(r, ['leveled'])

    _, r = self.anagrams2.get_anagrams("leveler")
    self.assertEqual(r, ['leveler'])

    _, r = self.anagrams2.get_anagrams("leveling")
    self.assertEqual(r, ['leveling'])

    _, r = self.anagrams2.get_anagrams("levelled")
    self.assertEqual(r, ['levelled'])

    _, r = self.anagrams2.get_anagrams("leveller")
    self.assertEqual(r, ['leveller'])

    _, r = self.anagrams2.get_anagrams("levellest")
    self.assertEqual(r, ['levellest'])

    _, r = self.anagrams2.get_anagrams("levelling")
    self.assertEqual(r, ['levelling'])

    _, r = self.anagrams2.get_anagrams("levelly")
    self.assertEqual(r, ['levelly'])

    _, r = self.anagrams2.get_anagrams("levelness")
    self.assertEqual(r, ['levelness'])

    _, r = self.anagrams2.get_anagrams("levels")
    self.assertEqual(r, ['levels'])

    _, r = self.anagrams2.get_anagrams("lever")
    self.assertEqual(r, ['lever', 'revel'])

    _, r = self.anagrams2.get_anagrams("leverage")
    self.assertEqual(r, ['leverage'])

    _, r = self.anagrams2.get_anagrams("levers")
    self.assertEqual(r, ['levers', 'revels'])

    _, r = self.anagrams2.get_anagrams("levi")
    self.assertEqual(r, ['evil', 'levi', 'live', 'veil', 'vile'])

    _, r = self.anagrams2.get_anagrams("leviable")
    self.assertEqual(r, ['leviable'])

    _, r = self.anagrams2.get_anagrams("levied")
    self.assertEqual(r, ['levied', 'veiled'])

    _, r = self.anagrams2.get_anagrams("levies")
    self.assertEqual(r, ['levies'])

    _, r = self.anagrams2.get_anagrams("levin")
    self.assertEqual(r, ['levin'])

    _, r = self.anagrams2.get_anagrams("levine")
    self.assertEqual(r, ['levine'])

    _, r = self.anagrams2.get_anagrams("levis")
    self.assertEqual(r, ['elvis', 'evils', 'levis', 'lives', 'veils'])

    _, r = self.anagrams2.get_anagrams("leviticus")
    self.assertEqual(r, ['leviticus'])

    _, r = self.anagrams2.get_anagrams("levitt")
    self.assertEqual(r, ['levitt'])

    _, r = self.anagrams2.get_anagrams("levity")
    self.assertEqual(r, ['levity'])

    _, r = self.anagrams2.get_anagrams("levy")
    self.assertEqual(r, ['levy'])

    _, r = self.anagrams2.get_anagrams("levying")
    self.assertEqual(r, ['levying'])

    _, r = self.anagrams2.get_anagrams("lew")
    self.assertEqual(r, ['lew'])

    _, r = self.anagrams2.get_anagrams("lewd")
    self.assertEqual(r, ['lewd', 'weld'])

    _, r = self.anagrams2.get_anagrams("lewdly")
    self.assertEqual(r, ['lewdly'])

    _, r = self.anagrams2.get_anagrams("lewdness")
    self.assertEqual(r, ['lewdness'])

    _, r = self.anagrams2.get_anagrams("lewellyn")
    self.assertEqual(r, ['lewellyn'])

    _, r = self.anagrams2.get_anagrams("lexical")
    self.assertEqual(r, ['lexical'])

    _, r = self.anagrams2.get_anagrams("lexically")
    self.assertEqual(r, ['lexically'])

    _, r = self.anagrams2.get_anagrams("lexicographic")
    self.assertEqual(r, ['lexicographic'])

    _, r = self.anagrams2.get_anagrams("lexicographical")
    self.assertEqual(r, ['lexicographical'])

    _, r = self.anagrams2.get_anagrams("lexicographically")
    self.assertEqual(r, ['lexicographically'])

    _, r = self.anagrams2.get_anagrams("lexicon")
    self.assertEqual(r, ['lexicon'])

    _, r = self.anagrams2.get_anagrams("lexicons")
    self.assertEqual(r, ['lexicons'])

    _, r = self.anagrams2.get_anagrams("lexington")
    self.assertEqual(r, ['lexington'])

    _, r = self.anagrams2.get_anagrams("leyden")
    self.assertEqual(r, ['leyden'])

    _, r = self.anagrams2.get_anagrams("liabilities")
    self.assertEqual(r, ['liabilities'])

    _, r = self.anagrams2.get_anagrams("liability")
    self.assertEqual(r, ['liability'])

    _, r = self.anagrams2.get_anagrams("liable")
    self.assertEqual(r, ['liable'])

    _, r = self.anagrams2.get_anagrams("liaison")
    self.assertEqual(r, ['liaison'])

    _, r = self.anagrams2.get_anagrams("liaisons")
    self.assertEqual(r, ['liaisons'])

    _, r = self.anagrams2.get_anagrams("liar")
    self.assertEqual(r, ['lair', 'liar', 'rail'])

    _, r = self.anagrams2.get_anagrams("liars")
    self.assertEqual(r, ['lairs', 'liars', 'rails'])

    _, r = self.anagrams2.get_anagrams("libel")
    self.assertEqual(r, ['libel'])

    _, r = self.anagrams2.get_anagrams("libelous")
    self.assertEqual(r, ['libelous'])

    _, r = self.anagrams2.get_anagrams("liberace")
    self.assertEqual(r, ['liberace'])

    _, r = self.anagrams2.get_anagrams("liberal")
    self.assertEqual(r, ['braille', 'liberal'])

    _, r = self.anagrams2.get_anagrams("liberalize")
    self.assertEqual(r, ['liberalize'])

    _, r = self.anagrams2.get_anagrams("liberalized")
    self.assertEqual(r, ['liberalized'])

    _, r = self.anagrams2.get_anagrams("liberalizes")
    self.assertEqual(r, ['liberalizes'])

    _, r = self.anagrams2.get_anagrams("liberalizing")
    self.assertEqual(r, ['liberalizing'])

    _, r = self.anagrams2.get_anagrams("liberally")
    self.assertEqual(r, ['liberally'])

    _, r = self.anagrams2.get_anagrams("liberals")
    self.assertEqual(r, ['liberals'])

    _, r = self.anagrams2.get_anagrams("liberate")
    self.assertEqual(r, ['liberate'])

    _, r = self.anagrams2.get_anagrams("liberated")
    self.assertEqual(r, ['liberated'])

    _, r = self.anagrams2.get_anagrams("liberates")
    self.assertEqual(r, ['liberates'])

    _, r = self.anagrams2.get_anagrams("liberating")
    self.assertEqual(r, ['liberating'])

    _, r = self.anagrams2.get_anagrams("liberation")
    self.assertEqual(r, ['liberation'])

    _, r = self.anagrams2.get_anagrams("liberator")
    self.assertEqual(r, ['liberator'])

    _, r = self.anagrams2.get_anagrams("liberators")
    self.assertEqual(r, ['liberators'])

    _, r = self.anagrams2.get_anagrams("liberia")
    self.assertEqual(r, ['liberia'])

    _, r = self.anagrams2.get_anagrams("libertarian")
    self.assertEqual(r, ['libertarian'])

    _, r = self.anagrams2.get_anagrams("liberties")
    self.assertEqual(r, ['liberties'])

    _, r = self.anagrams2.get_anagrams("liberty")
    self.assertEqual(r, ['liberty'])

    _, r = self.anagrams2.get_anagrams("libido")
    self.assertEqual(r, ['libido'])

    _, r = self.anagrams2.get_anagrams("librarian")
    self.assertEqual(r, ['librarian'])

    _, r = self.anagrams2.get_anagrams("librarians")
    self.assertEqual(r, ['librarians'])

    _, r = self.anagrams2.get_anagrams("libraries")
    self.assertEqual(r, ['libraries'])

    _, r = self.anagrams2.get_anagrams("library")
    self.assertEqual(r, ['library'])

    _, r = self.anagrams2.get_anagrams("libretto")
    self.assertEqual(r, ['libretto'])

    _, r = self.anagrams2.get_anagrams("libreville")
    self.assertEqual(r, ['libreville'])

    _, r = self.anagrams2.get_anagrams("libya")
    self.assertEqual(r, ['libya'])

    _, r = self.anagrams2.get_anagrams("libyan")
    self.assertEqual(r, ['libyan'])

    _, r = self.anagrams2.get_anagrams("lice")
    self.assertEqual(r, ['lice'])

    _, r = self.anagrams2.get_anagrams("license")
    self.assertEqual(r, ['license', 'silence'])

    _, r = self.anagrams2.get_anagrams("licensed")
    self.assertEqual(r, ['declines', 'licensed', 'silenced'])

    _, r = self.anagrams2.get_anagrams("licensee")
    self.assertEqual(r, ['licensee'])

    _, r = self.anagrams2.get_anagrams("licenses")
    self.assertEqual(r, ['licenses', 'silences'])

    _, r = self.anagrams2.get_anagrams("licensing")
    self.assertEqual(r, ['licensing', 'silencing'])

    _, r = self.anagrams2.get_anagrams("licensor")
    self.assertEqual(r, ['licensor'])

    _, r = self.anagrams2.get_anagrams("licentious")
    self.assertEqual(r, ['licentious'])

    _, r = self.anagrams2.get_anagrams("lichen")
    self.assertEqual(r, ['lichen'])

    _, r = self.anagrams2.get_anagrams("lichens")
    self.assertEqual(r, ['lichens'])

    _, r = self.anagrams2.get_anagrams("lichter")
    self.assertEqual(r, ['lichter'])

    _, r = self.anagrams2.get_anagrams("lick")
    self.assertEqual(r, ['lick'])

    _, r = self.anagrams2.get_anagrams("licked")
    self.assertEqual(r, ['licked'])

    _, r = self.anagrams2.get_anagrams("licking")
    self.assertEqual(r, ['licking'])

    _, r = self.anagrams2.get_anagrams("licks")
    self.assertEqual(r, ['licks', 'slick'])

    _, r = self.anagrams2.get_anagrams("licorice")
    self.assertEqual(r, ['licorice'])

    _, r = self.anagrams2.get_anagrams("lid")
    self.assertEqual(r, ['lid'])

    _, r = self.anagrams2.get_anagrams("lids")
    self.assertEqual(r, ['lids', 'slid'])

    _, r = self.anagrams2.get_anagrams("lie")
    self.assertEqual(r, ['eli', 'lie'])

    _, r = self.anagrams2.get_anagrams("lieberman")
    self.assertEqual(r, ['lieberman'])

    _, r = self.anagrams2.get_anagrams("liechtenstein")
    self.assertEqual(r, ['liechtenstein'])

    _, r = self.anagrams2.get_anagrams("lied")
    self.assertEqual(r, ['idle', 'lied'])

    _, r = self.anagrams2.get_anagrams("liege")
    self.assertEqual(r, ['liege'])

    _, r = self.anagrams2.get_anagrams("lien")
    self.assertEqual(r, ['lien', 'line', 'neil', 'nile'])

    _, r = self.anagrams2.get_anagrams("liens")
    self.assertEqual(r, ['liens', 'lines'])

    _, r = self.anagrams2.get_anagrams("lies")
    self.assertEqual(r, ['isle', 'lies', 'lise'])

    _, r = self.anagrams2.get_anagrams("lieu")
    self.assertEqual(r, ['lieu'])

    _, r = self.anagrams2.get_anagrams("lieutenant")
    self.assertEqual(r, ['lieutenant'])

    _, r = self.anagrams2.get_anagrams("lieutenants")
    self.assertEqual(r, ['lieutenants'])

    _, r = self.anagrams2.get_anagrams("life")
    self.assertEqual(r, ['file', 'life'])

    _, r = self.anagrams2.get_anagrams("lifeblood")
    self.assertEqual(r, ['lifeblood'])

    _, r = self.anagrams2.get_anagrams("lifeboat")
    self.assertEqual(r, ['lifeboat'])

    _, r = self.anagrams2.get_anagrams("lifeguard")
    self.assertEqual(r, ['lifeguard'])

    _, r = self.anagrams2.get_anagrams("lifeless")
    self.assertEqual(r, ['lifeless'])

    _, r = self.anagrams2.get_anagrams("lifelessness")
    self.assertEqual(r, ['lifelessness'])

    _, r = self.anagrams2.get_anagrams("lifelike")
    self.assertEqual(r, ['lifelike'])

    _, r = self.anagrams2.get_anagrams("lifelong")
    self.assertEqual(r, ['lifelong'])

    _, r = self.anagrams2.get_anagrams("lifer")
    self.assertEqual(r, ['filer', 'flier', 'lifer', 'rifle'])

    _, r = self.anagrams2.get_anagrams("lifespan")
    self.assertEqual(r, ['lifespan'])

    _, r = self.anagrams2.get_anagrams("lifestyle")
    self.assertEqual(r, ['lifestyle'])

    _, r = self.anagrams2.get_anagrams("lifestyles")
    self.assertEqual(r, ['lifestyles'])

    _, r = self.anagrams2.get_anagrams("lifetime")
    self.assertEqual(r, ['lifetime'])

    _, r = self.anagrams2.get_anagrams("lifetimes")
    self.assertEqual(r, ['lifetimes'])

    _, r = self.anagrams2.get_anagrams("lift")
    self.assertEqual(r, ['flit', 'lift'])

    _, r = self.anagrams2.get_anagrams("lifted")
    self.assertEqual(r, ['lifted'])

    _, r = self.anagrams2.get_anagrams("lifter")
    self.assertEqual(r, ['filter', 'lifter', 'trifle'])

    _, r = self.anagrams2.get_anagrams("lifters")
    self.assertEqual(r, ['filters', 'lifters', 'trifles'])

    _, r = self.anagrams2.get_anagrams("lifting")
    self.assertEqual(r, ['lifting'])

    _, r = self.anagrams2.get_anagrams("lifts")
    self.assertEqual(r, ['lifts'])

    _, r = self.anagrams2.get_anagrams("ligament")
    self.assertEqual(r, ['ligament'])

    _, r = self.anagrams2.get_anagrams("ligature")
    self.assertEqual(r, ['ligature'])

    _, r = self.anagrams2.get_anagrams("ligget")
    self.assertEqual(r, ['ligget'])

    _, r = self.anagrams2.get_anagrams("liggett")
    self.assertEqual(r, ['liggett'])

    _, r = self.anagrams2.get_anagrams("light")
    self.assertEqual(r, ['light'])

    _, r = self.anagrams2.get_anagrams("lighted")
    self.assertEqual(r, ['delight', 'lighted'])

    _, r = self.anagrams2.get_anagrams("lighten")
    self.assertEqual(r, ['lighten'])

    _, r = self.anagrams2.get_anagrams("lightens")
    self.assertEqual(r, ['lightens'])

    _, r = self.anagrams2.get_anagrams("lighter")
    self.assertEqual(r, ['lighter'])

    _, r = self.anagrams2.get_anagrams("lighters")
    self.assertEqual(r, ['lighters', 'slighter'])

    _, r = self.anagrams2.get_anagrams("lightest")
    self.assertEqual(r, ['lightest'])

    _, r = self.anagrams2.get_anagrams("lightface")
    self.assertEqual(r, ['lightface'])

    _, r = self.anagrams2.get_anagrams("lighthearted")
    self.assertEqual(r, ['lighthearted'])

    _, r = self.anagrams2.get_anagrams("lighthouse")
    self.assertEqual(r, ['lighthouse'])

    _, r = self.anagrams2.get_anagrams("lighthouses")
    self.assertEqual(r, ['lighthouses'])

    _, r = self.anagrams2.get_anagrams("lighting")
    self.assertEqual(r, ['lighting'])

    _, r = self.anagrams2.get_anagrams("lightly")
    self.assertEqual(r, ['lightly'])

    _, r = self.anagrams2.get_anagrams("lightness")
    self.assertEqual(r, ['lightness'])

    _, r = self.anagrams2.get_anagrams("lightning")
    self.assertEqual(r, ['lightning'])

    _, r = self.anagrams2.get_anagrams("lightnings")
    self.assertEqual(r, ['lightnings'])

    _, r = self.anagrams2.get_anagrams("lights")
    self.assertEqual(r, ['lights', 'slight'])

    _, r = self.anagrams2.get_anagrams("lightweight")
    self.assertEqual(r, ['lightweight'])

    _, r = self.anagrams2.get_anagrams("like")
    self.assertEqual(r, ['kiel', 'like'])

    _, r = self.anagrams2.get_anagrams("liked")
    self.assertEqual(r, ['liked'])

    _, r = self.anagrams2.get_anagrams("likelier")
    self.assertEqual(r, ['likelier'])

    _, r = self.anagrams2.get_anagrams("likeliest")
    self.assertEqual(r, ['likeliest'])

    _, r = self.anagrams2.get_anagrams("likelihood")
    self.assertEqual(r, ['likelihood'])

    _, r = self.anagrams2.get_anagrams("likelihoods")
    self.assertEqual(r, ['likelihoods'])

    _, r = self.anagrams2.get_anagrams("likeliness")
    self.assertEqual(r, ['likeliness'])

    _, r = self.anagrams2.get_anagrams("likely")
    self.assertEqual(r, ['likely'])

    _, r = self.anagrams2.get_anagrams("liken")
    self.assertEqual(r, ['klein', 'kline', 'liken'])

    _, r = self.anagrams2.get_anagrams("likened")
    self.assertEqual(r, ['likened'])

    _, r = self.anagrams2.get_anagrams("likeness")
    self.assertEqual(r, ['likeness'])

    _, r = self.anagrams2.get_anagrams("likenesses")
    self.assertEqual(r, ['likenesses'])

    _, r = self.anagrams2.get_anagrams("likening")
    self.assertEqual(r, ['likening'])

    _, r = self.anagrams2.get_anagrams("likens")
    self.assertEqual(r, ['likens', 'silken'])

    _, r = self.anagrams2.get_anagrams("likes")
    self.assertEqual(r, ['likes'])

    _, r = self.anagrams2.get_anagrams("likewise")
    self.assertEqual(r, ['likewise'])

    _, r = self.anagrams2.get_anagrams("liking")
    self.assertEqual(r, ['liking'])

    _, r = self.anagrams2.get_anagrams("lila")
    self.assertEqual(r, ['lila'])

    _, r = self.anagrams2.get_anagrams("lilac")
    self.assertEqual(r, ['lilac'])

    _, r = self.anagrams2.get_anagrams("lilacs")
    self.assertEqual(r, ['lilacs'])

    _, r = self.anagrams2.get_anagrams("lilian")
    self.assertEqual(r, ['lilian'])

    _, r = self.anagrams2.get_anagrams("lilies")
    self.assertEqual(r, ['lilies'])

    _, r = self.anagrams2.get_anagrams("lillian")
    self.assertEqual(r, ['lillian'])

    _, r = self.anagrams2.get_anagrams("lilliput")
    self.assertEqual(r, ['lilliput'])

    _, r = self.anagrams2.get_anagrams("lilliputian")
    self.assertEqual(r, ['lilliputian'])

    _, r = self.anagrams2.get_anagrams("lilliputianize")
    self.assertEqual(r, ['lilliputianize'])

    _, r = self.anagrams2.get_anagrams("lilliputianizes")
    self.assertEqual(r, ['lilliputianizes'])

    _, r = self.anagrams2.get_anagrams("lilly")
    self.assertEqual(r, ['lilly'])

    _, r = self.anagrams2.get_anagrams("lily")
    self.assertEqual(r, ['illy', 'lily'])

    _, r = self.anagrams2.get_anagrams("lima")
    self.assertEqual(r, ['lima', 'mail', 'mali'])

    _, r = self.anagrams2.get_anagrams("liman")
    self.assertEqual(r, ['liman', 'milan'])

    _, r = self.anagrams2.get_anagrams("limb")
    self.assertEqual(r, ['limb'])

    _, r = self.anagrams2.get_anagrams("limber")
    self.assertEqual(r, ['limber'])

    _, r = self.anagrams2.get_anagrams("limbo")
    self.assertEqual(r, ['limbo', 'mobil'])

    _, r = self.anagrams2.get_anagrams("limbs")
    self.assertEqual(r, ['limbs'])

    _, r = self.anagrams2.get_anagrams("lime")
    self.assertEqual(r, ['emil', 'lime', 'mile'])

    _, r = self.anagrams2.get_anagrams("limelight")
    self.assertEqual(r, ['limelight'])

    _, r = self.anagrams2.get_anagrams("limerick")
    self.assertEqual(r, ['limerick'])

    _, r = self.anagrams2.get_anagrams("limes")
    self.assertEqual(r, ['limes', 'miles', 'slime', 'smile'])

    _, r = self.anagrams2.get_anagrams("limestone")
    self.assertEqual(r, ['limestone', 'milestone'])

    _, r = self.anagrams2.get_anagrams("limit")
    self.assertEqual(r, ['limit'])

    _, r = self.anagrams2.get_anagrams("limitability")
    self.assertEqual(r, ['limitability'])

    _, r = self.anagrams2.get_anagrams("limitably")
    self.assertEqual(r, ['limitably'])

    _, r = self.anagrams2.get_anagrams("limitation")
    self.assertEqual(r, ['limitation'])

    _, r = self.anagrams2.get_anagrams("limitations")
    self.assertEqual(r, ['limitations'])

    _, r = self.anagrams2.get_anagrams("limited")
    self.assertEqual(r, ['delimit', 'limited'])

    _, r = self.anagrams2.get_anagrams("limiter")
    self.assertEqual(r, ['limiter'])

    _, r = self.anagrams2.get_anagrams("limiters")
    self.assertEqual(r, ['limiters'])

    _, r = self.anagrams2.get_anagrams("limiting")
    self.assertEqual(r, ['limiting'])

    _, r = self.anagrams2.get_anagrams("limitless")
    self.assertEqual(r, ['limitless'])

    _, r = self.anagrams2.get_anagrams("limits")
    self.assertEqual(r, ['limits'])

    _, r = self.anagrams2.get_anagrams("limousine")
    self.assertEqual(r, ['limousine'])

    _, r = self.anagrams2.get_anagrams("limp")
    self.assertEqual(r, ['limp'])

    _, r = self.anagrams2.get_anagrams("limped")
    self.assertEqual(r, ['dimple', 'limped'])

    _, r = self.anagrams2.get_anagrams("limping")
    self.assertEqual(r, ['limping'])

    _, r = self.anagrams2.get_anagrams("limply")
    self.assertEqual(r, ['limply'])

    _, r = self.anagrams2.get_anagrams("limpness")
    self.assertEqual(r, ['limpness'])

    _, r = self.anagrams2.get_anagrams("limps")
    self.assertEqual(r, ['limps'])

    _, r = self.anagrams2.get_anagrams("lin")
    self.assertEqual(r, ['lin', 'nil'])

    _, r = self.anagrams2.get_anagrams("lincoln")
    self.assertEqual(r, ['lincoln'])

    _, r = self.anagrams2.get_anagrams("lind")
    self.assertEqual(r, ['lind'])

    _, r = self.anagrams2.get_anagrams("linda")
    self.assertEqual(r, ['linda'])

    _, r = self.anagrams2.get_anagrams("lindberg")
    self.assertEqual(r, ['lindberg'])

    _, r = self.anagrams2.get_anagrams("lindbergh")
    self.assertEqual(r, ['lindbergh'])

    _, r = self.anagrams2.get_anagrams("linden")
    self.assertEqual(r, ['linden'])

    _, r = self.anagrams2.get_anagrams("lindholm")
    self.assertEqual(r, ['lindholm'])

    _, r = self.anagrams2.get_anagrams("lindquist")
    self.assertEqual(r, ['lindquist'])

    _, r = self.anagrams2.get_anagrams("lindsay")
    self.assertEqual(r, ['lindsay'])

    _, r = self.anagrams2.get_anagrams("lindsey")
    self.assertEqual(r, ['lindsey'])

    _, r = self.anagrams2.get_anagrams("lindstrom")
    self.assertEqual(r, ['lindstrom'])

    _, r = self.anagrams2.get_anagrams("lindy")
    self.assertEqual(r, ['lindy'])

    _, r = self.anagrams2.get_anagrams("line")
    self.assertEqual(r, ['lien', 'line', 'neil', 'nile'])

    _, r = self.anagrams2.get_anagrams("linear")
    self.assertEqual(r, ['linear'])

    _, r = self.anagrams2.get_anagrams("linearities")
    self.assertEqual(r, ['linearities'])

    _, r = self.anagrams2.get_anagrams("linearity")
    self.assertEqual(r, ['linearity'])

    _, r = self.anagrams2.get_anagrams("linearizable")
    self.assertEqual(r, ['linearizable'])

    _, r = self.anagrams2.get_anagrams("linearize")
    self.assertEqual(r, ['linearize'])

    _, r = self.anagrams2.get_anagrams("linearized")
    self.assertEqual(r, ['linearized'])

    _, r = self.anagrams2.get_anagrams("linearizes")
    self.assertEqual(r, ['linearizes'])

    _, r = self.anagrams2.get_anagrams("linearizing")
    self.assertEqual(r, ['linearizing'])

    _, r = self.anagrams2.get_anagrams("linearly")
    self.assertEqual(r, ['linearly'])

    _, r = self.anagrams2.get_anagrams("lined")
    self.assertEqual(r, ['lined'])

    _, r = self.anagrams2.get_anagrams("linen")
    self.assertEqual(r, ['lenin', 'linen'])

    _, r = self.anagrams2.get_anagrams("linens")
    self.assertEqual(r, ['linens', 'nilsen'])

    _, r = self.anagrams2.get_anagrams("liner")
    self.assertEqual(r, ['liner'])

    _, r = self.anagrams2.get_anagrams("liners")
    self.assertEqual(r, ['liners'])

    _, r = self.anagrams2.get_anagrams("lines")
    self.assertEqual(r, ['liens', 'lines'])

    _, r = self.anagrams2.get_anagrams("lineup")
    self.assertEqual(r, ['lineup'])

    _, r = self.anagrams2.get_anagrams("linger")
    self.assertEqual(r, ['linger'])

    _, r = self.anagrams2.get_anagrams("lingered")
    self.assertEqual(r, ['lingered'])

    _, r = self.anagrams2.get_anagrams("lingerie")
    self.assertEqual(r, ['lingerie'])

    _, r = self.anagrams2.get_anagrams("lingering")
    self.assertEqual(r, ['lingering'])

    _, r = self.anagrams2.get_anagrams("lingers")
    self.assertEqual(r, ['lingers'])

    _, r = self.anagrams2.get_anagrams("lingo")
    self.assertEqual(r, ['lingo', 'login'])

    _, r = self.anagrams2.get_anagrams("lingua")
    self.assertEqual(r, ['lingua'])

    _, r = self.anagrams2.get_anagrams("linguist")
    self.assertEqual(r, ['linguist'])

    _, r = self.anagrams2.get_anagrams("linguistic")
    self.assertEqual(r, ['linguistic'])

    _, r = self.anagrams2.get_anagrams("linguistically")
    self.assertEqual(r, ['linguistically'])

    _, r = self.anagrams2.get_anagrams("linguistics")
    self.assertEqual(r, ['linguistics'])

    _, r = self.anagrams2.get_anagrams("linguists")
    self.assertEqual(r, ['linguists'])

    _, r = self.anagrams2.get_anagrams("lining")
    self.assertEqual(r, ['lining'])

    _, r = self.anagrams2.get_anagrams("linings")
    self.assertEqual(r, ['linings'])

    _, r = self.anagrams2.get_anagrams("link")
    self.assertEqual(r, ['link'])

    _, r = self.anagrams2.get_anagrams("linkage")
    self.assertEqual(r, ['leaking', 'linkage'])

    _, r = self.anagrams2.get_anagrams("linkages")
    self.assertEqual(r, ['linkages'])

    _, r = self.anagrams2.get_anagrams("linked")
    self.assertEqual(r, ['kindle', 'linked'])

    _, r = self.anagrams2.get_anagrams("linker")
    self.assertEqual(r, ['linker', 'relink'])

    _, r = self.anagrams2.get_anagrams("linkers")
    self.assertEqual(r, ['linkers'])

    _, r = self.anagrams2.get_anagrams("linking")
    self.assertEqual(r, ['inkling', 'linking'])

    _, r = self.anagrams2.get_anagrams("links")
    self.assertEqual(r, ['links'])

    _, r = self.anagrams2.get_anagrams("linnaeus")
    self.assertEqual(r, ['linnaeus'])

    _, r = self.anagrams2.get_anagrams("linoleum")
    self.assertEqual(r, ['linoleum'])

    _, r = self.anagrams2.get_anagrams("linotype")
    self.assertEqual(r, ['linotype'])

    _, r = self.anagrams2.get_anagrams("linseed")
    self.assertEqual(r, ['linseed'])

    _, r = self.anagrams2.get_anagrams("lint")
    self.assertEqual(r, ['lint'])

    _, r = self.anagrams2.get_anagrams("linton")
    self.assertEqual(r, ['linton'])

    _, r = self.anagrams2.get_anagrams("linus")
    self.assertEqual(r, ['linus'])

    _, r = self.anagrams2.get_anagrams("linux")
    self.assertEqual(r, ['linux'])

    _, r = self.anagrams2.get_anagrams("lion")
    self.assertEqual(r, ['lion', 'loin', 'olin'])

    _, r = self.anagrams2.get_anagrams("lionel")
    self.assertEqual(r, ['lionel'])

    _, r = self.anagrams2.get_anagrams("lioness")
    self.assertEqual(r, ['lioness'])

    _, r = self.anagrams2.get_anagrams("lionesses")
    self.assertEqual(r, ['lionesses', 'noiseless'])

    _, r = self.anagrams2.get_anagrams("lions")
    self.assertEqual(r, ['lions', 'loins'])

    _, r = self.anagrams2.get_anagrams("lip")
    self.assertEqual(r, ['lip'])

    _, r = self.anagrams2.get_anagrams("lippincott")
    self.assertEqual(r, ['lippincott'])

    _, r = self.anagrams2.get_anagrams("lips")
    self.assertEqual(r, ['lips', 'lisp', 'slip'])

    _, r = self.anagrams2.get_anagrams("lipschitz")
    self.assertEqual(r, ['lipschitz'])

    _, r = self.anagrams2.get_anagrams("lipscomb")
    self.assertEqual(r, ['lipscomb'])

    _, r = self.anagrams2.get_anagrams("lipstick")
    self.assertEqual(r, ['lipstick'])

    _, r = self.anagrams2.get_anagrams("lipton")
    self.assertEqual(r, ['lipton'])

    _, r = self.anagrams2.get_anagrams("liquid")
    self.assertEqual(r, ['liquid'])

    _, r = self.anagrams2.get_anagrams("liquidate")
    self.assertEqual(r, ['liquidate'])

    _, r = self.anagrams2.get_anagrams("liquidation")
    self.assertEqual(r, ['liquidation'])

    _, r = self.anagrams2.get_anagrams("liquidations")
    self.assertEqual(r, ['liquidations'])

    _, r = self.anagrams2.get_anagrams("liquidity")
    self.assertEqual(r, ['liquidity'])

    _, r = self.anagrams2.get_anagrams("liquids")
    self.assertEqual(r, ['liquids'])

    _, r = self.anagrams2.get_anagrams("liquor")
    self.assertEqual(r, ['liquor'])

    _, r = self.anagrams2.get_anagrams("liquors")
    self.assertEqual(r, ['liquors'])

    _, r = self.anagrams2.get_anagrams("lisa")
    self.assertEqual(r, ['lisa', 'sail'])

    _, r = self.anagrams2.get_anagrams("lisbon")
    self.assertEqual(r, ['lisbon'])

    _, r = self.anagrams2.get_anagrams("lise")
    self.assertEqual(r, ['isle', 'lies', 'lise'])

    _, r = self.anagrams2.get_anagrams("lisp")
    self.assertEqual(r, ['lips', 'lisp', 'slip'])

    _, r = self.anagrams2.get_anagrams("lisped")
    self.assertEqual(r, ['dispel', 'lisped'])

    _, r = self.anagrams2.get_anagrams("lisping")
    self.assertEqual(r, ['lisping', 'pilings'])

    _, r = self.anagrams2.get_anagrams("lisps")
    self.assertEqual(r, ['lisps', 'slips'])

    _, r = self.anagrams2.get_anagrams("liss")
    self.assertEqual(r, ['liss'])

    _, r = self.anagrams2.get_anagrams("lissajous")
    self.assertEqual(r, ['lissajous'])

    _, r = self.anagrams2.get_anagrams("list")
    self.assertEqual(r, ['list', 'silt', 'slit'])

    _, r = self.anagrams2.get_anagrams("listed")
    self.assertEqual(r, ['idlest', 'listed', 'silted'])

    _, r = self.anagrams2.get_anagrams("listen")
    self.assertEqual(r, ['enlist', 'inlets', 'listen', 'silent'])

    _, r = self.anagrams2.get_anagrams("listened")
    self.assertEqual(r, ['enlisted', 'listened'])

    _, r = self.anagrams2.get_anagrams("listener")
    self.assertEqual(r, ['listener'])

    _, r = self.anagrams2.get_anagrams("listeners")
    self.assertEqual(r, ['listeners'])

    _, r = self.anagrams2.get_anagrams("listening")
    self.assertEqual(r, ['listening'])

    _, r = self.anagrams2.get_anagrams("listens")
    self.assertEqual(r, ['enlists', 'listens'])

    _, r = self.anagrams2.get_anagrams("lister")
    self.assertEqual(r, ['lister', 'liters'])

    _, r = self.anagrams2.get_anagrams("listerize")
    self.assertEqual(r, ['listerize', 'sterilize'])

    _, r = self.anagrams2.get_anagrams("listerizes")
    self.assertEqual(r, ['listerizes', 'sterilizes'])

    _, r = self.anagrams2.get_anagrams("listers")
    self.assertEqual(r, ['listers'])

    _, r = self.anagrams2.get_anagrams("listing")
    self.assertEqual(r, ['listing', 'silting'])

    _, r = self.anagrams2.get_anagrams("listings")
    self.assertEqual(r, ['listings'])

    _, r = self.anagrams2.get_anagrams("listless")
    self.assertEqual(r, ['listless'])

    _, r = self.anagrams2.get_anagrams("liston")
    self.assertEqual(r, ['liston', 'tonsil'])

    _, r = self.anagrams2.get_anagrams("lists")
    self.assertEqual(r, ['lists', 'silts', 'slits'])

    _, r = self.anagrams2.get_anagrams("lit")
    self.assertEqual(r, ['lit'])

    _, r = self.anagrams2.get_anagrams("litany")
    self.assertEqual(r, ['litany'])

    _, r = self.anagrams2.get_anagrams("liter")
    self.assertEqual(r, ['liter'])

    _, r = self.anagrams2.get_anagrams("literacy")
    self.assertEqual(r, ['literacy'])

    _, r = self.anagrams2.get_anagrams("literal")
    self.assertEqual(r, ['literal'])

    _, r = self.anagrams2.get_anagrams("literally")
    self.assertEqual(r, ['literally'])

    _, r = self.anagrams2.get_anagrams("literalness")
    self.assertEqual(r, ['literalness'])

    _, r = self.anagrams2.get_anagrams("literals")
    self.assertEqual(r, ['literals'])

    _, r = self.anagrams2.get_anagrams("literary")
    self.assertEqual(r, ['literary'])

    _, r = self.anagrams2.get_anagrams("literate")
    self.assertEqual(r, ['literate'])

    _, r = self.anagrams2.get_anagrams("literature")
    self.assertEqual(r, ['literature'])

    _, r = self.anagrams2.get_anagrams("literatures")
    self.assertEqual(r, ['literatures'])

    _, r = self.anagrams2.get_anagrams("liters")
    self.assertEqual(r, ['lister', 'liters'])

    _, r = self.anagrams2.get_anagrams("lithe")
    self.assertEqual(r, ['lithe'])

    _, r = self.anagrams2.get_anagrams("lithograph")
    self.assertEqual(r, ['lithograph'])

    _, r = self.anagrams2.get_anagrams("lithography")
    self.assertEqual(r, ['lithography'])

    _, r = self.anagrams2.get_anagrams("lithuania")
    self.assertEqual(r, ['lithuania'])

    _, r = self.anagrams2.get_anagrams("lithuanian")
    self.assertEqual(r, ['lithuanian'])

    _, r = self.anagrams2.get_anagrams("litigant")
    self.assertEqual(r, ['litigant'])

    _, r = self.anagrams2.get_anagrams("litigate")
    self.assertEqual(r, ['litigate'])

    _, r = self.anagrams2.get_anagrams("litigation")
    self.assertEqual(r, ['litigation'])

    _, r = self.anagrams2.get_anagrams("litigious")
    self.assertEqual(r, ['litigious'])

    _, r = self.anagrams2.get_anagrams("litmus")
    self.assertEqual(r, ['litmus'])

    _, r = self.anagrams2.get_anagrams("litter")
    self.assertEqual(r, ['litter'])

    _, r = self.anagrams2.get_anagrams("litterbug")
    self.assertEqual(r, ['litterbug'])

    _, r = self.anagrams2.get_anagrams("littered")
    self.assertEqual(r, ['littered'])

    _, r = self.anagrams2.get_anagrams("littering")
    self.assertEqual(r, ['littering'])

    _, r = self.anagrams2.get_anagrams("litters")
    self.assertEqual(r, ['litters'])

    _, r = self.anagrams2.get_anagrams("little")
    self.assertEqual(r, ['little'])

    _, r = self.anagrams2.get_anagrams("littleness")
    self.assertEqual(r, ['littleness'])

    _, r = self.anagrams2.get_anagrams("littler")
    self.assertEqual(r, ['littler'])

    _, r = self.anagrams2.get_anagrams("littlest")
    self.assertEqual(r, ['littlest'])

    _, r = self.anagrams2.get_anagrams("littleton")
    self.assertEqual(r, ['littleton'])

    _, r = self.anagrams2.get_anagrams("litton")
    self.assertEqual(r, ['litton'])

    _, r = self.anagrams2.get_anagrams("livable")
    self.assertEqual(r, ['livable'])

    _, r = self.anagrams2.get_anagrams("livably")
    self.assertEqual(r, ['livably'])

    _, r = self.anagrams2.get_anagrams("live")
    self.assertEqual(r, ['evil', 'levi', 'live', 'veil', 'vile'])

    _, r = self.anagrams2.get_anagrams("lived")
    self.assertEqual(r, ['devil', 'lived'])

    _, r = self.anagrams2.get_anagrams("livelihood")
    self.assertEqual(r, ['livelihood'])

    _, r = self.anagrams2.get_anagrams("lively")
    self.assertEqual(r, ['evilly', 'lively', 'vilely'])

    _, r = self.anagrams2.get_anagrams("liveness")
    self.assertEqual(r, ['liveness', 'vileness'])

    _, r = self.anagrams2.get_anagrams("liver")
    self.assertEqual(r, ['liver'])

    _, r = self.anagrams2.get_anagrams("liveried")
    self.assertEqual(r, ['liveried'])

    _, r = self.anagrams2.get_anagrams("livermore")
    self.assertEqual(r, ['livermore'])

    _, r = self.anagrams2.get_anagrams("liverpool")
    self.assertEqual(r, ['liverpool'])

    _, r = self.anagrams2.get_anagrams("liverpudlian")
    self.assertEqual(r, ['liverpudlian'])

    _, r = self.anagrams2.get_anagrams("livers")
    self.assertEqual(r, ['livers', 'silver', 'sliver'])

    _, r = self.anagrams2.get_anagrams("livery")
    self.assertEqual(r, ['livery', 'verily'])

    _, r = self.anagrams2.get_anagrams("lives")
    self.assertEqual(r, ['elvis', 'evils', 'levis', 'lives', 'veils'])

    _, r = self.anagrams2.get_anagrams("livestock")
    self.assertEqual(r, ['livestock'])

    _, r = self.anagrams2.get_anagrams("livid")
    self.assertEqual(r, ['livid'])

    _, r = self.anagrams2.get_anagrams("living")
    self.assertEqual(r, ['living'])

    _, r = self.anagrams2.get_anagrams("livingston")
    self.assertEqual(r, ['livingston'])

    _, r = self.anagrams2.get_anagrams("liz")
    self.assertEqual(r, ['liz'])

    _, r = self.anagrams2.get_anagrams("lizard")
    self.assertEqual(r, ['lizard'])

    _, r = self.anagrams2.get_anagrams("lizards")
    self.assertEqual(r, ['lizards', 'szilard'])

    _, r = self.anagrams2.get_anagrams("lizzie")
    self.assertEqual(r, ['lizzie'])

    _, r = self.anagrams2.get_anagrams("lizzy")
    self.assertEqual(r, ['lizzy'])

    _, r = self.anagrams2.get_anagrams("lloyd")
    self.assertEqual(r, ['dolly', 'lloyd'])

    _, r = self.anagrams2.get_anagrams("load")
    self.assertEqual(r, ['load'])

    _, r = self.anagrams2.get_anagrams("loaded")
    self.assertEqual(r, ['loaded'])

    _, r = self.anagrams2.get_anagrams("loader")
    self.assertEqual(r, ['laredo', 'loader', 'ordeal', 'reload'])

    _, r = self.anagrams2.get_anagrams("loaders")
    self.assertEqual(r, ['loaders', 'reloads'])

    _, r = self.anagrams2.get_anagrams("loading")
    self.assertEqual(r, ['loading'])

    _, r = self.anagrams2.get_anagrams("loadings")
    self.assertEqual(r, ['loadings'])

    _, r = self.anagrams2.get_anagrams("loads")
    self.assertEqual(r, ['loads'])

    _, r = self.anagrams2.get_anagrams("loaf")
    self.assertEqual(r, ['foal', 'loaf', 'olaf'])

    _, r = self.anagrams2.get_anagrams("loafed")
    self.assertEqual(r, ['loafed'])

    _, r = self.anagrams2.get_anagrams("loafer")
    self.assertEqual(r, ['loafer'])

    _, r = self.anagrams2.get_anagrams("loan")
    self.assertEqual(r, ['loan'])

    _, r = self.anagrams2.get_anagrams("loaned")
    self.assertEqual(r, ['delano', 'loaned'])

    _, r = self.anagrams2.get_anagrams("loaning")
    self.assertEqual(r, ['loaning'])

    _, r = self.anagrams2.get_anagrams("loans")
    self.assertEqual(r, ['loans', 'salon', 'sloan'])

    _, r = self.anagrams2.get_anagrams("loath")
    self.assertEqual(r, ['loath'])

    _, r = self.anagrams2.get_anagrams("loathe")
    self.assertEqual(r, ['loathe'])

    _, r = self.anagrams2.get_anagrams("loathed")
    self.assertEqual(r, ['loathed'])

    _, r = self.anagrams2.get_anagrams("loathing")
    self.assertEqual(r, ['loathing'])

    _, r = self.anagrams2.get_anagrams("loathly")
    self.assertEqual(r, ['loathly'])

    _, r = self.anagrams2.get_anagrams("loathsome")
    self.assertEqual(r, ['loathsome'])

    _, r = self.anagrams2.get_anagrams("loaves")
    self.assertEqual(r, ['loaves'])

    _, r = self.anagrams2.get_anagrams("lobbied")
    self.assertEqual(r, ['lobbied'])

    _, r = self.anagrams2.get_anagrams("lobbies")
    self.assertEqual(r, ['lobbies'])

    _, r = self.anagrams2.get_anagrams("lobby")
    self.assertEqual(r, ['lobby'])

    _, r = self.anagrams2.get_anagrams("lobbying")
    self.assertEqual(r, ['lobbying'])

    _, r = self.anagrams2.get_anagrams("lobe")
    self.assertEqual(r, ['lobe', 'loeb'])

    _, r = self.anagrams2.get_anagrams("lobes")
    self.assertEqual(r, ['lobes'])

    _, r = self.anagrams2.get_anagrams("lobster")
    self.assertEqual(r, ['bolster', 'lobster'])

    _, r = self.anagrams2.get_anagrams("lobsters")
    self.assertEqual(r, ['bolsters', 'lobsters'])

    _, r = self.anagrams2.get_anagrams("local")
    self.assertEqual(r, ['local'])

    _, r = self.anagrams2.get_anagrams("localities")
    self.assertEqual(r, ['localities'])

    _, r = self.anagrams2.get_anagrams("locality")
    self.assertEqual(r, ['locality'])

    _, r = self.anagrams2.get_anagrams("localization")
    self.assertEqual(r, ['localization'])

    _, r = self.anagrams2.get_anagrams("localize")
    self.assertEqual(r, ['localize'])

    _, r = self.anagrams2.get_anagrams("localized")
    self.assertEqual(r, ['localized'])

    _, r = self.anagrams2.get_anagrams("localizes")
    self.assertEqual(r, ['localizes'])

    _, r = self.anagrams2.get_anagrams("localizing")
    self.assertEqual(r, ['localizing'])

    _, r = self.anagrams2.get_anagrams("locally")
    self.assertEqual(r, ['locally'])

    _, r = self.anagrams2.get_anagrams("locals")
    self.assertEqual(r, ['locals'])

    _, r = self.anagrams2.get_anagrams("locate")
    self.assertEqual(r, ['locate'])

    _, r = self.anagrams2.get_anagrams("located")
    self.assertEqual(r, ['located'])

    _, r = self.anagrams2.get_anagrams("locates")
    self.assertEqual(r, ['locates'])

    _, r = self.anagrams2.get_anagrams("locating")
    self.assertEqual(r, ['locating'])

    _, r = self.anagrams2.get_anagrams("location")
    self.assertEqual(r, ['location'])

    _, r = self.anagrams2.get_anagrams("locations")
    self.assertEqual(r, ['locations'])

    _, r = self.anagrams2.get_anagrams("locative")
    self.assertEqual(r, ['locative'])

    _, r = self.anagrams2.get_anagrams("locatives")
    self.assertEqual(r, ['locatives'])

    _, r = self.anagrams2.get_anagrams("locator")
    self.assertEqual(r, ['locator'])

    _, r = self.anagrams2.get_anagrams("locators")
    self.assertEqual(r, ['locators'])

    _, r = self.anagrams2.get_anagrams("loci")
    self.assertEqual(r, ['clio', 'coil', 'loci'])

    _, r = self.anagrams2.get_anagrams("lock")
    self.assertEqual(r, ['lock'])

    _, r = self.anagrams2.get_anagrams("locke")
    self.assertEqual(r, ['locke'])

    _, r = self.anagrams2.get_anagrams("locked")
    self.assertEqual(r, ['locked'])

    _, r = self.anagrams2.get_anagrams("locker")
    self.assertEqual(r, ['locker'])

    _, r = self.anagrams2.get_anagrams("lockers")
    self.assertEqual(r, ['lockers'])

    _, r = self.anagrams2.get_anagrams("lockhart")
    self.assertEqual(r, ['lockhart'])

    _, r = self.anagrams2.get_anagrams("lockheed")
    self.assertEqual(r, ['lockheed'])

    _, r = self.anagrams2.get_anagrams("lockian")
    self.assertEqual(r, ['lockian'])

    _, r = self.anagrams2.get_anagrams("locking")
    self.assertEqual(r, ['locking'])

    _, r = self.anagrams2.get_anagrams("lockings")
    self.assertEqual(r, ['lockings'])

    _, r = self.anagrams2.get_anagrams("lockout")
    self.assertEqual(r, ['lockout'])

    _, r = self.anagrams2.get_anagrams("lockouts")
    self.assertEqual(r, ['lockouts'])

    _, r = self.anagrams2.get_anagrams("locks")
    self.assertEqual(r, ['locks'])

    _, r = self.anagrams2.get_anagrams("locksmith")
    self.assertEqual(r, ['locksmith'])

    _, r = self.anagrams2.get_anagrams("lockstep")
    self.assertEqual(r, ['lockstep'])

    _, r = self.anagrams2.get_anagrams("lockup")
    self.assertEqual(r, ['lockup'])

    _, r = self.anagrams2.get_anagrams("lockups")
    self.assertEqual(r, ['lockups'])

    _, r = self.anagrams2.get_anagrams("lockwood")
    self.assertEqual(r, ['lockwood'])

    _, r = self.anagrams2.get_anagrams("locomotion")
    self.assertEqual(r, ['locomotion'])

    _, r = self.anagrams2.get_anagrams("locomotive")
    self.assertEqual(r, ['locomotive'])

    _, r = self.anagrams2.get_anagrams("locomotives")
    self.assertEqual(r, ['locomotives'])

    _, r = self.anagrams2.get_anagrams("locus")
    self.assertEqual(r, ['locus'])

    _, r = self.anagrams2.get_anagrams("locust")
    self.assertEqual(r, ['locust'])

    _, r = self.anagrams2.get_anagrams("locusts")
    self.assertEqual(r, ['locusts'])

    _, r = self.anagrams2.get_anagrams("lodge")
    self.assertEqual(r, ['lodge'])

    _, r = self.anagrams2.get_anagrams("lodged")
    self.assertEqual(r, ['lodged'])

    _, r = self.anagrams2.get_anagrams("lodger")
    self.assertEqual(r, ['lodger'])

    _, r = self.anagrams2.get_anagrams("lodges")
    self.assertEqual(r, ['lodges'])

    _, r = self.anagrams2.get_anagrams("lodging")
    self.assertEqual(r, ['golding', 'lodging'])

    _, r = self.anagrams2.get_anagrams("lodgings")
    self.assertEqual(r, ['lodgings'])

    _, r = self.anagrams2.get_anagrams("lodowick")
    self.assertEqual(r, ['lodowick'])

    _, r = self.anagrams2.get_anagrams("loeb")
    self.assertEqual(r, ['lobe', 'loeb'])

    _, r = self.anagrams2.get_anagrams("loft")
    self.assertEqual(r, ['loft'])

    _, r = self.anagrams2.get_anagrams("loftiness")
    self.assertEqual(r, ['loftiness'])

    _, r = self.anagrams2.get_anagrams("lofts")
    self.assertEqual(r, ['lofts'])

    _, r = self.anagrams2.get_anagrams("lofty")
    self.assertEqual(r, ['lofty'])

    _, r = self.anagrams2.get_anagrams("logan")
    self.assertEqual(r, ['along', 'anglo', 'logan'])

    _, r = self.anagrams2.get_anagrams("logarithm")
    self.assertEqual(r, ['algorithm', 'logarithm'])

    _, r = self.anagrams2.get_anagrams("logarithmic")
    self.assertEqual(r, ['algorithmic', 'logarithmic'])

    _, r = self.anagrams2.get_anagrams("logarithmically")
    self.assertEqual(r, ['algorithmically', 'logarithmically'])

    _, r = self.anagrams2.get_anagrams("logarithms")
    self.assertEqual(r, ['algorithms', 'logarithms'])

    _, r = self.anagrams2.get_anagrams("logged")
    self.assertEqual(r, ['logged'])

    _, r = self.anagrams2.get_anagrams("logger")
    self.assertEqual(r, ['logger'])

    _, r = self.anagrams2.get_anagrams("loggers")
    self.assertEqual(r, ['loggers'])

    _, r = self.anagrams2.get_anagrams("logging")
    self.assertEqual(r, ['logging'])

    _, r = self.anagrams2.get_anagrams("logic")
    self.assertEqual(r, ['logic'])

    _, r = self.anagrams2.get_anagrams("logical")
    self.assertEqual(r, ['logical'])

    _, r = self.anagrams2.get_anagrams("logically")
    self.assertEqual(r, ['logically'])

    _, r = self.anagrams2.get_anagrams("logician")
    self.assertEqual(r, ['logician'])

    _, r = self.anagrams2.get_anagrams("logicians")
    self.assertEqual(r, ['logicians'])

    _, r = self.anagrams2.get_anagrams("logics")
    self.assertEqual(r, ['logics'])

    _, r = self.anagrams2.get_anagrams("login")
    self.assertEqual(r, ['lingo', 'login'])

    _, r = self.anagrams2.get_anagrams("logins")
    self.assertEqual(r, ['logins', 'losing'])

    _, r = self.anagrams2.get_anagrams("logistic")
    self.assertEqual(r, ['logistic'])

    _, r = self.anagrams2.get_anagrams("logistics")
    self.assertEqual(r, ['logistics'])

    _, r = self.anagrams2.get_anagrams("logjam")
    self.assertEqual(r, ['logjam'])

    _, r = self.anagrams2.get_anagrams("logo")
    self.assertEqual(r, ['logo'])

    _, r = self.anagrams2.get_anagrams("logs")
    self.assertEqual(r, ['logs'])

    _, r = self.anagrams2.get_anagrams("loin")
    self.assertEqual(r, ['lion', 'loin', 'olin'])

    _, r = self.anagrams2.get_anagrams("loincloth")
    self.assertEqual(r, ['loincloth'])

    _, r = self.anagrams2.get_anagrams("loins")
    self.assertEqual(r, ['lions', 'loins'])

    _, r = self.anagrams2.get_anagrams("loire")
    self.assertEqual(r, ['loire', 'oiler'])

    _, r = self.anagrams2.get_anagrams("lois")
    self.assertEqual(r, ['lois', 'oils', 'silo', 'soil'])

    _, r = self.anagrams2.get_anagrams("loiter")
    self.assertEqual(r, ['loiter', 'toiler'])

    _, r = self.anagrams2.get_anagrams("loitered")
    self.assertEqual(r, ['loitered'])

    _, r = self.anagrams2.get_anagrams("loiterer")
    self.assertEqual(r, ['loiterer'])

    _, r = self.anagrams2.get_anagrams("loitering")
    self.assertEqual(r, ['loitering'])

    _, r = self.anagrams2.get_anagrams("loiters")
    self.assertEqual(r, ['loiters'])

    _, r = self.anagrams2.get_anagrams("loki")
    self.assertEqual(r, ['loki'])

    _, r = self.anagrams2.get_anagrams("lola")
    self.assertEqual(r, ['lola'])

    _, r = self.anagrams2.get_anagrams("lomb")
    self.assertEqual(r, ['lomb'])

    _, r = self.anagrams2.get_anagrams("lombard")
    self.assertEqual(r, ['lombard'])

    _, r = self.anagrams2.get_anagrams("lombardy")
    self.assertEqual(r, ['lombardy'])

    _, r = self.anagrams2.get_anagrams("lome")
    self.assertEqual(r, ['lome', 'mole'])

    _, r = self.anagrams2.get_anagrams("london")
    self.assertEqual(r, ['london'])

    _, r = self.anagrams2.get_anagrams("londonderry")
    self.assertEqual(r, ['londonderry'])

    _, r = self.anagrams2.get_anagrams("londoner")
    self.assertEqual(r, ['londoner'])

    _, r = self.anagrams2.get_anagrams("londonization")
    self.assertEqual(r, ['londonization'])

    _, r = self.anagrams2.get_anagrams("londonizations")
    self.assertEqual(r, ['londonizations'])

    _, r = self.anagrams2.get_anagrams("londonize")
    self.assertEqual(r, ['londonize'])

    _, r = self.anagrams2.get_anagrams("londonizes")
    self.assertEqual(r, ['londonizes'])

    _, r = self.anagrams2.get_anagrams("lone")
    self.assertEqual(r, ['leon', 'lone', 'noel'])

    _, r = self.anagrams2.get_anagrams("lonelier")
    self.assertEqual(r, ['lonelier'])

    _, r = self.anagrams2.get_anagrams("loneliest")
    self.assertEqual(r, ['loneliest'])

    _, r = self.anagrams2.get_anagrams("loneliness")
    self.assertEqual(r, ['loneliness'])

    _, r = self.anagrams2.get_anagrams("lonely")
    self.assertEqual(r, ['lonely'])

    _, r = self.anagrams2.get_anagrams("loner")
    self.assertEqual(r, ['loner', 'loren'])

    _, r = self.anagrams2.get_anagrams("loners")
    self.assertEqual(r, ['loners'])

    _, r = self.anagrams2.get_anagrams("lonesome")
    self.assertEqual(r, ['lonesome'])

    _, r = self.anagrams2.get_anagrams("long")
    self.assertEqual(r, ['long'])

    _, r = self.anagrams2.get_anagrams("longed")
    self.assertEqual(r, ['golden', 'longed'])

    _, r = self.anagrams2.get_anagrams("longer")
    self.assertEqual(r, ['longer'])

    _, r = self.anagrams2.get_anagrams("longest")
    self.assertEqual(r, ['longest'])

    _, r = self.anagrams2.get_anagrams("longevity")
    self.assertEqual(r, ['longevity'])

    _, r = self.anagrams2.get_anagrams("longfellow")
    self.assertEqual(r, ['longfellow'])

    _, r = self.anagrams2.get_anagrams("longhand")
    self.assertEqual(r, ['longhand'])

    _, r = self.anagrams2.get_anagrams("longing")
    self.assertEqual(r, ['longing'])

    _, r = self.anagrams2.get_anagrams("longings")
    self.assertEqual(r, ['longings'])

    _, r = self.anagrams2.get_anagrams("longitude")
    self.assertEqual(r, ['longitude'])

    _, r = self.anagrams2.get_anagrams("longitudes")
    self.assertEqual(r, ['longitudes'])

    _, r = self.anagrams2.get_anagrams("longs")
    self.assertEqual(r, ['longs'])

    _, r = self.anagrams2.get_anagrams("longstanding")
    self.assertEqual(r, ['longstanding'])

    _, r = self.anagrams2.get_anagrams("longstreet")
    self.assertEqual(r, ['longstreet'])

    _, r = self.anagrams2.get_anagrams("look")
    self.assertEqual(r, ['look'])

    _, r = self.anagrams2.get_anagrams("lookahead")
    self.assertEqual(r, ['lookahead'])

    _, r = self.anagrams2.get_anagrams("looked")
    self.assertEqual(r, ['looked'])

    _, r = self.anagrams2.get_anagrams("looker")
    self.assertEqual(r, ['looker'])

    _, r = self.anagrams2.get_anagrams("lookers")
    self.assertEqual(r, ['lookers'])

    _, r = self.anagrams2.get_anagrams("looking")
    self.assertEqual(r, ['looking'])

    _, r = self.anagrams2.get_anagrams("lookout")
    self.assertEqual(r, ['lookout', 'outlook'])

    _, r = self.anagrams2.get_anagrams("looks")
    self.assertEqual(r, ['looks'])

    _, r = self.anagrams2.get_anagrams("lookup")
    self.assertEqual(r, ['lookup'])

    _, r = self.anagrams2.get_anagrams("lookups")
    self.assertEqual(r, ['lookups'])

    _, r = self.anagrams2.get_anagrams("loom")
    self.assertEqual(r, ['loom'])

    _, r = self.anagrams2.get_anagrams("loomed")
    self.assertEqual(r, ['loomed'])

    _, r = self.anagrams2.get_anagrams("looming")
    self.assertEqual(r, ['looming'])

    _, r = self.anagrams2.get_anagrams("loomis")
    self.assertEqual(r, ['loomis'])

    _, r = self.anagrams2.get_anagrams("looms")
    self.assertEqual(r, ['looms'])

    _, r = self.anagrams2.get_anagrams("loon")
    self.assertEqual(r, ['loon'])

    _, r = self.anagrams2.get_anagrams("loop")
    self.assertEqual(r, ['loop', 'polo', 'pool'])

    _, r = self.anagrams2.get_anagrams("looped")
    self.assertEqual(r, ['looped', 'poodle', 'pooled'])

    _, r = self.anagrams2.get_anagrams("loophole")
    self.assertEqual(r, ['loophole'])

    _, r = self.anagrams2.get_anagrams("loopholes")
    self.assertEqual(r, ['loopholes'])

    _, r = self.anagrams2.get_anagrams("looping")
    self.assertEqual(r, ['looping', 'pooling'])

    _, r = self.anagrams2.get_anagrams("loops")
    self.assertEqual(r, ['loops', 'pools', 'sloop', 'spool'])

    _, r = self.anagrams2.get_anagrams("loose")
    self.assertEqual(r, ['loose'])

    _, r = self.anagrams2.get_anagrams("loosed")
    self.assertEqual(r, ['loosed'])

    _, r = self.anagrams2.get_anagrams("looseleaf")
    self.assertEqual(r, ['looseleaf'])

    _, r = self.anagrams2.get_anagrams("loosely")
    self.assertEqual(r, ['loosely'])

    _, r = self.anagrams2.get_anagrams("loosen")
    self.assertEqual(r, ['loosen'])

    _, r = self.anagrams2.get_anagrams("loosened")
    self.assertEqual(r, ['loosened'])

    _, r = self.anagrams2.get_anagrams("looseness")
    self.assertEqual(r, ['looseness'])

    _, r = self.anagrams2.get_anagrams("loosening")
    self.assertEqual(r, ['loosening'])

    _, r = self.anagrams2.get_anagrams("loosens")
    self.assertEqual(r, ['loosens'])

    _, r = self.anagrams2.get_anagrams("looser")
    self.assertEqual(r, ['looser'])

    _, r = self.anagrams2.get_anagrams("looses")
    self.assertEqual(r, ['looses'])

    _, r = self.anagrams2.get_anagrams("loosest")
    self.assertEqual(r, ['loosest'])

    _, r = self.anagrams2.get_anagrams("loosing")
    self.assertEqual(r, ['loosing'])

    _, r = self.anagrams2.get_anagrams("loot")
    self.assertEqual(r, ['loot', 'tool'])

    _, r = self.anagrams2.get_anagrams("looted")
    self.assertEqual(r, ['looted', 'toledo', 'tooled'])

    _, r = self.anagrams2.get_anagrams("looter")
    self.assertEqual(r, ['looter', 'tooler'])

    _, r = self.anagrams2.get_anagrams("looting")
    self.assertEqual(r, ['looting', 'tooling'])

    _, r = self.anagrams2.get_anagrams("loots")
    self.assertEqual(r, ['loots', 'stool', 'tools'])

    _, r = self.anagrams2.get_anagrams("lopez")
    self.assertEqual(r, ['lopez'])

    _, r = self.anagrams2.get_anagrams("lopsided")
    self.assertEqual(r, ['lopsided'])

    _, r = self.anagrams2.get_anagrams("lord")
    self.assertEqual(r, ['lord'])

    _, r = self.anagrams2.get_anagrams("lordly")
    self.assertEqual(r, ['lordly'])

    _, r = self.anagrams2.get_anagrams("lords")
    self.assertEqual(r, ['lords'])

    _, r = self.anagrams2.get_anagrams("lordship")
    self.assertEqual(r, ['lordship'])

    _, r = self.anagrams2.get_anagrams("lore")
    self.assertEqual(r, ['lore', 'role'])

    _, r = self.anagrams2.get_anagrams("lorelei")
    self.assertEqual(r, ['lorelei'])

    _, r = self.anagrams2.get_anagrams("loren")
    self.assertEqual(r, ['loner', 'loren'])

    _, r = self.anagrams2.get_anagrams("lorentzian")
    self.assertEqual(r, ['lorentzian'])

    _, r = self.anagrams2.get_anagrams("lorenz")
    self.assertEqual(r, ['lorenz'])

    _, r = self.anagrams2.get_anagrams("loretta")
    self.assertEqual(r, ['loretta'])

    _, r = self.anagrams2.get_anagrams("lorinda")
    self.assertEqual(r, ['lorinda', 'ordinal'])

    _, r = self.anagrams2.get_anagrams("lorraine")
    self.assertEqual(r, ['lorraine'])

    _, r = self.anagrams2.get_anagrams("lorry")
    self.assertEqual(r, ['lorry'])

    _, r = self.anagrams2.get_anagrams("los")
    self.assertEqual(r, ['los', 'sol'])

    _, r = self.anagrams2.get_anagrams("lose")
    self.assertEqual(r, ['lose', 'sole'])

    _, r = self.anagrams2.get_anagrams("loser")
    self.assertEqual(r, ['loser', 'roles'])

    _, r = self.anagrams2.get_anagrams("losers")
    self.assertEqual(r, ['lessor', 'losers'])

    _, r = self.anagrams2.get_anagrams("loses")
    self.assertEqual(r, ['loses', 'soles'])

    _, r = self.anagrams2.get_anagrams("losing")
    self.assertEqual(r, ['logins', 'losing'])

    _, r = self.anagrams2.get_anagrams("loss")
    self.assertEqual(r, ['loss'])

    _, r = self.anagrams2.get_anagrams("losses")
    self.assertEqual(r, ['losses'])

    _, r = self.anagrams2.get_anagrams("lossier")
    self.assertEqual(r, ['lossier'])

    _, r = self.anagrams2.get_anagrams("lossiest")
    self.assertEqual(r, ['lossiest'])

    _, r = self.anagrams2.get_anagrams("lossy")
    self.assertEqual(r, ['lossy'])

    _, r = self.anagrams2.get_anagrams("lost")
    self.assertEqual(r, ['lost', 'lots', 'slot'])

    _, r = self.anagrams2.get_anagrams("lot")
    self.assertEqual(r, ['lot'])

    _, r = self.anagrams2.get_anagrams("lothario")
    self.assertEqual(r, ['lothario'])

    _, r = self.anagrams2.get_anagrams("lotion")
    self.assertEqual(r, ['lotion'])

    _, r = self.anagrams2.get_anagrams("lots")
    self.assertEqual(r, ['lost', 'lots', 'slot'])

    _, r = self.anagrams2.get_anagrams("lotte")
    self.assertEqual(r, ['lotte'])

    _, r = self.anagrams2.get_anagrams("lottery")
    self.assertEqual(r, ['lottery'])

    _, r = self.anagrams2.get_anagrams("lottie")
    self.assertEqual(r, ['lottie', 'toilet'])

    _, r = self.anagrams2.get_anagrams("lotus")
    self.assertEqual(r, ['lotus'])

    _, r = self.anagrams2.get_anagrams("lou")
    self.assertEqual(r, ['lou'])

    _, r = self.anagrams2.get_anagrams("loud")
    self.assertEqual(r, ['loud'])

    _, r = self.anagrams2.get_anagrams("louder")
    self.assertEqual(r, ['louder'])

    _, r = self.anagrams2.get_anagrams("loudest")
    self.assertEqual(r, ['loudest'])

    _, r = self.anagrams2.get_anagrams("loudly")
    self.assertEqual(r, ['loudly'])

    _, r = self.anagrams2.get_anagrams("loudness")
    self.assertEqual(r, ['loudness'])

    _, r = self.anagrams2.get_anagrams("loudspeaker")
    self.assertEqual(r, ['loudspeaker'])

    _, r = self.anagrams2.get_anagrams("loudspeakers")
    self.assertEqual(r, ['loudspeakers'])

    _, r = self.anagrams2.get_anagrams("louis")
    self.assertEqual(r, ['louis'])

    _, r = self.anagrams2.get_anagrams("louisa")
    self.assertEqual(r, ['louisa'])

    _, r = self.anagrams2.get_anagrams("louise")
    self.assertEqual(r, ['louise'])

    _, r = self.anagrams2.get_anagrams("louisiana")
    self.assertEqual(r, ['louisiana'])

    _, r = self.anagrams2.get_anagrams("louisianan")
    self.assertEqual(r, ['louisianan'])

    _, r = self.anagrams2.get_anagrams("louisville")
    self.assertEqual(r, ['louisville'])

    _, r = self.anagrams2.get_anagrams("lounge")
    self.assertEqual(r, ['lounge'])

    _, r = self.anagrams2.get_anagrams("lounged")
    self.assertEqual(r, ['lounged'])

    _, r = self.anagrams2.get_anagrams("lounges")
    self.assertEqual(r, ['lounges'])

    _, r = self.anagrams2.get_anagrams("lounging")
    self.assertEqual(r, ['lounging'])

    _, r = self.anagrams2.get_anagrams("lounsbury")
    self.assertEqual(r, ['lounsbury'])

    _, r = self.anagrams2.get_anagrams("lourdes")
    self.assertEqual(r, ['lourdes'])

    _, r = self.anagrams2.get_anagrams("louse")
    self.assertEqual(r, ['louse', 'seoul'])

    _, r = self.anagrams2.get_anagrams("lousy")
    self.assertEqual(r, ['lousy'])

    _, r = self.anagrams2.get_anagrams("lout")
    self.assertEqual(r, ['lout'])

    _, r = self.anagrams2.get_anagrams("louvre")
    self.assertEqual(r, ['louvre'])

    _, r = self.anagrams2.get_anagrams("lovable")
    self.assertEqual(r, ['lovable'])

    _, r = self.anagrams2.get_anagrams("lovably")
    self.assertEqual(r, ['lovably'])

    _, r = self.anagrams2.get_anagrams("love")
    self.assertEqual(r, ['love'])

    _, r = self.anagrams2.get_anagrams("loved")
    self.assertEqual(r, ['loved'])

    _, r = self.anagrams2.get_anagrams("lovejoy")
    self.assertEqual(r, ['lovejoy'])

    _, r = self.anagrams2.get_anagrams("lovelace")
    self.assertEqual(r, ['lovelace'])

    _, r = self.anagrams2.get_anagrams("loveland")
    self.assertEqual(r, ['loveland'])

    _, r = self.anagrams2.get_anagrams("lovelier")
    self.assertEqual(r, ['lovelier'])

    _, r = self.anagrams2.get_anagrams("lovelies")
    self.assertEqual(r, ['lovelies'])

    _, r = self.anagrams2.get_anagrams("loveliest")
    self.assertEqual(r, ['loveliest'])

    _, r = self.anagrams2.get_anagrams("loveliness")
    self.assertEqual(r, ['loveliness'])

    _, r = self.anagrams2.get_anagrams("lovelorn")
    self.assertEqual(r, ['lovelorn'])

    _, r = self.anagrams2.get_anagrams("lovely")
    self.assertEqual(r, ['lovely', 'volley'])

    _, r = self.anagrams2.get_anagrams("lover")
    self.assertEqual(r, ['lover'])

    _, r = self.anagrams2.get_anagrams("lovers")
    self.assertEqual(r, ['lovers', 'solver'])

    _, r = self.anagrams2.get_anagrams("loves")
    self.assertEqual(r, ['loves', 'solve'])

    _, r = self.anagrams2.get_anagrams("loving")
    self.assertEqual(r, ['loving'])

    _, r = self.anagrams2.get_anagrams("lovingly")
    self.assertEqual(r, ['lovingly'])

    _, r = self.anagrams2.get_anagrams("low")
    self.assertEqual(r, ['low', 'owl'])

    _, r = self.anagrams2.get_anagrams("lowe")
    self.assertEqual(r, ['lowe'])

    _, r = self.anagrams2.get_anagrams("lowell")
    self.assertEqual(r, ['lowell'])

    _, r = self.anagrams2.get_anagrams("lower")
    self.assertEqual(r, ['lower'])

    _, r = self.anagrams2.get_anagrams("lowered")
    self.assertEqual(r, ['lowered'])

    _, r = self.anagrams2.get_anagrams("lowering")
    self.assertEqual(r, ['lowering'])

    _, r = self.anagrams2.get_anagrams("lowers")
    self.assertEqual(r, ['lowers', 'slower'])

    _, r = self.anagrams2.get_anagrams("lowest")
    self.assertEqual(r, ['lowest', 'towels'])

    _, r = self.anagrams2.get_anagrams("lowland")
    self.assertEqual(r, ['lowland'])

    _, r = self.anagrams2.get_anagrams("lowlands")
    self.assertEqual(r, ['lowlands'])

    _, r = self.anagrams2.get_anagrams("lowliest")
    self.assertEqual(r, ['lowliest'])

    _, r = self.anagrams2.get_anagrams("lowly")
    self.assertEqual(r, ['lowly'])

    _, r = self.anagrams2.get_anagrams("lowness")
    self.assertEqual(r, ['lowness'])

    _, r = self.anagrams2.get_anagrams("lowry")
    self.assertEqual(r, ['lowry'])

    _, r = self.anagrams2.get_anagrams("lows")
    self.assertEqual(r, ['lows', 'owls', 'slow'])

    _, r = self.anagrams2.get_anagrams("loy")
    self.assertEqual(r, ['loy'])

    _, r = self.anagrams2.get_anagrams("loyal")
    self.assertEqual(r, ['alloy', 'loyal'])

    _, r = self.anagrams2.get_anagrams("loyally")
    self.assertEqual(r, ['loyally'])

    _, r = self.anagrams2.get_anagrams("loyalties")
    self.assertEqual(r, ['loyalties'])

    _, r = self.anagrams2.get_anagrams("loyalty")
    self.assertEqual(r, ['loyalty'])

    _, r = self.anagrams2.get_anagrams("loyola")
    self.assertEqual(r, ['loyola'])

    _, r = self.anagrams2.get_anagrams("lubbock")
    self.assertEqual(r, ['lubbock'])

    _, r = self.anagrams2.get_anagrams("lubell")
    self.assertEqual(r, ['lubell'])

    _, r = self.anagrams2.get_anagrams("lubricant")
    self.assertEqual(r, ['lubricant'])

    _, r = self.anagrams2.get_anagrams("lubricate")
    self.assertEqual(r, ['lubricate'])

    _, r = self.anagrams2.get_anagrams("lubrication")
    self.assertEqual(r, ['lubrication'])

    _, r = self.anagrams2.get_anagrams("lucas")
    self.assertEqual(r, ['claus', 'lucas'])

    _, r = self.anagrams2.get_anagrams("lucerne")
    self.assertEqual(r, ['lucerne'])

    _, r = self.anagrams2.get_anagrams("lucia")
    self.assertEqual(r, ['lucia'])

    _, r = self.anagrams2.get_anagrams("lucian")
    self.assertEqual(r, ['lucian'])

    _, r = self.anagrams2.get_anagrams("lucid")
    self.assertEqual(r, ['lucid'])

    _, r = self.anagrams2.get_anagrams("lucien")
    self.assertEqual(r, ['lucien', 'nuclei'])

    _, r = self.anagrams2.get_anagrams("lucifer")
    self.assertEqual(r, ['lucifer'])

    _, r = self.anagrams2.get_anagrams("lucille")
    self.assertEqual(r, ['lucille'])

    _, r = self.anagrams2.get_anagrams("lucius")
    self.assertEqual(r, ['lucius'])

    _, r = self.anagrams2.get_anagrams("luck")
    self.assertEqual(r, ['luck'])

    _, r = self.anagrams2.get_anagrams("lucked")
    self.assertEqual(r, ['lucked'])

    _, r = self.anagrams2.get_anagrams("luckier")
    self.assertEqual(r, ['luckier'])

    _, r = self.anagrams2.get_anagrams("luckiest")
    self.assertEqual(r, ['luckiest'])

    _, r = self.anagrams2.get_anagrams("luckily")
    self.assertEqual(r, ['luckily'])

    _, r = self.anagrams2.get_anagrams("luckless")
    self.assertEqual(r, ['luckless'])

    _, r = self.anagrams2.get_anagrams("lucks")
    self.assertEqual(r, ['lucks'])

    _, r = self.anagrams2.get_anagrams("lucky")
    self.assertEqual(r, ['lucky'])

    _, r = self.anagrams2.get_anagrams("lucrative")
    self.assertEqual(r, ['lucrative', 'victualer'])

    _, r = self.anagrams2.get_anagrams("lucretia")
    self.assertEqual(r, ['lucretia'])

    _, r = self.anagrams2.get_anagrams("lucretius")
    self.assertEqual(r, ['lucretius'])

    _, r = self.anagrams2.get_anagrams("lucy")
    self.assertEqual(r, ['lucy'])

    _, r = self.anagrams2.get_anagrams("ludicrous")
    self.assertEqual(r, ['ludicrous'])

    _, r = self.anagrams2.get_anagrams("ludicrously")
    self.assertEqual(r, ['ludicrously'])

    _, r = self.anagrams2.get_anagrams("ludicrousness")
    self.assertEqual(r, ['ludicrousness'])

    _, r = self.anagrams2.get_anagrams("ludlow")
    self.assertEqual(r, ['ludlow'])

    _, r = self.anagrams2.get_anagrams("ludmilla")
    self.assertEqual(r, ['ludmilla'])

    _, r = self.anagrams2.get_anagrams("ludwig")
    self.assertEqual(r, ['ludwig'])

    _, r = self.anagrams2.get_anagrams("lufthansa")
    self.assertEqual(r, ['lufthansa'])

    _, r = self.anagrams2.get_anagrams("luftwaffe")
    self.assertEqual(r, ['luftwaffe'])

    _, r = self.anagrams2.get_anagrams("luggage")
    self.assertEqual(r, ['luggage'])

    _, r = self.anagrams2.get_anagrams("luis")
    self.assertEqual(r, ['luis'])

    _, r = self.anagrams2.get_anagrams("luke")
    self.assertEqual(r, ['luke'])

    _, r = self.anagrams2.get_anagrams("lukewarm")
    self.assertEqual(r, ['lukewarm'])

    _, r = self.anagrams2.get_anagrams("lull")
    self.assertEqual(r, ['lull'])

    _, r = self.anagrams2.get_anagrams("lullaby")
    self.assertEqual(r, ['lullaby'])

    _, r = self.anagrams2.get_anagrams("lulled")
    self.assertEqual(r, ['lulled'])

    _, r = self.anagrams2.get_anagrams("lulls")
    self.assertEqual(r, ['lulls'])

    _, r = self.anagrams2.get_anagrams("lumber")
    self.assertEqual(r, ['lumber', 'rumble'])

    _, r = self.anagrams2.get_anagrams("lumbered")
    self.assertEqual(r, ['lumbered'])

    _, r = self.anagrams2.get_anagrams("lumbering")
    self.assertEqual(r, ['lumbering'])

    _, r = self.anagrams2.get_anagrams("luminous")
    self.assertEqual(r, ['luminous'])

    _, r = self.anagrams2.get_anagrams("luminously")
    self.assertEqual(r, ['luminously'])

    _, r = self.anagrams2.get_anagrams("lummox")
    self.assertEqual(r, ['lummox'])

    _, r = self.anagrams2.get_anagrams("lump")
    self.assertEqual(r, ['lump', 'plum'])

    _, r = self.anagrams2.get_anagrams("lumped")
    self.assertEqual(r, ['lumped', 'plumed'])

    _, r = self.anagrams2.get_anagrams("lumping")
    self.assertEqual(r, ['lumping'])

    _, r = self.anagrams2.get_anagrams("lumps")
    self.assertEqual(r, ['lumps', 'plums', 'slump'])

    _, r = self.anagrams2.get_anagrams("lumpur")
    self.assertEqual(r, ['lumpur'])

    _, r = self.anagrams2.get_anagrams("lumpy")
    self.assertEqual(r, ['lumpy'])

    _, r = self.anagrams2.get_anagrams("lunar")
    self.assertEqual(r, ['lunar'])

    _, r = self.anagrams2.get_anagrams("lunatic")
    self.assertEqual(r, ['lunatic'])

    _, r = self.anagrams2.get_anagrams("lunch")
    self.assertEqual(r, ['lunch'])

    _, r = self.anagrams2.get_anagrams("lunched")
    self.assertEqual(r, ['lunched'])

    _, r = self.anagrams2.get_anagrams("luncheon")
    self.assertEqual(r, ['luncheon'])

    _, r = self.anagrams2.get_anagrams("luncheons")
    self.assertEqual(r, ['luncheons'])

    _, r = self.anagrams2.get_anagrams("lunches")
    self.assertEqual(r, ['lunches'])

    _, r = self.anagrams2.get_anagrams("lunching")
    self.assertEqual(r, ['lunching'])

    _, r = self.anagrams2.get_anagrams("lund")
    self.assertEqual(r, ['lund'])

    _, r = self.anagrams2.get_anagrams("lundberg")
    self.assertEqual(r, ['berglund', 'lundberg'])

    _, r = self.anagrams2.get_anagrams("lundquist")
    self.assertEqual(r, ['lundquist'])

    _, r = self.anagrams2.get_anagrams("lung")
    self.assertEqual(r, ['lung'])

    _, r = self.anagrams2.get_anagrams("lunged")
    self.assertEqual(r, ['lunged'])

    _, r = self.anagrams2.get_anagrams("lungs")
    self.assertEqual(r, ['lungs', 'slung'])

    _, r = self.anagrams2.get_anagrams("lura")
    self.assertEqual(r, ['lura', 'raul'])

    _, r = self.anagrams2.get_anagrams("lurch")
    self.assertEqual(r, ['lurch'])

    _, r = self.anagrams2.get_anagrams("lurched")
    self.assertEqual(r, ['lurched'])

    _, r = self.anagrams2.get_anagrams("lurches")
    self.assertEqual(r, ['lurches'])

    _, r = self.anagrams2.get_anagrams("lurching")
    self.assertEqual(r, ['lurching'])

    _, r = self.anagrams2.get_anagrams("lure")
    self.assertEqual(r, ['lure', 'rule'])

    _, r = self.anagrams2.get_anagrams("lured")
    self.assertEqual(r, ['lured', 'ruled'])

    _, r = self.anagrams2.get_anagrams("lures")
    self.assertEqual(r, ['lures', 'rules'])

    _, r = self.anagrams2.get_anagrams("luring")
    self.assertEqual(r, ['luring', 'ruling'])

    _, r = self.anagrams2.get_anagrams("lurk")
    self.assertEqual(r, ['lurk'])

    _, r = self.anagrams2.get_anagrams("lurked")
    self.assertEqual(r, ['lurked'])

    _, r = self.anagrams2.get_anagrams("lurking")
    self.assertEqual(r, ['lurking'])

    _, r = self.anagrams2.get_anagrams("lurks")
    self.assertEqual(r, ['lurks'])

    _, r = self.anagrams2.get_anagrams("lusaka")
    self.assertEqual(r, ['lusaka'])

    _, r = self.anagrams2.get_anagrams("luscious")
    self.assertEqual(r, ['luscious'])

    _, r = self.anagrams2.get_anagrams("lusciously")
    self.assertEqual(r, ['lusciously'])

    _, r = self.anagrams2.get_anagrams("lusciousness")
    self.assertEqual(r, ['lusciousness'])

    _, r = self.anagrams2.get_anagrams("lush")
    self.assertEqual(r, ['lush'])

    _, r = self.anagrams2.get_anagrams("lust")
    self.assertEqual(r, ['lust'])

    _, r = self.anagrams2.get_anagrams("luster")
    self.assertEqual(r, ['luster', 'result', 'rustle', 'ulster'])

    _, r = self.anagrams2.get_anagrams("lustful")
    self.assertEqual(r, ['lustful'])

    _, r = self.anagrams2.get_anagrams("lustily")
    self.assertEqual(r, ['lustily'])

    _, r = self.anagrams2.get_anagrams("lustiness")
    self.assertEqual(r, ['lustiness'])

    _, r = self.anagrams2.get_anagrams("lustrous")
    self.assertEqual(r, ['lustrous'])

    _, r = self.anagrams2.get_anagrams("lusts")
    self.assertEqual(r, ['lusts'])

    _, r = self.anagrams2.get_anagrams("lusty")
    self.assertEqual(r, ['lusty'])

    _, r = self.anagrams2.get_anagrams("lute")
    self.assertEqual(r, ['lute'])

    _, r = self.anagrams2.get_anagrams("lutes")
    self.assertEqual(r, ['lutes'])

    _, r = self.anagrams2.get_anagrams("luther")
    self.assertEqual(r, ['hurtle', 'luther'])

    _, r = self.anagrams2.get_anagrams("lutheran")
    self.assertEqual(r, ['lutheran'])

    _, r = self.anagrams2.get_anagrams("lutheranize")
    self.assertEqual(r, ['lutheranize'])

    _, r = self.anagrams2.get_anagrams("lutheranizer")
    self.assertEqual(r, ['lutheranizer'])

    _, r = self.anagrams2.get_anagrams("lutheranizers")
    self.assertEqual(r, ['lutheranizers'])

    _, r = self.anagrams2.get_anagrams("lutheranizes")
    self.assertEqual(r, ['lutheranizes'])

    _, r = self.anagrams2.get_anagrams("lutz")
    self.assertEqual(r, ['lutz'])

    _, r = self.anagrams2.get_anagrams("luxembourg")
    self.assertEqual(r, ['luxembourg'])

    _, r = self.anagrams2.get_anagrams("luxemburg")
    self.assertEqual(r, ['luxemburg'])

    _, r = self.anagrams2.get_anagrams("luxuriant")
    self.assertEqual(r, ['luxuriant'])

    _, r = self.anagrams2.get_anagrams("luxuriantly")
    self.assertEqual(r, ['luxuriantly'])

    _, r = self.anagrams2.get_anagrams("luxuries")
    self.assertEqual(r, ['luxuries'])

    _, r = self.anagrams2.get_anagrams("luxurious")
    self.assertEqual(r, ['luxurious'])

    _, r = self.anagrams2.get_anagrams("luxuriously")
    self.assertEqual(r, ['luxuriously'])

    _, r = self.anagrams2.get_anagrams("luxury")
    self.assertEqual(r, ['luxury'])

    _, r = self.anagrams2.get_anagrams("luzon")
    self.assertEqual(r, ['luzon'])

    _, r = self.anagrams2.get_anagrams("l'vov")
    self.assertEqual(r, ["l'vov"])

    _, r = self.anagrams2.get_anagrams("lydia")
    self.assertEqual(r, ['daily', 'lydia'])

    _, r = self.anagrams2.get_anagrams("lying")
    self.assertEqual(r, ['lying'])

    _, r = self.anagrams2.get_anagrams("lykes")
    self.assertEqual(r, ['lykes'])

    _, r = self.anagrams2.get_anagrams("lyle")
    self.assertEqual(r, ['lyle', 'yell'])

    _, r = self.anagrams2.get_anagrams("lyman")
    self.assertEqual(r, ['lyman', 'manly'])

    _, r = self.anagrams2.get_anagrams("lymph")
    self.assertEqual(r, ['lymph'])

    _, r = self.anagrams2.get_anagrams("lynch")
    self.assertEqual(r, ['lynch'])

    _, r = self.anagrams2.get_anagrams("lynchburg")
    self.assertEqual(r, ['lynchburg'])

    _, r = self.anagrams2.get_anagrams("lynched")
    self.assertEqual(r, ['lynched'])

    _, r = self.anagrams2.get_anagrams("lyncher")
    self.assertEqual(r, ['lyncher'])

    _, r = self.anagrams2.get_anagrams("lynches")
    self.assertEqual(r, ['lynches'])

    _, r = self.anagrams2.get_anagrams("lyndon")
    self.assertEqual(r, ['lyndon'])

    _, r = self.anagrams2.get_anagrams("lynn")
    self.assertEqual(r, ['lynn'])

    _, r = self.anagrams2.get_anagrams("lynx")
    self.assertEqual(r, ['lynx'])

    _, r = self.anagrams2.get_anagrams("lynxes")
    self.assertEqual(r, ['lynxes'])

    _, r = self.anagrams2.get_anagrams("lyon")
    self.assertEqual(r, ['lyon', 'only'])

    _, r = self.anagrams2.get_anagrams("lyons")
    self.assertEqual(r, ['lyons'])

    _, r = self.anagrams2.get_anagrams("lyra")
    self.assertEqual(r, ['lyra'])

    _, r = self.anagrams2.get_anagrams("lyre")
    self.assertEqual(r, ['lyre', 'rely'])

    _, r = self.anagrams2.get_anagrams("lyric")
    self.assertEqual(r, ['cyril', 'lyric'])

    _, r = self.anagrams2.get_anagrams("lyrics")
    self.assertEqual(r, ['lyrics'])

    _, r = self.anagrams2.get_anagrams("lysenko")
    self.assertEqual(r, ['lysenko'])

    _, r = self.anagrams2.get_anagrams("mabel")
    self.assertEqual(r, ['amble', 'blame', 'mabel'])

    _, r = self.anagrams2.get_anagrams("mac")
    self.assertEqual(r, ['cam', 'mac'])

    _, r = self.anagrams2.get_anagrams("macadamia")
    self.assertEqual(r, ['macadamia'])

    _, r = self.anagrams2.get_anagrams("macarthur")
    self.assertEqual(r, ['macarthur', 'macarthur'])

    _, r = self.anagrams2.get_anagrams("macarthur")
    self.assertEqual(r, ['macarthur', 'macarthur'])

    _, r = self.anagrams2.get_anagrams("macassar")
    self.assertEqual(r, ['macassar'])

    _, r = self.anagrams2.get_anagrams("macaulay")
    self.assertEqual(r, ['macaulay'])

    _, r = self.anagrams2.get_anagrams("macaulayan")
    self.assertEqual(r, ['macaulayan'])

    _, r = self.anagrams2.get_anagrams("macaulayism")
    self.assertEqual(r, ['macaulayism'])

    _, r = self.anagrams2.get_anagrams("macaulayisms")
    self.assertEqual(r, ['macaulayisms'])

    _, r = self.anagrams2.get_anagrams("macbeth")
    self.assertEqual(r, ['macbeth'])

    _, r = self.anagrams2.get_anagrams("macdonald")
    self.assertEqual(r, ['macdonald', 'macdonald'])

    _, r = self.anagrams2.get_anagrams("macdonald")
    self.assertEqual(r, ['macdonald', 'macdonald'])

    _, r = self.anagrams2.get_anagrams("macdougall")
    self.assertEqual(r, ['macdougall', 'macdougall'])

    _, r = self.anagrams2.get_anagrams("macdougall")
    self.assertEqual(r, ['macdougall', 'macdougall'])

    _, r = self.anagrams2.get_anagrams("macdraw")
    self.assertEqual(r, ['macdraw'])

    _, r = self.anagrams2.get_anagrams("mace")
    self.assertEqual(r, ['acme', 'came', 'mace'])

    _, r = self.anagrams2.get_anagrams("maced")
    self.assertEqual(r, ['maced'])

    _, r = self.anagrams2.get_anagrams("macedon")
    self.assertEqual(r, ['macedon'])

    _, r = self.anagrams2.get_anagrams("macedonia")
    self.assertEqual(r, ['macedonia'])

    _, r = self.anagrams2.get_anagrams("macedonian")
    self.assertEqual(r, ['macedonian'])

    _, r = self.anagrams2.get_anagrams("maces")
    self.assertEqual(r, ['emacs', 'maces'])

    _, r = self.anagrams2.get_anagrams("macgregor")
    self.assertEqual(r, ['macgregor', 'macgregor'])

    _, r = self.anagrams2.get_anagrams("macgregor")
    self.assertEqual(r, ['macgregor', 'macgregor'])

    _, r = self.anagrams2.get_anagrams("mach")
    self.assertEqual(r, ['mach'])

    _, r = self.anagrams2.get_anagrams("machiavelli")
    self.assertEqual(r, ['machiavelli'])

    _, r = self.anagrams2.get_anagrams("machiavellian")
    self.assertEqual(r, ['machiavellian'])

    _, r = self.anagrams2.get_anagrams("machination")
    self.assertEqual(r, ['machination'])

    _, r = self.anagrams2.get_anagrams("machine")
    self.assertEqual(r, ['machine'])

    _, r = self.anagrams2.get_anagrams("machined")
    self.assertEqual(r, ['machined'])

    _, r = self.anagrams2.get_anagrams("machinelike")
    self.assertEqual(r, ['machinelike'])

    _, r = self.anagrams2.get_anagrams("machinery")
    self.assertEqual(r, ['machinery'])

    _, r = self.anagrams2.get_anagrams("machines")
    self.assertEqual(r, ['machines'])

    _, r = self.anagrams2.get_anagrams("machining")
    self.assertEqual(r, ['machining'])

    _, r = self.anagrams2.get_anagrams("macho")
    self.assertEqual(r, ['macho'])

    _, r = self.anagrams2.get_anagrams("macintosh")
    self.assertEqual(r, ['macintosh', 'macintosh', 'macintosh'])

    _, r = self.anagrams2.get_anagrams("macintosh")
    self.assertEqual(r, ['macintosh', 'macintosh', 'macintosh'])

    _, r = self.anagrams2.get_anagrams("macintosh")
    self.assertEqual(r, ['macintosh', 'macintosh', 'macintosh'])

    _, r = self.anagrams2.get_anagrams("mackenzie")
    self.assertEqual(r, ['mackenzie', 'mackenzie'])

    _, r = self.anagrams2.get_anagrams("mackenzie")
    self.assertEqual(r, ['mackenzie', 'mackenzie'])

    _, r = self.anagrams2.get_anagrams("mackerel")
    self.assertEqual(r, ['mackerel'])

    _, r = self.anagrams2.get_anagrams("mackey")
    self.assertEqual(r, ['mackey'])

    _, r = self.anagrams2.get_anagrams("mackinac")
    self.assertEqual(r, ['mackinac'])

    _, r = self.anagrams2.get_anagrams("mackinaw")
    self.assertEqual(r, ['mackinaw'])

    _, r = self.anagrams2.get_anagrams("macmahon")
    self.assertEqual(r, ['macmahon'])

    _, r = self.anagrams2.get_anagrams("macmillan")
    self.assertEqual(r, ['macmillan', 'macmillan'])

    _, r = self.anagrams2.get_anagrams("macmillan")
    self.assertEqual(r, ['macmillan', 'macmillan'])

    _, r = self.anagrams2.get_anagrams("macon")
    self.assertEqual(r, ['macon'])

    _, r = self.anagrams2.get_anagrams("macpaint")
    self.assertEqual(r, ['macpaint'])

    _, r = self.anagrams2.get_anagrams("macro")
    self.assertEqual(r, ['armco', 'macro', 'marco'])

    _, r = self.anagrams2.get_anagrams("macroeconomics")
    self.assertEqual(r, ['macroeconomics'])

    _, r = self.anagrams2.get_anagrams("macromolecule")
    self.assertEqual(r, ['macromolecule'])

    _, r = self.anagrams2.get_anagrams("macromolecules")
    self.assertEqual(r, ['macromolecules'])

    _, r = self.anagrams2.get_anagrams("macrophage")
    self.assertEqual(r, ['macrophage'])

    _, r = self.anagrams2.get_anagrams("macros")
    self.assertEqual(r, ['macros'])

    _, r = self.anagrams2.get_anagrams("macroscopic")
    self.assertEqual(r, ['macroscopic'])

    _, r = self.anagrams2.get_anagrams("mad")
    self.assertEqual(r, ['dam', 'mad'])

    _, r = self.anagrams2.get_anagrams("madagascar")
    self.assertEqual(r, ['madagascar'])

    _, r = self.anagrams2.get_anagrams("madam")
    self.assertEqual(r, ['madam'])

    _, r = self.anagrams2.get_anagrams("madame")
    self.assertEqual(r, ['madame'])

    _, r = self.anagrams2.get_anagrams("madames")
    self.assertEqual(r, ['madames'])

    _, r = self.anagrams2.get_anagrams("madden")
    self.assertEqual(r, ['damned', 'demand', 'madden'])

    _, r = self.anagrams2.get_anagrams("maddening")
    self.assertEqual(r, ['demanding', 'maddening'])

    _, r = self.anagrams2.get_anagrams("madder")
    self.assertEqual(r, ['madder'])

    _, r = self.anagrams2.get_anagrams("maddest")
    self.assertEqual(r, ['maddest'])

    _, r = self.anagrams2.get_anagrams("maddox")
    self.assertEqual(r, ['maddox'])

    _, r = self.anagrams2.get_anagrams("made")
    self.assertEqual(r, ['dame', 'made', 'mead'])

    _, r = self.anagrams2.get_anagrams("madeira")
    self.assertEqual(r, ['madeira'])

    _, r = self.anagrams2.get_anagrams("madeleine")
    self.assertEqual(r, ['madeleine'])

    _, r = self.anagrams2.get_anagrams("madeline")
    self.assertEqual(r, ['madeline'])

    _, r = self.anagrams2.get_anagrams("madhouse")
    self.assertEqual(r, ['madhouse'])

    _, r = self.anagrams2.get_anagrams("madhya")
    self.assertEqual(r, ['madhya'])

    _, r = self.anagrams2.get_anagrams("madison")
    self.assertEqual(r, ['domains', 'madison'])

    _, r = self.anagrams2.get_anagrams("madly")
    self.assertEqual(r, ['madly'])

    _, r = self.anagrams2.get_anagrams("madman")
    self.assertEqual(r, ['madman'])

    _, r = self.anagrams2.get_anagrams("madmen")
    self.assertEqual(r, ['madmen'])

    _, r = self.anagrams2.get_anagrams("madness")
    self.assertEqual(r, ['madness'])

    _, r = self.anagrams2.get_anagrams("madonna")
    self.assertEqual(r, ['madonna'])

    _, r = self.anagrams2.get_anagrams("madonnas")
    self.assertEqual(r, ['madonnas'])

    _, r = self.anagrams2.get_anagrams("madras")
    self.assertEqual(r, ['dramas', 'madras'])

    _, r = self.anagrams2.get_anagrams("madrid")
    self.assertEqual(r, ['madrid'])

    _, r = self.anagrams2.get_anagrams("madsen")
    self.assertEqual(r, ['amends', 'madsen'])

    _, r = self.anagrams2.get_anagrams("mae")
    self.assertEqual(r, ['mae'])

    _, r = self.anagrams2.get_anagrams("maelstrom")
    self.assertEqual(r, ['maelstrom'])

    _, r = self.anagrams2.get_anagrams("maestro")
    self.assertEqual(r, ['maestro'])

    _, r = self.anagrams2.get_anagrams("mafia")
    self.assertEqual(r, ['mafia'])

    _, r = self.anagrams2.get_anagrams("mafiosi")
    self.assertEqual(r, ['mafiosi'])

    _, r = self.anagrams2.get_anagrams("magazine")
    self.assertEqual(r, ['magazine'])

    _, r = self.anagrams2.get_anagrams("magazines")
    self.assertEqual(r, ['magazines'])

    _, r = self.anagrams2.get_anagrams("magdalene")
    self.assertEqual(r, ['magdalene'])

    _, r = self.anagrams2.get_anagrams("magellan")
    self.assertEqual(r, ['magellan'])

    _, r = self.anagrams2.get_anagrams("magellanic")
    self.assertEqual(r, ['magellanic'])

    _, r = self.anagrams2.get_anagrams("magenta")
    self.assertEqual(r, ['magenta'])

    _, r = self.anagrams2.get_anagrams("maggie")
    self.assertEqual(r, ['maggie'])

    _, r = self.anagrams2.get_anagrams("maggot")
    self.assertEqual(r, ['maggot'])

    _, r = self.anagrams2.get_anagrams("maggots")
    self.assertEqual(r, ['maggots'])

    _, r = self.anagrams2.get_anagrams("magic")
    self.assertEqual(r, ['magic'])

    _, r = self.anagrams2.get_anagrams("magical")
    self.assertEqual(r, ['magical'])

    _, r = self.anagrams2.get_anagrams("magically")
    self.assertEqual(r, ['magically'])

    _, r = self.anagrams2.get_anagrams("magician")
    self.assertEqual(r, ['magician'])

    _, r = self.anagrams2.get_anagrams("magicians")
    self.assertEqual(r, ['magicians'])

    _, r = self.anagrams2.get_anagrams("magill")
    self.assertEqual(r, ['magill'])

    _, r = self.anagrams2.get_anagrams("magistrate")
    self.assertEqual(r, ['magistrate'])

    _, r = self.anagrams2.get_anagrams("magistrates")
    self.assertEqual(r, ['magistrates'])

    _, r = self.anagrams2.get_anagrams("magna")
    self.assertEqual(r, ['magna'])

    _, r = self.anagrams2.get_anagrams("magnesium")
    self.assertEqual(r, ['magnesium'])

    _, r = self.anagrams2.get_anagrams("magnet")
    self.assertEqual(r, ['magnet'])

    _, r = self.anagrams2.get_anagrams("magnetic")
    self.assertEqual(r, ['magnetic'])

    _, r = self.anagrams2.get_anagrams("magnetically")
    self.assertEqual(r, ['magnetically'])

    _, r = self.anagrams2.get_anagrams("magnetism")
    self.assertEqual(r, ['magnetism'])

    _, r = self.anagrams2.get_anagrams("magnetisms")
    self.assertEqual(r, ['magnetisms'])

    _, r = self.anagrams2.get_anagrams("magnetizable")
    self.assertEqual(r, ['magnetizable'])

    _, r = self.anagrams2.get_anagrams("magnetized")
    self.assertEqual(r, ['magnetized'])

    _, r = self.anagrams2.get_anagrams("magneto")
    self.assertEqual(r, ['magneto', 'megaton'])

    _, r = self.anagrams2.get_anagrams("magnification")
    self.assertEqual(r, ['magnification'])

    _, r = self.anagrams2.get_anagrams("magnificence")
    self.assertEqual(r, ['magnificence'])

    _, r = self.anagrams2.get_anagrams("magnificent")
    self.assertEqual(r, ['magnificent'])

    _, r = self.anagrams2.get_anagrams("magnificently")
    self.assertEqual(r, ['magnificently'])

    _, r = self.anagrams2.get_anagrams("magnified")
    self.assertEqual(r, ['magnified'])

    _, r = self.anagrams2.get_anagrams("magnifier")
    self.assertEqual(r, ['magnifier'])

    _, r = self.anagrams2.get_anagrams("magnifies")
    self.assertEqual(r, ['magnifies'])

    _, r = self.anagrams2.get_anagrams("magnify")
    self.assertEqual(r, ['magnify'])

    _, r = self.anagrams2.get_anagrams("magnifying")
    self.assertEqual(r, ['magnifying'])

    _, r = self.anagrams2.get_anagrams("magnitude")
    self.assertEqual(r, ['magnitude'])

    _, r = self.anagrams2.get_anagrams("magnitudes")
    self.assertEqual(r, ['magnitudes'])

    _, r = self.anagrams2.get_anagrams("magnolia")
    self.assertEqual(r, ['magnolia'])

    _, r = self.anagrams2.get_anagrams("magnum")
    self.assertEqual(r, ['magnum'])

    _, r = self.anagrams2.get_anagrams("magnuson")
    self.assertEqual(r, ['magnuson'])

    _, r = self.anagrams2.get_anagrams("magog")
    self.assertEqual(r, ['magog'])

    _, r = self.anagrams2.get_anagrams("magpie")
    self.assertEqual(r, ['magpie'])

    _, r = self.anagrams2.get_anagrams("magruder")
    self.assertEqual(r, ['magruder'])

    _, r = self.anagrams2.get_anagrams("maguire")
    self.assertEqual(r, ['maguire'])

    _, r = self.anagrams2.get_anagrams("maguires")
    self.assertEqual(r, ['maguires'])

    _, r = self.anagrams2.get_anagrams("maharashtra")
    self.assertEqual(r, ['maharashtra'])

    _, r = self.anagrams2.get_anagrams("mahayana")
    self.assertEqual(r, ['mahayana'])

    _, r = self.anagrams2.get_anagrams("mahayanist")
    self.assertEqual(r, ['mahayanist'])

    _, r = self.anagrams2.get_anagrams("mahogany")
    self.assertEqual(r, ['mahogany'])

    _, r = self.anagrams2.get_anagrams("mahoney")
    self.assertEqual(r, ['mahoney'])

    _, r = self.anagrams2.get_anagrams("maid")
    self.assertEqual(r, ['amid', 'maid'])

    _, r = self.anagrams2.get_anagrams("maiden")
    self.assertEqual(r, ['maiden', 'median'])

    _, r = self.anagrams2.get_anagrams("maidens")
    self.assertEqual(r, ['maidens', 'medians'])

    _, r = self.anagrams2.get_anagrams("maids")
    self.assertEqual(r, ['maids', 'midas'])

    _, r = self.anagrams2.get_anagrams("maier")
    self.assertEqual(r, ['aimer', 'maier', 'marie'])

    _, r = self.anagrams2.get_anagrams("mail")
    self.assertEqual(r, ['lima', 'mail', 'mali'])

    _, r = self.anagrams2.get_anagrams("mailable")
    self.assertEqual(r, ['mailable'])

    _, r = self.anagrams2.get_anagrams("mailbox")
    self.assertEqual(r, ['mailbox'])

    _, r = self.anagrams2.get_anagrams("mailboxes")
    self.assertEqual(r, ['mailboxes'])

    _, r = self.anagrams2.get_anagrams("mailed")
    self.assertEqual(r, ['mailed'])

    _, r = self.anagrams2.get_anagrams("mailer")
    self.assertEqual(r, ['elmira', 'mailer'])

    _, r = self.anagrams2.get_anagrams("mailing")
    self.assertEqual(r, ['mailing'])

    _, r = self.anagrams2.get_anagrams("mailings")
    self.assertEqual(r, ['mailings'])

    _, r = self.anagrams2.get_anagrams("mailman")
    self.assertEqual(r, ['mailman'])

    _, r = self.anagrams2.get_anagrams("mailmen")
    self.assertEqual(r, ['mailmen'])

    _, r = self.anagrams2.get_anagrams("mails")
    self.assertEqual(r, ['islam', 'mails', 'simla'])

    _, r = self.anagrams2.get_anagrams("maim")
    self.assertEqual(r, ['maim'])

    _, r = self.anagrams2.get_anagrams("maimed")
    self.assertEqual(r, ['maimed'])

    _, r = self.anagrams2.get_anagrams("maiming")
    self.assertEqual(r, ['maiming'])

    _, r = self.anagrams2.get_anagrams("maims")
    self.assertEqual(r, ['maims'])

    _, r = self.anagrams2.get_anagrams("main")
    self.assertEqual(r, ['main'])

    _, r = self.anagrams2.get_anagrams("maine")
    self.assertEqual(r, ['maine'])

    _, r = self.anagrams2.get_anagrams("mainframe")
    self.assertEqual(r, ['mainframe'])

    _, r = self.anagrams2.get_anagrams("mainframes")
    self.assertEqual(r, ['mainframes'])

    _, r = self.anagrams2.get_anagrams("mainland")
    self.assertEqual(r, ['mainland'])

    _, r = self.anagrams2.get_anagrams("mainline")
    self.assertEqual(r, ['mainline'])

    _, r = self.anagrams2.get_anagrams("mainly")
    self.assertEqual(r, ['mainly'])

    _, r = self.anagrams2.get_anagrams("mains")
    self.assertEqual(r, ['mains'])

    _, r = self.anagrams2.get_anagrams("mainstay")
    self.assertEqual(r, ['mainstay'])

    _, r = self.anagrams2.get_anagrams("mainstream")
    self.assertEqual(r, ['mainstream'])

    _, r = self.anagrams2.get_anagrams("maintain")
    self.assertEqual(r, ['maintain'])

    _, r = self.anagrams2.get_anagrams("maintainability")
    self.assertEqual(r, ['maintainability'])

    _, r = self.anagrams2.get_anagrams("maintainable")
    self.assertEqual(r, ['maintainable'])

    _, r = self.anagrams2.get_anagrams("maintained")
    self.assertEqual(r, ['maintained'])

    _, r = self.anagrams2.get_anagrams("maintainer")
    self.assertEqual(r, ['maintainer'])

    _, r = self.anagrams2.get_anagrams("maintainers")
    self.assertEqual(r, ['maintainers'])

    _, r = self.anagrams2.get_anagrams("maintaining")
    self.assertEqual(r, ['maintaining'])

    _, r = self.anagrams2.get_anagrams("maintains")
    self.assertEqual(r, ['maintains'])

    _, r = self.anagrams2.get_anagrams("maintenance")
    self.assertEqual(r, ['maintenance'])

    _, r = self.anagrams2.get_anagrams("maintenances")
    self.assertEqual(r, ['maintenances'])

    _, r = self.anagrams2.get_anagrams("maize")
    self.assertEqual(r, ['maize'])

    _, r = self.anagrams2.get_anagrams("majestic")
    self.assertEqual(r, ['majestic'])

    _, r = self.anagrams2.get_anagrams("majesties")
    self.assertEqual(r, ['majesties'])

    _, r = self.anagrams2.get_anagrams("majesty")
    self.assertEqual(r, ['majesty'])

    _, r = self.anagrams2.get_anagrams("major")
    self.assertEqual(r, ['major'])

    _, r = self.anagrams2.get_anagrams("majorca")
    self.assertEqual(r, ['majorca'])

    _, r = self.anagrams2.get_anagrams("majored")
    self.assertEqual(r, ['majored'])

    _, r = self.anagrams2.get_anagrams("majoring")
    self.assertEqual(r, ['majoring'])

    _, r = self.anagrams2.get_anagrams("majorities")
    self.assertEqual(r, ['majorities'])

    _, r = self.anagrams2.get_anagrams("majority")
    self.assertEqual(r, ['majority'])

    _, r = self.anagrams2.get_anagrams("majors")
    self.assertEqual(r, ['majors'])

    _, r = self.anagrams2.get_anagrams("makable")
    self.assertEqual(r, ['makable'])

    _, r = self.anagrams2.get_anagrams("make")
    self.assertEqual(r, ['make'])

    _, r = self.anagrams2.get_anagrams("maker")
    self.assertEqual(r, ['maker'])

    _, r = self.anagrams2.get_anagrams("makers")
    self.assertEqual(r, ['esmark', 'makers', 'masker'])

    _, r = self.anagrams2.get_anagrams("makes")
    self.assertEqual(r, ['makes'])

    _, r = self.anagrams2.get_anagrams("makeshift")
    self.assertEqual(r, ['makeshift'])

    _, r = self.anagrams2.get_anagrams("makeup")
    self.assertEqual(r, ['makeup'])

    _, r = self.anagrams2.get_anagrams("makeups")
    self.assertEqual(r, ['makeups'])

    _, r = self.anagrams2.get_anagrams("making")
    self.assertEqual(r, ['making'])

    _, r = self.anagrams2.get_anagrams("makings")
    self.assertEqual(r, ['makings', 'masking'])

    _, r = self.anagrams2.get_anagrams("malabar")
    self.assertEqual(r, ['malabar'])

    _, r = self.anagrams2.get_anagrams("maladies")
    self.assertEqual(r, ['maladies'])

    _, r = self.anagrams2.get_anagrams("malady")
    self.assertEqual(r, ['malady'])

    _, r = self.anagrams2.get_anagrams("malagasy")
    self.assertEqual(r, ['malagasy'])

    _, r = self.anagrams2.get_anagrams("malamud")
    self.assertEqual(r, ['malamud'])

    _, r = self.anagrams2.get_anagrams("malaria")
    self.assertEqual(r, ['malaria'])

    _, r = self.anagrams2.get_anagrams("malawi")
    self.assertEqual(r, ['malawi'])

    _, r = self.anagrams2.get_anagrams("malay")
    self.assertEqual(r, ['malay'])

    _, r = self.anagrams2.get_anagrams("malayize")
    self.assertEqual(r, ['malayize'])

    _, r = self.anagrams2.get_anagrams("malayizes")
    self.assertEqual(r, ['malayizes'])

    _, r = self.anagrams2.get_anagrams("malaysia")
    self.assertEqual(r, ['malaysia'])

    _, r = self.anagrams2.get_anagrams("malaysian")
    self.assertEqual(r, ['malaysian'])

    _, r = self.anagrams2.get_anagrams("malcolm")
    self.assertEqual(r, ['malcolm'])

    _, r = self.anagrams2.get_anagrams("malcontent")
    self.assertEqual(r, ['malcontent'])

    _, r = self.anagrams2.get_anagrams("malden")
    self.assertEqual(r, ['malden'])

    _, r = self.anagrams2.get_anagrams("maldive")
    self.assertEqual(r, ['maldive'])

    _, r = self.anagrams2.get_anagrams("male")
    self.assertEqual(r, ['lame', 'male', 'meal'])

    _, r = self.anagrams2.get_anagrams("malefactor")
    self.assertEqual(r, ['malefactor'])

    _, r = self.anagrams2.get_anagrams("malefactors")
    self.assertEqual(r, ['malefactors'])

    _, r = self.anagrams2.get_anagrams("maleness")
    self.assertEqual(r, ['lameness', 'maleness', 'nameless', 'salesmen'])

    _, r = self.anagrams2.get_anagrams("males")
    self.assertEqual(r, ['lames', 'males', 'meals', 'salem', 'selma'])

    _, r = self.anagrams2.get_anagrams("malevolent")
    self.assertEqual(r, ['malevolent'])

    _, r = self.anagrams2.get_anagrams("malformed")
    self.assertEqual(r, ['malformed'])

    _, r = self.anagrams2.get_anagrams("malfunction")
    self.assertEqual(r, ['malfunction'])

    _, r = self.anagrams2.get_anagrams("malfunctioned")
    self.assertEqual(r, ['malfunctioned'])

    _, r = self.anagrams2.get_anagrams("malfunctioning")
    self.assertEqual(r, ['malfunctioning'])

    _, r = self.anagrams2.get_anagrams("malfunctions")
    self.assertEqual(r, ['malfunctions'])

    _, r = self.anagrams2.get_anagrams("mali")
    self.assertEqual(r, ['lima', 'mail', 'mali'])

    _, r = self.anagrams2.get_anagrams("malibu")
    self.assertEqual(r, ['malibu'])

    _, r = self.anagrams2.get_anagrams("malice")
    self.assertEqual(r, ['malice'])

    _, r = self.anagrams2.get_anagrams("malicious")
    self.assertEqual(r, ['malicious'])

    _, r = self.anagrams2.get_anagrams("maliciously")
    self.assertEqual(r, ['maliciously'])

    _, r = self.anagrams2.get_anagrams("maliciousness")
    self.assertEqual(r, ['maliciousness'])

    _, r = self.anagrams2.get_anagrams("malign")
    self.assertEqual(r, ['laming', 'malign'])

    _, r = self.anagrams2.get_anagrams("malignant")
    self.assertEqual(r, ['malignant'])

    _, r = self.anagrams2.get_anagrams("malignantly")
    self.assertEqual(r, ['malignantly'])

    _, r = self.anagrams2.get_anagrams("mall")
    self.assertEqual(r, ['mall'])

    _, r = self.anagrams2.get_anagrams("mallard")
    self.assertEqual(r, ['mallard'])

    _, r = self.anagrams2.get_anagrams("mallet")
    self.assertEqual(r, ['mallet'])

    _, r = self.anagrams2.get_anagrams("mallets")
    self.assertEqual(r, ['mallets'])

    _, r = self.anagrams2.get_anagrams("mallory")
    self.assertEqual(r, ['mallory', 'morally'])

    _, r = self.anagrams2.get_anagrams("malnutrition")
    self.assertEqual(r, ['malnutrition'])

    _, r = self.anagrams2.get_anagrams("malone")
    self.assertEqual(r, ['malone'])

    _, r = self.anagrams2.get_anagrams("maloney")
    self.assertEqual(r, ['maloney'])

    _, r = self.anagrams2.get_anagrams("malpractice")
    self.assertEqual(r, ['malpractice'])

    _, r = self.anagrams2.get_anagrams("malraux")
    self.assertEqual(r, ['malraux'])

    _, r = self.anagrams2.get_anagrams("malt")
    self.assertEqual(r, ['malt'])

    _, r = self.anagrams2.get_anagrams("malta")
    self.assertEqual(r, ['malta'])

    _, r = self.anagrams2.get_anagrams("malted")
    self.assertEqual(r, ['malted'])

    _, r = self.anagrams2.get_anagrams("maltese")
    self.assertEqual(r, ['maltese'])

    _, r = self.anagrams2.get_anagrams("malthus")
    self.assertEqual(r, ['malthus'])

    _, r = self.anagrams2.get_anagrams("malthusian")
    self.assertEqual(r, ['malthusian'])

    _, r = self.anagrams2.get_anagrams("malton")
    self.assertEqual(r, ['malton'])

    _, r = self.anagrams2.get_anagrams("malts")
    self.assertEqual(r, ['malts'])

    _, r = self.anagrams2.get_anagrams("mama")
    self.assertEqual(r, ['mama'])

    _, r = self.anagrams2.get_anagrams("mamma")
    self.assertEqual(r, ['mamma'])

    _, r = self.anagrams2.get_anagrams("mammal")
    self.assertEqual(r, ['mammal'])

    _, r = self.anagrams2.get_anagrams("mammalian")
    self.assertEqual(r, ['mammalian'])

    _, r = self.anagrams2.get_anagrams("mammals")
    self.assertEqual(r, ['mammals'])

    _, r = self.anagrams2.get_anagrams("mammas")
    self.assertEqual(r, ['mammas'])

    _, r = self.anagrams2.get_anagrams("mammoth")
    self.assertEqual(r, ['mammoth'])

    _, r = self.anagrams2.get_anagrams("man")
    self.assertEqual(r, ['man'])

    _, r = self.anagrams2.get_anagrams("manage")
    self.assertEqual(r, ['manage'])

    _, r = self.anagrams2.get_anagrams("manageable")
    self.assertEqual(r, ['manageable'])

    _, r = self.anagrams2.get_anagrams("manageableness")
    self.assertEqual(r, ['manageableness'])

    _, r = self.anagrams2.get_anagrams("managed")
    self.assertEqual(r, ['managed'])

    _, r = self.anagrams2.get_anagrams("management")
    self.assertEqual(r, ['management'])

    _, r = self.anagrams2.get_anagrams("managements")
    self.assertEqual(r, ['managements'])

    _, r = self.anagrams2.get_anagrams("manager")
    self.assertEqual(r, ['manager'])

    _, r = self.anagrams2.get_anagrams("managerial")
    self.assertEqual(r, ['managerial'])

    _, r = self.anagrams2.get_anagrams("managers")
    self.assertEqual(r, ['managers'])

    _, r = self.anagrams2.get_anagrams("manages")
    self.assertEqual(r, ['manages'])

    _, r = self.anagrams2.get_anagrams("managing")
    self.assertEqual(r, ['managing'])

    _, r = self.anagrams2.get_anagrams("managua")
    self.assertEqual(r, ['managua'])

    _, r = self.anagrams2.get_anagrams("manama")
    self.assertEqual(r, ['manama'])

    _, r = self.anagrams2.get_anagrams("manchester")
    self.assertEqual(r, ['manchester'])

    _, r = self.anagrams2.get_anagrams("manchuria")
    self.assertEqual(r, ['manchuria'])

    _, r = self.anagrams2.get_anagrams("mandarin")
    self.assertEqual(r, ['mandarin'])

    _, r = self.anagrams2.get_anagrams("mandate")
    self.assertEqual(r, ['mandate'])

    _, r = self.anagrams2.get_anagrams("mandated")
    self.assertEqual(r, ['mandated'])

    _, r = self.anagrams2.get_anagrams("mandates")
    self.assertEqual(r, ['mandates'])

    _, r = self.anagrams2.get_anagrams("mandating")
    self.assertEqual(r, ['mandating'])

    _, r = self.anagrams2.get_anagrams("mandatory")
    self.assertEqual(r, ['mandatory'])

    _, r = self.anagrams2.get_anagrams("mandelbrot")
    self.assertEqual(r, ['mandelbrot'])

    _, r = self.anagrams2.get_anagrams("mandible")
    self.assertEqual(r, ['mandible'])

    _, r = self.anagrams2.get_anagrams("mane")
    self.assertEqual(r, ['amen', 'mane', 'mean', 'name'])

    _, r = self.anagrams2.get_anagrams("manes")
    self.assertEqual(r, ['manes', 'means', 'names'])

    _, r = self.anagrams2.get_anagrams("maneuver")
    self.assertEqual(r, ['maneuver'])

    _, r = self.anagrams2.get_anagrams("maneuvered")
    self.assertEqual(r, ['maneuvered'])

    _, r = self.anagrams2.get_anagrams("maneuvering")
    self.assertEqual(r, ['maneuvering'])

    _, r = self.anagrams2.get_anagrams("maneuvers")
    self.assertEqual(r, ['maneuvers'])

    _, r = self.anagrams2.get_anagrams("manfred")
    self.assertEqual(r, ['manfred'])

    _, r = self.anagrams2.get_anagrams("manger")
    self.assertEqual(r, ['german', 'manger'])

    _, r = self.anagrams2.get_anagrams("mangers")
    self.assertEqual(r, ['germans', 'mangers'])

    _, r = self.anagrams2.get_anagrams("mangle")
    self.assertEqual(r, ['mangle'])

    _, r = self.anagrams2.get_anagrams("mangled")
    self.assertEqual(r, ['mangled'])

    _, r = self.anagrams2.get_anagrams("mangler")
    self.assertEqual(r, ['mangler'])

    _, r = self.anagrams2.get_anagrams("mangles")
    self.assertEqual(r, ['mangles'])

    _, r = self.anagrams2.get_anagrams("mangling")
    self.assertEqual(r, ['mangling'])

    _, r = self.anagrams2.get_anagrams("manhattan")
    self.assertEqual(r, ['manhattan'])

    _, r = self.anagrams2.get_anagrams("manhattanize")
    self.assertEqual(r, ['manhattanize'])

    _, r = self.anagrams2.get_anagrams("manhattanizes")
    self.assertEqual(r, ['manhattanizes'])

    _, r = self.anagrams2.get_anagrams("manhole")
    self.assertEqual(r, ['manhole'])

    _, r = self.anagrams2.get_anagrams("manhood")
    self.assertEqual(r, ['manhood'])

    _, r = self.anagrams2.get_anagrams("mania")
    self.assertEqual(r, ['amain', 'mania'])

    _, r = self.anagrams2.get_anagrams("maniac")
    self.assertEqual(r, ['caiman', 'maniac'])

    _, r = self.anagrams2.get_anagrams("maniacal")
    self.assertEqual(r, ['maniacal'])

    _, r = self.anagrams2.get_anagrams("maniacs")
    self.assertEqual(r, ['maniacs'])

    _, r = self.anagrams2.get_anagrams("manic")
    self.assertEqual(r, ['manic'])

    _, r = self.anagrams2.get_anagrams("manicure")
    self.assertEqual(r, ['manicure'])

    _, r = self.anagrams2.get_anagrams("manicured")
    self.assertEqual(r, ['manicured'])

    _, r = self.anagrams2.get_anagrams("manicures")
    self.assertEqual(r, ['manicures'])

    _, r = self.anagrams2.get_anagrams("manicuring")
    self.assertEqual(r, ['manicuring'])

    _, r = self.anagrams2.get_anagrams("manifest")
    self.assertEqual(r, ['manifest'])

    _, r = self.anagrams2.get_anagrams("manifestation")
    self.assertEqual(r, ['manifestation'])

    _, r = self.anagrams2.get_anagrams("manifestations")
    self.assertEqual(r, ['manifestations'])

    _, r = self.anagrams2.get_anagrams("manifested")
    self.assertEqual(r, ['manifested'])

    _, r = self.anagrams2.get_anagrams("manifesting")
    self.assertEqual(r, ['manifesting'])

    _, r = self.anagrams2.get_anagrams("manifestly")
    self.assertEqual(r, ['manifestly'])

    _, r = self.anagrams2.get_anagrams("manifests")
    self.assertEqual(r, ['manifests'])

    _, r = self.anagrams2.get_anagrams("manifold")
    self.assertEqual(r, ['manifold'])

    _, r = self.anagrams2.get_anagrams("manifolds")
    self.assertEqual(r, ['manifolds'])

    _, r = self.anagrams2.get_anagrams("manila")
    self.assertEqual(r, ['animal', 'manila'])

    _, r = self.anagrams2.get_anagrams("manipulability")
    self.assertEqual(r, ['manipulability'])

    _, r = self.anagrams2.get_anagrams("manipulable")
    self.assertEqual(r, ['manipulable'])

    _, r = self.anagrams2.get_anagrams("manipulatable")
    self.assertEqual(r, ['manipulatable'])

    _, r = self.anagrams2.get_anagrams("manipulate")
    self.assertEqual(r, ['manipulate'])

    _, r = self.anagrams2.get_anagrams("manipulated")
    self.assertEqual(r, ['manipulated'])

    _, r = self.anagrams2.get_anagrams("manipulates")
    self.assertEqual(r, ['manipulates'])

    _, r = self.anagrams2.get_anagrams("manipulating")
    self.assertEqual(r, ['manipulating'])

    _, r = self.anagrams2.get_anagrams("manipulation")
    self.assertEqual(r, ['manipulation'])

    _, r = self.anagrams2.get_anagrams("manipulations")
    self.assertEqual(r, ['manipulations'])

    _, r = self.anagrams2.get_anagrams("manipulative")
    self.assertEqual(r, ['manipulative'])

    _, r = self.anagrams2.get_anagrams("manipulator")
    self.assertEqual(r, ['manipulator'])

    _, r = self.anagrams2.get_anagrams("manipulators")
    self.assertEqual(r, ['manipulators'])

    _, r = self.anagrams2.get_anagrams("manipulatory")
    self.assertEqual(r, ['manipulatory'])

    _, r = self.anagrams2.get_anagrams("manitoba")
    self.assertEqual(r, ['manitoba'])

    _, r = self.anagrams2.get_anagrams("manitowoc")
    self.assertEqual(r, ['manitowoc'])

    _, r = self.anagrams2.get_anagrams("mankind")
    self.assertEqual(r, ['mankind'])

    _, r = self.anagrams2.get_anagrams("mankowski")
    self.assertEqual(r, ['mankowski'])

    _, r = self.anagrams2.get_anagrams("manley")
    self.assertEqual(r, ['laymen', 'manley', 'meanly', 'namely'])

    _, r = self.anagrams2.get_anagrams("manly")
    self.assertEqual(r, ['lyman', 'manly'])

    _, r = self.anagrams2.get_anagrams("mann")
    self.assertEqual(r, ['mann'])

    _, r = self.anagrams2.get_anagrams("manned")
    self.assertEqual(r, ['manned'])

    _, r = self.anagrams2.get_anagrams("manner")
    self.assertEqual(r, ['manner'])

    _, r = self.anagrams2.get_anagrams("mannered")
    self.assertEqual(r, ['mannered'])

    _, r = self.anagrams2.get_anagrams("mannerly")
    self.assertEqual(r, ['mannerly'])

    _, r = self.anagrams2.get_anagrams("manners")
    self.assertEqual(r, ['manners'])

    _, r = self.anagrams2.get_anagrams("manning")
    self.assertEqual(r, ['manning'])

    _, r = self.anagrams2.get_anagrams("manometer")
    self.assertEqual(r, ['manometer'])

    _, r = self.anagrams2.get_anagrams("manometers")
    self.assertEqual(r, ['manometers'])

    _, r = self.anagrams2.get_anagrams("manor")
    self.assertEqual(r, ['manor', 'moran', 'norma', 'roman'])

    _, r = self.anagrams2.get_anagrams("manors")
    self.assertEqual(r, ['manors', 'ransom', 'romans'])

    _, r = self.anagrams2.get_anagrams("manpower")
    self.assertEqual(r, ['manpower'])

    _, r = self.anagrams2.get_anagrams("mans")
    self.assertEqual(r, ['mans'])

    _, r = self.anagrams2.get_anagrams("mansfield")
    self.assertEqual(r, ['mansfield'])

    _, r = self.anagrams2.get_anagrams("mansion")
    self.assertEqual(r, ['mansion', 'onanism'])

    _, r = self.anagrams2.get_anagrams("mansions")
    self.assertEqual(r, ['mansions'])

    _, r = self.anagrams2.get_anagrams("manslaughter")
    self.assertEqual(r, ['manslaughter'])

    _, r = self.anagrams2.get_anagrams("mantel")
    self.assertEqual(r, ['lament', 'mantel', 'mantle', 'mental'])

    _, r = self.anagrams2.get_anagrams("mantels")
    self.assertEqual(r, ['laments', 'mantels', 'mantles'])

    _, r = self.anagrams2.get_anagrams("mantis")
    self.assertEqual(r, ['mantis'])

    _, r = self.anagrams2.get_anagrams("mantissa")
    self.assertEqual(r, ['mantissa', 'satanism'])

    _, r = self.anagrams2.get_anagrams("mantissas")
    self.assertEqual(r, ['mantissas'])

    _, r = self.anagrams2.get_anagrams("mantle")
    self.assertEqual(r, ['lament', 'mantel', 'mantle', 'mental'])

    _, r = self.anagrams2.get_anagrams("mantlepiece")
    self.assertEqual(r, ['mantlepiece'])

    _, r = self.anagrams2.get_anagrams("mantles")
    self.assertEqual(r, ['laments', 'mantels', 'mantles'])

    _, r = self.anagrams2.get_anagrams("manual")
    self.assertEqual(r, ['alumna', 'manual'])

    _, r = self.anagrams2.get_anagrams("manually")
    self.assertEqual(r, ['manually'])

    _, r = self.anagrams2.get_anagrams("manuals")
    self.assertEqual(r, ['manuals'])

    _, r = self.anagrams2.get_anagrams("manuel")
    self.assertEqual(r, ['manuel'])

    _, r = self.anagrams2.get_anagrams("manufacture")
    self.assertEqual(r, ['manufacture'])

    _, r = self.anagrams2.get_anagrams("manufactured")
    self.assertEqual(r, ['manufactured'])

    _, r = self.anagrams2.get_anagrams("manufacturer")
    self.assertEqual(r, ['manufacturer'])

    _, r = self.anagrams2.get_anagrams("manufacturers")
    self.assertEqual(r, ['manufacturers'])

    _, r = self.anagrams2.get_anagrams("manufactures")
    self.assertEqual(r, ['manufactures'])

    _, r = self.anagrams2.get_anagrams("manufacturing")
    self.assertEqual(r, ['manufacturing'])

    _, r = self.anagrams2.get_anagrams("manure")
    self.assertEqual(r, ['manure'])

    _, r = self.anagrams2.get_anagrams("manuscript")
    self.assertEqual(r, ['manuscript'])

    _, r = self.anagrams2.get_anagrams("manuscripts")
    self.assertEqual(r, ['manuscripts'])

    _, r = self.anagrams2.get_anagrams("manville")
    self.assertEqual(r, ['manville'])

    _, r = self.anagrams2.get_anagrams("many")
    self.assertEqual(r, ['many'])

    _, r = self.anagrams2.get_anagrams("mao")
    self.assertEqual(r, ['mao'])

    _, r = self.anagrams2.get_anagrams("maori")
    self.assertEqual(r, ['maori', 'mario'])

    _, r = self.anagrams2.get_anagrams("map")
    self.assertEqual(r, ['map', 'pam'])

    _, r = self.anagrams2.get_anagrams("maple")
    self.assertEqual(r, ['ample', 'maple'])

    _, r = self.anagrams2.get_anagrams("maplecrest")
    self.assertEqual(r, ['maplecrest'])

    _, r = self.anagrams2.get_anagrams("maples")
    self.assertEqual(r, ['maples', 'sample'])

    _, r = self.anagrams2.get_anagrams("mappable")
    self.assertEqual(r, ['mappable'])

    _, r = self.anagrams2.get_anagrams("mapped")
    self.assertEqual(r, ['mapped'])

    _, r = self.anagrams2.get_anagrams("mapping")
    self.assertEqual(r, ['mapping'])

    _, r = self.anagrams2.get_anagrams("mappings")
    self.assertEqual(r, ['mappings'])

    _, r = self.anagrams2.get_anagrams("maps")
    self.assertEqual(r, ['maps'])

    _, r = self.anagrams2.get_anagrams("marathon")
    self.assertEqual(r, ['marathon'])

    _, r = self.anagrams2.get_anagrams("marble")
    self.assertEqual(r, ['ambler', 'blamer', 'marble', 'ramble'])

    _, r = self.anagrams2.get_anagrams("marbles")
    self.assertEqual(r, ['blamers', 'marbles', 'rambles'])

    _, r = self.anagrams2.get_anagrams("marbling")
    self.assertEqual(r, ['marbling', 'rambling'])

    _, r = self.anagrams2.get_anagrams("marc")
    self.assertEqual(r, ['cram', 'marc'])

    _, r = self.anagrams2.get_anagrams("marceau")
    self.assertEqual(r, ['marceau'])

    _, r = self.anagrams2.get_anagrams("marcel")
    self.assertEqual(r, ['calmer', 'marcel'])

    _, r = self.anagrams2.get_anagrams("marcello")
    self.assertEqual(r, ['marcello'])

    _, r = self.anagrams2.get_anagrams("march")
    self.assertEqual(r, ['charm', 'march'])

    _, r = self.anagrams2.get_anagrams("marched")
    self.assertEqual(r, ['charmed', 'marched'])

    _, r = self.anagrams2.get_anagrams("marcher")
    self.assertEqual(r, ['charmer', 'marcher'])

    _, r = self.anagrams2.get_anagrams("marches")
    self.assertEqual(r, ['marches'])

    _, r = self.anagrams2.get_anagrams("marching")
    self.assertEqual(r, ['charming', 'marching'])

    _, r = self.anagrams2.get_anagrams("marcia")
    self.assertEqual(r, ['marcia'])

    _, r = self.anagrams2.get_anagrams("marco")
    self.assertEqual(r, ['armco', 'macro', 'marco'])

    _, r = self.anagrams2.get_anagrams("marcotte")
    self.assertEqual(r, ['marcotte'])

    _, r = self.anagrams2.get_anagrams("marcus")
    self.assertEqual(r, ['marcus'])

    _, r = self.anagrams2.get_anagrams("marcy")
    self.assertEqual(r, ['marcy'])

    _, r = self.anagrams2.get_anagrams("mardi")
    self.assertEqual(r, ['mardi'])

    _, r = self.anagrams2.get_anagrams("mardis")
    self.assertEqual(r, ['disarm', 'mardis'])

    _, r = self.anagrams2.get_anagrams("mare")
    self.assertEqual(r, ['mare', 'ream'])

    _, r = self.anagrams2.get_anagrams("mares")
    self.assertEqual(r, ['mares', 'smear'])

    _, r = self.anagrams2.get_anagrams("margaret")
    self.assertEqual(r, ['margaret'])

    _, r = self.anagrams2.get_anagrams("margarine")
    self.assertEqual(r, ['margarine'])

    _, r = self.anagrams2.get_anagrams("margery")
    self.assertEqual(r, ['margery'])

    _, r = self.anagrams2.get_anagrams("margin")
    self.assertEqual(r, ['arming', 'ingram', 'margin'])

    _, r = self.anagrams2.get_anagrams("marginal")
    self.assertEqual(r, ['alarming', 'marginal'])

    _, r = self.anagrams2.get_anagrams("marginally")
    self.assertEqual(r, ['alarmingly', 'marginally'])

    _, r = self.anagrams2.get_anagrams("margins")
    self.assertEqual(r, ['margins'])

    _, r = self.anagrams2.get_anagrams("margo")
    self.assertEqual(r, ['margo'])

    _, r = self.anagrams2.get_anagrams("marguerite")
    self.assertEqual(r, ['marguerite'])

    _, r = self.anagrams2.get_anagrams("marianne")
    self.assertEqual(r, ['armenian', 'marianne'])

    _, r = self.anagrams2.get_anagrams("marie")
    self.assertEqual(r, ['aimer', 'maier', 'marie'])

    _, r = self.anagrams2.get_anagrams("marietta")
    self.assertEqual(r, ['marietta'])

    _, r = self.anagrams2.get_anagrams("marigold")
    self.assertEqual(r, ['marigold'])

    _, r = self.anagrams2.get_anagrams("marijuana")
    self.assertEqual(r, ['marijuana'])

    _, r = self.anagrams2.get_anagrams("marilyn")
    self.assertEqual(r, ['marilyn'])

    _, r = self.anagrams2.get_anagrams("marin")
    self.assertEqual(r, ['marin'])

    _, r = self.anagrams2.get_anagrams("marina")
    self.assertEqual(r, ['airman', 'marina'])

    _, r = self.anagrams2.get_anagrams("marinade")
    self.assertEqual(r, ['marinade'])

    _, r = self.anagrams2.get_anagrams("marinate")
    self.assertEqual(r, ['marinate'])

    _, r = self.anagrams2.get_anagrams("marine")
    self.assertEqual(r, ['airmen', 'marine', 'remain'])

    _, r = self.anagrams2.get_anagrams("mariner")
    self.assertEqual(r, ['mariner'])

    _, r = self.anagrams2.get_anagrams("marines")
    self.assertEqual(r, ['marines', 'remains', 'seminar'])

    _, r = self.anagrams2.get_anagrams("marino")
    self.assertEqual(r, ['marino', 'marion'])

    _, r = self.anagrams2.get_anagrams("mario")
    self.assertEqual(r, ['maori', 'mario'])

    _, r = self.anagrams2.get_anagrams("marion")
    self.assertEqual(r, ['marino', 'marion'])

    _, r = self.anagrams2.get_anagrams("marionette")
    self.assertEqual(r, ['marionette'])

    _, r = self.anagrams2.get_anagrams("marital")
    self.assertEqual(r, ['marital', 'martial'])

    _, r = self.anagrams2.get_anagrams("maritime")
    self.assertEqual(r, ['maritime'])

    _, r = self.anagrams2.get_anagrams("marjorie")
    self.assertEqual(r, ['marjorie'])

    _, r = self.anagrams2.get_anagrams("marjory")
    self.assertEqual(r, ['marjory'])

    _, r = self.anagrams2.get_anagrams("mark")
    self.assertEqual(r, ['mark'])

    _, r = self.anagrams2.get_anagrams("markable")
    self.assertEqual(r, ['markable'])

    _, r = self.anagrams2.get_anagrams("marked")
    self.assertEqual(r, ['marked'])

    _, r = self.anagrams2.get_anagrams("markedly")
    self.assertEqual(r, ['markedly'])

    _, r = self.anagrams2.get_anagrams("marker")
    self.assertEqual(r, ['kramer', 'marker', 'remark'])

    _, r = self.anagrams2.get_anagrams("markers")
    self.assertEqual(r, ['markers', 'remarks'])

    _, r = self.anagrams2.get_anagrams("market")
    self.assertEqual(r, ['market'])

    _, r = self.anagrams2.get_anagrams("marketability")
    self.assertEqual(r, ['marketability'])

    _, r = self.anagrams2.get_anagrams("marketable")
    self.assertEqual(r, ['marketable'])

    _, r = self.anagrams2.get_anagrams("marketed")
    self.assertEqual(r, ['marketed'])

    _, r = self.anagrams2.get_anagrams("marketing")
    self.assertEqual(r, ['marketing'])

    _, r = self.anagrams2.get_anagrams("marketings")
    self.assertEqual(r, ['marketings'])

    _, r = self.anagrams2.get_anagrams("marketplace")
    self.assertEqual(r, ['marketplace'])

    _, r = self.anagrams2.get_anagrams("marketplaces")
    self.assertEqual(r, ['marketplaces'])

    _, r = self.anagrams2.get_anagrams("markets")
    self.assertEqual(r, ['markets'])

    _, r = self.anagrams2.get_anagrams("markham")
    self.assertEqual(r, ['markham'])

    _, r = self.anagrams2.get_anagrams("marking")
    self.assertEqual(r, ['marking'])

    _, r = self.anagrams2.get_anagrams("markings")
    self.assertEqual(r, ['markings'])

    _, r = self.anagrams2.get_anagrams("markism")
    self.assertEqual(r, ['markism'])

    _, r = self.anagrams2.get_anagrams("markov")
    self.assertEqual(r, ['markov'])

    _, r = self.anagrams2.get_anagrams("markovian")
    self.assertEqual(r, ['markovian'])

    _, r = self.anagrams2.get_anagrams("markovitz")
    self.assertEqual(r, ['markovitz'])

    _, r = self.anagrams2.get_anagrams("marks")
    self.assertEqual(r, ['marks'])

    _, r = self.anagrams2.get_anagrams("marlboro")
    self.assertEqual(r, ['marlboro'])

    _, r = self.anagrams2.get_anagrams("marlborough")
    self.assertEqual(r, ['marlborough'])

    _, r = self.anagrams2.get_anagrams("marlene")
    self.assertEqual(r, ['marlene'])

    _, r = self.anagrams2.get_anagrams("marlowe")
    self.assertEqual(r, ['marlowe'])

    _, r = self.anagrams2.get_anagrams("marmalade")
    self.assertEqual(r, ['marmalade'])

    _, r = self.anagrams2.get_anagrams("marmot")
    self.assertEqual(r, ['marmot'])

    _, r = self.anagrams2.get_anagrams("maroon")
    self.assertEqual(r, ['maroon', 'romano'])

    _, r = self.anagrams2.get_anagrams("marquette")
    self.assertEqual(r, ['marquette'])

    _, r = self.anagrams2.get_anagrams("marquis")
    self.assertEqual(r, ['marquis'])

    _, r = self.anagrams2.get_anagrams("marriage")
    self.assertEqual(r, ['marriage'])

    _, r = self.anagrams2.get_anagrams("marriageable")
    self.assertEqual(r, ['marriageable'])

    _, r = self.anagrams2.get_anagrams("marriages")
    self.assertEqual(r, ['marriages'])

    _, r = self.anagrams2.get_anagrams("married")
    self.assertEqual(r, ['admirer', 'married'])

    _, r = self.anagrams2.get_anagrams("marries")
    self.assertEqual(r, ['marries'])

    _, r = self.anagrams2.get_anagrams("marriott")
    self.assertEqual(r, ['marriott'])

    _, r = self.anagrams2.get_anagrams("marrow")
    self.assertEqual(r, ['marrow'])

    _, r = self.anagrams2.get_anagrams("marry")
    self.assertEqual(r, ['marry'])

    _, r = self.anagrams2.get_anagrams("marrying")
    self.assertEqual(r, ['marrying'])

    _, r = self.anagrams2.get_anagrams("mars")
    self.assertEqual(r, ['arms', 'mars', 'rams'])

    _, r = self.anagrams2.get_anagrams("marseilles")
    self.assertEqual(r, ['marseilles'])

    _, r = self.anagrams2.get_anagrams("marsh")
    self.assertEqual(r, ['harms', 'marsh'])

    _, r = self.anagrams2.get_anagrams("marsha")
    self.assertEqual(r, ['marsha'])

    _, r = self.anagrams2.get_anagrams("marshal")
    self.assertEqual(r, ['marshal'])

    _, r = self.anagrams2.get_anagrams("marshaled")
    self.assertEqual(r, ['marshaled'])

    _, r = self.anagrams2.get_anagrams("marshaling")
    self.assertEqual(r, ['marshaling'])

    _, r = self.anagrams2.get_anagrams("marshall")
    self.assertEqual(r, ['marshall'])

    _, r = self.anagrams2.get_anagrams("marshalled")
    self.assertEqual(r, ['marshalled'])

    _, r = self.anagrams2.get_anagrams("marshalling")
    self.assertEqual(r, ['marshalling'])

    _, r = self.anagrams2.get_anagrams("marshals")
    self.assertEqual(r, ['marshals'])

    _, r = self.anagrams2.get_anagrams("marshes")
    self.assertEqual(r, ['marshes', 'smasher'])

    _, r = self.anagrams2.get_anagrams("marshmallow")
    self.assertEqual(r, ['marshmallow'])

    _, r = self.anagrams2.get_anagrams("mart")
    self.assertEqual(r, ['mart'])

    _, r = self.anagrams2.get_anagrams("marten")
    self.assertEqual(r, ['marten'])

    _, r = self.anagrams2.get_anagrams("martha")
    self.assertEqual(r, ['martha'])

    _, r = self.anagrams2.get_anagrams("martial")
    self.assertEqual(r, ['marital', 'martial'])

    _, r = self.anagrams2.get_anagrams("martian")
    self.assertEqual(r, ['martian'])

    _, r = self.anagrams2.get_anagrams("martians")
    self.assertEqual(r, ['martians'])

    _, r = self.anagrams2.get_anagrams("martinez")
    self.assertEqual(r, ['martinez'])

    _, r = self.anagrams2.get_anagrams("martingale")
    self.assertEqual(r, ['martingale'])

    _, r = self.anagrams2.get_anagrams("martini")
    self.assertEqual(r, ['martini'])

    _, r = self.anagrams2.get_anagrams("martinique")
    self.assertEqual(r, ['martinique'])

    _, r = self.anagrams2.get_anagrams("martinson")
    self.assertEqual(r, ['martinson'])

    _, r = self.anagrams2.get_anagrams("marts")
    self.assertEqual(r, ['marts', 'smart'])

    _, r = self.anagrams2.get_anagrams("marty")
    self.assertEqual(r, ['marty'])

    _, r = self.anagrams2.get_anagrams("martyr")
    self.assertEqual(r, ['martyr'])

    _, r = self.anagrams2.get_anagrams("martyrdom")
    self.assertEqual(r, ['martyrdom'])

    _, r = self.anagrams2.get_anagrams("martyrs")
    self.assertEqual(r, ['martyrs'])

    _, r = self.anagrams2.get_anagrams("marvel")
    self.assertEqual(r, ['marvel'])

    _, r = self.anagrams2.get_anagrams("marveled")
    self.assertEqual(r, ['marveled'])

    _, r = self.anagrams2.get_anagrams("marvelled")
    self.assertEqual(r, ['marvelled'])

    _, r = self.anagrams2.get_anagrams("marvelling")
    self.assertEqual(r, ['marvelling'])

    _, r = self.anagrams2.get_anagrams("marvelous")
    self.assertEqual(r, ['marvelous'])

    _, r = self.anagrams2.get_anagrams("marvelously")
    self.assertEqual(r, ['marvelously'])

    _, r = self.anagrams2.get_anagrams("marvelousness")
    self.assertEqual(r, ['marvelousness'])

    _, r = self.anagrams2.get_anagrams("marvels")
    self.assertEqual(r, ['marvels'])

    _, r = self.anagrams2.get_anagrams("marvin")
    self.assertEqual(r, ['marvin'])

    _, r = self.anagrams2.get_anagrams("marx")
    self.assertEqual(r, ['marx'])

    _, r = self.anagrams2.get_anagrams("marxian")
    self.assertEqual(r, ['marxian'])

    _, r = self.anagrams2.get_anagrams("marxism")
    self.assertEqual(r, ['marxism'])

    _, r = self.anagrams2.get_anagrams("marxisms")
    self.assertEqual(r, ['marxisms'])

    _, r = self.anagrams2.get_anagrams("marxist")
    self.assertEqual(r, ['marxist'])

    _, r = self.anagrams2.get_anagrams("mary")
    self.assertEqual(r, ['army', 'mary', 'myra'])

    _, r = self.anagrams2.get_anagrams("maryland")
    self.assertEqual(r, ['maryland'])

    _, r = self.anagrams2.get_anagrams("marylanders")
    self.assertEqual(r, ['marylanders'])

    _, r = self.anagrams2.get_anagrams("mascara")
    self.assertEqual(r, ['mascara'])

    _, r = self.anagrams2.get_anagrams("masculine")
    self.assertEqual(r, ['masculine'])

    _, r = self.anagrams2.get_anagrams("masculinely")
    self.assertEqual(r, ['masculinely'])

    _, r = self.anagrams2.get_anagrams("masculinity")
    self.assertEqual(r, ['masculinity'])

    _, r = self.anagrams2.get_anagrams("maseru")
    self.assertEqual(r, ['amuser', 'maseru'])

    _, r = self.anagrams2.get_anagrams("mash")
    self.assertEqual(r, ['hams', 'mash', 'sham'])

    _, r = self.anagrams2.get_anagrams("mashed")
    self.assertEqual(r, ['mashed', 'shamed'])

    _, r = self.anagrams2.get_anagrams("mashes")
    self.assertEqual(r, ['mashes', 'shames'])

    _, r = self.anagrams2.get_anagrams("mashing")
    self.assertEqual(r, ['mashing', 'shaming'])

    _, r = self.anagrams2.get_anagrams("mask")
    self.assertEqual(r, ['mask'])

    _, r = self.anagrams2.get_anagrams("maskable")
    self.assertEqual(r, ['maskable'])

    _, r = self.anagrams2.get_anagrams("masked")
    self.assertEqual(r, ['masked'])

    _, r = self.anagrams2.get_anagrams("masker")
    self.assertEqual(r, ['esmark', 'makers', 'masker'])

    _, r = self.anagrams2.get_anagrams("masking")
    self.assertEqual(r, ['makings', 'masking'])

    _, r = self.anagrams2.get_anagrams("maskings")
    self.assertEqual(r, ['maskings'])

    _, r = self.anagrams2.get_anagrams("masks")
    self.assertEqual(r, ['masks'])

    _, r = self.anagrams2.get_anagrams("masochist")
    self.assertEqual(r, ['masochist'])

    _, r = self.anagrams2.get_anagrams("masochists")
    self.assertEqual(r, ['masochists'])

    _, r = self.anagrams2.get_anagrams("mason")
    self.assertEqual(r, ['mason', 'moans'])

    _, r = self.anagrams2.get_anagrams("masonic")
    self.assertEqual(r, ['masonic'])

    _, r = self.anagrams2.get_anagrams("masonite")
    self.assertEqual(r, ['masonite'])

    _, r = self.anagrams2.get_anagrams("masonry")
    self.assertEqual(r, ['masonry'])

    _, r = self.anagrams2.get_anagrams("masons")
    self.assertEqual(r, ['masons', 'samson'])

    _, r = self.anagrams2.get_anagrams("masquerade")
    self.assertEqual(r, ['masquerade'])

    _, r = self.anagrams2.get_anagrams("masquerader")
    self.assertEqual(r, ['masquerader'])

    _, r = self.anagrams2.get_anagrams("masquerades")
    self.assertEqual(r, ['masquerades'])

    _, r = self.anagrams2.get_anagrams("masquerading")
    self.assertEqual(r, ['masquerading'])

    _, r = self.anagrams2.get_anagrams("mass")
    self.assertEqual(r, ['mass'])

    _, r = self.anagrams2.get_anagrams("massachusetts")
    self.assertEqual(r, ['massachusetts'])

    _, r = self.anagrams2.get_anagrams("massacre")
    self.assertEqual(r, ['massacre'])

    _, r = self.anagrams2.get_anagrams("massacred")
    self.assertEqual(r, ['massacred'])

    _, r = self.anagrams2.get_anagrams("massacres")
    self.assertEqual(r, ['massacres'])

    _, r = self.anagrams2.get_anagrams("massage")
    self.assertEqual(r, ['massage'])

    _, r = self.anagrams2.get_anagrams("massages")
    self.assertEqual(r, ['massages'])

    _, r = self.anagrams2.get_anagrams("massaging")
    self.assertEqual(r, ['massaging'])

    _, r = self.anagrams2.get_anagrams("massed")
    self.assertEqual(r, ['massed'])

    _, r = self.anagrams2.get_anagrams("masses")
    self.assertEqual(r, ['masses'])

    _, r = self.anagrams2.get_anagrams("massey")
    self.assertEqual(r, ['massey'])

    _, r = self.anagrams2.get_anagrams("massing")
    self.assertEqual(r, ['massing'])

    _, r = self.anagrams2.get_anagrams("massive")
    self.assertEqual(r, ['massive'])

    _, r = self.anagrams2.get_anagrams("mast")
    self.assertEqual(r, ['mast', 'mats'])

    _, r = self.anagrams2.get_anagrams("masted")
    self.assertEqual(r, ['masted'])

    _, r = self.anagrams2.get_anagrams("master")
    self.assertEqual(r, ['master', 'stream'])

    _, r = self.anagrams2.get_anagrams("mastered")
    self.assertEqual(r, ['mastered', 'streamed'])

    _, r = self.anagrams2.get_anagrams("masterful")
    self.assertEqual(r, ['masterful'])

    _, r = self.anagrams2.get_anagrams("masterfully")
    self.assertEqual(r, ['masterfully'])

    _, r = self.anagrams2.get_anagrams("mastering")
    self.assertEqual(r, ['emigrants', 'mastering', 'streaming'])

    _, r = self.anagrams2.get_anagrams("masterings")
    self.assertEqual(r, ['masterings'])

    _, r = self.anagrams2.get_anagrams("masterly")
    self.assertEqual(r, ['masterly'])

    _, r = self.anagrams2.get_anagrams("mastermind")
    self.assertEqual(r, ['mastermind'])

    _, r = self.anagrams2.get_anagrams("masterpiece")
    self.assertEqual(r, ['masterpiece'])

    _, r = self.anagrams2.get_anagrams("masterpieces")
    self.assertEqual(r, ['masterpieces'])

    _, r = self.anagrams2.get_anagrams("masters")
    self.assertEqual(r, ['masters', 'streams'])

    _, r = self.anagrams2.get_anagrams("mastery")
    self.assertEqual(r, ['mastery'])

    _, r = self.anagrams2.get_anagrams("mastodon")
    self.assertEqual(r, ['mastodon'])

    _, r = self.anagrams2.get_anagrams("masts")
    self.assertEqual(r, ['masts'])

    _, r = self.anagrams2.get_anagrams("masturbate")
    self.assertEqual(r, ['masturbate'])

    _, r = self.anagrams2.get_anagrams("masturbated")
    self.assertEqual(r, ['masturbated'])

    _, r = self.anagrams2.get_anagrams("masturbates")
    self.assertEqual(r, ['masturbates'])

    _, r = self.anagrams2.get_anagrams("masturbating")
    self.assertEqual(r, ['masturbating'])

    _, r = self.anagrams2.get_anagrams("masturbation")
    self.assertEqual(r, ['masturbation'])

    _, r = self.anagrams2.get_anagrams("mat")
    self.assertEqual(r, ['mat'])

    _, r = self.anagrams2.get_anagrams("match")
    self.assertEqual(r, ['match'])

    _, r = self.anagrams2.get_anagrams("matchable")
    self.assertEqual(r, ['matchable'])

    _, r = self.anagrams2.get_anagrams("matched")
    self.assertEqual(r, ['matched'])

    _, r = self.anagrams2.get_anagrams("matcher")
    self.assertEqual(r, ['matcher'])

    _, r = self.anagrams2.get_anagrams("matchers")
    self.assertEqual(r, ['matchers'])

    _, r = self.anagrams2.get_anagrams("matches")
    self.assertEqual(r, ['matches'])

    _, r = self.anagrams2.get_anagrams("matching")
    self.assertEqual(r, ['matching'])

    _, r = self.anagrams2.get_anagrams("matchings")
    self.assertEqual(r, ['matchings'])

    _, r = self.anagrams2.get_anagrams("matchless")
    self.assertEqual(r, ['matchless'])

    _, r = self.anagrams2.get_anagrams("mate")
    self.assertEqual(r, ['mate', 'meat', 'meta', 'tame', 'team'])

    _, r = self.anagrams2.get_anagrams("mated")
    self.assertEqual(r, ['mated', 'tamed'])

    _, r = self.anagrams2.get_anagrams("mateo")
    self.assertEqual(r, ['mateo'])

    _, r = self.anagrams2.get_anagrams("mater")
    self.assertEqual(r, ['mater', 'tamer'])

    _, r = self.anagrams2.get_anagrams("material")
    self.assertEqual(r, ['material'])

    _, r = self.anagrams2.get_anagrams("materialist")
    self.assertEqual(r, ['materialist'])

    _, r = self.anagrams2.get_anagrams("materialize")
    self.assertEqual(r, ['materialize'])

    _, r = self.anagrams2.get_anagrams("materialized")
    self.assertEqual(r, ['materialized'])

    _, r = self.anagrams2.get_anagrams("materializes")
    self.assertEqual(r, ['materializes'])

    _, r = self.anagrams2.get_anagrams("materializing")
    self.assertEqual(r, ['materializing'])

    _, r = self.anagrams2.get_anagrams("materially")
    self.assertEqual(r, ['materially'])

    _, r = self.anagrams2.get_anagrams("materials")
    self.assertEqual(r, ['materials'])

    _, r = self.anagrams2.get_anagrams("maternal")
    self.assertEqual(r, ['maternal'])

    _, r = self.anagrams2.get_anagrams("maternally")
    self.assertEqual(r, ['maternally'])

    _, r = self.anagrams2.get_anagrams("maternity")
    self.assertEqual(r, ['maternity'])

    _, r = self.anagrams2.get_anagrams("mates")
    self.assertEqual(r, ['mates', 'meats', 'steam', 'tames', 'teams'])

    _, r = self.anagrams2.get_anagrams("math")
    self.assertEqual(r, ['math'])

    _, r = self.anagrams2.get_anagrams("mathematica")
    self.assertEqual(r, ['mathematica'])

    _, r = self.anagrams2.get_anagrams("mathematical")
    self.assertEqual(r, ['mathematical'])

    _, r = self.anagrams2.get_anagrams("mathematically")
    self.assertEqual(r, ['mathematically'])

    _, r = self.anagrams2.get_anagrams("mathematician")
    self.assertEqual(r, ['mathematician'])

    _, r = self.anagrams2.get_anagrams("mathematicians")
    self.assertEqual(r, ['mathematicians'])

    _, r = self.anagrams2.get_anagrams("mathematics")
    self.assertEqual(r, ['mathematics'])

    _, r = self.anagrams2.get_anagrams("mathematik")
    self.assertEqual(r, ['mathematik'])

    _, r = self.anagrams2.get_anagrams("mathewson")
    self.assertEqual(r, ['mathewson'])

    _, r = self.anagrams2.get_anagrams("mathias")
    self.assertEqual(r, ['mathias'])

    _, r = self.anagrams2.get_anagrams("mathieu")
    self.assertEqual(r, ['mathieu'])

    _, r = self.anagrams2.get_anagrams("matilda")
    self.assertEqual(r, ['matilda'])

    _, r = self.anagrams2.get_anagrams("mating")
    self.assertEqual(r, ['mating', 'taming'])

    _, r = self.anagrams2.get_anagrams("matings")
    self.assertEqual(r, ['matings'])

    _, r = self.anagrams2.get_anagrams("matisse")
    self.assertEqual(r, ['matisse'])

    _, r = self.anagrams2.get_anagrams("matisses")
    self.assertEqual(r, ['matisses'])

    _, r = self.anagrams2.get_anagrams("matriarch")
    self.assertEqual(r, ['matriarch'])

    _, r = self.anagrams2.get_anagrams("matriarchal")
    self.assertEqual(r, ['matriarchal'])

    _, r = self.anagrams2.get_anagrams("matrices")
    self.assertEqual(r, ['matrices'])

    _, r = self.anagrams2.get_anagrams("matriculate")
    self.assertEqual(r, ['matriculate'])

    _, r = self.anagrams2.get_anagrams("matriculation")
    self.assertEqual(r, ['matriculation'])

    _, r = self.anagrams2.get_anagrams("matrimonial")
    self.assertEqual(r, ['matrimonial'])

    _, r = self.anagrams2.get_anagrams("matrimony")
    self.assertEqual(r, ['matrimony'])

    _, r = self.anagrams2.get_anagrams("matrix")
    self.assertEqual(r, ['matrix'])

    _, r = self.anagrams2.get_anagrams("matroid")
    self.assertEqual(r, ['matroid'])

    _, r = self.anagrams2.get_anagrams("matron")
    self.assertEqual(r, ['matron'])

    _, r = self.anagrams2.get_anagrams("matronly")
    self.assertEqual(r, ['matronly'])

    _, r = self.anagrams2.get_anagrams("mats")
    self.assertEqual(r, ['mast', 'mats'])

    _, r = self.anagrams2.get_anagrams("matson")
    self.assertEqual(r, ['matson'])

    _, r = self.anagrams2.get_anagrams("matsumoto")
    self.assertEqual(r, ['matsumoto'])

    _, r = self.anagrams2.get_anagrams("matt")
    self.assertEqual(r, ['matt'])

    _, r = self.anagrams2.get_anagrams("matted")
    self.assertEqual(r, ['matted'])

    _, r = self.anagrams2.get_anagrams("matter")
    self.assertEqual(r, ['matter'])

    _, r = self.anagrams2.get_anagrams("mattered")
    self.assertEqual(r, ['mattered'])

    _, r = self.anagrams2.get_anagrams("matters")
    self.assertEqual(r, ['matters'])

    _, r = self.anagrams2.get_anagrams("matthew")
    self.assertEqual(r, ['matthew'])

    _, r = self.anagrams2.get_anagrams("matthews")
    self.assertEqual(r, ['matthews'])

    _, r = self.anagrams2.get_anagrams("mattie")
    self.assertEqual(r, ['mattie'])

    _, r = self.anagrams2.get_anagrams("mattress")
    self.assertEqual(r, ['mattress', 'smartest'])

    _, r = self.anagrams2.get_anagrams("mattresses")
    self.assertEqual(r, ['mattresses'])

    _, r = self.anagrams2.get_anagrams("mattson")
    self.assertEqual(r, ['mattson'])

    _, r = self.anagrams2.get_anagrams("maturation")
    self.assertEqual(r, ['maturation'])

    _, r = self.anagrams2.get_anagrams("mature")
    self.assertEqual(r, ['mature'])

    _, r = self.anagrams2.get_anagrams("matured")
    self.assertEqual(r, ['matured'])

    _, r = self.anagrams2.get_anagrams("maturely")
    self.assertEqual(r, ['maturely'])

    _, r = self.anagrams2.get_anagrams("matures")
    self.assertEqual(r, ['matures'])

    _, r = self.anagrams2.get_anagrams("maturing")
    self.assertEqual(r, ['maturing'])

    _, r = self.anagrams2.get_anagrams("maturities")
    self.assertEqual(r, ['maturities'])

    _, r = self.anagrams2.get_anagrams("maturity")
    self.assertEqual(r, ['maturity'])

    _, r = self.anagrams2.get_anagrams("maude")
    self.assertEqual(r, ['maude'])

    _, r = self.anagrams2.get_anagrams("maul")
    self.assertEqual(r, ['alum', 'maul'])

    _, r = self.anagrams2.get_anagrams("maureen")
    self.assertEqual(r, ['maureen'])

    _, r = self.anagrams2.get_anagrams("maurice")
    self.assertEqual(r, ['maurice'])

    _, r = self.anagrams2.get_anagrams("mauricio")
    self.assertEqual(r, ['mauricio'])

    _, r = self.anagrams2.get_anagrams("maurine")
    self.assertEqual(r, ['maurine'])

    _, r = self.anagrams2.get_anagrams("mauritania")
    self.assertEqual(r, ['mauritania'])

    _, r = self.anagrams2.get_anagrams("mauritius")
    self.assertEqual(r, ['mauritius'])

    _, r = self.anagrams2.get_anagrams("mausoleum")
    self.assertEqual(r, ['mausoleum'])

    _, r = self.anagrams2.get_anagrams("maverick")
    self.assertEqual(r, ['maverick'])

    _, r = self.anagrams2.get_anagrams("mavis")
    self.assertEqual(r, ['mavis'])

    _, r = self.anagrams2.get_anagrams("mawr")
    self.assertEqual(r, ['mawr', 'warm'])

    _, r = self.anagrams2.get_anagrams("max")
    self.assertEqual(r, ['max'])

    _, r = self.anagrams2.get_anagrams("maxim")
    self.assertEqual(r, ['maxim'])

    _, r = self.anagrams2.get_anagrams("maxima")
    self.assertEqual(r, ['maxima'])

    _, r = self.anagrams2.get_anagrams("maximal")
    self.assertEqual(r, ['maximal'])

    _, r = self.anagrams2.get_anagrams("maximally")
    self.assertEqual(r, ['maximally'])

    _, r = self.anagrams2.get_anagrams("maximilian")
    self.assertEqual(r, ['maximilian'])

    _, r = self.anagrams2.get_anagrams("maximize")
    self.assertEqual(r, ['maximize'])

    _, r = self.anagrams2.get_anagrams("maximized")
    self.assertEqual(r, ['maximized'])

    _, r = self.anagrams2.get_anagrams("maximizer")
    self.assertEqual(r, ['maximizer'])

    _, r = self.anagrams2.get_anagrams("maximizers")
    self.assertEqual(r, ['maximizers'])

    _, r = self.anagrams2.get_anagrams("maximizes")
    self.assertEqual(r, ['maximizes'])

    _, r = self.anagrams2.get_anagrams("maximizing")
    self.assertEqual(r, ['maximizing'])

    _, r = self.anagrams2.get_anagrams("maxims")
    self.assertEqual(r, ['maxims'])

    _, r = self.anagrams2.get_anagrams("maximum")
    self.assertEqual(r, ['maximum'])

    _, r = self.anagrams2.get_anagrams("maximums")
    self.assertEqual(r, ['maximums'])

    _, r = self.anagrams2.get_anagrams("maxine")
    self.assertEqual(r, ['maxine'])

    _, r = self.anagrams2.get_anagrams("maxtor")
    self.assertEqual(r, ['maxtor'])

    _, r = self.anagrams2.get_anagrams("maxwell")
    self.assertEqual(r, ['maxwell'])

    _, r = self.anagrams2.get_anagrams("maxwellian")
    self.assertEqual(r, ['maxwellian'])

    _, r = self.anagrams2.get_anagrams("may")
    self.assertEqual(r, ['amy', 'may'])

    _, r = self.anagrams2.get_anagrams("maya")
    self.assertEqual(r, ['maya'])

    _, r = self.anagrams2.get_anagrams("mayans")
    self.assertEqual(r, ['mayans'])

    _, r = self.anagrams2.get_anagrams("maybe")
    self.assertEqual(r, ['maybe'])

    _, r = self.anagrams2.get_anagrams("mayer")
    self.assertEqual(r, ['mayer'])

    _, r = self.anagrams2.get_anagrams("mayfair")
    self.assertEqual(r, ['mayfair'])

    _, r = self.anagrams2.get_anagrams("mayflower")
    self.assertEqual(r, ['mayflower'])

    _, r = self.anagrams2.get_anagrams("mayhap")
    self.assertEqual(r, ['mayhap'])

    _, r = self.anagrams2.get_anagrams("mayhem")
    self.assertEqual(r, ['mayhem'])

    _, r = self.anagrams2.get_anagrams("maynard")
    self.assertEqual(r, ['maynard'])

    _, r = self.anagrams2.get_anagrams("mayo")
    self.assertEqual(r, ['mayo'])

    _, r = self.anagrams2.get_anagrams("mayonnaise")
    self.assertEqual(r, ['mayonnaise'])

    _, r = self.anagrams2.get_anagrams("mayor")
    self.assertEqual(r, ['mayor'])

    _, r = self.anagrams2.get_anagrams("mayoral")
    self.assertEqual(r, ['mayoral'])

    _, r = self.anagrams2.get_anagrams("mayors")
    self.assertEqual(r, ['mayors'])

    _, r = self.anagrams2.get_anagrams("mazda")
    self.assertEqual(r, ['mazda'])

    _, r = self.anagrams2.get_anagrams("maze")
    self.assertEqual(r, ['maze'])

    _, r = self.anagrams2.get_anagrams("mazes")
    self.assertEqual(r, ['mazes'])

    _, r = self.anagrams2.get_anagrams("mbabane")
    self.assertEqual(r, ['mbabane'])

    _, r = self.anagrams2.get_anagrams("mcadam")
    self.assertEqual(r, ['mcadam'])

    _, r = self.anagrams2.get_anagrams("mcadams")
    self.assertEqual(r, ['mcadams'])

    _, r = self.anagrams2.get_anagrams("mcallister")
    self.assertEqual(r, ['mcallister'])

    _, r = self.anagrams2.get_anagrams("mcbride")
    self.assertEqual(r, ['mcbride'])

    _, r = self.anagrams2.get_anagrams("mccabe")
    self.assertEqual(r, ['mccabe'])

    _, r = self.anagrams2.get_anagrams("mccall")
    self.assertEqual(r, ['mccall'])

    _, r = self.anagrams2.get_anagrams("mccallum")
    self.assertEqual(r, ['mccallum'])

    _, r = self.anagrams2.get_anagrams("mccann")
    self.assertEqual(r, ['mccann'])

    _, r = self.anagrams2.get_anagrams("mccarthy")
    self.assertEqual(r, ['mccarthy'])

    _, r = self.anagrams2.get_anagrams("mccarty")
    self.assertEqual(r, ['mccarty'])

    _, r = self.anagrams2.get_anagrams("mccauley")
    self.assertEqual(r, ['mccauley'])

    _, r = self.anagrams2.get_anagrams("mcclain")
    self.assertEqual(r, ['mcclain'])

    _, r = self.anagrams2.get_anagrams("mcclellan")
    self.assertEqual(r, ['mcclellan'])

    _, r = self.anagrams2.get_anagrams("mcclure")
    self.assertEqual(r, ['mcclure'])

    _, r = self.anagrams2.get_anagrams("mccluskey")
    self.assertEqual(r, ['mccluskey'])

    _, r = self.anagrams2.get_anagrams("mcconnel")
    self.assertEqual(r, ['mcconnel'])

    _, r = self.anagrams2.get_anagrams("mcconnell")
    self.assertEqual(r, ['mcconnell'])

    _, r = self.anagrams2.get_anagrams("mccormick")
    self.assertEqual(r, ['mccormick'])

    _, r = self.anagrams2.get_anagrams("mccoy")
    self.assertEqual(r, ['mccoy'])

    _, r = self.anagrams2.get_anagrams("mccracken")
    self.assertEqual(r, ['mccracken'])

    _, r = self.anagrams2.get_anagrams("mccullough")
    self.assertEqual(r, ['mccullough'])

    _, r = self.anagrams2.get_anagrams("mcdaniel")
    self.assertEqual(r, ['mcdaniel'])

    _, r = self.anagrams2.get_anagrams("mcdermott")
    self.assertEqual(r, ['mcdermott'])

    _, r = self.anagrams2.get_anagrams("mcdonald")
    self.assertEqual(r, ['mcdonald'])

    _, r = self.anagrams2.get_anagrams("mcdonnell")
    self.assertEqual(r, ['mcdonnell'])

    _, r = self.anagrams2.get_anagrams("mcdougall")
    self.assertEqual(r, ['mcdougall'])

    _, r = self.anagrams2.get_anagrams("mcdowell")
    self.assertEqual(r, ['mcdowell'])

    _, r = self.anagrams2.get_anagrams("mcelhaney")
    self.assertEqual(r, ['mcelhaney'])

    _, r = self.anagrams2.get_anagrams("mcelroy")
    self.assertEqual(r, ['mcelroy'])

    _, r = self.anagrams2.get_anagrams("mcfadden")
    self.assertEqual(r, ['mcfadden'])

    _, r = self.anagrams2.get_anagrams("mcfarland")
    self.assertEqual(r, ['mcfarland'])

    _, r = self.anagrams2.get_anagrams("mcgee")
    self.assertEqual(r, ['mcgee'])

    _, r = self.anagrams2.get_anagrams("mcgill")
    self.assertEqual(r, ['mcgill'])

    _, r = self.anagrams2.get_anagrams("mcginnis")
    self.assertEqual(r, ['mcginnis'])

    _, r = self.anagrams2.get_anagrams("mcgovern")
    self.assertEqual(r, ['mcgovern'])

    _, r = self.anagrams2.get_anagrams("mcgowan")
    self.assertEqual(r, ['mcgowan'])

    _, r = self.anagrams2.get_anagrams("mcgrath")
    self.assertEqual(r, ['mcgrath'])

    _, r = self.anagrams2.get_anagrams("mcgraw")
    self.assertEqual(r, ['mcgraw'])

    _, r = self.anagrams2.get_anagrams("mcgregor")
    self.assertEqual(r, ['mcgregor'])

    _, r = self.anagrams2.get_anagrams("mcguire")
    self.assertEqual(r, ['mcguire'])

    _, r = self.anagrams2.get_anagrams("mchugh")
    self.assertEqual(r, ['mchugh'])

    _, r = self.anagrams2.get_anagrams("mcintosh")
    self.assertEqual(r, ['mcintosh'])

    _, r = self.anagrams2.get_anagrams("mcintyre")
    self.assertEqual(r, ['mcintyre'])

    _, r = self.anagrams2.get_anagrams("mckay")
    self.assertEqual(r, ['mckay'])

    _, r = self.anagrams2.get_anagrams("mckee")
    self.assertEqual(r, ['mckee'])

    _, r = self.anagrams2.get_anagrams("mckenna")
    self.assertEqual(r, ['mckenna'])

    _, r = self.anagrams2.get_anagrams("mckenzie")
    self.assertEqual(r, ['mckenzie'])

    _, r = self.anagrams2.get_anagrams("mckeon")
    self.assertEqual(r, ['mckeon'])

    _, r = self.anagrams2.get_anagrams("mckesson")
    self.assertEqual(r, ['mckesson'])

    _, r = self.anagrams2.get_anagrams("mckinley")
    self.assertEqual(r, ['mckinley'])

    _, r = self.anagrams2.get_anagrams("mckinney")
    self.assertEqual(r, ['mckinney'])

    _, r = self.anagrams2.get_anagrams("mcknight")
    self.assertEqual(r, ['mcknight'])

    _, r = self.anagrams2.get_anagrams("mclanahan")
    self.assertEqual(r, ['mclanahan'])

    _, r = self.anagrams2.get_anagrams("mclaughlin")
    self.assertEqual(r, ['mclaughlin'])

    _, r = self.anagrams2.get_anagrams("mclean")
    self.assertEqual(r, ['mclean'])

    _, r = self.anagrams2.get_anagrams("mcleod")
    self.assertEqual(r, ['mcleod'])

    _, r = self.anagrams2.get_anagrams("mcmahon")
    self.assertEqual(r, ['mcmahon'])

    _, r = self.anagrams2.get_anagrams("mcmartin")
    self.assertEqual(r, ['mcmartin'])

    _, r = self.anagrams2.get_anagrams("mcmillan")
    self.assertEqual(r, ['mcmillan'])

    _, r = self.anagrams2.get_anagrams("mcmullen")
    self.assertEqual(r, ['mcmullen'])

    _, r = self.anagrams2.get_anagrams("mcnally")
    self.assertEqual(r, ['mcnally'])

    _, r = self.anagrams2.get_anagrams("mcnaughton")
    self.assertEqual(r, ['mcnaughton'])

    _, r = self.anagrams2.get_anagrams("mcneil")
    self.assertEqual(r, ['mcneil'])

    _, r = self.anagrams2.get_anagrams("mcnulty")
    self.assertEqual(r, ['mcnulty'])

    _, r = self.anagrams2.get_anagrams("mcpherson")
    self.assertEqual(r, ['mcpherson'])

    _, r = self.anagrams2.get_anagrams("me")
    self.assertEqual(r, ['em', 'me'])

    _, r = self.anagrams2.get_anagrams("mead")
    self.assertEqual(r, ['dame', 'made', 'mead'])

    _, r = self.anagrams2.get_anagrams("meadow")
    self.assertEqual(r, ['meadow'])

    _, r = self.anagrams2.get_anagrams("meadows")
    self.assertEqual(r, ['meadows'])

    _, r = self.anagrams2.get_anagrams("meager")
    self.assertEqual(r, ['meager'])

    _, r = self.anagrams2.get_anagrams("meagerly")
    self.assertEqual(r, ['meagerly'])

    _, r = self.anagrams2.get_anagrams("meagerness")
    self.assertEqual(r, ['meagerness'])

    _, r = self.anagrams2.get_anagrams("meal")
    self.assertEqual(r, ['lame', 'male', 'meal'])

    _, r = self.anagrams2.get_anagrams("meals")
    self.assertEqual(r, ['lames', 'males', 'meals', 'salem', 'selma'])

    _, r = self.anagrams2.get_anagrams("mealtime")
    self.assertEqual(r, ['mealtime'])

    _, r = self.anagrams2.get_anagrams("mealy")
    self.assertEqual(r, ['mealy'])

    _, r = self.anagrams2.get_anagrams("mean")
    self.assertEqual(r, ['amen', 'mane', 'mean', 'name'])

    _, r = self.anagrams2.get_anagrams("meander")
    self.assertEqual(r, ['meander', 'renamed'])

    _, r = self.anagrams2.get_anagrams("meandered")
    self.assertEqual(r, ['meandered'])

    _, r = self.anagrams2.get_anagrams("meandering")
    self.assertEqual(r, ['meandering'])

    _, r = self.anagrams2.get_anagrams("meanders")
    self.assertEqual(r, ['meanders'])

    _, r = self.anagrams2.get_anagrams("meaner")
    self.assertEqual(r, ['meaner', 'rename'])

    _, r = self.anagrams2.get_anagrams("meanest")
    self.assertEqual(r, ['meanest'])

    _, r = self.anagrams2.get_anagrams("meaning")
    self.assertEqual(r, ['meaning'])

    _, r = self.anagrams2.get_anagrams("meaningful")
    self.assertEqual(r, ['meaningful'])

    _, r = self.anagrams2.get_anagrams("meaningfully")
    self.assertEqual(r, ['meaningfully'])

    _, r = self.anagrams2.get_anagrams("meaningfulness")
    self.assertEqual(r, ['meaningfulness'])

    _, r = self.anagrams2.get_anagrams("meaningless")
    self.assertEqual(r, ['meaningless'])

    _, r = self.anagrams2.get_anagrams("meaninglessly")
    self.assertEqual(r, ['meaninglessly'])

    _, r = self.anagrams2.get_anagrams("meaninglessness")
    self.assertEqual(r, ['meaninglessness'])

    _, r = self.anagrams2.get_anagrams("meanings")
    self.assertEqual(r, ['meanings'])

    _, r = self.anagrams2.get_anagrams("meanly")
    self.assertEqual(r, ['laymen', 'manley', 'meanly', 'namely'])

    _, r = self.anagrams2.get_anagrams("meanness")
    self.assertEqual(r, ['meanness'])

    _, r = self.anagrams2.get_anagrams("means")
    self.assertEqual(r, ['manes', 'means', 'names'])

    _, r = self.anagrams2.get_anagrams("meant")
    self.assertEqual(r, ['meant'])

    _, r = self.anagrams2.get_anagrams("meantime")
    self.assertEqual(r, ['meantime'])

    _, r = self.anagrams2.get_anagrams("meanwhile")
    self.assertEqual(r, ['meanwhile'])

    _, r = self.anagrams2.get_anagrams("measle")
    self.assertEqual(r, ['measle'])

    _, r = self.anagrams2.get_anagrams("measles")
    self.assertEqual(r, ['measles'])

    _, r = self.anagrams2.get_anagrams("measurable")
    self.assertEqual(r, ['measurable'])

    _, r = self.anagrams2.get_anagrams("measurably")
    self.assertEqual(r, ['measurably'])

    _, r = self.anagrams2.get_anagrams("measure")
    self.assertEqual(r, ['measure'])

    _, r = self.anagrams2.get_anagrams("measured")
    self.assertEqual(r, ['measured'])

    _, r = self.anagrams2.get_anagrams("measurement")
    self.assertEqual(r, ['measurement'])

    _, r = self.anagrams2.get_anagrams("measurements")
    self.assertEqual(r, ['measurements'])

    _, r = self.anagrams2.get_anagrams("measurer")
    self.assertEqual(r, ['measurer'])

    _, r = self.anagrams2.get_anagrams("measures")
    self.assertEqual(r, ['measures'])

    _, r = self.anagrams2.get_anagrams("measuring")
    self.assertEqual(r, ['measuring'])

    _, r = self.anagrams2.get_anagrams("meat")
    self.assertEqual(r, ['mate', 'meat', 'meta', 'tame', 'team'])

    _, r = self.anagrams2.get_anagrams("meats")
    self.assertEqual(r, ['mates', 'meats', 'steam', 'tames', 'teams'])

    _, r = self.anagrams2.get_anagrams("meaty")
    self.assertEqual(r, ['meaty'])

    _, r = self.anagrams2.get_anagrams("mecca")
    self.assertEqual(r, ['mecca'])

    _, r = self.anagrams2.get_anagrams("mechanic")
    self.assertEqual(r, ['mechanic'])

    _, r = self.anagrams2.get_anagrams("mechanical")
    self.assertEqual(r, ['mechanical'])

    _, r = self.anagrams2.get_anagrams("mechanically")
    self.assertEqual(r, ['mechanically'])

    _, r = self.anagrams2.get_anagrams("mechanics")
    self.assertEqual(r, ['mechanics'])

    _, r = self.anagrams2.get_anagrams("mechanism")
    self.assertEqual(r, ['mechanism'])

    _, r = self.anagrams2.get_anagrams("mechanisms")
    self.assertEqual(r, ['mechanisms'])

    _, r = self.anagrams2.get_anagrams("mechanization")
    self.assertEqual(r, ['mechanization'])

    _, r = self.anagrams2.get_anagrams("mechanizations")
    self.assertEqual(r, ['mechanizations'])

    _, r = self.anagrams2.get_anagrams("mechanize")
    self.assertEqual(r, ['mechanize'])

    _, r = self.anagrams2.get_anagrams("mechanized")
    self.assertEqual(r, ['mechanized'])

    _, r = self.anagrams2.get_anagrams("mechanizes")
    self.assertEqual(r, ['mechanizes'])

    _, r = self.anagrams2.get_anagrams("mechanizing")
    self.assertEqual(r, ['mechanizing'])

    _, r = self.anagrams2.get_anagrams("medal")
    self.assertEqual(r, ['lamed', 'medal'])

    _, r = self.anagrams2.get_anagrams("medallion")
    self.assertEqual(r, ['medallion'])

    _, r = self.anagrams2.get_anagrams("medallions")
    self.assertEqual(r, ['medallions'])

    _, r = self.anagrams2.get_anagrams("medals")
    self.assertEqual(r, ['damsel', 'medals'])

    _, r = self.anagrams2.get_anagrams("meddle")
    self.assertEqual(r, ['meddle'])

    _, r = self.anagrams2.get_anagrams("meddled")
    self.assertEqual(r, ['meddled'])

    _, r = self.anagrams2.get_anagrams("meddler")
    self.assertEqual(r, ['meddler'])

    _, r = self.anagrams2.get_anagrams("meddles")
    self.assertEqual(r, ['meddles'])

    _, r = self.anagrams2.get_anagrams("meddling")
    self.assertEqual(r, ['meddling'])

    _, r = self.anagrams2.get_anagrams("medea")
    self.assertEqual(r, ['medea'])

    _, r = self.anagrams2.get_anagrams("medfield")
    self.assertEqual(r, ['medfield'])

    _, r = self.anagrams2.get_anagrams("medford")
    self.assertEqual(r, ['medford'])

    _, r = self.anagrams2.get_anagrams("media")
    self.assertEqual(r, ['aimed', 'amide', 'media'])

    _, r = self.anagrams2.get_anagrams("median")
    self.assertEqual(r, ['maiden', 'median'])

    _, r = self.anagrams2.get_anagrams("medians")
    self.assertEqual(r, ['maidens', 'medians'])

    _, r = self.anagrams2.get_anagrams("mediate")
    self.assertEqual(r, ['mediate'])

    _, r = self.anagrams2.get_anagrams("mediated")
    self.assertEqual(r, ['mediated'])

    _, r = self.anagrams2.get_anagrams("mediates")
    self.assertEqual(r, ['mediates'])

    _, r = self.anagrams2.get_anagrams("mediating")
    self.assertEqual(r, ['mediating'])

    _, r = self.anagrams2.get_anagrams("mediation")
    self.assertEqual(r, ['mediation'])

    _, r = self.anagrams2.get_anagrams("mediations")
    self.assertEqual(r, ['mediations'])

    _, r = self.anagrams2.get_anagrams("mediator")
    self.assertEqual(r, ['mediator'])

    _, r = self.anagrams2.get_anagrams("medic")
    self.assertEqual(r, ['medic'])

    _, r = self.anagrams2.get_anagrams("medicaid")
    self.assertEqual(r, ['medicaid'])

    _, r = self.anagrams2.get_anagrams("medical")
    self.assertEqual(r, ['claimed', 'decimal', 'medical'])

    _, r = self.anagrams2.get_anagrams("medically")
    self.assertEqual(r, ['medically'])

    _, r = self.anagrams2.get_anagrams("medicare")
    self.assertEqual(r, ['medicare'])

    _, r = self.anagrams2.get_anagrams("medici")
    self.assertEqual(r, ['medici'])

    _, r = self.anagrams2.get_anagrams("medicinal")
    self.assertEqual(r, ['medicinal'])

    _, r = self.anagrams2.get_anagrams("medicinally")
    self.assertEqual(r, ['medicinally'])

    _, r = self.anagrams2.get_anagrams("medicine")
    self.assertEqual(r, ['medicine'])

    _, r = self.anagrams2.get_anagrams("medicines")
    self.assertEqual(r, ['medicines'])

    _, r = self.anagrams2.get_anagrams("medicis")
    self.assertEqual(r, ['medicis'])

    _, r = self.anagrams2.get_anagrams("medics")
    self.assertEqual(r, ['medics'])

    _, r = self.anagrams2.get_anagrams("medieval")
    self.assertEqual(r, ['medieval'])

    _, r = self.anagrams2.get_anagrams("mediocre")
    self.assertEqual(r, ['mediocre'])

    _, r = self.anagrams2.get_anagrams("mediocrity")
    self.assertEqual(r, ['mediocrity'])

    _, r = self.anagrams2.get_anagrams("meditate")
    self.assertEqual(r, ['meditate'])

    _, r = self.anagrams2.get_anagrams("meditated")
    self.assertEqual(r, ['meditated'])

    _, r = self.anagrams2.get_anagrams("meditates")
    self.assertEqual(r, ['estimated', 'meditates'])

    _, r = self.anagrams2.get_anagrams("meditating")
    self.assertEqual(r, ['meditating'])

    _, r = self.anagrams2.get_anagrams("meditation")
    self.assertEqual(r, ['meditation'])

    _, r = self.anagrams2.get_anagrams("meditations")
    self.assertEqual(r, ['meditations'])

    _, r = self.anagrams2.get_anagrams("meditative")
    self.assertEqual(r, ['meditative'])

    _, r = self.anagrams2.get_anagrams("mediterranean")
    self.assertEqual(r, ['mediterranean'])

    _, r = self.anagrams2.get_anagrams("mediterraneanization")
    self.assertEqual(r, ['mediterraneanization'])

    _, r = self.anagrams2.get_anagrams("mediterraneanizations")
    self.assertEqual(r, ['mediterraneanizations'])

    _, r = self.anagrams2.get_anagrams("mediterraneanize")
    self.assertEqual(r, ['mediterraneanize'])

    _, r = self.anagrams2.get_anagrams("mediterraneanizes")
    self.assertEqual(r, ['mediterraneanizes'])

    _, r = self.anagrams2.get_anagrams("medium")
    self.assertEqual(r, ['medium'])

    _, r = self.anagrams2.get_anagrams("mediums")
    self.assertEqual(r, ['dummies', 'mediums'])

    _, r = self.anagrams2.get_anagrams("medley")
    self.assertEqual(r, ['medley'])

    _, r = self.anagrams2.get_anagrams("medusa")
    self.assertEqual(r, ['amused', 'medusa'])

    _, r = self.anagrams2.get_anagrams("medusan")
    self.assertEqual(r, ['medusan'])

    _, r = self.anagrams2.get_anagrams("meek")
    self.assertEqual(r, ['meek'])

    _, r = self.anagrams2.get_anagrams("meeker")
    self.assertEqual(r, ['meeker'])

    _, r = self.anagrams2.get_anagrams("meekest")
    self.assertEqual(r, ['meekest'])

    _, r = self.anagrams2.get_anagrams("meekly")
    self.assertEqual(r, ['meekly'])

    _, r = self.anagrams2.get_anagrams("meekness")
    self.assertEqual(r, ['meekness'])

    _, r = self.anagrams2.get_anagrams("meet")
    self.assertEqual(r, ['meet', 'mete', 'teem'])

    _, r = self.anagrams2.get_anagrams("meeting")
    self.assertEqual(r, ['meeting', 'teeming'])

    _, r = self.anagrams2.get_anagrams("meetinghouse")
    self.assertEqual(r, ['meetinghouse'])

    _, r = self.anagrams2.get_anagrams("meetings")
    self.assertEqual(r, ['meetings'])

    _, r = self.anagrams2.get_anagrams("meets")
    self.assertEqual(r, ['meets', 'metes', 'teems'])

    _, r = self.anagrams2.get_anagrams("meg")
    self.assertEqual(r, ['gem', 'meg'])

    _, r = self.anagrams2.get_anagrams("megabaud")
    self.assertEqual(r, ['megabaud'])

    _, r = self.anagrams2.get_anagrams("megabit")
    self.assertEqual(r, ['megabit'])

    _, r = self.anagrams2.get_anagrams("megabits")
    self.assertEqual(r, ['megabits'])

    _, r = self.anagrams2.get_anagrams("megabyte")
    self.assertEqual(r, ['megabyte'])

    _, r = self.anagrams2.get_anagrams("megabytes")
    self.assertEqual(r, ['megabytes'])

    _, r = self.anagrams2.get_anagrams("megahertz")
    self.assertEqual(r, ['megahertz'])

    _, r = self.anagrams2.get_anagrams("megalomania")
    self.assertEqual(r, ['megalomania'])

    _, r = self.anagrams2.get_anagrams("megaton")
    self.assertEqual(r, ['magneto', 'megaton'])

    _, r = self.anagrams2.get_anagrams("megavolt")
    self.assertEqual(r, ['megavolt'])

    _, r = self.anagrams2.get_anagrams("megawatt")
    self.assertEqual(r, ['megawatt'])

    _, r = self.anagrams2.get_anagrams("megaword")
    self.assertEqual(r, ['megaword'])

    _, r = self.anagrams2.get_anagrams("megawords")
    self.assertEqual(r, ['megawords'])

    _, r = self.anagrams2.get_anagrams("megohm")
    self.assertEqual(r, ['megohm'])

    _, r = self.anagrams2.get_anagrams("meier")
    self.assertEqual(r, ['meier'])

    _, r = self.anagrams2.get_anagrams("meiji")
    self.assertEqual(r, ['meiji'])

    _, r = self.anagrams2.get_anagrams("meister")
    self.assertEqual(r, ['meister'])

    _, r = self.anagrams2.get_anagrams("meistersinger")
    self.assertEqual(r, ['meistersinger'])

    _, r = self.anagrams2.get_anagrams("mekong")
    self.assertEqual(r, ['mekong'])

    _, r = self.anagrams2.get_anagrams("mel")
    self.assertEqual(r, ['elm', 'mel'])

    _, r = self.anagrams2.get_anagrams("melampus")
    self.assertEqual(r, ['melampus'])

    _, r = self.anagrams2.get_anagrams("melancholy")
    self.assertEqual(r, ['melancholy'])

    _, r = self.anagrams2.get_anagrams("melanesia")
    self.assertEqual(r, ['melanesia'])

    _, r = self.anagrams2.get_anagrams("melanesian")
    self.assertEqual(r, ['melanesian'])

    _, r = self.anagrams2.get_anagrams("melanie")
    self.assertEqual(r, ['melanie'])

    _, r = self.anagrams2.get_anagrams("melbourne")
    self.assertEqual(r, ['melbourne'])

    _, r = self.anagrams2.get_anagrams("melcher")
    self.assertEqual(r, ['melcher'])

    _, r = self.anagrams2.get_anagrams("melinda")
    self.assertEqual(r, ['melinda'])

    _, r = self.anagrams2.get_anagrams("melisande")
    self.assertEqual(r, ['melisande'])

    _, r = self.anagrams2.get_anagrams("melissa")
    self.assertEqual(r, ['aimless', 'melissa'])

    _, r = self.anagrams2.get_anagrams("mellon")
    self.assertEqual(r, ['mellon'])

    _, r = self.anagrams2.get_anagrams("mellow")
    self.assertEqual(r, ['mellow'])

    _, r = self.anagrams2.get_anagrams("mellowed")
    self.assertEqual(r, ['mellowed'])

    _, r = self.anagrams2.get_anagrams("mellowing")
    self.assertEqual(r, ['mellowing'])

    _, r = self.anagrams2.get_anagrams("mellowness")
    self.assertEqual(r, ['mellowness'])

    _, r = self.anagrams2.get_anagrams("mellows")
    self.assertEqual(r, ['mellows'])

    _, r = self.anagrams2.get_anagrams("melodies")
    self.assertEqual(r, ['melodies'])

    _, r = self.anagrams2.get_anagrams("melodious")
    self.assertEqual(r, ['melodious'])

    _, r = self.anagrams2.get_anagrams("melodiously")
    self.assertEqual(r, ['melodiously'])

    _, r = self.anagrams2.get_anagrams("melodiousness")
    self.assertEqual(r, ['melodiousness'])

    _, r = self.anagrams2.get_anagrams("melodrama")
    self.assertEqual(r, ['melodrama'])

    _, r = self.anagrams2.get_anagrams("melodramas")
    self.assertEqual(r, ['melodramas'])

    _, r = self.anagrams2.get_anagrams("melodramatic")
    self.assertEqual(r, ['melodramatic'])

    _, r = self.anagrams2.get_anagrams("melody")
    self.assertEqual(r, ['melody'])

    _, r = self.anagrams2.get_anagrams("melon")
    self.assertEqual(r, ['lemon', 'melon', 'menlo'])

    _, r = self.anagrams2.get_anagrams("melons")
    self.assertEqual(r, ['lemons', 'melons', 'solemn'])

    _, r = self.anagrams2.get_anagrams("melpomene")
    self.assertEqual(r, ['melpomene'])

    _, r = self.anagrams2.get_anagrams("melt")
    self.assertEqual(r, ['melt'])

    _, r = self.anagrams2.get_anagrams("melted")
    self.assertEqual(r, ['melted'])

    _, r = self.anagrams2.get_anagrams("melting")
    self.assertEqual(r, ['melting'])

    _, r = self.anagrams2.get_anagrams("meltingly")
    self.assertEqual(r, ['meltingly'])

    _, r = self.anagrams2.get_anagrams("melts")
    self.assertEqual(r, ['melts', 'smelt'])

    _, r = self.anagrams2.get_anagrams("melville")
    self.assertEqual(r, ['melville'])

    _, r = self.anagrams2.get_anagrams("melvin")
    self.assertEqual(r, ['melvin'])

    _, r = self.anagrams2.get_anagrams("member")
    self.assertEqual(r, ['member'])

    _, r = self.anagrams2.get_anagrams("members")
    self.assertEqual(r, ['members'])

    _, r = self.anagrams2.get_anagrams("membership")
    self.assertEqual(r, ['membership'])

    _, r = self.anagrams2.get_anagrams("memberships")
    self.assertEqual(r, ['memberships'])

    _, r = self.anagrams2.get_anagrams("membrane")
    self.assertEqual(r, ['membrane'])

    _, r = self.anagrams2.get_anagrams("memento")
    self.assertEqual(r, ['memento'])

    _, r = self.anagrams2.get_anagrams("memo")
    self.assertEqual(r, ['memo'])

    _, r = self.anagrams2.get_anagrams("memoir")
    self.assertEqual(r, ['memoir'])

    _, r = self.anagrams2.get_anagrams("memoirs")
    self.assertEqual(r, ['memoirs'])

    _, r = self.anagrams2.get_anagrams("memorabilia")
    self.assertEqual(r, ['memorabilia'])

    _, r = self.anagrams2.get_anagrams("memorable")
    self.assertEqual(r, ['memorable'])

    _, r = self.anagrams2.get_anagrams("memorableness")
    self.assertEqual(r, ['memorableness'])

    _, r = self.anagrams2.get_anagrams("memoranda")
    self.assertEqual(r, ['memoranda'])

    _, r = self.anagrams2.get_anagrams("memorandum")
    self.assertEqual(r, ['memorandum'])

    _, r = self.anagrams2.get_anagrams("memorial")
    self.assertEqual(r, ['memorial'])

    _, r = self.anagrams2.get_anagrams("memorially")
    self.assertEqual(r, ['memorially'])

    _, r = self.anagrams2.get_anagrams("memorials")
    self.assertEqual(r, ['memorials'])

    _, r = self.anagrams2.get_anagrams("memories")
    self.assertEqual(r, ['memories'])

    _, r = self.anagrams2.get_anagrams("memorization")
    self.assertEqual(r, ['memorization'])

    _, r = self.anagrams2.get_anagrams("memorize")
    self.assertEqual(r, ['memorize'])

    _, r = self.anagrams2.get_anagrams("memorized")
    self.assertEqual(r, ['memorized'])

    _, r = self.anagrams2.get_anagrams("memorizer")
    self.assertEqual(r, ['memorizer'])

    _, r = self.anagrams2.get_anagrams("memorizes")
    self.assertEqual(r, ['memorizes'])

    _, r = self.anagrams2.get_anagrams("memorizing")
    self.assertEqual(r, ['memorizing'])

    _, r = self.anagrams2.get_anagrams("memory")
    self.assertEqual(r, ['memory'])

    _, r = self.anagrams2.get_anagrams("memoryless")
    self.assertEqual(r, ['memoryless'])

    _, r = self.anagrams2.get_anagrams("memos")
    self.assertEqual(r, ['memos'])

    _, r = self.anagrams2.get_anagrams("memphis")
    self.assertEqual(r, ['memphis'])

    _, r = self.anagrams2.get_anagrams("men")
    self.assertEqual(r, ['men'])

    _, r = self.anagrams2.get_anagrams("menace")
    self.assertEqual(r, ['menace'])

    _, r = self.anagrams2.get_anagrams("menaced")
    self.assertEqual(r, ['menaced'])

    _, r = self.anagrams2.get_anagrams("menacing")
    self.assertEqual(r, ['menacing'])

    _, r = self.anagrams2.get_anagrams("menagerie")
    self.assertEqual(r, ['menagerie'])

    _, r = self.anagrams2.get_anagrams("menarche")
    self.assertEqual(r, ['menarche'])

    _, r = self.anagrams2.get_anagrams("mencken")
    self.assertEqual(r, ['mencken'])

    _, r = self.anagrams2.get_anagrams("mend")
    self.assertEqual(r, ['mend'])

    _, r = self.anagrams2.get_anagrams("mendacious")
    self.assertEqual(r, ['mendacious'])

    _, r = self.anagrams2.get_anagrams("mendacity")
    self.assertEqual(r, ['mendacity'])

    _, r = self.anagrams2.get_anagrams("mended")
    self.assertEqual(r, ['mended'])

    _, r = self.anagrams2.get_anagrams("mendel")
    self.assertEqual(r, ['mendel'])

    _, r = self.anagrams2.get_anagrams("mendelian")
    self.assertEqual(r, ['mendelian'])

    _, r = self.anagrams2.get_anagrams("mendelize")
    self.assertEqual(r, ['mendelize'])

    _, r = self.anagrams2.get_anagrams("mendelizes")
    self.assertEqual(r, ['mendelizes'])

    _, r = self.anagrams2.get_anagrams("mendelssohn")
    self.assertEqual(r, ['mendelssohn'])

    _, r = self.anagrams2.get_anagrams("mender")
    self.assertEqual(r, ['mender'])

    _, r = self.anagrams2.get_anagrams("mending")
    self.assertEqual(r, ['mending'])

    _, r = self.anagrams2.get_anagrams("mendoza")
    self.assertEqual(r, ['mendoza'])

    _, r = self.anagrams2.get_anagrams("mends")
    self.assertEqual(r, ['mends'])

    _, r = self.anagrams2.get_anagrams("menelaus")
    self.assertEqual(r, ['menelaus'])

    _, r = self.anagrams2.get_anagrams("menial")
    self.assertEqual(r, ['menial'])

    _, r = self.anagrams2.get_anagrams("menials")
    self.assertEqual(r, ['menials', 'seminal'])

    _, r = self.anagrams2.get_anagrams("menlo")
    self.assertEqual(r, ['lemon', 'melon', 'menlo'])

    _, r = self.anagrams2.get_anagrams("mennonite")
    self.assertEqual(r, ['mennonite'])

    _, r = self.anagrams2.get_anagrams("mennonites")
    self.assertEqual(r, ['mennonites'])

    _, r = self.anagrams2.get_anagrams("menominee")
    self.assertEqual(r, ['menominee'])

    _, r = self.anagrams2.get_anagrams("menorca")
    self.assertEqual(r, ['cameron', 'menorca', 'romance'])

    _, r = self.anagrams2.get_anagrams("mens")
    self.assertEqual(r, ['mens'])

    _, r = self.anagrams2.get_anagrams("mensch")
    self.assertEqual(r, ['mensch'])

    _, r = self.anagrams2.get_anagrams("menstruate")
    self.assertEqual(r, ['menstruate'])

    _, r = self.anagrams2.get_anagrams("mensurable")
    self.assertEqual(r, ['mensurable'])

    _, r = self.anagrams2.get_anagrams("mensuration")
    self.assertEqual(r, ['mensuration'])

    _, r = self.anagrams2.get_anagrams("mental")
    self.assertEqual(r, ['lament', 'mantel', 'mantle', 'mental'])

    _, r = self.anagrams2.get_anagrams("mentalities")
    self.assertEqual(r, ['mentalities'])

    _, r = self.anagrams2.get_anagrams("mentality")
    self.assertEqual(r, ['mentality'])

    _, r = self.anagrams2.get_anagrams("mentally")
    self.assertEqual(r, ['mentally'])

    _, r = self.anagrams2.get_anagrams("mention")
    self.assertEqual(r, ['mention'])

    _, r = self.anagrams2.get_anagrams("mentionable")
    self.assertEqual(r, ['mentionable'])

    _, r = self.anagrams2.get_anagrams("mentioned")
    self.assertEqual(r, ['mentioned'])

    _, r = self.anagrams2.get_anagrams("mentioner")
    self.assertEqual(r, ['mentioner'])

    _, r = self.anagrams2.get_anagrams("mentioners")
    self.assertEqual(r, ['mentioners'])

    _, r = self.anagrams2.get_anagrams("mentioning")
    self.assertEqual(r, ['mentioning'])

    _, r = self.anagrams2.get_anagrams("mentions")
    self.assertEqual(r, ['mentions'])

    _, r = self.anagrams2.get_anagrams("mentor")
    self.assertEqual(r, ['mentor'])

    _, r = self.anagrams2.get_anagrams("mentors")
    self.assertEqual(r, ['mentors', 'monster'])

    _, r = self.anagrams2.get_anagrams("menu")
    self.assertEqual(r, ['menu'])

    _, r = self.anagrams2.get_anagrams("menus")
    self.assertEqual(r, ['menus'])

    _, r = self.anagrams2.get_anagrams("menzies")
    self.assertEqual(r, ['menzies'])

    _, r = self.anagrams2.get_anagrams("mephistopheles")
    self.assertEqual(r, ['mephistopheles'])

    _, r = self.anagrams2.get_anagrams("mercantile")
    self.assertEqual(r, ['mercantile'])

    _, r = self.anagrams2.get_anagrams("mercator")
    self.assertEqual(r, ['mercator'])

    _, r = self.anagrams2.get_anagrams("mercedes")
    self.assertEqual(r, ['mercedes'])

    _, r = self.anagrams2.get_anagrams("mercenaries")
    self.assertEqual(r, ['mercenaries'])

    _, r = self.anagrams2.get_anagrams("mercenariness")
    self.assertEqual(r, ['mercenariness'])

    _, r = self.anagrams2.get_anagrams("mercenary")
    self.assertEqual(r, ['mercenary'])

    _, r = self.anagrams2.get_anagrams("merchandise")
    self.assertEqual(r, ['merchandise'])

    _, r = self.anagrams2.get_anagrams("merchandiser")
    self.assertEqual(r, ['merchandiser'])

    _, r = self.anagrams2.get_anagrams("merchandising")
    self.assertEqual(r, ['merchandising'])

    _, r = self.anagrams2.get_anagrams("merchant")
    self.assertEqual(r, ['merchant'])

    _, r = self.anagrams2.get_anagrams("merchants")
    self.assertEqual(r, ['merchants'])

    _, r = self.anagrams2.get_anagrams("merciful")
    self.assertEqual(r, ['merciful'])

    _, r = self.anagrams2.get_anagrams("mercifully")
    self.assertEqual(r, ['mercifully'])

    _, r = self.anagrams2.get_anagrams("merciless")
    self.assertEqual(r, ['merciless'])

    _, r = self.anagrams2.get_anagrams("mercilessly")
    self.assertEqual(r, ['mercilessly'])

    _, r = self.anagrams2.get_anagrams("merck")
    self.assertEqual(r, ['merck'])

    _, r = self.anagrams2.get_anagrams("mercurial")
    self.assertEqual(r, ['mercurial'])

    _, r = self.anagrams2.get_anagrams("mercury")
    self.assertEqual(r, ['mercury'])

    _, r = self.anagrams2.get_anagrams("mercy")
    self.assertEqual(r, ['mercy'])

    _, r = self.anagrams2.get_anagrams("mere")
    self.assertEqual(r, ['mere'])

    _, r = self.anagrams2.get_anagrams("meredith")
    self.assertEqual(r, ['meredith'])

    _, r = self.anagrams2.get_anagrams("merely")
    self.assertEqual(r, ['merely'])

    _, r = self.anagrams2.get_anagrams("merest")
    self.assertEqual(r, ['merest', 'meters'])

    _, r = self.anagrams2.get_anagrams("merge")
    self.assertEqual(r, ['merge'])

    _, r = self.anagrams2.get_anagrams("merged")
    self.assertEqual(r, ['merged'])

    _, r = self.anagrams2.get_anagrams("merger")
    self.assertEqual(r, ['merger'])

    _, r = self.anagrams2.get_anagrams("mergers")
    self.assertEqual(r, ['mergers'])

    _, r = self.anagrams2.get_anagrams("merges")
    self.assertEqual(r, ['merges'])

    _, r = self.anagrams2.get_anagrams("merging")
    self.assertEqual(r, ['merging'])

    _, r = self.anagrams2.get_anagrams("meridian")
    self.assertEqual(r, ['meridian'])

    _, r = self.anagrams2.get_anagrams("meringue")
    self.assertEqual(r, ['meringue'])

    _, r = self.anagrams2.get_anagrams("merit")
    self.assertEqual(r, ['merit', 'miter', 'mitre', 'remit', 'timer'])

    _, r = self.anagrams2.get_anagrams("merited")
    self.assertEqual(r, ['demerit', 'merited'])

    _, r = self.anagrams2.get_anagrams("meriting")
    self.assertEqual(r, ['meriting'])

    _, r = self.anagrams2.get_anagrams("meritorious")
    self.assertEqual(r, ['meritorious'])

    _, r = self.anagrams2.get_anagrams("meritoriously")
    self.assertEqual(r, ['meritoriously'])

    _, r = self.anagrams2.get_anagrams("meritoriousness")
    self.assertEqual(r, ['meritoriousness'])

    _, r = self.anagrams2.get_anagrams("merits")
    self.assertEqual(r, ['merits', 'mister', 'mitres', 'timers'])

    _, r = self.anagrams2.get_anagrams("meriwether")
    self.assertEqual(r, ['meriwether'])

    _, r = self.anagrams2.get_anagrams("merle")
    self.assertEqual(r, ['elmer', 'merle'])

    _, r = self.anagrams2.get_anagrams("mermaid")
    self.assertEqual(r, ['mermaid'])

    _, r = self.anagrams2.get_anagrams("merriam")
    self.assertEqual(r, ['merriam'])

    _, r = self.anagrams2.get_anagrams("merrick")
    self.assertEqual(r, ['merrick'])

    _, r = self.anagrams2.get_anagrams("merriest")
    self.assertEqual(r, ['merriest'])

    _, r = self.anagrams2.get_anagrams("merrill")
    self.assertEqual(r, ['merrill'])

    _, r = self.anagrams2.get_anagrams("merrily")
    self.assertEqual(r, ['merrily'])

    _, r = self.anagrams2.get_anagrams("merrimac")
    self.assertEqual(r, ['merrimac'])

    _, r = self.anagrams2.get_anagrams("merrimack")
    self.assertEqual(r, ['merrimack'])

    _, r = self.anagrams2.get_anagrams("merriment")
    self.assertEqual(r, ['merriment'])

    _, r = self.anagrams2.get_anagrams("merritt")
    self.assertEqual(r, ['merritt'])

    _, r = self.anagrams2.get_anagrams("merry")
    self.assertEqual(r, ['merry'])

    _, r = self.anagrams2.get_anagrams("merrymake")
    self.assertEqual(r, ['merrymake'])

    _, r = self.anagrams2.get_anagrams("mervin")
    self.assertEqual(r, ['mervin', 'vermin'])

    _, r = self.anagrams2.get_anagrams("mescaline")
    self.assertEqual(r, ['mescaline'])

    _, r = self.anagrams2.get_anagrams("mesh")
    self.assertEqual(r, ['hems', 'mesh'])

    _, r = self.anagrams2.get_anagrams("meson")
    self.assertEqual(r, ['meson', 'omens'])

    _, r = self.anagrams2.get_anagrams("mesopotamia")
    self.assertEqual(r, ['mesopotamia'])

    _, r = self.anagrams2.get_anagrams("mesozoic")
    self.assertEqual(r, ['mesozoic'])

    _, r = self.anagrams2.get_anagrams("mesquite")
    self.assertEqual(r, ['mesquite'])

    _, r = self.anagrams2.get_anagrams("mess")
    self.assertEqual(r, ['mess'])

    _, r = self.anagrams2.get_anagrams("message")
    self.assertEqual(r, ['message'])

    _, r = self.anagrams2.get_anagrams("messages")
    self.assertEqual(r, ['messages'])

    _, r = self.anagrams2.get_anagrams("messed")
    self.assertEqual(r, ['messed'])

    _, r = self.anagrams2.get_anagrams("messenger")
    self.assertEqual(r, ['messenger'])

    _, r = self.anagrams2.get_anagrams("messengers")
    self.assertEqual(r, ['messengers'])

    _, r = self.anagrams2.get_anagrams("messes")
    self.assertEqual(r, ['messes'])

    _, r = self.anagrams2.get_anagrams("messiah")
    self.assertEqual(r, ['messiah'])

    _, r = self.anagrams2.get_anagrams("messiahs")
    self.assertEqual(r, ['messiahs'])

    _, r = self.anagrams2.get_anagrams("messier")
    self.assertEqual(r, ['messier'])

    _, r = self.anagrams2.get_anagrams("messiest")
    self.assertEqual(r, ['messiest'])

    _, r = self.anagrams2.get_anagrams("messily")
    self.assertEqual(r, ['messily'])

    _, r = self.anagrams2.get_anagrams("messiness")
    self.assertEqual(r, ['messiness'])

    _, r = self.anagrams2.get_anagrams("messing")
    self.assertEqual(r, ['messing'])

    _, r = self.anagrams2.get_anagrams("messy")
    self.assertEqual(r, ['messy'])

    _, r = self.anagrams2.get_anagrams("met")
    self.assertEqual(r, ['met'])

    _, r = self.anagrams2.get_anagrams("meta")
    self.assertEqual(r, ['mate', 'meat', 'meta', 'tame', 'team'])

    _, r = self.anagrams2.get_anagrams("metabolic")
    self.assertEqual(r, ['metabolic'])

    _, r = self.anagrams2.get_anagrams("metabolism")
    self.assertEqual(r, ['metabolism'])

    _, r = self.anagrams2.get_anagrams("metacircular")
    self.assertEqual(r, ['metacircular'])

    _, r = self.anagrams2.get_anagrams("metacircularity")
    self.assertEqual(r, ['metacircularity'])

    _, r = self.anagrams2.get_anagrams("metal")
    self.assertEqual(r, ['metal'])

    _, r = self.anagrams2.get_anagrams("metalanguage")
    self.assertEqual(r, ['metalanguage'])

    _, r = self.anagrams2.get_anagrams("metallic")
    self.assertEqual(r, ['metallic'])

    _, r = self.anagrams2.get_anagrams("metallization")
    self.assertEqual(r, ['metallization'])

    _, r = self.anagrams2.get_anagrams("metallizations")
    self.assertEqual(r, ['metallizations'])

    _, r = self.anagrams2.get_anagrams("metallurgy")
    self.assertEqual(r, ['metallurgy'])

    _, r = self.anagrams2.get_anagrams("metals")
    self.assertEqual(r, ['metals'])

    _, r = self.anagrams2.get_anagrams("metamathematical")
    self.assertEqual(r, ['metamathematical'])

    _, r = self.anagrams2.get_anagrams("metamorphosis")
    self.assertEqual(r, ['metamorphosis'])

    _, r = self.anagrams2.get_anagrams("metaphor")
    self.assertEqual(r, ['metaphor'])

    _, r = self.anagrams2.get_anagrams("metaphorical")
    self.assertEqual(r, ['metaphorical'])

    _, r = self.anagrams2.get_anagrams("metaphorically")
    self.assertEqual(r, ['metaphorically'])

    _, r = self.anagrams2.get_anagrams("metaphors")
    self.assertEqual(r, ['metaphors'])

    _, r = self.anagrams2.get_anagrams("metaphysical")
    self.assertEqual(r, ['metaphysical'])

    _, r = self.anagrams2.get_anagrams("metaphysically")
    self.assertEqual(r, ['metaphysically'])

    _, r = self.anagrams2.get_anagrams("metaphysics")
    self.assertEqual(r, ['metaphysics'])

    _, r = self.anagrams2.get_anagrams("metavariable")
    self.assertEqual(r, ['metavariable'])

    _, r = self.anagrams2.get_anagrams("metcalf")
    self.assertEqual(r, ['metcalf'])

    _, r = self.anagrams2.get_anagrams("mete")
    self.assertEqual(r, ['meet', 'mete', 'teem'])

    _, r = self.anagrams2.get_anagrams("meted")
    self.assertEqual(r, ['meted'])

    _, r = self.anagrams2.get_anagrams("meteor")
    self.assertEqual(r, ['meteor', 'remote'])

    _, r = self.anagrams2.get_anagrams("meteoric")
    self.assertEqual(r, ['meteoric'])

    _, r = self.anagrams2.get_anagrams("meteorite")
    self.assertEqual(r, ['meteorite'])

    _, r = self.anagrams2.get_anagrams("meteoritic")
    self.assertEqual(r, ['meteoritic'])

    _, r = self.anagrams2.get_anagrams("meteorology")
    self.assertEqual(r, ['meteorology'])

    _, r = self.anagrams2.get_anagrams("meteors")
    self.assertEqual(r, ['meteors'])

    _, r = self.anagrams2.get_anagrams("meter")
    self.assertEqual(r, ['meter'])

    _, r = self.anagrams2.get_anagrams("metering")
    self.assertEqual(r, ['metering', 'regiment'])

    _, r = self.anagrams2.get_anagrams("meters")
    self.assertEqual(r, ['merest', 'meters'])

    _, r = self.anagrams2.get_anagrams("metes")
    self.assertEqual(r, ['meets', 'metes', 'teems'])

    _, r = self.anagrams2.get_anagrams("methane")
    self.assertEqual(r, ['methane'])

    _, r = self.anagrams2.get_anagrams("method")
    self.assertEqual(r, ['method'])

    _, r = self.anagrams2.get_anagrams("methodical")
    self.assertEqual(r, ['methodical'])

    _, r = self.anagrams2.get_anagrams("methodically")
    self.assertEqual(r, ['methodically'])

    _, r = self.anagrams2.get_anagrams("methodicalness")
    self.assertEqual(r, ['methodicalness'])

    _, r = self.anagrams2.get_anagrams("methodism")
    self.assertEqual(r, ['methodism'])

    _, r = self.anagrams2.get_anagrams("methodist")
    self.assertEqual(r, ['methodist'])

    _, r = self.anagrams2.get_anagrams("methodists")
    self.assertEqual(r, ['methodists'])

    _, r = self.anagrams2.get_anagrams("methodological")
    self.assertEqual(r, ['methodological'])

    _, r = self.anagrams2.get_anagrams("methodologically")
    self.assertEqual(r, ['methodologically'])

    _, r = self.anagrams2.get_anagrams("methodologies")
    self.assertEqual(r, ['methodologies'])

    _, r = self.anagrams2.get_anagrams("methodologists")
    self.assertEqual(r, ['methodologists'])

    _, r = self.anagrams2.get_anagrams("methodology")
    self.assertEqual(r, ['methodology'])

    _, r = self.anagrams2.get_anagrams("methods")
    self.assertEqual(r, ['methods'])

    _, r = self.anagrams2.get_anagrams("methuen")
    self.assertEqual(r, ['methuen'])

    _, r = self.anagrams2.get_anagrams("methuselah")
    self.assertEqual(r, ['methuselah'])

    _, r = self.anagrams2.get_anagrams("methuselahs")
    self.assertEqual(r, ['methuselahs'])

    _, r = self.anagrams2.get_anagrams("meticulously")
    self.assertEqual(r, ['meticulously'])

    _, r = self.anagrams2.get_anagrams("meting")
    self.assertEqual(r, ['meting'])

    _, r = self.anagrams2.get_anagrams("metrecal")
    self.assertEqual(r, ['metrecal'])

    _, r = self.anagrams2.get_anagrams("metric")
    self.assertEqual(r, ['metric'])

    _, r = self.anagrams2.get_anagrams("metrical")
    self.assertEqual(r, ['metrical'])

    _, r = self.anagrams2.get_anagrams("metrics")
    self.assertEqual(r, ['metrics'])

    _, r = self.anagrams2.get_anagrams("metro")
    self.assertEqual(r, ['metro'])

    _, r = self.anagrams2.get_anagrams("metronome")
    self.assertEqual(r, ['metronome'])

    _, r = self.anagrams2.get_anagrams("metropolis")
    self.assertEqual(r, ['metropolis'])

    _, r = self.anagrams2.get_anagrams("metropolitan")
    self.assertEqual(r, ['metropolitan'])

    _, r = self.anagrams2.get_anagrams("mets")
    self.assertEqual(r, ['mets', 'stem'])

    _, r = self.anagrams2.get_anagrams("mettle")
    self.assertEqual(r, ['mettle'])

    _, r = self.anagrams2.get_anagrams("mettlesome")
    self.assertEqual(r, ['mettlesome'])

    _, r = self.anagrams2.get_anagrams("metzler")
    self.assertEqual(r, ['metzler'])

    _, r = self.anagrams2.get_anagrams("mew")
    self.assertEqual(r, ['mew'])

    _, r = self.anagrams2.get_anagrams("mewed")
    self.assertEqual(r, ['mewed'])

    _, r = self.anagrams2.get_anagrams("mews")
    self.assertEqual(r, ['mews'])

    _, r = self.anagrams2.get_anagrams("mexican")
    self.assertEqual(r, ['mexican'])

    _, r = self.anagrams2.get_anagrams("mexicanize")
    self.assertEqual(r, ['mexicanize'])

    _, r = self.anagrams2.get_anagrams("mexicanizes")
    self.assertEqual(r, ['mexicanizes'])

    _, r = self.anagrams2.get_anagrams("mexicans")
    self.assertEqual(r, ['mexicans'])

    _, r = self.anagrams2.get_anagrams("mexico")
    self.assertEqual(r, ['mexico'])

    _, r = self.anagrams2.get_anagrams("meyer")
    self.assertEqual(r, ['emery', 'meyer'])

    _, r = self.anagrams2.get_anagrams("meyers")
    self.assertEqual(r, ['meyers'])

    _, r = self.anagrams2.get_anagrams("miami")
    self.assertEqual(r, ['miami'])

    _, r = self.anagrams2.get_anagrams("miasma")
    self.assertEqual(r, ['miasma'])

    _, r = self.anagrams2.get_anagrams("mica")
    self.assertEqual(r, ['mica'])

    _, r = self.anagrams2.get_anagrams("mice")
    self.assertEqual(r, ['mice'])

    _, r = self.anagrams2.get_anagrams("michael")
    self.assertEqual(r, ['michael'])

    _, r = self.anagrams2.get_anagrams("michaels")
    self.assertEqual(r, ['michaels'])

    _, r = self.anagrams2.get_anagrams("michel")
    self.assertEqual(r, ['michel'])

    _, r = self.anagrams2.get_anagrams("michelangelo")
    self.assertEqual(r, ['michelangelo'])

    _, r = self.anagrams2.get_anagrams("michele")
    self.assertEqual(r, ['michele'])

    _, r = self.anagrams2.get_anagrams("michelin")
    self.assertEqual(r, ['michelin'])

    _, r = self.anagrams2.get_anagrams("michelson")
    self.assertEqual(r, ['michelson'])

    _, r = self.anagrams2.get_anagrams("michigan")
    self.assertEqual(r, ['michigan'])

    _, r = self.anagrams2.get_anagrams("mick")
    self.assertEqual(r, ['mick'])

    _, r = self.anagrams2.get_anagrams("mickey")
    self.assertEqual(r, ['mickey'])

    _, r = self.anagrams2.get_anagrams("mickie")
    self.assertEqual(r, ['mickie'])

    _, r = self.anagrams2.get_anagrams("micky")
    self.assertEqual(r, ['micky'])

    _, r = self.anagrams2.get_anagrams("micro")
    self.assertEqual(r, ['micro'])

    _, r = self.anagrams2.get_anagrams("microarchitects")
    self.assertEqual(r, ['microarchitects'])

    _, r = self.anagrams2.get_anagrams("microarchitecture")
    self.assertEqual(r, ['microarchitecture'])

    _, r = self.anagrams2.get_anagrams("microarchitectures")
    self.assertEqual(r, ['microarchitectures'])

    _, r = self.anagrams2.get_anagrams("microbial")
    self.assertEqual(r, ['microbial'])

    _, r = self.anagrams2.get_anagrams("microbicidal")
    self.assertEqual(r, ['microbicidal'])

    _, r = self.anagrams2.get_anagrams("microbicide")
    self.assertEqual(r, ['microbicide'])

    _, r = self.anagrams2.get_anagrams("microcode")
    self.assertEqual(r, ['microcode'])

    _, r = self.anagrams2.get_anagrams("microcoded")
    self.assertEqual(r, ['microcoded'])

    _, r = self.anagrams2.get_anagrams("microcodes")
    self.assertEqual(r, ['microcodes'])

    _, r = self.anagrams2.get_anagrams("microcoding")
    self.assertEqual(r, ['microcoding'])

    _, r = self.anagrams2.get_anagrams("microcomputer")
    self.assertEqual(r, ['microcomputer'])

    _, r = self.anagrams2.get_anagrams("microcomputers")
    self.assertEqual(r, ['microcomputers'])

    _, r = self.anagrams2.get_anagrams("microcosm")
    self.assertEqual(r, ['microcosm'])

    _, r = self.anagrams2.get_anagrams("microcycle")
    self.assertEqual(r, ['microcycle'])

    _, r = self.anagrams2.get_anagrams("microcycles")
    self.assertEqual(r, ['microcycles'])

    _, r = self.anagrams2.get_anagrams("microeconomics")
    self.assertEqual(r, ['microeconomics'])

    _, r = self.anagrams2.get_anagrams("microelectronics")
    self.assertEqual(r, ['microelectronics'])

    _, r = self.anagrams2.get_anagrams("microfilm")
    self.assertEqual(r, ['microfilm'])

    _, r = self.anagrams2.get_anagrams("microfilms")
    self.assertEqual(r, ['microfilms'])

    _, r = self.anagrams2.get_anagrams("microgramming")
    self.assertEqual(r, ['microgramming'])

    _, r = self.anagrams2.get_anagrams("microinstruction")
    self.assertEqual(r, ['microinstruction'])

    _, r = self.anagrams2.get_anagrams("microinstructions")
    self.assertEqual(r, ['microinstructions'])

    _, r = self.anagrams2.get_anagrams("microjump")
    self.assertEqual(r, ['microjump'])

    _, r = self.anagrams2.get_anagrams("microjumps")
    self.assertEqual(r, ['microjumps'])

    _, r = self.anagrams2.get_anagrams("microlevel")
    self.assertEqual(r, ['microlevel'])

    _, r = self.anagrams2.get_anagrams("micron")
    self.assertEqual(r, ['micron'])

    _, r = self.anagrams2.get_anagrams("micronesia")
    self.assertEqual(r, ['micronesia'])

    _, r = self.anagrams2.get_anagrams("micronesian")
    self.assertEqual(r, ['micronesian'])

    _, r = self.anagrams2.get_anagrams("microoperations")
    self.assertEqual(r, ['microoperations'])

    _, r = self.anagrams2.get_anagrams("microphone")
    self.assertEqual(r, ['microphone'])

    _, r = self.anagrams2.get_anagrams("microphones")
    self.assertEqual(r, ['microphones'])

    _, r = self.anagrams2.get_anagrams("microphoning")
    self.assertEqual(r, ['microphoning'])

    _, r = self.anagrams2.get_anagrams("microport")
    self.assertEqual(r, ['microport'])

    _, r = self.anagrams2.get_anagrams("microprocedure")
    self.assertEqual(r, ['microprocedure'])

    _, r = self.anagrams2.get_anagrams("microprocedures")
    self.assertEqual(r, ['microprocedures'])

    _, r = self.anagrams2.get_anagrams("microprocessing")
    self.assertEqual(r, ['microprocessing'])

    _, r = self.anagrams2.get_anagrams("microprocessor")
    self.assertEqual(r, ['microprocessor'])

    _, r = self.anagrams2.get_anagrams("microprocessors")
    self.assertEqual(r, ['microprocessors'])

    _, r = self.anagrams2.get_anagrams("microprogram")
    self.assertEqual(r, ['microprogram'])

    _, r = self.anagrams2.get_anagrams("microprogrammable")
    self.assertEqual(r, ['microprogrammable'])

    _, r = self.anagrams2.get_anagrams("microprogrammed")
    self.assertEqual(r, ['microprogrammed'])

    _, r = self.anagrams2.get_anagrams("microprogrammer")
    self.assertEqual(r, ['microprogrammer'])

    _, r = self.anagrams2.get_anagrams("microprogramming")
    self.assertEqual(r, ['microprogramming'])

    _, r = self.anagrams2.get_anagrams("microprograms")
    self.assertEqual(r, ['microprograms'])

    _, r = self.anagrams2.get_anagrams("micros")
    self.assertEqual(r, ['micros'])

    _, r = self.anagrams2.get_anagrams("microscope")
    self.assertEqual(r, ['microscope'])

    _, r = self.anagrams2.get_anagrams("microscopes")
    self.assertEqual(r, ['microscopes'])

    _, r = self.anagrams2.get_anagrams("microscopic")
    self.assertEqual(r, ['microscopic'])

    _, r = self.anagrams2.get_anagrams("microscopy")
    self.assertEqual(r, ['microscopy'])

    _, r = self.anagrams2.get_anagrams("microsecond")
    self.assertEqual(r, ['microsecond'])

    _, r = self.anagrams2.get_anagrams("microseconds")
    self.assertEqual(r, ['microseconds'])

    _, r = self.anagrams2.get_anagrams("microsoft")
    self.assertEqual(r, ['microsoft'])

    _, r = self.anagrams2.get_anagrams("microstore")
    self.assertEqual(r, ['microstore'])

    _, r = self.anagrams2.get_anagrams("microsystems")
    self.assertEqual(r, ['microsystems'])

    _, r = self.anagrams2.get_anagrams("microvax")
    self.assertEqual(r, ['microvax'])

    _, r = self.anagrams2.get_anagrams("microvaxes")
    self.assertEqual(r, ['microvaxes'])

    _, r = self.anagrams2.get_anagrams("microwave")
    self.assertEqual(r, ['microwave'])

    _, r = self.anagrams2.get_anagrams("microwaves")
    self.assertEqual(r, ['microwaves'])

    _, r = self.anagrams2.get_anagrams("microword")
    self.assertEqual(r, ['microword'])

    _, r = self.anagrams2.get_anagrams("microwords")
    self.assertEqual(r, ['microwords'])

    _, r = self.anagrams2.get_anagrams("mid")
    self.assertEqual(r, ['dim', 'mid'])

    _, r = self.anagrams2.get_anagrams("midas")
    self.assertEqual(r, ['maids', 'midas'])

    _, r = self.anagrams2.get_anagrams("midday")
    self.assertEqual(r, ['midday'])

    _, r = self.anagrams2.get_anagrams("middle")
    self.assertEqual(r, ['middle'])

    _, r = self.anagrams2.get_anagrams("middlebury")
    self.assertEqual(r, ['middlebury'])

    _, r = self.anagrams2.get_anagrams("middleman")
    self.assertEqual(r, ['middleman'])

    _, r = self.anagrams2.get_anagrams("middlemen")
    self.assertEqual(r, ['middlemen'])

    _, r = self.anagrams2.get_anagrams("middles")
    self.assertEqual(r, ['middles'])

    _, r = self.anagrams2.get_anagrams("middlesex")
    self.assertEqual(r, ['middlesex'])

    _, r = self.anagrams2.get_anagrams("middleton")
    self.assertEqual(r, ['middleton'])

    _, r = self.anagrams2.get_anagrams("middletown")
    self.assertEqual(r, ['middletown'])

    _, r = self.anagrams2.get_anagrams("middling")
    self.assertEqual(r, ['middling'])

    _, r = self.anagrams2.get_anagrams("midget")
    self.assertEqual(r, ['midget'])

    _, r = self.anagrams2.get_anagrams("midlandize")
    self.assertEqual(r, ['midlandize'])

    _, r = self.anagrams2.get_anagrams("midlandizes")
    self.assertEqual(r, ['midlandizes'])

    _, r = self.anagrams2.get_anagrams("midnight")
    self.assertEqual(r, ['midnight'])

    _, r = self.anagrams2.get_anagrams("midnights")
    self.assertEqual(r, ['midnights'])

    _, r = self.anagrams2.get_anagrams("midpoint")
    self.assertEqual(r, ['midpoint'])

    _, r = self.anagrams2.get_anagrams("midpoints")
    self.assertEqual(r, ['midpoints'])

    _, r = self.anagrams2.get_anagrams("midrange")
    self.assertEqual(r, ['dreaming', 'midrange'])

    _, r = self.anagrams2.get_anagrams("midscale")
    self.assertEqual(r, ['decimals', 'midscale'])

    _, r = self.anagrams2.get_anagrams("midsection")
    self.assertEqual(r, ['midsection'])

    _, r = self.anagrams2.get_anagrams("midshipman")
    self.assertEqual(r, ['midshipman'])

    _, r = self.anagrams2.get_anagrams("midshipmen")
    self.assertEqual(r, ['midshipmen'])

    _, r = self.anagrams2.get_anagrams("midst")
    self.assertEqual(r, ['midst'])

    _, r = self.anagrams2.get_anagrams("midstream")
    self.assertEqual(r, ['midstream'])

    _, r = self.anagrams2.get_anagrams("midsts")
    self.assertEqual(r, ['midsts'])

    _, r = self.anagrams2.get_anagrams("midsummer")
    self.assertEqual(r, ['midsummer'])

    _, r = self.anagrams2.get_anagrams("midway")
    self.assertEqual(r, ['midway'])

    _, r = self.anagrams2.get_anagrams("midweek")
    self.assertEqual(r, ['midweek'])

    _, r = self.anagrams2.get_anagrams("midwest")
    self.assertEqual(r, ['midwest'])

    _, r = self.anagrams2.get_anagrams("midwestern")
    self.assertEqual(r, ['midwestern'])

    _, r = self.anagrams2.get_anagrams("midwesterner")
    self.assertEqual(r, ['midwesterner'])

    _, r = self.anagrams2.get_anagrams("midwesterners")
    self.assertEqual(r, ['midwesterners'])

    _, r = self.anagrams2.get_anagrams("midwife")
    self.assertEqual(r, ['midwife'])

    _, r = self.anagrams2.get_anagrams("midwinter")
    self.assertEqual(r, ['midwinter'])

    _, r = self.anagrams2.get_anagrams("midwives")
    self.assertEqual(r, ['midwives'])

    _, r = self.anagrams2.get_anagrams("mien")
    self.assertEqual(r, ['mien', 'mine'])

    _, r = self.anagrams2.get_anagrams("might")
    self.assertEqual(r, ['might'])

    _, r = self.anagrams2.get_anagrams("mightier")
    self.assertEqual(r, ['mightier'])

    _, r = self.anagrams2.get_anagrams("mightiest")
    self.assertEqual(r, ['mightiest'])

    _, r = self.anagrams2.get_anagrams("mightily")
    self.assertEqual(r, ['mightily'])

    _, r = self.anagrams2.get_anagrams("mightiness")
    self.assertEqual(r, ['mightiness'])

    _, r = self.anagrams2.get_anagrams("mighty")
    self.assertEqual(r, ['mighty'])

    _, r = self.anagrams2.get_anagrams("migrant")
    self.assertEqual(r, ['migrant'])

    _, r = self.anagrams2.get_anagrams("migrate")
    self.assertEqual(r, ['migrate'])

    _, r = self.anagrams2.get_anagrams("migrated")
    self.assertEqual(r, ['migrated'])

    _, r = self.anagrams2.get_anagrams("migrates")
    self.assertEqual(r, ['migrates'])

    _, r = self.anagrams2.get_anagrams("migrating")
    self.assertEqual(r, ['migrating'])

    _, r = self.anagrams2.get_anagrams("migration")
    self.assertEqual(r, ['migration'])

    _, r = self.anagrams2.get_anagrams("migrations")
    self.assertEqual(r, ['migrations'])

    _, r = self.anagrams2.get_anagrams("migratory")
    self.assertEqual(r, ['migratory'])

    _, r = self.anagrams2.get_anagrams("miguel")
    self.assertEqual(r, ['miguel'])

    _, r = self.anagrams2.get_anagrams("mike")
    self.assertEqual(r, ['mike'])

    _, r = self.anagrams2.get_anagrams("mikhail")
    self.assertEqual(r, ['mikhail'])

    _, r = self.anagrams2.get_anagrams("mikoyan")
    self.assertEqual(r, ['mikoyan'])

    _, r = self.anagrams2.get_anagrams("milan")
    self.assertEqual(r, ['liman', 'milan'])

    _, r = self.anagrams2.get_anagrams("mild")
    self.assertEqual(r, ['mild'])

    _, r = self.anagrams2.get_anagrams("milder")
    self.assertEqual(r, ['milder'])

    _, r = self.anagrams2.get_anagrams("mildest")
    self.assertEqual(r, ['mildest'])

    _, r = self.anagrams2.get_anagrams("mildew")
    self.assertEqual(r, ['mildew'])

    _, r = self.anagrams2.get_anagrams("mildly")
    self.assertEqual(r, ['mildly'])

    _, r = self.anagrams2.get_anagrams("mildness")
    self.assertEqual(r, ['mildness', 'mindless'])

    _, r = self.anagrams2.get_anagrams("mildred")
    self.assertEqual(r, ['mildred'])

    _, r = self.anagrams2.get_anagrams("mile")
    self.assertEqual(r, ['emil', 'lime', 'mile'])

    _, r = self.anagrams2.get_anagrams("mileage")
    self.assertEqual(r, ['mileage'])

    _, r = self.anagrams2.get_anagrams("miles")
    self.assertEqual(r, ['limes', 'miles', 'slime', 'smile'])

    _, r = self.anagrams2.get_anagrams("milestone")
    self.assertEqual(r, ['limestone', 'milestone'])

    _, r = self.anagrams2.get_anagrams("milestones")
    self.assertEqual(r, ['milestones'])

    _, r = self.anagrams2.get_anagrams("militant")
    self.assertEqual(r, ['militant'])

    _, r = self.anagrams2.get_anagrams("militantly")
    self.assertEqual(r, ['militantly'])

    _, r = self.anagrams2.get_anagrams("militarily")
    self.assertEqual(r, ['militarily'])

    _, r = self.anagrams2.get_anagrams("militarism")
    self.assertEqual(r, ['militarism'])

    _, r = self.anagrams2.get_anagrams("military")
    self.assertEqual(r, ['military'])

    _, r = self.anagrams2.get_anagrams("militia")
    self.assertEqual(r, ['militia'])

    _, r = self.anagrams2.get_anagrams("milk")
    self.assertEqual(r, ['milk'])

    _, r = self.anagrams2.get_anagrams("milked")
    self.assertEqual(r, ['milked'])

    _, r = self.anagrams2.get_anagrams("milker")
    self.assertEqual(r, ['milker'])

    _, r = self.anagrams2.get_anagrams("milkers")
    self.assertEqual(r, ['milkers'])

    _, r = self.anagrams2.get_anagrams("milkiness")
    self.assertEqual(r, ['milkiness'])

    _, r = self.anagrams2.get_anagrams("milking")
    self.assertEqual(r, ['milking'])

    _, r = self.anagrams2.get_anagrams("milkmaid")
    self.assertEqual(r, ['milkmaid'])

    _, r = self.anagrams2.get_anagrams("milkmaids")
    self.assertEqual(r, ['milkmaids'])

    _, r = self.anagrams2.get_anagrams("milks")
    self.assertEqual(r, ['milks'])

    _, r = self.anagrams2.get_anagrams("milky")
    self.assertEqual(r, ['milky'])

    _, r = self.anagrams2.get_anagrams("mill")
    self.assertEqual(r, ['mill'])

    _, r = self.anagrams2.get_anagrams("millard")
    self.assertEqual(r, ['millard'])

    _, r = self.anagrams2.get_anagrams("milled")
    self.assertEqual(r, ['milled'])

    _, r = self.anagrams2.get_anagrams("millennium")
    self.assertEqual(r, ['millennium'])

    _, r = self.anagrams2.get_anagrams("miller")
    self.assertEqual(r, ['miller'])

    _, r = self.anagrams2.get_anagrams("millet")
    self.assertEqual(r, ['millet'])

    _, r = self.anagrams2.get_anagrams("milliammeter")
    self.assertEqual(r, ['milliammeter'])

    _, r = self.anagrams2.get_anagrams("milliampere")
    self.assertEqual(r, ['milliampere'])

    _, r = self.anagrams2.get_anagrams("millie")
    self.assertEqual(r, ['millie'])

    _, r = self.anagrams2.get_anagrams("millijoule")
    self.assertEqual(r, ['millijoule'])

    _, r = self.anagrams2.get_anagrams("millikan")
    self.assertEqual(r, ['millikan'])

    _, r = self.anagrams2.get_anagrams("millimeter")
    self.assertEqual(r, ['millimeter'])

    _, r = self.anagrams2.get_anagrams("millimeters")
    self.assertEqual(r, ['millimeters'])

    _, r = self.anagrams2.get_anagrams("millinery")
    self.assertEqual(r, ['millinery'])

    _, r = self.anagrams2.get_anagrams("milling")
    self.assertEqual(r, ['milling'])

    _, r = self.anagrams2.get_anagrams("millington")
    self.assertEqual(r, ['millington'])

    _, r = self.anagrams2.get_anagrams("million")
    self.assertEqual(r, ['million'])

    _, r = self.anagrams2.get_anagrams("millionaire")
    self.assertEqual(r, ['millionaire'])

    _, r = self.anagrams2.get_anagrams("millionaires")
    self.assertEqual(r, ['millionaires'])

    _, r = self.anagrams2.get_anagrams("millions")
    self.assertEqual(r, ['millions'])

    _, r = self.anagrams2.get_anagrams("millionth")
    self.assertEqual(r, ['millionth'])

    _, r = self.anagrams2.get_anagrams("millipede")
    self.assertEqual(r, ['millipede'])

    _, r = self.anagrams2.get_anagrams("millipedes")
    self.assertEqual(r, ['millipedes'])

    _, r = self.anagrams2.get_anagrams("millisecond")
    self.assertEqual(r, ['millisecond'])

    _, r = self.anagrams2.get_anagrams("milliseconds")
    self.assertEqual(r, ['milliseconds'])

    _, r = self.anagrams2.get_anagrams("millivolt")
    self.assertEqual(r, ['millivolt'])

    _, r = self.anagrams2.get_anagrams("millivoltmeter")
    self.assertEqual(r, ['millivoltmeter'])

    _, r = self.anagrams2.get_anagrams("milliwatt")
    self.assertEqual(r, ['milliwatt'])

    _, r = self.anagrams2.get_anagrams("mills")
    self.assertEqual(r, ['mills'])

    _, r = self.anagrams2.get_anagrams("millstone")
    self.assertEqual(r, ['millstone'])

    _, r = self.anagrams2.get_anagrams("millstones")
    self.assertEqual(r, ['millstones'])

    _, r = self.anagrams2.get_anagrams("milne")
    self.assertEqual(r, ['milne'])

    _, r = self.anagrams2.get_anagrams("milquetoast")
    self.assertEqual(r, ['milquetoast'])

    _, r = self.anagrams2.get_anagrams("milquetoasts")
    self.assertEqual(r, ['milquetoasts'])

    _, r = self.anagrams2.get_anagrams("milton")
    self.assertEqual(r, ['milton'])

    _, r = self.anagrams2.get_anagrams("miltonian")
    self.assertEqual(r, ['miltonian'])

    _, r = self.anagrams2.get_anagrams("miltonic")
    self.assertEqual(r, ['miltonic'])

    _, r = self.anagrams2.get_anagrams("miltonism")
    self.assertEqual(r, ['miltonism'])

    _, r = self.anagrams2.get_anagrams("miltonist")
    self.assertEqual(r, ['miltonist'])

    _, r = self.anagrams2.get_anagrams("miltonize")
    self.assertEqual(r, ['miltonize'])

    _, r = self.anagrams2.get_anagrams("miltonized")
    self.assertEqual(r, ['miltonized'])

    _, r = self.anagrams2.get_anagrams("miltonizes")
    self.assertEqual(r, ['miltonizes'])

    _, r = self.anagrams2.get_anagrams("miltonizing")
    self.assertEqual(r, ['miltonizing'])

    _, r = self.anagrams2.get_anagrams("milwaukee")
    self.assertEqual(r, ['milwaukee'])

    _, r = self.anagrams2.get_anagrams("mimeograph")
    self.assertEqual(r, ['mimeograph'])

    _, r = self.anagrams2.get_anagrams("mimi")
    self.assertEqual(r, ['mimi'])

    _, r = self.anagrams2.get_anagrams("mimic")
    self.assertEqual(r, ['mimic'])

    _, r = self.anagrams2.get_anagrams("mimicked")
    self.assertEqual(r, ['mimicked'])

    _, r = self.anagrams2.get_anagrams("mimicking")
    self.assertEqual(r, ['mimicking'])

    _, r = self.anagrams2.get_anagrams("mimics")
    self.assertEqual(r, ['mimics'])

    _, r = self.anagrams2.get_anagrams("minaret")
    self.assertEqual(r, ['minaret', 'raiment'])

    _, r = self.anagrams2.get_anagrams("mince")
    self.assertEqual(r, ['mince'])

    _, r = self.anagrams2.get_anagrams("minced")
    self.assertEqual(r, ['minced'])

    _, r = self.anagrams2.get_anagrams("mincemeat")
    self.assertEqual(r, ['mincemeat'])

    _, r = self.anagrams2.get_anagrams("minces")
    self.assertEqual(r, ['minces'])

    _, r = self.anagrams2.get_anagrams("mincing")
    self.assertEqual(r, ['mincing'])

    _, r = self.anagrams2.get_anagrams("mind")
    self.assertEqual(r, ['mind'])

    _, r = self.anagrams2.get_anagrams("mindanao")
    self.assertEqual(r, ['mindanao'])

    _, r = self.anagrams2.get_anagrams("minded")
    self.assertEqual(r, ['minded'])

    _, r = self.anagrams2.get_anagrams("mindful")
    self.assertEqual(r, ['mindful'])

    _, r = self.anagrams2.get_anagrams("mindfully")
    self.assertEqual(r, ['mindfully'])

    _, r = self.anagrams2.get_anagrams("mindfulness")
    self.assertEqual(r, ['mindfulness'])

    _, r = self.anagrams2.get_anagrams("minding")
    self.assertEqual(r, ['minding'])

    _, r = self.anagrams2.get_anagrams("mindless")
    self.assertEqual(r, ['mildness', 'mindless'])

    _, r = self.anagrams2.get_anagrams("mindlessly")
    self.assertEqual(r, ['mindlessly'])

    _, r = self.anagrams2.get_anagrams("minds")
    self.assertEqual(r, ['minds'])

    _, r = self.anagrams2.get_anagrams("mine")
    self.assertEqual(r, ['mien', 'mine'])

    _, r = self.anagrams2.get_anagrams("mined")
    self.assertEqual(r, ['mined'])

    _, r = self.anagrams2.get_anagrams("minefield")
    self.assertEqual(r, ['minefield'])

    _, r = self.anagrams2.get_anagrams("miner")
    self.assertEqual(r, ['miner'])

    _, r = self.anagrams2.get_anagrams("mineral")
    self.assertEqual(r, ['mineral'])

    _, r = self.anagrams2.get_anagrams("minerals")
    self.assertEqual(r, ['minerals'])

    _, r = self.anagrams2.get_anagrams("miners")
    self.assertEqual(r, ['miners'])

    _, r = self.anagrams2.get_anagrams("minerva")
    self.assertEqual(r, ['minerva'])

    _, r = self.anagrams2.get_anagrams("mines")
    self.assertEqual(r, ['mines'])

    _, r = self.anagrams2.get_anagrams("minesweeper")
    self.assertEqual(r, ['minesweeper'])

    _, r = self.anagrams2.get_anagrams("mingle")
    self.assertEqual(r, ['mingle'])

    _, r = self.anagrams2.get_anagrams("mingled")
    self.assertEqual(r, ['mingled'])

    _, r = self.anagrams2.get_anagrams("mingles")
    self.assertEqual(r, ['mingles'])

    _, r = self.anagrams2.get_anagrams("mingling")
    self.assertEqual(r, ['mingling'])

    _, r = self.anagrams2.get_anagrams("mini")
    self.assertEqual(r, ['mini'])

    _, r = self.anagrams2.get_anagrams("miniature")
    self.assertEqual(r, ['miniature'])

    _, r = self.anagrams2.get_anagrams("miniatures")
    self.assertEqual(r, ['miniatures'])

    _, r = self.anagrams2.get_anagrams("miniaturization")
    self.assertEqual(r, ['miniaturization'])

    _, r = self.anagrams2.get_anagrams("miniaturize")
    self.assertEqual(r, ['miniaturize'])

    _, r = self.anagrams2.get_anagrams("miniaturized")
    self.assertEqual(r, ['miniaturized'])

    _, r = self.anagrams2.get_anagrams("miniaturizes")
    self.assertEqual(r, ['miniaturizes'])

    _, r = self.anagrams2.get_anagrams("miniaturizing")
    self.assertEqual(r, ['miniaturizing'])

    _, r = self.anagrams2.get_anagrams("minicomputer")
    self.assertEqual(r, ['minicomputer'])

    _, r = self.anagrams2.get_anagrams("minicomputers")
    self.assertEqual(r, ['minicomputers'])

    _, r = self.anagrams2.get_anagrams("minima")
    self.assertEqual(r, ['minima'])

    _, r = self.anagrams2.get_anagrams("minimal")
    self.assertEqual(r, ['minimal'])

    _, r = self.anagrams2.get_anagrams("minimally")
    self.assertEqual(r, ['minimally'])

    _, r = self.anagrams2.get_anagrams("minimax")
    self.assertEqual(r, ['minimax'])

    _, r = self.anagrams2.get_anagrams("minimization")
    self.assertEqual(r, ['minimization'])

    _, r = self.anagrams2.get_anagrams("minimizations")
    self.assertEqual(r, ['minimizations'])

    _, r = self.anagrams2.get_anagrams("minimize")
    self.assertEqual(r, ['minimize'])

    _, r = self.anagrams2.get_anagrams("minimized")
    self.assertEqual(r, ['minimized'])

    _, r = self.anagrams2.get_anagrams("minimizer")
    self.assertEqual(r, ['minimizer'])

    _, r = self.anagrams2.get_anagrams("minimizers")
    self.assertEqual(r, ['minimizers'])

    _, r = self.anagrams2.get_anagrams("minimizes")
    self.assertEqual(r, ['minimizes'])

    _, r = self.anagrams2.get_anagrams("minimizing")
    self.assertEqual(r, ['minimizing'])

    _, r = self.anagrams2.get_anagrams("minimum")
    self.assertEqual(r, ['minimum'])

    _, r = self.anagrams2.get_anagrams("mining")
    self.assertEqual(r, ['mining'])

    _, r = self.anagrams2.get_anagrams("minion")
    self.assertEqual(r, ['minion'])

    _, r = self.anagrams2.get_anagrams("minis")
    self.assertEqual(r, ['minis'])

    _, r = self.anagrams2.get_anagrams("minister")
    self.assertEqual(r, ['minister'])

    _, r = self.anagrams2.get_anagrams("ministered")
    self.assertEqual(r, ['ministered'])

    _, r = self.anagrams2.get_anagrams("ministering")
    self.assertEqual(r, ['ministering'])

    _, r = self.anagrams2.get_anagrams("ministers")
    self.assertEqual(r, ['ministers'])

    _, r = self.anagrams2.get_anagrams("ministries")
    self.assertEqual(r, ['ministries'])

    _, r = self.anagrams2.get_anagrams("ministry")
    self.assertEqual(r, ['ministry'])

    _, r = self.anagrams2.get_anagrams("mink")
    self.assertEqual(r, ['mink'])

    _, r = self.anagrams2.get_anagrams("minks")
    self.assertEqual(r, ['minks', 'minsk'])

    _, r = self.anagrams2.get_anagrams("minneapolis")
    self.assertEqual(r, ['minneapolis'])

    _, r = self.anagrams2.get_anagrams("minnesota")
    self.assertEqual(r, ['minnesota'])

    _, r = self.anagrams2.get_anagrams("minnie")
    self.assertEqual(r, ['minnie'])

    _, r = self.anagrams2.get_anagrams("minnow")
    self.assertEqual(r, ['minnow'])

    _, r = self.anagrams2.get_anagrams("minnows")
    self.assertEqual(r, ['minnows'])

    _, r = self.anagrams2.get_anagrams("minoan")
    self.assertEqual(r, ['minoan'])

    _, r = self.anagrams2.get_anagrams("minor")
    self.assertEqual(r, ['minor'])

    _, r = self.anagrams2.get_anagrams("minoring")
    self.assertEqual(r, ['minoring'])

    _, r = self.anagrams2.get_anagrams("minorities")
    self.assertEqual(r, ['minorities'])

    _, r = self.anagrams2.get_anagrams("minority")
    self.assertEqual(r, ['minority'])

    _, r = self.anagrams2.get_anagrams("minors")
    self.assertEqual(r, ['minors'])

    _, r = self.anagrams2.get_anagrams("minos")
    self.assertEqual(r, ['minos', 'simon'])

    _, r = self.anagrams2.get_anagrams("minotaur")
    self.assertEqual(r, ['minotaur'])

    _, r = self.anagrams2.get_anagrams("minsk")
    self.assertEqual(r, ['minks', 'minsk'])

    _, r = self.anagrams2.get_anagrams("minsky")
    self.assertEqual(r, ['minsky'])

    _, r = self.anagrams2.get_anagrams("minstrel")
    self.assertEqual(r, ['minstrel'])

    _, r = self.anagrams2.get_anagrams("minstrels")
    self.assertEqual(r, ['minstrels'])

    _, r = self.anagrams2.get_anagrams("mint")
    self.assertEqual(r, ['mint'])

    _, r = self.anagrams2.get_anagrams("minted")
    self.assertEqual(r, ['minted'])

    _, r = self.anagrams2.get_anagrams("minter")
    self.assertEqual(r, ['minter'])

    _, r = self.anagrams2.get_anagrams("minting")
    self.assertEqual(r, ['minting'])

    _, r = self.anagrams2.get_anagrams("mints")
    self.assertEqual(r, ['mints'])

    _, r = self.anagrams2.get_anagrams("minuend")
    self.assertEqual(r, ['minuend'])

    _, r = self.anagrams2.get_anagrams("minuet")
    self.assertEqual(r, ['minuet', 'minute'])

    _, r = self.anagrams2.get_anagrams("minus")
    self.assertEqual(r, ['minus'])

    _, r = self.anagrams2.get_anagrams("minuscule")
    self.assertEqual(r, ['minuscule'])

    _, r = self.anagrams2.get_anagrams("minute")
    self.assertEqual(r, ['minuet', 'minute'])

    _, r = self.anagrams2.get_anagrams("minutely")
    self.assertEqual(r, ['minutely', 'untimely'])

    _, r = self.anagrams2.get_anagrams("minuteman")
    self.assertEqual(r, ['minuteman'])

    _, r = self.anagrams2.get_anagrams("minutemen")
    self.assertEqual(r, ['minutemen'])

    _, r = self.anagrams2.get_anagrams("minuteness")
    self.assertEqual(r, ['minuteness'])

    _, r = self.anagrams2.get_anagrams("minuter")
    self.assertEqual(r, ['minuter', 'runtime'])

    _, r = self.anagrams2.get_anagrams("minutes")
    self.assertEqual(r, ['minutes'])

    _, r = self.anagrams2.get_anagrams("miocene")
    self.assertEqual(r, ['miocene'])

    _, r = self.anagrams2.get_anagrams("mips")
    self.assertEqual(r, ['imps', 'mips'])

    _, r = self.anagrams2.get_anagrams("mira")
    self.assertEqual(r, ['irma', 'mira'])

    _, r = self.anagrams2.get_anagrams("miracle")
    self.assertEqual(r, ['miracle', 'reclaim'])

    _, r = self.anagrams2.get_anagrams("miracles")
    self.assertEqual(r, ['miracles', 'reclaims'])

    _, r = self.anagrams2.get_anagrams("miraculous")
    self.assertEqual(r, ['miraculous'])

    _, r = self.anagrams2.get_anagrams("miraculously")
    self.assertEqual(r, ['miraculously'])

    _, r = self.anagrams2.get_anagrams("mirage")
    self.assertEqual(r, ['mirage'])

    _, r = self.anagrams2.get_anagrams("miranda")
    self.assertEqual(r, ['miranda'])

    _, r = self.anagrams2.get_anagrams("mire")
    self.assertEqual(r, ['mire', 'rime'])

    _, r = self.anagrams2.get_anagrams("mired")
    self.assertEqual(r, ['mired'])

    _, r = self.anagrams2.get_anagrams("mires")
    self.assertEqual(r, ['mires', 'miser'])

    _, r = self.anagrams2.get_anagrams("mirfak")
    self.assertEqual(r, ['mirfak'])

    _, r = self.anagrams2.get_anagrams("miriam")
    self.assertEqual(r, ['miriam'])

    _, r = self.anagrams2.get_anagrams("mirror")
    self.assertEqual(r, ['mirror'])

    _, r = self.anagrams2.get_anagrams("mirrored")
    self.assertEqual(r, ['mirrored'])

    _, r = self.anagrams2.get_anagrams("mirroring")
    self.assertEqual(r, ['mirroring'])

    _, r = self.anagrams2.get_anagrams("mirrors")
    self.assertEqual(r, ['mirrors'])

    _, r = self.anagrams2.get_anagrams("mirth")
    self.assertEqual(r, ['mirth'])

    _, r = self.anagrams2.get_anagrams("misanthrope")
    self.assertEqual(r, ['misanthrope'])

    _, r = self.anagrams2.get_anagrams("misbehaving")
    self.assertEqual(r, ['misbehaving'])

    _, r = self.anagrams2.get_anagrams("miscalculation")
    self.assertEqual(r, ['miscalculation'])

    _, r = self.anagrams2.get_anagrams("miscalculations")
    self.assertEqual(r, ['miscalculations'])

    _, r = self.anagrams2.get_anagrams("miscarriage")
    self.assertEqual(r, ['miscarriage'])

    _, r = self.anagrams2.get_anagrams("miscarry")
    self.assertEqual(r, ['miscarry'])

    _, r = self.anagrams2.get_anagrams("miscegenation")
    self.assertEqual(r, ['miscegenation'])

    _, r = self.anagrams2.get_anagrams("miscellaneous")
    self.assertEqual(r, ['miscellaneous'])

    _, r = self.anagrams2.get_anagrams("miscellaneously")
    self.assertEqual(r, ['miscellaneously'])

    _, r = self.anagrams2.get_anagrams("miscellaneousness")
    self.assertEqual(r, ['miscellaneousness'])

    _, r = self.anagrams2.get_anagrams("mischief")
    self.assertEqual(r, ['mischief'])

    _, r = self.anagrams2.get_anagrams("mischievous")
    self.assertEqual(r, ['mischievous'])

    _, r = self.anagrams2.get_anagrams("mischievously")
    self.assertEqual(r, ['mischievously'])

    _, r = self.anagrams2.get_anagrams("mischievousness")
    self.assertEqual(r, ['mischievousness'])

    _, r = self.anagrams2.get_anagrams("misconception")
    self.assertEqual(r, ['misconception'])

    _, r = self.anagrams2.get_anagrams("misconceptions")
    self.assertEqual(r, ['misconceptions'])

    _, r = self.anagrams2.get_anagrams("misconduct")
    self.assertEqual(r, ['misconduct'])

    _, r = self.anagrams2.get_anagrams("misconstrue")
    self.assertEqual(r, ['misconstrue'])

    _, r = self.anagrams2.get_anagrams("misconstrued")
    self.assertEqual(r, ['misconstrued'])

    _, r = self.anagrams2.get_anagrams("misconstrues")
    self.assertEqual(r, ['misconstrues'])

    _, r = self.anagrams2.get_anagrams("misdemeanors")
    self.assertEqual(r, ['misdemeanors'])

    _, r = self.anagrams2.get_anagrams("miser")
    self.assertEqual(r, ['mires', 'miser'])

    _, r = self.anagrams2.get_anagrams("miserable")
    self.assertEqual(r, ['miserable'])

    _, r = self.anagrams2.get_anagrams("miserableness")
    self.assertEqual(r, ['miserableness'])

    _, r = self.anagrams2.get_anagrams("miserably")
    self.assertEqual(r, ['miserably'])

    _, r = self.anagrams2.get_anagrams("miseries")
    self.assertEqual(r, ['miseries'])

    _, r = self.anagrams2.get_anagrams("miserly")
    self.assertEqual(r, ['miserly'])

    _, r = self.anagrams2.get_anagrams("misers")
    self.assertEqual(r, ['misers', 'remiss'])

    _, r = self.anagrams2.get_anagrams("misery")
    self.assertEqual(r, ['misery'])

    _, r = self.anagrams2.get_anagrams("misfit")
    self.assertEqual(r, ['misfit'])

    _, r = self.anagrams2.get_anagrams("misfits")
    self.assertEqual(r, ['misfits'])

    _, r = self.anagrams2.get_anagrams("misfortune")
    self.assertEqual(r, ['misfortune'])

    _, r = self.anagrams2.get_anagrams("misfortunes")
    self.assertEqual(r, ['misfortunes'])

    _, r = self.anagrams2.get_anagrams("misgiving")
    self.assertEqual(r, ['misgiving'])

    _, r = self.anagrams2.get_anagrams("misgivings")
    self.assertEqual(r, ['misgivings'])

    _, r = self.anagrams2.get_anagrams("misguided")
    self.assertEqual(r, ['misguided'])

    _, r = self.anagrams2.get_anagrams("mishap")
    self.assertEqual(r, ['mishap'])

    _, r = self.anagrams2.get_anagrams("mishaps")
    self.assertEqual(r, ['mishaps'])

    _, r = self.anagrams2.get_anagrams("misinformed")
    self.assertEqual(r, ['misinformed'])

    _, r = self.anagrams2.get_anagrams("misjudged")
    self.assertEqual(r, ['misjudged'])

    _, r = self.anagrams2.get_anagrams("misjudgment")
    self.assertEqual(r, ['misjudgment'])

    _, r = self.anagrams2.get_anagrams("mislead")
    self.assertEqual(r, ['mislead'])

    _, r = self.anagrams2.get_anagrams("misleading")
    self.assertEqual(r, ['misleading'])

    _, r = self.anagrams2.get_anagrams("misleads")
    self.assertEqual(r, ['misleads'])

    _, r = self.anagrams2.get_anagrams("misled")
    self.assertEqual(r, ['misled', 'slimed', 'smiled'])

    _, r = self.anagrams2.get_anagrams("mismanagement")
    self.assertEqual(r, ['mismanagement'])

    _, r = self.anagrams2.get_anagrams("mismatch")
    self.assertEqual(r, ['mismatch'])

    _, r = self.anagrams2.get_anagrams("mismatched")
    self.assertEqual(r, ['mismatched'])

    _, r = self.anagrams2.get_anagrams("mismatches")
    self.assertEqual(r, ['mismatches'])

    _, r = self.anagrams2.get_anagrams("mismatching")
    self.assertEqual(r, ['mismatching'])

    _, r = self.anagrams2.get_anagrams("misnomer")
    self.assertEqual(r, ['misnomer'])

    _, r = self.anagrams2.get_anagrams("misplace")
    self.assertEqual(r, ['misplace'])

    _, r = self.anagrams2.get_anagrams("misplaced")
    self.assertEqual(r, ['misplaced'])

    _, r = self.anagrams2.get_anagrams("misplaces")
    self.assertEqual(r, ['misplaces'])

    _, r = self.anagrams2.get_anagrams("misplacing")
    self.assertEqual(r, ['misplacing'])

    _, r = self.anagrams2.get_anagrams("mispronunciation")
    self.assertEqual(r, ['mispronunciation'])

    _, r = self.anagrams2.get_anagrams("misrepresentation")
    self.assertEqual(r, ['misrepresentation'])

    _, r = self.anagrams2.get_anagrams("misrepresentations")
    self.assertEqual(r, ['misrepresentations'])

    _, r = self.anagrams2.get_anagrams("miss")
    self.assertEqual(r, ['miss', 'sims'])

    _, r = self.anagrams2.get_anagrams("missed")
    self.assertEqual(r, ['missed'])

    _, r = self.anagrams2.get_anagrams("misses")
    self.assertEqual(r, ['misses'])

    _, r = self.anagrams2.get_anagrams("misshapen")
    self.assertEqual(r, ['misshapen'])

    _, r = self.anagrams2.get_anagrams("missile")
    self.assertEqual(r, ['missile'])

    _, r = self.anagrams2.get_anagrams("missiles")
    self.assertEqual(r, ['missiles'])

    _, r = self.anagrams2.get_anagrams("missing")
    self.assertEqual(r, ['missing'])

    _, r = self.anagrams2.get_anagrams("mission")
    self.assertEqual(r, ['mission'])

    _, r = self.anagrams2.get_anagrams("missionaries")
    self.assertEqual(r, ['missionaries'])

    _, r = self.anagrams2.get_anagrams("missionary")
    self.assertEqual(r, ['missionary'])

    _, r = self.anagrams2.get_anagrams("missioner")
    self.assertEqual(r, ['missioner', 'remission'])

    _, r = self.anagrams2.get_anagrams("missions")
    self.assertEqual(r, ['missions'])

    _, r = self.anagrams2.get_anagrams("mississippi")
    self.assertEqual(r, ['mississippi'])

    _, r = self.anagrams2.get_anagrams("mississippian")
    self.assertEqual(r, ['mississippian'])

    _, r = self.anagrams2.get_anagrams("mississippians")
    self.assertEqual(r, ['mississippians'])

    _, r = self.anagrams2.get_anagrams("missive")
    self.assertEqual(r, ['missive'])

    _, r = self.anagrams2.get_anagrams("missoula")
    self.assertEqual(r, ['missoula'])

    _, r = self.anagrams2.get_anagrams("missouri")
    self.assertEqual(r, ['missouri'])

    _, r = self.anagrams2.get_anagrams("misspell")
    self.assertEqual(r, ['misspell'])

    _, r = self.anagrams2.get_anagrams("misspelled")
    self.assertEqual(r, ['misspelled'])

    _, r = self.anagrams2.get_anagrams("misspelling")
    self.assertEqual(r, ['misspelling'])

    _, r = self.anagrams2.get_anagrams("misspellings")
    self.assertEqual(r, ['misspellings'])

    _, r = self.anagrams2.get_anagrams("misspells")
    self.assertEqual(r, ['misspells'])

    _, r = self.anagrams2.get_anagrams("missy")
    self.assertEqual(r, ['missy'])

    _, r = self.anagrams2.get_anagrams("mist")
    self.assertEqual(r, ['mist', 'tims'])

    _, r = self.anagrams2.get_anagrams("mistakable")
    self.assertEqual(r, ['mistakable'])

    _, r = self.anagrams2.get_anagrams("mistake")
    self.assertEqual(r, ['mistake'])

    _, r = self.anagrams2.get_anagrams("mistaken")
    self.assertEqual(r, ['mistaken'])

    _, r = self.anagrams2.get_anagrams("mistakenly")
    self.assertEqual(r, ['mistakenly'])

    _, r = self.anagrams2.get_anagrams("mistakes")
    self.assertEqual(r, ['mistakes'])

    _, r = self.anagrams2.get_anagrams("mistaking")
    self.assertEqual(r, ['mistaking'])

    _, r = self.anagrams2.get_anagrams("misted")
    self.assertEqual(r, ['misted'])

    _, r = self.anagrams2.get_anagrams("mister")
    self.assertEqual(r, ['merits', 'mister', 'mitres', 'timers'])

    _, r = self.anagrams2.get_anagrams("misters")
    self.assertEqual(r, ['misters'])

    _, r = self.anagrams2.get_anagrams("mistiness")
    self.assertEqual(r, ['mistiness'])

    _, r = self.anagrams2.get_anagrams("misting")
    self.assertEqual(r, ['misting', 'timings'])

    _, r = self.anagrams2.get_anagrams("mistletoe")
    self.assertEqual(r, ['mistletoe'])

    _, r = self.anagrams2.get_anagrams("mistress")
    self.assertEqual(r, ['mistress'])

    _, r = self.anagrams2.get_anagrams("mistrust")
    self.assertEqual(r, ['mistrust'])

    _, r = self.anagrams2.get_anagrams("mistrusted")
    self.assertEqual(r, ['mistrusted'])

    _, r = self.anagrams2.get_anagrams("mists")
    self.assertEqual(r, ['mists'])

    _, r = self.anagrams2.get_anagrams("misty")
    self.assertEqual(r, ['misty'])

    _, r = self.anagrams2.get_anagrams("mistype")
    self.assertEqual(r, ['mistype'])

    _, r = self.anagrams2.get_anagrams("mistyped")
    self.assertEqual(r, ['mistyped'])

    _, r = self.anagrams2.get_anagrams("mistypes")
    self.assertEqual(r, ['mistypes'])

    _, r = self.anagrams2.get_anagrams("mistyping")
    self.assertEqual(r, ['mistyping'])

    _, r = self.anagrams2.get_anagrams("misunderstand")
    self.assertEqual(r, ['misunderstand'])

    _, r = self.anagrams2.get_anagrams("misunderstander")
    self.assertEqual(r, ['misunderstander'])

    _, r = self.anagrams2.get_anagrams("misunderstanders")
    self.assertEqual(r, ['misunderstanders'])

    _, r = self.anagrams2.get_anagrams("misunderstanding")
    self.assertEqual(r, ['misunderstanding'])

    _, r = self.anagrams2.get_anagrams("misunderstandings")
    self.assertEqual(r, ['misunderstandings'])

    _, r = self.anagrams2.get_anagrams("misunderstood")
    self.assertEqual(r, ['misunderstood'])

    _, r = self.anagrams2.get_anagrams("misuse")
    self.assertEqual(r, ['misuse'])

    _, r = self.anagrams2.get_anagrams("misused")
    self.assertEqual(r, ['misused'])

    _, r = self.anagrams2.get_anagrams("misuses")
    self.assertEqual(r, ['misuses'])

    _, r = self.anagrams2.get_anagrams("misusing")
    self.assertEqual(r, ['misusing'])

    _, r = self.anagrams2.get_anagrams("mitch")
    self.assertEqual(r, ['mitch'])

    _, r = self.anagrams2.get_anagrams("mitchell")
    self.assertEqual(r, ['mitchell'])

    _, r = self.anagrams2.get_anagrams("miter")
    self.assertEqual(r, ['merit', 'miter', 'mitre', 'remit', 'timer'])

    _, r = self.anagrams2.get_anagrams("mitigate")
    self.assertEqual(r, ['mitigate'])

    _, r = self.anagrams2.get_anagrams("mitigated")
    self.assertEqual(r, ['mitigated'])

    _, r = self.anagrams2.get_anagrams("mitigates")
    self.assertEqual(r, ['mitigates'])

    _, r = self.anagrams2.get_anagrams("mitigating")
    self.assertEqual(r, ['mitigating'])

    _, r = self.anagrams2.get_anagrams("mitigation")
    self.assertEqual(r, ['mitigation'])

    _, r = self.anagrams2.get_anagrams("mitigative")
    self.assertEqual(r, ['mitigative'])

    _, r = self.anagrams2.get_anagrams("mitre")
    self.assertEqual(r, ['merit', 'miter', 'mitre', 'remit', 'timer'])

    _, r = self.anagrams2.get_anagrams("mitres")
    self.assertEqual(r, ['merits', 'mister', 'mitres', 'timers'])

    _, r = self.anagrams2.get_anagrams("mitten")
    self.assertEqual(r, ['mitten'])

    _, r = self.anagrams2.get_anagrams("mittens")
    self.assertEqual(r, ['mittens', 'smitten'])

    _, r = self.anagrams2.get_anagrams("mix")
    self.assertEqual(r, ['mix'])

    _, r = self.anagrams2.get_anagrams("mixed")
    self.assertEqual(r, ['mixed'])

    _, r = self.anagrams2.get_anagrams("mixer")
    self.assertEqual(r, ['mixer'])

    _, r = self.anagrams2.get_anagrams("mixers")
    self.assertEqual(r, ['mixers'])

    _, r = self.anagrams2.get_anagrams("mixes")
    self.assertEqual(r, ['mixes'])

    _, r = self.anagrams2.get_anagrams("mixing")
    self.assertEqual(r, ['mixing'])

    _, r = self.anagrams2.get_anagrams("mixture")
    self.assertEqual(r, ['mixture'])

    _, r = self.anagrams2.get_anagrams("mixtures")
    self.assertEqual(r, ['mixtures'])

    _, r = self.anagrams2.get_anagrams("mixup")
    self.assertEqual(r, ['mixup'])

    _, r = self.anagrams2.get_anagrams("mizar")
    self.assertEqual(r, ['mizar'])

    _, r = self.anagrams2.get_anagrams("mnemonic")
    self.assertEqual(r, ['mnemonic'])

    _, r = self.anagrams2.get_anagrams("mnemonically")
    self.assertEqual(r, ['mnemonically'])

    _, r = self.anagrams2.get_anagrams("mnemonics")
    self.assertEqual(r, ['mnemonics'])

    _, r = self.anagrams2.get_anagrams("moan")
    self.assertEqual(r, ['moan', 'mona', 'oman'])

    _, r = self.anagrams2.get_anagrams("moaned")
    self.assertEqual(r, ['daemon', 'moaned'])

    _, r = self.anagrams2.get_anagrams("moans")
    self.assertEqual(r, ['mason', 'moans'])

    _, r = self.anagrams2.get_anagrams("moat")
    self.assertEqual(r, ['atom', 'moat'])

    _, r = self.anagrams2.get_anagrams("moats")
    self.assertEqual(r, ['atoms', 'moats'])

    _, r = self.anagrams2.get_anagrams("mob")
    self.assertEqual(r, ['mob'])

    _, r = self.anagrams2.get_anagrams("mobil")
    self.assertEqual(r, ['limbo', 'mobil'])

    _, r = self.anagrams2.get_anagrams("mobile")
    self.assertEqual(r, ['mobile'])

    _, r = self.anagrams2.get_anagrams("mobility")
    self.assertEqual(r, ['mobility'])

    _, r = self.anagrams2.get_anagrams("mobs")
    self.assertEqual(r, ['mobs'])

    _, r = self.anagrams2.get_anagrams("mobster")
    self.assertEqual(r, ['mobster'])

    _, r = self.anagrams2.get_anagrams("moccasin")
    self.assertEqual(r, ['moccasin'])

    _, r = self.anagrams2.get_anagrams("moccasins")
    self.assertEqual(r, ['moccasins'])

    _, r = self.anagrams2.get_anagrams("mock")
    self.assertEqual(r, ['mock'])

    _, r = self.anagrams2.get_anagrams("mocked")
    self.assertEqual(r, ['mocked'])

    _, r = self.anagrams2.get_anagrams("mocker")
    self.assertEqual(r, ['mocker'])

    _, r = self.anagrams2.get_anagrams("mockery")
    self.assertEqual(r, ['mockery'])

    _, r = self.anagrams2.get_anagrams("mocking")
    self.assertEqual(r, ['mocking'])

    _, r = self.anagrams2.get_anagrams("mockingbird")
    self.assertEqual(r, ['mockingbird'])

    _, r = self.anagrams2.get_anagrams("mocks")
    self.assertEqual(r, ['mocks', 'smock'])

    _, r = self.anagrams2.get_anagrams("mockup")
    self.assertEqual(r, ['mockup'])

    _, r = self.anagrams2.get_anagrams("modal")
    self.assertEqual(r, ['modal'])

    _, r = self.anagrams2.get_anagrams("modalities")
    self.assertEqual(r, ['modalities'])

    _, r = self.anagrams2.get_anagrams("modality")
    self.assertEqual(r, ['modality'])

    _, r = self.anagrams2.get_anagrams("modally")
    self.assertEqual(r, ['modally'])

    _, r = self.anagrams2.get_anagrams("mode")
    self.assertEqual(r, ['demo', 'dome', 'mode'])

    _, r = self.anagrams2.get_anagrams("model")
    self.assertEqual(r, ['model'])

    _, r = self.anagrams2.get_anagrams("modeled")
    self.assertEqual(r, ['modeled'])

    _, r = self.anagrams2.get_anagrams("modeling")
    self.assertEqual(r, ['modeling'])

    _, r = self.anagrams2.get_anagrams("modelings")
    self.assertEqual(r, ['modelings'])

    _, r = self.anagrams2.get_anagrams("models")
    self.assertEqual(r, ['models', 'seldom'])

    _, r = self.anagrams2.get_anagrams("modem")
    self.assertEqual(r, ['modem'])

    _, r = self.anagrams2.get_anagrams("modems")
    self.assertEqual(r, ['modems'])

    _, r = self.anagrams2.get_anagrams("moderate")
    self.assertEqual(r, ['moderate'])

    _, r = self.anagrams2.get_anagrams("moderated")
    self.assertEqual(r, ['moderated'])

    _, r = self.anagrams2.get_anagrams("moderately")
    self.assertEqual(r, ['moderately'])

    _, r = self.anagrams2.get_anagrams("moderateness")
    self.assertEqual(r, ['moderateness'])

    _, r = self.anagrams2.get_anagrams("moderates")
    self.assertEqual(r, ['moderates'])

    _, r = self.anagrams2.get_anagrams("moderating")
    self.assertEqual(r, ['moderating'])

    _, r = self.anagrams2.get_anagrams("moderation")
    self.assertEqual(r, ['moderation'])

    _, r = self.anagrams2.get_anagrams("modern")
    self.assertEqual(r, ['modern'])

    _, r = self.anagrams2.get_anagrams("modernity")
    self.assertEqual(r, ['modernity'])

    _, r = self.anagrams2.get_anagrams("modernize")
    self.assertEqual(r, ['modernize'])

    _, r = self.anagrams2.get_anagrams("modernized")
    self.assertEqual(r, ['modernized'])

    _, r = self.anagrams2.get_anagrams("modernizer")
    self.assertEqual(r, ['modernizer'])

    _, r = self.anagrams2.get_anagrams("modernizing")
    self.assertEqual(r, ['modernizing'])

    _, r = self.anagrams2.get_anagrams("modernly")
    self.assertEqual(r, ['modernly'])

    _, r = self.anagrams2.get_anagrams("modernness")
    self.assertEqual(r, ['modernness'])

    _, r = self.anagrams2.get_anagrams("moderns")
    self.assertEqual(r, ['moderns'])

    _, r = self.anagrams2.get_anagrams("modes")
    self.assertEqual(r, ['domes', 'modes'])

    _, r = self.anagrams2.get_anagrams("modest")
    self.assertEqual(r, ['modest'])

    _, r = self.anagrams2.get_anagrams("modestly")
    self.assertEqual(r, ['modestly'])

    _, r = self.anagrams2.get_anagrams("modesto")
    self.assertEqual(r, ['modesto'])

    _, r = self.anagrams2.get_anagrams("modesty")
    self.assertEqual(r, ['modesty'])

    _, r = self.anagrams2.get_anagrams("modicum")
    self.assertEqual(r, ['modicum'])

    _, r = self.anagrams2.get_anagrams("modifiability")
    self.assertEqual(r, ['modifiability'])

    _, r = self.anagrams2.get_anagrams("modifiable")
    self.assertEqual(r, ['modifiable'])

    _, r = self.anagrams2.get_anagrams("modification")
    self.assertEqual(r, ['modification'])

    _, r = self.anagrams2.get_anagrams("modifications")
    self.assertEqual(r, ['modifications'])

    _, r = self.anagrams2.get_anagrams("modified")
    self.assertEqual(r, ['modified'])

    _, r = self.anagrams2.get_anagrams("modifier")
    self.assertEqual(r, ['modifier'])

    _, r = self.anagrams2.get_anagrams("modifiers")
    self.assertEqual(r, ['modifiers'])

    _, r = self.anagrams2.get_anagrams("modifies")
    self.assertEqual(r, ['modifies'])

    _, r = self.anagrams2.get_anagrams("modify")
    self.assertEqual(r, ['modify'])

    _, r = self.anagrams2.get_anagrams("modifying")
    self.assertEqual(r, ['modifying'])

    _, r = self.anagrams2.get_anagrams("modula")
    self.assertEqual(r, ['modula'])

    _, r = self.anagrams2.get_anagrams("modula-2")
    self.assertEqual(r, ['modula-2'])

    _, r = self.anagrams2.get_anagrams("modula-3")
    self.assertEqual(r, ['modula-3'])

    _, r = self.anagrams2.get_anagrams("modular")
    self.assertEqual(r, ['modular'])

    _, r = self.anagrams2.get_anagrams("modularity")
    self.assertEqual(r, ['modularity'])

    _, r = self.anagrams2.get_anagrams("modularization")
    self.assertEqual(r, ['modularization'])

    _, r = self.anagrams2.get_anagrams("modularize")
    self.assertEqual(r, ['modularize'])

    _, r = self.anagrams2.get_anagrams("modularized")
    self.assertEqual(r, ['modularized'])

    _, r = self.anagrams2.get_anagrams("modularizes")
    self.assertEqual(r, ['modularizes'])

    _, r = self.anagrams2.get_anagrams("modularizing")
    self.assertEqual(r, ['modularizing'])

    _, r = self.anagrams2.get_anagrams("modularly")
    self.assertEqual(r, ['modularly'])

    _, r = self.anagrams2.get_anagrams("modulate")
    self.assertEqual(r, ['modulate'])

    _, r = self.anagrams2.get_anagrams("modulated")
    self.assertEqual(r, ['modulated'])

    _, r = self.anagrams2.get_anagrams("modulates")
    self.assertEqual(r, ['modulates'])

    _, r = self.anagrams2.get_anagrams("modulating")
    self.assertEqual(r, ['modulating'])

    _, r = self.anagrams2.get_anagrams("modulation")
    self.assertEqual(r, ['modulation'])

    _, r = self.anagrams2.get_anagrams("modulations")
    self.assertEqual(r, ['modulations'])

    _, r = self.anagrams2.get_anagrams("modulator")
    self.assertEqual(r, ['modulator'])

    _, r = self.anagrams2.get_anagrams("modulators")
    self.assertEqual(r, ['modulators'])

    _, r = self.anagrams2.get_anagrams("module")
    self.assertEqual(r, ['module'])

    _, r = self.anagrams2.get_anagrams("modules")
    self.assertEqual(r, ['modules'])

    _, r = self.anagrams2.get_anagrams("moduli")
    self.assertEqual(r, ['moduli'])

    _, r = self.anagrams2.get_anagrams("modulo")
    self.assertEqual(r, ['modulo'])

    _, r = self.anagrams2.get_anagrams("modulus")
    self.assertEqual(r, ['modulus'])

    _, r = self.anagrams2.get_anagrams("modus")
    self.assertEqual(r, ['modus'])

    _, r = self.anagrams2.get_anagrams("moe")
    self.assertEqual(r, ['moe'])

    _, r = self.anagrams2.get_anagrams("moen")
    self.assertEqual(r, ['moen', 'omen'])

    _, r = self.anagrams2.get_anagrams("mogadiscio")
    self.assertEqual(r, ['mogadiscio'])

    _, r = self.anagrams2.get_anagrams("mogadishu")
    self.assertEqual(r, ['mogadishu'])

    _, r = self.anagrams2.get_anagrams("moghul")
    self.assertEqual(r, ['moghul'])

    _, r = self.anagrams2.get_anagrams("mohammed")
    self.assertEqual(r, ['mohammed'])

    _, r = self.anagrams2.get_anagrams("mohammedan")
    self.assertEqual(r, ['mohammedan'])

    _, r = self.anagrams2.get_anagrams("mohammedanism")
    self.assertEqual(r, ['mohammedanism'])

    _, r = self.anagrams2.get_anagrams("mohammedanization")
    self.assertEqual(r, ['mohammedanization'])

    _, r = self.anagrams2.get_anagrams("mohammedanizations")
    self.assertEqual(r, ['mohammedanizations'])

    _, r = self.anagrams2.get_anagrams("mohammedanize")
    self.assertEqual(r, ['mohammedanize'])

    _, r = self.anagrams2.get_anagrams("mohammedanizes")
    self.assertEqual(r, ['mohammedanizes'])

    _, r = self.anagrams2.get_anagrams("mohawk")
    self.assertEqual(r, ['mohawk'])

    _, r = self.anagrams2.get_anagrams("mohr")
    self.assertEqual(r, ['mohr'])

    _, r = self.anagrams2.get_anagrams("moines")
    self.assertEqual(r, ['moines'])

    _, r = self.anagrams2.get_anagrams("moiseyev")
    self.assertEqual(r, ['moiseyev'])

    _, r = self.anagrams2.get_anagrams("moist")
    self.assertEqual(r, ['moist', 'omits'])

    _, r = self.anagrams2.get_anagrams("moisten")
    self.assertEqual(r, ['moisten'])

    _, r = self.anagrams2.get_anagrams("moistly")
    self.assertEqual(r, ['moistly'])

    _, r = self.anagrams2.get_anagrams("moistness")
    self.assertEqual(r, ['moistness'])

    _, r = self.anagrams2.get_anagrams("moisture")
    self.assertEqual(r, ['moisture'])

    _, r = self.anagrams2.get_anagrams("molar")
    self.assertEqual(r, ['molar', 'moral'])

    _, r = self.anagrams2.get_anagrams("molasses")
    self.assertEqual(r, ['molasses'])

    _, r = self.anagrams2.get_anagrams("mold")
    self.assertEqual(r, ['mold'])

    _, r = self.anagrams2.get_anagrams("moldavia")
    self.assertEqual(r, ['moldavia'])

    _, r = self.anagrams2.get_anagrams("molded")
    self.assertEqual(r, ['molded'])

    _, r = self.anagrams2.get_anagrams("molder")
    self.assertEqual(r, ['molder'])

    _, r = self.anagrams2.get_anagrams("molding")
    self.assertEqual(r, ['molding'])

    _, r = self.anagrams2.get_anagrams("molds")
    self.assertEqual(r, ['molds'])

    _, r = self.anagrams2.get_anagrams("mole")
    self.assertEqual(r, ['lome', 'mole'])

    _, r = self.anagrams2.get_anagrams("molecular")
    self.assertEqual(r, ['molecular'])

    _, r = self.anagrams2.get_anagrams("molecule")
    self.assertEqual(r, ['molecule'])

    _, r = self.anagrams2.get_anagrams("molecules")
    self.assertEqual(r, ['molecules'])

    _, r = self.anagrams2.get_anagrams("molehill")
    self.assertEqual(r, ['molehill'])

    _, r = self.anagrams2.get_anagrams("moles")
    self.assertEqual(r, ['moles'])

    _, r = self.anagrams2.get_anagrams("molest")
    self.assertEqual(r, ['molest', 'motels'])

    _, r = self.anagrams2.get_anagrams("molested")
    self.assertEqual(r, ['molested'])

    _, r = self.anagrams2.get_anagrams("molesting")
    self.assertEqual(r, ['molesting'])

    _, r = self.anagrams2.get_anagrams("molests")
    self.assertEqual(r, ['molests'])

    _, r = self.anagrams2.get_anagrams("moliere")
    self.assertEqual(r, ['moliere'])

    _, r = self.anagrams2.get_anagrams("moline")
    self.assertEqual(r, ['moline'])

    _, r = self.anagrams2.get_anagrams("moll")
    self.assertEqual(r, ['moll'])

    _, r = self.anagrams2.get_anagrams("mollie")
    self.assertEqual(r, ['mollie'])

    _, r = self.anagrams2.get_anagrams("mollify")
    self.assertEqual(r, ['mollify'])

    _, r = self.anagrams2.get_anagrams("mollusk")
    self.assertEqual(r, ['mollusk'])

    _, r = self.anagrams2.get_anagrams("molly")
    self.assertEqual(r, ['molly'])

    _, r = self.anagrams2.get_anagrams("mollycoddle")
    self.assertEqual(r, ['mollycoddle'])

    _, r = self.anagrams2.get_anagrams("moloch")
    self.assertEqual(r, ['moloch'])

    _, r = self.anagrams2.get_anagrams("molochize")
    self.assertEqual(r, ['molochize'])

    _, r = self.anagrams2.get_anagrams("molochizes")
    self.assertEqual(r, ['molochizes'])

    _, r = self.anagrams2.get_anagrams("molotov")
    self.assertEqual(r, ['molotov'])

    _, r = self.anagrams2.get_anagrams("molten")
    self.assertEqual(r, ['molten'])

    _, r = self.anagrams2.get_anagrams("moluccas")
    self.assertEqual(r, ['moluccas'])

    _, r = self.anagrams2.get_anagrams("moment")
    self.assertEqual(r, ['moment'])

    _, r = self.anagrams2.get_anagrams("momentarily")
    self.assertEqual(r, ['momentarily'])

    _, r = self.anagrams2.get_anagrams("momentariness")
    self.assertEqual(r, ['momentariness'])

    _, r = self.anagrams2.get_anagrams("momentary")
    self.assertEqual(r, ['momentary'])

    _, r = self.anagrams2.get_anagrams("momentous")
    self.assertEqual(r, ['momentous'])

    _, r = self.anagrams2.get_anagrams("momentously")
    self.assertEqual(r, ['momentously'])

    _, r = self.anagrams2.get_anagrams("momentousness")
    self.assertEqual(r, ['momentousness'])

    _, r = self.anagrams2.get_anagrams("moments")
    self.assertEqual(r, ['moments'])

    _, r = self.anagrams2.get_anagrams("momentum")
    self.assertEqual(r, ['momentum'])

    _, r = self.anagrams2.get_anagrams("mommy")
    self.assertEqual(r, ['mommy'])

    _, r = self.anagrams2.get_anagrams("mona")
    self.assertEqual(r, ['moan', 'mona', 'oman'])

    _, r = self.anagrams2.get_anagrams("monaco")
    self.assertEqual(r, ['monaco'])

    _, r = self.anagrams2.get_anagrams("monadic")
    self.assertEqual(r, ['monadic'])

    _, r = self.anagrams2.get_anagrams("monarch")
    self.assertEqual(r, ['monarch'])

    _, r = self.anagrams2.get_anagrams("monarchies")
    self.assertEqual(r, ['monarchies'])

    _, r = self.anagrams2.get_anagrams("monarchs")
    self.assertEqual(r, ['monarchs'])

    _, r = self.anagrams2.get_anagrams("monarchy")
    self.assertEqual(r, ['monarchy'])

    _, r = self.anagrams2.get_anagrams("monash")
    self.assertEqual(r, ['monash'])

    _, r = self.anagrams2.get_anagrams("monasteries")
    self.assertEqual(r, ['monasteries'])

    _, r = self.anagrams2.get_anagrams("monastery")
    self.assertEqual(r, ['monastery'])

    _, r = self.anagrams2.get_anagrams("monastic")
    self.assertEqual(r, ['monastic'])

    _, r = self.anagrams2.get_anagrams("monday")
    self.assertEqual(r, ['dynamo', 'monday'])

    _, r = self.anagrams2.get_anagrams("mondays")
    self.assertEqual(r, ['mondays'])

    _, r = self.anagrams2.get_anagrams("monet")
    self.assertEqual(r, ['monet'])

    _, r = self.anagrams2.get_anagrams("monetarism")
    self.assertEqual(r, ['monetarism'])

    _, r = self.anagrams2.get_anagrams("monetary")
    self.assertEqual(r, ['monetary'])

    _, r = self.anagrams2.get_anagrams("money")
    self.assertEqual(r, ['money'])

    _, r = self.anagrams2.get_anagrams("moneyed")
    self.assertEqual(r, ['moneyed'])

    _, r = self.anagrams2.get_anagrams("moneys")
    self.assertEqual(r, ['moneys'])

    _, r = self.anagrams2.get_anagrams("monfort")
    self.assertEqual(r, ['monfort'])

    _, r = self.anagrams2.get_anagrams("mongolia")
    self.assertEqual(r, ['mongolia'])

    _, r = self.anagrams2.get_anagrams("mongolian")
    self.assertEqual(r, ['mongolian'])

    _, r = self.anagrams2.get_anagrams("mongolianism")
    self.assertEqual(r, ['mongolianism'])

    _, r = self.anagrams2.get_anagrams("mongoose")
    self.assertEqual(r, ['mongoose'])

    _, r = self.anagrams2.get_anagrams("monica")
    self.assertEqual(r, ['anomic', 'camino', 'monica'])

    _, r = self.anagrams2.get_anagrams("monitor")
    self.assertEqual(r, ['monitor'])

    _, r = self.anagrams2.get_anagrams("monitored")
    self.assertEqual(r, ['monitored'])

    _, r = self.anagrams2.get_anagrams("monitoring")
    self.assertEqual(r, ['monitoring'])

    _, r = self.anagrams2.get_anagrams("monitors")
    self.assertEqual(r, ['monitors'])

    _, r = self.anagrams2.get_anagrams("monk")
    self.assertEqual(r, ['monk'])

    _, r = self.anagrams2.get_anagrams("monkey")
    self.assertEqual(r, ['monkey'])

    _, r = self.anagrams2.get_anagrams("monkeyed")
    self.assertEqual(r, ['monkeyed'])

    _, r = self.anagrams2.get_anagrams("monkeying")
    self.assertEqual(r, ['monkeying'])

    _, r = self.anagrams2.get_anagrams("monkeys")
    self.assertEqual(r, ['monkeys'])

    _, r = self.anagrams2.get_anagrams("monkish")
    self.assertEqual(r, ['monkish'])

    _, r = self.anagrams2.get_anagrams("monks")
    self.assertEqual(r, ['monks'])

    _, r = self.anagrams2.get_anagrams("monmouth")
    self.assertEqual(r, ['monmouth'])

    _, r = self.anagrams2.get_anagrams("monoalphabetic")
    self.assertEqual(r, ['monoalphabetic'])

    _, r = self.anagrams2.get_anagrams("monoceros")
    self.assertEqual(r, ['monoceros'])

    _, r = self.anagrams2.get_anagrams("monochromatic")
    self.assertEqual(r, ['monochromatic'])

    _, r = self.anagrams2.get_anagrams("monochrome")
    self.assertEqual(r, ['monochrome'])

    _, r = self.anagrams2.get_anagrams("monocotyledon")
    self.assertEqual(r, ['monocotyledon'])

    _, r = self.anagrams2.get_anagrams("monocular")
    self.assertEqual(r, ['monocular'])

    _, r = self.anagrams2.get_anagrams("monogamous")
    self.assertEqual(r, ['monogamous'])

    _, r = self.anagrams2.get_anagrams("monogamy")
    self.assertEqual(r, ['monogamy'])

    _, r = self.anagrams2.get_anagrams("monogram")
    self.assertEqual(r, ['monogram'])

    _, r = self.anagrams2.get_anagrams("monograms")
    self.assertEqual(r, ['monograms'])

    _, r = self.anagrams2.get_anagrams("monograph")
    self.assertEqual(r, ['monograph'])

    _, r = self.anagrams2.get_anagrams("monographes")
    self.assertEqual(r, ['monographes'])

    _, r = self.anagrams2.get_anagrams("monographs")
    self.assertEqual(r, ['monographs'])

    _, r = self.anagrams2.get_anagrams("monolith")
    self.assertEqual(r, ['monolith'])

    _, r = self.anagrams2.get_anagrams("monolithic")
    self.assertEqual(r, ['monolithic'])

    _, r = self.anagrams2.get_anagrams("monologue")
    self.assertEqual(r, ['monologue'])

    _, r = self.anagrams2.get_anagrams("monongahela")
    self.assertEqual(r, ['monongahela'])

    _, r = self.anagrams2.get_anagrams("monopolies")
    self.assertEqual(r, ['monopolies'])

    _, r = self.anagrams2.get_anagrams("monopolize")
    self.assertEqual(r, ['monopolize'])

    _, r = self.anagrams2.get_anagrams("monopolized")
    self.assertEqual(r, ['monopolized'])

    _, r = self.anagrams2.get_anagrams("monopolizing")
    self.assertEqual(r, ['monopolizing'])

    _, r = self.anagrams2.get_anagrams("monopoly")
    self.assertEqual(r, ['monopoly'])

    _, r = self.anagrams2.get_anagrams("monoprogrammed")
    self.assertEqual(r, ['monoprogrammed'])

    _, r = self.anagrams2.get_anagrams("monoprogramming")
    self.assertEqual(r, ['monoprogramming'])

    _, r = self.anagrams2.get_anagrams("monostable")
    self.assertEqual(r, ['monostable'])

    _, r = self.anagrams2.get_anagrams("monotheism")
    self.assertEqual(r, ['monotheism'])

    _, r = self.anagrams2.get_anagrams("monotone")
    self.assertEqual(r, ['monotone'])

    _, r = self.anagrams2.get_anagrams("monotonic")
    self.assertEqual(r, ['monotonic'])

    _, r = self.anagrams2.get_anagrams("monotonically")
    self.assertEqual(r, ['monotonically'])

    _, r = self.anagrams2.get_anagrams("monotonicity")
    self.assertEqual(r, ['monotonicity'])

    _, r = self.anagrams2.get_anagrams("monotonous")
    self.assertEqual(r, ['monotonous'])

    _, r = self.anagrams2.get_anagrams("monotonously")
    self.assertEqual(r, ['monotonously'])

    _, r = self.anagrams2.get_anagrams("monotonousness")
    self.assertEqual(r, ['monotonousness'])

    _, r = self.anagrams2.get_anagrams("monotony")
    self.assertEqual(r, ['monotony'])

    _, r = self.anagrams2.get_anagrams("monroe")
    self.assertEqual(r, ['monroe'])

    _, r = self.anagrams2.get_anagrams("monrovia")
    self.assertEqual(r, ['monrovia'])

    _, r = self.anagrams2.get_anagrams("monsanto")
    self.assertEqual(r, ['monsanto'])

    _, r = self.anagrams2.get_anagrams("monsoon")
    self.assertEqual(r, ['monsoon'])

    _, r = self.anagrams2.get_anagrams("monster")
    self.assertEqual(r, ['mentors', 'monster'])

    _, r = self.anagrams2.get_anagrams("monsters")
    self.assertEqual(r, ['monsters'])

    _, r = self.anagrams2.get_anagrams("monstrosity")
    self.assertEqual(r, ['monstrosity'])

    _, r = self.anagrams2.get_anagrams("monstrous")
    self.assertEqual(r, ['monstrous'])

    _, r = self.anagrams2.get_anagrams("monstrously")
    self.assertEqual(r, ['monstrously'])

    _, r = self.anagrams2.get_anagrams("mont")
    self.assertEqual(r, ['mont'])

    _, r = self.anagrams2.get_anagrams("montague")
    self.assertEqual(r, ['montague'])

    _, r = self.anagrams2.get_anagrams("montaigne")
    self.assertEqual(r, ['montaigne'])

    _, r = self.anagrams2.get_anagrams("montana")
    self.assertEqual(r, ['montana'])

    _, r = self.anagrams2.get_anagrams("montanan")
    self.assertEqual(r, ['montanan'])

    _, r = self.anagrams2.get_anagrams("montclair")
    self.assertEqual(r, ['montclair'])

    _, r = self.anagrams2.get_anagrams("montenegrin")
    self.assertEqual(r, ['montenegrin'])

    _, r = self.anagrams2.get_anagrams("montenegro")
    self.assertEqual(r, ['montenegro'])

    _, r = self.anagrams2.get_anagrams("monterey")
    self.assertEqual(r, ['monterey'])

    _, r = self.anagrams2.get_anagrams("monteverdi")
    self.assertEqual(r, ['monteverdi'])

    _, r = self.anagrams2.get_anagrams("montevideo")
    self.assertEqual(r, ['montevideo'])

    _, r = self.anagrams2.get_anagrams("montgomery")
    self.assertEqual(r, ['montgomery'])

    _, r = self.anagrams2.get_anagrams("month")
    self.assertEqual(r, ['month'])

    _, r = self.anagrams2.get_anagrams("monthly")
    self.assertEqual(r, ['monthly'])

    _, r = self.anagrams2.get_anagrams("months")
    self.assertEqual(r, ['months'])

    _, r = self.anagrams2.get_anagrams("monticello")
    self.assertEqual(r, ['monticello'])

    _, r = self.anagrams2.get_anagrams("montmartre")
    self.assertEqual(r, ['montmartre'])

    _, r = self.anagrams2.get_anagrams("montpelier")
    self.assertEqual(r, ['montpelier'])

    _, r = self.anagrams2.get_anagrams("montrachet")
    self.assertEqual(r, ['montrachet'])

    _, r = self.anagrams2.get_anagrams("montreal")
    self.assertEqual(r, ['montreal'])

    _, r = self.anagrams2.get_anagrams("monty")
    self.assertEqual(r, ['monty'])

    _, r = self.anagrams2.get_anagrams("monument")
    self.assertEqual(r, ['monument'])

    _, r = self.anagrams2.get_anagrams("monumental")
    self.assertEqual(r, ['monumental'])

    _, r = self.anagrams2.get_anagrams("monumentally")
    self.assertEqual(r, ['monumentally'])

    _, r = self.anagrams2.get_anagrams("monuments")
    self.assertEqual(r, ['monuments'])

    _, r = self.anagrams2.get_anagrams("moo")
    self.assertEqual(r, ['moo'])

    _, r = self.anagrams2.get_anagrams("mood")
    self.assertEqual(r, ['doom', 'mood'])

    _, r = self.anagrams2.get_anagrams("moodiness")
    self.assertEqual(r, ['moodiness'])

    _, r = self.anagrams2.get_anagrams("moods")
    self.assertEqual(r, ['dooms', 'moods'])

    _, r = self.anagrams2.get_anagrams("moody")
    self.assertEqual(r, ['moody'])

    _, r = self.anagrams2.get_anagrams("moon")
    self.assertEqual(r, ['moon'])

    _, r = self.anagrams2.get_anagrams("mooned")
    self.assertEqual(r, ['mooned'])

    _, r = self.anagrams2.get_anagrams("mooney")
    self.assertEqual(r, ['mooney'])

    _, r = self.anagrams2.get_anagrams("mooning")
    self.assertEqual(r, ['mooning'])

    _, r = self.anagrams2.get_anagrams("moonlight")
    self.assertEqual(r, ['moonlight'])

    _, r = self.anagrams2.get_anagrams("moonlighter")
    self.assertEqual(r, ['moonlighter'])

    _, r = self.anagrams2.get_anagrams("moonlighting")
    self.assertEqual(r, ['moonlighting'])

    _, r = self.anagrams2.get_anagrams("moonlike")
    self.assertEqual(r, ['moonlike'])

    _, r = self.anagrams2.get_anagrams("moonlit")
    self.assertEqual(r, ['moonlit'])

    _, r = self.anagrams2.get_anagrams("moons")
    self.assertEqual(r, ['moons'])

    _, r = self.anagrams2.get_anagrams("moonshine")
    self.assertEqual(r, ['moonshine'])

    _, r = self.anagrams2.get_anagrams("moor")
    self.assertEqual(r, ['moor', 'room'])

    _, r = self.anagrams2.get_anagrams("moore")
    self.assertEqual(r, ['moore', 'romeo'])

    _, r = self.anagrams2.get_anagrams("moored")
    self.assertEqual(r, ['moored', 'roomed'])

    _, r = self.anagrams2.get_anagrams("mooring")
    self.assertEqual(r, ['mooring', 'rooming'])

    _, r = self.anagrams2.get_anagrams("moorings")
    self.assertEqual(r, ['moorings'])

    _, r = self.anagrams2.get_anagrams("moorish")
    self.assertEqual(r, ['moorish'])

    _, r = self.anagrams2.get_anagrams("moors")
    self.assertEqual(r, ['moors', 'rooms'])

    _, r = self.anagrams2.get_anagrams("moose")
    self.assertEqual(r, ['moose'])

    _, r = self.anagrams2.get_anagrams("moot")
    self.assertEqual(r, ['moot'])

    _, r = self.anagrams2.get_anagrams("mop")
    self.assertEqual(r, ['mop'])

    _, r = self.anagrams2.get_anagrams("moped")
    self.assertEqual(r, ['moped'])

    _, r = self.anagrams2.get_anagrams("mops")
    self.assertEqual(r, ['mops'])

    _, r = self.anagrams2.get_anagrams("moraine")
    self.assertEqual(r, ['moraine'])

    _, r = self.anagrams2.get_anagrams("moral")
    self.assertEqual(r, ['molar', 'moral'])

    _, r = self.anagrams2.get_anagrams("morale")
    self.assertEqual(r, ['morale'])

    _, r = self.anagrams2.get_anagrams("moralities")
    self.assertEqual(r, ['moralities'])

    _, r = self.anagrams2.get_anagrams("morality")
    self.assertEqual(r, ['morality'])

    _, r = self.anagrams2.get_anagrams("morally")
    self.assertEqual(r, ['mallory', 'morally'])

    _, r = self.anagrams2.get_anagrams("morals")
    self.assertEqual(r, ['morals'])

    _, r = self.anagrams2.get_anagrams("moran")
    self.assertEqual(r, ['manor', 'moran', 'norma', 'roman'])

    _, r = self.anagrams2.get_anagrams("morass")
    self.assertEqual(r, ['morass'])

    _, r = self.anagrams2.get_anagrams("moratorium")
    self.assertEqual(r, ['moratorium'])

    _, r = self.anagrams2.get_anagrams("moravia")
    self.assertEqual(r, ['moravia'])

    _, r = self.anagrams2.get_anagrams("moravian")
    self.assertEqual(r, ['moravian'])

    _, r = self.anagrams2.get_anagrams("moravianized")
    self.assertEqual(r, ['moravianized'])

    _, r = self.anagrams2.get_anagrams("moravianizeds")
    self.assertEqual(r, ['moravianizeds'])

    _, r = self.anagrams2.get_anagrams("morbid")
    self.assertEqual(r, ['morbid'])

    _, r = self.anagrams2.get_anagrams("morbidly")
    self.assertEqual(r, ['morbidly'])

    _, r = self.anagrams2.get_anagrams("morbidness")
    self.assertEqual(r, ['morbidness'])

    _, r = self.anagrams2.get_anagrams("more")
    self.assertEqual(r, ['more', 'rome'])

    _, r = self.anagrams2.get_anagrams("morehouse")
    self.assertEqual(r, ['morehouse'])

    _, r = self.anagrams2.get_anagrams("moreland")
    self.assertEqual(r, ['moreland'])

    _, r = self.anagrams2.get_anagrams("moreover")
    self.assertEqual(r, ['moreover'])

    _, r = self.anagrams2.get_anagrams("mores")
    self.assertEqual(r, ['mores', 'morse', 'moser'])

    _, r = self.anagrams2.get_anagrams("moresby")
    self.assertEqual(r, ['embryos', 'moresby'])

    _, r = self.anagrams2.get_anagrams("morgan")
    self.assertEqual(r, ['morgan'])

    _, r = self.anagrams2.get_anagrams("moriarty")
    self.assertEqual(r, ['moriarty'])

    _, r = self.anagrams2.get_anagrams("moribund")
    self.assertEqual(r, ['moribund'])

    _, r = self.anagrams2.get_anagrams("morley")
    self.assertEqual(r, ['morley'])

    _, r = self.anagrams2.get_anagrams("mormon")
    self.assertEqual(r, ['mormon'])

    _, r = self.anagrams2.get_anagrams("morn")
    self.assertEqual(r, ['morn', 'norm'])

    _, r = self.anagrams2.get_anagrams("morning")
    self.assertEqual(r, ['morning'])

    _, r = self.anagrams2.get_anagrams("mornings")
    self.assertEqual(r, ['mornings'])

    _, r = self.anagrams2.get_anagrams("moroccan")
    self.assertEqual(r, ['moroccan'])

    _, r = self.anagrams2.get_anagrams("morocco")
    self.assertEqual(r, ['morocco'])

    _, r = self.anagrams2.get_anagrams("moron")
    self.assertEqual(r, ['moron'])

    _, r = self.anagrams2.get_anagrams("morose")
    self.assertEqual(r, ['morose'])

    _, r = self.anagrams2.get_anagrams("morphine")
    self.assertEqual(r, ['morphine'])

    _, r = self.anagrams2.get_anagrams("morphism")
    self.assertEqual(r, ['morphism'])

    _, r = self.anagrams2.get_anagrams("morphisms")
    self.assertEqual(r, ['morphisms'])

    _, r = self.anagrams2.get_anagrams("morphological")
    self.assertEqual(r, ['morphological'])

    _, r = self.anagrams2.get_anagrams("morphology")
    self.assertEqual(r, ['morphology'])

    _, r = self.anagrams2.get_anagrams("morrill")
    self.assertEqual(r, ['morrill'])

    _, r = self.anagrams2.get_anagrams("morris")
    self.assertEqual(r, ['morris'])

    _, r = self.anagrams2.get_anagrams("morrison")
    self.assertEqual(r, ['morrison'])

    _, r = self.anagrams2.get_anagrams("morrissey")
    self.assertEqual(r, ['morrissey'])

    _, r = self.anagrams2.get_anagrams("morristown")
    self.assertEqual(r, ['morristown'])

    _, r = self.anagrams2.get_anagrams("morrow")
    self.assertEqual(r, ['morrow'])

    _, r = self.anagrams2.get_anagrams("morse")
    self.assertEqual(r, ['mores', 'morse', 'moser'])

    _, r = self.anagrams2.get_anagrams("morsel")
    self.assertEqual(r, ['morsel'])

    _, r = self.anagrams2.get_anagrams("morsels")
    self.assertEqual(r, ['morsels'])

    _, r = self.anagrams2.get_anagrams("mortal")
    self.assertEqual(r, ['mortal'])

    _, r = self.anagrams2.get_anagrams("mortality")
    self.assertEqual(r, ['mortality'])

    _, r = self.anagrams2.get_anagrams("mortally")
    self.assertEqual(r, ['mortally'])

    _, r = self.anagrams2.get_anagrams("mortals")
    self.assertEqual(r, ['mortals'])

    _, r = self.anagrams2.get_anagrams("mortar")
    self.assertEqual(r, ['mortar'])

    _, r = self.anagrams2.get_anagrams("mortared")
    self.assertEqual(r, ['mortared'])

    _, r = self.anagrams2.get_anagrams("mortaring")
    self.assertEqual(r, ['mortaring'])

    _, r = self.anagrams2.get_anagrams("mortars")
    self.assertEqual(r, ['mortars'])

    _, r = self.anagrams2.get_anagrams("mortem")
    self.assertEqual(r, ['mortem'])

    _, r = self.anagrams2.get_anagrams("mortgage")
    self.assertEqual(r, ['mortgage'])

    _, r = self.anagrams2.get_anagrams("mortgages")
    self.assertEqual(r, ['mortgages'])

    _, r = self.anagrams2.get_anagrams("mortician")
    self.assertEqual(r, ['mortician'])

    _, r = self.anagrams2.get_anagrams("mortification")
    self.assertEqual(r, ['mortification'])

    _, r = self.anagrams2.get_anagrams("mortified")
    self.assertEqual(r, ['mortified'])

    _, r = self.anagrams2.get_anagrams("mortifies")
    self.assertEqual(r, ['mortifies'])

    _, r = self.anagrams2.get_anagrams("mortify")
    self.assertEqual(r, ['mortify'])

    _, r = self.anagrams2.get_anagrams("mortifying")
    self.assertEqual(r, ['mortifying'])

    _, r = self.anagrams2.get_anagrams("mortimer")
    self.assertEqual(r, ['mortimer'])

    _, r = self.anagrams2.get_anagrams("morton")
    self.assertEqual(r, ['morton'])

    _, r = self.anagrams2.get_anagrams("mosaic")
    self.assertEqual(r, ['mosaic'])

    _, r = self.anagrams2.get_anagrams("mosaics")
    self.assertEqual(r, ['mosaics'])

    _, r = self.anagrams2.get_anagrams("moscone")
    self.assertEqual(r, ['moscone'])

    _, r = self.anagrams2.get_anagrams("moscow")
    self.assertEqual(r, ['moscow'])

    _, r = self.anagrams2.get_anagrams("moser")
    self.assertEqual(r, ['mores', 'morse', 'moser'])

    _, r = self.anagrams2.get_anagrams("moses")
    self.assertEqual(r, ['moses'])

    _, r = self.anagrams2.get_anagrams("moslem")
    self.assertEqual(r, ['moslem'])

    _, r = self.anagrams2.get_anagrams("moslemize")
    self.assertEqual(r, ['moslemize'])

    _, r = self.anagrams2.get_anagrams("moslemizes")
    self.assertEqual(r, ['moslemizes'])

    _, r = self.anagrams2.get_anagrams("moslems")
    self.assertEqual(r, ['moslems'])

    _, r = self.anagrams2.get_anagrams("mosque")
    self.assertEqual(r, ['mosque'])

    _, r = self.anagrams2.get_anagrams("mosquito")
    self.assertEqual(r, ['mosquito'])

    _, r = self.anagrams2.get_anagrams("mosquitoes")
    self.assertEqual(r, ['mosquitoes'])

    _, r = self.anagrams2.get_anagrams("moss")
    self.assertEqual(r, ['moss'])

    _, r = self.anagrams2.get_anagrams("mossberg")
    self.assertEqual(r, ['mossberg'])

    _, r = self.anagrams2.get_anagrams("mosses")
    self.assertEqual(r, ['mosses'])

    _, r = self.anagrams2.get_anagrams("mossy")
    self.assertEqual(r, ['mossy'])

    _, r = self.anagrams2.get_anagrams("most")
    self.assertEqual(r, ['most'])

    _, r = self.anagrams2.get_anagrams("mostly")
    self.assertEqual(r, ['mostly'])

    _, r = self.anagrams2.get_anagrams("motel")
    self.assertEqual(r, ['motel'])

    _, r = self.anagrams2.get_anagrams("motels")
    self.assertEqual(r, ['molest', 'motels'])

    _, r = self.anagrams2.get_anagrams("moth")
    self.assertEqual(r, ['moth'])

    _, r = self.anagrams2.get_anagrams("mothball")
    self.assertEqual(r, ['mothball'])

    _, r = self.anagrams2.get_anagrams("mothballs")
    self.assertEqual(r, ['mothballs'])

    _, r = self.anagrams2.get_anagrams("mother")
    self.assertEqual(r, ['mother'])

    _, r = self.anagrams2.get_anagrams("mothered")
    self.assertEqual(r, ['mothered'])

    _, r = self.anagrams2.get_anagrams("motherer")
    self.assertEqual(r, ['motherer'])

    _, r = self.anagrams2.get_anagrams("motherers")
    self.assertEqual(r, ['motherers'])

    _, r = self.anagrams2.get_anagrams("motherhood")
    self.assertEqual(r, ['motherhood'])

    _, r = self.anagrams2.get_anagrams("mothering")
    self.assertEqual(r, ['mothering'])

    _, r = self.anagrams2.get_anagrams("motherland")
    self.assertEqual(r, ['motherland'])

    _, r = self.anagrams2.get_anagrams("motherly")
    self.assertEqual(r, ['motherly'])

    _, r = self.anagrams2.get_anagrams("mothers")
    self.assertEqual(r, ['mothers', 'smother'])

    _, r = self.anagrams2.get_anagrams("motif")
    self.assertEqual(r, ['motif'])

    _, r = self.anagrams2.get_anagrams("motifs")
    self.assertEqual(r, ['motifs'])

    _, r = self.anagrams2.get_anagrams("motion")
    self.assertEqual(r, ['motion'])

    _, r = self.anagrams2.get_anagrams("motioned")
    self.assertEqual(r, ['motioned'])

    _, r = self.anagrams2.get_anagrams("motioning")
    self.assertEqual(r, ['motioning'])

    _, r = self.anagrams2.get_anagrams("motionless")
    self.assertEqual(r, ['motionless'])

    _, r = self.anagrams2.get_anagrams("motionlessly")
    self.assertEqual(r, ['motionlessly'])

    _, r = self.anagrams2.get_anagrams("motionlessness")
    self.assertEqual(r, ['motionlessness'])

    _, r = self.anagrams2.get_anagrams("motions")
    self.assertEqual(r, ['motions'])

    _, r = self.anagrams2.get_anagrams("motivate")
    self.assertEqual(r, ['motivate'])

    _, r = self.anagrams2.get_anagrams("motivated")
    self.assertEqual(r, ['motivated'])

    _, r = self.anagrams2.get_anagrams("motivates")
    self.assertEqual(r, ['motivates'])

    _, r = self.anagrams2.get_anagrams("motivating")
    self.assertEqual(r, ['motivating'])

    _, r = self.anagrams2.get_anagrams("motivation")
    self.assertEqual(r, ['motivation'])

    _, r = self.anagrams2.get_anagrams("motivations")
    self.assertEqual(r, ['motivations'])

    _, r = self.anagrams2.get_anagrams("motive")
    self.assertEqual(r, ['motive'])

    _, r = self.anagrams2.get_anagrams("motives")
    self.assertEqual(r, ['motives'])

    _, r = self.anagrams2.get_anagrams("motley")
    self.assertEqual(r, ['motley'])

    _, r = self.anagrams2.get_anagrams("motor")
    self.assertEqual(r, ['motor'])

    _, r = self.anagrams2.get_anagrams("motorcar")
    self.assertEqual(r, ['motorcar'])

    _, r = self.anagrams2.get_anagrams("motorcars")
    self.assertEqual(r, ['motorcars'])

    _, r = self.anagrams2.get_anagrams("motorcycle")
    self.assertEqual(r, ['motorcycle'])

    _, r = self.anagrams2.get_anagrams("motorcycles")
    self.assertEqual(r, ['motorcycles'])

    _, r = self.anagrams2.get_anagrams("motoring")
    self.assertEqual(r, ['motoring'])

    _, r = self.anagrams2.get_anagrams("motorist")
    self.assertEqual(r, ['motorist'])

    _, r = self.anagrams2.get_anagrams("motorists")
    self.assertEqual(r, ['motorists'])

    _, r = self.anagrams2.get_anagrams("motorize")
    self.assertEqual(r, ['motorize'])

    _, r = self.anagrams2.get_anagrams("motorized")
    self.assertEqual(r, ['motorized'])

    _, r = self.anagrams2.get_anagrams("motorizes")
    self.assertEqual(r, ['motorizes'])

    _, r = self.anagrams2.get_anagrams("motorizing")
    self.assertEqual(r, ['motorizing'])

    _, r = self.anagrams2.get_anagrams("motorola")
    self.assertEqual(r, ['motorola'])

    _, r = self.anagrams2.get_anagrams("motors")
    self.assertEqual(r, ['motors'])

    _, r = self.anagrams2.get_anagrams("motto")
    self.assertEqual(r, ['motto'])

    _, r = self.anagrams2.get_anagrams("mottoes")
    self.assertEqual(r, ['mottoes'])

    _, r = self.anagrams2.get_anagrams("mould")
    self.assertEqual(r, ['mould'])

    _, r = self.anagrams2.get_anagrams("moulding")
    self.assertEqual(r, ['moulding'])

    _, r = self.anagrams2.get_anagrams("moulton")
    self.assertEqual(r, ['moulton'])

    _, r = self.anagrams2.get_anagrams("mound")
    self.assertEqual(r, ['mound'])

    _, r = self.anagrams2.get_anagrams("mounded")
    self.assertEqual(r, ['mounded'])

    _, r = self.anagrams2.get_anagrams("mounds")
    self.assertEqual(r, ['mounds'])

    _, r = self.anagrams2.get_anagrams("mount")
    self.assertEqual(r, ['mount'])

    _, r = self.anagrams2.get_anagrams("mountable")
    self.assertEqual(r, ['mountable'])

    _, r = self.anagrams2.get_anagrams("mountain")
    self.assertEqual(r, ['mountain'])

    _, r = self.anagrams2.get_anagrams("mountaineer")
    self.assertEqual(r, ['enumeration', 'mountaineer'])

    _, r = self.anagrams2.get_anagrams("mountaineering")
    self.assertEqual(r, ['mountaineering'])

    _, r = self.anagrams2.get_anagrams("mountaineers")
    self.assertEqual(r, ['mountaineers'])

    _, r = self.anagrams2.get_anagrams("mountainous")
    self.assertEqual(r, ['mountainous'])

    _, r = self.anagrams2.get_anagrams("mountainously")
    self.assertEqual(r, ['mountainously'])

    _, r = self.anagrams2.get_anagrams("mountains")
    self.assertEqual(r, ['mountains'])

    _, r = self.anagrams2.get_anagrams("mounted")
    self.assertEqual(r, ['mounted'])

    _, r = self.anagrams2.get_anagrams("mounter")
    self.assertEqual(r, ['mounter'])

    _, r = self.anagrams2.get_anagrams("mounting")
    self.assertEqual(r, ['mounting'])

    _, r = self.anagrams2.get_anagrams("mountings")
    self.assertEqual(r, ['mountings'])

    _, r = self.anagrams2.get_anagrams("mounts")
    self.assertEqual(r, ['mounts'])

    _, r = self.anagrams2.get_anagrams("mourn")
    self.assertEqual(r, ['mourn'])

    _, r = self.anagrams2.get_anagrams("mourned")
    self.assertEqual(r, ['mourned'])

    _, r = self.anagrams2.get_anagrams("mourner")
    self.assertEqual(r, ['mourner'])

    _, r = self.anagrams2.get_anagrams("mourners")
    self.assertEqual(r, ['mourners'])

    _, r = self.anagrams2.get_anagrams("mournful")
    self.assertEqual(r, ['mournful'])

    _, r = self.anagrams2.get_anagrams("mournfully")
    self.assertEqual(r, ['mournfully'])

    _, r = self.anagrams2.get_anagrams("mournfulness")
    self.assertEqual(r, ['mournfulness'])

    _, r = self.anagrams2.get_anagrams("mourning")
    self.assertEqual(r, ['mourning'])

    _, r = self.anagrams2.get_anagrams("mourns")
    self.assertEqual(r, ['mourns'])

    _, r = self.anagrams2.get_anagrams("mouse")
    self.assertEqual(r, ['mouse'])

    _, r = self.anagrams2.get_anagrams("mouser")
    self.assertEqual(r, ['mouser'])

    _, r = self.anagrams2.get_anagrams("mouses")
    self.assertEqual(r, ['mouses'])

    _, r = self.anagrams2.get_anagrams("mousetrap")
    self.assertEqual(r, ['mousetrap'])

    _, r = self.anagrams2.get_anagrams("mousy")
    self.assertEqual(r, ['mousy'])

    _, r = self.anagrams2.get_anagrams("mouth")
    self.assertEqual(r, ['mouth'])

    _, r = self.anagrams2.get_anagrams("mouthe")
    self.assertEqual(r, ['mouthe'])

    _, r = self.anagrams2.get_anagrams("mouthed")
    self.assertEqual(r, ['mouthed'])

    _, r = self.anagrams2.get_anagrams("mouthes")
    self.assertEqual(r, ['mouthes'])

    _, r = self.anagrams2.get_anagrams("mouthful")
    self.assertEqual(r, ['mouthful'])

    _, r = self.anagrams2.get_anagrams("mouthing")
    self.assertEqual(r, ['mouthing'])

    _, r = self.anagrams2.get_anagrams("mouthpiece")
    self.assertEqual(r, ['mouthpiece'])

    _, r = self.anagrams2.get_anagrams("mouths")
    self.assertEqual(r, ['mouths'])

    _, r = self.anagrams2.get_anagrams("mouton")
    self.assertEqual(r, ['mouton'])

    _, r = self.anagrams2.get_anagrams("movable")
    self.assertEqual(r, ['movable'])

    _, r = self.anagrams2.get_anagrams("move")
    self.assertEqual(r, ['move'])

    _, r = self.anagrams2.get_anagrams("moved")
    self.assertEqual(r, ['moved'])

    _, r = self.anagrams2.get_anagrams("movement")
    self.assertEqual(r, ['movement'])

    _, r = self.anagrams2.get_anagrams("movements")
    self.assertEqual(r, ['movements'])

    _, r = self.anagrams2.get_anagrams("mover")
    self.assertEqual(r, ['mover'])

    _, r = self.anagrams2.get_anagrams("movers")
    self.assertEqual(r, ['movers'])

    _, r = self.anagrams2.get_anagrams("moves")
    self.assertEqual(r, ['moves'])

    _, r = self.anagrams2.get_anagrams("movie")
    self.assertEqual(r, ['movie'])

    _, r = self.anagrams2.get_anagrams("movies")
    self.assertEqual(r, ['movies'])

    _, r = self.anagrams2.get_anagrams("moving")
    self.assertEqual(r, ['moving'])

    _, r = self.anagrams2.get_anagrams("movings")
    self.assertEqual(r, ['movings'])

    _, r = self.anagrams2.get_anagrams("mow")
    self.assertEqual(r, ['mow'])

    _, r = self.anagrams2.get_anagrams("mowed")
    self.assertEqual(r, ['mowed'])

    _, r = self.anagrams2.get_anagrams("mower")
    self.assertEqual(r, ['mower'])

    _, r = self.anagrams2.get_anagrams("mows")
    self.assertEqual(r, ['mows'])

    _, r = self.anagrams2.get_anagrams("moyer")
    self.assertEqual(r, ['emory', 'moyer'])

    _, r = self.anagrams2.get_anagrams("mozart")
    self.assertEqual(r, ['mozart'])

    _, r = self.anagrams2.get_anagrams("mu")
    self.assertEqual(r, ['mu'])

    _, r = self.anagrams2.get_anagrams("much")
    self.assertEqual(r, ['chum', 'much'])

    _, r = self.anagrams2.get_anagrams("muck")
    self.assertEqual(r, ['muck'])

    _, r = self.anagrams2.get_anagrams("mucker")
    self.assertEqual(r, ['mucker'])

    _, r = self.anagrams2.get_anagrams("mucking")
    self.assertEqual(r, ['mucking'])

    _, r = self.anagrams2.get_anagrams("mucus")
    self.assertEqual(r, ['mucus'])

    _, r = self.anagrams2.get_anagrams("mud")
    self.assertEqual(r, ['mud'])

    _, r = self.anagrams2.get_anagrams("mudd")
    self.assertEqual(r, ['mudd'])

    _, r = self.anagrams2.get_anagrams("muddied")
    self.assertEqual(r, ['muddied'])

    _, r = self.anagrams2.get_anagrams("muddiness")
    self.assertEqual(r, ['muddiness'])

    _, r = self.anagrams2.get_anagrams("muddle")
    self.assertEqual(r, ['muddle'])

    _, r = self.anagrams2.get_anagrams("muddled")
    self.assertEqual(r, ['muddled'])

    _, r = self.anagrams2.get_anagrams("muddlehead")
    self.assertEqual(r, ['muddlehead'])

    _, r = self.anagrams2.get_anagrams("muddler")
    self.assertEqual(r, ['muddler'])

    _, r = self.anagrams2.get_anagrams("muddlers")
    self.assertEqual(r, ['muddlers'])

    _, r = self.anagrams2.get_anagrams("muddles")
    self.assertEqual(r, ['muddles'])

    _, r = self.anagrams2.get_anagrams("muddling")
    self.assertEqual(r, ['muddling'])

    _, r = self.anagrams2.get_anagrams("muddy")
    self.assertEqual(r, ['muddy'])

    _, r = self.anagrams2.get_anagrams("mueller")
    self.assertEqual(r, ['mueller'])

    _, r = self.anagrams2.get_anagrams("muenster")
    self.assertEqual(r, ['muenster'])

    _, r = self.anagrams2.get_anagrams("muff")
    self.assertEqual(r, ['muff'])

    _, r = self.anagrams2.get_anagrams("muffin")
    self.assertEqual(r, ['muffin'])

    _, r = self.anagrams2.get_anagrams("muffins")
    self.assertEqual(r, ['muffins'])

    _, r = self.anagrams2.get_anagrams("muffle")
    self.assertEqual(r, ['muffle'])

    _, r = self.anagrams2.get_anagrams("muffled")
    self.assertEqual(r, ['muffled'])

    _, r = self.anagrams2.get_anagrams("muffler")
    self.assertEqual(r, ['muffler'])

    _, r = self.anagrams2.get_anagrams("muffles")
    self.assertEqual(r, ['muffles'])

    _, r = self.anagrams2.get_anagrams("muffling")
    self.assertEqual(r, ['muffling'])

    _, r = self.anagrams2.get_anagrams("muffs")
    self.assertEqual(r, ['muffs'])

    _, r = self.anagrams2.get_anagrams("mug")
    self.assertEqual(r, ['gum', 'mug'])

    _, r = self.anagrams2.get_anagrams("mugging")
    self.assertEqual(r, ['mugging'])

    _, r = self.anagrams2.get_anagrams("mugs")
    self.assertEqual(r, ['gums', 'mugs', 'smug'])

    _, r = self.anagrams2.get_anagrams("muhammad")
    self.assertEqual(r, ['muhammad'])

    _, r = self.anagrams2.get_anagrams("muir")
    self.assertEqual(r, ['muir'])

    _, r = self.anagrams2.get_anagrams("mukden")
    self.assertEqual(r, ['mukden'])

    _, r = self.anagrams2.get_anagrams("mulatto")
    self.assertEqual(r, ['mulatto'])

    _, r = self.anagrams2.get_anagrams("mulberries")
    self.assertEqual(r, ['mulberries'])

    _, r = self.anagrams2.get_anagrams("mulberry")
    self.assertEqual(r, ['mulberry'])

    _, r = self.anagrams2.get_anagrams("mule")
    self.assertEqual(r, ['mule'])

    _, r = self.anagrams2.get_anagrams("mules")
    self.assertEqual(r, ['mules'])

    _, r = self.anagrams2.get_anagrams("mull")
    self.assertEqual(r, ['mull'])

    _, r = self.anagrams2.get_anagrams("mullah")
    self.assertEqual(r, ['mullah'])

    _, r = self.anagrams2.get_anagrams("mullen")
    self.assertEqual(r, ['mullen'])

    _, r = self.anagrams2.get_anagrams("multi")
    self.assertEqual(r, ['multi'])

    _, r = self.anagrams2.get_anagrams("multibit")
    self.assertEqual(r, ['multibit'])

    _, r = self.anagrams2.get_anagrams("multibus")
    self.assertEqual(r, ['multibus'])

    _, r = self.anagrams2.get_anagrams("multibyte")
    self.assertEqual(r, ['multibyte'])

    _, r = self.anagrams2.get_anagrams("multicast")
    self.assertEqual(r, ['multicast'])

    _, r = self.anagrams2.get_anagrams("multicasting")
    self.assertEqual(r, ['multicasting'])

    _, r = self.anagrams2.get_anagrams("multicasts")
    self.assertEqual(r, ['multicasts'])

    _, r = self.anagrams2.get_anagrams("multicellular")
    self.assertEqual(r, ['multicellular'])

    _, r = self.anagrams2.get_anagrams("multicomputer")
    self.assertEqual(r, ['multicomputer'])

    _, r = self.anagrams2.get_anagrams("multics")
    self.assertEqual(r, ['multics', 'multics'])

    _, r = self.anagrams2.get_anagrams("multics")
    self.assertEqual(r, ['multics', 'multics'])

    _, r = self.anagrams2.get_anagrams("multidimensional")
    self.assertEqual(r, ['multidimensional'])

    _, r = self.anagrams2.get_anagrams("multilateral")
    self.assertEqual(r, ['multilateral'])

    _, r = self.anagrams2.get_anagrams("multilayer")
    self.assertEqual(r, ['multilayer'])

    _, r = self.anagrams2.get_anagrams("multilayered")
    self.assertEqual(r, ['multilayered'])

    _, r = self.anagrams2.get_anagrams("multilevel")
    self.assertEqual(r, ['multilevel'])

    _, r = self.anagrams2.get_anagrams("multimedia")
    self.assertEqual(r, ['multimedia'])

    _, r = self.anagrams2.get_anagrams("multinational")
    self.assertEqual(r, ['multinational'])

    _, r = self.anagrams2.get_anagrams("multiple")
    self.assertEqual(r, ['multiple'])

    _, r = self.anagrams2.get_anagrams("multiples")
    self.assertEqual(r, ['multiples'])

    _, r = self.anagrams2.get_anagrams("multiplex")
    self.assertEqual(r, ['multiplex'])

    _, r = self.anagrams2.get_anagrams("multiplexed")
    self.assertEqual(r, ['demultiplex', 'multiplexed'])

    _, r = self.anagrams2.get_anagrams("multiplexer")
    self.assertEqual(r, ['multiplexer'])

    _, r = self.anagrams2.get_anagrams("multiplexers")
    self.assertEqual(r, ['multiplexers'])

    _, r = self.anagrams2.get_anagrams("multiplexes")
    self.assertEqual(r, ['multiplexes'])

    _, r = self.anagrams2.get_anagrams("multiplexing")
    self.assertEqual(r, ['multiplexing'])

    _, r = self.anagrams2.get_anagrams("multiplexor")
    self.assertEqual(r, ['multiplexor'])

    _, r = self.anagrams2.get_anagrams("multiplexors")
    self.assertEqual(r, ['multiplexors'])

    _, r = self.anagrams2.get_anagrams("multiplicand")
    self.assertEqual(r, ['multiplicand'])

    _, r = self.anagrams2.get_anagrams("multiplicands")
    self.assertEqual(r, ['multiplicands'])

    _, r = self.anagrams2.get_anagrams("multiplication")
    self.assertEqual(r, ['multiplication'])

    _, r = self.anagrams2.get_anagrams("multiplications")
    self.assertEqual(r, ['multiplications'])

    _, r = self.anagrams2.get_anagrams("multiplicative")
    self.assertEqual(r, ['multiplicative'])

    _, r = self.anagrams2.get_anagrams("multiplicatives")
    self.assertEqual(r, ['multiplicatives'])

    _, r = self.anagrams2.get_anagrams("multiplicity")
    self.assertEqual(r, ['multiplicity'])

    _, r = self.anagrams2.get_anagrams("multiplied")
    self.assertEqual(r, ['multiplied'])

    _, r = self.anagrams2.get_anagrams("multiplier")
    self.assertEqual(r, ['multiplier'])

    _, r = self.anagrams2.get_anagrams("multipliers")
    self.assertEqual(r, ['multipliers'])

    _, r = self.anagrams2.get_anagrams("multiplies")
    self.assertEqual(r, ['multiplies'])

    _, r = self.anagrams2.get_anagrams("multiply")
    self.assertEqual(r, ['multiply'])

    _, r = self.anagrams2.get_anagrams("multiplying")
    self.assertEqual(r, ['multiplying'])

    _, r = self.anagrams2.get_anagrams("multiprocess")
    self.assertEqual(r, ['multiprocess'])

    _, r = self.anagrams2.get_anagrams("multiprocessing")
    self.assertEqual(r, ['multiprocessing'])

    _, r = self.anagrams2.get_anagrams("multiprocessor")
    self.assertEqual(r, ['multiprocessor'])

    _, r = self.anagrams2.get_anagrams("multiprocessors")
    self.assertEqual(r, ['multiprocessors'])

    _, r = self.anagrams2.get_anagrams("multiprogram")
    self.assertEqual(r, ['multiprogram'])

    _, r = self.anagrams2.get_anagrams("multiprogrammed")
    self.assertEqual(r, ['multiprogrammed'])

    _, r = self.anagrams2.get_anagrams("multiprogramming")
    self.assertEqual(r, ['multiprogramming'])

    _, r = self.anagrams2.get_anagrams("multistage")
    self.assertEqual(r, ['multistage'])

    _, r = self.anagrams2.get_anagrams("multitude")
    self.assertEqual(r, ['multitude'])

    _, r = self.anagrams2.get_anagrams("multitudes")
    self.assertEqual(r, ['multitudes'])

    _, r = self.anagrams2.get_anagrams("multiuser")
    self.assertEqual(r, ['multiuser'])

    _, r = self.anagrams2.get_anagrams("multivariate")
    self.assertEqual(r, ['multivariate'])

    _, r = self.anagrams2.get_anagrams("multiword")
    self.assertEqual(r, ['multiword'])

    _, r = self.anagrams2.get_anagrams("mumble")
    self.assertEqual(r, ['mumble'])

    _, r = self.anagrams2.get_anagrams("mumbled")
    self.assertEqual(r, ['mumbled'])

    _, r = self.anagrams2.get_anagrams("mumbler")
    self.assertEqual(r, ['mumbler'])

    _, r = self.anagrams2.get_anagrams("mumblers")
    self.assertEqual(r, ['mumblers'])

    _, r = self.anagrams2.get_anagrams("mumbles")
    self.assertEqual(r, ['mumbles'])

    _, r = self.anagrams2.get_anagrams("mumbling")
    self.assertEqual(r, ['mumbling'])

    _, r = self.anagrams2.get_anagrams("mumblings")
    self.assertEqual(r, ['mumblings'])

    _, r = self.anagrams2.get_anagrams("mumford")
    self.assertEqual(r, ['mumford'])

    _, r = self.anagrams2.get_anagrams("mummies")
    self.assertEqual(r, ['mummies'])

    _, r = self.anagrams2.get_anagrams("mummy")
    self.assertEqual(r, ['mummy'])

    _, r = self.anagrams2.get_anagrams("munch")
    self.assertEqual(r, ['munch'])

    _, r = self.anagrams2.get_anagrams("munched")
    self.assertEqual(r, ['munched'])

    _, r = self.anagrams2.get_anagrams("munching")
    self.assertEqual(r, ['munching'])

    _, r = self.anagrams2.get_anagrams("muncie")
    self.assertEqual(r, ['muncie'])

    _, r = self.anagrams2.get_anagrams("mundane")
    self.assertEqual(r, ['mundane', 'unnamed'])

    _, r = self.anagrams2.get_anagrams("mundanely")
    self.assertEqual(r, ['mundanely'])

    _, r = self.anagrams2.get_anagrams("mundt")
    self.assertEqual(r, ['mundt'])

    _, r = self.anagrams2.get_anagrams("mung")
    self.assertEqual(r, ['mung'])

    _, r = self.anagrams2.get_anagrams("munich")
    self.assertEqual(r, ['munich'])

    _, r = self.anagrams2.get_anagrams("municipal")
    self.assertEqual(r, ['municipal'])

    _, r = self.anagrams2.get_anagrams("municipalities")
    self.assertEqual(r, ['municipalities'])

    _, r = self.anagrams2.get_anagrams("municipality")
    self.assertEqual(r, ['municipality'])

    _, r = self.anagrams2.get_anagrams("municipally")
    self.assertEqual(r, ['municipally'])

    _, r = self.anagrams2.get_anagrams("munition")
    self.assertEqual(r, ['munition'])

    _, r = self.anagrams2.get_anagrams("munitions")
    self.assertEqual(r, ['munitions'])

    _, r = self.anagrams2.get_anagrams("munroe")
    self.assertEqual(r, ['munroe'])

    _, r = self.anagrams2.get_anagrams("munsey")
    self.assertEqual(r, ['munsey'])

    _, r = self.anagrams2.get_anagrams("munson")
    self.assertEqual(r, ['munson'])

    _, r = self.anagrams2.get_anagrams("muong")
    self.assertEqual(r, ['muong'])

    _, r = self.anagrams2.get_anagrams("mural")
    self.assertEqual(r, ['mural'])

    _, r = self.anagrams2.get_anagrams("murder")
    self.assertEqual(r, ['murder'])

    _, r = self.anagrams2.get_anagrams("murdered")
    self.assertEqual(r, ['murdered'])

    _, r = self.anagrams2.get_anagrams("murderer")
    self.assertEqual(r, ['murderer'])

    _, r = self.anagrams2.get_anagrams("murderers")
    self.assertEqual(r, ['murderers'])

    _, r = self.anagrams2.get_anagrams("murdering")
    self.assertEqual(r, ['murdering'])

    _, r = self.anagrams2.get_anagrams("murderous")
    self.assertEqual(r, ['murderous'])

    _, r = self.anagrams2.get_anagrams("murderously")
    self.assertEqual(r, ['murderously'])

    _, r = self.anagrams2.get_anagrams("murders")
    self.assertEqual(r, ['murders'])

    _, r = self.anagrams2.get_anagrams("muriel")
    self.assertEqual(r, ['muriel'])

    _, r = self.anagrams2.get_anagrams("murky")
    self.assertEqual(r, ['murky'])

    _, r = self.anagrams2.get_anagrams("murmur")
    self.assertEqual(r, ['murmur'])

    _, r = self.anagrams2.get_anagrams("murmured")
    self.assertEqual(r, ['murmured'])

    _, r = self.anagrams2.get_anagrams("murmurer")
    self.assertEqual(r, ['murmurer'])

    _, r = self.anagrams2.get_anagrams("murmuring")
    self.assertEqual(r, ['murmuring'])

    _, r = self.anagrams2.get_anagrams("murmurs")
    self.assertEqual(r, ['murmurs'])

    _, r = self.anagrams2.get_anagrams("murphy")
    self.assertEqual(r, ['murphy'])

    _, r = self.anagrams2.get_anagrams("murray")
    self.assertEqual(r, ['murray'])

    _, r = self.anagrams2.get_anagrams("murrow")
    self.assertEqual(r, ['murrow'])

    _, r = self.anagrams2.get_anagrams("muscat")
    self.assertEqual(r, ['muscat'])

    _, r = self.anagrams2.get_anagrams("muscle")
    self.assertEqual(r, ['muscle'])

    _, r = self.anagrams2.get_anagrams("muscled")
    self.assertEqual(r, ['muscled'])

    _, r = self.anagrams2.get_anagrams("muscles")
    self.assertEqual(r, ['muscles'])

    _, r = self.anagrams2.get_anagrams("muscling")
    self.assertEqual(r, ['muscling'])

    _, r = self.anagrams2.get_anagrams("muscovite")
    self.assertEqual(r, ['muscovite'])

    _, r = self.anagrams2.get_anagrams("muscovy")
    self.assertEqual(r, ['muscovy'])

    _, r = self.anagrams2.get_anagrams("muscular")
    self.assertEqual(r, ['muscular'])

    _, r = self.anagrams2.get_anagrams("musculature")
    self.assertEqual(r, ['musculature'])

    _, r = self.anagrams2.get_anagrams("muse")
    self.assertEqual(r, ['muse'])

    _, r = self.anagrams2.get_anagrams("mused")
    self.assertEqual(r, ['mused'])

    _, r = self.anagrams2.get_anagrams("muses")
    self.assertEqual(r, ['muses'])

    _, r = self.anagrams2.get_anagrams("museum")
    self.assertEqual(r, ['museum'])

    _, r = self.anagrams2.get_anagrams("museums")
    self.assertEqual(r, ['museums'])

    _, r = self.anagrams2.get_anagrams("mush")
    self.assertEqual(r, ['hums', 'mush'])

    _, r = self.anagrams2.get_anagrams("mushroom")
    self.assertEqual(r, ['mushroom'])

    _, r = self.anagrams2.get_anagrams("mushroomed")
    self.assertEqual(r, ['mushroomed'])

    _, r = self.anagrams2.get_anagrams("mushrooming")
    self.assertEqual(r, ['mushrooming'])

    _, r = self.anagrams2.get_anagrams("mushrooms")
    self.assertEqual(r, ['mushrooms'])

    _, r = self.anagrams2.get_anagrams("mushy")
    self.assertEqual(r, ['mushy'])

    _, r = self.anagrams2.get_anagrams("music")
    self.assertEqual(r, ['music'])

    _, r = self.anagrams2.get_anagrams("musical")
    self.assertEqual(r, ['musical'])

    _, r = self.anagrams2.get_anagrams("musically")
    self.assertEqual(r, ['musically'])

    _, r = self.anagrams2.get_anagrams("musicals")
    self.assertEqual(r, ['musicals'])

    _, r = self.anagrams2.get_anagrams("musician")
    self.assertEqual(r, ['musician'])

    _, r = self.anagrams2.get_anagrams("musicianly")
    self.assertEqual(r, ['musicianly'])

    _, r = self.anagrams2.get_anagrams("musicians")
    self.assertEqual(r, ['musicians'])

    _, r = self.anagrams2.get_anagrams("musicology")
    self.assertEqual(r, ['musicology'])

    _, r = self.anagrams2.get_anagrams("musing")
    self.assertEqual(r, ['musing'])

    _, r = self.anagrams2.get_anagrams("musings")
    self.assertEqual(r, ['musings'])

    _, r = self.anagrams2.get_anagrams("musk")
    self.assertEqual(r, ['musk'])

    _, r = self.anagrams2.get_anagrams("muskegon")
    self.assertEqual(r, ['muskegon'])

    _, r = self.anagrams2.get_anagrams("musket")
    self.assertEqual(r, ['musket'])

    _, r = self.anagrams2.get_anagrams("muskets")
    self.assertEqual(r, ['muskets'])

    _, r = self.anagrams2.get_anagrams("muskox")
    self.assertEqual(r, ['muskox'])

    _, r = self.anagrams2.get_anagrams("muskoxen")
    self.assertEqual(r, ['muskoxen'])

    _, r = self.anagrams2.get_anagrams("muskrat")
    self.assertEqual(r, ['muskrat'])

    _, r = self.anagrams2.get_anagrams("muskrats")
    self.assertEqual(r, ['muskrats'])

    _, r = self.anagrams2.get_anagrams("musks")
    self.assertEqual(r, ['musks'])

    _, r = self.anagrams2.get_anagrams("muslim")
    self.assertEqual(r, ['muslim'])

    _, r = self.anagrams2.get_anagrams("muslims")
    self.assertEqual(r, ['muslims'])

    _, r = self.anagrams2.get_anagrams("muslin")
    self.assertEqual(r, ['muslin'])

    _, r = self.anagrams2.get_anagrams("mussel")
    self.assertEqual(r, ['mussel'])

    _, r = self.anagrams2.get_anagrams("mussels")
    self.assertEqual(r, ['mussels'])

    _, r = self.anagrams2.get_anagrams("mussolini")
    self.assertEqual(r, ['mussolini'])

    _, r = self.anagrams2.get_anagrams("mussolinis")
    self.assertEqual(r, ['mussolinis'])

    _, r = self.anagrams2.get_anagrams("mussorgsky")
    self.assertEqual(r, ['mussorgsky'])

    _, r = self.anagrams2.get_anagrams("must")
    self.assertEqual(r, ['must', 'smut'])

    _, r = self.anagrams2.get_anagrams("mustache")
    self.assertEqual(r, ['mustache'])

    _, r = self.anagrams2.get_anagrams("mustached")
    self.assertEqual(r, ['mustached'])

    _, r = self.anagrams2.get_anagrams("mustaches")
    self.assertEqual(r, ['mustaches'])

    _, r = self.anagrams2.get_anagrams("mustard")
    self.assertEqual(r, ['mustard'])

    _, r = self.anagrams2.get_anagrams("muster")
    self.assertEqual(r, ['muster', 'sumter'])

    _, r = self.anagrams2.get_anagrams("mustiness")
    self.assertEqual(r, ['mustiness'])

    _, r = self.anagrams2.get_anagrams("musts")
    self.assertEqual(r, ['musts'])

    _, r = self.anagrams2.get_anagrams("musty")
    self.assertEqual(r, ['musty'])

    _, r = self.anagrams2.get_anagrams("mutability")
    self.assertEqual(r, ['mutability'])

    _, r = self.anagrams2.get_anagrams("mutable")
    self.assertEqual(r, ['mutable'])

    _, r = self.anagrams2.get_anagrams("mutableness")
    self.assertEqual(r, ['mutableness'])

    _, r = self.anagrams2.get_anagrams("mutandis")
    self.assertEqual(r, ['mutandis'])

    _, r = self.anagrams2.get_anagrams("mutant")
    self.assertEqual(r, ['mutant'])

    _, r = self.anagrams2.get_anagrams("mutate")
    self.assertEqual(r, ['mutate'])

    _, r = self.anagrams2.get_anagrams("mutated")
    self.assertEqual(r, ['mutated'])

    _, r = self.anagrams2.get_anagrams("mutates")
    self.assertEqual(r, ['mutates'])

    _, r = self.anagrams2.get_anagrams("mutating")
    self.assertEqual(r, ['mutating'])

    _, r = self.anagrams2.get_anagrams("mutation")
    self.assertEqual(r, ['mutation'])

    _, r = self.anagrams2.get_anagrams("mutations")
    self.assertEqual(r, ['mutations'])

    _, r = self.anagrams2.get_anagrams("mutatis")
    self.assertEqual(r, ['mutatis'])

    _, r = self.anagrams2.get_anagrams("mutative")
    self.assertEqual(r, ['mutative'])

    _, r = self.anagrams2.get_anagrams("mute")
    self.assertEqual(r, ['mute'])

    _, r = self.anagrams2.get_anagrams("muted")
    self.assertEqual(r, ['muted'])

    _, r = self.anagrams2.get_anagrams("mutely")
    self.assertEqual(r, ['mutely'])

    _, r = self.anagrams2.get_anagrams("muteness")
    self.assertEqual(r, ['muteness'])

    _, r = self.anagrams2.get_anagrams("mutilate")
    self.assertEqual(r, ['mutilate', 'ultimate'])

    _, r = self.anagrams2.get_anagrams("mutilated")
    self.assertEqual(r, ['mutilated'])

    _, r = self.anagrams2.get_anagrams("mutilates")
    self.assertEqual(r, ['mutilates', 'stimulate'])

    _, r = self.anagrams2.get_anagrams("mutilating")
    self.assertEqual(r, ['mutilating'])

    _, r = self.anagrams2.get_anagrams("mutilation")
    self.assertEqual(r, ['mutilation'])

    _, r = self.anagrams2.get_anagrams("mutinies")
    self.assertEqual(r, ['mutinies'])

    _, r = self.anagrams2.get_anagrams("mutiny")
    self.assertEqual(r, ['mutiny'])

    _, r = self.anagrams2.get_anagrams("mutt")
    self.assertEqual(r, ['mutt'])

    _, r = self.anagrams2.get_anagrams("mutter")
    self.assertEqual(r, ['mutter'])

    _, r = self.anagrams2.get_anagrams("muttered")
    self.assertEqual(r, ['muttered'])

    _, r = self.anagrams2.get_anagrams("mutterer")
    self.assertEqual(r, ['mutterer'])

    _, r = self.anagrams2.get_anagrams("mutterers")
    self.assertEqual(r, ['mutterers'])

    _, r = self.anagrams2.get_anagrams("muttering")
    self.assertEqual(r, ['muttering'])

    _, r = self.anagrams2.get_anagrams("mutters")
    self.assertEqual(r, ['mutters'])

    _, r = self.anagrams2.get_anagrams("mutton")
    self.assertEqual(r, ['mutton'])

    _, r = self.anagrams2.get_anagrams("mutual")
    self.assertEqual(r, ['mutual'])

    _, r = self.anagrams2.get_anagrams("mutually")
    self.assertEqual(r, ['mutually'])

    _, r = self.anagrams2.get_anagrams("muzak")
    self.assertEqual(r, ['muzak'])

    _, r = self.anagrams2.get_anagrams("muzo")
    self.assertEqual(r, ['muzo'])

    _, r = self.anagrams2.get_anagrams("muzzle")
    self.assertEqual(r, ['muzzle'])

    _, r = self.anagrams2.get_anagrams("muzzles")
    self.assertEqual(r, ['muzzles'])

    _, r = self.anagrams2.get_anagrams("my")
    self.assertEqual(r, ['my'])

    _, r = self.anagrams2.get_anagrams("mycenae")
    self.assertEqual(r, ['mycenae'])

    _, r = self.anagrams2.get_anagrams("mycenaean")
    self.assertEqual(r, ['mycenaean'])

    _, r = self.anagrams2.get_anagrams("myers")
    self.assertEqual(r, ['myers'])

    _, r = self.anagrams2.get_anagrams("mynheer")
    self.assertEqual(r, ['mynheer'])

    _, r = self.anagrams2.get_anagrams("myra")
    self.assertEqual(r, ['army', 'mary', 'myra'])

    _, r = self.anagrams2.get_anagrams("myriad")
    self.assertEqual(r, ['myriad'])

    _, r = self.anagrams2.get_anagrams("myron")
    self.assertEqual(r, ['myron'])

    _, r = self.anagrams2.get_anagrams("myrtle")
    self.assertEqual(r, ['myrtle'])

    _, r = self.anagrams2.get_anagrams("myself")
    self.assertEqual(r, ['myself'])

    _, r = self.anagrams2.get_anagrams("mysore")
    self.assertEqual(r, ['mysore'])

    _, r = self.anagrams2.get_anagrams("mysteries")
    self.assertEqual(r, ['mysteries'])

    _, r = self.anagrams2.get_anagrams("mysterious")
    self.assertEqual(r, ['mysterious'])

    _, r = self.anagrams2.get_anagrams("mysteriously")
    self.assertEqual(r, ['mysteriously'])

    _, r = self.anagrams2.get_anagrams("mysteriousness")
    self.assertEqual(r, ['mysteriousness'])

    _, r = self.anagrams2.get_anagrams("mystery")
    self.assertEqual(r, ['mystery'])

    _, r = self.anagrams2.get_anagrams("mystic")
    self.assertEqual(r, ['mystic'])

    _, r = self.anagrams2.get_anagrams("mystical")
    self.assertEqual(r, ['mystical'])

    _, r = self.anagrams2.get_anagrams("mystics")
    self.assertEqual(r, ['mystics'])

    _, r = self.anagrams2.get_anagrams("mystify")
    self.assertEqual(r, ['mystify'])

    _, r = self.anagrams2.get_anagrams("myth")
    self.assertEqual(r, ['myth'])

    _, r = self.anagrams2.get_anagrams("mythical")
    self.assertEqual(r, ['mythical'])

    _, r = self.anagrams2.get_anagrams("mythologies")
    self.assertEqual(r, ['mythologies'])

    _, r = self.anagrams2.get_anagrams("mythology")
    self.assertEqual(r, ['mythology'])

    _, r = self.anagrams2.get_anagrams("nab")
    self.assertEqual(r, ['ban', 'nab'])

    _, r = self.anagrams2.get_anagrams("nabisco")
    self.assertEqual(r, ['nabisco'])

    _, r = self.anagrams2.get_anagrams("nabla")
    self.assertEqual(r, ['banal', 'laban', 'nabla'])

    _, r = self.anagrams2.get_anagrams("nablas")
    self.assertEqual(r, ['nablas'])

    _, r = self.anagrams2.get_anagrams("nadia")
    self.assertEqual(r, ['diana', 'nadia'])

    _, r = self.anagrams2.get_anagrams("nadine")
    self.assertEqual(r, ['dianne', 'nadine'])

    _, r = self.anagrams2.get_anagrams("nadir")
    self.assertEqual(r, ['drain', 'nadir'])

    _, r = self.anagrams2.get_anagrams("nag")
    self.assertEqual(r, ['nag'])

    _, r = self.anagrams2.get_anagrams("nagasaki")
    self.assertEqual(r, ['nagasaki'])

    _, r = self.anagrams2.get_anagrams("nagged")
    self.assertEqual(r, ['nagged'])

    _, r = self.anagrams2.get_anagrams("nagging")
    self.assertEqual(r, ['nagging'])

    _, r = self.anagrams2.get_anagrams("nagoya")
    self.assertEqual(r, ['nagoya'])

    _, r = self.anagrams2.get_anagrams("nags")
    self.assertEqual(r, ['nags', 'sang', 'snag'])

    _, r = self.anagrams2.get_anagrams("nagy")
    self.assertEqual(r, ['nagy'])

    _, r = self.anagrams2.get_anagrams("nail")
    self.assertEqual(r, ['lain', 'nail'])

    _, r = self.anagrams2.get_anagrams("nailed")
    self.assertEqual(r, ['daniel', 'denial', 'nailed'])

    _, r = self.anagrams2.get_anagrams("nailing")
    self.assertEqual(r, ['nailing'])

    _, r = self.anagrams2.get_anagrams("nails")
    self.assertEqual(r, ['nails', 'slain', 'snail'])

    _, r = self.anagrams2.get_anagrams("nair")
    self.assertEqual(r, ['iran', 'nair', 'rain'])

    _, r = self.anagrams2.get_anagrams("nairobi")
    self.assertEqual(r, ['nairobi'])

    _, r = self.anagrams2.get_anagrams("naive")
    self.assertEqual(r, ['naive'])

    _, r = self.anagrams2.get_anagrams("naively")
    self.assertEqual(r, ['naively'])

    _, r = self.anagrams2.get_anagrams("naiveness")
    self.assertEqual(r, ['naiveness'])

    _, r = self.anagrams2.get_anagrams("naivete")
    self.assertEqual(r, ['naivete'])

    _, r = self.anagrams2.get_anagrams("nakamura")
    self.assertEqual(r, ['nakamura'])

    _, r = self.anagrams2.get_anagrams("nakayama")
    self.assertEqual(r, ['nakayama'])

    _, r = self.anagrams2.get_anagrams("naked")
    self.assertEqual(r, ['knead', 'naked'])

    _, r = self.anagrams2.get_anagrams("nakedly")
    self.assertEqual(r, ['nakedly'])

    _, r = self.anagrams2.get_anagrams("nakedness")
    self.assertEqual(r, ['nakedness'])

    _, r = self.anagrams2.get_anagrams("nakoma")
    self.assertEqual(r, ['nakoma'])

    _, r = self.anagrams2.get_anagrams("name")
    self.assertEqual(r, ['amen', 'mane', 'mean', 'name'])

    _, r = self.anagrams2.get_anagrams("nameable")
    self.assertEqual(r, ['amenable', 'nameable'])

    _, r = self.anagrams2.get_anagrams("named")
    self.assertEqual(r, ['amend', 'named'])

    _, r = self.anagrams2.get_anagrams("nameless")
    self.assertEqual(r, ['lameness', 'maleness', 'nameless', 'salesmen'])

    _, r = self.anagrams2.get_anagrams("namelessly")
    self.assertEqual(r, ['namelessly'])

    _, r = self.anagrams2.get_anagrams("namely")
    self.assertEqual(r, ['laymen', 'manley', 'meanly', 'namely'])

    _, r = self.anagrams2.get_anagrams("namer")
    self.assertEqual(r, ['namer'])

    _, r = self.anagrams2.get_anagrams("namers")
    self.assertEqual(r, ['namers'])

    _, r = self.anagrams2.get_anagrams("names")
    self.assertEqual(r, ['manes', 'means', 'names'])

    _, r = self.anagrams2.get_anagrams("namesake")
    self.assertEqual(r, ['namesake'])

    _, r = self.anagrams2.get_anagrams("namesakes")
    self.assertEqual(r, ['namesakes'])

    _, r = self.anagrams2.get_anagrams("naming")
    self.assertEqual(r, ['naming'])

    _, r = self.anagrams2.get_anagrams("nan")
    self.assertEqual(r, ['ann', 'nan'])

    _, r = self.anagrams2.get_anagrams("nancy")
    self.assertEqual(r, ['canny', 'nancy'])

    _, r = self.anagrams2.get_anagrams("nanette")
    self.assertEqual(r, ['annette', 'nanette'])

    _, r = self.anagrams2.get_anagrams("nanking")
    self.assertEqual(r, ['nanking'])

    _, r = self.anagrams2.get_anagrams("nanoinstruction")
    self.assertEqual(r, ['nanoinstruction'])

    _, r = self.anagrams2.get_anagrams("nanoinstructions")
    self.assertEqual(r, ['nanoinstructions'])

    _, r = self.anagrams2.get_anagrams("nanook")
    self.assertEqual(r, ['nanook'])

    _, r = self.anagrams2.get_anagrams("nanoprogram")
    self.assertEqual(r, ['nanoprogram'])

    _, r = self.anagrams2.get_anagrams("nanoprogramming")
    self.assertEqual(r, ['nanoprogramming'])

    _, r = self.anagrams2.get_anagrams("nanosecond")
    self.assertEqual(r, ['nanosecond'])

    _, r = self.anagrams2.get_anagrams("nanoseconds")
    self.assertEqual(r, ['nanoseconds'])

    _, r = self.anagrams2.get_anagrams("nanostore")
    self.assertEqual(r, ['nanostore'])

    _, r = self.anagrams2.get_anagrams("nanostores")
    self.assertEqual(r, ['nanostores'])

    _, r = self.anagrams2.get_anagrams("nantucket")
    self.assertEqual(r, ['nantucket'])

    _, r = self.anagrams2.get_anagrams("naomi")
    self.assertEqual(r, ['amino', 'naomi'])

    _, r = self.anagrams2.get_anagrams("nap")
    self.assertEqual(r, ['nap', 'pan'])

    _, r = self.anagrams2.get_anagrams("napkin")
    self.assertEqual(r, ['napkin'])

    _, r = self.anagrams2.get_anagrams("napkins")
    self.assertEqual(r, ['napkins'])

    _, r = self.anagrams2.get_anagrams("naples")
    self.assertEqual(r, ['naples', 'panels', 'planes'])

    _, r = self.anagrams2.get_anagrams("napoleon")
    self.assertEqual(r, ['napoleon'])

    _, r = self.anagrams2.get_anagrams("napoleonic")
    self.assertEqual(r, ['napoleonic'])

    _, r = self.anagrams2.get_anagrams("napoleonize")
    self.assertEqual(r, ['napoleonize'])

    _, r = self.anagrams2.get_anagrams("napoleonizes")
    self.assertEqual(r, ['napoleonizes'])

    _, r = self.anagrams2.get_anagrams("naps")
    self.assertEqual(r, ['naps', 'pans', 'snap', 'span'])

    _, r = self.anagrams2.get_anagrams("narbonne")
    self.assertEqual(r, ['narbonne'])

    _, r = self.anagrams2.get_anagrams("narcissus")
    self.assertEqual(r, ['narcissus'])

    _, r = self.anagrams2.get_anagrams("narcotic")
    self.assertEqual(r, ['narcotic'])

    _, r = self.anagrams2.get_anagrams("narcotics")
    self.assertEqual(r, ['narcotics'])

    _, r = self.anagrams2.get_anagrams("narragansett")
    self.assertEqual(r, ['narragansett'])

    _, r = self.anagrams2.get_anagrams("narrate")
    self.assertEqual(r, ['narrate'])

    _, r = self.anagrams2.get_anagrams("narration")
    self.assertEqual(r, ['narration'])

    _, r = self.anagrams2.get_anagrams("narrative")
    self.assertEqual(r, ['narrative'])

    _, r = self.anagrams2.get_anagrams("narratives")
    self.assertEqual(r, ['narratives'])

    _, r = self.anagrams2.get_anagrams("narrow")
    self.assertEqual(r, ['narrow'])

    _, r = self.anagrams2.get_anagrams("narrowed")
    self.assertEqual(r, ['narrowed'])

    _, r = self.anagrams2.get_anagrams("narrower")
    self.assertEqual(r, ['narrower'])

    _, r = self.anagrams2.get_anagrams("narrowest")
    self.assertEqual(r, ['narrowest'])

    _, r = self.anagrams2.get_anagrams("narrowing")
    self.assertEqual(r, ['narrowing'])

    _, r = self.anagrams2.get_anagrams("narrowly")
    self.assertEqual(r, ['narrowly'])

    _, r = self.anagrams2.get_anagrams("narrowness")
    self.assertEqual(r, ['narrowness'])

    _, r = self.anagrams2.get_anagrams("narrows")
    self.assertEqual(r, ['narrows'])

    _, r = self.anagrams2.get_anagrams("nary")
    self.assertEqual(r, ['nary', 'ryan', 'yarn'])

    _, r = self.anagrams2.get_anagrams("nasa")
    self.assertEqual(r, ['nasa', 'sana'])

    _, r = self.anagrams2.get_anagrams("nasal")
    self.assertEqual(r, ['nasal'])

    _, r = self.anagrams2.get_anagrams("nasally")
    self.assertEqual(r, ['nasally'])

    _, r = self.anagrams2.get_anagrams("nasas")
    self.assertEqual(r, ['nasas'])

    _, r = self.anagrams2.get_anagrams("nash")
    self.assertEqual(r, ['hans', 'nash'])

    _, r = self.anagrams2.get_anagrams("nashua")
    self.assertEqual(r, ['nashua'])

    _, r = self.anagrams2.get_anagrams("nashville")
    self.assertEqual(r, ['nashville'])

    _, r = self.anagrams2.get_anagrams("nassau")
    self.assertEqual(r, ['nassau'])

    _, r = self.anagrams2.get_anagrams("nastier")
    self.assertEqual(r, ['nastier', 'retains', 'retinas'])

    _, r = self.anagrams2.get_anagrams("nastiest")
    self.assertEqual(r, ['nastiest'])

    _, r = self.anagrams2.get_anagrams("nastily")
    self.assertEqual(r, ['nastily', 'saintly'])

    _, r = self.anagrams2.get_anagrams("nastiness")
    self.assertEqual(r, ['nastiness'])

    _, r = self.anagrams2.get_anagrams("nasty")
    self.assertEqual(r, ['nasty'])

    _, r = self.anagrams2.get_anagrams("nat")
    self.assertEqual(r, ['ant', 'nat', 'tan'])

    _, r = self.anagrams2.get_anagrams("natal")
    self.assertEqual(r, ['natal'])

    _, r = self.anagrams2.get_anagrams("natalie")
    self.assertEqual(r, ['natalie'])

    _, r = self.anagrams2.get_anagrams("natchez")
    self.assertEqual(r, ['natchez'])

    _, r = self.anagrams2.get_anagrams("nate")
    self.assertEqual(r, ['ante', 'nate', 'neat'])

    _, r = self.anagrams2.get_anagrams("nathan")
    self.assertEqual(r, ['nathan'])

    _, r = self.anagrams2.get_anagrams("nathaniel")
    self.assertEqual(r, ['nathaniel'])

    _, r = self.anagrams2.get_anagrams("nation")
    self.assertEqual(r, ['anoint', 'nation'])

    _, r = self.anagrams2.get_anagrams("national")
    self.assertEqual(r, ['national'])

    _, r = self.anagrams2.get_anagrams("nationalist")
    self.assertEqual(r, ['nationalist'])

    _, r = self.anagrams2.get_anagrams("nationalists")
    self.assertEqual(r, ['nationalists'])

    _, r = self.anagrams2.get_anagrams("nationalities")
    self.assertEqual(r, ['nationalities'])

    _, r = self.anagrams2.get_anagrams("nationality")
    self.assertEqual(r, ['nationality'])

    _, r = self.anagrams2.get_anagrams("nationalization")
    self.assertEqual(r, ['nationalization'])

    _, r = self.anagrams2.get_anagrams("nationalize")
    self.assertEqual(r, ['nationalize'])

    _, r = self.anagrams2.get_anagrams("nationalized")
    self.assertEqual(r, ['nationalized'])

    _, r = self.anagrams2.get_anagrams("nationalizes")
    self.assertEqual(r, ['nationalizes'])

    _, r = self.anagrams2.get_anagrams("nationalizing")
    self.assertEqual(r, ['nationalizing'])

    _, r = self.anagrams2.get_anagrams("nationally")
    self.assertEqual(r, ['nationally'])

    _, r = self.anagrams2.get_anagrams("nationals")
    self.assertEqual(r, ['nationals'])

    _, r = self.anagrams2.get_anagrams("nationhood")
    self.assertEqual(r, ['nationhood'])

    _, r = self.anagrams2.get_anagrams("nations")
    self.assertEqual(r, ['anoints', 'nations'])

    _, r = self.anagrams2.get_anagrams("nationwide")
    self.assertEqual(r, ['nationwide'])

    _, r = self.anagrams2.get_anagrams("native")
    self.assertEqual(r, ['native'])

    _, r = self.anagrams2.get_anagrams("natively")
    self.assertEqual(r, ['natively'])

    _, r = self.anagrams2.get_anagrams("natives")
    self.assertEqual(r, ['natives'])

    _, r = self.anagrams2.get_anagrams("nativity")
    self.assertEqual(r, ['nativity'])

    _, r = self.anagrams2.get_anagrams("nato")
    self.assertEqual(r, ['nato'])

    _, r = self.anagrams2.get_anagrams("natos")
    self.assertEqual(r, ['aston', 'natos', 'santo'])

    _, r = self.anagrams2.get_anagrams("natural")
    self.assertEqual(r, ['natural'])

    _, r = self.anagrams2.get_anagrams("naturalism")
    self.assertEqual(r, ['naturalism'])

    _, r = self.anagrams2.get_anagrams("naturalist")
    self.assertEqual(r, ['naturalist'])

    _, r = self.anagrams2.get_anagrams("naturalization")
    self.assertEqual(r, ['naturalization'])

    _, r = self.anagrams2.get_anagrams("naturally")
    self.assertEqual(r, ['naturally'])

    _, r = self.anagrams2.get_anagrams("naturalness")
    self.assertEqual(r, ['naturalness'])

    _, r = self.anagrams2.get_anagrams("naturals")
    self.assertEqual(r, ['naturals'])

    _, r = self.anagrams2.get_anagrams("nature")
    self.assertEqual(r, ['nature'])

    _, r = self.anagrams2.get_anagrams("natured")
    self.assertEqual(r, ['natured'])

    _, r = self.anagrams2.get_anagrams("natures")
    self.assertEqual(r, ['natures', 'saunter'])

    _, r = self.anagrams2.get_anagrams("naught")
    self.assertEqual(r, ['naught'])

    _, r = self.anagrams2.get_anagrams("naughtier")
    self.assertEqual(r, ['naughtier'])

    _, r = self.anagrams2.get_anagrams("naughtiness")
    self.assertEqual(r, ['naughtiness'])

    _, r = self.anagrams2.get_anagrams("naughty")
    self.assertEqual(r, ['naughty'])

    _, r = self.anagrams2.get_anagrams("naur")
    self.assertEqual(r, ['naur'])

    _, r = self.anagrams2.get_anagrams("nausea")
    self.assertEqual(r, ['nausea'])

    _, r = self.anagrams2.get_anagrams("nauseate")
    self.assertEqual(r, ['nauseate'])

    _, r = self.anagrams2.get_anagrams("nauseum")
    self.assertEqual(r, ['nauseum'])

    _, r = self.anagrams2.get_anagrams("navaho")
    self.assertEqual(r, ['navaho'])

    _, r = self.anagrams2.get_anagrams("navajo")
    self.assertEqual(r, ['navajo'])

    _, r = self.anagrams2.get_anagrams("naval")
    self.assertEqual(r, ['naval'])

    _, r = self.anagrams2.get_anagrams("navally")
    self.assertEqual(r, ['navally'])

    _, r = self.anagrams2.get_anagrams("navel")
    self.assertEqual(r, ['navel'])

    _, r = self.anagrams2.get_anagrams("navies")
    self.assertEqual(r, ['navies'])

    _, r = self.anagrams2.get_anagrams("navigable")
    self.assertEqual(r, ['navigable'])

    _, r = self.anagrams2.get_anagrams("navigate")
    self.assertEqual(r, ['navigate'])

    _, r = self.anagrams2.get_anagrams("navigated")
    self.assertEqual(r, ['navigated'])

    _, r = self.anagrams2.get_anagrams("navigates")
    self.assertEqual(r, ['navigates'])

    _, r = self.anagrams2.get_anagrams("navigating")
    self.assertEqual(r, ['navigating'])

    _, r = self.anagrams2.get_anagrams("navigation")
    self.assertEqual(r, ['navigation'])

    _, r = self.anagrams2.get_anagrams("navigator")
    self.assertEqual(r, ['navigator'])

    _, r = self.anagrams2.get_anagrams("navigators")
    self.assertEqual(r, ['navigators'])

    _, r = self.anagrams2.get_anagrams("navona")
    self.assertEqual(r, ['navona'])

    _, r = self.anagrams2.get_anagrams("navy")
    self.assertEqual(r, ['navy'])

    _, r = self.anagrams2.get_anagrams("nay")
    self.assertEqual(r, ['any', 'nay'])

    _, r = self.anagrams2.get_anagrams("nazarene")
    self.assertEqual(r, ['nazarene'])

    _, r = self.anagrams2.get_anagrams("nazareth")
    self.assertEqual(r, ['nazareth'])

    _, r = self.anagrams2.get_anagrams("nazi")
    self.assertEqual(r, ['nazi'])

    _, r = self.anagrams2.get_anagrams("nazis")
    self.assertEqual(r, ['nazis'])

    _, r = self.anagrams2.get_anagrams("nazism")
    self.assertEqual(r, ['nazism'])

    _, r = self.anagrams2.get_anagrams("ndjamena")
    self.assertEqual(r, ['ndjamena'])

    _, r = self.anagrams2.get_anagrams("neal")
    self.assertEqual(r, ['lane', 'lean', 'lena', 'neal'])

    _, r = self.anagrams2.get_anagrams("neanderthal")
    self.assertEqual(r, ['neanderthal'])

    _, r = self.anagrams2.get_anagrams("neapolitan")
    self.assertEqual(r, ['neapolitan'])

    _, r = self.anagrams2.get_anagrams("near")
    self.assertEqual(r, ['earn', 'near', 'rena'])

    _, r = self.anagrams2.get_anagrams("nearby")
    self.assertEqual(r, ['barney', 'nearby'])

    _, r = self.anagrams2.get_anagrams("neared")
    self.assertEqual(r, ['earned', 'endear', 'neared'])

    _, r = self.anagrams2.get_anagrams("nearer")
    self.assertEqual(r, ['earner', 'nearer'])

    _, r = self.anagrams2.get_anagrams("nearest")
    self.assertEqual(r, ['earnest', 'eastern', 'nearest'])

    _, r = self.anagrams2.get_anagrams("nearing")
    self.assertEqual(r, ['earning', 'nearing'])

    _, r = self.anagrams2.get_anagrams("nearly")
    self.assertEqual(r, ['nearly'])

    _, r = self.anagrams2.get_anagrams("nearness")
    self.assertEqual(r, ['ensnares', 'nearness'])

    _, r = self.anagrams2.get_anagrams("nears")
    self.assertEqual(r, ['earns', 'nears', 'saner', 'snare'])

    _, r = self.anagrams2.get_anagrams("nearsighted")
    self.assertEqual(r, ['nearsighted'])

    _, r = self.anagrams2.get_anagrams("neat")
    self.assertEqual(r, ['ante', 'nate', 'neat'])

    _, r = self.anagrams2.get_anagrams("neater")
    self.assertEqual(r, ['neater'])

    _, r = self.anagrams2.get_anagrams("neatest")
    self.assertEqual(r, ['neatest'])

    _, r = self.anagrams2.get_anagrams("neatly")
    self.assertEqual(r, ['neatly'])

    _, r = self.anagrams2.get_anagrams("neatness")
    self.assertEqual(r, ['neatness'])

    _, r = self.anagrams2.get_anagrams("nebraska")
    self.assertEqual(r, ['nebraska'])

    _, r = self.anagrams2.get_anagrams("nebraskan")
    self.assertEqual(r, ['nebraskan'])

    _, r = self.anagrams2.get_anagrams("nebuchadnezzar")
    self.assertEqual(r, ['nebuchadnezzar'])

    _, r = self.anagrams2.get_anagrams("nebula")
    self.assertEqual(r, ['nebula', 'unable'])

    _, r = self.anagrams2.get_anagrams("nebular")
    self.assertEqual(r, ['nebular'])

    _, r = self.anagrams2.get_anagrams("nebulous")
    self.assertEqual(r, ['nebulous'])

    _, r = self.anagrams2.get_anagrams("necessaries")
    self.assertEqual(r, ['necessaries'])

    _, r = self.anagrams2.get_anagrams("necessarily")
    self.assertEqual(r, ['necessarily'])

    _, r = self.anagrams2.get_anagrams("necessary")
    self.assertEqual(r, ['necessary'])

    _, r = self.anagrams2.get_anagrams("necessitate")
    self.assertEqual(r, ['necessitate'])

    _, r = self.anagrams2.get_anagrams("necessitated")
    self.assertEqual(r, ['necessitated'])

    _, r = self.anagrams2.get_anagrams("necessitates")
    self.assertEqual(r, ['necessitates'])

    _, r = self.anagrams2.get_anagrams("necessitating")
    self.assertEqual(r, ['necessitating'])

    _, r = self.anagrams2.get_anagrams("necessitation")
    self.assertEqual(r, ['necessitation'])

    _, r = self.anagrams2.get_anagrams("necessities")
    self.assertEqual(r, ['necessities'])

    _, r = self.anagrams2.get_anagrams("necessity")
    self.assertEqual(r, ['necessity'])

    _, r = self.anagrams2.get_anagrams("neck")
    self.assertEqual(r, ['neck'])

    _, r = self.anagrams2.get_anagrams("necking")
    self.assertEqual(r, ['necking'])

    _, r = self.anagrams2.get_anagrams("necklace")
    self.assertEqual(r, ['necklace'])

    _, r = self.anagrams2.get_anagrams("necklaces")
    self.assertEqual(r, ['necklaces'])

    _, r = self.anagrams2.get_anagrams("neckline")
    self.assertEqual(r, ['neckline'])

    _, r = self.anagrams2.get_anagrams("necks")
    self.assertEqual(r, ['necks'])

    _, r = self.anagrams2.get_anagrams("necktie")
    self.assertEqual(r, ['necktie'])

    _, r = self.anagrams2.get_anagrams("neckties")
    self.assertEqual(r, ['neckties'])

    _, r = self.anagrams2.get_anagrams("necrosis")
    self.assertEqual(r, ['ericsson', 'necrosis'])

    _, r = self.anagrams2.get_anagrams("nectar")
    self.assertEqual(r, ['cretan', 'nectar', 'recant', 'trance'])

    _, r = self.anagrams2.get_anagrams("ned")
    self.assertEqual(r, ['den', 'end', 'ned'])

    _, r = self.anagrams2.get_anagrams("need")
    self.assertEqual(r, ['eden', 'need'])

    _, r = self.anagrams2.get_anagrams("needed")
    self.assertEqual(r, ['needed'])

    _, r = self.anagrams2.get_anagrams("needful")
    self.assertEqual(r, ['needful'])

    _, r = self.anagrams2.get_anagrams("needham")
    self.assertEqual(r, ['needham'])

    _, r = self.anagrams2.get_anagrams("needing")
    self.assertEqual(r, ['needing'])

    _, r = self.anagrams2.get_anagrams("needle")
    self.assertEqual(r, ['needle'])

    _, r = self.anagrams2.get_anagrams("needled")
    self.assertEqual(r, ['needled'])

    _, r = self.anagrams2.get_anagrams("needler")
    self.assertEqual(r, ['needler'])

    _, r = self.anagrams2.get_anagrams("needlers")
    self.assertEqual(r, ['needlers'])

    _, r = self.anagrams2.get_anagrams("needles")
    self.assertEqual(r, ['needles'])

    _, r = self.anagrams2.get_anagrams("needless")
    self.assertEqual(r, ['lessened', 'needless'])

    _, r = self.anagrams2.get_anagrams("needlessly")
    self.assertEqual(r, ['needlessly'])

    _, r = self.anagrams2.get_anagrams("needlessness")
    self.assertEqual(r, ['needlessness'])

    _, r = self.anagrams2.get_anagrams("needlework")
    self.assertEqual(r, ['needlework'])

    _, r = self.anagrams2.get_anagrams("needling")
    self.assertEqual(r, ['needling'])

    _, r = self.anagrams2.get_anagrams("needs")
    self.assertEqual(r, ['dense', 'needs', 'sneed'])

    _, r = self.anagrams2.get_anagrams("needy")
    self.assertEqual(r, ['needy'])

    _, r = self.anagrams2.get_anagrams("neff")
    self.assertEqual(r, ['neff'])

    _, r = self.anagrams2.get_anagrams("negate")
    self.assertEqual(r, ['negate'])

    _, r = self.anagrams2.get_anagrams("negated")
    self.assertEqual(r, ['negated'])

    _, r = self.anagrams2.get_anagrams("negates")
    self.assertEqual(r, ['negates'])

    _, r = self.anagrams2.get_anagrams("negating")
    self.assertEqual(r, ['negating'])

    _, r = self.anagrams2.get_anagrams("negation")
    self.assertEqual(r, ['antigone', 'negation'])

    _, r = self.anagrams2.get_anagrams("negations")
    self.assertEqual(r, ['negations'])

    _, r = self.anagrams2.get_anagrams("negative")
    self.assertEqual(r, ['negative'])

    _, r = self.anagrams2.get_anagrams("negatively")
    self.assertEqual(r, ['negatively'])

    _, r = self.anagrams2.get_anagrams("negatives")
    self.assertEqual(r, ['negatives'])

    _, r = self.anagrams2.get_anagrams("negator")
    self.assertEqual(r, ['negator'])

    _, r = self.anagrams2.get_anagrams("negators")
    self.assertEqual(r, ['negators'])

    _, r = self.anagrams2.get_anagrams("neglect")
    self.assertEqual(r, ['neglect'])

    _, r = self.anagrams2.get_anagrams("neglected")
    self.assertEqual(r, ['neglected'])

    _, r = self.anagrams2.get_anagrams("neglecting")
    self.assertEqual(r, ['neglecting'])

    _, r = self.anagrams2.get_anagrams("neglects")
    self.assertEqual(r, ['neglects'])

    _, r = self.anagrams2.get_anagrams("negligee")
    self.assertEqual(r, ['negligee'])

    _, r = self.anagrams2.get_anagrams("negligence")
    self.assertEqual(r, ['negligence'])

    _, r = self.anagrams2.get_anagrams("negligent")
    self.assertEqual(r, ['negligent'])

    _, r = self.anagrams2.get_anagrams("negligible")
    self.assertEqual(r, ['negligible'])

    _, r = self.anagrams2.get_anagrams("negotiable")
    self.assertEqual(r, ['negotiable'])

    _, r = self.anagrams2.get_anagrams("negotiate")
    self.assertEqual(r, ['negotiate'])

    _, r = self.anagrams2.get_anagrams("negotiated")
    self.assertEqual(r, ['negotiated'])

    _, r = self.anagrams2.get_anagrams("negotiates")
    self.assertEqual(r, ['negotiates'])

    _, r = self.anagrams2.get_anagrams("negotiating")
    self.assertEqual(r, ['negotiating'])

    _, r = self.anagrams2.get_anagrams("negotiation")
    self.assertEqual(r, ['negotiation'])

    _, r = self.anagrams2.get_anagrams("negotiations")
    self.assertEqual(r, ['negotiations'])

    _, r = self.anagrams2.get_anagrams("negro")
    self.assertEqual(r, ['goner', 'goren', 'negro'])

    _, r = self.anagrams2.get_anagrams("negroes")
    self.assertEqual(r, ['negroes'])

    _, r = self.anagrams2.get_anagrams("negroid")
    self.assertEqual(r, ['ignored', 'negroid'])

    _, r = self.anagrams2.get_anagrams("negroization")
    self.assertEqual(r, ['negroization'])

    _, r = self.anagrams2.get_anagrams("negroizations")
    self.assertEqual(r, ['negroizations'])

    _, r = self.anagrams2.get_anagrams("negroize")
    self.assertEqual(r, ['negroize'])

    _, r = self.anagrams2.get_anagrams("negroizes")
    self.assertEqual(r, ['negroizes'])

    _, r = self.anagrams2.get_anagrams("nehru")
    self.assertEqual(r, ['nehru'])

    _, r = self.anagrams2.get_anagrams("neigh")
    self.assertEqual(r, ['hinge', 'neigh'])

    _, r = self.anagrams2.get_anagrams("neighbor")
    self.assertEqual(r, ['neighbor'])

    _, r = self.anagrams2.get_anagrams("neighborhood")
    self.assertEqual(r, ['neighborhood'])

    _, r = self.anagrams2.get_anagrams("neighborhoods")
    self.assertEqual(r, ['neighborhoods'])

    _, r = self.anagrams2.get_anagrams("neighboring")
    self.assertEqual(r, ['neighboring'])

    _, r = self.anagrams2.get_anagrams("neighborly")
    self.assertEqual(r, ['neighborly'])

    _, r = self.anagrams2.get_anagrams("neighbors")
    self.assertEqual(r, ['neighbors'])

    _, r = self.anagrams2.get_anagrams("neil")
    self.assertEqual(r, ['lien', 'line', 'neil', 'nile'])

    _, r = self.anagrams2.get_anagrams("neither")
    self.assertEqual(r, ['neither', 'therein'])

    _, r = self.anagrams2.get_anagrams("nell")
    self.assertEqual(r, ['nell'])

    _, r = self.anagrams2.get_anagrams("nellie")
    self.assertEqual(r, ['nellie'])

    _, r = self.anagrams2.get_anagrams("nelsen")
    self.assertEqual(r, ['nelsen'])

    _, r = self.anagrams2.get_anagrams("nelson")
    self.assertEqual(r, ['nelson'])

    _, r = self.anagrams2.get_anagrams("nemesis")
    self.assertEqual(r, ['nemesis', 'siemens'])

    _, r = self.anagrams2.get_anagrams("neoclassic")
    self.assertEqual(r, ['neoclassic'])

    _, r = self.anagrams2.get_anagrams("neon")
    self.assertEqual(r, ['neon', 'none'])

    _, r = self.anagrams2.get_anagrams("neonatal")
    self.assertEqual(r, ['neonatal'])

    _, r = self.anagrams2.get_anagrams("neophyte")
    self.assertEqual(r, ['neophyte'])

    _, r = self.anagrams2.get_anagrams("neophytes")
    self.assertEqual(r, ['neophytes'])

    _, r = self.anagrams2.get_anagrams("nepal")
    self.assertEqual(r, ['nepal', 'panel', 'penal', 'plane'])

    _, r = self.anagrams2.get_anagrams("nepali")
    self.assertEqual(r, ['alpine', 'nepali'])

    _, r = self.anagrams2.get_anagrams("nephew")
    self.assertEqual(r, ['nephew'])

    _, r = self.anagrams2.get_anagrams("nephews")
    self.assertEqual(r, ['nephews'])

    _, r = self.anagrams2.get_anagrams("neptune")
    self.assertEqual(r, ['neptune'])

    _, r = self.anagrams2.get_anagrams("nero")
    self.assertEqual(r, ['nero', 'reno'])

    _, r = self.anagrams2.get_anagrams("nerve")
    self.assertEqual(r, ['nerve', 'never', 'verne'])

    _, r = self.anagrams2.get_anagrams("nerves")
    self.assertEqual(r, ['nerves', 'severn'])

    _, r = self.anagrams2.get_anagrams("nervous")
    self.assertEqual(r, ['nervous'])

    _, r = self.anagrams2.get_anagrams("nervously")
    self.assertEqual(r, ['nervously'])

    _, r = self.anagrams2.get_anagrams("nervousness")
    self.assertEqual(r, ['nervousness'])

    _, r = self.anagrams2.get_anagrams("ness")
    self.assertEqual(r, ['ness'])

    _, r = self.anagrams2.get_anagrams("nest")
    self.assertEqual(r, ['nest', 'nets', 'sent', 'tens'])

    _, r = self.anagrams2.get_anagrams("nested")
    self.assertEqual(r, ['nested', 'tensed'])

    _, r = self.anagrams2.get_anagrams("nester")
    self.assertEqual(r, ['enters', 'ernest', 'nester', 'resent', 'tenser'])

    _, r = self.anagrams2.get_anagrams("nesting")
    self.assertEqual(r, ['nesting', 'tensing'])

    _, r = self.anagrams2.get_anagrams("nestle")
    self.assertEqual(r, ['nestle'])

    _, r = self.anagrams2.get_anagrams("nestled")
    self.assertEqual(r, ['nestled'])

    _, r = self.anagrams2.get_anagrams("nestles")
    self.assertEqual(r, ['nestles'])

    _, r = self.anagrams2.get_anagrams("nestling")
    self.assertEqual(r, ['nestling'])

    _, r = self.anagrams2.get_anagrams("nestor")
    self.assertEqual(r, ['nestor', 'sterno', 'tenors'])

    _, r = self.anagrams2.get_anagrams("nests")
    self.assertEqual(r, ['nests'])

    _, r = self.anagrams2.get_anagrams("net")
    self.assertEqual(r, ['net', 'ten'])

    _, r = self.anagrams2.get_anagrams("nether")
    self.assertEqual(r, ['nether'])

    _, r = self.anagrams2.get_anagrams("netherlands")
    self.assertEqual(r, ['netherlands'])

    _, r = self.anagrams2.get_anagrams("nets")
    self.assertEqual(r, ['nest', 'nets', 'sent', 'tens'])

    _, r = self.anagrams2.get_anagrams("netted")
    self.assertEqual(r, ['netted', 'tented'])

    _, r = self.anagrams2.get_anagrams("netting")
    self.assertEqual(r, ['netting', 'tenting'])

    _, r = self.anagrams2.get_anagrams("nettle")
    self.assertEqual(r, ['nettle', 'telnet', 'telnet'])

    _, r = self.anagrams2.get_anagrams("nettled")
    self.assertEqual(r, ['nettled'])

    _, r = self.anagrams2.get_anagrams("network")
    self.assertEqual(r, ['network'])

    _, r = self.anagrams2.get_anagrams("networked")
    self.assertEqual(r, ['networked'])

    _, r = self.anagrams2.get_anagrams("networking")
    self.assertEqual(r, ['networking'])

    _, r = self.anagrams2.get_anagrams("networks")
    self.assertEqual(r, ['networks'])

    _, r = self.anagrams2.get_anagrams("neumann")
    self.assertEqual(r, ['neumann'])

    _, r = self.anagrams2.get_anagrams("neural")
    self.assertEqual(r, ['lauren', 'neural', 'unreal'])

    _, r = self.anagrams2.get_anagrams("neuritis")
    self.assertEqual(r, ['neuritis'])

    _, r = self.anagrams2.get_anagrams("neurological")
    self.assertEqual(r, ['neurological'])

    _, r = self.anagrams2.get_anagrams("neurologists")
    self.assertEqual(r, ['neurologists'])

    _, r = self.anagrams2.get_anagrams("neuron")
    self.assertEqual(r, ['neuron'])

    _, r = self.anagrams2.get_anagrams("neurons")
    self.assertEqual(r, ['neurons'])

    _, r = self.anagrams2.get_anagrams("neuroses")
    self.assertEqual(r, ['neuroses'])

    _, r = self.anagrams2.get_anagrams("neurosis")
    self.assertEqual(r, ['neurosis'])

    _, r = self.anagrams2.get_anagrams("neurotic")
    self.assertEqual(r, ['neurotic'])

    _, r = self.anagrams2.get_anagrams("neuter")
    self.assertEqual(r, ['neuter', 'tenure'])

    _, r = self.anagrams2.get_anagrams("neutral")
    self.assertEqual(r, ['laurent', 'neutral', 'renault'])

    _, r = self.anagrams2.get_anagrams("neutralities")
    self.assertEqual(r, ['neutralities'])

    _, r = self.anagrams2.get_anagrams("neutrality")
    self.assertEqual(r, ['neutrality'])

    _, r = self.anagrams2.get_anagrams("neutralize")
    self.assertEqual(r, ['neutralize'])

    _, r = self.anagrams2.get_anagrams("neutralized")
    self.assertEqual(r, ['neutralized'])

    _, r = self.anagrams2.get_anagrams("neutralizing")
    self.assertEqual(r, ['neutralizing'])

    _, r = self.anagrams2.get_anagrams("neutrally")
    self.assertEqual(r, ['neutrally'])

    _, r = self.anagrams2.get_anagrams("neutrino")
    self.assertEqual(r, ['neutrino'])

    _, r = self.anagrams2.get_anagrams("neutrinos")
    self.assertEqual(r, ['neutrinos'])

    _, r = self.anagrams2.get_anagrams("neutron")
    self.assertEqual(r, ['neutron'])

    _, r = self.anagrams2.get_anagrams("neva")
    self.assertEqual(r, ['neva', 'vane'])

    _, r = self.anagrams2.get_anagrams("nevada")
    self.assertEqual(r, ['nevada'])

    _, r = self.anagrams2.get_anagrams("never")
    self.assertEqual(r, ['nerve', 'never', 'verne'])

    _, r = self.anagrams2.get_anagrams("nevertheless")
    self.assertEqual(r, ['nevertheless'])

    _, r = self.anagrams2.get_anagrams("nevins")
    self.assertEqual(r, ['nevins'])

    _, r = self.anagrams2.get_anagrams("new")
    self.assertEqual(r, ['new'])

    _, r = self.anagrams2.get_anagrams("newark")
    self.assertEqual(r, ['newark'])

    _, r = self.anagrams2.get_anagrams("newbold")
    self.assertEqual(r, ['newbold'])

    _, r = self.anagrams2.get_anagrams("newborn")
    self.assertEqual(r, ['newborn'])

    _, r = self.anagrams2.get_anagrams("newbury")
    self.assertEqual(r, ['newbury'])

    _, r = self.anagrams2.get_anagrams("newburyport")
    self.assertEqual(r, ['newburyport'])

    _, r = self.anagrams2.get_anagrams("newcastle")
    self.assertEqual(r, ['newcastle'])

    _, r = self.anagrams2.get_anagrams("newcomer")
    self.assertEqual(r, ['newcomer'])

    _, r = self.anagrams2.get_anagrams("newcomers")
    self.assertEqual(r, ['newcomers'])

    _, r = self.anagrams2.get_anagrams("newell")
    self.assertEqual(r, ['newell'])

    _, r = self.anagrams2.get_anagrams("newer")
    self.assertEqual(r, ['newer', 'renew'])

    _, r = self.anagrams2.get_anagrams("newest")
    self.assertEqual(r, ['newest'])

    _, r = self.anagrams2.get_anagrams("newfoundland")
    self.assertEqual(r, ['newfoundland'])

    _, r = self.anagrams2.get_anagrams("newly")
    self.assertEqual(r, ['newly'])

    _, r = self.anagrams2.get_anagrams("newlywed")
    self.assertEqual(r, ['newlywed'])

    _, r = self.anagrams2.get_anagrams("newman")
    self.assertEqual(r, ['newman'])

    _, r = self.anagrams2.get_anagrams("newmanize")
    self.assertEqual(r, ['newmanize'])

    _, r = self.anagrams2.get_anagrams("newmanizes")
    self.assertEqual(r, ['newmanizes'])

    _, r = self.anagrams2.get_anagrams("newness")
    self.assertEqual(r, ['newness'])

    _, r = self.anagrams2.get_anagrams("newport")
    self.assertEqual(r, ['newport'])

    _, r = self.anagrams2.get_anagrams("news")
    self.assertEqual(r, ['news'])

    _, r = self.anagrams2.get_anagrams("newscast")
    self.assertEqual(r, ['newscast'])

    _, r = self.anagrams2.get_anagrams("newsgroup")
    self.assertEqual(r, ['newsgroup'])

    _, r = self.anagrams2.get_anagrams("newsletter")
    self.assertEqual(r, ['newsletter'])

    _, r = self.anagrams2.get_anagrams("newsletters")
    self.assertEqual(r, ['newsletters'])

    _, r = self.anagrams2.get_anagrams("newsman")
    self.assertEqual(r, ['newsman'])

    _, r = self.anagrams2.get_anagrams("newsmen")
    self.assertEqual(r, ['newsmen'])

    _, r = self.anagrams2.get_anagrams("newspaper")
    self.assertEqual(r, ['newspaper'])

    _, r = self.anagrams2.get_anagrams("newspapers")
    self.assertEqual(r, ['newspapers'])

    _, r = self.anagrams2.get_anagrams("newsstand")
    self.assertEqual(r, ['newsstand'])

    _, r = self.anagrams2.get_anagrams("newsweek")
    self.assertEqual(r, ['newsweek'])

    _, r = self.anagrams2.get_anagrams("newsweekly")
    self.assertEqual(r, ['newsweekly'])

    _, r = self.anagrams2.get_anagrams("newt")
    self.assertEqual(r, ['newt', 'went'])

    _, r = self.anagrams2.get_anagrams("newton")
    self.assertEqual(r, ['newton'])

    _, r = self.anagrams2.get_anagrams("newtonian")
    self.assertEqual(r, ['newtonian'])

    _, r = self.anagrams2.get_anagrams("next")
    self.assertEqual(r, ['next'])

    _, r = self.anagrams2.get_anagrams("nguyen")
    self.assertEqual(r, ['nguyen'])

    _, r = self.anagrams2.get_anagrams("niagara")
    self.assertEqual(r, ['niagara'])

    _, r = self.anagrams2.get_anagrams("niamey")
    self.assertEqual(r, ['niamey'])

    _, r = self.anagrams2.get_anagrams("nibble")
    self.assertEqual(r, ['nibble'])

    _, r = self.anagrams2.get_anagrams("nibbled")
    self.assertEqual(r, ['nibbled'])

    _, r = self.anagrams2.get_anagrams("nibbler")
    self.assertEqual(r, ['nibbler'])

    _, r = self.anagrams2.get_anagrams("nibblers")
    self.assertEqual(r, ['nibblers'])

    _, r = self.anagrams2.get_anagrams("nibbles")
    self.assertEqual(r, ['nibbles'])

    _, r = self.anagrams2.get_anagrams("nibbling")
    self.assertEqual(r, ['nibbling'])

    _, r = self.anagrams2.get_anagrams("nibelung")
    self.assertEqual(r, ['nibelung'])

    _, r = self.anagrams2.get_anagrams("nicaragua")
    self.assertEqual(r, ['nicaragua'])

    _, r = self.anagrams2.get_anagrams("niccolo")
    self.assertEqual(r, ['niccolo'])

    _, r = self.anagrams2.get_anagrams("nice")
    self.assertEqual(r, ['nice'])

    _, r = self.anagrams2.get_anagrams("nicely")
    self.assertEqual(r, ['nicely'])

    _, r = self.anagrams2.get_anagrams("niceness")
    self.assertEqual(r, ['incenses', 'niceness'])

    _, r = self.anagrams2.get_anagrams("nicer")
    self.assertEqual(r, ['nicer'])

    _, r = self.anagrams2.get_anagrams("nicest")
    self.assertEqual(r, ['incest', 'insect', 'nicest'])

    _, r = self.anagrams2.get_anagrams("niche")
    self.assertEqual(r, ['niche'])

    _, r = self.anagrams2.get_anagrams("nicholas")
    self.assertEqual(r, ['nicholas'])

    _, r = self.anagrams2.get_anagrams("nicholls")
    self.assertEqual(r, ['nicholls'])

    _, r = self.anagrams2.get_anagrams("nichols")
    self.assertEqual(r, ['nichols'])

    _, r = self.anagrams2.get_anagrams("nicholson")
    self.assertEqual(r, ['nicholson'])

    _, r = self.anagrams2.get_anagrams("nick")
    self.assertEqual(r, ['nick'])

    _, r = self.anagrams2.get_anagrams("nicked")
    self.assertEqual(r, ['nicked'])

    _, r = self.anagrams2.get_anagrams("nickel")
    self.assertEqual(r, ['nickel'])

    _, r = self.anagrams2.get_anagrams("nickels")
    self.assertEqual(r, ['nickels'])

    _, r = self.anagrams2.get_anagrams("nicker")
    self.assertEqual(r, ['nicker'])

    _, r = self.anagrams2.get_anagrams("nicking")
    self.assertEqual(r, ['nicking'])

    _, r = self.anagrams2.get_anagrams("nicklaus")
    self.assertEqual(r, ['nicklaus'])

    _, r = self.anagrams2.get_anagrams("nickname")
    self.assertEqual(r, ['nickname'])

    _, r = self.anagrams2.get_anagrams("nicknamed")
    self.assertEqual(r, ['nicknamed'])

    _, r = self.anagrams2.get_anagrams("nicknames")
    self.assertEqual(r, ['nicknames'])

    _, r = self.anagrams2.get_anagrams("nicks")
    self.assertEqual(r, ['nicks'])

    _, r = self.anagrams2.get_anagrams("nicodemus")
    self.assertEqual(r, ['nicodemus'])

    _, r = self.anagrams2.get_anagrams("nicosia")
    self.assertEqual(r, ['nicosia'])

    _, r = self.anagrams2.get_anagrams("nicotine")
    self.assertEqual(r, ['nicotine'])

    _, r = self.anagrams2.get_anagrams("niece")
    self.assertEqual(r, ['niece'])

    _, r = self.anagrams2.get_anagrams("nieces")
    self.assertEqual(r, ['nieces'])

    _, r = self.anagrams2.get_anagrams("nielsen")
    self.assertEqual(r, ['nielsen'])

    _, r = self.anagrams2.get_anagrams("nielson")
    self.assertEqual(r, ['nielson'])

    _, r = self.anagrams2.get_anagrams("nietzsche")
    self.assertEqual(r, ['nietzsche'])

    _, r = self.anagrams2.get_anagrams("nifty")
    self.assertEqual(r, ['nifty'])

    _, r = self.anagrams2.get_anagrams("niger")
    self.assertEqual(r, ['niger', 'reign'])

    _, r = self.anagrams2.get_anagrams("nigeria")
    self.assertEqual(r, ['nigeria'])

    _, r = self.anagrams2.get_anagrams("nigerian")
    self.assertEqual(r, ['nigerian'])

    _, r = self.anagrams2.get_anagrams("nigh")
    self.assertEqual(r, ['nigh'])

    _, r = self.anagrams2.get_anagrams("night")
    self.assertEqual(r, ['night', 'thing'])

    _, r = self.anagrams2.get_anagrams("nightcap")
    self.assertEqual(r, ['nightcap', 'patching'])

    _, r = self.anagrams2.get_anagrams("nightclub")
    self.assertEqual(r, ['nightclub'])

    _, r = self.anagrams2.get_anagrams("nightfall")
    self.assertEqual(r, ['nightfall'])

    _, r = self.anagrams2.get_anagrams("nightgown")
    self.assertEqual(r, ['nightgown'])

    _, r = self.anagrams2.get_anagrams("nightingale")
    self.assertEqual(r, ['nightingale'])

    _, r = self.anagrams2.get_anagrams("nightingales")
    self.assertEqual(r, ['nightingales'])

    _, r = self.anagrams2.get_anagrams("nightly")
    self.assertEqual(r, ['nightly'])

    _, r = self.anagrams2.get_anagrams("nightmare")
    self.assertEqual(r, ['nightmare'])

    _, r = self.anagrams2.get_anagrams("nightmares")
    self.assertEqual(r, ['nightmares'])

    _, r = self.anagrams2.get_anagrams("nightmarish")
    self.assertEqual(r, ['nightmarish'])

    _, r = self.anagrams2.get_anagrams("nights")
    self.assertEqual(r, ['nights', 'things'])

    _, r = self.anagrams2.get_anagrams("nighttime")
    self.assertEqual(r, ['nighttime'])

    _, r = self.anagrams2.get_anagrams("nihilism")
    self.assertEqual(r, ['nihilism'])

    _, r = self.anagrams2.get_anagrams("nijinsky")
    self.assertEqual(r, ['nijinsky'])

    _, r = self.anagrams2.get_anagrams("nikko")
    self.assertEqual(r, ['nikko'])

    _, r = self.anagrams2.get_anagrams("nikolai")
    self.assertEqual(r, ['nikolai'])

    _, r = self.anagrams2.get_anagrams("nil")
    self.assertEqual(r, ['lin', 'nil'])

    _, r = self.anagrams2.get_anagrams("nile")
    self.assertEqual(r, ['lien', 'line', 'neil', 'nile'])

    _, r = self.anagrams2.get_anagrams("nilsen")
    self.assertEqual(r, ['linens', 'nilsen'])

    _, r = self.anagrams2.get_anagrams("nilsson")
    self.assertEqual(r, ['nilsson'])

    _, r = self.anagrams2.get_anagrams("nimble")
    self.assertEqual(r, ['nimble'])

    _, r = self.anagrams2.get_anagrams("nimbleness")
    self.assertEqual(r, ['nimbleness'])

    _, r = self.anagrams2.get_anagrams("nimbler")
    self.assertEqual(r, ['nimbler'])

    _, r = self.anagrams2.get_anagrams("nimbly")
    self.assertEqual(r, ['nimbly'])

    _, r = self.anagrams2.get_anagrams("nimbus")
    self.assertEqual(r, ['nimbus'])

    _, r = self.anagrams2.get_anagrams("nina")
    self.assertEqual(r, ['nina'])

    _, r = self.anagrams2.get_anagrams("nine")
    self.assertEqual(r, ['nine'])

    _, r = self.anagrams2.get_anagrams("ninefold")
    self.assertEqual(r, ['ninefold'])

    _, r = self.anagrams2.get_anagrams("nines")
    self.assertEqual(r, ['nines'])

    _, r = self.anagrams2.get_anagrams("nineteen")
    self.assertEqual(r, ['nineteen'])

    _, r = self.anagrams2.get_anagrams("nineteens")
    self.assertEqual(r, ['nineteens'])

    _, r = self.anagrams2.get_anagrams("nineteenth")
    self.assertEqual(r, ['nineteenth'])

    _, r = self.anagrams2.get_anagrams("nineties")
    self.assertEqual(r, ['einstein', 'nineties'])

    _, r = self.anagrams2.get_anagrams("ninetieth")
    self.assertEqual(r, ['ninetieth'])

    _, r = self.anagrams2.get_anagrams("ninety")
    self.assertEqual(r, ['ninety'])

    _, r = self.anagrams2.get_anagrams("nineveh")
    self.assertEqual(r, ['nineveh'])

    _, r = self.anagrams2.get_anagrams("ninth")
    self.assertEqual(r, ['ninth'])

    _, r = self.anagrams2.get_anagrams("niobe")
    self.assertEqual(r, ['niobe'])

    _, r = self.anagrams2.get_anagrams("nip")
    self.assertEqual(r, ['nip', 'pin'])

    _, r = self.anagrams2.get_anagrams("nipple")
    self.assertEqual(r, ['nipple'])

    _, r = self.anagrams2.get_anagrams("nippon")
    self.assertEqual(r, ['nippon'])

    _, r = self.anagrams2.get_anagrams("nipponize")
    self.assertEqual(r, ['nipponize'])

    _, r = self.anagrams2.get_anagrams("nipponizes")
    self.assertEqual(r, ['nipponizes'])

    _, r = self.anagrams2.get_anagrams("nips")
    self.assertEqual(r, ['nips', 'pins', 'snip', 'spin'])

    _, r = self.anagrams2.get_anagrams("nitric")
    self.assertEqual(r, ['nitric'])

    _, r = self.anagrams2.get_anagrams("nitrogen")
    self.assertEqual(r, ['nitrogen'])

    _, r = self.anagrams2.get_anagrams("nitrous")
    self.assertEqual(r, ['nitrous'])

    _, r = self.anagrams2.get_anagrams("nitty")
    self.assertEqual(r, ['nitty'])

    _, r = self.anagrams2.get_anagrams("nixon")
    self.assertEqual(r, ['nixon'])

    _, r = self.anagrams2.get_anagrams("no")
    self.assertEqual(r, ['no', 'on'])

    _, r = self.anagrams2.get_anagrams("noah")
    self.assertEqual(r, ['noah'])

    _, r = self.anagrams2.get_anagrams("nobel")
    self.assertEqual(r, ['nobel', 'noble'])

    _, r = self.anagrams2.get_anagrams("nobility")
    self.assertEqual(r, ['nobility'])

    _, r = self.anagrams2.get_anagrams("noble")
    self.assertEqual(r, ['nobel', 'noble'])

    _, r = self.anagrams2.get_anagrams("nobleman")
    self.assertEqual(r, ['nobleman'])

    _, r = self.anagrams2.get_anagrams("nobleness")
    self.assertEqual(r, ['nobleness'])

    _, r = self.anagrams2.get_anagrams("nobler")
    self.assertEqual(r, ['nobler'])

    _, r = self.anagrams2.get_anagrams("nobles")
    self.assertEqual(r, ['nobles'])

    _, r = self.anagrams2.get_anagrams("noblest")
    self.assertEqual(r, ['noblest'])

    _, r = self.anagrams2.get_anagrams("nobly")
    self.assertEqual(r, ['nobly'])

    _, r = self.anagrams2.get_anagrams("nobody")
    self.assertEqual(r, ['nobody'])

    _, r = self.anagrams2.get_anagrams("nocturnal")
    self.assertEqual(r, ['nocturnal'])

    _, r = self.anagrams2.get_anagrams("nocturnally")
    self.assertEqual(r, ['nocturnally'])

    _, r = self.anagrams2.get_anagrams("nod")
    self.assertEqual(r, ['don', 'nod'])

    _, r = self.anagrams2.get_anagrams("nodal")
    self.assertEqual(r, ['dolan', 'nodal'])

    _, r = self.anagrams2.get_anagrams("nodded")
    self.assertEqual(r, ['nodded'])

    _, r = self.anagrams2.get_anagrams("nodding")
    self.assertEqual(r, ['nodding'])

    _, r = self.anagrams2.get_anagrams("node")
    self.assertEqual(r, ['done', 'node'])

    _, r = self.anagrams2.get_anagrams("nodes")
    self.assertEqual(r, ['nodes', 'nosed'])

    _, r = self.anagrams2.get_anagrams("nods")
    self.assertEqual(r, ['dons', 'nods'])

    _, r = self.anagrams2.get_anagrams("nodular")
    self.assertEqual(r, ['nodular'])

    _, r = self.anagrams2.get_anagrams("nodule")
    self.assertEqual(r, ['nodule'])

    _, r = self.anagrams2.get_anagrams("noel")
    self.assertEqual(r, ['leon', 'lone', 'noel'])

    _, r = self.anagrams2.get_anagrams("noetherian")
    self.assertEqual(r, ['noetherian'])

    _, r = self.anagrams2.get_anagrams("noise")
    self.assertEqual(r, ['noise'])

    _, r = self.anagrams2.get_anagrams("noiseless")
    self.assertEqual(r, ['lionesses', 'noiseless'])

    _, r = self.anagrams2.get_anagrams("noiselessly")
    self.assertEqual(r, ['noiselessly'])

    _, r = self.anagrams2.get_anagrams("noises")
    self.assertEqual(r, ['noises'])

    _, r = self.anagrams2.get_anagrams("noisier")
    self.assertEqual(r, ['ironies', 'noisier'])

    _, r = self.anagrams2.get_anagrams("noisily")
    self.assertEqual(r, ['noisily'])

    _, r = self.anagrams2.get_anagrams("noisiness")
    self.assertEqual(r, ['noisiness'])

    _, r = self.anagrams2.get_anagrams("noisy")
    self.assertEqual(r, ['noisy'])

    _, r = self.anagrams2.get_anagrams("nolan")
    self.assertEqual(r, ['nolan'])

    _, r = self.anagrams2.get_anagrams("noll")
    self.assertEqual(r, ['noll'])

    _, r = self.anagrams2.get_anagrams("nomenclature")
    self.assertEqual(r, ['nomenclature'])

    _, r = self.anagrams2.get_anagrams("nominal")
    self.assertEqual(r, ['nominal'])

    _, r = self.anagrams2.get_anagrams("nominally")
    self.assertEqual(r, ['nominally'])

    _, r = self.anagrams2.get_anagrams("nominate")
    self.assertEqual(r, ['nominate'])

    _, r = self.anagrams2.get_anagrams("nominated")
    self.assertEqual(r, ['nominated'])

    _, r = self.anagrams2.get_anagrams("nominating")
    self.assertEqual(r, ['nominating'])

    _, r = self.anagrams2.get_anagrams("nomination")
    self.assertEqual(r, ['nomination'])

    _, r = self.anagrams2.get_anagrams("nominative")
    self.assertEqual(r, ['nominative'])

    _, r = self.anagrams2.get_anagrams("nominee")
    self.assertEqual(r, ['nominee'])

    _, r = self.anagrams2.get_anagrams("non")
    self.assertEqual(r, ['non'])

    _, r = self.anagrams2.get_anagrams("nonadaptive")
    self.assertEqual(r, ['nonadaptive'])

    _, r = self.anagrams2.get_anagrams("nonbiodegradable")
    self.assertEqual(r, ['nonbiodegradable'])

    _, r = self.anagrams2.get_anagrams("nonblocking")
    self.assertEqual(r, ['nonblocking'])

    _, r = self.anagrams2.get_anagrams("nonce")
    self.assertEqual(r, ['nonce'])

    _, r = self.anagrams2.get_anagrams("nonchalant")
    self.assertEqual(r, ['nonchalant'])

    _, r = self.anagrams2.get_anagrams("noncommercial")
    self.assertEqual(r, ['noncommercial'])

    _, r = self.anagrams2.get_anagrams("noncommunication")
    self.assertEqual(r, ['noncommunication'])

    _, r = self.anagrams2.get_anagrams("nonconsecutively")
    self.assertEqual(r, ['nonconsecutively'])

    _, r = self.anagrams2.get_anagrams("nonconservative")
    self.assertEqual(r, ['nonconservative'])

    _, r = self.anagrams2.get_anagrams("noncritical")
    self.assertEqual(r, ['noncritical'])

    _, r = self.anagrams2.get_anagrams("noncyclic")
    self.assertEqual(r, ['noncyclic'])

    _, r = self.anagrams2.get_anagrams("nondecreasing")
    self.assertEqual(r, ['nondecreasing'])

    _, r = self.anagrams2.get_anagrams("nondescript")
    self.assertEqual(r, ['nondescript'])

    _, r = self.anagrams2.get_anagrams("nondescriptly")
    self.assertEqual(r, ['nondescriptly'])

    _, r = self.anagrams2.get_anagrams("nondestructively")
    self.assertEqual(r, ['nondestructively'])

    _, r = self.anagrams2.get_anagrams("nondeterminacy")
    self.assertEqual(r, ['nondeterminacy'])

    _, r = self.anagrams2.get_anagrams("nondeterminate")
    self.assertEqual(r, ['nondeterminate'])

    _, r = self.anagrams2.get_anagrams("nondeterminately")
    self.assertEqual(r, ['nondeterminately'])

    _, r = self.anagrams2.get_anagrams("nondeterminism")
    self.assertEqual(r, ['nondeterminism'])

    _, r = self.anagrams2.get_anagrams("nondeterministic")
    self.assertEqual(r, ['nondeterministic'])

    _, r = self.anagrams2.get_anagrams("nondeterministically")
    self.assertEqual(r, ['nondeterministically'])

    _, r = self.anagrams2.get_anagrams("none")
    self.assertEqual(r, ['neon', 'none'])

    _, r = self.anagrams2.get_anagrams("nonempty")
    self.assertEqual(r, ['nonempty'])

    _, r = self.anagrams2.get_anagrams("nonetheless")
    self.assertEqual(r, ['nonetheless'])

    _, r = self.anagrams2.get_anagrams("nonexistence")
    self.assertEqual(r, ['nonexistence'])

    _, r = self.anagrams2.get_anagrams("nonexistent")
    self.assertEqual(r, ['nonexistent'])

    _, r = self.anagrams2.get_anagrams("nonextensible")
    self.assertEqual(r, ['nonextensible'])

    _, r = self.anagrams2.get_anagrams("nonfunctional")
    self.assertEqual(r, ['nonfunctional'])

    _, r = self.anagrams2.get_anagrams("nongovernmental")
    self.assertEqual(r, ['nongovernmental'])

    _, r = self.anagrams2.get_anagrams("nonidempotent")
    self.assertEqual(r, ['nonidempotent'])

    _, r = self.anagrams2.get_anagrams("noninteracting")
    self.assertEqual(r, ['noninteracting'])

    _, r = self.anagrams2.get_anagrams("noninterference")
    self.assertEqual(r, ['noninterference'])

    _, r = self.anagrams2.get_anagrams("noninterleaved")
    self.assertEqual(r, ['noninterleaved'])

    _, r = self.anagrams2.get_anagrams("nonintrusive")
    self.assertEqual(r, ['nonintrusive'])

    _, r = self.anagrams2.get_anagrams("nonintuitive")
    self.assertEqual(r, ['nonintuitive'])

    _, r = self.anagrams2.get_anagrams("noninverting")
    self.assertEqual(r, ['noninverting'])

    _, r = self.anagrams2.get_anagrams("nonlinear")
    self.assertEqual(r, ['nonlinear'])

    _, r = self.anagrams2.get_anagrams("nonlinearities")
    self.assertEqual(r, ['nonlinearities'])

    _, r = self.anagrams2.get_anagrams("nonlinearity")
    self.assertEqual(r, ['nonlinearity'])

    _, r = self.anagrams2.get_anagrams("nonlinearly")
    self.assertEqual(r, ['nonlinearly'])

    _, r = self.anagrams2.get_anagrams("nonlocal")
    self.assertEqual(r, ['nonlocal'])

    _, r = self.anagrams2.get_anagrams("nonmaskable")
    self.assertEqual(r, ['nonmaskable'])

    _, r = self.anagrams2.get_anagrams("nonmathematical")
    self.assertEqual(r, ['nonmathematical'])

    _, r = self.anagrams2.get_anagrams("nonmilitary")
    self.assertEqual(r, ['nonmilitary'])

    _, r = self.anagrams2.get_anagrams("nonnegative")
    self.assertEqual(r, ['nonnegative'])

    _, r = self.anagrams2.get_anagrams("nonnegligible")
    self.assertEqual(r, ['nonnegligible'])

    _, r = self.anagrams2.get_anagrams("nonnumerical")
    self.assertEqual(r, ['nonnumerical'])

    _, r = self.anagrams2.get_anagrams("nonogenarian")
    self.assertEqual(r, ['nonogenarian'])

    _, r = self.anagrams2.get_anagrams("nonorthogonal")
    self.assertEqual(r, ['nonorthogonal'])

    _, r = self.anagrams2.get_anagrams("nonorthogonality")
    self.assertEqual(r, ['nonorthogonality'])

    _, r = self.anagrams2.get_anagrams("nonperishable")
    self.assertEqual(r, ['nonperishable'])

    _, r = self.anagrams2.get_anagrams("nonpersistent")
    self.assertEqual(r, ['nonpersistent'])

    _, r = self.anagrams2.get_anagrams("nonportable")
    self.assertEqual(r, ['nonportable'])

    _, r = self.anagrams2.get_anagrams("nonprocedural")
    self.assertEqual(r, ['nonprocedural'])

    _, r = self.anagrams2.get_anagrams("nonprocedurally")
    self.assertEqual(r, ['nonprocedurally'])

    _, r = self.anagrams2.get_anagrams("nonprofit")
    self.assertEqual(r, ['nonprofit'])

    _, r = self.anagrams2.get_anagrams("nonprogrammable")
    self.assertEqual(r, ['nonprogrammable'])

    _, r = self.anagrams2.get_anagrams("nonprogrammer")
    self.assertEqual(r, ['nonprogrammer'])

    _, r = self.anagrams2.get_anagrams("nonsegmented")
    self.assertEqual(r, ['nonsegmented'])

    _, r = self.anagrams2.get_anagrams("nonsense")
    self.assertEqual(r, ['nonsense'])

    _, r = self.anagrams2.get_anagrams("nonsensical")
    self.assertEqual(r, ['nonsensical'])

    _, r = self.anagrams2.get_anagrams("nonsequential")
    self.assertEqual(r, ['nonsequential'])

    _, r = self.anagrams2.get_anagrams("nonspecialist")
    self.assertEqual(r, ['nonspecialist'])

    _, r = self.anagrams2.get_anagrams("nonspecialists")
    self.assertEqual(r, ['nonspecialists'])

    _, r = self.anagrams2.get_anagrams("nonstandard")
    self.assertEqual(r, ['nonstandard'])

    _, r = self.anagrams2.get_anagrams("nonsynchronous")
    self.assertEqual(r, ['nonsynchronous'])

    _, r = self.anagrams2.get_anagrams("nontechnical")
    self.assertEqual(r, ['nontechnical'])

    _, r = self.anagrams2.get_anagrams("nonterminal")
    self.assertEqual(r, ['nonterminal'])

    _, r = self.anagrams2.get_anagrams("nonterminals")
    self.assertEqual(r, ['nonterminals'])

    _, r = self.anagrams2.get_anagrams("nonterminating")
    self.assertEqual(r, ['nonterminating'])

    _, r = self.anagrams2.get_anagrams("nontermination")
    self.assertEqual(r, ['nontermination'])

    _, r = self.anagrams2.get_anagrams("nonthermal")
    self.assertEqual(r, ['nonthermal'])

    _, r = self.anagrams2.get_anagrams("nontransparent")
    self.assertEqual(r, ['nontransparent'])

    _, r = self.anagrams2.get_anagrams("nontrivial")
    self.assertEqual(r, ['nontrivial'])

    _, r = self.anagrams2.get_anagrams("nonuniform")
    self.assertEqual(r, ['nonuniform'])

    _, r = self.anagrams2.get_anagrams("nonuniformity")
    self.assertEqual(r, ['nonuniformity'])

    _, r = self.anagrams2.get_anagrams("nonzero")
    self.assertEqual(r, ['nonzero'])

    _, r = self.anagrams2.get_anagrams("noodle")
    self.assertEqual(r, ['noodle'])

    _, r = self.anagrams2.get_anagrams("nook")
    self.assertEqual(r, ['nook'])

    _, r = self.anagrams2.get_anagrams("nooks")
    self.assertEqual(r, ['nooks'])

    _, r = self.anagrams2.get_anagrams("noon")
    self.assertEqual(r, ['noon'])

    _, r = self.anagrams2.get_anagrams("noonday")
    self.assertEqual(r, ['noonday'])

    _, r = self.anagrams2.get_anagrams("noons")
    self.assertEqual(r, ['noons'])

    _, r = self.anagrams2.get_anagrams("noontide")
    self.assertEqual(r, ['noontide'])

    _, r = self.anagrams2.get_anagrams("noontime")
    self.assertEqual(r, ['noontime'])

    _, r = self.anagrams2.get_anagrams("noose")
    self.assertEqual(r, ['noose'])

    _, r = self.anagrams2.get_anagrams("nor")
    self.assertEqual(r, ['nor', 'ron'])

    _, r = self.anagrams2.get_anagrams("nora")
    self.assertEqual(r, ['nora'])

    _, r = self.anagrams2.get_anagrams("nordhoff")
    self.assertEqual(r, ['nordhoff'])

    _, r = self.anagrams2.get_anagrams("nordic")
    self.assertEqual(r, ['nordic'])

    _, r = self.anagrams2.get_anagrams("nordstrom")
    self.assertEqual(r, ['nordstrom'])

    _, r = self.anagrams2.get_anagrams("noreen")
    self.assertEqual(r, ['noreen'])

    _, r = self.anagrams2.get_anagrams("norfolk")
    self.assertEqual(r, ['norfolk'])

    _, r = self.anagrams2.get_anagrams("norm")
    self.assertEqual(r, ['morn', 'norm'])

    _, r = self.anagrams2.get_anagrams("norma")
    self.assertEqual(r, ['manor', 'moran', 'norma', 'roman'])

    _, r = self.anagrams2.get_anagrams("normal")
    self.assertEqual(r, ['normal'])

    _, r = self.anagrams2.get_anagrams("normalcy")
    self.assertEqual(r, ['normalcy'])

    _, r = self.anagrams2.get_anagrams("normality")
    self.assertEqual(r, ['normality'])

    _, r = self.anagrams2.get_anagrams("normalization")
    self.assertEqual(r, ['normalization'])

    _, r = self.anagrams2.get_anagrams("normalize")
    self.assertEqual(r, ['normalize'])

    _, r = self.anagrams2.get_anagrams("normalized")
    self.assertEqual(r, ['normalized'])

    _, r = self.anagrams2.get_anagrams("normalizes")
    self.assertEqual(r, ['normalizes'])

    _, r = self.anagrams2.get_anagrams("normalizing")
    self.assertEqual(r, ['normalizing'])

    _, r = self.anagrams2.get_anagrams("normally")
    self.assertEqual(r, ['normally'])

    _, r = self.anagrams2.get_anagrams("normals")
    self.assertEqual(r, ['normals'])

    _, r = self.anagrams2.get_anagrams("norman")
    self.assertEqual(r, ['norman'])

    _, r = self.anagrams2.get_anagrams("normandy")
    self.assertEqual(r, ['normandy'])

    _, r = self.anagrams2.get_anagrams("normanization")
    self.assertEqual(r, ['normanization'])

    _, r = self.anagrams2.get_anagrams("normanizations")
    self.assertEqual(r, ['normanizations'])

    _, r = self.anagrams2.get_anagrams("normanize")
    self.assertEqual(r, ['normanize'])

    _, r = self.anagrams2.get_anagrams("normanizer")
    self.assertEqual(r, ['normanizer'])

    _, r = self.anagrams2.get_anagrams("normanizers")
    self.assertEqual(r, ['normanizers'])

    _, r = self.anagrams2.get_anagrams("normanizes")
    self.assertEqual(r, ['normanizes'])

    _, r = self.anagrams2.get_anagrams("normative")
    self.assertEqual(r, ['normative'])

    _, r = self.anagrams2.get_anagrams("norms")
    self.assertEqual(r, ['norms'])

    _, r = self.anagrams2.get_anagrams("norris")
    self.assertEqual(r, ['norris'])

    _, r = self.anagrams2.get_anagrams("norristown")
    self.assertEqual(r, ['norristown'])

    _, r = self.anagrams2.get_anagrams("norse")
    self.assertEqual(r, ['norse', 'rosen', 'snore'])

    _, r = self.anagrams2.get_anagrams("north")
    self.assertEqual(r, ['north', 'thorn'])

    _, r = self.anagrams2.get_anagrams("northampton")
    self.assertEqual(r, ['northampton'])

    _, r = self.anagrams2.get_anagrams("northbound")
    self.assertEqual(r, ['northbound'])

    _, r = self.anagrams2.get_anagrams("northeast")
    self.assertEqual(r, ['northeast'])

    _, r = self.anagrams2.get_anagrams("northeaster")
    self.assertEqual(r, ['northeaster'])

    _, r = self.anagrams2.get_anagrams("northeastern")
    self.assertEqual(r, ['northeastern'])

    _, r = self.anagrams2.get_anagrams("northerly")
    self.assertEqual(r, ['northerly'])

    _, r = self.anagrams2.get_anagrams("northern")
    self.assertEqual(r, ['northern'])

    _, r = self.anagrams2.get_anagrams("northerner")
    self.assertEqual(r, ['northerner'])

    _, r = self.anagrams2.get_anagrams("northerners")
    self.assertEqual(r, ['northerners'])

    _, r = self.anagrams2.get_anagrams("northernly")
    self.assertEqual(r, ['northernly'])

    _, r = self.anagrams2.get_anagrams("northfield")
    self.assertEqual(r, ['northfield'])

    _, r = self.anagrams2.get_anagrams("northrop")
    self.assertEqual(r, ['northrop'])

    _, r = self.anagrams2.get_anagrams("northrup")
    self.assertEqual(r, ['northrup'])

    _, r = self.anagrams2.get_anagrams("northumberland")
    self.assertEqual(r, ['northumberland'])

    _, r = self.anagrams2.get_anagrams("northward")
    self.assertEqual(r, ['northward'])

    _, r = self.anagrams2.get_anagrams("northwards")
    self.assertEqual(r, ['northwards'])

    _, r = self.anagrams2.get_anagrams("northwest")
    self.assertEqual(r, ['northwest'])

    _, r = self.anagrams2.get_anagrams("northwestern")
    self.assertEqual(r, ['northwestern'])

    _, r = self.anagrams2.get_anagrams("norton")
    self.assertEqual(r, ['norton'])

    _, r = self.anagrams2.get_anagrams("norwalk")
    self.assertEqual(r, ['norwalk'])

    _, r = self.anagrams2.get_anagrams("norway")
    self.assertEqual(r, ['norway'])

    _, r = self.anagrams2.get_anagrams("norwegian")
    self.assertEqual(r, ['norwegian'])

    _, r = self.anagrams2.get_anagrams("norwich")
    self.assertEqual(r, ['norwich'])

    _, r = self.anagrams2.get_anagrams("nose")
    self.assertEqual(r, ['enos', 'nose', 'ones'])

    _, r = self.anagrams2.get_anagrams("nosed")
    self.assertEqual(r, ['nodes', 'nosed'])

    _, r = self.anagrams2.get_anagrams("noses")
    self.assertEqual(r, ['noses'])

    _, r = self.anagrams2.get_anagrams("nosing")
    self.assertEqual(r, ['nosing'])

    _, r = self.anagrams2.get_anagrams("nostalgia")
    self.assertEqual(r, ['nostalgia'])

    _, r = self.anagrams2.get_anagrams("nostalgic")
    self.assertEqual(r, ['nostalgic'])

    _, r = self.anagrams2.get_anagrams("nostradamus")
    self.assertEqual(r, ['nostradamus'])

    _, r = self.anagrams2.get_anagrams("nostrand")
    self.assertEqual(r, ['nostrand'])

    _, r = self.anagrams2.get_anagrams("nostril")
    self.assertEqual(r, ['nostril'])

    _, r = self.anagrams2.get_anagrams("nostrils")
    self.assertEqual(r, ['nostrils'])

    _, r = self.anagrams2.get_anagrams("not")
    self.assertEqual(r, ['not', 'ton'])

    _, r = self.anagrams2.get_anagrams("notable")
    self.assertEqual(r, ['notable'])

    _, r = self.anagrams2.get_anagrams("notables")
    self.assertEqual(r, ['notables'])

    _, r = self.anagrams2.get_anagrams("notably")
    self.assertEqual(r, ['notably'])

    _, r = self.anagrams2.get_anagrams("notarize")
    self.assertEqual(r, ['notarize'])

    _, r = self.anagrams2.get_anagrams("notarized")
    self.assertEqual(r, ['notarized'])

    _, r = self.anagrams2.get_anagrams("notarizes")
    self.assertEqual(r, ['notarizes'])

    _, r = self.anagrams2.get_anagrams("notarizing")
    self.assertEqual(r, ['notarizing'])

    _, r = self.anagrams2.get_anagrams("notary")
    self.assertEqual(r, ['notary'])

    _, r = self.anagrams2.get_anagrams("notation")
    self.assertEqual(r, ['notation'])

    _, r = self.anagrams2.get_anagrams("notational")
    self.assertEqual(r, ['notational'])

    _, r = self.anagrams2.get_anagrams("notations")
    self.assertEqual(r, ['notations'])

    _, r = self.anagrams2.get_anagrams("notch")
    self.assertEqual(r, ['notch'])

    _, r = self.anagrams2.get_anagrams("notched")
    self.assertEqual(r, ['notched'])

    _, r = self.anagrams2.get_anagrams("notches")
    self.assertEqual(r, ['notches'])

    _, r = self.anagrams2.get_anagrams("notching")
    self.assertEqual(r, ['notching'])

    _, r = self.anagrams2.get_anagrams("note")
    self.assertEqual(r, ['note', 'tone'])

    _, r = self.anagrams2.get_anagrams("notebook")
    self.assertEqual(r, ['notebook'])

    _, r = self.anagrams2.get_anagrams("notebooks")
    self.assertEqual(r, ['notebooks'])

    _, r = self.anagrams2.get_anagrams("noted")
    self.assertEqual(r, ['noted', 'toned'])

    _, r = self.anagrams2.get_anagrams("notes")
    self.assertEqual(r, ['notes', 'onset', 'stone', 'tones'])

    _, r = self.anagrams2.get_anagrams("noteworthy")
    self.assertEqual(r, ['noteworthy'])

    _, r = self.anagrams2.get_anagrams("nothing")
    self.assertEqual(r, ['nothing'])

    _, r = self.anagrams2.get_anagrams("nothingness")
    self.assertEqual(r, ['nothingness'])

    _, r = self.anagrams2.get_anagrams("nothings")
    self.assertEqual(r, ['nothings'])

    _, r = self.anagrams2.get_anagrams("notice")
    self.assertEqual(r, ['notice'])

    _, r = self.anagrams2.get_anagrams("noticeable")
    self.assertEqual(r, ['noticeable'])

    _, r = self.anagrams2.get_anagrams("noticeably")
    self.assertEqual(r, ['noticeably'])

    _, r = self.anagrams2.get_anagrams("noticed")
    self.assertEqual(r, ['noticed'])

    _, r = self.anagrams2.get_anagrams("notices")
    self.assertEqual(r, ['notices', 'section'])

    _, r = self.anagrams2.get_anagrams("noticing")
    self.assertEqual(r, ['noticing'])

    _, r = self.anagrams2.get_anagrams("notification")
    self.assertEqual(r, ['notification'])

    _, r = self.anagrams2.get_anagrams("notifications")
    self.assertEqual(r, ['notifications'])

    _, r = self.anagrams2.get_anagrams("notified")
    self.assertEqual(r, ['notified'])

    _, r = self.anagrams2.get_anagrams("notifier")
    self.assertEqual(r, ['notifier'])

    _, r = self.anagrams2.get_anagrams("notifiers")
    self.assertEqual(r, ['notifiers'])

    _, r = self.anagrams2.get_anagrams("notifies")
    self.assertEqual(r, ['notifies'])

    _, r = self.anagrams2.get_anagrams("notify")
    self.assertEqual(r, ['notify'])

    _, r = self.anagrams2.get_anagrams("notifying")
    self.assertEqual(r, ['notifying'])

    _, r = self.anagrams2.get_anagrams("noting")
    self.assertEqual(r, ['noting', 'toning'])

    _, r = self.anagrams2.get_anagrams("notion")
    self.assertEqual(r, ['notion'])

    _, r = self.anagrams2.get_anagrams("notions")
    self.assertEqual(r, ['notions'])

    _, r = self.anagrams2.get_anagrams("notoriety")
    self.assertEqual(r, ['notoriety'])

    _, r = self.anagrams2.get_anagrams("notorious")
    self.assertEqual(r, ['notorious'])

    _, r = self.anagrams2.get_anagrams("notoriously")
    self.assertEqual(r, ['notoriously'])

    _, r = self.anagrams2.get_anagrams("notre")
    self.assertEqual(r, ['notre', 'tenor', 'toner'])

    _, r = self.anagrams2.get_anagrams("nottingham")
    self.assertEqual(r, ['nottingham'])

    _, r = self.anagrams2.get_anagrams("notwithstanding")
    self.assertEqual(r, ['notwithstanding'])

    _, r = self.anagrams2.get_anagrams("nouakchott")
    self.assertEqual(r, ['nouakchott'])

    _, r = self.anagrams2.get_anagrams("noun")
    self.assertEqual(r, ['noun'])

    _, r = self.anagrams2.get_anagrams("nouns")
    self.assertEqual(r, ['nouns'])

    _, r = self.anagrams2.get_anagrams("nourish")
    self.assertEqual(r, ['nourish'])

    _, r = self.anagrams2.get_anagrams("nourished")
    self.assertEqual(r, ['nourished'])

    _, r = self.anagrams2.get_anagrams("nourishes")
    self.assertEqual(r, ['nourishes'])

    _, r = self.anagrams2.get_anagrams("nourishing")
    self.assertEqual(r, ['nourishing'])

    _, r = self.anagrams2.get_anagrams("nourishment")
    self.assertEqual(r, ['nourishment'])

    _, r = self.anagrams2.get_anagrams("novak")
    self.assertEqual(r, ['novak'])

    _, r = self.anagrams2.get_anagrams("novel")
    self.assertEqual(r, ['novel'])

    _, r = self.anagrams2.get_anagrams("novelist")
    self.assertEqual(r, ['novelist'])

    _, r = self.anagrams2.get_anagrams("novelists")
    self.assertEqual(r, ['novelists'])

    _, r = self.anagrams2.get_anagrams("novels")
    self.assertEqual(r, ['novels'])

    _, r = self.anagrams2.get_anagrams("novelties")
    self.assertEqual(r, ['novelties'])

    _, r = self.anagrams2.get_anagrams("novelty")
    self.assertEqual(r, ['novelty'])

    _, r = self.anagrams2.get_anagrams("november")
    self.assertEqual(r, ['november'])

    _, r = self.anagrams2.get_anagrams("novembers")
    self.assertEqual(r, ['novembers'])

    _, r = self.anagrams2.get_anagrams("novice")
    self.assertEqual(r, ['novice'])

    _, r = self.anagrams2.get_anagrams("novices")
    self.assertEqual(r, ['novices'])

    _, r = self.anagrams2.get_anagrams("novosibirsk")
    self.assertEqual(r, ['novosibirsk'])

    _, r = self.anagrams2.get_anagrams("now")
    self.assertEqual(r, ['now', 'own', 'won'])

    _, r = self.anagrams2.get_anagrams("nowadays")
    self.assertEqual(r, ['nowadays'])

    _, r = self.anagrams2.get_anagrams("nowhere")
    self.assertEqual(r, ['nowhere'])

    _, r = self.anagrams2.get_anagrams("noxious")
    self.assertEqual(r, ['noxious'])

    _, r = self.anagrams2.get_anagrams("noyes")
    self.assertEqual(r, ['noyes'])

    _, r = self.anagrams2.get_anagrams("nozzle")
    self.assertEqual(r, ['nozzle'])

    _, r = self.anagrams2.get_anagrams("nu")
    self.assertEqual(r, ['nu'])

    _, r = self.anagrams2.get_anagrams("nuance")
    self.assertEqual(r, ['nuance'])

    _, r = self.anagrams2.get_anagrams("nuances")
    self.assertEqual(r, ['nuances'])

    _, r = self.anagrams2.get_anagrams("nubia")
    self.assertEqual(r, ['nubia'])

    _, r = self.anagrams2.get_anagrams("nubian")
    self.assertEqual(r, ['nubian'])

    _, r = self.anagrams2.get_anagrams("nubile")
    self.assertEqual(r, ['nubile'])

    _, r = self.anagrams2.get_anagrams("nuclear")
    self.assertEqual(r, ['nuclear', 'unclear'])

    _, r = self.anagrams2.get_anagrams("nuclei")
    self.assertEqual(r, ['lucien', 'nuclei'])

    _, r = self.anagrams2.get_anagrams("nucleic")
    self.assertEqual(r, ['nucleic'])

    _, r = self.anagrams2.get_anagrams("nucleotide")
    self.assertEqual(r, ['nucleotide'])

    _, r = self.anagrams2.get_anagrams("nucleotides")
    self.assertEqual(r, ['nucleotides'])

    _, r = self.anagrams2.get_anagrams("nucleus")
    self.assertEqual(r, ['nucleus'])

    _, r = self.anagrams2.get_anagrams("nuclide")
    self.assertEqual(r, ['include', 'nuclide'])

    _, r = self.anagrams2.get_anagrams("nude")
    self.assertEqual(r, ['dune', 'nude'])

    _, r = self.anagrams2.get_anagrams("nudge")
    self.assertEqual(r, ['nudge'])

    _, r = self.anagrams2.get_anagrams("nudged")
    self.assertEqual(r, ['nudged'])

    _, r = self.anagrams2.get_anagrams("nudity")
    self.assertEqual(r, ['nudity', 'untidy'])

    _, r = self.anagrams2.get_anagrams("nugent")
    self.assertEqual(r, ['nugent'])

    _, r = self.anagrams2.get_anagrams("nugget")
    self.assertEqual(r, ['nugget'])

    _, r = self.anagrams2.get_anagrams("nuisance")
    self.assertEqual(r, ['nuisance'])

    _, r = self.anagrams2.get_anagrams("nuisances")
    self.assertEqual(r, ['nuisances'])

    _, r = self.anagrams2.get_anagrams("null")
    self.assertEqual(r, ['null'])

    _, r = self.anagrams2.get_anagrams("nullary")
    self.assertEqual(r, ['nullary'])

    _, r = self.anagrams2.get_anagrams("nulled")
    self.assertEqual(r, ['nulled'])

    _, r = self.anagrams2.get_anagrams("nullified")
    self.assertEqual(r, ['nullified'])

    _, r = self.anagrams2.get_anagrams("nullifiers")
    self.assertEqual(r, ['nullifiers'])

    _, r = self.anagrams2.get_anagrams("nullifies")
    self.assertEqual(r, ['nullifies'])

    _, r = self.anagrams2.get_anagrams("nullify")
    self.assertEqual(r, ['nullify'])

    _, r = self.anagrams2.get_anagrams("nullifying")
    self.assertEqual(r, ['nullifying'])

    _, r = self.anagrams2.get_anagrams("nulls")
    self.assertEqual(r, ['nulls'])

    _, r = self.anagrams2.get_anagrams("numb")
    self.assertEqual(r, ['numb'])

    _, r = self.anagrams2.get_anagrams("numbed")
    self.assertEqual(r, ['numbed'])

    _, r = self.anagrams2.get_anagrams("number")
    self.assertEqual(r, ['number'])

    _, r = self.anagrams2.get_anagrams("numbered")
    self.assertEqual(r, ['numbered'])

    _, r = self.anagrams2.get_anagrams("numberer")
    self.assertEqual(r, ['numberer', 'renumber'])

    _, r = self.anagrams2.get_anagrams("numbering")
    self.assertEqual(r, ['numbering'])

    _, r = self.anagrams2.get_anagrams("numberless")
    self.assertEqual(r, ['numberless'])

    _, r = self.anagrams2.get_anagrams("numbers")
    self.assertEqual(r, ['numbers'])

    _, r = self.anagrams2.get_anagrams("numbing")
    self.assertEqual(r, ['numbing'])

    _, r = self.anagrams2.get_anagrams("numbly")
    self.assertEqual(r, ['numbly'])

    _, r = self.anagrams2.get_anagrams("numbness")
    self.assertEqual(r, ['numbness'])

    _, r = self.anagrams2.get_anagrams("numbs")
    self.assertEqual(r, ['numbs'])

    _, r = self.anagrams2.get_anagrams("numerable")
    self.assertEqual(r, ['numerable'])

    _, r = self.anagrams2.get_anagrams("numeral")
    self.assertEqual(r, ['numeral'])

    _, r = self.anagrams2.get_anagrams("numerals")
    self.assertEqual(r, ['numerals'])

    _, r = self.anagrams2.get_anagrams("numerator")
    self.assertEqual(r, ['numerator'])

    _, r = self.anagrams2.get_anagrams("numerators")
    self.assertEqual(r, ['numerators'])

    _, r = self.anagrams2.get_anagrams("numeric")
    self.assertEqual(r, ['numeric'])

    _, r = self.anagrams2.get_anagrams("numerical")
    self.assertEqual(r, ['numerical'])

    _, r = self.anagrams2.get_anagrams("numerically")
    self.assertEqual(r, ['numerically'])

    _, r = self.anagrams2.get_anagrams("numerics")
    self.assertEqual(r, ['numerics'])

    _, r = self.anagrams2.get_anagrams("numerous")
    self.assertEqual(r, ['numerous'])

    _, r = self.anagrams2.get_anagrams("numismatic")
    self.assertEqual(r, ['numismatic'])

    _, r = self.anagrams2.get_anagrams("numismatist")
    self.assertEqual(r, ['numismatist'])

    _, r = self.anagrams2.get_anagrams("nun")
    self.assertEqual(r, ['nun'])

    _, r = self.anagrams2.get_anagrams("nuns")
    self.assertEqual(r, ['nuns'])

    _, r = self.anagrams2.get_anagrams("nuptial")
    self.assertEqual(r, ['nuptial'])

    _, r = self.anagrams2.get_anagrams("nurse")
    self.assertEqual(r, ['nurse'])

    _, r = self.anagrams2.get_anagrams("nursed")
    self.assertEqual(r, ['nursed', 'sunder'])

    _, r = self.anagrams2.get_anagrams("nurseries")
    self.assertEqual(r, ['nurseries'])

    _, r = self.anagrams2.get_anagrams("nursery")
    self.assertEqual(r, ['nursery'])

    _, r = self.anagrams2.get_anagrams("nurses")
    self.assertEqual(r, ['nurses'])

    _, r = self.anagrams2.get_anagrams("nursing")
    self.assertEqual(r, ['nursing'])

    _, r = self.anagrams2.get_anagrams("nurture")
    self.assertEqual(r, ['nurture'])

    _, r = self.anagrams2.get_anagrams("nurtured")
    self.assertEqual(r, ['nurtured'])

    _, r = self.anagrams2.get_anagrams("nurtures")
    self.assertEqual(r, ['nurtures'])

    _, r = self.anagrams2.get_anagrams("nurturing")
    self.assertEqual(r, ['nurturing'])

    _, r = self.anagrams2.get_anagrams("nut")
    self.assertEqual(r, ['nut'])

    _, r = self.anagrams2.get_anagrams("nutate")
    self.assertEqual(r, ['attune', 'nutate'])

    _, r = self.anagrams2.get_anagrams("nutria")
    self.assertEqual(r, ['nutria'])

    _, r = self.anagrams2.get_anagrams("nutrient")
    self.assertEqual(r, ['nutrient'])

    _, r = self.anagrams2.get_anagrams("nutrition")
    self.assertEqual(r, ['nutrition'])

    _, r = self.anagrams2.get_anagrams("nutritious")
    self.assertEqual(r, ['nutritious'])

    _, r = self.anagrams2.get_anagrams("nuts")
    self.assertEqual(r, ['nuts', 'stun'])

    _, r = self.anagrams2.get_anagrams("nutshell")
    self.assertEqual(r, ['nutshell'])

    _, r = self.anagrams2.get_anagrams("nutshells")
    self.assertEqual(r, ['nutshells'])

    _, r = self.anagrams2.get_anagrams("nuzzle")
    self.assertEqual(r, ['nuzzle'])

    _, r = self.anagrams2.get_anagrams("nylon")
    self.assertEqual(r, ['nylon'])

    _, r = self.anagrams2.get_anagrams("nymph")
    self.assertEqual(r, ['nymph'])

    _, r = self.anagrams2.get_anagrams("nymphomania")
    self.assertEqual(r, ['nymphomania'])

    _, r = self.anagrams2.get_anagrams("nymphomaniac")
    self.assertEqual(r, ['nymphomaniac'])

    _, r = self.anagrams2.get_anagrams("nymphs")
    self.assertEqual(r, ['nymphs'])

    _, r = self.anagrams2.get_anagrams("nyquist")
    self.assertEqual(r, ['nyquist'])

    _, r = self.anagrams2.get_anagrams("oaf")
    self.assertEqual(r, ['oaf'])

    _, r = self.anagrams2.get_anagrams("oak")
    self.assertEqual(r, ['oak'])

    _, r = self.anagrams2.get_anagrams("oaken")
    self.assertEqual(r, ['oaken'])

    _, r = self.anagrams2.get_anagrams("oakland")
    self.assertEqual(r, ['oakland'])

    _, r = self.anagrams2.get_anagrams("oakley")
    self.assertEqual(r, ['oakley'])

    _, r = self.anagrams2.get_anagrams("oakmont")
    self.assertEqual(r, ['oakmont'])

    _, r = self.anagrams2.get_anagrams("oaks")
    self.assertEqual(r, ['oaks', 'soak'])

    _, r = self.anagrams2.get_anagrams("oar")
    self.assertEqual(r, ['oar'])

    _, r = self.anagrams2.get_anagrams("oars")
    self.assertEqual(r, ['oars', 'rosa', 'soar'])

    _, r = self.anagrams2.get_anagrams("oases")
    self.assertEqual(r, ['oases'])

    _, r = self.anagrams2.get_anagrams("oasis")
    self.assertEqual(r, ['oasis'])

    _, r = self.anagrams2.get_anagrams("oat")
    self.assertEqual(r, ['oat'])

    _, r = self.anagrams2.get_anagrams("oaten")
    self.assertEqual(r, ['atone', 'eaton', 'oaten'])

    _, r = self.anagrams2.get_anagrams("oath")
    self.assertEqual(r, ['oath'])

    _, r = self.anagrams2.get_anagrams("oaths")
    self.assertEqual(r, ['oaths'])

    _, r = self.anagrams2.get_anagrams("oatmeal")
    self.assertEqual(r, ['oatmeal'])

    _, r = self.anagrams2.get_anagrams("oats")
    self.assertEqual(r, ['oats', 'taos'])

    _, r = self.anagrams2.get_anagrams("obedience")
    self.assertEqual(r, ['obedience'])

    _, r = self.anagrams2.get_anagrams("obediences")
    self.assertEqual(r, ['obediences'])

    _, r = self.anagrams2.get_anagrams("obedient")
    self.assertEqual(r, ['obedient'])

    _, r = self.anagrams2.get_anagrams("obediently")
    self.assertEqual(r, ['obediently'])

    _, r = self.anagrams2.get_anagrams("obelisk")
    self.assertEqual(r, ['obelisk'])

    _, r = self.anagrams2.get_anagrams("oberlin")
    self.assertEqual(r, ['oberlin'])

    _, r = self.anagrams2.get_anagrams("oberon")
    self.assertEqual(r, ['borneo', 'oberon'])

    _, r = self.anagrams2.get_anagrams("obese")
    self.assertEqual(r, ['obese'])

    _, r = self.anagrams2.get_anagrams("obey")
    self.assertEqual(r, ['obey'])

    _, r = self.anagrams2.get_anagrams("obeyed")
    self.assertEqual(r, ['obeyed'])

    _, r = self.anagrams2.get_anagrams("obeying")
    self.assertEqual(r, ['obeying'])

    _, r = self.anagrams2.get_anagrams("obeys")
    self.assertEqual(r, ['obeys'])

    _, r = self.anagrams2.get_anagrams("obfuscate")
    self.assertEqual(r, ['obfuscate'])

    _, r = self.anagrams2.get_anagrams("obfuscatory")
    self.assertEqual(r, ['obfuscatory'])

    _, r = self.anagrams2.get_anagrams("obituary")
    self.assertEqual(r, ['obituary'])

    _, r = self.anagrams2.get_anagrams("object")
    self.assertEqual(r, ['object'])

    _, r = self.anagrams2.get_anagrams("objected")
    self.assertEqual(r, ['objected'])

    _, r = self.anagrams2.get_anagrams("objecting")
    self.assertEqual(r, ['objecting'])

    _, r = self.anagrams2.get_anagrams("objection")
    self.assertEqual(r, ['objection'])

    _, r = self.anagrams2.get_anagrams("objectionable")
    self.assertEqual(r, ['objectionable'])

    _, r = self.anagrams2.get_anagrams("objections")
    self.assertEqual(r, ['objections'])

    _, r = self.anagrams2.get_anagrams("objective")
    self.assertEqual(r, ['objective'])

    _, r = self.anagrams2.get_anagrams("objectively")
    self.assertEqual(r, ['objectively'])

    _, r = self.anagrams2.get_anagrams("objectives")
    self.assertEqual(r, ['objectives'])

    _, r = self.anagrams2.get_anagrams("objector")
    self.assertEqual(r, ['objector'])

    _, r = self.anagrams2.get_anagrams("objectors")
    self.assertEqual(r, ['objectors'])

    _, r = self.anagrams2.get_anagrams("objects")
    self.assertEqual(r, ['objects'])

    _, r = self.anagrams2.get_anagrams("obligated")
    self.assertEqual(r, ['obligated'])

    _, r = self.anagrams2.get_anagrams("obligation")
    self.assertEqual(r, ['obligation'])

    _, r = self.anagrams2.get_anagrams("obligations")
    self.assertEqual(r, ['obligations'])

    _, r = self.anagrams2.get_anagrams("obligatory")
    self.assertEqual(r, ['obligatory'])

    _, r = self.anagrams2.get_anagrams("oblige")
    self.assertEqual(r, ['oblige'])

    _, r = self.anagrams2.get_anagrams("obliged")
    self.assertEqual(r, ['obliged'])

    _, r = self.anagrams2.get_anagrams("obliges")
    self.assertEqual(r, ['obliges'])

    _, r = self.anagrams2.get_anagrams("obliging")
    self.assertEqual(r, ['obliging'])

    _, r = self.anagrams2.get_anagrams("obligingly")
    self.assertEqual(r, ['obligingly'])

    _, r = self.anagrams2.get_anagrams("oblique")
    self.assertEqual(r, ['oblique'])

    _, r = self.anagrams2.get_anagrams("obliquely")
    self.assertEqual(r, ['obliquely'])

    _, r = self.anagrams2.get_anagrams("obliqueness")
    self.assertEqual(r, ['obliqueness'])

    _, r = self.anagrams2.get_anagrams("obliterate")
    self.assertEqual(r, ['obliterate'])

    _, r = self.anagrams2.get_anagrams("obliterated")
    self.assertEqual(r, ['obliterated'])

    _, r = self.anagrams2.get_anagrams("obliterates")
    self.assertEqual(r, ['obliterates'])

    _, r = self.anagrams2.get_anagrams("obliterating")
    self.assertEqual(r, ['obliterating'])

    _, r = self.anagrams2.get_anagrams("obliteration")
    self.assertEqual(r, ['obliteration'])

    _, r = self.anagrams2.get_anagrams("oblivion")
    self.assertEqual(r, ['oblivion'])

    _, r = self.anagrams2.get_anagrams("oblivious")
    self.assertEqual(r, ['oblivious'])

    _, r = self.anagrams2.get_anagrams("obliviously")
    self.assertEqual(r, ['obliviously'])

    _, r = self.anagrams2.get_anagrams("obliviousness")
    self.assertEqual(r, ['obliviousness'])

    _, r = self.anagrams2.get_anagrams("oblong")
    self.assertEqual(r, ['oblong'])

    _, r = self.anagrams2.get_anagrams("obnoxious")
    self.assertEqual(r, ['obnoxious'])

    _, r = self.anagrams2.get_anagrams("oboe")
    self.assertEqual(r, ['oboe'])

    _, r = self.anagrams2.get_anagrams("o'brien")
    self.assertEqual(r, ["o'brien"])

    _, r = self.anagrams2.get_anagrams("obscene")
    self.assertEqual(r, ['obscene'])

    _, r = self.anagrams2.get_anagrams("obscure")
    self.assertEqual(r, ['obscure'])

    _, r = self.anagrams2.get_anagrams("obscured")
    self.assertEqual(r, ['obscured'])

    _, r = self.anagrams2.get_anagrams("obscurely")
    self.assertEqual(r, ['obscurely'])

    _, r = self.anagrams2.get_anagrams("obscurer")
    self.assertEqual(r, ['obscurer'])

    _, r = self.anagrams2.get_anagrams("obscures")
    self.assertEqual(r, ['obscures'])

    _, r = self.anagrams2.get_anagrams("obscuring")
    self.assertEqual(r, ['obscuring'])

    _, r = self.anagrams2.get_anagrams("obscurities")
    self.assertEqual(r, ['obscurities'])

    _, r = self.anagrams2.get_anagrams("obscurity")
    self.assertEqual(r, ['obscurity'])

    _, r = self.anagrams2.get_anagrams("obsequious")
    self.assertEqual(r, ['obsequious'])

    _, r = self.anagrams2.get_anagrams("observable")
    self.assertEqual(r, ['observable'])

    _, r = self.anagrams2.get_anagrams("observance")
    self.assertEqual(r, ['observance'])

    _, r = self.anagrams2.get_anagrams("observances")
    self.assertEqual(r, ['observances'])

    _, r = self.anagrams2.get_anagrams("observant")
    self.assertEqual(r, ['observant'])

    _, r = self.anagrams2.get_anagrams("observation")
    self.assertEqual(r, ['observation'])

    _, r = self.anagrams2.get_anagrams("observations")
    self.assertEqual(r, ['observations'])

    _, r = self.anagrams2.get_anagrams("observatory")
    self.assertEqual(r, ['observatory'])

    _, r = self.anagrams2.get_anagrams("observe")
    self.assertEqual(r, ['observe', 'verbose'])

    _, r = self.anagrams2.get_anagrams("observed")
    self.assertEqual(r, ['observed'])

    _, r = self.anagrams2.get_anagrams("observer")
    self.assertEqual(r, ['observer'])

    _, r = self.anagrams2.get_anagrams("observers")
    self.assertEqual(r, ['observers'])

    _, r = self.anagrams2.get_anagrams("observes")
    self.assertEqual(r, ['observes'])

    _, r = self.anagrams2.get_anagrams("observing")
    self.assertEqual(r, ['observing'])

    _, r = self.anagrams2.get_anagrams("obsession")
    self.assertEqual(r, ['obsession'])

    _, r = self.anagrams2.get_anagrams("obsessions")
    self.assertEqual(r, ['obsessions'])

    _, r = self.anagrams2.get_anagrams("obsessive")
    self.assertEqual(r, ['obsessive'])

    _, r = self.anagrams2.get_anagrams("obsolescence")
    self.assertEqual(r, ['obsolescence'])

    _, r = self.anagrams2.get_anagrams("obsolescent")
    self.assertEqual(r, ['obsolescent'])

    _, r = self.anagrams2.get_anagrams("obsolete")
    self.assertEqual(r, ['obsolete'])

    _, r = self.anagrams2.get_anagrams("obsoleted")
    self.assertEqual(r, ['obsoleted'])

    _, r = self.anagrams2.get_anagrams("obsoletes")
    self.assertEqual(r, ['obsoletes'])

    _, r = self.anagrams2.get_anagrams("obsoleting")
    self.assertEqual(r, ['obsoleting'])

    _, r = self.anagrams2.get_anagrams("obstacle")
    self.assertEqual(r, ['obstacle'])

    _, r = self.anagrams2.get_anagrams("obstacles")
    self.assertEqual(r, ['obstacles'])

    _, r = self.anagrams2.get_anagrams("obstinacy")
    self.assertEqual(r, ['obstinacy'])

    _, r = self.anagrams2.get_anagrams("obstinate")
    self.assertEqual(r, ['obstinate'])

    _, r = self.anagrams2.get_anagrams("obstinately")
    self.assertEqual(r, ['obstinately'])

    _, r = self.anagrams2.get_anagrams("obstruct")
    self.assertEqual(r, ['obstruct'])

    _, r = self.anagrams2.get_anagrams("obstructed")
    self.assertEqual(r, ['obstructed'])

    _, r = self.anagrams2.get_anagrams("obstructing")
    self.assertEqual(r, ['obstructing'])

    _, r = self.anagrams2.get_anagrams("obstruction")
    self.assertEqual(r, ['obstruction'])

    _, r = self.anagrams2.get_anagrams("obstructions")
    self.assertEqual(r, ['obstructions'])

    _, r = self.anagrams2.get_anagrams("obstructive")
    self.assertEqual(r, ['obstructive'])

    _, r = self.anagrams2.get_anagrams("obtain")
    self.assertEqual(r, ['obtain'])

    _, r = self.anagrams2.get_anagrams("obtainable")
    self.assertEqual(r, ['obtainable'])

    _, r = self.anagrams2.get_anagrams("obtainably")
    self.assertEqual(r, ['obtainably'])

    _, r = self.anagrams2.get_anagrams("obtained")
    self.assertEqual(r, ['obtained'])

    _, r = self.anagrams2.get_anagrams("obtaining")
    self.assertEqual(r, ['obtaining'])

    _, r = self.anagrams2.get_anagrams("obtains")
    self.assertEqual(r, ['bastion', 'obtains'])

    _, r = self.anagrams2.get_anagrams("obviate")
    self.assertEqual(r, ['obviate'])

    _, r = self.anagrams2.get_anagrams("obviated")
    self.assertEqual(r, ['obviated'])

    _, r = self.anagrams2.get_anagrams("obviates")
    self.assertEqual(r, ['obviates'])

    _, r = self.anagrams2.get_anagrams("obviating")
    self.assertEqual(r, ['obviating'])

    _, r = self.anagrams2.get_anagrams("obviation")
    self.assertEqual(r, ['obviation'])

    _, r = self.anagrams2.get_anagrams("obviations")
    self.assertEqual(r, ['obviations'])

    _, r = self.anagrams2.get_anagrams("obvious")
    self.assertEqual(r, ['obvious'])

    _, r = self.anagrams2.get_anagrams("obviously")
    self.assertEqual(r, ['obviously'])

    _, r = self.anagrams2.get_anagrams("obviousness")
    self.assertEqual(r, ['obviousness'])

    _, r = self.anagrams2.get_anagrams("occam")
    self.assertEqual(r, ['occam'])

    _, r = self.anagrams2.get_anagrams("occasion")
    self.assertEqual(r, ['occasion'])

    _, r = self.anagrams2.get_anagrams("occasional")
    self.assertEqual(r, ['occasional'])

    _, r = self.anagrams2.get_anagrams("occasionally")
    self.assertEqual(r, ['occasionally'])

    _, r = self.anagrams2.get_anagrams("occasioned")
    self.assertEqual(r, ['occasioned'])

    _, r = self.anagrams2.get_anagrams("occasioning")
    self.assertEqual(r, ['occasioning'])

    _, r = self.anagrams2.get_anagrams("occasionings")
    self.assertEqual(r, ['occasionings'])

    _, r = self.anagrams2.get_anagrams("occasions")
    self.assertEqual(r, ['occasions'])

    _, r = self.anagrams2.get_anagrams("occident")
    self.assertEqual(r, ['occident'])

    _, r = self.anagrams2.get_anagrams("occidental")
    self.assertEqual(r, ['occidental'])

    _, r = self.anagrams2.get_anagrams("occidentalization")
    self.assertEqual(r, ['occidentalization'])

    _, r = self.anagrams2.get_anagrams("occidentalizations")
    self.assertEqual(r, ['occidentalizations'])

    _, r = self.anagrams2.get_anagrams("occidentalize")
    self.assertEqual(r, ['occidentalize'])

    _, r = self.anagrams2.get_anagrams("occidentalized")
    self.assertEqual(r, ['occidentalized'])

    _, r = self.anagrams2.get_anagrams("occidentalizes")
    self.assertEqual(r, ['occidentalizes'])

    _, r = self.anagrams2.get_anagrams("occidentalizing")
    self.assertEqual(r, ['occidentalizing'])

    _, r = self.anagrams2.get_anagrams("occidentals")
    self.assertEqual(r, ['occidentals'])

    _, r = self.anagrams2.get_anagrams("occipital")
    self.assertEqual(r, ['occipital'])

    _, r = self.anagrams2.get_anagrams("occlude")
    self.assertEqual(r, ['occlude'])

    _, r = self.anagrams2.get_anagrams("occluded")
    self.assertEqual(r, ['occluded'])

    _, r = self.anagrams2.get_anagrams("occludes")
    self.assertEqual(r, ['occludes'])

    _, r = self.anagrams2.get_anagrams("occlusion")
    self.assertEqual(r, ['occlusion'])

    _, r = self.anagrams2.get_anagrams("occlusions")
    self.assertEqual(r, ['occlusions'])

    _, r = self.anagrams2.get_anagrams("occult")
    self.assertEqual(r, ['occult'])

    _, r = self.anagrams2.get_anagrams("occupancies")
    self.assertEqual(r, ['occupancies'])

    _, r = self.anagrams2.get_anagrams("occupancy")
    self.assertEqual(r, ['occupancy'])

    _, r = self.anagrams2.get_anagrams("occupant")
    self.assertEqual(r, ['occupant'])

    _, r = self.anagrams2.get_anagrams("occupants")
    self.assertEqual(r, ['occupants'])

    _, r = self.anagrams2.get_anagrams("occupation")
    self.assertEqual(r, ['occupation'])

    _, r = self.anagrams2.get_anagrams("occupational")
    self.assertEqual(r, ['occupational'])

    _, r = self.anagrams2.get_anagrams("occupationally")
    self.assertEqual(r, ['occupationally'])

    _, r = self.anagrams2.get_anagrams("occupations")
    self.assertEqual(r, ['occupations'])

    _, r = self.anagrams2.get_anagrams("occupied")
    self.assertEqual(r, ['occupied'])

    _, r = self.anagrams2.get_anagrams("occupier")
    self.assertEqual(r, ['occupier'])

    _, r = self.anagrams2.get_anagrams("occupies")
    self.assertEqual(r, ['occupies'])

    _, r = self.anagrams2.get_anagrams("occupy")
    self.assertEqual(r, ['occupy'])

    _, r = self.anagrams2.get_anagrams("occupying")
    self.assertEqual(r, ['occupying'])

    _, r = self.anagrams2.get_anagrams("occur")
    self.assertEqual(r, ['occur'])

    _, r = self.anagrams2.get_anagrams("occurred")
    self.assertEqual(r, ['occurred'])

    _, r = self.anagrams2.get_anagrams("occurrence")
    self.assertEqual(r, ['occurrence'])

    _, r = self.anagrams2.get_anagrams("occurrences")
    self.assertEqual(r, ['occurrences'])

    _, r = self.anagrams2.get_anagrams("occurring")
    self.assertEqual(r, ['occurring'])

    _, r = self.anagrams2.get_anagrams("occurs")
    self.assertEqual(r, ['crocus', 'occurs', 'succor'])

    _, r = self.anagrams2.get_anagrams("ocean")
    self.assertEqual(r, ['canoe', 'ocean'])

    _, r = self.anagrams2.get_anagrams("oceania")
    self.assertEqual(r, ['oceania'])

    _, r = self.anagrams2.get_anagrams("oceanic")
    self.assertEqual(r, ['cocaine', 'oceanic'])

    _, r = self.anagrams2.get_anagrams("oceanography")
    self.assertEqual(r, ['oceanography'])

    _, r = self.anagrams2.get_anagrams("oceans")
    self.assertEqual(r, ['canoes', 'oceans'])

    _, r = self.anagrams2.get_anagrams("o'connell")
    self.assertEqual(r, ["o'connell"])

    _, r = self.anagrams2.get_anagrams("o'connor")
    self.assertEqual(r, ["o'connor"])

    _, r = self.anagrams2.get_anagrams("oconomowoc")
    self.assertEqual(r, ['oconomowoc'])

    _, r = self.anagrams2.get_anagrams("octagon")
    self.assertEqual(r, ['octagon'])

    _, r = self.anagrams2.get_anagrams("octagonal")
    self.assertEqual(r, ['octagonal'])

    _, r = self.anagrams2.get_anagrams("octahedra")
    self.assertEqual(r, ['octahedra'])

    _, r = self.anagrams2.get_anagrams("octahedral")
    self.assertEqual(r, ['octahedral'])

    _, r = self.anagrams2.get_anagrams("octahedron")
    self.assertEqual(r, ['octahedron'])

    _, r = self.anagrams2.get_anagrams("octal")
    self.assertEqual(r, ['octal'])

    _, r = self.anagrams2.get_anagrams("octane")
    self.assertEqual(r, ['octane'])

    _, r = self.anagrams2.get_anagrams("octave")
    self.assertEqual(r, ['octave'])

    _, r = self.anagrams2.get_anagrams("octaves")
    self.assertEqual(r, ['octaves'])

    _, r = self.anagrams2.get_anagrams("octavia")
    self.assertEqual(r, ['octavia'])

    _, r = self.anagrams2.get_anagrams("octet")
    self.assertEqual(r, ['octet'])

    _, r = self.anagrams2.get_anagrams("octets")
    self.assertEqual(r, ['octets'])

    _, r = self.anagrams2.get_anagrams("october")
    self.assertEqual(r, ['october'])

    _, r = self.anagrams2.get_anagrams("octobers")
    self.assertEqual(r, ['octobers'])

    _, r = self.anagrams2.get_anagrams("octogenarian")
    self.assertEqual(r, ['octogenarian'])

    _, r = self.anagrams2.get_anagrams("octopus")
    self.assertEqual(r, ['octopus'])

    _, r = self.anagrams2.get_anagrams("odd")
    self.assertEqual(r, ['odd'])

    _, r = self.anagrams2.get_anagrams("odder")
    self.assertEqual(r, ['odder'])

    _, r = self.anagrams2.get_anagrams("oddest")
    self.assertEqual(r, ['oddest'])

    _, r = self.anagrams2.get_anagrams("oddities")
    self.assertEqual(r, ['oddities'])

    _, r = self.anagrams2.get_anagrams("oddity")
    self.assertEqual(r, ['oddity'])

    _, r = self.anagrams2.get_anagrams("oddly")
    self.assertEqual(r, ['oddly'])

    _, r = self.anagrams2.get_anagrams("oddness")
    self.assertEqual(r, ['oddness'])

    _, r = self.anagrams2.get_anagrams("odds")
    self.assertEqual(r, ['odds'])

    _, r = self.anagrams2.get_anagrams("ode")
    self.assertEqual(r, ['doe', 'ode'])

    _, r = self.anagrams2.get_anagrams("o'dell")
    self.assertEqual(r, ["o'dell"])

    _, r = self.anagrams2.get_anagrams("oderberg")
    self.assertEqual(r, ['oderberg'])

    _, r = self.anagrams2.get_anagrams("oderbergs")
    self.assertEqual(r, ['oderbergs'])

    _, r = self.anagrams2.get_anagrams("odes")
    self.assertEqual(r, ['does', 'dose', 'odes'])

    _, r = self.anagrams2.get_anagrams("odessa")
    self.assertEqual(r, ['odessa'])

    _, r = self.anagrams2.get_anagrams("odin")
    self.assertEqual(r, ['dion', 'indo', 'odin'])

    _, r = self.anagrams2.get_anagrams("odious")
    self.assertEqual(r, ['odious'])

    _, r = self.anagrams2.get_anagrams("odiously")
    self.assertEqual(r, ['odiously'])

    _, r = self.anagrams2.get_anagrams("odiousness")
    self.assertEqual(r, ['odiousness'])

    _, r = self.anagrams2.get_anagrams("odium")
    self.assertEqual(r, ['odium'])

    _, r = self.anagrams2.get_anagrams("o'donnell")
    self.assertEqual(r, ["o'donnell"])

    _, r = self.anagrams2.get_anagrams("odor")
    self.assertEqual(r, ['door', 'odor'])

    _, r = self.anagrams2.get_anagrams("odorous")
    self.assertEqual(r, ['odorous'])

    _, r = self.anagrams2.get_anagrams("odorously")
    self.assertEqual(r, ['odorously'])

    _, r = self.anagrams2.get_anagrams("odorousness")
    self.assertEqual(r, ['odorousness'])

    _, r = self.anagrams2.get_anagrams("odors")
    self.assertEqual(r, ['doors', 'odors'])

    _, r = self.anagrams2.get_anagrams("o'dwyer")
    self.assertEqual(r, ["o'dwyer"])

    _, r = self.anagrams2.get_anagrams("odysseus")
    self.assertEqual(r, ['odysseus'])

    _, r = self.anagrams2.get_anagrams("odyssey")
    self.assertEqual(r, ['odyssey'])

    _, r = self.anagrams2.get_anagrams("oedipal")
    self.assertEqual(r, ['oedipal'])

    _, r = self.anagrams2.get_anagrams("oedipally")
    self.assertEqual(r, ['oedipally'])

    _, r = self.anagrams2.get_anagrams("oedipus")
    self.assertEqual(r, ['oedipus'])

    _, r = self.anagrams2.get_anagrams("of")
    self.assertEqual(r, ['of'])

    _, r = self.anagrams2.get_anagrams("off")
    self.assertEqual(r, ['off'])

    _, r = self.anagrams2.get_anagrams("offenbach")
    self.assertEqual(r, ['offenbach'])

    _, r = self.anagrams2.get_anagrams("offend")
    self.assertEqual(r, ['offend'])

    _, r = self.anagrams2.get_anagrams("offended")
    self.assertEqual(r, ['offended'])

    _, r = self.anagrams2.get_anagrams("offender")
    self.assertEqual(r, ['offender'])

    _, r = self.anagrams2.get_anagrams("offenders")
    self.assertEqual(r, ['offenders'])

    _, r = self.anagrams2.get_anagrams("offending")
    self.assertEqual(r, ['offending'])

    _, r = self.anagrams2.get_anagrams("offends")
    self.assertEqual(r, ['offends'])

    _, r = self.anagrams2.get_anagrams("offense")
    self.assertEqual(r, ['offense'])

    _, r = self.anagrams2.get_anagrams("offenses")
    self.assertEqual(r, ['offenses'])

    _, r = self.anagrams2.get_anagrams("offensive")
    self.assertEqual(r, ['offensive'])

    _, r = self.anagrams2.get_anagrams("offensively")
    self.assertEqual(r, ['offensively'])

    _, r = self.anagrams2.get_anagrams("offensiveness")
    self.assertEqual(r, ['offensiveness'])

    _, r = self.anagrams2.get_anagrams("offer")
    self.assertEqual(r, ['offer'])

    _, r = self.anagrams2.get_anagrams("offered")
    self.assertEqual(r, ['offered'])

    _, r = self.anagrams2.get_anagrams("offerer")
    self.assertEqual(r, ['offerer'])

    _, r = self.anagrams2.get_anagrams("offerers")
    self.assertEqual(r, ['offerers'])

    _, r = self.anagrams2.get_anagrams("offering")
    self.assertEqual(r, ['offering'])

    _, r = self.anagrams2.get_anagrams("offerings")
    self.assertEqual(r, ['offerings'])

    _, r = self.anagrams2.get_anagrams("offers")
    self.assertEqual(r, ['offers'])

    _, r = self.anagrams2.get_anagrams("offhand")
    self.assertEqual(r, ['offhand'])

    _, r = self.anagrams2.get_anagrams("office")
    self.assertEqual(r, ['office'])

    _, r = self.anagrams2.get_anagrams("officemate")
    self.assertEqual(r, ['officemate'])

    _, r = self.anagrams2.get_anagrams("officer")
    self.assertEqual(r, ['officer'])

    _, r = self.anagrams2.get_anagrams("officers")
    self.assertEqual(r, ['officers'])

    _, r = self.anagrams2.get_anagrams("offices")
    self.assertEqual(r, ['offices'])

    _, r = self.anagrams2.get_anagrams("official")
    self.assertEqual(r, ['official'])

    _, r = self.anagrams2.get_anagrams("officialdom")
    self.assertEqual(r, ['officialdom'])

    _, r = self.anagrams2.get_anagrams("officially")
    self.assertEqual(r, ['officially'])

    _, r = self.anagrams2.get_anagrams("officials")
    self.assertEqual(r, ['officials'])

    _, r = self.anagrams2.get_anagrams("officiate")
    self.assertEqual(r, ['officiate'])

    _, r = self.anagrams2.get_anagrams("officio")
    self.assertEqual(r, ['officio'])

    _, r = self.anagrams2.get_anagrams("officious")
    self.assertEqual(r, ['officious'])

    _, r = self.anagrams2.get_anagrams("officiously")
    self.assertEqual(r, ['officiously'])

    _, r = self.anagrams2.get_anagrams("officiousness")
    self.assertEqual(r, ['officiousness'])

    _, r = self.anagrams2.get_anagrams("offing")
    self.assertEqual(r, ['offing'])

    _, r = self.anagrams2.get_anagrams("offload")
    self.assertEqual(r, ['offload'])

    _, r = self.anagrams2.get_anagrams("offs")
    self.assertEqual(r, ['offs'])

    _, r = self.anagrams2.get_anagrams("offset")
    self.assertEqual(r, ['offset'])

    _, r = self.anagrams2.get_anagrams("offsets")
    self.assertEqual(r, ['offsets'])

    _, r = self.anagrams2.get_anagrams("offsetting")
    self.assertEqual(r, ['offsetting'])

    _, r = self.anagrams2.get_anagrams("offshore")
    self.assertEqual(r, ['offshore'])

    _, r = self.anagrams2.get_anagrams("offspring")
    self.assertEqual(r, ['offspring'])

    _, r = self.anagrams2.get_anagrams("oft")
    self.assertEqual(r, ['oft'])

    _, r = self.anagrams2.get_anagrams("often")
    self.assertEqual(r, ['often'])

    _, r = self.anagrams2.get_anagrams("oftentimes")
    self.assertEqual(r, ['oftentimes'])

    _, r = self.anagrams2.get_anagrams("ogden")
    self.assertEqual(r, ['ogden'])

    _, r = self.anagrams2.get_anagrams("oh")
    self.assertEqual(r, ['oh'])

    _, r = self.anagrams2.get_anagrams("o'hare")
    self.assertEqual(r, ["o'hare"])

    _, r = self.anagrams2.get_anagrams("ohio")
    self.assertEqual(r, ['ohio'])

    _, r = self.anagrams2.get_anagrams("ohm")
    self.assertEqual(r, ['hom', 'ohm'])

    _, r = self.anagrams2.get_anagrams("ohmmeter")
    self.assertEqual(r, ['ohmmeter'])

    _, r = self.anagrams2.get_anagrams("oil")
    self.assertEqual(r, ['oil'])

    _, r = self.anagrams2.get_anagrams("oilcloth")
    self.assertEqual(r, ['oilcloth'])

    _, r = self.anagrams2.get_anagrams("oiled")
    self.assertEqual(r, ['oiled'])

    _, r = self.anagrams2.get_anagrams("oiler")
    self.assertEqual(r, ['loire', 'oiler'])

    _, r = self.anagrams2.get_anagrams("oilers")
    self.assertEqual(r, ['oilers'])

    _, r = self.anagrams2.get_anagrams("oilier")
    self.assertEqual(r, ['oilier'])

    _, r = self.anagrams2.get_anagrams("oiliest")
    self.assertEqual(r, ['oiliest'])

    _, r = self.anagrams2.get_anagrams("oiling")
    self.assertEqual(r, ['oiling'])

    _, r = self.anagrams2.get_anagrams("oils")
    self.assertEqual(r, ['lois', 'oils', 'silo', 'soil'])

    _, r = self.anagrams2.get_anagrams("oily")
    self.assertEqual(r, ['oily'])

    _, r = self.anagrams2.get_anagrams("ointment")
    self.assertEqual(r, ['ointment'])

    _, r = self.anagrams2.get_anagrams("ojibwa")
    self.assertEqual(r, ['ojibwa'])

    _, r = self.anagrams2.get_anagrams("okamoto")
    self.assertEqual(r, ['okamoto'])

    _, r = self.anagrams2.get_anagrams("okay")
    self.assertEqual(r, ['okay'])

    _, r = self.anagrams2.get_anagrams("okinawa")
    self.assertEqual(r, ['okinawa'])

    _, r = self.anagrams2.get_anagrams("oklahoma")
    self.assertEqual(r, ['oklahoma'])

    _, r = self.anagrams2.get_anagrams("oklahoman")
    self.assertEqual(r, ['oklahoman'])

    _, r = self.anagrams2.get_anagrams("olaf")
    self.assertEqual(r, ['foal', 'loaf', 'olaf'])

    _, r = self.anagrams2.get_anagrams("olav")
    self.assertEqual(r, ['olav', 'oval'])

    _, r = self.anagrams2.get_anagrams("old")
    self.assertEqual(r, ['old'])

    _, r = self.anagrams2.get_anagrams("olden")
    self.assertEqual(r, ['eldon', 'olden'])

    _, r = self.anagrams2.get_anagrams("oldenburg")
    self.assertEqual(r, ['oldenburg'])

    _, r = self.anagrams2.get_anagrams("older")
    self.assertEqual(r, ['older'])

    _, r = self.anagrams2.get_anagrams("oldest")
    self.assertEqual(r, ['oldest'])

    _, r = self.anagrams2.get_anagrams("oldness")
    self.assertEqual(r, ['oldness'])

    _, r = self.anagrams2.get_anagrams("oldsmobile")
    self.assertEqual(r, ['oldsmobile'])

    _, r = self.anagrams2.get_anagrams("olduvai")
    self.assertEqual(r, ['olduvai'])

    _, r = self.anagrams2.get_anagrams("oldy")
    self.assertEqual(r, ['oldy'])

    _, r = self.anagrams2.get_anagrams("oleander")
    self.assertEqual(r, ['oleander'])

    _, r = self.anagrams2.get_anagrams("o'leary")
    self.assertEqual(r, ["o'leary"])

    _, r = self.anagrams2.get_anagrams("oleg")
    self.assertEqual(r, ['oleg'])

    _, r = self.anagrams2.get_anagrams("oleomargarine")
    self.assertEqual(r, ['oleomargarine'])

    _, r = self.anagrams2.get_anagrams("olga")
    self.assertEqual(r, ['goal', 'olga'])

    _, r = self.anagrams2.get_anagrams("oligarchy")
    self.assertEqual(r, ['oligarchy'])

    _, r = self.anagrams2.get_anagrams("oligocene")
    self.assertEqual(r, ['oligocene'])

    _, r = self.anagrams2.get_anagrams("olin")
    self.assertEqual(r, ['lion', 'loin', 'olin'])

    _, r = self.anagrams2.get_anagrams("olive")
    self.assertEqual(r, ['olive'])

    _, r = self.anagrams2.get_anagrams("oliver")
    self.assertEqual(r, ['oliver'])

    _, r = self.anagrams2.get_anagrams("olivers")
    self.assertEqual(r, ['olivers'])

    _, r = self.anagrams2.get_anagrams("olives")
    self.assertEqual(r, ['olives'])

    _, r = self.anagrams2.get_anagrams("olivetti")
    self.assertEqual(r, ['olivetti'])

    _, r = self.anagrams2.get_anagrams("olivia")
    self.assertEqual(r, ['olivia'])

    _, r = self.anagrams2.get_anagrams("olivier")
    self.assertEqual(r, ['olivier'])

    _, r = self.anagrams2.get_anagrams("olsen")
    self.assertEqual(r, ['olsen'])

    _, r = self.anagrams2.get_anagrams("olson")
    self.assertEqual(r, ['olson', 'solon'])

    _, r = self.anagrams2.get_anagrams("olympia")
    self.assertEqual(r, ['olympia'])

    _, r = self.anagrams2.get_anagrams("olympian")
    self.assertEqual(r, ['olympian'])

    _, r = self.anagrams2.get_anagrams("olympianize")
    self.assertEqual(r, ['olympianize'])

    _, r = self.anagrams2.get_anagrams("olympianizes")
    self.assertEqual(r, ['olympianizes'])

    _, r = self.anagrams2.get_anagrams("olympic")
    self.assertEqual(r, ['olympic'])

    _, r = self.anagrams2.get_anagrams("olympics")
    self.assertEqual(r, ['olympics'])

    _, r = self.anagrams2.get_anagrams("olympus")
    self.assertEqual(r, ['olympus'])

    _, r = self.anagrams2.get_anagrams("omaha")
    self.assertEqual(r, ['omaha'])

    _, r = self.anagrams2.get_anagrams("oman")
    self.assertEqual(r, ['moan', 'mona', 'oman'])

    _, r = self.anagrams2.get_anagrams("omega")
    self.assertEqual(r, ['omega'])

    _, r = self.anagrams2.get_anagrams("omelet")
    self.assertEqual(r, ['omelet'])

    _, r = self.anagrams2.get_anagrams("omen")
    self.assertEqual(r, ['moen', 'omen'])

    _, r = self.anagrams2.get_anagrams("omens")
    self.assertEqual(r, ['meson', 'omens'])

    _, r = self.anagrams2.get_anagrams("omicron")
    self.assertEqual(r, ['omicron'])

    _, r = self.anagrams2.get_anagrams("ominous")
    self.assertEqual(r, ['ominous'])

    _, r = self.anagrams2.get_anagrams("ominously")
    self.assertEqual(r, ['ominously'])

    _, r = self.anagrams2.get_anagrams("ominousness")
    self.assertEqual(r, ['ominousness'])

    _, r = self.anagrams2.get_anagrams("omission")
    self.assertEqual(r, ['omission'])

    _, r = self.anagrams2.get_anagrams("omissions")
    self.assertEqual(r, ['omissions'])

    _, r = self.anagrams2.get_anagrams("omit")
    self.assertEqual(r, ['omit'])

    _, r = self.anagrams2.get_anagrams("omits")
    self.assertEqual(r, ['moist', 'omits'])

    _, r = self.anagrams2.get_anagrams("omitted")
    self.assertEqual(r, ['omitted'])

    _, r = self.anagrams2.get_anagrams("omitting")
    self.assertEqual(r, ['omitting'])

    _, r = self.anagrams2.get_anagrams("omnibus")
    self.assertEqual(r, ['omnibus'])

    _, r = self.anagrams2.get_anagrams("omnidirectional")
    self.assertEqual(r, ['omnidirectional'])

    _, r = self.anagrams2.get_anagrams("omnipotent")
    self.assertEqual(r, ['omnipotent'])

    _, r = self.anagrams2.get_anagrams("omnipresent")
    self.assertEqual(r, ['omnipresent'])

    _, r = self.anagrams2.get_anagrams("omniscient")
    self.assertEqual(r, ['omniscient'])

    _, r = self.anagrams2.get_anagrams("omnisciently")
    self.assertEqual(r, ['omnisciently'])

    _, r = self.anagrams2.get_anagrams("omnivore")
    self.assertEqual(r, ['omnivore'])

    _, r = self.anagrams2.get_anagrams("on")
    self.assertEqual(r, ['no', 'on'])

    _, r = self.anagrams2.get_anagrams("onanism")
    self.assertEqual(r, ['mansion', 'onanism'])

    _, r = self.anagrams2.get_anagrams("once")
    self.assertEqual(r, ['cone', 'once'])

    _, r = self.anagrams2.get_anagrams("oncology")
    self.assertEqual(r, ['oncology'])

    _, r = self.anagrams2.get_anagrams("one")
    self.assertEqual(r, ['one'])

    _, r = self.anagrams2.get_anagrams("oneida")
    self.assertEqual(r, ['oneida'])

    _, r = self.anagrams2.get_anagrams("o'neill")
    self.assertEqual(r, ["o'neill"])

    _, r = self.anagrams2.get_anagrams("oneness")
    self.assertEqual(r, ['oneness'])

    _, r = self.anagrams2.get_anagrams("onerous")
    self.assertEqual(r, ['onerous'])

    _, r = self.anagrams2.get_anagrams("ones")
    self.assertEqual(r, ['enos', 'nose', 'ones'])

    _, r = self.anagrams2.get_anagrams("oneself")
    self.assertEqual(r, ['oneself'])

    _, r = self.anagrams2.get_anagrams("onetime")
    self.assertEqual(r, ['onetime'])

    _, r = self.anagrams2.get_anagrams("ongoing")
    self.assertEqual(r, ['ongoing'])

    _, r = self.anagrams2.get_anagrams("onion")
    self.assertEqual(r, ['onion'])

    _, r = self.anagrams2.get_anagrams("onions")
    self.assertEqual(r, ['onions'])

    _, r = self.anagrams2.get_anagrams("online")
    self.assertEqual(r, ['online'])

    _, r = self.anagrams2.get_anagrams("onlooker")
    self.assertEqual(r, ['onlooker'])

    _, r = self.anagrams2.get_anagrams("only")
    self.assertEqual(r, ['lyon', 'only'])

    _, r = self.anagrams2.get_anagrams("onondaga")
    self.assertEqual(r, ['onondaga'])

    _, r = self.anagrams2.get_anagrams("onrush")
    self.assertEqual(r, ['hurons', 'onrush'])

    _, r = self.anagrams2.get_anagrams("onset")
    self.assertEqual(r, ['notes', 'onset', 'stone', 'tones'])

    _, r = self.anagrams2.get_anagrams("onsets")
    self.assertEqual(r, ['onsets', 'stones'])

    _, r = self.anagrams2.get_anagrams("onslaught")
    self.assertEqual(r, ['onslaught'])

    _, r = self.anagrams2.get_anagrams("ontario")
    self.assertEqual(r, ['ontario', 'oration'])

    _, r = self.anagrams2.get_anagrams("onto")
    self.assertEqual(r, ['onto'])

    _, r = self.anagrams2.get_anagrams("ontology")
    self.assertEqual(r, ['ontology'])

    _, r = self.anagrams2.get_anagrams("onus")
    self.assertEqual(r, ['onus'])

    _, r = self.anagrams2.get_anagrams("onward")
    self.assertEqual(r, ['onward'])

    _, r = self.anagrams2.get_anagrams("onwards")
    self.assertEqual(r, ['onwards'])

    _, r = self.anagrams2.get_anagrams("onyx")
    self.assertEqual(r, ['onyx'])

    _, r = self.anagrams2.get_anagrams("ooze")
    self.assertEqual(r, ['ooze'])

    _, r = self.anagrams2.get_anagrams("oozed")
    self.assertEqual(r, ['oozed'])

    _, r = self.anagrams2.get_anagrams("opacity")
    self.assertEqual(r, ['opacity'])

    _, r = self.anagrams2.get_anagrams("opal")
    self.assertEqual(r, ['opal', 'palo'])

    _, r = self.anagrams2.get_anagrams("opals")
    self.assertEqual(r, ['alsop', 'opals'])

    _, r = self.anagrams2.get_anagrams("opaque")
    self.assertEqual(r, ['opaque'])

    _, r = self.anagrams2.get_anagrams("opaquely")
    self.assertEqual(r, ['opaquely'])

    _, r = self.anagrams2.get_anagrams("opaqueness")
    self.assertEqual(r, ['opaqueness'])

    _, r = self.anagrams2.get_anagrams("opcode")
    self.assertEqual(r, ['cooped', 'opcode'])

    _, r = self.anagrams2.get_anagrams("opec")
    self.assertEqual(r, ['cope', 'opec'])

    _, r = self.anagrams2.get_anagrams("opel")
    self.assertEqual(r, ['opel', 'pole'])

    _, r = self.anagrams2.get_anagrams("open")
    self.assertEqual(r, ['open'])

    _, r = self.anagrams2.get_anagrams("opened")
    self.assertEqual(r, ['opened'])

    _, r = self.anagrams2.get_anagrams("opener")
    self.assertEqual(r, ['opener', 'reopen'])

    _, r = self.anagrams2.get_anagrams("openers")
    self.assertEqual(r, ['openers', 'penrose', 'reopens'])

    _, r = self.anagrams2.get_anagrams("opening")
    self.assertEqual(r, ['opening'])

    _, r = self.anagrams2.get_anagrams("openings")
    self.assertEqual(r, ['openings'])

    _, r = self.anagrams2.get_anagrams("openly")
    self.assertEqual(r, ['openly'])

    _, r = self.anagrams2.get_anagrams("openness")
    self.assertEqual(r, ['openness'])

    _, r = self.anagrams2.get_anagrams("opens")
    self.assertEqual(r, ['opens'])

    _, r = self.anagrams2.get_anagrams("opera")
    self.assertEqual(r, ['opera'])

    _, r = self.anagrams2.get_anagrams("operable")
    self.assertEqual(r, ['operable'])

    _, r = self.anagrams2.get_anagrams("operand")
    self.assertEqual(r, ['operand'])

    _, r = self.anagrams2.get_anagrams("operandi")
    self.assertEqual(r, ['operandi'])

    _, r = self.anagrams2.get_anagrams("operands")
    self.assertEqual(r, ['operands'])

    _, r = self.anagrams2.get_anagrams("operas")
    self.assertEqual(r, ['operas'])

    _, r = self.anagrams2.get_anagrams("operate")
    self.assertEqual(r, ['operate'])

    _, r = self.anagrams2.get_anagrams("operated")
    self.assertEqual(r, ['operated'])

    _, r = self.anagrams2.get_anagrams("operates")
    self.assertEqual(r, ['operates'])

    _, r = self.anagrams2.get_anagrams("operating")
    self.assertEqual(r, ['operating'])

    _, r = self.anagrams2.get_anagrams("operation")
    self.assertEqual(r, ['operation'])

    _, r = self.anagrams2.get_anagrams("operational")
    self.assertEqual(r, ['operational'])

    _, r = self.anagrams2.get_anagrams("operationally")
    self.assertEqual(r, ['operationally'])

    _, r = self.anagrams2.get_anagrams("operations")
    self.assertEqual(r, ['operations'])

    _, r = self.anagrams2.get_anagrams("operative")
    self.assertEqual(r, ['operative'])

    _, r = self.anagrams2.get_anagrams("operatives")
    self.assertEqual(r, ['operatives'])

    _, r = self.anagrams2.get_anagrams("operator")
    self.assertEqual(r, ['operator'])

    _, r = self.anagrams2.get_anagrams("operators")
    self.assertEqual(r, ['operators'])

    _, r = self.anagrams2.get_anagrams("operetta")
    self.assertEqual(r, ['operetta'])

    _, r = self.anagrams2.get_anagrams("ophiuchus")
    self.assertEqual(r, ['ophiuchus'])

    _, r = self.anagrams2.get_anagrams("ophiucus")
    self.assertEqual(r, ['ophiucus'])

    _, r = self.anagrams2.get_anagrams("opiate")
    self.assertEqual(r, ['opiate'])

    _, r = self.anagrams2.get_anagrams("opinion")
    self.assertEqual(r, ['opinion'])

    _, r = self.anagrams2.get_anagrams("opinions")
    self.assertEqual(r, ['opinions'])

    _, r = self.anagrams2.get_anagrams("opium")
    self.assertEqual(r, ['opium'])

    _, r = self.anagrams2.get_anagrams("opossum")
    self.assertEqual(r, ['opossum'])

    _, r = self.anagrams2.get_anagrams("oppenheimer")
    self.assertEqual(r, ['oppenheimer'])

    _, r = self.anagrams2.get_anagrams("opponent")
    self.assertEqual(r, ['opponent'])

    _, r = self.anagrams2.get_anagrams("opponents")
    self.assertEqual(r, ['opponents'])

    _, r = self.anagrams2.get_anagrams("opportune")
    self.assertEqual(r, ['opportune'])

    _, r = self.anagrams2.get_anagrams("opportunely")
    self.assertEqual(r, ['opportunely'])

    _, r = self.anagrams2.get_anagrams("opportunism")
    self.assertEqual(r, ['opportunism'])

    _, r = self.anagrams2.get_anagrams("opportunistic")
    self.assertEqual(r, ['opportunistic'])

    _, r = self.anagrams2.get_anagrams("opportunities")
    self.assertEqual(r, ['opportunities'])

    _, r = self.anagrams2.get_anagrams("opportunity")
    self.assertEqual(r, ['opportunity'])

    _, r = self.anagrams2.get_anagrams("opposable")
    self.assertEqual(r, ['opposable'])

    _, r = self.anagrams2.get_anagrams("oppose")
    self.assertEqual(r, ['oppose'])

    _, r = self.anagrams2.get_anagrams("opposed")
    self.assertEqual(r, ['opposed'])

    _, r = self.anagrams2.get_anagrams("opposes")
    self.assertEqual(r, ['opposes'])

    _, r = self.anagrams2.get_anagrams("opposing")
    self.assertEqual(r, ['opposing'])

    _, r = self.anagrams2.get_anagrams("opposite")
    self.assertEqual(r, ['opposite'])

    _, r = self.anagrams2.get_anagrams("oppositely")
    self.assertEqual(r, ['oppositely'])

    _, r = self.anagrams2.get_anagrams("oppositeness")
    self.assertEqual(r, ['oppositeness'])

    _, r = self.anagrams2.get_anagrams("opposites")
    self.assertEqual(r, ['opposites'])

    _, r = self.anagrams2.get_anagrams("opposition")
    self.assertEqual(r, ['opposition'])

    _, r = self.anagrams2.get_anagrams("oppress")
    self.assertEqual(r, ['oppress'])

    _, r = self.anagrams2.get_anagrams("oppressed")
    self.assertEqual(r, ['oppressed'])

    _, r = self.anagrams2.get_anagrams("oppresses")
    self.assertEqual(r, ['oppresses'])

    _, r = self.anagrams2.get_anagrams("oppressing")
    self.assertEqual(r, ['oppressing'])

    _, r = self.anagrams2.get_anagrams("oppression")
    self.assertEqual(r, ['oppression'])

    _, r = self.anagrams2.get_anagrams("oppressive")
    self.assertEqual(r, ['oppressive'])

    _, r = self.anagrams2.get_anagrams("oppressor")
    self.assertEqual(r, ['oppressor'])

    _, r = self.anagrams2.get_anagrams("oppressors")
    self.assertEqual(r, ['oppressors'])

    _, r = self.anagrams2.get_anagrams("opprobrium")
    self.assertEqual(r, ['opprobrium'])

    _, r = self.anagrams2.get_anagrams("opt")
    self.assertEqual(r, ['opt', 'pot', 'top'])

    _, r = self.anagrams2.get_anagrams("opted")
    self.assertEqual(r, ['depot', 'opted'])

    _, r = self.anagrams2.get_anagrams("opthalmic")
    self.assertEqual(r, ['opthalmic'])

    _, r = self.anagrams2.get_anagrams("optic")
    self.assertEqual(r, ['optic', 'topic'])

    _, r = self.anagrams2.get_anagrams("optical")
    self.assertEqual(r, ['capitol', 'optical', 'topical'])

    _, r = self.anagrams2.get_anagrams("optically")
    self.assertEqual(r, ['optically', 'topically'])

    _, r = self.anagrams2.get_anagrams("optics")
    self.assertEqual(r, ['optics', 'topics'])

    _, r = self.anagrams2.get_anagrams("optima")
    self.assertEqual(r, ['optima'])

    _, r = self.anagrams2.get_anagrams("optimal")
    self.assertEqual(r, ['optimal'])

    _, r = self.anagrams2.get_anagrams("optimality")
    self.assertEqual(r, ['optimality'])

    _, r = self.anagrams2.get_anagrams("optimally")
    self.assertEqual(r, ['optimally'])

    _, r = self.anagrams2.get_anagrams("optimism")
    self.assertEqual(r, ['optimism'])

    _, r = self.anagrams2.get_anagrams("optimist")
    self.assertEqual(r, ['optimist'])

    _, r = self.anagrams2.get_anagrams("optimistic")
    self.assertEqual(r, ['optimistic'])

    _, r = self.anagrams2.get_anagrams("optimistically")
    self.assertEqual(r, ['optimistically'])

    _, r = self.anagrams2.get_anagrams("optimization")
    self.assertEqual(r, ['optimization'])

    _, r = self.anagrams2.get_anagrams("optimizations")
    self.assertEqual(r, ['optimizations'])

    _, r = self.anagrams2.get_anagrams("optimize")
    self.assertEqual(r, ['optimize'])

    _, r = self.anagrams2.get_anagrams("optimized")
    self.assertEqual(r, ['optimized'])

    _, r = self.anagrams2.get_anagrams("optimizer")
    self.assertEqual(r, ['optimizer'])

    _, r = self.anagrams2.get_anagrams("optimizers")
    self.assertEqual(r, ['optimizers'])

    _, r = self.anagrams2.get_anagrams("optimizes")
    self.assertEqual(r, ['optimizes'])

    _, r = self.anagrams2.get_anagrams("optimizing")
    self.assertEqual(r, ['optimizing'])

    _, r = self.anagrams2.get_anagrams("optimum")
    self.assertEqual(r, ['optimum'])

    _, r = self.anagrams2.get_anagrams("opting")
    self.assertEqual(r, ['opting'])

    _, r = self.anagrams2.get_anagrams("option")
    self.assertEqual(r, ['option', 'potion'])

    _, r = self.anagrams2.get_anagrams("optional")
    self.assertEqual(r, ['optional'])

    _, r = self.anagrams2.get_anagrams("optionally")
    self.assertEqual(r, ['optionally'])

    _, r = self.anagrams2.get_anagrams("options")
    self.assertEqual(r, ['options'])

    _, r = self.anagrams2.get_anagrams("optoacoustic")
    self.assertEqual(r, ['optoacoustic'])

    _, r = self.anagrams2.get_anagrams("optometrist")
    self.assertEqual(r, ['optometrist'])

    _, r = self.anagrams2.get_anagrams("optometry")
    self.assertEqual(r, ['optometry'])

    _, r = self.anagrams2.get_anagrams("opts")
    self.assertEqual(r, ['opts', 'post', 'pots', 'spot', 'stop', 'tops'])

    _, r = self.anagrams2.get_anagrams("opulence")
    self.assertEqual(r, ['opulence'])

    _, r = self.anagrams2.get_anagrams("opulent")
    self.assertEqual(r, ['opulent'])

    _, r = self.anagrams2.get_anagrams("opus")
    self.assertEqual(r, ['opus', 'soup'])

    _, r = self.anagrams2.get_anagrams("or")
    self.assertEqual(r, ['or'])

    _, r = self.anagrams2.get_anagrams("oracle")
    self.assertEqual(r, ['oracle'])

    _, r = self.anagrams2.get_anagrams("oracles")
    self.assertEqual(r, ['oracles'])

    _, r = self.anagrams2.get_anagrams("oral")
    self.assertEqual(r, ['oral'])

    _, r = self.anagrams2.get_anagrams("orally")
    self.assertEqual(r, ['orally'])

    _, r = self.anagrams2.get_anagrams("orange")
    self.assertEqual(r, ['orange'])

    _, r = self.anagrams2.get_anagrams("oranges")
    self.assertEqual(r, ['oranges'])

    _, r = self.anagrams2.get_anagrams("orangutan")
    self.assertEqual(r, ['orangutan'])

    _, r = self.anagrams2.get_anagrams("oration")
    self.assertEqual(r, ['ontario', 'oration'])

    _, r = self.anagrams2.get_anagrams("orations")
    self.assertEqual(r, ['orations'])

    _, r = self.anagrams2.get_anagrams("orator")
    self.assertEqual(r, ['orator'])

    _, r = self.anagrams2.get_anagrams("oratories")
    self.assertEqual(r, ['oratories'])

    _, r = self.anagrams2.get_anagrams("orators")
    self.assertEqual(r, ['orators'])

    _, r = self.anagrams2.get_anagrams("oratory")
    self.assertEqual(r, ['oratory'])

    _, r = self.anagrams2.get_anagrams("orb")
    self.assertEqual(r, ['orb', 'rob'])

    _, r = self.anagrams2.get_anagrams("orbit")
    self.assertEqual(r, ['orbit'])

    _, r = self.anagrams2.get_anagrams("orbital")
    self.assertEqual(r, ['orbital'])

    _, r = self.anagrams2.get_anagrams("orbitally")
    self.assertEqual(r, ['orbitally'])

    _, r = self.anagrams2.get_anagrams("orbited")
    self.assertEqual(r, ['orbited'])

    _, r = self.anagrams2.get_anagrams("orbiter")
    self.assertEqual(r, ['orbiter'])

    _, r = self.anagrams2.get_anagrams("orbiters")
    self.assertEqual(r, ['orbiters'])

    _, r = self.anagrams2.get_anagrams("orbiting")
    self.assertEqual(r, ['orbiting'])

    _, r = self.anagrams2.get_anagrams("orbits")
    self.assertEqual(r, ['orbits'])

    _, r = self.anagrams2.get_anagrams("orchard")
    self.assertEqual(r, ['orchard'])

    _, r = self.anagrams2.get_anagrams("orchards")
    self.assertEqual(r, ['orchards'])

    _, r = self.anagrams2.get_anagrams("orchestra")
    self.assertEqual(r, ['orchestra'])

    _, r = self.anagrams2.get_anagrams("orchestral")
    self.assertEqual(r, ['orchestral'])

    _, r = self.anagrams2.get_anagrams("orchestras")
    self.assertEqual(r, ['orchestras'])

    _, r = self.anagrams2.get_anagrams("orchestrate")
    self.assertEqual(r, ['orchestrate'])

    _, r = self.anagrams2.get_anagrams("orchid")
    self.assertEqual(r, ['orchid'])

    _, r = self.anagrams2.get_anagrams("orchids")
    self.assertEqual(r, ['orchids'])

    _, r = self.anagrams2.get_anagrams("ordain")
    self.assertEqual(r, ['inroad', 'ordain'])

    _, r = self.anagrams2.get_anagrams("ordained")
    self.assertEqual(r, ['ordained'])

    _, r = self.anagrams2.get_anagrams("ordaining")
    self.assertEqual(r, ['ordaining'])

    _, r = self.anagrams2.get_anagrams("ordains")
    self.assertEqual(r, ['inroads', 'ordains'])

    _, r = self.anagrams2.get_anagrams("ordeal")
    self.assertEqual(r, ['laredo', 'loader', 'ordeal', 'reload'])

    _, r = self.anagrams2.get_anagrams("order")
    self.assertEqual(r, ['order'])

    _, r = self.anagrams2.get_anagrams("ordered")
    self.assertEqual(r, ['ordered'])

    _, r = self.anagrams2.get_anagrams("ordering")
    self.assertEqual(r, ['ordering'])

    _, r = self.anagrams2.get_anagrams("orderings")
    self.assertEqual(r, ['orderings'])

    _, r = self.anagrams2.get_anagrams("orderlies")
    self.assertEqual(r, ['orderlies'])

    _, r = self.anagrams2.get_anagrams("orderly")
    self.assertEqual(r, ['orderly'])

    _, r = self.anagrams2.get_anagrams("orders")
    self.assertEqual(r, ['orders'])

    _, r = self.anagrams2.get_anagrams("ordinal")
    self.assertEqual(r, ['lorinda', 'ordinal'])

    _, r = self.anagrams2.get_anagrams("ordinance")
    self.assertEqual(r, ['ordinance'])

    _, r = self.anagrams2.get_anagrams("ordinances")
    self.assertEqual(r, ['ordinances'])

    _, r = self.anagrams2.get_anagrams("ordinarily")
    self.assertEqual(r, ['ordinarily'])

    _, r = self.anagrams2.get_anagrams("ordinariness")
    self.assertEqual(r, ['ordinariness'])

    _, r = self.anagrams2.get_anagrams("ordinary")
    self.assertEqual(r, ['ordinary'])

    _, r = self.anagrams2.get_anagrams("ordinate")
    self.assertEqual(r, ['ordinate'])

    _, r = self.anagrams2.get_anagrams("ordinates")
    self.assertEqual(r, ['ordinates'])

    _, r = self.anagrams2.get_anagrams("ordination")
    self.assertEqual(r, ['ordination'])

    _, r = self.anagrams2.get_anagrams("ore")
    self.assertEqual(r, ['ore', 'roe'])

    _, r = self.anagrams2.get_anagrams("oregano")
    self.assertEqual(r, ['oregano'])

    _, r = self.anagrams2.get_anagrams("oregon")
    self.assertEqual(r, ['oregon'])

    _, r = self.anagrams2.get_anagrams("oregonians")
    self.assertEqual(r, ['oregonians'])

    _, r = self.anagrams2.get_anagrams("ores")
    self.assertEqual(r, ['eros', 'ores', 'rose', 'sore'])

    _, r = self.anagrams2.get_anagrams("oresteia")
    self.assertEqual(r, ['oresteia'])

    _, r = self.anagrams2.get_anagrams("orestes")
    self.assertEqual(r, ['orestes', 'stereos'])

    _, r = self.anagrams2.get_anagrams("organ")
    self.assertEqual(r, ['argon', 'groan', 'organ'])

    _, r = self.anagrams2.get_anagrams("organic")
    self.assertEqual(r, ['organic'])

    _, r = self.anagrams2.get_anagrams("organism")
    self.assertEqual(r, ['organism'])

    _, r = self.anagrams2.get_anagrams("organisms")
    self.assertEqual(r, ['organisms'])

    _, r = self.anagrams2.get_anagrams("organist")
    self.assertEqual(r, ['organist', 'roasting'])

    _, r = self.anagrams2.get_anagrams("organists")
    self.assertEqual(r, ['organists'])

    _, r = self.anagrams2.get_anagrams("organizable")
    self.assertEqual(r, ['organizable'])

    _, r = self.anagrams2.get_anagrams("organization")
    self.assertEqual(r, ['organization'])

    _, r = self.anagrams2.get_anagrams("organizational")
    self.assertEqual(r, ['organizational'])

    _, r = self.anagrams2.get_anagrams("organizationally")
    self.assertEqual(r, ['organizationally'])

    _, r = self.anagrams2.get_anagrams("organizations")
    self.assertEqual(r, ['organizations'])

    _, r = self.anagrams2.get_anagrams("organize")
    self.assertEqual(r, ['organize'])

    _, r = self.anagrams2.get_anagrams("organized")
    self.assertEqual(r, ['organized'])

    _, r = self.anagrams2.get_anagrams("organizer")
    self.assertEqual(r, ['organizer'])

    _, r = self.anagrams2.get_anagrams("organizers")
    self.assertEqual(r, ['organizers'])

    _, r = self.anagrams2.get_anagrams("organizes")
    self.assertEqual(r, ['organizes'])

    _, r = self.anagrams2.get_anagrams("organizing")
    self.assertEqual(r, ['organizing'])

    _, r = self.anagrams2.get_anagrams("organs")
    self.assertEqual(r, ['groans', 'organs'])

    _, r = self.anagrams2.get_anagrams("orgasm")
    self.assertEqual(r, ['orgasm'])

    _, r = self.anagrams2.get_anagrams("orgiastic")
    self.assertEqual(r, ['orgiastic'])

    _, r = self.anagrams2.get_anagrams("orgies")
    self.assertEqual(r, ['orgies'])

    _, r = self.anagrams2.get_anagrams("orgy")
    self.assertEqual(r, ['gory', 'gyro', 'orgy'])

    _, r = self.anagrams2.get_anagrams("orient")
    self.assertEqual(r, ['orient'])

    _, r = self.anagrams2.get_anagrams("oriental")
    self.assertEqual(r, ['oriental', 'relation'])

    _, r = self.anagrams2.get_anagrams("orientalization")
    self.assertEqual(r, ['orientalization'])

    _, r = self.anagrams2.get_anagrams("orientalizations")
    self.assertEqual(r, ['orientalizations'])

    _, r = self.anagrams2.get_anagrams("orientalize")
    self.assertEqual(r, ['orientalize'])

    _, r = self.anagrams2.get_anagrams("orientalized")
    self.assertEqual(r, ['orientalized'])

    _, r = self.anagrams2.get_anagrams("orientalizes")
    self.assertEqual(r, ['orientalizes'])

    _, r = self.anagrams2.get_anagrams("orientalizing")
    self.assertEqual(r, ['orientalizing'])

    _, r = self.anagrams2.get_anagrams("orientals")
    self.assertEqual(r, ['orientals', 'relations'])

    _, r = self.anagrams2.get_anagrams("orientation")
    self.assertEqual(r, ['orientation'])

    _, r = self.anagrams2.get_anagrams("orientations")
    self.assertEqual(r, ['orientations'])

    _, r = self.anagrams2.get_anagrams("oriented")
    self.assertEqual(r, ['oriented'])

    _, r = self.anagrams2.get_anagrams("orienting")
    self.assertEqual(r, ['orienting'])

    _, r = self.anagrams2.get_anagrams("orients")
    self.assertEqual(r, ['orients'])

    _, r = self.anagrams2.get_anagrams("orifice")
    self.assertEqual(r, ['orifice'])

    _, r = self.anagrams2.get_anagrams("orifices")
    self.assertEqual(r, ['orifices'])

    _, r = self.anagrams2.get_anagrams("origin")
    self.assertEqual(r, ['origin'])

    _, r = self.anagrams2.get_anagrams("original")
    self.assertEqual(r, ['original'])

    _, r = self.anagrams2.get_anagrams("originality")
    self.assertEqual(r, ['originality'])

    _, r = self.anagrams2.get_anagrams("originally")
    self.assertEqual(r, ['originally'])

    _, r = self.anagrams2.get_anagrams("originals")
    self.assertEqual(r, ['originals'])

    _, r = self.anagrams2.get_anagrams("originate")
    self.assertEqual(r, ['originate'])

    _, r = self.anagrams2.get_anagrams("originated")
    self.assertEqual(r, ['originated'])

    _, r = self.anagrams2.get_anagrams("originates")
    self.assertEqual(r, ['originates'])

    _, r = self.anagrams2.get_anagrams("originating")
    self.assertEqual(r, ['originating'])

    _, r = self.anagrams2.get_anagrams("origination")
    self.assertEqual(r, ['origination'])

    _, r = self.anagrams2.get_anagrams("originator")
    self.assertEqual(r, ['originator'])

    _, r = self.anagrams2.get_anagrams("originators")
    self.assertEqual(r, ['originators'])

    _, r = self.anagrams2.get_anagrams("origins")
    self.assertEqual(r, ['origins'])

    _, r = self.anagrams2.get_anagrams("orin")
    self.assertEqual(r, ['iron', 'orin'])

    _, r = self.anagrams2.get_anagrams("orinoco")
    self.assertEqual(r, ['orinoco'])

    _, r = self.anagrams2.get_anagrams("oriole")
    self.assertEqual(r, ['oriole'])

    _, r = self.anagrams2.get_anagrams("orion")
    self.assertEqual(r, ['orion'])

    _, r = self.anagrams2.get_anagrams("orkney")
    self.assertEqual(r, ['orkney'])

    _, r = self.anagrams2.get_anagrams("orlando")
    self.assertEqual(r, ['orlando'])

    _, r = self.anagrams2.get_anagrams("orleans")
    self.assertEqual(r, ['orleans', 'salerno'])

    _, r = self.anagrams2.get_anagrams("orlick")
    self.assertEqual(r, ['orlick'])

    _, r = self.anagrams2.get_anagrams("orly")
    self.assertEqual(r, ['orly'])

    _, r = self.anagrams2.get_anagrams("ornament")
    self.assertEqual(r, ['ornament'])

    _, r = self.anagrams2.get_anagrams("ornamental")
    self.assertEqual(r, ['ornamental'])

    _, r = self.anagrams2.get_anagrams("ornamentally")
    self.assertEqual(r, ['ornamentally'])

    _, r = self.anagrams2.get_anagrams("ornamentation")
    self.assertEqual(r, ['ornamentation'])

    _, r = self.anagrams2.get_anagrams("ornamented")
    self.assertEqual(r, ['ornamented'])

    _, r = self.anagrams2.get_anagrams("ornamenting")
    self.assertEqual(r, ['ornamenting'])

    _, r = self.anagrams2.get_anagrams("ornaments")
    self.assertEqual(r, ['ornaments'])

    _, r = self.anagrams2.get_anagrams("ornate")
    self.assertEqual(r, ['ornate'])

    _, r = self.anagrams2.get_anagrams("ornery")
    self.assertEqual(r, ['ornery'])

    _, r = self.anagrams2.get_anagrams("orono")
    self.assertEqual(r, ['orono'])

    _, r = self.anagrams2.get_anagrams("orphan")
    self.assertEqual(r, ['orphan'])

    _, r = self.anagrams2.get_anagrams("orphanage")
    self.assertEqual(r, ['orphanage'])

    _, r = self.anagrams2.get_anagrams("orphaned")
    self.assertEqual(r, ['orphaned'])

    _, r = self.anagrams2.get_anagrams("orphans")
    self.assertEqual(r, ['orphans'])

    _, r = self.anagrams2.get_anagrams("orpheus")
    self.assertEqual(r, ['orpheus'])

    _, r = self.anagrams2.get_anagrams("orphic")
    self.assertEqual(r, ['orphic'])

    _, r = self.anagrams2.get_anagrams("orphically")
    self.assertEqual(r, ['orphically'])

    _, r = self.anagrams2.get_anagrams("orr")
    self.assertEqual(r, ['orr'])

    _, r = self.anagrams2.get_anagrams("ortega")
    self.assertEqual(r, ['ortega'])

    _, r = self.anagrams2.get_anagrams("orthant")
    self.assertEqual(r, ['orthant'])

    _, r = self.anagrams2.get_anagrams("orthodontist")
    self.assertEqual(r, ['orthodontist'])

    _, r = self.anagrams2.get_anagrams("orthodox")
    self.assertEqual(r, ['orthodox'])

    _, r = self.anagrams2.get_anagrams("orthodoxy")
    self.assertEqual(r, ['orthodoxy'])

    _, r = self.anagrams2.get_anagrams("orthogonal")
    self.assertEqual(r, ['orthogonal'])

    _, r = self.anagrams2.get_anagrams("orthogonality")
    self.assertEqual(r, ['orthogonality'])

    _, r = self.anagrams2.get_anagrams("orthogonally")
    self.assertEqual(r, ['orthogonally'])

    _, r = self.anagrams2.get_anagrams("orthopedic")
    self.assertEqual(r, ['orthopedic'])

    _, r = self.anagrams2.get_anagrams("orville")
    self.assertEqual(r, ['orville'])

    _, r = self.anagrams2.get_anagrams("orwell")
    self.assertEqual(r, ['orwell'])

    _, r = self.anagrams2.get_anagrams("orwellian")
    self.assertEqual(r, ['orwellian'])

    _, r = self.anagrams2.get_anagrams("osaka")
    self.assertEqual(r, ['osaka'])

    _, r = self.anagrams2.get_anagrams("osbert")
    self.assertEqual(r, ['osbert', 'strobe'])

    _, r = self.anagrams2.get_anagrams("osborn")
    self.assertEqual(r, ['osborn'])

    _, r = self.anagrams2.get_anagrams("osborne")
    self.assertEqual(r, ['osborne'])

    _, r = self.anagrams2.get_anagrams("oscar")
    self.assertEqual(r, ['oscar'])

    _, r = self.anagrams2.get_anagrams("oscillate")
    self.assertEqual(r, ['oscillate'])

    _, r = self.anagrams2.get_anagrams("oscillated")
    self.assertEqual(r, ['oscillated'])

    _, r = self.anagrams2.get_anagrams("oscillates")
    self.assertEqual(r, ['oscillates'])

    _, r = self.anagrams2.get_anagrams("oscillating")
    self.assertEqual(r, ['oscillating'])

    _, r = self.anagrams2.get_anagrams("oscillation")
    self.assertEqual(r, ['oscillation'])

    _, r = self.anagrams2.get_anagrams("oscillations")
    self.assertEqual(r, ['oscillations'])

    _, r = self.anagrams2.get_anagrams("oscillator")
    self.assertEqual(r, ['oscillator'])

    _, r = self.anagrams2.get_anagrams("oscillators")
    self.assertEqual(r, ['oscillators'])

    _, r = self.anagrams2.get_anagrams("oscillatory")
    self.assertEqual(r, ['oscillatory'])

    _, r = self.anagrams2.get_anagrams("oscilloscope")
    self.assertEqual(r, ['oscilloscope'])

    _, r = self.anagrams2.get_anagrams("oscilloscopes")
    self.assertEqual(r, ['oscilloscopes'])

    _, r = self.anagrams2.get_anagrams("osgood")
    self.assertEqual(r, ['osgood'])

    _, r = self.anagrams2.get_anagrams("o'shea")
    self.assertEqual(r, ["o'shea"])

    _, r = self.anagrams2.get_anagrams("oshkosh")
    self.assertEqual(r, ['oshkosh'])

    _, r = self.anagrams2.get_anagrams("osiris")
    self.assertEqual(r, ['osiris'])

    _, r = self.anagrams2.get_anagrams("oslo")
    self.assertEqual(r, ['oslo', 'solo'])

    _, r = self.anagrams2.get_anagrams("osmosis")
    self.assertEqual(r, ['osmosis'])

    _, r = self.anagrams2.get_anagrams("osmotic")
    self.assertEqual(r, ['osmotic'])

    _, r = self.anagrams2.get_anagrams("ossify")
    self.assertEqual(r, ['ossify'])

    _, r = self.anagrams2.get_anagrams("ostensible")
    self.assertEqual(r, ['ostensible'])

    _, r = self.anagrams2.get_anagrams("ostensibly")
    self.assertEqual(r, ['ostensibly'])

    _, r = self.anagrams2.get_anagrams("ostentatious")
    self.assertEqual(r, ['ostentatious'])

    _, r = self.anagrams2.get_anagrams("osteopath")
    self.assertEqual(r, ['osteopath'])

    _, r = self.anagrams2.get_anagrams("osteopathic")
    self.assertEqual(r, ['osteopathic'])

    _, r = self.anagrams2.get_anagrams("osteopathy")
    self.assertEqual(r, ['osteopathy'])

    _, r = self.anagrams2.get_anagrams("osteoporosis")
    self.assertEqual(r, ['osteoporosis'])

    _, r = self.anagrams2.get_anagrams("ostracism")
    self.assertEqual(r, ['castroism', 'ostracism'])

    _, r = self.anagrams2.get_anagrams("ostrander")
    self.assertEqual(r, ['ostrander'])

    _, r = self.anagrams2.get_anagrams("ostrich")
    self.assertEqual(r, ['ostrich'])

    _, r = self.anagrams2.get_anagrams("ostriches")
    self.assertEqual(r, ['ostriches'])

    _, r = self.anagrams2.get_anagrams("o'sullivan")
    self.assertEqual(r, ["o'sullivan"])

    _, r = self.anagrams2.get_anagrams("oswald")
    self.assertEqual(r, ['oswald'])

    _, r = self.anagrams2.get_anagrams("othello")
    self.assertEqual(r, ['othello'])

    _, r = self.anagrams2.get_anagrams("other")
    self.assertEqual(r, ['other'])

    _, r = self.anagrams2.get_anagrams("others")
    self.assertEqual(r, ['others'])

    _, r = self.anagrams2.get_anagrams("otherwise")
    self.assertEqual(r, ['otherwise'])

    _, r = self.anagrams2.get_anagrams("otherworldly")
    self.assertEqual(r, ['otherworldly'])

    _, r = self.anagrams2.get_anagrams("otis")
    self.assertEqual(r, ['otis'])

    _, r = self.anagrams2.get_anagrams("ott")
    self.assertEqual(r, ['ott'])

    _, r = self.anagrams2.get_anagrams("ottawa")
    self.assertEqual(r, ['ottawa'])

    _, r = self.anagrams2.get_anagrams("otter")
    self.assertEqual(r, ['otter'])

    _, r = self.anagrams2.get_anagrams("otters")
    self.assertEqual(r, ['otters'])

    _, r = self.anagrams2.get_anagrams("otto")
    self.assertEqual(r, ['otto', 'toto'])

    _, r = self.anagrams2.get_anagrams("ottoman")
    self.assertEqual(r, ['ottoman'])

    _, r = self.anagrams2.get_anagrams("ottomanization")
    self.assertEqual(r, ['ottomanization'])

    _, r = self.anagrams2.get_anagrams("ottomanizations")
    self.assertEqual(r, ['ottomanizations'])

    _, r = self.anagrams2.get_anagrams("ottomanize")
    self.assertEqual(r, ['ottomanize'])

    _, r = self.anagrams2.get_anagrams("ottomanizes")
    self.assertEqual(r, ['ottomanizes'])

    _, r = self.anagrams2.get_anagrams("ouagadougou")
    self.assertEqual(r, ['ouagadougou'])

    _, r = self.anagrams2.get_anagrams("ouch")
    self.assertEqual(r, ['chou', 'ouch'])

    _, r = self.anagrams2.get_anagrams("ought")
    self.assertEqual(r, ['ought', 'tough'])

    _, r = self.anagrams2.get_anagrams("ounce")
    self.assertEqual(r, ['ounce'])

    _, r = self.anagrams2.get_anagrams("ounces")
    self.assertEqual(r, ['ounces', 'unesco'])

    _, r = self.anagrams2.get_anagrams("our")
    self.assertEqual(r, ['our'])

    _, r = self.anagrams2.get_anagrams("ours")
    self.assertEqual(r, ['ours', 'sour'])

    _, r = self.anagrams2.get_anagrams("ourself")
    self.assertEqual(r, ['ourself'])

    _, r = self.anagrams2.get_anagrams("ourselves")
    self.assertEqual(r, ['ourselves'])

    _, r = self.anagrams2.get_anagrams("oust")
    self.assertEqual(r, ['oust', 'outs'])

    _, r = self.anagrams2.get_anagrams("out")
    self.assertEqual(r, ['out'])

    _, r = self.anagrams2.get_anagrams("outbound")
    self.assertEqual(r, ['outbound'])

    _, r = self.anagrams2.get_anagrams("outbreak")
    self.assertEqual(r, ['outbreak'])

    _, r = self.anagrams2.get_anagrams("outbreaks")
    self.assertEqual(r, ['outbreaks'])

    _, r = self.anagrams2.get_anagrams("outburst")
    self.assertEqual(r, ['outburst'])

    _, r = self.anagrams2.get_anagrams("outbursts")
    self.assertEqual(r, ['outbursts'])

    _, r = self.anagrams2.get_anagrams("outcast")
    self.assertEqual(r, ['outcast'])

    _, r = self.anagrams2.get_anagrams("outcasts")
    self.assertEqual(r, ['outcasts'])

    _, r = self.anagrams2.get_anagrams("outcome")
    self.assertEqual(r, ['outcome'])

    _, r = self.anagrams2.get_anagrams("outcomes")
    self.assertEqual(r, ['outcomes'])

    _, r = self.anagrams2.get_anagrams("outcries")
    self.assertEqual(r, ['outcries'])

    _, r = self.anagrams2.get_anagrams("outcry")
    self.assertEqual(r, ['outcry'])

    _, r = self.anagrams2.get_anagrams("outdated")
    self.assertEqual(r, ['outdated'])

    _, r = self.anagrams2.get_anagrams("outdo")
    self.assertEqual(r, ['outdo'])

    _, r = self.anagrams2.get_anagrams("outdoor")
    self.assertEqual(r, ['outdoor'])

    _, r = self.anagrams2.get_anagrams("outdoors")
    self.assertEqual(r, ['outdoors'])

    _, r = self.anagrams2.get_anagrams("outer")
    self.assertEqual(r, ['outer', 'route'])

    _, r = self.anagrams2.get_anagrams("outermost")
    self.assertEqual(r, ['outermost'])

    _, r = self.anagrams2.get_anagrams("outfit")
    self.assertEqual(r, ['outfit'])

    _, r = self.anagrams2.get_anagrams("outfits")
    self.assertEqual(r, ['outfits'])

    _, r = self.anagrams2.get_anagrams("outfitted")
    self.assertEqual(r, ['outfitted'])

    _, r = self.anagrams2.get_anagrams("outgoing")
    self.assertEqual(r, ['outgoing'])

    _, r = self.anagrams2.get_anagrams("outgrew")
    self.assertEqual(r, ['outgrew'])

    _, r = self.anagrams2.get_anagrams("outgrow")
    self.assertEqual(r, ['outgrow'])

    _, r = self.anagrams2.get_anagrams("outgrowing")
    self.assertEqual(r, ['outgrowing'])

    _, r = self.anagrams2.get_anagrams("outgrown")
    self.assertEqual(r, ['outgrown'])

    _, r = self.anagrams2.get_anagrams("outgrows")
    self.assertEqual(r, ['outgrows'])

    _, r = self.anagrams2.get_anagrams("outgrowth")
    self.assertEqual(r, ['outgrowth'])

    _, r = self.anagrams2.get_anagrams("outing")
    self.assertEqual(r, ['outing'])

    _, r = self.anagrams2.get_anagrams("outlandish")
    self.assertEqual(r, ['outlandish'])

    _, r = self.anagrams2.get_anagrams("outlast")
    self.assertEqual(r, ['outlast'])

    _, r = self.anagrams2.get_anagrams("outlasts")
    self.assertEqual(r, ['outlasts'])

    _, r = self.anagrams2.get_anagrams("outlaw")
    self.assertEqual(r, ['outlaw'])

    _, r = self.anagrams2.get_anagrams("outlawed")
    self.assertEqual(r, ['outlawed'])

    _, r = self.anagrams2.get_anagrams("outlawing")
    self.assertEqual(r, ['outlawing'])

    _, r = self.anagrams2.get_anagrams("outlaws")
    self.assertEqual(r, ['outlaws'])

    _, r = self.anagrams2.get_anagrams("outlay")
    self.assertEqual(r, ['layout', 'outlay'])

    _, r = self.anagrams2.get_anagrams("outlays")
    self.assertEqual(r, ['layouts', 'outlays'])

    _, r = self.anagrams2.get_anagrams("outlet")
    self.assertEqual(r, ['outlet'])

    _, r = self.anagrams2.get_anagrams("outlets")
    self.assertEqual(r, ['outlets'])

    _, r = self.anagrams2.get_anagrams("outline")
    self.assertEqual(r, ['outline'])

    _, r = self.anagrams2.get_anagrams("outlined")
    self.assertEqual(r, ['outlined'])

    _, r = self.anagrams2.get_anagrams("outlines")
    self.assertEqual(r, ['outlines'])

    _, r = self.anagrams2.get_anagrams("outlining")
    self.assertEqual(r, ['outlining'])

    _, r = self.anagrams2.get_anagrams("outlive")
    self.assertEqual(r, ['outlive'])

    _, r = self.anagrams2.get_anagrams("outlived")
    self.assertEqual(r, ['outlived'])

    _, r = self.anagrams2.get_anagrams("outlives")
    self.assertEqual(r, ['outlives'])

    _, r = self.anagrams2.get_anagrams("outliving")
    self.assertEqual(r, ['outliving'])

    _, r = self.anagrams2.get_anagrams("outlook")
    self.assertEqual(r, ['lookout', 'outlook'])

    _, r = self.anagrams2.get_anagrams("outlying")
    self.assertEqual(r, ['outlying'])

    _, r = self.anagrams2.get_anagrams("outnumbered")
    self.assertEqual(r, ['outnumbered'])

    _, r = self.anagrams2.get_anagrams("outperform")
    self.assertEqual(r, ['outperform'])

    _, r = self.anagrams2.get_anagrams("outperformed")
    self.assertEqual(r, ['outperformed'])

    _, r = self.anagrams2.get_anagrams("outperforming")
    self.assertEqual(r, ['outperforming'])

    _, r = self.anagrams2.get_anagrams("outperforms")
    self.assertEqual(r, ['outperforms'])

    _, r = self.anagrams2.get_anagrams("outpost")
    self.assertEqual(r, ['outpost'])

    _, r = self.anagrams2.get_anagrams("outposts")
    self.assertEqual(r, ['outposts'])

    _, r = self.anagrams2.get_anagrams("output")
    self.assertEqual(r, ['output'])

    _, r = self.anagrams2.get_anagrams("outputs")
    self.assertEqual(r, ['outputs'])

    _, r = self.anagrams2.get_anagrams("outputting")
    self.assertEqual(r, ['outputting'])

    _, r = self.anagrams2.get_anagrams("outrage")
    self.assertEqual(r, ['outrage'])

    _, r = self.anagrams2.get_anagrams("outraged")
    self.assertEqual(r, ['outraged'])

    _, r = self.anagrams2.get_anagrams("outrageous")
    self.assertEqual(r, ['outrageous'])

    _, r = self.anagrams2.get_anagrams("outrageously")
    self.assertEqual(r, ['outrageously'])

    _, r = self.anagrams2.get_anagrams("outrages")
    self.assertEqual(r, ['outrages'])

    _, r = self.anagrams2.get_anagrams("outright")
    self.assertEqual(r, ['outright'])

    _, r = self.anagrams2.get_anagrams("outrun")
    self.assertEqual(r, ['outrun'])

    _, r = self.anagrams2.get_anagrams("outruns")
    self.assertEqual(r, ['outruns'])

    _, r = self.anagrams2.get_anagrams("outs")
    self.assertEqual(r, ['oust', 'outs'])

    _, r = self.anagrams2.get_anagrams("outset")
    self.assertEqual(r, ['outset'])

    _, r = self.anagrams2.get_anagrams("outside")
    self.assertEqual(r, ['outside', 'tedious'])

    _, r = self.anagrams2.get_anagrams("outsider")
    self.assertEqual(r, ['outsider'])

    _, r = self.anagrams2.get_anagrams("outsiders")
    self.assertEqual(r, ['outsiders'])

    _, r = self.anagrams2.get_anagrams("outskirts")
    self.assertEqual(r, ['outskirts'])

    _, r = self.anagrams2.get_anagrams("outstanding")
    self.assertEqual(r, ['outstanding'])

    _, r = self.anagrams2.get_anagrams("outstandingly")
    self.assertEqual(r, ['outstandingly'])

    _, r = self.anagrams2.get_anagrams("outstretched")
    self.assertEqual(r, ['outstretched'])

    _, r = self.anagrams2.get_anagrams("outstrip")
    self.assertEqual(r, ['outstrip'])

    _, r = self.anagrams2.get_anagrams("outstripped")
    self.assertEqual(r, ['outstripped'])

    _, r = self.anagrams2.get_anagrams("outstripping")
    self.assertEqual(r, ['outstripping'])

    _, r = self.anagrams2.get_anagrams("outstrips")
    self.assertEqual(r, ['outstrips'])

    _, r = self.anagrams2.get_anagrams("outvote")
    self.assertEqual(r, ['outvote'])

    _, r = self.anagrams2.get_anagrams("outvoted")
    self.assertEqual(r, ['outvoted'])

    _, r = self.anagrams2.get_anagrams("outvotes")
    self.assertEqual(r, ['outvotes'])

    _, r = self.anagrams2.get_anagrams("outvoting")
    self.assertEqual(r, ['outvoting'])

    _, r = self.anagrams2.get_anagrams("outward")
    self.assertEqual(r, ['outward'])

    _, r = self.anagrams2.get_anagrams("outwardly")
    self.assertEqual(r, ['outwardly'])

    _, r = self.anagrams2.get_anagrams("outweigh")
    self.assertEqual(r, ['outweigh'])

    _, r = self.anagrams2.get_anagrams("outweighed")
    self.assertEqual(r, ['outweighed'])

    _, r = self.anagrams2.get_anagrams("outweighing")
    self.assertEqual(r, ['outweighing'])

    _, r = self.anagrams2.get_anagrams("outweighs")
    self.assertEqual(r, ['outweighs'])

    _, r = self.anagrams2.get_anagrams("outwit")
    self.assertEqual(r, ['outwit'])

    _, r = self.anagrams2.get_anagrams("outwits")
    self.assertEqual(r, ['outwits'])

    _, r = self.anagrams2.get_anagrams("outwitted")
    self.assertEqual(r, ['outwitted'])

    _, r = self.anagrams2.get_anagrams("outwitting")
    self.assertEqual(r, ['outwitting'])

    _, r = self.anagrams2.get_anagrams("oval")
    self.assertEqual(r, ['olav', 'oval'])

    _, r = self.anagrams2.get_anagrams("ovals")
    self.assertEqual(r, ['ovals'])

    _, r = self.anagrams2.get_anagrams("ovaries")
    self.assertEqual(r, ['ovaries'])

    _, r = self.anagrams2.get_anagrams("ovary")
    self.assertEqual(r, ['ovary'])

    _, r = self.anagrams2.get_anagrams("oven")
    self.assertEqual(r, ['oven'])

    _, r = self.anagrams2.get_anagrams("ovens")
    self.assertEqual(r, ['ovens'])

    _, r = self.anagrams2.get_anagrams("over")
    self.assertEqual(r, ['over', 'rove'])

    _, r = self.anagrams2.get_anagrams("overall")
    self.assertEqual(r, ['overall'])

    _, r = self.anagrams2.get_anagrams("overalls")
    self.assertEqual(r, ['overalls'])

    _, r = self.anagrams2.get_anagrams("overboard")
    self.assertEqual(r, ['overboard'])

    _, r = self.anagrams2.get_anagrams("overcame")
    self.assertEqual(r, ['overcame'])

    _, r = self.anagrams2.get_anagrams("overcoat")
    self.assertEqual(r, ['overcoat'])

    _, r = self.anagrams2.get_anagrams("overcoats")
    self.assertEqual(r, ['overcoats'])

    _, r = self.anagrams2.get_anagrams("overcome")
    self.assertEqual(r, ['overcome'])

    _, r = self.anagrams2.get_anagrams("overcomes")
    self.assertEqual(r, ['overcomes'])

    _, r = self.anagrams2.get_anagrams("overcoming")
    self.assertEqual(r, ['overcoming'])

    _, r = self.anagrams2.get_anagrams("overcrowd")
    self.assertEqual(r, ['overcrowd'])

    _, r = self.anagrams2.get_anagrams("overcrowded")
    self.assertEqual(r, ['overcrowded'])

    _, r = self.anagrams2.get_anagrams("overcrowding")
    self.assertEqual(r, ['overcrowding'])

    _, r = self.anagrams2.get_anagrams("overcrowds")
    self.assertEqual(r, ['overcrowds'])

    _, r = self.anagrams2.get_anagrams("overdone")
    self.assertEqual(r, ['overdone'])

    _, r = self.anagrams2.get_anagrams("overdose")
    self.assertEqual(r, ['overdose'])

    _, r = self.anagrams2.get_anagrams("overdraft")
    self.assertEqual(r, ['overdraft'])

    _, r = self.anagrams2.get_anagrams("overdrafts")
    self.assertEqual(r, ['overdrafts'])

    _, r = self.anagrams2.get_anagrams("overdue")
    self.assertEqual(r, ['overdue'])

    _, r = self.anagrams2.get_anagrams("overemphasis")
    self.assertEqual(r, ['overemphasis'])

    _, r = self.anagrams2.get_anagrams("overemphasized")
    self.assertEqual(r, ['overemphasized'])

    _, r = self.anagrams2.get_anagrams("overestimate")
    self.assertEqual(r, ['overestimate'])

    _, r = self.anagrams2.get_anagrams("overestimated")
    self.assertEqual(r, ['overestimated'])

    _, r = self.anagrams2.get_anagrams("overestimates")
    self.assertEqual(r, ['overestimates'])

    _, r = self.anagrams2.get_anagrams("overestimating")
    self.assertEqual(r, ['overestimating'])

    _, r = self.anagrams2.get_anagrams("overestimation")
    self.assertEqual(r, ['overestimation'])

    _, r = self.anagrams2.get_anagrams("overflow")
    self.assertEqual(r, ['overflow'])

    _, r = self.anagrams2.get_anagrams("overflowed")
    self.assertEqual(r, ['overflowed'])

    _, r = self.anagrams2.get_anagrams("overflowing")
    self.assertEqual(r, ['overflowing'])

    _, r = self.anagrams2.get_anagrams("overflows")
    self.assertEqual(r, ['overflows'])

    _, r = self.anagrams2.get_anagrams("overgrown")
    self.assertEqual(r, ['overgrown'])

    _, r = self.anagrams2.get_anagrams("overhang")
    self.assertEqual(r, ['hangover', 'overhang'])

    _, r = self.anagrams2.get_anagrams("overhanging")
    self.assertEqual(r, ['overhanging'])

    _, r = self.anagrams2.get_anagrams("overhangs")
    self.assertEqual(r, ['hangovers', 'overhangs'])

    _, r = self.anagrams2.get_anagrams("overhaul")
    self.assertEqual(r, ['overhaul'])

    _, r = self.anagrams2.get_anagrams("overhauling")
    self.assertEqual(r, ['overhauling'])

    _, r = self.anagrams2.get_anagrams("overhead")
    self.assertEqual(r, ['overhead'])

    _, r = self.anagrams2.get_anagrams("overheads")
    self.assertEqual(r, ['overheads'])

    _, r = self.anagrams2.get_anagrams("overhear")
    self.assertEqual(r, ['overhear'])

    _, r = self.anagrams2.get_anagrams("overheard")
    self.assertEqual(r, ['overheard'])

    _, r = self.anagrams2.get_anagrams("overhearing")
    self.assertEqual(r, ['overhearing'])

    _, r = self.anagrams2.get_anagrams("overhears")
    self.assertEqual(r, ['overhears'])

    _, r = self.anagrams2.get_anagrams("overjoy")
    self.assertEqual(r, ['overjoy'])

    _, r = self.anagrams2.get_anagrams("overjoyed")
    self.assertEqual(r, ['overjoyed'])

    _, r = self.anagrams2.get_anagrams("overkill")
    self.assertEqual(r, ['overkill'])

    _, r = self.anagrams2.get_anagrams("overland")
    self.assertEqual(r, ['overland'])

    _, r = self.anagrams2.get_anagrams("overlap")
    self.assertEqual(r, ['overlap'])

    _, r = self.anagrams2.get_anagrams("overlapped")
    self.assertEqual(r, ['overlapped'])

    _, r = self.anagrams2.get_anagrams("overlapping")
    self.assertEqual(r, ['overlapping'])

    _, r = self.anagrams2.get_anagrams("overlaps")
    self.assertEqual(r, ['overlaps'])

    _, r = self.anagrams2.get_anagrams("overlay")
    self.assertEqual(r, ['overlay'])

    _, r = self.anagrams2.get_anagrams("overlaying")
    self.assertEqual(r, ['overlaying'])

    _, r = self.anagrams2.get_anagrams("overlays")
    self.assertEqual(r, ['overlays'])

    _, r = self.anagrams2.get_anagrams("overload")
    self.assertEqual(r, ['overload'])

    _, r = self.anagrams2.get_anagrams("overloaded")
    self.assertEqual(r, ['overloaded'])

    _, r = self.anagrams2.get_anagrams("overloading")
    self.assertEqual(r, ['overloading'])

    _, r = self.anagrams2.get_anagrams("overloads")
    self.assertEqual(r, ['overloads'])

    _, r = self.anagrams2.get_anagrams("overlook")
    self.assertEqual(r, ['overlook'])

    _, r = self.anagrams2.get_anagrams("overlooked")
    self.assertEqual(r, ['overlooked'])

    _, r = self.anagrams2.get_anagrams("overlooking")
    self.assertEqual(r, ['overlooking'])

    _, r = self.anagrams2.get_anagrams("overlooks")
    self.assertEqual(r, ['overlooks'])

    _, r = self.anagrams2.get_anagrams("overly")
    self.assertEqual(r, ['overly'])

    _, r = self.anagrams2.get_anagrams("overnight")
    self.assertEqual(r, ['overnight'])

    _, r = self.anagrams2.get_anagrams("overnighter")
    self.assertEqual(r, ['overnighter'])

    _, r = self.anagrams2.get_anagrams("overnighters")
    self.assertEqual(r, ['overnighters'])

    _, r = self.anagrams2.get_anagrams("overpower")
    self.assertEqual(r, ['overpower'])

    _, r = self.anagrams2.get_anagrams("overpowered")
    self.assertEqual(r, ['overpowered'])

    _, r = self.anagrams2.get_anagrams("overpowering")
    self.assertEqual(r, ['overpowering'])

    _, r = self.anagrams2.get_anagrams("overpowers")
    self.assertEqual(r, ['overpowers'])

    _, r = self.anagrams2.get_anagrams("overprint")
    self.assertEqual(r, ['overprint'])

    _, r = self.anagrams2.get_anagrams("overprinted")
    self.assertEqual(r, ['overprinted'])

    _, r = self.anagrams2.get_anagrams("overprinting")
    self.assertEqual(r, ['overprinting'])

    _, r = self.anagrams2.get_anagrams("overprints")
    self.assertEqual(r, ['overprints'])

    _, r = self.anagrams2.get_anagrams("overproduction")
    self.assertEqual(r, ['overproduction'])

    _, r = self.anagrams2.get_anagrams("overridden")
    self.assertEqual(r, ['overridden'])

    _, r = self.anagrams2.get_anagrams("override")
    self.assertEqual(r, ['override'])

    _, r = self.anagrams2.get_anagrams("overrides")
    self.assertEqual(r, ['overrides'])

    _, r = self.anagrams2.get_anagrams("overriding")
    self.assertEqual(r, ['overriding'])

    _, r = self.anagrams2.get_anagrams("overrode")
    self.assertEqual(r, ['overrode'])

    _, r = self.anagrams2.get_anagrams("overrule")
    self.assertEqual(r, ['overrule'])

    _, r = self.anagrams2.get_anagrams("overruled")
    self.assertEqual(r, ['overruled'])

    _, r = self.anagrams2.get_anagrams("overrules")
    self.assertEqual(r, ['overrules'])

    _, r = self.anagrams2.get_anagrams("overrun")
    self.assertEqual(r, ['overrun'])

    _, r = self.anagrams2.get_anagrams("overrunning")
    self.assertEqual(r, ['overrunning'])

    _, r = self.anagrams2.get_anagrams("overruns")
    self.assertEqual(r, ['overruns'])

    _, r = self.anagrams2.get_anagrams("overseas")
    self.assertEqual(r, ['overseas'])

    _, r = self.anagrams2.get_anagrams("oversee")
    self.assertEqual(r, ['oversee'])

    _, r = self.anagrams2.get_anagrams("overseeing")
    self.assertEqual(r, ['overseeing'])

    _, r = self.anagrams2.get_anagrams("overseer")
    self.assertEqual(r, ['overseer'])

    _, r = self.anagrams2.get_anagrams("overseers")
    self.assertEqual(r, ['overseers'])

    _, r = self.anagrams2.get_anagrams("oversees")
    self.assertEqual(r, ['oversees'])

    _, r = self.anagrams2.get_anagrams("overshadow")
    self.assertEqual(r, ['overshadow'])

    _, r = self.anagrams2.get_anagrams("overshadowed")
    self.assertEqual(r, ['overshadowed'])

    _, r = self.anagrams2.get_anagrams("overshadowing")
    self.assertEqual(r, ['overshadowing'])

    _, r = self.anagrams2.get_anagrams("overshadows")
    self.assertEqual(r, ['overshadows'])

    _, r = self.anagrams2.get_anagrams("overshoot")
    self.assertEqual(r, ['overshoot'])

    _, r = self.anagrams2.get_anagrams("overshot")
    self.assertEqual(r, ['overshot'])

    _, r = self.anagrams2.get_anagrams("oversight")
    self.assertEqual(r, ['oversight'])

    _, r = self.anagrams2.get_anagrams("oversights")
    self.assertEqual(r, ['oversights'])

    _, r = self.anagrams2.get_anagrams("oversimplified")
    self.assertEqual(r, ['oversimplified'])

    _, r = self.anagrams2.get_anagrams("oversimplifies")
    self.assertEqual(r, ['oversimplifies'])

    _, r = self.anagrams2.get_anagrams("oversimplify")
    self.assertEqual(r, ['oversimplify'])

    _, r = self.anagrams2.get_anagrams("oversimplifying")
    self.assertEqual(r, ['oversimplifying'])

    _, r = self.anagrams2.get_anagrams("oversized")
    self.assertEqual(r, ['oversized'])

    _, r = self.anagrams2.get_anagrams("overstate")
    self.assertEqual(r, ['overstate'])

    _, r = self.anagrams2.get_anagrams("overstated")
    self.assertEqual(r, ['overstated'])

    _, r = self.anagrams2.get_anagrams("overstatement")
    self.assertEqual(r, ['overstatement'])

    _, r = self.anagrams2.get_anagrams("overstatements")
    self.assertEqual(r, ['overstatements'])

    _, r = self.anagrams2.get_anagrams("overstates")
    self.assertEqual(r, ['overstates'])

    _, r = self.anagrams2.get_anagrams("overstating")
    self.assertEqual(r, ['overstating'])

    _, r = self.anagrams2.get_anagrams("overstocks")
    self.assertEqual(r, ['overstocks'])

    _, r = self.anagrams2.get_anagrams("oversubscribed")
    self.assertEqual(r, ['oversubscribed'])

    _, r = self.anagrams2.get_anagrams("overt")
    self.assertEqual(r, ['overt', 'voter'])

    _, r = self.anagrams2.get_anagrams("overtake")
    self.assertEqual(r, ['overtake'])

    _, r = self.anagrams2.get_anagrams("overtaken")
    self.assertEqual(r, ['overtaken'])

    _, r = self.anagrams2.get_anagrams("overtaker")
    self.assertEqual(r, ['overtaker'])

    _, r = self.anagrams2.get_anagrams("overtakers")
    self.assertEqual(r, ['overtakers'])

    _, r = self.anagrams2.get_anagrams("overtakes")
    self.assertEqual(r, ['overtakes'])

    _, r = self.anagrams2.get_anagrams("overtaking")
    self.assertEqual(r, ['overtaking'])

    _, r = self.anagrams2.get_anagrams("overthrew")
    self.assertEqual(r, ['overthrew'])

    _, r = self.anagrams2.get_anagrams("overthrow")
    self.assertEqual(r, ['overthrow'])

    _, r = self.anagrams2.get_anagrams("overthrown")
    self.assertEqual(r, ['overthrown'])

    _, r = self.anagrams2.get_anagrams("overtime")
    self.assertEqual(r, ['overtime'])

    _, r = self.anagrams2.get_anagrams("overtly")
    self.assertEqual(r, ['overtly'])

    _, r = self.anagrams2.get_anagrams("overtone")
    self.assertEqual(r, ['overtone'])

    _, r = self.anagrams2.get_anagrams("overtones")
    self.assertEqual(r, ['overtones'])

    _, r = self.anagrams2.get_anagrams("overtook")
    self.assertEqual(r, ['overtook'])

    _, r = self.anagrams2.get_anagrams("overture")
    self.assertEqual(r, ['overture'])

    _, r = self.anagrams2.get_anagrams("overtures")
    self.assertEqual(r, ['overtures'])

    _, r = self.anagrams2.get_anagrams("overturn")
    self.assertEqual(r, ['overturn', 'turnover'])

    _, r = self.anagrams2.get_anagrams("overturned")
    self.assertEqual(r, ['overturned'])

    _, r = self.anagrams2.get_anagrams("overturning")
    self.assertEqual(r, ['overturning'])

    _, r = self.anagrams2.get_anagrams("overturns")
    self.assertEqual(r, ['overturns'])

    _, r = self.anagrams2.get_anagrams("overuse")
    self.assertEqual(r, ['overuse'])

    _, r = self.anagrams2.get_anagrams("overview")
    self.assertEqual(r, ['overview'])

    _, r = self.anagrams2.get_anagrams("overviews")
    self.assertEqual(r, ['overviews'])

    _, r = self.anagrams2.get_anagrams("overwhelm")
    self.assertEqual(r, ['overwhelm'])

    _, r = self.anagrams2.get_anagrams("overwhelmed")
    self.assertEqual(r, ['overwhelmed'])

    _, r = self.anagrams2.get_anagrams("overwhelming")
    self.assertEqual(r, ['overwhelming'])

    _, r = self.anagrams2.get_anagrams("overwhelmingly")
    self.assertEqual(r, ['overwhelmingly'])

    _, r = self.anagrams2.get_anagrams("overwhelms")
    self.assertEqual(r, ['overwhelms'])

    _, r = self.anagrams2.get_anagrams("overwork")
    self.assertEqual(r, ['overwork'])

    _, r = self.anagrams2.get_anagrams("overworked")
    self.assertEqual(r, ['overworked'])

    _, r = self.anagrams2.get_anagrams("overworking")
    self.assertEqual(r, ['overworking'])

    _, r = self.anagrams2.get_anagrams("overworks")
    self.assertEqual(r, ['overworks'])

    _, r = self.anagrams2.get_anagrams("overwrite")
    self.assertEqual(r, ['overwrite'])

    _, r = self.anagrams2.get_anagrams("overwrites")
    self.assertEqual(r, ['overwrites'])

    _, r = self.anagrams2.get_anagrams("overwriting")
    self.assertEqual(r, ['overwriting'])

    _, r = self.anagrams2.get_anagrams("overwritten")
    self.assertEqual(r, ['overwritten'])

    _, r = self.anagrams2.get_anagrams("overzealous")
    self.assertEqual(r, ['overzealous'])

    _, r = self.anagrams2.get_anagrams("ovid")
    self.assertEqual(r, ['ovid', 'void'])

    _, r = self.anagrams2.get_anagrams("owe")
    self.assertEqual(r, ['owe', 'woe'])

    _, r = self.anagrams2.get_anagrams("owed")
    self.assertEqual(r, ['owed'])

    _, r = self.anagrams2.get_anagrams("owen")
    self.assertEqual(r, ['owen'])

    _, r = self.anagrams2.get_anagrams("owens")
    self.assertEqual(r, ['owens'])

    _, r = self.anagrams2.get_anagrams("owes")
    self.assertEqual(r, ['owes'])

    _, r = self.anagrams2.get_anagrams("owing")
    self.assertEqual(r, ['owing'])

    _, r = self.anagrams2.get_anagrams("owl")
    self.assertEqual(r, ['low', 'owl'])

    _, r = self.anagrams2.get_anagrams("owls")
    self.assertEqual(r, ['lows', 'owls', 'slow'])

    _, r = self.anagrams2.get_anagrams("own")
    self.assertEqual(r, ['now', 'own', 'won'])

    _, r = self.anagrams2.get_anagrams("owned")
    self.assertEqual(r, ['endow', 'owned'])

    _, r = self.anagrams2.get_anagrams("owner")
    self.assertEqual(r, ['owner'])

    _, r = self.anagrams2.get_anagrams("owners")
    self.assertEqual(r, ['owners'])

    _, r = self.anagrams2.get_anagrams("ownership")
    self.assertEqual(r, ['ownership'])

    _, r = self.anagrams2.get_anagrams("ownerships")
    self.assertEqual(r, ['ownerships'])

    _, r = self.anagrams2.get_anagrams("owning")
    self.assertEqual(r, ['owning'])

    _, r = self.anagrams2.get_anagrams("owns")
    self.assertEqual(r, ['owns', 'snow', 'sown'])

    _, r = self.anagrams2.get_anagrams("ox")
    self.assertEqual(r, ['ox'])

    _, r = self.anagrams2.get_anagrams("oxen")
    self.assertEqual(r, ['oxen'])

    _, r = self.anagrams2.get_anagrams("oxford")
    self.assertEqual(r, ['oxford'])

    _, r = self.anagrams2.get_anagrams("oxide")
    self.assertEqual(r, ['oxide'])

    _, r = self.anagrams2.get_anagrams("oxides")
    self.assertEqual(r, ['oxides'])

    _, r = self.anagrams2.get_anagrams("oxidize")
    self.assertEqual(r, ['oxidize'])

    _, r = self.anagrams2.get_anagrams("oxidized")
    self.assertEqual(r, ['oxidized'])

    _, r = self.anagrams2.get_anagrams("oxnard")
    self.assertEqual(r, ['oxnard'])

    _, r = self.anagrams2.get_anagrams("oxonian")
    self.assertEqual(r, ['oxonian'])

    _, r = self.anagrams2.get_anagrams("oxygen")
    self.assertEqual(r, ['oxygen'])

    _, r = self.anagrams2.get_anagrams("oyster")
    self.assertEqual(r, ['oyster', 'storey'])

    _, r = self.anagrams2.get_anagrams("oysters")
    self.assertEqual(r, ['oysters', 'storeys'])

    _, r = self.anagrams2.get_anagrams("oz")
    self.assertEqual(r, ['oz'])

    _, r = self.anagrams2.get_anagrams("ozark")
    self.assertEqual(r, ['ozark'])

    _, r = self.anagrams2.get_anagrams("ozarks")
    self.assertEqual(r, ['ozarks'])

    _, r = self.anagrams2.get_anagrams("ozone")
    self.assertEqual(r, ['ozone'])

    _, r = self.anagrams2.get_anagrams("ozzie")
    self.assertEqual(r, ['ozzie'])

    _, r = self.anagrams2.get_anagrams("pablo")
    self.assertEqual(r, ['pablo'])

    _, r = self.anagrams2.get_anagrams("pabst")
    self.assertEqual(r, ['pabst'])

    _, r = self.anagrams2.get_anagrams("pace")
    self.assertEqual(r, ['cape', 'pace'])

    _, r = self.anagrams2.get_anagrams("paced")
    self.assertEqual(r, ['paced'])

    _, r = self.anagrams2.get_anagrams("pacemaker")
    self.assertEqual(r, ['pacemaker'])

    _, r = self.anagrams2.get_anagrams("pacer")
    self.assertEqual(r, ['caper', 'pacer'])

    _, r = self.anagrams2.get_anagrams("pacers")
    self.assertEqual(r, ['capers', 'pacers', 'scrape', 'spacer'])

    _, r = self.anagrams2.get_anagrams("paces")
    self.assertEqual(r, ['capes', 'paces', 'space'])

    _, r = self.anagrams2.get_anagrams("pacific")
    self.assertEqual(r, ['pacific'])

    _, r = self.anagrams2.get_anagrams("pacification")
    self.assertEqual(r, ['pacification'])

    _, r = self.anagrams2.get_anagrams("pacified")
    self.assertEqual(r, ['pacified'])

    _, r = self.anagrams2.get_anagrams("pacifier")
    self.assertEqual(r, ['pacifier'])

    _, r = self.anagrams2.get_anagrams("pacifies")
    self.assertEqual(r, ['pacifies'])

    _, r = self.anagrams2.get_anagrams("pacifism")
    self.assertEqual(r, ['pacifism'])

    _, r = self.anagrams2.get_anagrams("pacifist")
    self.assertEqual(r, ['pacifist'])

    _, r = self.anagrams2.get_anagrams("pacify")
    self.assertEqual(r, ['pacify'])

    _, r = self.anagrams2.get_anagrams("pacing")
    self.assertEqual(r, ['pacing'])

    _, r = self.anagrams2.get_anagrams("pack")
    self.assertEqual(r, ['pack'])

    _, r = self.anagrams2.get_anagrams("package")
    self.assertEqual(r, ['package'])

    _, r = self.anagrams2.get_anagrams("packaged")
    self.assertEqual(r, ['packaged'])

    _, r = self.anagrams2.get_anagrams("packager")
    self.assertEqual(r, ['packager'])

    _, r = self.anagrams2.get_anagrams("packagers")
    self.assertEqual(r, ['packagers'])

    _, r = self.anagrams2.get_anagrams("packages")
    self.assertEqual(r, ['packages'])

    _, r = self.anagrams2.get_anagrams("packaging")
    self.assertEqual(r, ['packaging'])

    _, r = self.anagrams2.get_anagrams("packagings")
    self.assertEqual(r, ['packagings'])

    _, r = self.anagrams2.get_anagrams("packard")
    self.assertEqual(r, ['packard'])

    _, r = self.anagrams2.get_anagrams("packards")
    self.assertEqual(r, ['packards'])

    _, r = self.anagrams2.get_anagrams("packed")
    self.assertEqual(r, ['packed'])

    _, r = self.anagrams2.get_anagrams("packer")
    self.assertEqual(r, ['packer'])

    _, r = self.anagrams2.get_anagrams("packers")
    self.assertEqual(r, ['packers'])

    _, r = self.anagrams2.get_anagrams("packet")
    self.assertEqual(r, ['packet'])

    _, r = self.anagrams2.get_anagrams("packets")
    self.assertEqual(r, ['packets'])

    _, r = self.anagrams2.get_anagrams("packing")
    self.assertEqual(r, ['packing'])

    _, r = self.anagrams2.get_anagrams("packs")
    self.assertEqual(r, ['packs'])

    _, r = self.anagrams2.get_anagrams("packwood")
    self.assertEqual(r, ['packwood'])

    _, r = self.anagrams2.get_anagrams("pact")
    self.assertEqual(r, ['pact'])

    _, r = self.anagrams2.get_anagrams("pacts")
    self.assertEqual(r, ['pacts'])

    _, r = self.anagrams2.get_anagrams("pad")
    self.assertEqual(r, ['pad'])

    _, r = self.anagrams2.get_anagrams("padded")
    self.assertEqual(r, ['padded'])

    _, r = self.anagrams2.get_anagrams("padding")
    self.assertEqual(r, ['padding'])

    _, r = self.anagrams2.get_anagrams("paddle")
    self.assertEqual(r, ['paddle'])

    _, r = self.anagrams2.get_anagrams("paddock")
    self.assertEqual(r, ['paddock'])

    _, r = self.anagrams2.get_anagrams("paddy")
    self.assertEqual(r, ['paddy'])

    _, r = self.anagrams2.get_anagrams("padlock")
    self.assertEqual(r, ['padlock'])

    _, r = self.anagrams2.get_anagrams("pads")
    self.assertEqual(r, ['pads'])

    _, r = self.anagrams2.get_anagrams("pagan")
    self.assertEqual(r, ['pagan'])

    _, r = self.anagrams2.get_anagrams("paganini")
    self.assertEqual(r, ['paganini'])

    _, r = self.anagrams2.get_anagrams("pagans")
    self.assertEqual(r, ['pagans'])

    _, r = self.anagrams2.get_anagrams("page")
    self.assertEqual(r, ['gape', 'page'])

    _, r = self.anagrams2.get_anagrams("pageant")
    self.assertEqual(r, ['pageant'])

    _, r = self.anagrams2.get_anagrams("pageantry")
    self.assertEqual(r, ['pageantry'])

    _, r = self.anagrams2.get_anagrams("pageants")
    self.assertEqual(r, ['pageants'])

    _, r = self.anagrams2.get_anagrams("paged")
    self.assertEqual(r, ['gaped', 'paged'])

    _, r = self.anagrams2.get_anagrams("pager")
    self.assertEqual(r, ['grape', 'pager'])

    _, r = self.anagrams2.get_anagrams("pagers")
    self.assertEqual(r, ['grapes', 'pagers'])

    _, r = self.anagrams2.get_anagrams("pages")
    self.assertEqual(r, ['gapes', 'pages'])

    _, r = self.anagrams2.get_anagrams("paginate")
    self.assertEqual(r, ['paginate'])

    _, r = self.anagrams2.get_anagrams("paginated")
    self.assertEqual(r, ['paginated'])

    _, r = self.anagrams2.get_anagrams("paginates")
    self.assertEqual(r, ['paginates'])

    _, r = self.anagrams2.get_anagrams("paginating")
    self.assertEqual(r, ['paginating'])

    _, r = self.anagrams2.get_anagrams("pagination")
    self.assertEqual(r, ['pagination'])

    _, r = self.anagrams2.get_anagrams("paging")
    self.assertEqual(r, ['gaping', 'paging'])

    _, r = self.anagrams2.get_anagrams("pagoda")
    self.assertEqual(r, ['pagoda'])

    _, r = self.anagrams2.get_anagrams("paid")
    self.assertEqual(r, ['paid'])

    _, r = self.anagrams2.get_anagrams("pail")
    self.assertEqual(r, ['pail'])

    _, r = self.anagrams2.get_anagrams("pails")
    self.assertEqual(r, ['pails'])

    _, r = self.anagrams2.get_anagrams("pain")
    self.assertEqual(r, ['pain'])

    _, r = self.anagrams2.get_anagrams("paine")
    self.assertEqual(r, ['paine'])

    _, r = self.anagrams2.get_anagrams("pained")
    self.assertEqual(r, ['pained'])

    _, r = self.anagrams2.get_anagrams("painful")
    self.assertEqual(r, ['painful'])

    _, r = self.anagrams2.get_anagrams("painfully")
    self.assertEqual(r, ['painfully'])

    _, r = self.anagrams2.get_anagrams("painless")
    self.assertEqual(r, ['painless'])

    _, r = self.anagrams2.get_anagrams("pains")
    self.assertEqual(r, ['pains', 'spain'])

    _, r = self.anagrams2.get_anagrams("painstaking")
    self.assertEqual(r, ['painstaking'])

    _, r = self.anagrams2.get_anagrams("painstakingly")
    self.assertEqual(r, ['painstakingly'])

    _, r = self.anagrams2.get_anagrams("paint")
    self.assertEqual(r, ['paint'])

    _, r = self.anagrams2.get_anagrams("painted")
    self.assertEqual(r, ['painted'])

    _, r = self.anagrams2.get_anagrams("painter")
    self.assertEqual(r, ['painter', 'pertain'])

    _, r = self.anagrams2.get_anagrams("painters")
    self.assertEqual(r, ['painters', 'pantries', 'pertains'])

    _, r = self.anagrams2.get_anagrams("painting")
    self.assertEqual(r, ['painting'])

    _, r = self.anagrams2.get_anagrams("paintings")
    self.assertEqual(r, ['paintings'])

    _, r = self.anagrams2.get_anagrams("paints")
    self.assertEqual(r, ['paints'])

    _, r = self.anagrams2.get_anagrams("pair")
    self.assertEqual(r, ['pair'])

    _, r = self.anagrams2.get_anagrams("paired")
    self.assertEqual(r, ['diaper', 'paired', 'repaid'])

    _, r = self.anagrams2.get_anagrams("pairing")
    self.assertEqual(r, ['pairing'])

    _, r = self.anagrams2.get_anagrams("pairings")
    self.assertEqual(r, ['aspiring', 'pairings', 'praising'])

    _, r = self.anagrams2.get_anagrams("pairs")
    self.assertEqual(r, ['pairs', 'paris', 'parsi'])

    _, r = self.anagrams2.get_anagrams("pairwise")
    self.assertEqual(r, ['pairwise'])

    _, r = self.anagrams2.get_anagrams("pajama")
    self.assertEqual(r, ['pajama'])

    _, r = self.anagrams2.get_anagrams("pajamas")
    self.assertEqual(r, ['pajamas'])

    _, r = self.anagrams2.get_anagrams("pakistan")
    self.assertEqual(r, ['pakistan'])

    _, r = self.anagrams2.get_anagrams("pakistani")
    self.assertEqual(r, ['pakistani'])

    _, r = self.anagrams2.get_anagrams("pakistanis")
    self.assertEqual(r, ['pakistanis'])

    _, r = self.anagrams2.get_anagrams("pal")
    self.assertEqual(r, ['lap', 'pal'])

    _, r = self.anagrams2.get_anagrams("palace")
    self.assertEqual(r, ['palace'])

    _, r = self.anagrams2.get_anagrams("palaces")
    self.assertEqual(r, ['palaces'])

    _, r = self.anagrams2.get_anagrams("palate")
    self.assertEqual(r, ['palate'])

    _, r = self.anagrams2.get_anagrams("palates")
    self.assertEqual(r, ['palates'])

    _, r = self.anagrams2.get_anagrams("palatine")
    self.assertEqual(r, ['palatine'])

    _, r = self.anagrams2.get_anagrams("pale")
    self.assertEqual(r, ['leap', 'pale', 'peal', 'plea'])

    _, r = self.anagrams2.get_anagrams("paled")
    self.assertEqual(r, ['paled', 'pedal', 'plead'])

    _, r = self.anagrams2.get_anagrams("palely")
    self.assertEqual(r, ['palely'])

    _, r = self.anagrams2.get_anagrams("paleness")
    self.assertEqual(r, ['paleness'])

    _, r = self.anagrams2.get_anagrams("paleolithic")
    self.assertEqual(r, ['paleolithic'])

    _, r = self.anagrams2.get_anagrams("paleozoic")
    self.assertEqual(r, ['paleozoic'])

    _, r = self.anagrams2.get_anagrams("paler")
    self.assertEqual(r, ['paler', 'pearl'])

    _, r = self.anagrams2.get_anagrams("palermo")
    self.assertEqual(r, ['palermo'])

    _, r = self.anagrams2.get_anagrams("pales")
    self.assertEqual(r, ['lapse', 'leaps', 'pales', 'peals', 'pleas'])

    _, r = self.anagrams2.get_anagrams("palest")
    self.assertEqual(r, ['palest', 'pastel', 'petals', 'plates', 'staple'])

    _, r = self.anagrams2.get_anagrams("palestine")
    self.assertEqual(r, ['palestine', 'penalties'])

    _, r = self.anagrams2.get_anagrams("palestinian")
    self.assertEqual(r, ['palestinian'])

    _, r = self.anagrams2.get_anagrams("palfrey")
    self.assertEqual(r, ['palfrey'])

    _, r = self.anagrams2.get_anagrams("palindrome")
    self.assertEqual(r, ['palindrome'])

    _, r = self.anagrams2.get_anagrams("palindromic")
    self.assertEqual(r, ['palindromic'])

    _, r = self.anagrams2.get_anagrams("paling")
    self.assertEqual(r, ['paling'])

    _, r = self.anagrams2.get_anagrams("pall")
    self.assertEqual(r, ['pall'])

    _, r = self.anagrams2.get_anagrams("palladian")
    self.assertEqual(r, ['palladian'])

    _, r = self.anagrams2.get_anagrams("palladium")
    self.assertEqual(r, ['palladium'])

    _, r = self.anagrams2.get_anagrams("palliate")
    self.assertEqual(r, ['palliate'])

    _, r = self.anagrams2.get_anagrams("palliative")
    self.assertEqual(r, ['palliative'])

    _, r = self.anagrams2.get_anagrams("pallid")
    self.assertEqual(r, ['pallid'])

    _, r = self.anagrams2.get_anagrams("palm")
    self.assertEqual(r, ['lamp', 'palm'])

    _, r = self.anagrams2.get_anagrams("palmed")
    self.assertEqual(r, ['palmed'])

    _, r = self.anagrams2.get_anagrams("palmer")
    self.assertEqual(r, ['palmer'])

    _, r = self.anagrams2.get_anagrams("palming")
    self.assertEqual(r, ['palming'])

    _, r = self.anagrams2.get_anagrams("palmolive")
    self.assertEqual(r, ['palmolive'])

    _, r = self.anagrams2.get_anagrams("palms")
    self.assertEqual(r, ['lamps', 'palms', 'psalm'])

    _, r = self.anagrams2.get_anagrams("palmyra")
    self.assertEqual(r, ['palmyra'])

    _, r = self.anagrams2.get_anagrams("palo")
    self.assertEqual(r, ['opal', 'palo'])

    _, r = self.anagrams2.get_anagrams("palomar")
    self.assertEqual(r, ['palomar'])

    _, r = self.anagrams2.get_anagrams("palpable")
    self.assertEqual(r, ['palpable'])

    _, r = self.anagrams2.get_anagrams("pals")
    self.assertEqual(r, ['alps', 'laps', 'pals', 'slap'])

    _, r = self.anagrams2.get_anagrams("palsy")
    self.assertEqual(r, ['palsy', 'plays'])

    _, r = self.anagrams2.get_anagrams("pam")
    self.assertEqual(r, ['map', 'pam'])

    _, r = self.anagrams2.get_anagrams("pamela")
    self.assertEqual(r, ['pamela'])

    _, r = self.anagrams2.get_anagrams("pamper")
    self.assertEqual(r, ['pamper'])

    _, r = self.anagrams2.get_anagrams("pamphlet")
    self.assertEqual(r, ['pamphlet'])

    _, r = self.anagrams2.get_anagrams("pamphlets")
    self.assertEqual(r, ['pamphlets'])

    _, r = self.anagrams2.get_anagrams("pan")
    self.assertEqual(r, ['nap', 'pan'])

    _, r = self.anagrams2.get_anagrams("panacea")
    self.assertEqual(r, ['panacea'])

    _, r = self.anagrams2.get_anagrams("panaceas")
    self.assertEqual(r, ['panaceas'])

    _, r = self.anagrams2.get_anagrams("panama")
    self.assertEqual(r, ['panama'])

    _, r = self.anagrams2.get_anagrams("panamanian")
    self.assertEqual(r, ['panamanian'])

    _, r = self.anagrams2.get_anagrams("pancake")
    self.assertEqual(r, ['pancake'])

    _, r = self.anagrams2.get_anagrams("pancakes")
    self.assertEqual(r, ['pancakes'])

    _, r = self.anagrams2.get_anagrams("pancho")
    self.assertEqual(r, ['pancho'])

    _, r = self.anagrams2.get_anagrams("panda")
    self.assertEqual(r, ['panda'])

    _, r = self.anagrams2.get_anagrams("pandanus")
    self.assertEqual(r, ['pandanus'])

    _, r = self.anagrams2.get_anagrams("pandas")
    self.assertEqual(r, ['pandas'])

    _, r = self.anagrams2.get_anagrams("pandemic")
    self.assertEqual(r, ['pandemic'])

    _, r = self.anagrams2.get_anagrams("pandemonium")
    self.assertEqual(r, ['pandemonium'])

    _, r = self.anagrams2.get_anagrams("pander")
    self.assertEqual(r, ['pander'])

    _, r = self.anagrams2.get_anagrams("pandora")
    self.assertEqual(r, ['pandora'])

    _, r = self.anagrams2.get_anagrams("pane")
    self.assertEqual(r, ['pane'])

    _, r = self.anagrams2.get_anagrams("panel")
    self.assertEqual(r, ['nepal', 'panel', 'penal', 'plane'])

    _, r = self.anagrams2.get_anagrams("paneled")
    self.assertEqual(r, ['paneled'])

    _, r = self.anagrams2.get_anagrams("paneling")
    self.assertEqual(r, ['paneling'])

    _, r = self.anagrams2.get_anagrams("panelist")
    self.assertEqual(r, ['panelist', 'plainest'])

    _, r = self.anagrams2.get_anagrams("panelists")
    self.assertEqual(r, ['panelists'])

    _, r = self.anagrams2.get_anagrams("panels")
    self.assertEqual(r, ['naples', 'panels', 'planes'])

    _, r = self.anagrams2.get_anagrams("panes")
    self.assertEqual(r, ['aspen', 'panes'])

    _, r = self.anagrams2.get_anagrams("pang")
    self.assertEqual(r, ['pang'])

    _, r = self.anagrams2.get_anagrams("pangaea")
    self.assertEqual(r, ['pangaea'])

    _, r = self.anagrams2.get_anagrams("pangs")
    self.assertEqual(r, ['pangs'])

    _, r = self.anagrams2.get_anagrams("panic")
    self.assertEqual(r, ['panic'])

    _, r = self.anagrams2.get_anagrams("panicked")
    self.assertEqual(r, ['panicked'])

    _, r = self.anagrams2.get_anagrams("panicking")
    self.assertEqual(r, ['panicking'])

    _, r = self.anagrams2.get_anagrams("panicky")
    self.assertEqual(r, ['panicky'])

    _, r = self.anagrams2.get_anagrams("panics")
    self.assertEqual(r, ['panics'])

    _, r = self.anagrams2.get_anagrams("panned")
    self.assertEqual(r, ['panned'])

    _, r = self.anagrams2.get_anagrams("panning")
    self.assertEqual(r, ['panning'])

    _, r = self.anagrams2.get_anagrams("panorama")
    self.assertEqual(r, ['panorama'])

    _, r = self.anagrams2.get_anagrams("panoramic")
    self.assertEqual(r, ['panoramic'])

    _, r = self.anagrams2.get_anagrams("pans")
    self.assertEqual(r, ['naps', 'pans', 'snap', 'span'])

    _, r = self.anagrams2.get_anagrams("pansies")
    self.assertEqual(r, ['pansies', 'sapiens'])

    _, r = self.anagrams2.get_anagrams("pansy")
    self.assertEqual(r, ['pansy'])

    _, r = self.anagrams2.get_anagrams("pant")
    self.assertEqual(r, ['pant'])

    _, r = self.anagrams2.get_anagrams("panted")
    self.assertEqual(r, ['panted', 'pedant'])

    _, r = self.anagrams2.get_anagrams("pantheism")
    self.assertEqual(r, ['pantheism'])

    _, r = self.anagrams2.get_anagrams("pantheist")
    self.assertEqual(r, ['pantheist'])

    _, r = self.anagrams2.get_anagrams("pantheon")
    self.assertEqual(r, ['pantheon'])

    _, r = self.anagrams2.get_anagrams("panther")
    self.assertEqual(r, ['panther'])

    _, r = self.anagrams2.get_anagrams("panthers")
    self.assertEqual(r, ['panthers'])

    _, r = self.anagrams2.get_anagrams("panties")
    self.assertEqual(r, ['panties'])

    _, r = self.anagrams2.get_anagrams("panting")
    self.assertEqual(r, ['panting'])

    _, r = self.anagrams2.get_anagrams("pantomime")
    self.assertEqual(r, ['pantomime'])

    _, r = self.anagrams2.get_anagrams("pantries")
    self.assertEqual(r, ['painters', 'pantries', 'pertains'])

    _, r = self.anagrams2.get_anagrams("pantry")
    self.assertEqual(r, ['pantry'])

    _, r = self.anagrams2.get_anagrams("pants")
    self.assertEqual(r, ['pants'])

    _, r = self.anagrams2.get_anagrams("panty")
    self.assertEqual(r, ['panty'])

    _, r = self.anagrams2.get_anagrams("pantyhose")
    self.assertEqual(r, ['pantyhose'])

    _, r = self.anagrams2.get_anagrams("paoli")
    self.assertEqual(r, ['paoli'])

    _, r = self.anagrams2.get_anagrams("papa")
    self.assertEqual(r, ['papa'])

    _, r = self.anagrams2.get_anagrams("papal")
    self.assertEqual(r, ['papal'])

    _, r = self.anagrams2.get_anagrams("paper")
    self.assertEqual(r, ['paper'])

    _, r = self.anagrams2.get_anagrams("paperback")
    self.assertEqual(r, ['paperback'])

    _, r = self.anagrams2.get_anagrams("paperbacks")
    self.assertEqual(r, ['paperbacks'])

    _, r = self.anagrams2.get_anagrams("papered")
    self.assertEqual(r, ['papered'])

    _, r = self.anagrams2.get_anagrams("paperer")
    self.assertEqual(r, ['paperer', 'prepare'])

    _, r = self.anagrams2.get_anagrams("paperers")
    self.assertEqual(r, ['paperers', 'prepares'])

    _, r = self.anagrams2.get_anagrams("papering")
    self.assertEqual(r, ['papering'])

    _, r = self.anagrams2.get_anagrams("paperings")
    self.assertEqual(r, ['paperings'])

    _, r = self.anagrams2.get_anagrams("papers")
    self.assertEqual(r, ['papers'])

    _, r = self.anagrams2.get_anagrams("paperweight")
    self.assertEqual(r, ['paperweight'])

    _, r = self.anagrams2.get_anagrams("paperwork")
    self.assertEqual(r, ['paperwork'])

    _, r = self.anagrams2.get_anagrams("papoose")
    self.assertEqual(r, ['papoose'])

    _, r = self.anagrams2.get_anagrams("pappas")
    self.assertEqual(r, ['pappas'])

    _, r = self.anagrams2.get_anagrams("papua")
    self.assertEqual(r, ['papua'])

    _, r = self.anagrams2.get_anagrams("papyrus")
    self.assertEqual(r, ['papyrus'])

    _, r = self.anagrams2.get_anagrams("par")
    self.assertEqual(r, ['par', 'rap'])

    _, r = self.anagrams2.get_anagrams("parabola")
    self.assertEqual(r, ['parabola'])

    _, r = self.anagrams2.get_anagrams("parabolic")
    self.assertEqual(r, ['parabolic'])

    _, r = self.anagrams2.get_anagrams("paraboloid")
    self.assertEqual(r, ['paraboloid'])

    _, r = self.anagrams2.get_anagrams("paraboloidal")
    self.assertEqual(r, ['paraboloidal'])

    _, r = self.anagrams2.get_anagrams("parachute")
    self.assertEqual(r, ['parachute'])

    _, r = self.anagrams2.get_anagrams("parachuted")
    self.assertEqual(r, ['parachuted'])

    _, r = self.anagrams2.get_anagrams("parachutes")
    self.assertEqual(r, ['parachutes'])

    _, r = self.anagrams2.get_anagrams("parade")
    self.assertEqual(r, ['parade'])

    _, r = self.anagrams2.get_anagrams("paraded")
    self.assertEqual(r, ['paraded'])

    _, r = self.anagrams2.get_anagrams("parades")
    self.assertEqual(r, ['parades'])

    _, r = self.anagrams2.get_anagrams("paradigm")
    self.assertEqual(r, ['paradigm'])

    _, r = self.anagrams2.get_anagrams("paradigms")
    self.assertEqual(r, ['paradigms'])

    _, r = self.anagrams2.get_anagrams("parading")
    self.assertEqual(r, ['parading'])

    _, r = self.anagrams2.get_anagrams("paradise")
    self.assertEqual(r, ['paradise'])

    _, r = self.anagrams2.get_anagrams("paradox")
    self.assertEqual(r, ['paradox'])

    _, r = self.anagrams2.get_anagrams("paradoxes")
    self.assertEqual(r, ['paradoxes'])

    _, r = self.anagrams2.get_anagrams("paradoxical")
    self.assertEqual(r, ['paradoxical'])

    _, r = self.anagrams2.get_anagrams("paradoxically")
    self.assertEqual(r, ['paradoxically'])

    _, r = self.anagrams2.get_anagrams("paraffin")
    self.assertEqual(r, ['paraffin'])

    _, r = self.anagrams2.get_anagrams("paragon")
    self.assertEqual(r, ['paragon'])

    _, r = self.anagrams2.get_anagrams("paragons")
    self.assertEqual(r, ['paragons'])

    _, r = self.anagrams2.get_anagrams("paragraph")
    self.assertEqual(r, ['paragraph'])

    _, r = self.anagrams2.get_anagrams("paragraphing")
    self.assertEqual(r, ['paragraphing'])

    _, r = self.anagrams2.get_anagrams("paragraphs")
    self.assertEqual(r, ['paragraphs'])

    _, r = self.anagrams2.get_anagrams("paraguay")
    self.assertEqual(r, ['paraguay'])

    _, r = self.anagrams2.get_anagrams("paraguayan")
    self.assertEqual(r, ['paraguayan'])

    _, r = self.anagrams2.get_anagrams("paraguayans")
    self.assertEqual(r, ['paraguayans'])

    _, r = self.anagrams2.get_anagrams("parakeet")
    self.assertEqual(r, ['parakeet'])

    _, r = self.anagrams2.get_anagrams("parallax")
    self.assertEqual(r, ['parallax'])

    _, r = self.anagrams2.get_anagrams("parallel")
    self.assertEqual(r, ['parallel'])

    _, r = self.anagrams2.get_anagrams("paralleled")
    self.assertEqual(r, ['paralleled'])

    _, r = self.anagrams2.get_anagrams("paralleling")
    self.assertEqual(r, ['paralleling'])

    _, r = self.anagrams2.get_anagrams("parallelism")
    self.assertEqual(r, ['parallelism'])

    _, r = self.anagrams2.get_anagrams("parallelize")
    self.assertEqual(r, ['parallelize'])

    _, r = self.anagrams2.get_anagrams("parallelized")
    self.assertEqual(r, ['parallelized'])

    _, r = self.anagrams2.get_anagrams("parallelizes")
    self.assertEqual(r, ['parallelizes'])

    _, r = self.anagrams2.get_anagrams("parallelizing")
    self.assertEqual(r, ['parallelizing'])

    _, r = self.anagrams2.get_anagrams("parallelogram")
    self.assertEqual(r, ['parallelogram'])

    _, r = self.anagrams2.get_anagrams("parallelograms")
    self.assertEqual(r, ['parallelograms'])

    _, r = self.anagrams2.get_anagrams("parallels")
    self.assertEqual(r, ['parallels'])

    _, r = self.anagrams2.get_anagrams("paralysis")
    self.assertEqual(r, ['paralysis'])

    _, r = self.anagrams2.get_anagrams("paralyze")
    self.assertEqual(r, ['paralyze'])

    _, r = self.anagrams2.get_anagrams("paralyzed")
    self.assertEqual(r, ['paralyzed'])

    _, r = self.anagrams2.get_anagrams("paralyzes")
    self.assertEqual(r, ['paralyzes'])

    _, r = self.anagrams2.get_anagrams("paralyzing")
    self.assertEqual(r, ['paralyzing'])

    _, r = self.anagrams2.get_anagrams("parameter")
    self.assertEqual(r, ['parameter'])

    _, r = self.anagrams2.get_anagrams("parameterizable")
    self.assertEqual(r, ['parameterizable'])

    _, r = self.anagrams2.get_anagrams("parameterization")
    self.assertEqual(r, ['parameterization'])

    _, r = self.anagrams2.get_anagrams("parameterizations")
    self.assertEqual(r, ['parameterizations'])

    _, r = self.anagrams2.get_anagrams("parameterize")
    self.assertEqual(r, ['parameterize'])

    _, r = self.anagrams2.get_anagrams("parameterized")
    self.assertEqual(r, ['parameterized'])

    _, r = self.anagrams2.get_anagrams("parameterizes")
    self.assertEqual(r, ['parameterizes'])

    _, r = self.anagrams2.get_anagrams("parameterizing")
    self.assertEqual(r, ['parameterizing'])

    _, r = self.anagrams2.get_anagrams("parameterless")
    self.assertEqual(r, ['parameterless'])

    _, r = self.anagrams2.get_anagrams("parameters")
    self.assertEqual(r, ['parameters'])

    _, r = self.anagrams2.get_anagrams("parametric")
    self.assertEqual(r, ['parametric'])

    _, r = self.anagrams2.get_anagrams("parametrized")
    self.assertEqual(r, ['parametrized'])

    _, r = self.anagrams2.get_anagrams("paramilitary")
    self.assertEqual(r, ['paramilitary'])

    _, r = self.anagrams2.get_anagrams("paramount")
    self.assertEqual(r, ['paramount'])

    _, r = self.anagrams2.get_anagrams("paramus")
    self.assertEqual(r, ['paramus'])

    _, r = self.anagrams2.get_anagrams("paranoia")
    self.assertEqual(r, ['paranoia'])

    _, r = self.anagrams2.get_anagrams("paranoiac")
    self.assertEqual(r, ['paranoiac'])

    _, r = self.anagrams2.get_anagrams("paranoid")
    self.assertEqual(r, ['paranoid'])

    _, r = self.anagrams2.get_anagrams("paranormal")
    self.assertEqual(r, ['paranormal'])

    _, r = self.anagrams2.get_anagrams("parapet")
    self.assertEqual(r, ['parapet'])

    _, r = self.anagrams2.get_anagrams("parapets")
    self.assertEqual(r, ['parapets'])

    _, r = self.anagrams2.get_anagrams("paraphernalia")
    self.assertEqual(r, ['paraphernalia'])

    _, r = self.anagrams2.get_anagrams("paraphrase")
    self.assertEqual(r, ['paraphrase'])

    _, r = self.anagrams2.get_anagrams("paraphrased")
    self.assertEqual(r, ['paraphrased'])

    _, r = self.anagrams2.get_anagrams("paraphrases")
    self.assertEqual(r, ['paraphrases'])

    _, r = self.anagrams2.get_anagrams("paraphrasing")
    self.assertEqual(r, ['paraphrasing'])

    _, r = self.anagrams2.get_anagrams("parapsychology")
    self.assertEqual(r, ['parapsychology'])

    _, r = self.anagrams2.get_anagrams("parasite")
    self.assertEqual(r, ['aspirate', 'parasite'])

    _, r = self.anagrams2.get_anagrams("parasites")
    self.assertEqual(r, ['aspirates', 'parasites'])

    _, r = self.anagrams2.get_anagrams("parasitic")
    self.assertEqual(r, ['parasitic'])

    _, r = self.anagrams2.get_anagrams("parasitics")
    self.assertEqual(r, ['parasitics'])

    _, r = self.anagrams2.get_anagrams("parasol")
    self.assertEqual(r, ['parasol'])

    _, r = self.anagrams2.get_anagrams("parboil")
    self.assertEqual(r, ['bipolar', 'parboil'])

    _, r = self.anagrams2.get_anagrams("parc")
    self.assertEqual(r, ['carp', 'parc'])

    _, r = self.anagrams2.get_anagrams("parcel")
    self.assertEqual(r, ['parcel', 'placer'])

    _, r = self.anagrams2.get_anagrams("parceled")
    self.assertEqual(r, ['parceled', 'replaced'])

    _, r = self.anagrams2.get_anagrams("parceling")
    self.assertEqual(r, ['parceling', 'replacing'])

    _, r = self.anagrams2.get_anagrams("parcels")
    self.assertEqual(r, ['parcels'])

    _, r = self.anagrams2.get_anagrams("parch")
    self.assertEqual(r, ['parch'])

    _, r = self.anagrams2.get_anagrams("parched")
    self.assertEqual(r, ['parched'])

    _, r = self.anagrams2.get_anagrams("parchment")
    self.assertEqual(r, ['parchment'])

    _, r = self.anagrams2.get_anagrams("pardon")
    self.assertEqual(r, ['pardon'])

    _, r = self.anagrams2.get_anagrams("pardonable")
    self.assertEqual(r, ['pardonable'])

    _, r = self.anagrams2.get_anagrams("pardonably")
    self.assertEqual(r, ['pardonably'])

    _, r = self.anagrams2.get_anagrams("pardoned")
    self.assertEqual(r, ['pardoned'])

    _, r = self.anagrams2.get_anagrams("pardoner")
    self.assertEqual(r, ['pardoner'])

    _, r = self.anagrams2.get_anagrams("pardoners")
    self.assertEqual(r, ['pardoners'])

    _, r = self.anagrams2.get_anagrams("pardoning")
    self.assertEqual(r, ['pardoning'])

    _, r = self.anagrams2.get_anagrams("pardons")
    self.assertEqual(r, ['pardons'])

    _, r = self.anagrams2.get_anagrams("pare")
    self.assertEqual(r, ['earp', 'pare', 'pear', 'rape', 'reap'])

    _, r = self.anagrams2.get_anagrams("paregoric")
    self.assertEqual(r, ['paregoric'])

    _, r = self.anagrams2.get_anagrams("parent")
    self.assertEqual(r, ['entrap', 'parent'])

    _, r = self.anagrams2.get_anagrams("parentage")
    self.assertEqual(r, ['parentage'])

    _, r = self.anagrams2.get_anagrams("parental")
    self.assertEqual(r, ['parental', 'paternal', 'prenatal'])

    _, r = self.anagrams2.get_anagrams("parentheses")
    self.assertEqual(r, ['parentheses'])

    _, r = self.anagrams2.get_anagrams("parenthesis")
    self.assertEqual(r, ['parenthesis'])

    _, r = self.anagrams2.get_anagrams("parenthesized")
    self.assertEqual(r, ['parenthesized'])

    _, r = self.anagrams2.get_anagrams("parenthesizes")
    self.assertEqual(r, ['parenthesizes'])

    _, r = self.anagrams2.get_anagrams("parenthesizing")
    self.assertEqual(r, ['parenthesizing'])

    _, r = self.anagrams2.get_anagrams("parenthetic")
    self.assertEqual(r, ['parenthetic'])

    _, r = self.anagrams2.get_anagrams("parenthetical")
    self.assertEqual(r, ['parenthetical'])

    _, r = self.anagrams2.get_anagrams("parenthetically")
    self.assertEqual(r, ['parenthetically'])

    _, r = self.anagrams2.get_anagrams("parenthood")
    self.assertEqual(r, ['parenthood'])

    _, r = self.anagrams2.get_anagrams("parents")
    self.assertEqual(r, ['parents'])

    _, r = self.anagrams2.get_anagrams("pares")
    self.assertEqual(r, ['pares', 'parse', 'pears', 'rapes', 'reaps', 'spare', 'spear'])

    _, r = self.anagrams2.get_anagrams("pareto")
    self.assertEqual(r, ['pareto'])

    _, r = self.anagrams2.get_anagrams("pariah")
    self.assertEqual(r, ['pariah'])

    _, r = self.anagrams2.get_anagrams("parimutuel")
    self.assertEqual(r, ['parimutuel'])

    _, r = self.anagrams2.get_anagrams("paring")
    self.assertEqual(r, ['paring', 'raping'])

    _, r = self.anagrams2.get_anagrams("parings")
    self.assertEqual(r, ['parings', 'parsing', 'rasping', 'sparing'])

    _, r = self.anagrams2.get_anagrams("paris")
    self.assertEqual(r, ['pairs', 'paris', 'parsi'])

    _, r = self.anagrams2.get_anagrams("parish")
    self.assertEqual(r, ['parish'])

    _, r = self.anagrams2.get_anagrams("parishes")
    self.assertEqual(r, ['parishes'])

    _, r = self.anagrams2.get_anagrams("parishioner")
    self.assertEqual(r, ['parishioner'])

    _, r = self.anagrams2.get_anagrams("parisian")
    self.assertEqual(r, ['parisian'])

    _, r = self.anagrams2.get_anagrams("parisianization")
    self.assertEqual(r, ['parisianization'])

    _, r = self.anagrams2.get_anagrams("parisianizations")
    self.assertEqual(r, ['parisianizations'])

    _, r = self.anagrams2.get_anagrams("parisianize")
    self.assertEqual(r, ['parisianize'])

    _, r = self.anagrams2.get_anagrams("parisianizes")
    self.assertEqual(r, ['parisianizes'])

    _, r = self.anagrams2.get_anagrams("parity")
    self.assertEqual(r, ['parity'])

    _, r = self.anagrams2.get_anagrams("park")
    self.assertEqual(r, ['karp', 'park'])

    _, r = self.anagrams2.get_anagrams("parke")
    self.assertEqual(r, ['parke'])

    _, r = self.anagrams2.get_anagrams("parked")
    self.assertEqual(r, ['parked'])

    _, r = self.anagrams2.get_anagrams("parker")
    self.assertEqual(r, ['parker'])

    _, r = self.anagrams2.get_anagrams("parkers")
    self.assertEqual(r, ['parkers'])

    _, r = self.anagrams2.get_anagrams("parkersburg")
    self.assertEqual(r, ['parkersburg'])

    _, r = self.anagrams2.get_anagrams("parkhouse")
    self.assertEqual(r, ['parkhouse'])

    _, r = self.anagrams2.get_anagrams("parking")
    self.assertEqual(r, ['parking'])

    _, r = self.anagrams2.get_anagrams("parkinson")
    self.assertEqual(r, ['parkinson'])

    _, r = self.anagrams2.get_anagrams("parkinsonian")
    self.assertEqual(r, ['parkinsonian'])

    _, r = self.anagrams2.get_anagrams("parkland")
    self.assertEqual(r, ['parkland'])

    _, r = self.anagrams2.get_anagrams("parklike")
    self.assertEqual(r, ['parklike'])

    _, r = self.anagrams2.get_anagrams("parks")
    self.assertEqual(r, ['parks', 'spark'])

    _, r = self.anagrams2.get_anagrams("parkway")
    self.assertEqual(r, ['parkway'])

    _, r = self.anagrams2.get_anagrams("parlay")
    self.assertEqual(r, ['parlay'])

    _, r = self.anagrams2.get_anagrams("parley")
    self.assertEqual(r, ['parley', 'pearly', 'player', 'replay'])

    _, r = self.anagrams2.get_anagrams("parliament")
    self.assertEqual(r, ['parliament'])

    _, r = self.anagrams2.get_anagrams("parliamentarian")
    self.assertEqual(r, ['parliamentarian'])

    _, r = self.anagrams2.get_anagrams("parliamentary")
    self.assertEqual(r, ['parliamentary'])

    _, r = self.anagrams2.get_anagrams("parliaments")
    self.assertEqual(r, ['parliaments'])

    _, r = self.anagrams2.get_anagrams("parlor")
    self.assertEqual(r, ['parlor'])

    _, r = self.anagrams2.get_anagrams("parlors")
    self.assertEqual(r, ['parlors'])

    _, r = self.anagrams2.get_anagrams("parmesan")
    self.assertEqual(r, ['parmesan'])

    _, r = self.anagrams2.get_anagrams("parochial")
    self.assertEqual(r, ['parochial'])

    _, r = self.anagrams2.get_anagrams("parody")
    self.assertEqual(r, ['parody'])

    _, r = self.anagrams2.get_anagrams("parole")
    self.assertEqual(r, ['parole'])

    _, r = self.anagrams2.get_anagrams("paroled")
    self.assertEqual(r, ['leopard', 'paroled'])

    _, r = self.anagrams2.get_anagrams("paroles")
    self.assertEqual(r, ['paroles'])

    _, r = self.anagrams2.get_anagrams("paroling")
    self.assertEqual(r, ['paroling'])

    _, r = self.anagrams2.get_anagrams("parr")
    self.assertEqual(r, ['parr'])

    _, r = self.anagrams2.get_anagrams("parried")
    self.assertEqual(r, ['parried'])

    _, r = self.anagrams2.get_anagrams("parrish")
    self.assertEqual(r, ['parrish'])

    _, r = self.anagrams2.get_anagrams("parrot")
    self.assertEqual(r, ['parrot'])

    _, r = self.anagrams2.get_anagrams("parroting")
    self.assertEqual(r, ['parroting'])

    _, r = self.anagrams2.get_anagrams("parrots")
    self.assertEqual(r, ['parrots'])

    _, r = self.anagrams2.get_anagrams("parrs")
    self.assertEqual(r, ['parrs'])

    _, r = self.anagrams2.get_anagrams("parry")
    self.assertEqual(r, ['parry'])

    _, r = self.anagrams2.get_anagrams("pars")
    self.assertEqual(r, ['pars', 'raps', 'rasp'])

    _, r = self.anagrams2.get_anagrams("parse")
    self.assertEqual(r, ['pares', 'parse', 'pears', 'rapes', 'reaps', 'spare', 'spear'])

    _, r = self.anagrams2.get_anagrams("parsed")
    self.assertEqual(r, ['drapes', 'parsed', 'rasped', 'spared', 'spread'])

    _, r = self.anagrams2.get_anagrams("parser")
    self.assertEqual(r, ['parser', 'sparer'])

    _, r = self.anagrams2.get_anagrams("parsers")
    self.assertEqual(r, ['parsers', 'sparser'])

    _, r = self.anagrams2.get_anagrams("parses")
    self.assertEqual(r, ['parses', 'passer', 'spares', 'sparse', 'spears'])

    _, r = self.anagrams2.get_anagrams("parsi")
    self.assertEqual(r, ['pairs', 'paris', 'parsi'])

    _, r = self.anagrams2.get_anagrams("parsifal")
    self.assertEqual(r, ['parsifal'])

    _, r = self.anagrams2.get_anagrams("parsimony")
    self.assertEqual(r, ['parsimony'])

    _, r = self.anagrams2.get_anagrams("parsing")
    self.assertEqual(r, ['parings', 'parsing', 'rasping', 'sparing'])

    _, r = self.anagrams2.get_anagrams("parsings")
    self.assertEqual(r, ['parsings'])

    _, r = self.anagrams2.get_anagrams("parsley")
    self.assertEqual(r, ['parsley', 'players', 'replays', 'sparely'])

    _, r = self.anagrams2.get_anagrams("parson")
    self.assertEqual(r, ['aprons', 'parson'])

    _, r = self.anagrams2.get_anagrams("parsons")
    self.assertEqual(r, ['parsons'])

    _, r = self.anagrams2.get_anagrams("part")
    self.assertEqual(r, ['part', 'rapt', 'trap'])

    _, r = self.anagrams2.get_anagrams("partake")
    self.assertEqual(r, ['partake'])

    _, r = self.anagrams2.get_anagrams("partaker")
    self.assertEqual(r, ['partaker'])

    _, r = self.anagrams2.get_anagrams("partakes")
    self.assertEqual(r, ['partakes'])

    _, r = self.anagrams2.get_anagrams("partaking")
    self.assertEqual(r, ['partaking'])

    _, r = self.anagrams2.get_anagrams("parted")
    self.assertEqual(r, ['depart', 'parted'])

    _, r = self.anagrams2.get_anagrams("parter")
    self.assertEqual(r, ['parter'])

    _, r = self.anagrams2.get_anagrams("parters")
    self.assertEqual(r, ['parters'])

    _, r = self.anagrams2.get_anagrams("parthenon")
    self.assertEqual(r, ['parthenon'])

    _, r = self.anagrams2.get_anagrams("parthia")
    self.assertEqual(r, ['parthia'])

    _, r = self.anagrams2.get_anagrams("partial")
    self.assertEqual(r, ['partial'])

    _, r = self.anagrams2.get_anagrams("partiality")
    self.assertEqual(r, ['partiality'])

    _, r = self.anagrams2.get_anagrams("partially")
    self.assertEqual(r, ['partially'])

    _, r = self.anagrams2.get_anagrams("participant")
    self.assertEqual(r, ['participant'])

    _, r = self.anagrams2.get_anagrams("participants")
    self.assertEqual(r, ['participants'])

    _, r = self.anagrams2.get_anagrams("participate")
    self.assertEqual(r, ['participate'])

    _, r = self.anagrams2.get_anagrams("participated")
    self.assertEqual(r, ['participated'])

    _, r = self.anagrams2.get_anagrams("participates")
    self.assertEqual(r, ['participates'])

    _, r = self.anagrams2.get_anagrams("participating")
    self.assertEqual(r, ['participating'])

    _, r = self.anagrams2.get_anagrams("participation")
    self.assertEqual(r, ['participation'])

    _, r = self.anagrams2.get_anagrams("participle")
    self.assertEqual(r, ['participle'])

    _, r = self.anagrams2.get_anagrams("particle")
    self.assertEqual(r, ['particle'])

    _, r = self.anagrams2.get_anagrams("particles")
    self.assertEqual(r, ['particles'])

    _, r = self.anagrams2.get_anagrams("particular")
    self.assertEqual(r, ['particular'])

    _, r = self.anagrams2.get_anagrams("particularly")
    self.assertEqual(r, ['particularly'])

    _, r = self.anagrams2.get_anagrams("particulars")
    self.assertEqual(r, ['particulars'])

    _, r = self.anagrams2.get_anagrams("particulate")
    self.assertEqual(r, ['particulate'])

    _, r = self.anagrams2.get_anagrams("parties")
    self.assertEqual(r, ['parties', 'pirates'])

    _, r = self.anagrams2.get_anagrams("parting")
    self.assertEqual(r, ['parting'])

    _, r = self.anagrams2.get_anagrams("partings")
    self.assertEqual(r, ['partings'])

    _, r = self.anagrams2.get_anagrams("partisan")
    self.assertEqual(r, ['aspirant', 'partisan'])

    _, r = self.anagrams2.get_anagrams("partisans")
    self.assertEqual(r, ['aspirants', 'partisans'])

    _, r = self.anagrams2.get_anagrams("partition")
    self.assertEqual(r, ['partition'])

    _, r = self.anagrams2.get_anagrams("partitioned")
    self.assertEqual(r, ['partitioned'])

    _, r = self.anagrams2.get_anagrams("partitioning")
    self.assertEqual(r, ['partitioning'])

    _, r = self.anagrams2.get_anagrams("partitions")
    self.assertEqual(r, ['partitions'])

    _, r = self.anagrams2.get_anagrams("partly")
    self.assertEqual(r, ['partly', 'raptly'])

    _, r = self.anagrams2.get_anagrams("partner")
    self.assertEqual(r, ['partner'])

    _, r = self.anagrams2.get_anagrams("partnered")
    self.assertEqual(r, ['partnered'])

    _, r = self.anagrams2.get_anagrams("partners")
    self.assertEqual(r, ['partners'])

    _, r = self.anagrams2.get_anagrams("partnership")
    self.assertEqual(r, ['partnership'])

    _, r = self.anagrams2.get_anagrams("partook")
    self.assertEqual(r, ['partook'])

    _, r = self.anagrams2.get_anagrams("partridge")
    self.assertEqual(r, ['partridge'])

    _, r = self.anagrams2.get_anagrams("partridges")
    self.assertEqual(r, ['partridges'])

    _, r = self.anagrams2.get_anagrams("parts")
    self.assertEqual(r, ['parts', 'strap', 'traps'])

    _, r = self.anagrams2.get_anagrams("party")
    self.assertEqual(r, ['party'])

    _, r = self.anagrams2.get_anagrams("pasadena")
    self.assertEqual(r, ['pasadena'])

    _, r = self.anagrams2.get_anagrams("pascal")
    self.assertEqual(r, ['pascal', 'pascal'])

    _, r = self.anagrams2.get_anagrams("pascal")
    self.assertEqual(r, ['pascal', 'pascal'])

    _, r = self.anagrams2.get_anagrams("paso")
    self.assertEqual(r, ['paso', 'soap'])

    _, r = self.anagrams2.get_anagrams("pass")
    self.assertEqual(r, ['pass', 'saps'])

    _, r = self.anagrams2.get_anagrams("passage")
    self.assertEqual(r, ['passage'])

    _, r = self.anagrams2.get_anagrams("passages")
    self.assertEqual(r, ['passages'])

    _, r = self.anagrams2.get_anagrams("passageway")
    self.assertEqual(r, ['passageway'])

    _, r = self.anagrams2.get_anagrams("passaic")
    self.assertEqual(r, ['passaic'])

    _, r = self.anagrams2.get_anagrams("passe")
    self.assertEqual(r, ['passe'])

    _, r = self.anagrams2.get_anagrams("passed")
    self.assertEqual(r, ['passed', 'spades'])

    _, r = self.anagrams2.get_anagrams("passenger")
    self.assertEqual(r, ['passenger'])

    _, r = self.anagrams2.get_anagrams("passengers")
    self.assertEqual(r, ['passengers'])

    _, r = self.anagrams2.get_anagrams("passer")
    self.assertEqual(r, ['parses', 'passer', 'spares', 'sparse', 'spears'])

    _, r = self.anagrams2.get_anagrams("passers")
    self.assertEqual(r, ['passers'])

    _, r = self.anagrams2.get_anagrams("passes")
    self.assertEqual(r, ['passes'])

    _, r = self.anagrams2.get_anagrams("passing")
    self.assertEqual(r, ['passing'])

    _, r = self.anagrams2.get_anagrams("passion")
    self.assertEqual(r, ['passion'])

    _, r = self.anagrams2.get_anagrams("passionate")
    self.assertEqual(r, ['passionate'])

    _, r = self.anagrams2.get_anagrams("passionately")
    self.assertEqual(r, ['passionately'])

    _, r = self.anagrams2.get_anagrams("passions")
    self.assertEqual(r, ['passions'])

    _, r = self.anagrams2.get_anagrams("passivate")
    self.assertEqual(r, ['passivate'])

    _, r = self.anagrams2.get_anagrams("passive")
    self.assertEqual(r, ['passive'])

    _, r = self.anagrams2.get_anagrams("passively")
    self.assertEqual(r, ['passively'])

    _, r = self.anagrams2.get_anagrams("passiveness")
    self.assertEqual(r, ['passiveness'])

    _, r = self.anagrams2.get_anagrams("passivity")
    self.assertEqual(r, ['passivity'])

    _, r = self.anagrams2.get_anagrams("passover")
    self.assertEqual(r, ['passover'])

    _, r = self.anagrams2.get_anagrams("passport")
    self.assertEqual(r, ['passport'])

    _, r = self.anagrams2.get_anagrams("passports")
    self.assertEqual(r, ['passports'])

    _, r = self.anagrams2.get_anagrams("password")
    self.assertEqual(r, ['password'])

    _, r = self.anagrams2.get_anagrams("passwords")
    self.assertEqual(r, ['passwords'])

    _, r = self.anagrams2.get_anagrams("past")
    self.assertEqual(r, ['past', 'pats', 'spat', 'taps'])

    _, r = self.anagrams2.get_anagrams("paste")
    self.assertEqual(r, ['paste', 'spate', 'tapes'])

    _, r = self.anagrams2.get_anagrams("pasted")
    self.assertEqual(r, ['pasted'])

    _, r = self.anagrams2.get_anagrams("pastel")
    self.assertEqual(r, ['palest', 'pastel', 'petals', 'plates', 'staple'])

    _, r = self.anagrams2.get_anagrams("pasternak")
    self.assertEqual(r, ['pasternak'])

    _, r = self.anagrams2.get_anagrams("pastes")
    self.assertEqual(r, ['pastes', 'spates'])

    _, r = self.anagrams2.get_anagrams("pasteur")
    self.assertEqual(r, ['pasteur', 'pasture'])

    _, r = self.anagrams2.get_anagrams("pastime")
    self.assertEqual(r, ['pastime'])

    _, r = self.anagrams2.get_anagrams("pastimes")
    self.assertEqual(r, ['pastimes'])

    _, r = self.anagrams2.get_anagrams("pasting")
    self.assertEqual(r, ['pasting', 'tapings'])

    _, r = self.anagrams2.get_anagrams("pastness")
    self.assertEqual(r, ['pastness'])

    _, r = self.anagrams2.get_anagrams("pastor")
    self.assertEqual(r, ['pastor'])

    _, r = self.anagrams2.get_anagrams("pastoral")
    self.assertEqual(r, ['pastoral'])

    _, r = self.anagrams2.get_anagrams("pastors")
    self.assertEqual(r, ['pastors'])

    _, r = self.anagrams2.get_anagrams("pastry")
    self.assertEqual(r, ['pastry'])

    _, r = self.anagrams2.get_anagrams("pasts")
    self.assertEqual(r, ['pasts'])

    _, r = self.anagrams2.get_anagrams("pasture")
    self.assertEqual(r, ['pasteur', 'pasture'])

    _, r = self.anagrams2.get_anagrams("pastures")
    self.assertEqual(r, ['pastures'])

    _, r = self.anagrams2.get_anagrams("pat")
    self.assertEqual(r, ['apt', 'pat', 'tap'])

    _, r = self.anagrams2.get_anagrams("patagonia")
    self.assertEqual(r, ['patagonia'])

    _, r = self.anagrams2.get_anagrams("patagonians")
    self.assertEqual(r, ['patagonians'])

    _, r = self.anagrams2.get_anagrams("patch")
    self.assertEqual(r, ['patch'])

    _, r = self.anagrams2.get_anagrams("patched")
    self.assertEqual(r, ['patched'])

    _, r = self.anagrams2.get_anagrams("patches")
    self.assertEqual(r, ['patches'])

    _, r = self.anagrams2.get_anagrams("patching")
    self.assertEqual(r, ['nightcap', 'patching'])

    _, r = self.anagrams2.get_anagrams("patchwork")
    self.assertEqual(r, ['patchwork'])

    _, r = self.anagrams2.get_anagrams("patchy")
    self.assertEqual(r, ['patchy'])

    _, r = self.anagrams2.get_anagrams("pate")
    self.assertEqual(r, ['pate', 'peat', 'tape'])

    _, r = self.anagrams2.get_anagrams("paten")
    self.assertEqual(r, ['paten'])

    _, r = self.anagrams2.get_anagrams("patent")
    self.assertEqual(r, ['patent'])

    _, r = self.anagrams2.get_anagrams("patentable")
    self.assertEqual(r, ['patentable'])

    _, r = self.anagrams2.get_anagrams("patented")
    self.assertEqual(r, ['patented'])

    _, r = self.anagrams2.get_anagrams("patenter")
    self.assertEqual(r, ['patenter'])

    _, r = self.anagrams2.get_anagrams("patenters")
    self.assertEqual(r, ['patenters'])

    _, r = self.anagrams2.get_anagrams("patenting")
    self.assertEqual(r, ['patenting'])

    _, r = self.anagrams2.get_anagrams("patently")
    self.assertEqual(r, ['patently'])

    _, r = self.anagrams2.get_anagrams("patents")
    self.assertEqual(r, ['patents'])

    _, r = self.anagrams2.get_anagrams("paternal")
    self.assertEqual(r, ['parental', 'paternal', 'prenatal'])

    _, r = self.anagrams2.get_anagrams("paternally")
    self.assertEqual(r, ['paternally'])

    _, r = self.anagrams2.get_anagrams("paternoster")
    self.assertEqual(r, ['paternoster', 'penetrators'])

    _, r = self.anagrams2.get_anagrams("paterson")
    self.assertEqual(r, ['paterson'])

    _, r = self.anagrams2.get_anagrams("path")
    self.assertEqual(r, ['path'])

    _, r = self.anagrams2.get_anagrams("pathetic")
    self.assertEqual(r, ['pathetic'])

    _, r = self.anagrams2.get_anagrams("pathname")
    self.assertEqual(r, ['pathname'])

    _, r = self.anagrams2.get_anagrams("pathnames")
    self.assertEqual(r, ['pathnames'])

    _, r = self.anagrams2.get_anagrams("pathogen")
    self.assertEqual(r, ['pathogen'])

    _, r = self.anagrams2.get_anagrams("pathogenesis")
    self.assertEqual(r, ['pathogenesis'])

    _, r = self.anagrams2.get_anagrams("pathological")
    self.assertEqual(r, ['pathological'])

    _, r = self.anagrams2.get_anagrams("pathology")
    self.assertEqual(r, ['pathology'])

    _, r = self.anagrams2.get_anagrams("pathos")
    self.assertEqual(r, ['pathos', 'potash'])

    _, r = self.anagrams2.get_anagrams("paths")
    self.assertEqual(r, ['paths'])

    _, r = self.anagrams2.get_anagrams("pathway")
    self.assertEqual(r, ['pathway'])

    _, r = self.anagrams2.get_anagrams("pathways")
    self.assertEqual(r, ['pathways'])

    _, r = self.anagrams2.get_anagrams("patience")
    self.assertEqual(r, ['patience'])

    _, r = self.anagrams2.get_anagrams("patient")
    self.assertEqual(r, ['patient'])

    _, r = self.anagrams2.get_anagrams("patiently")
    self.assertEqual(r, ['patiently'])

    _, r = self.anagrams2.get_anagrams("patients")
    self.assertEqual(r, ['patients'])

    _, r = self.anagrams2.get_anagrams("patina")
    self.assertEqual(r, ['patina'])

    _, r = self.anagrams2.get_anagrams("patio")
    self.assertEqual(r, ['patio'])

    _, r = self.anagrams2.get_anagrams("patriarch")
    self.assertEqual(r, ['patriarch'])

    _, r = self.anagrams2.get_anagrams("patriarchal")
    self.assertEqual(r, ['patriarchal'])

    _, r = self.anagrams2.get_anagrams("patriarchs")
    self.assertEqual(r, ['patriarchs'])

    _, r = self.anagrams2.get_anagrams("patriarchy")
    self.assertEqual(r, ['patriarchy'])

    _, r = self.anagrams2.get_anagrams("patrice")
    self.assertEqual(r, ['patrice'])

    _, r = self.anagrams2.get_anagrams("patricia")
    self.assertEqual(r, ['patricia'])

    _, r = self.anagrams2.get_anagrams("patrician")
    self.assertEqual(r, ['patrician'])

    _, r = self.anagrams2.get_anagrams("patricians")
    self.assertEqual(r, ['patricians'])

    _, r = self.anagrams2.get_anagrams("patrick")
    self.assertEqual(r, ['patrick'])

    _, r = self.anagrams2.get_anagrams("patrimonial")
    self.assertEqual(r, ['patrimonial'])

    _, r = self.anagrams2.get_anagrams("patrimony")
    self.assertEqual(r, ['patrimony'])

    _, r = self.anagrams2.get_anagrams("patriot")
    self.assertEqual(r, ['patriot'])

    _, r = self.anagrams2.get_anagrams("patriotic")
    self.assertEqual(r, ['patriotic'])

    _, r = self.anagrams2.get_anagrams("patriotism")
    self.assertEqual(r, ['patriotism'])

    _, r = self.anagrams2.get_anagrams("patriots")
    self.assertEqual(r, ['patriots', 'protista'])

    _, r = self.anagrams2.get_anagrams("patrol")
    self.assertEqual(r, ['patrol', 'portal'])

    _, r = self.anagrams2.get_anagrams("patrolled")
    self.assertEqual(r, ['patrolled'])

    _, r = self.anagrams2.get_anagrams("patrolling")
    self.assertEqual(r, ['patrolling'])

    _, r = self.anagrams2.get_anagrams("patrolman")
    self.assertEqual(r, ['patrolman'])

    _, r = self.anagrams2.get_anagrams("patrolmen")
    self.assertEqual(r, ['patrolmen'])

    _, r = self.anagrams2.get_anagrams("patrols")
    self.assertEqual(r, ['patrols', 'portals'])

    _, r = self.anagrams2.get_anagrams("patron")
    self.assertEqual(r, ['patron'])

    _, r = self.anagrams2.get_anagrams("patronage")
    self.assertEqual(r, ['patronage'])

    _, r = self.anagrams2.get_anagrams("patronize")
    self.assertEqual(r, ['patronize'])

    _, r = self.anagrams2.get_anagrams("patronized")
    self.assertEqual(r, ['patronized'])

    _, r = self.anagrams2.get_anagrams("patronizes")
    self.assertEqual(r, ['patronizes'])

    _, r = self.anagrams2.get_anagrams("patronizing")
    self.assertEqual(r, ['patronizing'])

    _, r = self.anagrams2.get_anagrams("patrons")
    self.assertEqual(r, ['patrons'])

    _, r = self.anagrams2.get_anagrams("pats")
    self.assertEqual(r, ['past', 'pats', 'spat', 'taps'])

    _, r = self.anagrams2.get_anagrams("patsies")
    self.assertEqual(r, ['patsies'])

    _, r = self.anagrams2.get_anagrams("patsy")
    self.assertEqual(r, ['patsy'])

    _, r = self.anagrams2.get_anagrams("patter")
    self.assertEqual(r, ['patter'])

    _, r = self.anagrams2.get_anagrams("pattered")
    self.assertEqual(r, ['pattered'])

    _, r = self.anagrams2.get_anagrams("pattering")
    self.assertEqual(r, ['pattering'])

    _, r = self.anagrams2.get_anagrams("patterings")
    self.assertEqual(r, ['patterings'])

    _, r = self.anagrams2.get_anagrams("pattern")
    self.assertEqual(r, ['pattern'])

    _, r = self.anagrams2.get_anagrams("patterned")
    self.assertEqual(r, ['patterned'])

    _, r = self.anagrams2.get_anagrams("patterning")
    self.assertEqual(r, ['patterning'])

    _, r = self.anagrams2.get_anagrams("patterns")
    self.assertEqual(r, ['patterns'])

    _, r = self.anagrams2.get_anagrams("patters")
    self.assertEqual(r, ['patters', 'spatter'])

    _, r = self.anagrams2.get_anagrams("patterson")
    self.assertEqual(r, ['patterson'])

    _, r = self.anagrams2.get_anagrams("patti")
    self.assertEqual(r, ['patti'])

    _, r = self.anagrams2.get_anagrams("patties")
    self.assertEqual(r, ['patties'])

    _, r = self.anagrams2.get_anagrams("patton")
    self.assertEqual(r, ['patton'])

    _, r = self.anagrams2.get_anagrams("patty")
    self.assertEqual(r, ['patty'])

    _, r = self.anagrams2.get_anagrams("paucity")
    self.assertEqual(r, ['paucity'])

    _, r = self.anagrams2.get_anagrams("paul")
    self.assertEqual(r, ['paul'])

    _, r = self.anagrams2.get_anagrams("paula")
    self.assertEqual(r, ['paula'])

    _, r = self.anagrams2.get_anagrams("paulette")
    self.assertEqual(r, ['paulette'])

    _, r = self.anagrams2.get_anagrams("pauli")
    self.assertEqual(r, ['pauli'])

    _, r = self.anagrams2.get_anagrams("pauline")
    self.assertEqual(r, ['pauline'])

    _, r = self.anagrams2.get_anagrams("pauling")
    self.assertEqual(r, ['pauling'])

    _, r = self.anagrams2.get_anagrams("paulinize")
    self.assertEqual(r, ['paulinize'])

    _, r = self.anagrams2.get_anagrams("paulinizes")
    self.assertEqual(r, ['paulinizes'])

    _, r = self.anagrams2.get_anagrams("paulo")
    self.assertEqual(r, ['paulo'])

    _, r = self.anagrams2.get_anagrams("paulsen")
    self.assertEqual(r, ['paulsen'])

    _, r = self.anagrams2.get_anagrams("paulson")
    self.assertEqual(r, ['paulson'])

    _, r = self.anagrams2.get_anagrams("paulus")
    self.assertEqual(r, ['paulus'])

    _, r = self.anagrams2.get_anagrams("paunch")
    self.assertEqual(r, ['paunch'])

    _, r = self.anagrams2.get_anagrams("paunchy")
    self.assertEqual(r, ['paunchy'])

    _, r = self.anagrams2.get_anagrams("pauper")
    self.assertEqual(r, ['pauper'])

    _, r = self.anagrams2.get_anagrams("pause")
    self.assertEqual(r, ['pause'])

    _, r = self.anagrams2.get_anagrams("paused")
    self.assertEqual(r, ['paused'])

    _, r = self.anagrams2.get_anagrams("pauses")
    self.assertEqual(r, ['pauses'])

    _, r = self.anagrams2.get_anagrams("pausing")
    self.assertEqual(r, ['pausing'])

    _, r = self.anagrams2.get_anagrams("pave")
    self.assertEqual(r, ['pave'])

    _, r = self.anagrams2.get_anagrams("paved")
    self.assertEqual(r, ['paved'])

    _, r = self.anagrams2.get_anagrams("pavement")
    self.assertEqual(r, ['pavement'])

    _, r = self.anagrams2.get_anagrams("pavements")
    self.assertEqual(r, ['pavements'])

    _, r = self.anagrams2.get_anagrams("paves")
    self.assertEqual(r, ['paves'])

    _, r = self.anagrams2.get_anagrams("pavilion")
    self.assertEqual(r, ['pavilion'])

    _, r = self.anagrams2.get_anagrams("pavilions")
    self.assertEqual(r, ['pavilions'])

    _, r = self.anagrams2.get_anagrams("paving")
    self.assertEqual(r, ['paving'])

    _, r = self.anagrams2.get_anagrams("pavlov")
    self.assertEqual(r, ['pavlov'])

    _, r = self.anagrams2.get_anagrams("pavlovian")
    self.assertEqual(r, ['pavlovian'])

    _, r = self.anagrams2.get_anagrams("paw")
    self.assertEqual(r, ['paw'])

    _, r = self.anagrams2.get_anagrams("pawing")
    self.assertEqual(r, ['pawing'])

    _, r = self.anagrams2.get_anagrams("pawn")
    self.assertEqual(r, ['pawn'])

    _, r = self.anagrams2.get_anagrams("pawns")
    self.assertEqual(r, ['pawns', 'spawn'])

    _, r = self.anagrams2.get_anagrams("pawnshop")
    self.assertEqual(r, ['pawnshop'])

    _, r = self.anagrams2.get_anagrams("paws")
    self.assertEqual(r, ['paws', 'swap', 'wasp'])

    _, r = self.anagrams2.get_anagrams("pawtucket")
    self.assertEqual(r, ['pawtucket'])

    _, r = self.anagrams2.get_anagrams("pay")
    self.assertEqual(r, ['pay'])

    _, r = self.anagrams2.get_anagrams("payable")
    self.assertEqual(r, ['payable'])

    _, r = self.anagrams2.get_anagrams("paycheck")
    self.assertEqual(r, ['paycheck'])

    _, r = self.anagrams2.get_anagrams("paychecks")
    self.assertEqual(r, ['paychecks'])

    _, r = self.anagrams2.get_anagrams("payed")
    self.assertEqual(r, ['payed'])

    _, r = self.anagrams2.get_anagrams("payer")
    self.assertEqual(r, ['payer', 'repay'])

    _, r = self.anagrams2.get_anagrams("payers")
    self.assertEqual(r, ['payers', 'repays'])

    _, r = self.anagrams2.get_anagrams("paying")
    self.assertEqual(r, ['paying'])

    _, r = self.anagrams2.get_anagrams("payment")
    self.assertEqual(r, ['payment'])

    _, r = self.anagrams2.get_anagrams("payments")
    self.assertEqual(r, ['payments'])

    _, r = self.anagrams2.get_anagrams("payne")
    self.assertEqual(r, ['payne'])

    _, r = self.anagrams2.get_anagrams("paynes")
    self.assertEqual(r, ['paynes'])

    _, r = self.anagrams2.get_anagrams("paynize")
    self.assertEqual(r, ['paynize'])

    _, r = self.anagrams2.get_anagrams("paynizes")
    self.assertEqual(r, ['paynizes'])

    _, r = self.anagrams2.get_anagrams("payoff")
    self.assertEqual(r, ['payoff'])

    _, r = self.anagrams2.get_anagrams("payoffs")
    self.assertEqual(r, ['payoffs'])

    _, r = self.anagrams2.get_anagrams("payroll")
    self.assertEqual(r, ['payroll'])

    _, r = self.anagrams2.get_anagrams("pays")
    self.assertEqual(r, ['pays'])

    _, r = self.anagrams2.get_anagrams("payson")
    self.assertEqual(r, ['payson'])

    _, r = self.anagrams2.get_anagrams("paz")
    self.assertEqual(r, ['paz'])

    _, r = self.anagrams2.get_anagrams("pea")
    self.assertEqual(r, ['ape', 'pea'])

    _, r = self.anagrams2.get_anagrams("peabody")
    self.assertEqual(r, ['peabody'])

    _, r = self.anagrams2.get_anagrams("peace")
    self.assertEqual(r, ['peace'])

    _, r = self.anagrams2.get_anagrams("peaceable")
    self.assertEqual(r, ['peaceable'])

    _, r = self.anagrams2.get_anagrams("peaceful")
    self.assertEqual(r, ['peaceful'])

    _, r = self.anagrams2.get_anagrams("peacefully")
    self.assertEqual(r, ['peacefully'])

    _, r = self.anagrams2.get_anagrams("peacefulness")
    self.assertEqual(r, ['peacefulness'])

    _, r = self.anagrams2.get_anagrams("peacetime")
    self.assertEqual(r, ['peacetime'])

    _, r = self.anagrams2.get_anagrams("peach")
    self.assertEqual(r, ['cheap', 'peach'])

    _, r = self.anagrams2.get_anagrams("peaches")
    self.assertEqual(r, ['peaches'])

    _, r = self.anagrams2.get_anagrams("peachtree")
    self.assertEqual(r, ['peachtree'])

    _, r = self.anagrams2.get_anagrams("peacock")
    self.assertEqual(r, ['peacock'])

    _, r = self.anagrams2.get_anagrams("peacocks")
    self.assertEqual(r, ['peacocks'])

    _, r = self.anagrams2.get_anagrams("peak")
    self.assertEqual(r, ['peak'])

    _, r = self.anagrams2.get_anagrams("peaked")
    self.assertEqual(r, ['peaked'])

    _, r = self.anagrams2.get_anagrams("peaks")
    self.assertEqual(r, ['peaks', 'speak'])

    _, r = self.anagrams2.get_anagrams("peal")
    self.assertEqual(r, ['leap', 'pale', 'peal', 'plea'])

    _, r = self.anagrams2.get_anagrams("peale")
    self.assertEqual(r, ['peale'])

    _, r = self.anagrams2.get_anagrams("pealed")
    self.assertEqual(r, ['leaped', 'pealed'])

    _, r = self.anagrams2.get_anagrams("pealing")
    self.assertEqual(r, ['leaping', 'pealing'])

    _, r = self.anagrams2.get_anagrams("peals")
    self.assertEqual(r, ['lapse', 'leaps', 'pales', 'peals', 'pleas'])

    _, r = self.anagrams2.get_anagrams("peanut")
    self.assertEqual(r, ['peanut'])

    _, r = self.anagrams2.get_anagrams("peanuts")
    self.assertEqual(r, ['peanuts'])

    _, r = self.anagrams2.get_anagrams("pear")
    self.assertEqual(r, ['earp', 'pare', 'pear', 'rape', 'reap'])

    _, r = self.anagrams2.get_anagrams("pearce")
    self.assertEqual(r, ['pearce'])

    _, r = self.anagrams2.get_anagrams("pearl")
    self.assertEqual(r, ['paler', 'pearl'])

    _, r = self.anagrams2.get_anagrams("pearls")
    self.assertEqual(r, ['pearls'])

    _, r = self.anagrams2.get_anagrams("pearly")
    self.assertEqual(r, ['parley', 'pearly', 'player', 'replay'])

    _, r = self.anagrams2.get_anagrams("pears")
    self.assertEqual(r, ['pares', 'parse', 'pears', 'rapes', 'reaps', 'spare', 'spear'])

    _, r = self.anagrams2.get_anagrams("pearson")
    self.assertEqual(r, ['pearson'])

    _, r = self.anagrams2.get_anagrams("peas")
    self.assertEqual(r, ['apes', 'apse', 'peas'])

    _, r = self.anagrams2.get_anagrams("peasant")
    self.assertEqual(r, ['peasant'])

    _, r = self.anagrams2.get_anagrams("peasantry")
    self.assertEqual(r, ['peasantry'])

    _, r = self.anagrams2.get_anagrams("peasants")
    self.assertEqual(r, ['peasants'])

    _, r = self.anagrams2.get_anagrams("pease")
    self.assertEqual(r, ['pease'])

    _, r = self.anagrams2.get_anagrams("peat")
    self.assertEqual(r, ['pate', 'peat', 'tape'])

    _, r = self.anagrams2.get_anagrams("pebble")
    self.assertEqual(r, ['pebble'])

    _, r = self.anagrams2.get_anagrams("pebbles")
    self.assertEqual(r, ['pebbles'])

    _, r = self.anagrams2.get_anagrams("peccary")
    self.assertEqual(r, ['peccary'])

    _, r = self.anagrams2.get_anagrams("peck")
    self.assertEqual(r, ['peck'])

    _, r = self.anagrams2.get_anagrams("pecked")
    self.assertEqual(r, ['pecked'])

    _, r = self.anagrams2.get_anagrams("pecking")
    self.assertEqual(r, ['pecking'])

    _, r = self.anagrams2.get_anagrams("pecks")
    self.assertEqual(r, ['pecks', 'speck'])

    _, r = self.anagrams2.get_anagrams("pecos")
    self.assertEqual(r, ['copes', 'copse', 'pecos', 'scope'])

    _, r = self.anagrams2.get_anagrams("pectoral")
    self.assertEqual(r, ['pectoral'])

    _, r = self.anagrams2.get_anagrams("peculiar")
    self.assertEqual(r, ['peculiar'])

    _, r = self.anagrams2.get_anagrams("peculiarities")
    self.assertEqual(r, ['peculiarities'])

    _, r = self.anagrams2.get_anagrams("peculiarity")
    self.assertEqual(r, ['peculiarity'])

    _, r = self.anagrams2.get_anagrams("peculiarly")
    self.assertEqual(r, ['peculiarly'])

    _, r = self.anagrams2.get_anagrams("pecuniary")
    self.assertEqual(r, ['pecuniary'])

    _, r = self.anagrams2.get_anagrams("pedagogic")
    self.assertEqual(r, ['pedagogic'])

    _, r = self.anagrams2.get_anagrams("pedagogical")
    self.assertEqual(r, ['pedagogical'])

    _, r = self.anagrams2.get_anagrams("pedagogically")
    self.assertEqual(r, ['pedagogically'])

    _, r = self.anagrams2.get_anagrams("pedagogy")
    self.assertEqual(r, ['pedagogy'])

    _, r = self.anagrams2.get_anagrams("pedal")
    self.assertEqual(r, ['paled', 'pedal', 'plead'])

    _, r = self.anagrams2.get_anagrams("pedant")
    self.assertEqual(r, ['panted', 'pedant'])

    _, r = self.anagrams2.get_anagrams("pedantic")
    self.assertEqual(r, ['pedantic'])

    _, r = self.anagrams2.get_anagrams("pedantry")
    self.assertEqual(r, ['pedantry'])

    _, r = self.anagrams2.get_anagrams("peddle")
    self.assertEqual(r, ['peddle'])

    _, r = self.anagrams2.get_anagrams("peddler")
    self.assertEqual(r, ['peddler'])

    _, r = self.anagrams2.get_anagrams("peddlers")
    self.assertEqual(r, ['peddlers'])

    _, r = self.anagrams2.get_anagrams("pedestal")
    self.assertEqual(r, ['pedestal'])

    _, r = self.anagrams2.get_anagrams("pedestrian")
    self.assertEqual(r, ['pedestrian'])

    _, r = self.anagrams2.get_anagrams("pedestrians")
    self.assertEqual(r, ['pedestrians'])

    _, r = self.anagrams2.get_anagrams("pediatric")
    self.assertEqual(r, ['pediatric'])

    _, r = self.anagrams2.get_anagrams("pediatrician")
    self.assertEqual(r, ['pediatrician'])

    _, r = self.anagrams2.get_anagrams("pediatrics")
    self.assertEqual(r, ['pediatrics'])

    _, r = self.anagrams2.get_anagrams("pedigree")
    self.assertEqual(r, ['pedigree'])

    _, r = self.anagrams2.get_anagrams("pedro")
    self.assertEqual(r, ['doper', 'pedro', 'pored', 'roped'])

    _, r = self.anagrams2.get_anagrams("peek")
    self.assertEqual(r, ['keep', 'peek'])

    _, r = self.anagrams2.get_anagrams("peeked")
    self.assertEqual(r, ['peeked'])

    _, r = self.anagrams2.get_anagrams("peeking")
    self.assertEqual(r, ['keeping', 'peeking'])

    _, r = self.anagrams2.get_anagrams("peeks")
    self.assertEqual(r, ['keeps', 'peeks'])

    _, r = self.anagrams2.get_anagrams("peel")
    self.assertEqual(r, ['peel'])

    _, r = self.anagrams2.get_anagrams("peeled")
    self.assertEqual(r, ['peeled'])

    _, r = self.anagrams2.get_anagrams("peeling")
    self.assertEqual(r, ['peeling'])

    _, r = self.anagrams2.get_anagrams("peels")
    self.assertEqual(r, ['peels', 'sleep'])

    _, r = self.anagrams2.get_anagrams("peep")
    self.assertEqual(r, ['peep'])

    _, r = self.anagrams2.get_anagrams("peeped")
    self.assertEqual(r, ['peeped'])

    _, r = self.anagrams2.get_anagrams("peeper")
    self.assertEqual(r, ['peeper'])

    _, r = self.anagrams2.get_anagrams("peephole")
    self.assertEqual(r, ['peephole'])

    _, r = self.anagrams2.get_anagrams("peeping")
    self.assertEqual(r, ['peeping'])

    _, r = self.anagrams2.get_anagrams("peeps")
    self.assertEqual(r, ['peeps'])

    _, r = self.anagrams2.get_anagrams("peer")
    self.assertEqual(r, ['peer'])

    _, r = self.anagrams2.get_anagrams("peered")
    self.assertEqual(r, ['deeper', 'peered'])

    _, r = self.anagrams2.get_anagrams("peering")
    self.assertEqual(r, ['peering'])

    _, r = self.anagrams2.get_anagrams("peerless")
    self.assertEqual(r, ['peerless', 'sleepers'])

    _, r = self.anagrams2.get_anagrams("peers")
    self.assertEqual(r, ['peers', 'spree'])

    _, r = self.anagrams2.get_anagrams("peg")
    self.assertEqual(r, ['peg'])

    _, r = self.anagrams2.get_anagrams("pegasus")
    self.assertEqual(r, ['pegasus'])

    _, r = self.anagrams2.get_anagrams("pegboard")
    self.assertEqual(r, ['pegboard'])

    _, r = self.anagrams2.get_anagrams("peggy")
    self.assertEqual(r, ['peggy'])

    _, r = self.anagrams2.get_anagrams("pegs")
    self.assertEqual(r, ['pegs'])

    _, r = self.anagrams2.get_anagrams("peiping")
    self.assertEqual(r, ['peiping'])

    _, r = self.anagrams2.get_anagrams("pejorative")
    self.assertEqual(r, ['pejorative'])

    _, r = self.anagrams2.get_anagrams("peking")
    self.assertEqual(r, ['peking'])

    _, r = self.anagrams2.get_anagrams("pelham")
    self.assertEqual(r, ['pelham'])

    _, r = self.anagrams2.get_anagrams("pelican")
    self.assertEqual(r, ['pelican'])

    _, r = self.anagrams2.get_anagrams("pellagra")
    self.assertEqual(r, ['pellagra'])

    _, r = self.anagrams2.get_anagrams("peloponnese")
    self.assertEqual(r, ['peloponnese'])

    _, r = self.anagrams2.get_anagrams("pelt")
    self.assertEqual(r, ['pelt'])

    _, r = self.anagrams2.get_anagrams("pelting")
    self.assertEqual(r, ['pelting'])

    _, r = self.anagrams2.get_anagrams("pelts")
    self.assertEqual(r, ['pelts', 'slept'])

    _, r = self.anagrams2.get_anagrams("pelvic")
    self.assertEqual(r, ['pelvic'])

    _, r = self.anagrams2.get_anagrams("pelvis")
    self.assertEqual(r, ['pelvis'])

    _, r = self.anagrams2.get_anagrams("pembroke")
    self.assertEqual(r, ['pembroke'])

    _, r = self.anagrams2.get_anagrams("pen")
    self.assertEqual(r, ['pen'])

    _, r = self.anagrams2.get_anagrams("penal")
    self.assertEqual(r, ['nepal', 'panel', 'penal', 'plane'])

    _, r = self.anagrams2.get_anagrams("penalize")
    self.assertEqual(r, ['penalize'])

    _, r = self.anagrams2.get_anagrams("penalized")
    self.assertEqual(r, ['penalized'])

    _, r = self.anagrams2.get_anagrams("penalizes")
    self.assertEqual(r, ['penalizes'])

    _, r = self.anagrams2.get_anagrams("penalizing")
    self.assertEqual(r, ['penalizing'])

    _, r = self.anagrams2.get_anagrams("penalties")
    self.assertEqual(r, ['palestine', 'penalties'])

    _, r = self.anagrams2.get_anagrams("penalty")
    self.assertEqual(r, ['aplenty', 'penalty'])

    _, r = self.anagrams2.get_anagrams("penance")
    self.assertEqual(r, ['penance'])

    _, r = self.anagrams2.get_anagrams("pence")
    self.assertEqual(r, ['pence'])

    _, r = self.anagrams2.get_anagrams("penchant")
    self.assertEqual(r, ['penchant'])

    _, r = self.anagrams2.get_anagrams("pencil")
    self.assertEqual(r, ['pencil'])

    _, r = self.anagrams2.get_anagrams("penciled")
    self.assertEqual(r, ['penciled'])

    _, r = self.anagrams2.get_anagrams("pencils")
    self.assertEqual(r, ['pencils'])

    _, r = self.anagrams2.get_anagrams("pend")
    self.assertEqual(r, ['pend'])

    _, r = self.anagrams2.get_anagrams("pendant")
    self.assertEqual(r, ['pendant'])

    _, r = self.anagrams2.get_anagrams("pended")
    self.assertEqual(r, ['depend', 'pended'])

    _, r = self.anagrams2.get_anagrams("pending")
    self.assertEqual(r, ['pending'])

    _, r = self.anagrams2.get_anagrams("pendleton")
    self.assertEqual(r, ['pendleton'])

    _, r = self.anagrams2.get_anagrams("pends")
    self.assertEqual(r, ['pends', 'spend'])

    _, r = self.anagrams2.get_anagrams("pendulum")
    self.assertEqual(r, ['pendulum'])

    _, r = self.anagrams2.get_anagrams("pendulums")
    self.assertEqual(r, ['pendulums'])

    _, r = self.anagrams2.get_anagrams("penelope")
    self.assertEqual(r, ['penelope'])

    _, r = self.anagrams2.get_anagrams("penetrable")
    self.assertEqual(r, ['penetrable'])

    _, r = self.anagrams2.get_anagrams("penetrate")
    self.assertEqual(r, ['penetrate'])

    _, r = self.anagrams2.get_anagrams("penetrated")
    self.assertEqual(r, ['penetrated'])

    _, r = self.anagrams2.get_anagrams("penetrates")
    self.assertEqual(r, ['penetrates'])

    _, r = self.anagrams2.get_anagrams("penetrating")
    self.assertEqual(r, ['penetrating'])

    _, r = self.anagrams2.get_anagrams("penetratingly")
    self.assertEqual(r, ['penetratingly'])

    _, r = self.anagrams2.get_anagrams("penetration")
    self.assertEqual(r, ['penetration'])

    _, r = self.anagrams2.get_anagrams("penetrations")
    self.assertEqual(r, ['penetrations', 'presentation'])

    _, r = self.anagrams2.get_anagrams("penetrative")
    self.assertEqual(r, ['penetrative'])

    _, r = self.anagrams2.get_anagrams("penetrator")
    self.assertEqual(r, ['penetrator'])

    _, r = self.anagrams2.get_anagrams("penetrators")
    self.assertEqual(r, ['paternoster', 'penetrators'])

    _, r = self.anagrams2.get_anagrams("penguin")
    self.assertEqual(r, ['penguin'])

    _, r = self.anagrams2.get_anagrams("penguins")
    self.assertEqual(r, ['penguins'])

    _, r = self.anagrams2.get_anagrams("penh")
    self.assertEqual(r, ['penh'])

    _, r = self.anagrams2.get_anagrams("penicillin")
    self.assertEqual(r, ['penicillin'])

    _, r = self.anagrams2.get_anagrams("peninsula")
    self.assertEqual(r, ['peninsula'])

    _, r = self.anagrams2.get_anagrams("peninsulas")
    self.assertEqual(r, ['peninsulas'])

    _, r = self.anagrams2.get_anagrams("penis")
    self.assertEqual(r, ['penis', 'pines', 'snipe', 'spine'])

    _, r = self.anagrams2.get_anagrams("penises")
    self.assertEqual(r, ['penises'])

    _, r = self.anagrams2.get_anagrams("penitent")
    self.assertEqual(r, ['penitent'])

    _, r = self.anagrams2.get_anagrams("penitentiary")
    self.assertEqual(r, ['penitentiary'])

    _, r = self.anagrams2.get_anagrams("penn")
    self.assertEqual(r, ['penn'])

    _, r = self.anagrams2.get_anagrams("penned")
    self.assertEqual(r, ['penned'])

    _, r = self.anagrams2.get_anagrams("pennies")
    self.assertEqual(r, ['pennies'])

    _, r = self.anagrams2.get_anagrams("penniless")
    self.assertEqual(r, ['penniless'])

    _, r = self.anagrams2.get_anagrams("penning")
    self.assertEqual(r, ['penning'])

    _, r = self.anagrams2.get_anagrams("pennsylvania")
    self.assertEqual(r, ['pennsylvania'])

    _, r = self.anagrams2.get_anagrams("penny")
    self.assertEqual(r, ['penny'])

    _, r = self.anagrams2.get_anagrams("penrose")
    self.assertEqual(r, ['openers', 'penrose', 'reopens'])

    _, r = self.anagrams2.get_anagrams("pens")
    self.assertEqual(r, ['pens'])

    _, r = self.anagrams2.get_anagrams("pensacola")
    self.assertEqual(r, ['pensacola'])

    _, r = self.anagrams2.get_anagrams("pension")
    self.assertEqual(r, ['pension'])

    _, r = self.anagrams2.get_anagrams("pensioner")
    self.assertEqual(r, ['pensioner'])

    _, r = self.anagrams2.get_anagrams("pensions")
    self.assertEqual(r, ['pensions'])

    _, r = self.anagrams2.get_anagrams("pensive")
    self.assertEqual(r, ['pensive'])

    _, r = self.anagrams2.get_anagrams("pent")
    self.assertEqual(r, ['pent'])

    _, r = self.anagrams2.get_anagrams("pentagon")
    self.assertEqual(r, ['pentagon'])

    _, r = self.anagrams2.get_anagrams("pentagons")
    self.assertEqual(r, ['pentagons'])

    _, r = self.anagrams2.get_anagrams("pentateuch")
    self.assertEqual(r, ['pentateuch'])

    _, r = self.anagrams2.get_anagrams("pentecost")
    self.assertEqual(r, ['pentecost'])

    _, r = self.anagrams2.get_anagrams("pentecostal")
    self.assertEqual(r, ['pentecostal'])

    _, r = self.anagrams2.get_anagrams("penthouse")
    self.assertEqual(r, ['penthouse'])

    _, r = self.anagrams2.get_anagrams("penultimate")
    self.assertEqual(r, ['penultimate'])

    _, r = self.anagrams2.get_anagrams("penumbra")
    self.assertEqual(r, ['penumbra'])

    _, r = self.anagrams2.get_anagrams("peony")
    self.assertEqual(r, ['peony'])

    _, r = self.anagrams2.get_anagrams("people")
    self.assertEqual(r, ['people'])

    _, r = self.anagrams2.get_anagrams("peopled")
    self.assertEqual(r, ['peopled'])

    _, r = self.anagrams2.get_anagrams("peoples")
    self.assertEqual(r, ['peoples'])

    _, r = self.anagrams2.get_anagrams("peoria")
    self.assertEqual(r, ['peoria'])

    _, r = self.anagrams2.get_anagrams("pep")
    self.assertEqual(r, ['pep'])

    _, r = self.anagrams2.get_anagrams("pepper")
    self.assertEqual(r, ['pepper'])

    _, r = self.anagrams2.get_anagrams("peppered")
    self.assertEqual(r, ['peppered'])

    _, r = self.anagrams2.get_anagrams("peppering")
    self.assertEqual(r, ['peppering'])

    _, r = self.anagrams2.get_anagrams("peppermint")
    self.assertEqual(r, ['peppermint'])

    _, r = self.anagrams2.get_anagrams("pepperoni")
    self.assertEqual(r, ['pepperoni'])

    _, r = self.anagrams2.get_anagrams("peppers")
    self.assertEqual(r, ['peppers'])

    _, r = self.anagrams2.get_anagrams("peppery")
    self.assertEqual(r, ['peppery'])

    _, r = self.anagrams2.get_anagrams("peppy")
    self.assertEqual(r, ['peppy'])

    _, r = self.anagrams2.get_anagrams("pepsi")
    self.assertEqual(r, ['pepsi', 'pipes'])

    _, r = self.anagrams2.get_anagrams("pepsico")
    self.assertEqual(r, ['pepsico', 'pepsico'])

    _, r = self.anagrams2.get_anagrams("pepsico")
    self.assertEqual(r, ['pepsico', 'pepsico'])

    _, r = self.anagrams2.get_anagrams("peptide")
    self.assertEqual(r, ['peptide'])

    _, r = self.anagrams2.get_anagrams("per")
    self.assertEqual(r, ['per'])

    _, r = self.anagrams2.get_anagrams("perceivable")
    self.assertEqual(r, ['perceivable'])

    _, r = self.anagrams2.get_anagrams("perceivably")
    self.assertEqual(r, ['perceivably'])

    _, r = self.anagrams2.get_anagrams("perceive")
    self.assertEqual(r, ['perceive'])

    _, r = self.anagrams2.get_anagrams("perceived")
    self.assertEqual(r, ['perceived'])

    _, r = self.anagrams2.get_anagrams("perceiver")
    self.assertEqual(r, ['perceiver'])

    _, r = self.anagrams2.get_anagrams("perceivers")
    self.assertEqual(r, ['perceivers'])

    _, r = self.anagrams2.get_anagrams("perceives")
    self.assertEqual(r, ['perceives'])

    _, r = self.anagrams2.get_anagrams("perceiving")
    self.assertEqual(r, ['perceiving'])

    _, r = self.anagrams2.get_anagrams("percent")
    self.assertEqual(r, ['percent'])

    _, r = self.anagrams2.get_anagrams("percentage")
    self.assertEqual(r, ['percentage'])

    _, r = self.anagrams2.get_anagrams("percentages")
    self.assertEqual(r, ['percentages'])

    _, r = self.anagrams2.get_anagrams("percentile")
    self.assertEqual(r, ['percentile'])

    _, r = self.anagrams2.get_anagrams("percentiles")
    self.assertEqual(r, ['percentiles'])

    _, r = self.anagrams2.get_anagrams("percents")
    self.assertEqual(r, ['percents'])

    _, r = self.anagrams2.get_anagrams("perceptible")
    self.assertEqual(r, ['perceptible'])

    _, r = self.anagrams2.get_anagrams("perceptibly")
    self.assertEqual(r, ['perceptibly'])

    _, r = self.anagrams2.get_anagrams("perception")
    self.assertEqual(r, ['perception'])

    _, r = self.anagrams2.get_anagrams("perceptions")
    self.assertEqual(r, ['perceptions'])

    _, r = self.anagrams2.get_anagrams("perceptive")
    self.assertEqual(r, ['perceptive'])

    _, r = self.anagrams2.get_anagrams("perceptively")
    self.assertEqual(r, ['perceptively'])

    _, r = self.anagrams2.get_anagrams("perceptual")
    self.assertEqual(r, ['perceptual'])

    _, r = self.anagrams2.get_anagrams("perceptually")
    self.assertEqual(r, ['perceptually'])

    _, r = self.anagrams2.get_anagrams("perch")
    self.assertEqual(r, ['perch'])

    _, r = self.anagrams2.get_anagrams("perchance")
    self.assertEqual(r, ['perchance'])

    _, r = self.anagrams2.get_anagrams("perched")
    self.assertEqual(r, ['perched'])

    _, r = self.anagrams2.get_anagrams("perches")
    self.assertEqual(r, ['perches'])

    _, r = self.anagrams2.get_anagrams("perching")
    self.assertEqual(r, ['perching'])

    _, r = self.anagrams2.get_anagrams("percival")
    self.assertEqual(r, ['percival'])

    _, r = self.anagrams2.get_anagrams("percussion")
    self.assertEqual(r, ['percussion'])

    _, r = self.anagrams2.get_anagrams("percutaneous")
    self.assertEqual(r, ['percutaneous'])

    _, r = self.anagrams2.get_anagrams("percy")
    self.assertEqual(r, ['percy'])

    _, r = self.anagrams2.get_anagrams("peremptory")
    self.assertEqual(r, ['peremptory'])

    _, r = self.anagrams2.get_anagrams("perennial")
    self.assertEqual(r, ['perennial'])

    _, r = self.anagrams2.get_anagrams("perennially")
    self.assertEqual(r, ['perennially'])

    _, r = self.anagrams2.get_anagrams("perez")
    self.assertEqual(r, ['perez'])

    _, r = self.anagrams2.get_anagrams("perfect")
    self.assertEqual(r, ['perfect'])

    _, r = self.anagrams2.get_anagrams("perfected")
    self.assertEqual(r, ['perfected'])

    _, r = self.anagrams2.get_anagrams("perfectible")
    self.assertEqual(r, ['perfectible'])

    _, r = self.anagrams2.get_anagrams("perfecting")
    self.assertEqual(r, ['perfecting'])

    _, r = self.anagrams2.get_anagrams("perfection")
    self.assertEqual(r, ['perfection'])

    _, r = self.anagrams2.get_anagrams("perfectionist")
    self.assertEqual(r, ['perfectionist'])

    _, r = self.anagrams2.get_anagrams("perfectionists")
    self.assertEqual(r, ['perfectionists'])

    _, r = self.anagrams2.get_anagrams("perfectly")
    self.assertEqual(r, ['perfectly'])

    _, r = self.anagrams2.get_anagrams("perfectness")
    self.assertEqual(r, ['perfectness'])

    _, r = self.anagrams2.get_anagrams("perfects")
    self.assertEqual(r, ['perfects'])

    _, r = self.anagrams2.get_anagrams("perforce")
    self.assertEqual(r, ['perforce'])

    _, r = self.anagrams2.get_anagrams("perform")
    self.assertEqual(r, ['perform'])

    _, r = self.anagrams2.get_anagrams("performance")
    self.assertEqual(r, ['performance'])

    _, r = self.anagrams2.get_anagrams("performances")
    self.assertEqual(r, ['performances'])

    _, r = self.anagrams2.get_anagrams("performed")
    self.assertEqual(r, ['performed'])

    _, r = self.anagrams2.get_anagrams("performer")
    self.assertEqual(r, ['performer'])

    _, r = self.anagrams2.get_anagrams("performers")
    self.assertEqual(r, ['performers'])

    _, r = self.anagrams2.get_anagrams("performing")
    self.assertEqual(r, ['performing'])

    _, r = self.anagrams2.get_anagrams("performs")
    self.assertEqual(r, ['performs'])

    _, r = self.anagrams2.get_anagrams("perfume")
    self.assertEqual(r, ['perfume'])

    _, r = self.anagrams2.get_anagrams("perfumed")
    self.assertEqual(r, ['perfumed'])

    _, r = self.anagrams2.get_anagrams("perfumes")
    self.assertEqual(r, ['perfumes'])

    _, r = self.anagrams2.get_anagrams("perfuming")
    self.assertEqual(r, ['perfuming'])

    _, r = self.anagrams2.get_anagrams("perfunctory")
    self.assertEqual(r, ['perfunctory'])

    _, r = self.anagrams2.get_anagrams("pergamon")
    self.assertEqual(r, ['pergamon'])

    _, r = self.anagrams2.get_anagrams("perhaps")
    self.assertEqual(r, ['perhaps'])

    _, r = self.anagrams2.get_anagrams("periclean")
    self.assertEqual(r, ['periclean'])

    _, r = self.anagrams2.get_anagrams("pericles")
    self.assertEqual(r, ['pericles'])

    _, r = self.anagrams2.get_anagrams("perihelion")
    self.assertEqual(r, ['perihelion'])

    _, r = self.anagrams2.get_anagrams("peril")
    self.assertEqual(r, ['peril'])

    _, r = self.anagrams2.get_anagrams("perilla")
    self.assertEqual(r, ['perilla'])

    _, r = self.anagrams2.get_anagrams("perilous")
    self.assertEqual(r, ['perilous'])

    _, r = self.anagrams2.get_anagrams("perilously")
    self.assertEqual(r, ['perilously'])

    _, r = self.anagrams2.get_anagrams("perils")
    self.assertEqual(r, ['perils', 'pilers', 'pliers'])

    _, r = self.anagrams2.get_anagrams("perimeter")
    self.assertEqual(r, ['perimeter'])

    _, r = self.anagrams2.get_anagrams("period")
    self.assertEqual(r, ['period'])

    _, r = self.anagrams2.get_anagrams("periodic")
    self.assertEqual(r, ['periodic'])

    _, r = self.anagrams2.get_anagrams("periodical")
    self.assertEqual(r, ['periodical'])

    _, r = self.anagrams2.get_anagrams("periodically")
    self.assertEqual(r, ['periodically'])

    _, r = self.anagrams2.get_anagrams("periodicals")
    self.assertEqual(r, ['periodicals'])

    _, r = self.anagrams2.get_anagrams("periods")
    self.assertEqual(r, ['periods'])

    _, r = self.anagrams2.get_anagrams("peripheral")
    self.assertEqual(r, ['peripheral'])

    _, r = self.anagrams2.get_anagrams("peripherally")
    self.assertEqual(r, ['peripherally'])

    _, r = self.anagrams2.get_anagrams("peripherals")
    self.assertEqual(r, ['peripherals'])

    _, r = self.anagrams2.get_anagrams("peripheries")
    self.assertEqual(r, ['peripheries'])

    _, r = self.anagrams2.get_anagrams("periphery")
    self.assertEqual(r, ['periphery'])

    _, r = self.anagrams2.get_anagrams("periscope")
    self.assertEqual(r, ['periscope'])

    _, r = self.anagrams2.get_anagrams("perish")
    self.assertEqual(r, ['perish'])

    _, r = self.anagrams2.get_anagrams("perishable")
    self.assertEqual(r, ['perishable'])

    _, r = self.anagrams2.get_anagrams("perishables")
    self.assertEqual(r, ['perishables'])

    _, r = self.anagrams2.get_anagrams("perished")
    self.assertEqual(r, ['perished'])

    _, r = self.anagrams2.get_anagrams("perisher")
    self.assertEqual(r, ['perisher'])

    _, r = self.anagrams2.get_anagrams("perishers")
    self.assertEqual(r, ['perishers'])

    _, r = self.anagrams2.get_anagrams("perishes")
    self.assertEqual(r, ['perishes'])

    _, r = self.anagrams2.get_anagrams("perishing")
    self.assertEqual(r, ['perishing'])

    _, r = self.anagrams2.get_anagrams("perjure")
    self.assertEqual(r, ['perjure'])

    _, r = self.anagrams2.get_anagrams("perjury")
    self.assertEqual(r, ['perjury'])

    _, r = self.anagrams2.get_anagrams("perk")
    self.assertEqual(r, ['perk'])

    _, r = self.anagrams2.get_anagrams("perkins")
    self.assertEqual(r, ['perkins'])

    _, r = self.anagrams2.get_anagrams("perky")
    self.assertEqual(r, ['perky'])

    _, r = self.anagrams2.get_anagrams("perle")
    self.assertEqual(r, ['leper', 'perle', 'repel'])

    _, r = self.anagrams2.get_anagrams("permanence")
    self.assertEqual(r, ['permanence'])

    _, r = self.anagrams2.get_anagrams("permanent")
    self.assertEqual(r, ['permanent'])

    _, r = self.anagrams2.get_anagrams("permanently")
    self.assertEqual(r, ['permanently'])

    _, r = self.anagrams2.get_anagrams("permeable")
    self.assertEqual(r, ['permeable'])

    _, r = self.anagrams2.get_anagrams("permeate")
    self.assertEqual(r, ['permeate'])

    _, r = self.anagrams2.get_anagrams("permeated")
    self.assertEqual(r, ['permeated'])

    _, r = self.anagrams2.get_anagrams("permeates")
    self.assertEqual(r, ['permeates'])

    _, r = self.anagrams2.get_anagrams("permeating")
    self.assertEqual(r, ['impregnate', 'permeating'])

    _, r = self.anagrams2.get_anagrams("permeation")
    self.assertEqual(r, ['permeation'])

    _, r = self.anagrams2.get_anagrams("permian")
    self.assertEqual(r, ['permian'])

    _, r = self.anagrams2.get_anagrams("permissibility")
    self.assertEqual(r, ['permissibility'])

    _, r = self.anagrams2.get_anagrams("permissible")
    self.assertEqual(r, ['impressible', 'permissible'])

    _, r = self.anagrams2.get_anagrams("permissibly")
    self.assertEqual(r, ['permissibly'])

    _, r = self.anagrams2.get_anagrams("permission")
    self.assertEqual(r, ['impression', 'permission'])

    _, r = self.anagrams2.get_anagrams("permissions")
    self.assertEqual(r, ['impressions', 'permissions'])

    _, r = self.anagrams2.get_anagrams("permissive")
    self.assertEqual(r, ['impressive', 'permissive'])

    _, r = self.anagrams2.get_anagrams("permissively")
    self.assertEqual(r, ['impressively', 'permissively'])

    _, r = self.anagrams2.get_anagrams("permit")
    self.assertEqual(r, ['permit'])

    _, r = self.anagrams2.get_anagrams("permits")
    self.assertEqual(r, ['permits'])

    _, r = self.anagrams2.get_anagrams("permitted")
    self.assertEqual(r, ['permitted'])

    _, r = self.anagrams2.get_anagrams("permitting")
    self.assertEqual(r, ['permitting'])

    _, r = self.anagrams2.get_anagrams("permutation")
    self.assertEqual(r, ['permutation'])

    _, r = self.anagrams2.get_anagrams("permutations")
    self.assertEqual(r, ['permutations'])

    _, r = self.anagrams2.get_anagrams("permute")
    self.assertEqual(r, ['permute'])

    _, r = self.anagrams2.get_anagrams("permuted")
    self.assertEqual(r, ['permuted'])

    _, r = self.anagrams2.get_anagrams("permutes")
    self.assertEqual(r, ['permutes'])

    _, r = self.anagrams2.get_anagrams("permuting")
    self.assertEqual(r, ['permuting'])

    _, r = self.anagrams2.get_anagrams("pernicious")
    self.assertEqual(r, ['pernicious'])

    _, r = self.anagrams2.get_anagrams("pernod")
    self.assertEqual(r, ['pernod', 'ponder'])

    _, r = self.anagrams2.get_anagrams("peroxide")
    self.assertEqual(r, ['peroxide'])

    _, r = self.anagrams2.get_anagrams("perpendicular")
    self.assertEqual(r, ['perpendicular'])

    _, r = self.anagrams2.get_anagrams("perpendicularly")
    self.assertEqual(r, ['perpendicularly'])

    _, r = self.anagrams2.get_anagrams("perpendiculars")
    self.assertEqual(r, ['perpendiculars'])

    _, r = self.anagrams2.get_anagrams("perpetrate")
    self.assertEqual(r, ['perpetrate'])

    _, r = self.anagrams2.get_anagrams("perpetrated")
    self.assertEqual(r, ['perpetrated'])

    _, r = self.anagrams2.get_anagrams("perpetrates")
    self.assertEqual(r, ['perpetrates'])

    _, r = self.anagrams2.get_anagrams("perpetrating")
    self.assertEqual(r, ['perpetrating'])

    _, r = self.anagrams2.get_anagrams("perpetration")
    self.assertEqual(r, ['perpetration'])

    _, r = self.anagrams2.get_anagrams("perpetrations")
    self.assertEqual(r, ['perpetrations'])

    _, r = self.anagrams2.get_anagrams("perpetrator")
    self.assertEqual(r, ['perpetrator'])

    _, r = self.anagrams2.get_anagrams("perpetrators")
    self.assertEqual(r, ['perpetrators'])

    _, r = self.anagrams2.get_anagrams("perpetual")
    self.assertEqual(r, ['perpetual'])

    _, r = self.anagrams2.get_anagrams("perpetually")
    self.assertEqual(r, ['perpetually'])

    _, r = self.anagrams2.get_anagrams("perpetuate")
    self.assertEqual(r, ['perpetuate'])

    _, r = self.anagrams2.get_anagrams("perpetuated")
    self.assertEqual(r, ['perpetuated'])

    _, r = self.anagrams2.get_anagrams("perpetuates")
    self.assertEqual(r, ['perpetuates'])

    _, r = self.anagrams2.get_anagrams("perpetuating")
    self.assertEqual(r, ['perpetuating'])

    _, r = self.anagrams2.get_anagrams("perpetuation")
    self.assertEqual(r, ['perpetuation'])

    _, r = self.anagrams2.get_anagrams("perpetuity")
    self.assertEqual(r, ['perpetuity'])

    _, r = self.anagrams2.get_anagrams("perplex")
    self.assertEqual(r, ['perplex'])

    _, r = self.anagrams2.get_anagrams("perplexed")
    self.assertEqual(r, ['perplexed'])

    _, r = self.anagrams2.get_anagrams("perplexing")
    self.assertEqual(r, ['perplexing'])

    _, r = self.anagrams2.get_anagrams("perplexity")
    self.assertEqual(r, ['perplexity'])

    _, r = self.anagrams2.get_anagrams("perry")
    self.assertEqual(r, ['perry'])

    _, r = self.anagrams2.get_anagrams("persecute")
    self.assertEqual(r, ['persecute'])

    _, r = self.anagrams2.get_anagrams("persecuted")
    self.assertEqual(r, ['persecuted'])

    _, r = self.anagrams2.get_anagrams("persecutes")
    self.assertEqual(r, ['persecutes'])

    _, r = self.anagrams2.get_anagrams("persecuting")
    self.assertEqual(r, ['persecuting'])

    _, r = self.anagrams2.get_anagrams("persecution")
    self.assertEqual(r, ['persecution'])

    _, r = self.anagrams2.get_anagrams("persecutor")
    self.assertEqual(r, ['persecutor'])

    _, r = self.anagrams2.get_anagrams("persecutors")
    self.assertEqual(r, ['persecutors'])

    _, r = self.anagrams2.get_anagrams("perseid")
    self.assertEqual(r, ['perseid', 'preside'])

    _, r = self.anagrams2.get_anagrams("persephone")
    self.assertEqual(r, ['persephone'])

    _, r = self.anagrams2.get_anagrams("perseus")
    self.assertEqual(r, ['perseus', 'peruses'])

    _, r = self.anagrams2.get_anagrams("perseverance")
    self.assertEqual(r, ['perseverance'])

    _, r = self.anagrams2.get_anagrams("persevere")
    self.assertEqual(r, ['persevere'])

    _, r = self.anagrams2.get_anagrams("persevered")
    self.assertEqual(r, ['persevered'])

    _, r = self.anagrams2.get_anagrams("perseveres")
    self.assertEqual(r, ['perseveres'])

    _, r = self.anagrams2.get_anagrams("persevering")
    self.assertEqual(r, ['persevering'])

    _, r = self.anagrams2.get_anagrams("pershing")
    self.assertEqual(r, ['pershing'])

    _, r = self.anagrams2.get_anagrams("persia")
    self.assertEqual(r, ['aspire', 'persia', 'praise'])

    _, r = self.anagrams2.get_anagrams("persian")
    self.assertEqual(r, ['persian'])

    _, r = self.anagrams2.get_anagrams("persianization")
    self.assertEqual(r, ['persianization'])

    _, r = self.anagrams2.get_anagrams("persianizations")
    self.assertEqual(r, ['persianizations'])

    _, r = self.anagrams2.get_anagrams("persianize")
    self.assertEqual(r, ['persianize'])

    _, r = self.anagrams2.get_anagrams("persianizes")
    self.assertEqual(r, ['persianizes'])

    _, r = self.anagrams2.get_anagrams("persians")
    self.assertEqual(r, ['persians'])

    _, r = self.anagrams2.get_anagrams("persist")
    self.assertEqual(r, ['persist', 'stripes'])

    _, r = self.anagrams2.get_anagrams("persisted")
    self.assertEqual(r, ['persisted'])

    _, r = self.anagrams2.get_anagrams("persistence")
    self.assertEqual(r, ['persistence'])

    _, r = self.anagrams2.get_anagrams("persistent")
    self.assertEqual(r, ['persistent', 'prettiness'])

    _, r = self.anagrams2.get_anagrams("persistently")
    self.assertEqual(r, ['persistently'])

    _, r = self.anagrams2.get_anagrams("persisting")
    self.assertEqual(r, ['persisting', 'springiest'])

    _, r = self.anagrams2.get_anagrams("persists")
    self.assertEqual(r, ['persists'])

    _, r = self.anagrams2.get_anagrams("person")
    self.assertEqual(r, ['person', 'posner'])

    _, r = self.anagrams2.get_anagrams("personage")
    self.assertEqual(r, ['personage'])

    _, r = self.anagrams2.get_anagrams("personages")
    self.assertEqual(r, ['personages'])

    _, r = self.anagrams2.get_anagrams("personal")
    self.assertEqual(r, ['personal'])

    _, r = self.anagrams2.get_anagrams("personalities")
    self.assertEqual(r, ['personalities'])

    _, r = self.anagrams2.get_anagrams("personality")
    self.assertEqual(r, ['personality'])

    _, r = self.anagrams2.get_anagrams("personalization")
    self.assertEqual(r, ['personalization'])

    _, r = self.anagrams2.get_anagrams("personalize")
    self.assertEqual(r, ['personalize'])

    _, r = self.anagrams2.get_anagrams("personalized")
    self.assertEqual(r, ['personalized'])

    _, r = self.anagrams2.get_anagrams("personalizes")
    self.assertEqual(r, ['personalizes'])

    _, r = self.anagrams2.get_anagrams("personalizing")
    self.assertEqual(r, ['personalizing'])

    _, r = self.anagrams2.get_anagrams("personally")
    self.assertEqual(r, ['personally'])

    _, r = self.anagrams2.get_anagrams("personification")
    self.assertEqual(r, ['personification'])

    _, r = self.anagrams2.get_anagrams("personified")
    self.assertEqual(r, ['personified'])

    _, r = self.anagrams2.get_anagrams("personifies")
    self.assertEqual(r, ['personifies'])

    _, r = self.anagrams2.get_anagrams("personify")
    self.assertEqual(r, ['personify'])

    _, r = self.anagrams2.get_anagrams("personifying")
    self.assertEqual(r, ['personifying'])

    _, r = self.anagrams2.get_anagrams("personnel")
    self.assertEqual(r, ['personnel'])

    _, r = self.anagrams2.get_anagrams("persons")
    self.assertEqual(r, ['persons'])

    _, r = self.anagrams2.get_anagrams("perspective")
    self.assertEqual(r, ['perspective'])

    _, r = self.anagrams2.get_anagrams("perspectives")
    self.assertEqual(r, ['perspectives'])

    _, r = self.anagrams2.get_anagrams("perspicuous")
    self.assertEqual(r, ['perspicuous'])

    _, r = self.anagrams2.get_anagrams("perspicuously")
    self.assertEqual(r, ['perspicuously'])

    _, r = self.anagrams2.get_anagrams("perspiration")
    self.assertEqual(r, ['perspiration'])

    _, r = self.anagrams2.get_anagrams("perspire")
    self.assertEqual(r, ['perspire'])

    _, r = self.anagrams2.get_anagrams("persuadable")
    self.assertEqual(r, ['persuadable'])

    _, r = self.anagrams2.get_anagrams("persuade")
    self.assertEqual(r, ['persuade'])

    _, r = self.anagrams2.get_anagrams("persuaded")
    self.assertEqual(r, ['persuaded'])

    _, r = self.anagrams2.get_anagrams("persuader")
    self.assertEqual(r, ['persuader'])

    _, r = self.anagrams2.get_anagrams("persuaders")
    self.assertEqual(r, ['persuaders'])

    _, r = self.anagrams2.get_anagrams("persuades")
    self.assertEqual(r, ['persuades'])

    _, r = self.anagrams2.get_anagrams("persuading")
    self.assertEqual(r, ['persuading'])

    _, r = self.anagrams2.get_anagrams("persuasion")
    self.assertEqual(r, ['persuasion'])

    _, r = self.anagrams2.get_anagrams("persuasions")
    self.assertEqual(r, ['persuasions'])

    _, r = self.anagrams2.get_anagrams("persuasive")
    self.assertEqual(r, ['persuasive'])

    _, r = self.anagrams2.get_anagrams("persuasively")
    self.assertEqual(r, ['persuasively'])

    _, r = self.anagrams2.get_anagrams("persuasiveness")
    self.assertEqual(r, ['persuasiveness'])

    _, r = self.anagrams2.get_anagrams("pertain")
    self.assertEqual(r, ['painter', 'pertain'])

    _, r = self.anagrams2.get_anagrams("pertained")
    self.assertEqual(r, ['pertained'])

    _, r = self.anagrams2.get_anagrams("pertaining")
    self.assertEqual(r, ['pertaining'])

    _, r = self.anagrams2.get_anagrams("pertains")
    self.assertEqual(r, ['painters', 'pantries', 'pertains'])

    _, r = self.anagrams2.get_anagrams("perth")
    self.assertEqual(r, ['perth'])

    _, r = self.anagrams2.get_anagrams("pertinent")
    self.assertEqual(r, ['pertinent'])

    _, r = self.anagrams2.get_anagrams("perturb")
    self.assertEqual(r, ['perturb'])

    _, r = self.anagrams2.get_anagrams("perturbation")
    self.assertEqual(r, ['perturbation'])

    _, r = self.anagrams2.get_anagrams("perturbations")
    self.assertEqual(r, ['perturbations'])

    _, r = self.anagrams2.get_anagrams("perturbed")
    self.assertEqual(r, ['perturbed'])

    _, r = self.anagrams2.get_anagrams("peru")
    self.assertEqual(r, ['peru', 'pure'])

    _, r = self.anagrams2.get_anagrams("perusal")
    self.assertEqual(r, ['perusal'])

    _, r = self.anagrams2.get_anagrams("peruse")
    self.assertEqual(r, ['peruse'])

    _, r = self.anagrams2.get_anagrams("perused")
    self.assertEqual(r, ['perused'])

    _, r = self.anagrams2.get_anagrams("peruser")
    self.assertEqual(r, ['peruser'])

    _, r = self.anagrams2.get_anagrams("perusers")
    self.assertEqual(r, ['perusers', 'pressure'])

    _, r = self.anagrams2.get_anagrams("peruses")
    self.assertEqual(r, ['perseus', 'peruses'])

    _, r = self.anagrams2.get_anagrams("perusing")
    self.assertEqual(r, ['perusing'])

    _, r = self.anagrams2.get_anagrams("peruvian")
    self.assertEqual(r, ['peruvian'])

    _, r = self.anagrams2.get_anagrams("peruvianize")
    self.assertEqual(r, ['peruvianize'])

    _, r = self.anagrams2.get_anagrams("peruvianizes")
    self.assertEqual(r, ['peruvianizes'])

    _, r = self.anagrams2.get_anagrams("peruvians")
    self.assertEqual(r, ['peruvians'])

    _, r = self.anagrams2.get_anagrams("pervade")
    self.assertEqual(r, ['deprave', 'pervade'])

    _, r = self.anagrams2.get_anagrams("pervaded")
    self.assertEqual(r, ['depraved', 'pervaded'])

    _, r = self.anagrams2.get_anagrams("pervades")
    self.assertEqual(r, ['pervades'])

    _, r = self.anagrams2.get_anagrams("pervading")
    self.assertEqual(r, ['pervading'])

    _, r = self.anagrams2.get_anagrams("pervasive")
    self.assertEqual(r, ['pervasive'])

    _, r = self.anagrams2.get_anagrams("pervasively")
    self.assertEqual(r, ['pervasively'])

    _, r = self.anagrams2.get_anagrams("perversion")
    self.assertEqual(r, ['perversion'])

    _, r = self.anagrams2.get_anagrams("pervert")
    self.assertEqual(r, ['pervert'])

    _, r = self.anagrams2.get_anagrams("perverted")
    self.assertEqual(r, ['perverted'])

    _, r = self.anagrams2.get_anagrams("perverts")
    self.assertEqual(r, ['perverts'])

    _, r = self.anagrams2.get_anagrams("pessimism")
    self.assertEqual(r, ['pessimism'])

    _, r = self.anagrams2.get_anagrams("pessimist")
    self.assertEqual(r, ['pessimist'])

    _, r = self.anagrams2.get_anagrams("pessimistic")
    self.assertEqual(r, ['pessimistic'])

    _, r = self.anagrams2.get_anagrams("pest")
    self.assertEqual(r, ['pest', 'pets', 'sept', 'step'])

    _, r = self.anagrams2.get_anagrams("pester")
    self.assertEqual(r, ['pester', 'peters', 'preset'])

    _, r = self.anagrams2.get_anagrams("pesticide")
    self.assertEqual(r, ['pesticide'])

    _, r = self.anagrams2.get_anagrams("pestilence")
    self.assertEqual(r, ['pestilence'])

    _, r = self.anagrams2.get_anagrams("pestilent")
    self.assertEqual(r, ['pestilent'])

    _, r = self.anagrams2.get_anagrams("pests")
    self.assertEqual(r, ['pests', 'steps'])

    _, r = self.anagrams2.get_anagrams("pet")
    self.assertEqual(r, ['pet'])

    _, r = self.anagrams2.get_anagrams("petal")
    self.assertEqual(r, ['leapt', 'petal', 'plate', 'pleat'])

    _, r = self.anagrams2.get_anagrams("petals")
    self.assertEqual(r, ['palest', 'pastel', 'petals', 'plates', 'staple'])

    _, r = self.anagrams2.get_anagrams("pete")
    self.assertEqual(r, ['pete'])

    _, r = self.anagrams2.get_anagrams("peter")
    self.assertEqual(r, ['peter'])

    _, r = self.anagrams2.get_anagrams("peters")
    self.assertEqual(r, ['pester', 'peters', 'preset'])

    _, r = self.anagrams2.get_anagrams("petersburg")
    self.assertEqual(r, ['petersburg'])

    _, r = self.anagrams2.get_anagrams("petersen")
    self.assertEqual(r, ['petersen', 'pretense'])

    _, r = self.anagrams2.get_anagrams("peterson")
    self.assertEqual(r, ['peterson'])

    _, r = self.anagrams2.get_anagrams("petition")
    self.assertEqual(r, ['petition'])

    _, r = self.anagrams2.get_anagrams("petitioned")
    self.assertEqual(r, ['petitioned'])

    _, r = self.anagrams2.get_anagrams("petitioner")
    self.assertEqual(r, ['petitioner', 'repetition'])

    _, r = self.anagrams2.get_anagrams("petitioning")
    self.assertEqual(r, ['petitioning'])

    _, r = self.anagrams2.get_anagrams("petitions")
    self.assertEqual(r, ['petitions'])

    _, r = self.anagrams2.get_anagrams("petkiewicz")
    self.assertEqual(r, ['petkiewicz'])

    _, r = self.anagrams2.get_anagrams("petri")
    self.assertEqual(r, ['petri'])

    _, r = self.anagrams2.get_anagrams("petroleum")
    self.assertEqual(r, ['petroleum'])

    _, r = self.anagrams2.get_anagrams("pets")
    self.assertEqual(r, ['pest', 'pets', 'sept', 'step'])

    _, r = self.anagrams2.get_anagrams("petted")
    self.assertEqual(r, ['petted'])

    _, r = self.anagrams2.get_anagrams("petter")
    self.assertEqual(r, ['petter'])

    _, r = self.anagrams2.get_anagrams("petters")
    self.assertEqual(r, ['petters'])

    _, r = self.anagrams2.get_anagrams("pettibone")
    self.assertEqual(r, ['pettibone'])

    _, r = self.anagrams2.get_anagrams("petticoat")
    self.assertEqual(r, ['petticoat'])

    _, r = self.anagrams2.get_anagrams("petticoats")
    self.assertEqual(r, ['petticoats'])

    _, r = self.anagrams2.get_anagrams("pettiness")
    self.assertEqual(r, ['pettiness'])

    _, r = self.anagrams2.get_anagrams("petting")
    self.assertEqual(r, ['petting'])

    _, r = self.anagrams2.get_anagrams("petty")
    self.assertEqual(r, ['petty'])

    _, r = self.anagrams2.get_anagrams("petulance")
    self.assertEqual(r, ['petulance'])

    _, r = self.anagrams2.get_anagrams("petulant")
    self.assertEqual(r, ['petulant'])

    _, r = self.anagrams2.get_anagrams("peugeot")
    self.assertEqual(r, ['peugeot'])

    _, r = self.anagrams2.get_anagrams("pew")
    self.assertEqual(r, ['pew'])

    _, r = self.anagrams2.get_anagrams("pewaukee")
    self.assertEqual(r, ['pewaukee'])

    _, r = self.anagrams2.get_anagrams("pews")
    self.assertEqual(r, ['pews'])

    _, r = self.anagrams2.get_anagrams("pewter")
    self.assertEqual(r, ['pewter'])

    _, r = self.anagrams2.get_anagrams("pfizer")
    self.assertEqual(r, ['pfizer'])

    _, r = self.anagrams2.get_anagrams("phaedra")
    self.assertEqual(r, ['phaedra'])

    _, r = self.anagrams2.get_anagrams("phantom")
    self.assertEqual(r, ['hampton', 'phantom'])

    _, r = self.anagrams2.get_anagrams("phantoms")
    self.assertEqual(r, ['phantoms'])

    _, r = self.anagrams2.get_anagrams("pharmaceutic")
    self.assertEqual(r, ['pharmaceutic'])

    _, r = self.anagrams2.get_anagrams("pharmacist")
    self.assertEqual(r, ['pharmacist'])

    _, r = self.anagrams2.get_anagrams("pharmacology")
    self.assertEqual(r, ['pharmacology'])

    _, r = self.anagrams2.get_anagrams("pharmacopoeia")
    self.assertEqual(r, ['pharmacopoeia'])

    _, r = self.anagrams2.get_anagrams("pharmacy")
    self.assertEqual(r, ['pharmacy'])

    _, r = self.anagrams2.get_anagrams("phase")
    self.assertEqual(r, ['heaps', 'phase', 'shape'])

    _, r = self.anagrams2.get_anagrams("phased")
    self.assertEqual(r, ['phased', 'shaped'])

    _, r = self.anagrams2.get_anagrams("phaser")
    self.assertEqual(r, ['phaser', 'phrase', 'shaper', 'sharpe'])

    _, r = self.anagrams2.get_anagrams("phasers")
    self.assertEqual(r, ['phasers', 'phrases', 'shapers'])

    _, r = self.anagrams2.get_anagrams("phases")
    self.assertEqual(r, ['phases', 'shapes'])

    _, r = self.anagrams2.get_anagrams("phasing")
    self.assertEqual(r, ['phasing', 'shaping'])

    _, r = self.anagrams2.get_anagrams("pheasant")
    self.assertEqual(r, ['pheasant'])

    _, r = self.anagrams2.get_anagrams("pheasants")
    self.assertEqual(r, ['pheasants'])

    _, r = self.anagrams2.get_anagrams("phelps")
    self.assertEqual(r, ['phelps'])

    _, r = self.anagrams2.get_anagrams("phenomena")
    self.assertEqual(r, ['phenomena'])

    _, r = self.anagrams2.get_anagrams("phenomenal")
    self.assertEqual(r, ['phenomenal'])

    _, r = self.anagrams2.get_anagrams("phenomenally")
    self.assertEqual(r, ['phenomenally'])

    _, r = self.anagrams2.get_anagrams("phenomenological")
    self.assertEqual(r, ['phenomenological'])

    _, r = self.anagrams2.get_anagrams("phenomenologically")
    self.assertEqual(r, ['phenomenologically'])

    _, r = self.anagrams2.get_anagrams("phenomenologies")
    self.assertEqual(r, ['phenomenologies'])

    _, r = self.anagrams2.get_anagrams("phenomenology")
    self.assertEqual(r, ['phenomenology'])

    _, r = self.anagrams2.get_anagrams("phenomenon")
    self.assertEqual(r, ['phenomenon'])

    _, r = self.anagrams2.get_anagrams("phi")
    self.assertEqual(r, ['hip', 'phi'])

    _, r = self.anagrams2.get_anagrams("phigs")
    self.assertEqual(r, ['phigs'])

    _, r = self.anagrams2.get_anagrams("phil")
    self.assertEqual(r, ['phil'])

    _, r = self.anagrams2.get_anagrams("philadelphia")
    self.assertEqual(r, ['philadelphia'])

    _, r = self.anagrams2.get_anagrams("philanthropy")
    self.assertEqual(r, ['philanthropy'])

    _, r = self.anagrams2.get_anagrams("philco")
    self.assertEqual(r, ['philco'])

    _, r = self.anagrams2.get_anagrams("philharmonic")
    self.assertEqual(r, ['philharmonic'])

    _, r = self.anagrams2.get_anagrams("philip")
    self.assertEqual(r, ['philip'])

    _, r = self.anagrams2.get_anagrams("philippe")
    self.assertEqual(r, ['philippe'])

    _, r = self.anagrams2.get_anagrams("philippians")
    self.assertEqual(r, ['philippians'])

    _, r = self.anagrams2.get_anagrams("philippine")
    self.assertEqual(r, ['philippine'])

    _, r = self.anagrams2.get_anagrams("philippines")
    self.assertEqual(r, ['philippines'])

    _, r = self.anagrams2.get_anagrams("philistine")
    self.assertEqual(r, ['philistine'])

    _, r = self.anagrams2.get_anagrams("philistines")
    self.assertEqual(r, ['philistines'])

    _, r = self.anagrams2.get_anagrams("philistinize")
    self.assertEqual(r, ['philistinize'])

    _, r = self.anagrams2.get_anagrams("philistinizes")
    self.assertEqual(r, ['philistinizes'])

    _, r = self.anagrams2.get_anagrams("phillies")
    self.assertEqual(r, ['phillies'])

    _, r = self.anagrams2.get_anagrams("phillip")
    self.assertEqual(r, ['phillip'])

    _, r = self.anagrams2.get_anagrams("phillips")
    self.assertEqual(r, ['phillips'])

    _, r = self.anagrams2.get_anagrams("philly")
    self.assertEqual(r, ['philly'])

    _, r = self.anagrams2.get_anagrams("philosopher")
    self.assertEqual(r, ['philosopher'])

    _, r = self.anagrams2.get_anagrams("philosophers")
    self.assertEqual(r, ['philosophers'])

    _, r = self.anagrams2.get_anagrams("philosophic")
    self.assertEqual(r, ['philosophic'])

    _, r = self.anagrams2.get_anagrams("philosophical")
    self.assertEqual(r, ['philosophical'])

    _, r = self.anagrams2.get_anagrams("philosophically")
    self.assertEqual(r, ['philosophically'])

    _, r = self.anagrams2.get_anagrams("philosophies")
    self.assertEqual(r, ['philosophies'])

    _, r = self.anagrams2.get_anagrams("philosophize")
    self.assertEqual(r, ['philosophize'])

    _, r = self.anagrams2.get_anagrams("philosophized")
    self.assertEqual(r, ['philosophized'])

    _, r = self.anagrams2.get_anagrams("philosophizer")
    self.assertEqual(r, ['philosophizer'])

    _, r = self.anagrams2.get_anagrams("philosophizers")
    self.assertEqual(r, ['philosophizers'])

    _, r = self.anagrams2.get_anagrams("philosophizes")
    self.assertEqual(r, ['philosophizes'])

    _, r = self.anagrams2.get_anagrams("philosophizing")
    self.assertEqual(r, ['philosophizing'])

    _, r = self.anagrams2.get_anagrams("philosophy")
    self.assertEqual(r, ['philosophy'])

    _, r = self.anagrams2.get_anagrams("phipps")
    self.assertEqual(r, ['phipps'])

    _, r = self.anagrams2.get_anagrams("phobos")
    self.assertEqual(r, ['phobos'])

    _, r = self.anagrams2.get_anagrams("phoenicia")
    self.assertEqual(r, ['phoenicia'])

    _, r = self.anagrams2.get_anagrams("phoenix")
    self.assertEqual(r, ['phoenix'])

    _, r = self.anagrams2.get_anagrams("phone")
    self.assertEqual(r, ['phone'])

    _, r = self.anagrams2.get_anagrams("phoned")
    self.assertEqual(r, ['phoned'])

    _, r = self.anagrams2.get_anagrams("phoneme")
    self.assertEqual(r, ['phoneme'])

    _, r = self.anagrams2.get_anagrams("phonemes")
    self.assertEqual(r, ['phonemes'])

    _, r = self.anagrams2.get_anagrams("phonemic")
    self.assertEqual(r, ['phonemic'])

    _, r = self.anagrams2.get_anagrams("phones")
    self.assertEqual(r, ['phones'])

    _, r = self.anagrams2.get_anagrams("phonetic")
    self.assertEqual(r, ['phonetic'])

    _, r = self.anagrams2.get_anagrams("phonetics")
    self.assertEqual(r, ['phonetics'])

    _, r = self.anagrams2.get_anagrams("phoning")
    self.assertEqual(r, ['phoning'])

    _, r = self.anagrams2.get_anagrams("phonograph")
    self.assertEqual(r, ['phonograph'])

    _, r = self.anagrams2.get_anagrams("phonographs")
    self.assertEqual(r, ['phonographs'])

    _, r = self.anagrams2.get_anagrams("phony")
    self.assertEqual(r, ['phony'])

    _, r = self.anagrams2.get_anagrams("phosgene")
    self.assertEqual(r, ['phosgene'])

    _, r = self.anagrams2.get_anagrams("phosphate")
    self.assertEqual(r, ['phosphate'])

    _, r = self.anagrams2.get_anagrams("phosphates")
    self.assertEqual(r, ['phosphates'])

    _, r = self.anagrams2.get_anagrams("phosphor")
    self.assertEqual(r, ['phosphor'])

    _, r = self.anagrams2.get_anagrams("phosphorescent")
    self.assertEqual(r, ['phosphorescent'])

    _, r = self.anagrams2.get_anagrams("phosphoric")
    self.assertEqual(r, ['phosphoric'])

    _, r = self.anagrams2.get_anagrams("phosphorus")
    self.assertEqual(r, ['phosphorus'])

    _, r = self.anagrams2.get_anagrams("photo")
    self.assertEqual(r, ['photo'])

    _, r = self.anagrams2.get_anagrams("photocopied")
    self.assertEqual(r, ['photocopied'])

    _, r = self.anagrams2.get_anagrams("photocopier")
    self.assertEqual(r, ['photocopier'])

    _, r = self.anagrams2.get_anagrams("photocopiers")
    self.assertEqual(r, ['photocopiers'])

    _, r = self.anagrams2.get_anagrams("photocopies")
    self.assertEqual(r, ['photocopies'])

    _, r = self.anagrams2.get_anagrams("photocopy")
    self.assertEqual(r, ['photocopy'])

    _, r = self.anagrams2.get_anagrams("photocopying")
    self.assertEqual(r, ['photocopying'])

    _, r = self.anagrams2.get_anagrams("photodiode")
    self.assertEqual(r, ['photodiode'])

    _, r = self.anagrams2.get_anagrams("photodiodes")
    self.assertEqual(r, ['photodiodes'])

    _, r = self.anagrams2.get_anagrams("photogenic")
    self.assertEqual(r, ['photogenic'])

    _, r = self.anagrams2.get_anagrams("photograph")
    self.assertEqual(r, ['photograph'])

    _, r = self.anagrams2.get_anagrams("photographed")
    self.assertEqual(r, ['photographed'])

    _, r = self.anagrams2.get_anagrams("photographer")
    self.assertEqual(r, ['photographer'])

    _, r = self.anagrams2.get_anagrams("photographers")
    self.assertEqual(r, ['photographers'])

    _, r = self.anagrams2.get_anagrams("photographic")
    self.assertEqual(r, ['photographic'])

    _, r = self.anagrams2.get_anagrams("photographing")
    self.assertEqual(r, ['photographing'])

    _, r = self.anagrams2.get_anagrams("photographs")
    self.assertEqual(r, ['photographs'])

    _, r = self.anagrams2.get_anagrams("photography")
    self.assertEqual(r, ['photography'])

    _, r = self.anagrams2.get_anagrams("photon")
    self.assertEqual(r, ['photon'])

    _, r = self.anagrams2.get_anagrams("photos")
    self.assertEqual(r, ['photos'])

    _, r = self.anagrams2.get_anagrams("photosensitive")
    self.assertEqual(r, ['photosensitive'])

    _, r = self.anagrams2.get_anagrams("phototypesetter")
    self.assertEqual(r, ['phototypesetter'])

    _, r = self.anagrams2.get_anagrams("phototypesetters")
    self.assertEqual(r, ['phototypesetters'])

    _, r = self.anagrams2.get_anagrams("phrase")
    self.assertEqual(r, ['phaser', 'phrase', 'shaper', 'sharpe'])

    _, r = self.anagrams2.get_anagrams("phrased")
    self.assertEqual(r, ['phrased', 'pradesh', 'shepard'])

    _, r = self.anagrams2.get_anagrams("phraseology")
    self.assertEqual(r, ['phraseology'])

    _, r = self.anagrams2.get_anagrams("phrases")
    self.assertEqual(r, ['phasers', 'phrases', 'shapers'])

    _, r = self.anagrams2.get_anagrams("phrasing")
    self.assertEqual(r, ['phrasing'])

    _, r = self.anagrams2.get_anagrams("phrasings")
    self.assertEqual(r, ['phrasings'])

    _, r = self.anagrams2.get_anagrams("phyla")
    self.assertEqual(r, ['haply', 'phyla'])

    _, r = self.anagrams2.get_anagrams("phyllis")
    self.assertEqual(r, ['phyllis'])

    _, r = self.anagrams2.get_anagrams("phylum")
    self.assertEqual(r, ['phylum'])

    _, r = self.anagrams2.get_anagrams("physic")
    self.assertEqual(r, ['physic'])

    _, r = self.anagrams2.get_anagrams("physical")
    self.assertEqual(r, ['physical'])

    _, r = self.anagrams2.get_anagrams("physically")
    self.assertEqual(r, ['physically'])

    _, r = self.anagrams2.get_anagrams("physicalness")
    self.assertEqual(r, ['physicalness'])

    _, r = self.anagrams2.get_anagrams("physicals")
    self.assertEqual(r, ['physicals'])

    _, r = self.anagrams2.get_anagrams("physician")
    self.assertEqual(r, ['physician'])

    _, r = self.anagrams2.get_anagrams("physicians")
    self.assertEqual(r, ['physicians'])

    _, r = self.anagrams2.get_anagrams("physicist")
    self.assertEqual(r, ['physicist'])

    _, r = self.anagrams2.get_anagrams("physicists")
    self.assertEqual(r, ['physicists'])

    _, r = self.anagrams2.get_anagrams("physics")
    self.assertEqual(r, ['physics'])

    _, r = self.anagrams2.get_anagrams("physiological")
    self.assertEqual(r, ['physiological'])

    _, r = self.anagrams2.get_anagrams("physiologically")
    self.assertEqual(r, ['physiologically'])

    _, r = self.anagrams2.get_anagrams("physiology")
    self.assertEqual(r, ['physiology'])

    _, r = self.anagrams2.get_anagrams("physiotherapist")
    self.assertEqual(r, ['physiotherapist'])

    _, r = self.anagrams2.get_anagrams("physiotherapy")
    self.assertEqual(r, ['physiotherapy'])

    _, r = self.anagrams2.get_anagrams("physique")
    self.assertEqual(r, ['physique'])

    _, r = self.anagrams2.get_anagrams("phytoplankton")
    self.assertEqual(r, ['phytoplankton'])

    _, r = self.anagrams2.get_anagrams("pi")
    self.assertEqual(r, ['pi'])

    _, r = self.anagrams2.get_anagrams("pianist")
    self.assertEqual(r, ['pianist'])

    _, r = self.anagrams2.get_anagrams("piano")
    self.assertEqual(r, ['piano'])

    _, r = self.anagrams2.get_anagrams("pianos")
    self.assertEqual(r, ['pianos'])

    _, r = self.anagrams2.get_anagrams("pica")
    self.assertEqual(r, ['pica'])

    _, r = self.anagrams2.get_anagrams("picas")
    self.assertEqual(r, ['aspic', 'picas', 'spica'])

    _, r = self.anagrams2.get_anagrams("picasso")
    self.assertEqual(r, ['picasso'])

    _, r = self.anagrams2.get_anagrams("picayune")
    self.assertEqual(r, ['picayune'])

    _, r = self.anagrams2.get_anagrams("piccadilly")
    self.assertEqual(r, ['piccadilly'])

    _, r = self.anagrams2.get_anagrams("piccolo")
    self.assertEqual(r, ['piccolo'])

    _, r = self.anagrams2.get_anagrams("pick")
    self.assertEqual(r, ['pick'])

    _, r = self.anagrams2.get_anagrams("pickaxe")
    self.assertEqual(r, ['pickaxe'])

    _, r = self.anagrams2.get_anagrams("picked")
    self.assertEqual(r, ['picked'])

    _, r = self.anagrams2.get_anagrams("picker")
    self.assertEqual(r, ['picker'])

    _, r = self.anagrams2.get_anagrams("pickering")
    self.assertEqual(r, ['pickering'])

    _, r = self.anagrams2.get_anagrams("pickers")
    self.assertEqual(r, ['pickers'])

    _, r = self.anagrams2.get_anagrams("picket")
    self.assertEqual(r, ['picket'])

    _, r = self.anagrams2.get_anagrams("picketed")
    self.assertEqual(r, ['picketed'])

    _, r = self.anagrams2.get_anagrams("picketer")
    self.assertEqual(r, ['picketer'])

    _, r = self.anagrams2.get_anagrams("picketers")
    self.assertEqual(r, ['picketers'])

    _, r = self.anagrams2.get_anagrams("picketing")
    self.assertEqual(r, ['picketing'])

    _, r = self.anagrams2.get_anagrams("pickets")
    self.assertEqual(r, ['pickets', 'skeptic'])

    _, r = self.anagrams2.get_anagrams("pickett")
    self.assertEqual(r, ['pickett'])

    _, r = self.anagrams2.get_anagrams("pickford")
    self.assertEqual(r, ['pickford'])

    _, r = self.anagrams2.get_anagrams("picking")
    self.assertEqual(r, ['picking'])

    _, r = self.anagrams2.get_anagrams("pickings")
    self.assertEqual(r, ['pickings'])

    _, r = self.anagrams2.get_anagrams("pickle")
    self.assertEqual(r, ['pickle'])

    _, r = self.anagrams2.get_anagrams("pickled")
    self.assertEqual(r, ['pickled'])

    _, r = self.anagrams2.get_anagrams("pickles")
    self.assertEqual(r, ['pickles'])

    _, r = self.anagrams2.get_anagrams("pickling")
    self.assertEqual(r, ['pickling'])

    _, r = self.anagrams2.get_anagrams("pickman")
    self.assertEqual(r, ['pickman'])

    _, r = self.anagrams2.get_anagrams("picks")
    self.assertEqual(r, ['picks'])

    _, r = self.anagrams2.get_anagrams("pickup")
    self.assertEqual(r, ['pickup'])

    _, r = self.anagrams2.get_anagrams("pickups")
    self.assertEqual(r, ['pickups'])

    _, r = self.anagrams2.get_anagrams("picky")
    self.assertEqual(r, ['picky'])

    _, r = self.anagrams2.get_anagrams("picnic")
    self.assertEqual(r, ['picnic'])

    _, r = self.anagrams2.get_anagrams("picnicked")
    self.assertEqual(r, ['picnicked'])

    _, r = self.anagrams2.get_anagrams("picnicking")
    self.assertEqual(r, ['picnicking'])

    _, r = self.anagrams2.get_anagrams("picnics")
    self.assertEqual(r, ['picnics'])

    _, r = self.anagrams2.get_anagrams("picofarad")
    self.assertEqual(r, ['picofarad'])

    _, r = self.anagrams2.get_anagrams("picojoule")
    self.assertEqual(r, ['picojoule'])

    _, r = self.anagrams2.get_anagrams("picosecond")
    self.assertEqual(r, ['picosecond'])

    _, r = self.anagrams2.get_anagrams("pict")
    self.assertEqual(r, ['pict'])

    _, r = self.anagrams2.get_anagrams("pictorial")
    self.assertEqual(r, ['pictorial'])

    _, r = self.anagrams2.get_anagrams("pictorially")
    self.assertEqual(r, ['pictorially'])

    _, r = self.anagrams2.get_anagrams("picture")
    self.assertEqual(r, ['picture'])

    _, r = self.anagrams2.get_anagrams("pictured")
    self.assertEqual(r, ['pictured'])

    _, r = self.anagrams2.get_anagrams("pictures")
    self.assertEqual(r, ['pictures'])

    _, r = self.anagrams2.get_anagrams("picturesque")
    self.assertEqual(r, ['picturesque'])

    _, r = self.anagrams2.get_anagrams("picturesqueness")
    self.assertEqual(r, ['picturesqueness'])

    _, r = self.anagrams2.get_anagrams("picturing")
    self.assertEqual(r, ['picturing'])

    _, r = self.anagrams2.get_anagrams("piddle")
    self.assertEqual(r, ['piddle'])

    _, r = self.anagrams2.get_anagrams("pidgin")
    self.assertEqual(r, ['pidgin'])

    _, r = self.anagrams2.get_anagrams("pie")
    self.assertEqual(r, ['pie'])

    _, r = self.anagrams2.get_anagrams("piece")
    self.assertEqual(r, ['piece'])

    _, r = self.anagrams2.get_anagrams("pieced")
    self.assertEqual(r, ['pieced'])

    _, r = self.anagrams2.get_anagrams("piecemeal")
    self.assertEqual(r, ['piecemeal'])

    _, r = self.anagrams2.get_anagrams("pieces")
    self.assertEqual(r, ['pieces', 'specie'])

    _, r = self.anagrams2.get_anagrams("piecewise")
    self.assertEqual(r, ['piecewise'])

    _, r = self.anagrams2.get_anagrams("piecing")
    self.assertEqual(r, ['piecing'])

    _, r = self.anagrams2.get_anagrams("piedfort")
    self.assertEqual(r, ['piedfort', 'profited'])

    _, r = self.anagrams2.get_anagrams("piedmont")
    self.assertEqual(r, ['piedmont'])

    _, r = self.anagrams2.get_anagrams("pier")
    self.assertEqual(r, ['pier', 'ripe'])

    _, r = self.anagrams2.get_anagrams("pierce")
    self.assertEqual(r, ['pierce', 'recipe'])

    _, r = self.anagrams2.get_anagrams("pierced")
    self.assertEqual(r, ['pierced'])

    _, r = self.anagrams2.get_anagrams("pierces")
    self.assertEqual(r, ['pierces', 'precise', 'recipes'])

    _, r = self.anagrams2.get_anagrams("piercing")
    self.assertEqual(r, ['piercing'])

    _, r = self.anagrams2.get_anagrams("pierre")
    self.assertEqual(r, ['pierre'])

    _, r = self.anagrams2.get_anagrams("piers")
    self.assertEqual(r, ['piers', 'spire'])

    _, r = self.anagrams2.get_anagrams("pierson")
    self.assertEqual(r, ['pierson'])

    _, r = self.anagrams2.get_anagrams("pies")
    self.assertEqual(r, ['pies'])

    _, r = self.anagrams2.get_anagrams("piety")
    self.assertEqual(r, ['piety'])

    _, r = self.anagrams2.get_anagrams("piezoelectric")
    self.assertEqual(r, ['piezoelectric'])

    _, r = self.anagrams2.get_anagrams("pig")
    self.assertEqual(r, ['pig'])

    _, r = self.anagrams2.get_anagrams("pigeon")
    self.assertEqual(r, ['pigeon'])

    _, r = self.anagrams2.get_anagrams("pigeonhole")
    self.assertEqual(r, ['pigeonhole'])

    _, r = self.anagrams2.get_anagrams("pigeons")
    self.assertEqual(r, ['pigeons'])

    _, r = self.anagrams2.get_anagrams("piggish")
    self.assertEqual(r, ['piggish'])

    _, r = self.anagrams2.get_anagrams("piggy")
    self.assertEqual(r, ['piggy'])

    _, r = self.anagrams2.get_anagrams("piggyback")
    self.assertEqual(r, ['piggyback'])

    _, r = self.anagrams2.get_anagrams("piggybacked")
    self.assertEqual(r, ['piggybacked'])

    _, r = self.anagrams2.get_anagrams("piggybacking")
    self.assertEqual(r, ['piggybacking'])

    _, r = self.anagrams2.get_anagrams("piggybacks")
    self.assertEqual(r, ['piggybacks'])

    _, r = self.anagrams2.get_anagrams("pigment")
    self.assertEqual(r, ['pigment'])

    _, r = self.anagrams2.get_anagrams("pigmentation")
    self.assertEqual(r, ['pigmentation'])

    _, r = self.anagrams2.get_anagrams("pigmented")
    self.assertEqual(r, ['pigmented'])

    _, r = self.anagrams2.get_anagrams("pigments")
    self.assertEqual(r, ['pigments'])

    _, r = self.anagrams2.get_anagrams("pigpen")
    self.assertEqual(r, ['pigpen'])

    _, r = self.anagrams2.get_anagrams("pigs")
    self.assertEqual(r, ['pigs'])

    _, r = self.anagrams2.get_anagrams("pigskin")
    self.assertEqual(r, ['pigskin'])

    _, r = self.anagrams2.get_anagrams("pigtail")
    self.assertEqual(r, ['pigtail'])

    _, r = self.anagrams2.get_anagrams("pike")
    self.assertEqual(r, ['pike'])

    _, r = self.anagrams2.get_anagrams("piker")
    self.assertEqual(r, ['piker'])

    _, r = self.anagrams2.get_anagrams("pikes")
    self.assertEqual(r, ['pikes', 'spike'])

    _, r = self.anagrams2.get_anagrams("pilate")
    self.assertEqual(r, ['pilate'])

    _, r = self.anagrams2.get_anagrams("pile")
    self.assertEqual(r, ['pile'])

    _, r = self.anagrams2.get_anagrams("piled")
    self.assertEqual(r, ['piled', 'plied'])

    _, r = self.anagrams2.get_anagrams("pilers")
    self.assertEqual(r, ['perils', 'pilers', 'pliers'])

    _, r = self.anagrams2.get_anagrams("piles")
    self.assertEqual(r, ['piles', 'plies'])

    _, r = self.anagrams2.get_anagrams("pilfer")
    self.assertEqual(r, ['pilfer'])

    _, r = self.anagrams2.get_anagrams("pilferage")
    self.assertEqual(r, ['pilferage'])

    _, r = self.anagrams2.get_anagrams("pilgrim")
    self.assertEqual(r, ['pilgrim'])

    _, r = self.anagrams2.get_anagrams("pilgrimage")
    self.assertEqual(r, ['pilgrimage'])

    _, r = self.anagrams2.get_anagrams("pilgrimages")
    self.assertEqual(r, ['pilgrimages'])

    _, r = self.anagrams2.get_anagrams("pilgrims")
    self.assertEqual(r, ['pilgrims'])

    _, r = self.anagrams2.get_anagrams("piling")
    self.assertEqual(r, ['piling'])

    _, r = self.anagrams2.get_anagrams("pilings")
    self.assertEqual(r, ['lisping', 'pilings'])

    _, r = self.anagrams2.get_anagrams("pill")
    self.assertEqual(r, ['pill'])

    _, r = self.anagrams2.get_anagrams("pillage")
    self.assertEqual(r, ['pillage'])

    _, r = self.anagrams2.get_anagrams("pillaged")
    self.assertEqual(r, ['pillaged'])

    _, r = self.anagrams2.get_anagrams("pillar")
    self.assertEqual(r, ['pillar'])

    _, r = self.anagrams2.get_anagrams("pillared")
    self.assertEqual(r, ['pillared'])

    _, r = self.anagrams2.get_anagrams("pillars")
    self.assertEqual(r, ['pillars'])

    _, r = self.anagrams2.get_anagrams("pillory")
    self.assertEqual(r, ['pillory'])

    _, r = self.anagrams2.get_anagrams("pillow")
    self.assertEqual(r, ['pillow'])

    _, r = self.anagrams2.get_anagrams("pillows")
    self.assertEqual(r, ['pillows'])

    _, r = self.anagrams2.get_anagrams("pills")
    self.assertEqual(r, ['pills', 'spill'])

    _, r = self.anagrams2.get_anagrams("pillsbury")
    self.assertEqual(r, ['pillsbury'])

    _, r = self.anagrams2.get_anagrams("pilot")
    self.assertEqual(r, ['pilot'])

    _, r = self.anagrams2.get_anagrams("piloting")
    self.assertEqual(r, ['piloting'])

    _, r = self.anagrams2.get_anagrams("pilots")
    self.assertEqual(r, ['pilots', 'pistol'])

    _, r = self.anagrams2.get_anagrams("pimp")
    self.assertEqual(r, ['pimp'])

    _, r = self.anagrams2.get_anagrams("pimple")
    self.assertEqual(r, ['pimple'])

    _, r = self.anagrams2.get_anagrams("pin")
    self.assertEqual(r, ['nip', 'pin'])

    _, r = self.anagrams2.get_anagrams("pinafore")
    self.assertEqual(r, ['pinafore'])

    _, r = self.anagrams2.get_anagrams("pinball")
    self.assertEqual(r, ['pinball'])

    _, r = self.anagrams2.get_anagrams("pinch")
    self.assertEqual(r, ['pinch'])

    _, r = self.anagrams2.get_anagrams("pinched")
    self.assertEqual(r, ['pinched'])

    _, r = self.anagrams2.get_anagrams("pinches")
    self.assertEqual(r, ['pinches'])

    _, r = self.anagrams2.get_anagrams("pinching")
    self.assertEqual(r, ['pinching'])

    _, r = self.anagrams2.get_anagrams("pincushion")
    self.assertEqual(r, ['pincushion'])

    _, r = self.anagrams2.get_anagrams("pine")
    self.assertEqual(r, ['pine'])

    _, r = self.anagrams2.get_anagrams("pineapple")
    self.assertEqual(r, ['pineapple'])

    _, r = self.anagrams2.get_anagrams("pineapples")
    self.assertEqual(r, ['pineapples'])

    _, r = self.anagrams2.get_anagrams("pined")
    self.assertEqual(r, ['pined'])

    _, r = self.anagrams2.get_anagrams("pinehurst")
    self.assertEqual(r, ['pinehurst'])

    _, r = self.anagrams2.get_anagrams("pines")
    self.assertEqual(r, ['penis', 'pines', 'snipe', 'spine'])

    _, r = self.anagrams2.get_anagrams("ping")
    self.assertEqual(r, ['ping'])

    _, r = self.anagrams2.get_anagrams("pinhead")
    self.assertEqual(r, ['pinhead'])

    _, r = self.anagrams2.get_anagrams("pinhole")
    self.assertEqual(r, ['pinhole'])

    _, r = self.anagrams2.get_anagrams("pining")
    self.assertEqual(r, ['pining'])

    _, r = self.anagrams2.get_anagrams("pinion")
    self.assertEqual(r, ['pinion'])

    _, r = self.anagrams2.get_anagrams("pink")
    self.assertEqual(r, ['pink'])

    _, r = self.anagrams2.get_anagrams("pinker")
    self.assertEqual(r, ['pinker'])

    _, r = self.anagrams2.get_anagrams("pinkest")
    self.assertEqual(r, ['pinkest'])

    _, r = self.anagrams2.get_anagrams("pinkie")
    self.assertEqual(r, ['pinkie'])

    _, r = self.anagrams2.get_anagrams("pinkish")
    self.assertEqual(r, ['kinship', 'pinkish'])

    _, r = self.anagrams2.get_anagrams("pinkly")
    self.assertEqual(r, ['pinkly'])

    _, r = self.anagrams2.get_anagrams("pinkness")
    self.assertEqual(r, ['pinkness'])

    _, r = self.anagrams2.get_anagrams("pinks")
    self.assertEqual(r, ['pinks'])

    _, r = self.anagrams2.get_anagrams("pinnacle")
    self.assertEqual(r, ['pinnacle'])

    _, r = self.anagrams2.get_anagrams("pinnacles")
    self.assertEqual(r, ['pinnacles'])

    _, r = self.anagrams2.get_anagrams("pinned")
    self.assertEqual(r, ['pinned'])

    _, r = self.anagrams2.get_anagrams("pinning")
    self.assertEqual(r, ['pinning'])

    _, r = self.anagrams2.get_anagrams("pinnings")
    self.assertEqual(r, ['pinnings', 'spinning'])

    _, r = self.anagrams2.get_anagrams("pinochle")
    self.assertEqual(r, ['pinochle'])

    _, r = self.anagrams2.get_anagrams("pinpoint")
    self.assertEqual(r, ['pinpoint'])

    _, r = self.anagrams2.get_anagrams("pinpointing")
    self.assertEqual(r, ['pinpointing'])

    _, r = self.anagrams2.get_anagrams("pinpoints")
    self.assertEqual(r, ['pinpoints'])

    _, r = self.anagrams2.get_anagrams("pins")
    self.assertEqual(r, ['nips', 'pins', 'snip', 'spin'])

    _, r = self.anagrams2.get_anagrams("pinscher")
    self.assertEqual(r, ['pinscher'])

    _, r = self.anagrams2.get_anagrams("pinsky")
    self.assertEqual(r, ['pinsky'])

    _, r = self.anagrams2.get_anagrams("pint")
    self.assertEqual(r, ['pint'])

    _, r = self.anagrams2.get_anagrams("pinto")
    self.assertEqual(r, ['pinto', 'point'])

    _, r = self.anagrams2.get_anagrams("pints")
    self.assertEqual(r, ['pints'])

    _, r = self.anagrams2.get_anagrams("pinwheel")
    self.assertEqual(r, ['pinwheel'])

    _, r = self.anagrams2.get_anagrams("pion")
    self.assertEqual(r, ['pion'])

    _, r = self.anagrams2.get_anagrams("pioneer")
    self.assertEqual(r, ['pioneer'])

    _, r = self.anagrams2.get_anagrams("pioneered")
    self.assertEqual(r, ['pioneered'])

    _, r = self.anagrams2.get_anagrams("pioneering")
    self.assertEqual(r, ['pioneering'])

    _, r = self.anagrams2.get_anagrams("pioneers")
    self.assertEqual(r, ['pioneers'])

    _, r = self.anagrams2.get_anagrams("piotr")
    self.assertEqual(r, ['piotr'])

    _, r = self.anagrams2.get_anagrams("pious")
    self.assertEqual(r, ['pious'])

    _, r = self.anagrams2.get_anagrams("piously")
    self.assertEqual(r, ['piously'])

    _, r = self.anagrams2.get_anagrams("pip")
    self.assertEqual(r, ['pip'])

    _, r = self.anagrams2.get_anagrams("pipe")
    self.assertEqual(r, ['pipe'])

    _, r = self.anagrams2.get_anagrams("piped")
    self.assertEqual(r, ['piped'])

    _, r = self.anagrams2.get_anagrams("pipeline")
    self.assertEqual(r, ['pipeline'])

    _, r = self.anagrams2.get_anagrams("pipelined")
    self.assertEqual(r, ['pipelined'])

    _, r = self.anagrams2.get_anagrams("pipelines")
    self.assertEqual(r, ['pipelines'])

    _, r = self.anagrams2.get_anagrams("pipelining")
    self.assertEqual(r, ['pipelining'])

    _, r = self.anagrams2.get_anagrams("piper")
    self.assertEqual(r, ['piper'])

    _, r = self.anagrams2.get_anagrams("pipers")
    self.assertEqual(r, ['pipers'])

    _, r = self.anagrams2.get_anagrams("pipes")
    self.assertEqual(r, ['pepsi', 'pipes'])

    _, r = self.anagrams2.get_anagrams("pipestone")
    self.assertEqual(r, ['pipestone'])

    _, r = self.anagrams2.get_anagrams("pipette")
    self.assertEqual(r, ['pipette'])

    _, r = self.anagrams2.get_anagrams("piping")
    self.assertEqual(r, ['piping'])

    _, r = self.anagrams2.get_anagrams("pique")
    self.assertEqual(r, ['equip', 'pique'])

    _, r = self.anagrams2.get_anagrams("piracy")
    self.assertEqual(r, ['piracy'])

    _, r = self.anagrams2.get_anagrams("piraeus")
    self.assertEqual(r, ['piraeus'])

    _, r = self.anagrams2.get_anagrams("pirate")
    self.assertEqual(r, ['pirate'])

    _, r = self.anagrams2.get_anagrams("pirates")
    self.assertEqual(r, ['parties', 'pirates'])

    _, r = self.anagrams2.get_anagrams("pisa")
    self.assertEqual(r, ['pisa'])

    _, r = self.anagrams2.get_anagrams("piscataway")
    self.assertEqual(r, ['piscataway'])

    _, r = self.anagrams2.get_anagrams("pisces")
    self.assertEqual(r, ['pisces', 'spices'])

    _, r = self.anagrams2.get_anagrams("piss")
    self.assertEqual(r, ['piss', 'sips'])

    _, r = self.anagrams2.get_anagrams("pistachio")
    self.assertEqual(r, ['pistachio'])

    _, r = self.anagrams2.get_anagrams("pistil")
    self.assertEqual(r, ['pistil'])

    _, r = self.anagrams2.get_anagrams("pistils")
    self.assertEqual(r, ['pistils'])

    _, r = self.anagrams2.get_anagrams("pistol")
    self.assertEqual(r, ['pilots', 'pistol'])

    _, r = self.anagrams2.get_anagrams("pistols")
    self.assertEqual(r, ['pistols'])

    _, r = self.anagrams2.get_anagrams("piston")
    self.assertEqual(r, ['piston', 'points'])

    _, r = self.anagrams2.get_anagrams("pistons")
    self.assertEqual(r, ['pistons'])

    _, r = self.anagrams2.get_anagrams("pit")
    self.assertEqual(r, ['pit', 'tip'])

    _, r = self.anagrams2.get_anagrams("pitch")
    self.assertEqual(r, ['pitch'])

    _, r = self.anagrams2.get_anagrams("pitched")
    self.assertEqual(r, ['pitched'])

    _, r = self.anagrams2.get_anagrams("pitcher")
    self.assertEqual(r, ['pitcher'])

    _, r = self.anagrams2.get_anagrams("pitchers")
    self.assertEqual(r, ['pitchers'])

    _, r = self.anagrams2.get_anagrams("pitches")
    self.assertEqual(r, ['pitches'])

    _, r = self.anagrams2.get_anagrams("pitchfork")
    self.assertEqual(r, ['pitchfork'])

    _, r = self.anagrams2.get_anagrams("pitching")
    self.assertEqual(r, ['pitching'])

    _, r = self.anagrams2.get_anagrams("piteous")
    self.assertEqual(r, ['piteous'])

    _, r = self.anagrams2.get_anagrams("piteously")
    self.assertEqual(r, ['piteously'])

    _, r = self.anagrams2.get_anagrams("pitfall")
    self.assertEqual(r, ['pitfall'])

    _, r = self.anagrams2.get_anagrams("pitfalls")
    self.assertEqual(r, ['pitfalls'])

    _, r = self.anagrams2.get_anagrams("pith")
    self.assertEqual(r, ['pith'])

    _, r = self.anagrams2.get_anagrams("pithed")
    self.assertEqual(r, ['pithed'])

    _, r = self.anagrams2.get_anagrams("pithes")
    self.assertEqual(r, ['pithes'])

    _, r = self.anagrams2.get_anagrams("pithier")
    self.assertEqual(r, ['pithier'])

    _, r = self.anagrams2.get_anagrams("pithiest")
    self.assertEqual(r, ['pithiest'])

    _, r = self.anagrams2.get_anagrams("pithiness")
    self.assertEqual(r, ['pithiness'])

    _, r = self.anagrams2.get_anagrams("pithing")
    self.assertEqual(r, ['pithing'])

    _, r = self.anagrams2.get_anagrams("pithy")
    self.assertEqual(r, ['pithy'])

    _, r = self.anagrams2.get_anagrams("pitiable")
    self.assertEqual(r, ['pitiable'])

    _, r = self.anagrams2.get_anagrams("pitied")
    self.assertEqual(r, ['pitied'])

    _, r = self.anagrams2.get_anagrams("pitier")
    self.assertEqual(r, ['pitier'])

    _, r = self.anagrams2.get_anagrams("pitiers")
    self.assertEqual(r, ['pitiers'])

    _, r = self.anagrams2.get_anagrams("pities")
    self.assertEqual(r, ['pities'])

    _, r = self.anagrams2.get_anagrams("pitiful")
    self.assertEqual(r, ['pitiful'])

    _, r = self.anagrams2.get_anagrams("pitifully")
    self.assertEqual(r, ['pitifully'])

    _, r = self.anagrams2.get_anagrams("pitiless")
    self.assertEqual(r, ['pitiless'])

    _, r = self.anagrams2.get_anagrams("pitilessly")
    self.assertEqual(r, ['pitilessly'])

    _, r = self.anagrams2.get_anagrams("pitney")
    self.assertEqual(r, ['pitney'])

    _, r = self.anagrams2.get_anagrams("pits")
    self.assertEqual(r, ['pits', 'spit', 'tips'])

    _, r = self.anagrams2.get_anagrams("pitt")
    self.assertEqual(r, ['pitt'])

    _, r = self.anagrams2.get_anagrams("pitted")
    self.assertEqual(r, ['pitted'])

    _, r = self.anagrams2.get_anagrams("pittsburgh")
    self.assertEqual(r, ['pittsburgh'])

    _, r = self.anagrams2.get_anagrams("pittsburghers")
    self.assertEqual(r, ['pittsburghers'])

    _, r = self.anagrams2.get_anagrams("pittsfield")
    self.assertEqual(r, ['pittsfield'])

    _, r = self.anagrams2.get_anagrams("pittston")
    self.assertEqual(r, ['pittston'])

    _, r = self.anagrams2.get_anagrams("pituitary")
    self.assertEqual(r, ['pituitary'])

    _, r = self.anagrams2.get_anagrams("pity")
    self.assertEqual(r, ['pity'])

    _, r = self.anagrams2.get_anagrams("pitying")
    self.assertEqual(r, ['pitying'])

    _, r = self.anagrams2.get_anagrams("pityingly")
    self.assertEqual(r, ['pityingly'])

    _, r = self.anagrams2.get_anagrams("pius")
    self.assertEqual(r, ['pius'])

    _, r = self.anagrams2.get_anagrams("pivot")
    self.assertEqual(r, ['pivot'])

    _, r = self.anagrams2.get_anagrams("pivotal")
    self.assertEqual(r, ['pivotal'])

    _, r = self.anagrams2.get_anagrams("pivoting")
    self.assertEqual(r, ['pivoting'])

    _, r = self.anagrams2.get_anagrams("pivots")
    self.assertEqual(r, ['pivots'])

    _, r = self.anagrams2.get_anagrams("pixel")
    self.assertEqual(r, ['pixel'])

    _, r = self.anagrams2.get_anagrams("pixels")
    self.assertEqual(r, ['pixels'])

    _, r = self.anagrams2.get_anagrams("pizarro")
    self.assertEqual(r, ['pizarro'])

    _, r = self.anagrams2.get_anagrams("pizza")
    self.assertEqual(r, ['pizza'])

    _, r = self.anagrams2.get_anagrams("placard")
    self.assertEqual(r, ['placard'])

    _, r = self.anagrams2.get_anagrams("placards")
    self.assertEqual(r, ['placards'])

    _, r = self.anagrams2.get_anagrams("placate")
    self.assertEqual(r, ['placate'])

    _, r = self.anagrams2.get_anagrams("place")
    self.assertEqual(r, ['place'])

    _, r = self.anagrams2.get_anagrams("placebo")
    self.assertEqual(r, ['placebo'])

    _, r = self.anagrams2.get_anagrams("placed")
    self.assertEqual(r, ['placed'])

    _, r = self.anagrams2.get_anagrams("placeholder")
    self.assertEqual(r, ['placeholder'])

    _, r = self.anagrams2.get_anagrams("placement")
    self.assertEqual(r, ['placement'])

    _, r = self.anagrams2.get_anagrams("placements")
    self.assertEqual(r, ['placements'])

    _, r = self.anagrams2.get_anagrams("placenta")
    self.assertEqual(r, ['placenta'])

    _, r = self.anagrams2.get_anagrams("placental")
    self.assertEqual(r, ['placental'])

    _, r = self.anagrams2.get_anagrams("placer")
    self.assertEqual(r, ['parcel', 'placer'])

    _, r = self.anagrams2.get_anagrams("places")
    self.assertEqual(r, ['places'])

    _, r = self.anagrams2.get_anagrams("placid")
    self.assertEqual(r, ['placid'])

    _, r = self.anagrams2.get_anagrams("placidly")
    self.assertEqual(r, ['placidly'])

    _, r = self.anagrams2.get_anagrams("placing")
    self.assertEqual(r, ['placing'])

    _, r = self.anagrams2.get_anagrams("plagiarism")
    self.assertEqual(r, ['plagiarism'])

    _, r = self.anagrams2.get_anagrams("plagiarist")
    self.assertEqual(r, ['plagiarist'])

    _, r = self.anagrams2.get_anagrams("plague")
    self.assertEqual(r, ['plague'])

    _, r = self.anagrams2.get_anagrams("plagued")
    self.assertEqual(r, ['plagued'])

    _, r = self.anagrams2.get_anagrams("plagues")
    self.assertEqual(r, ['plagues'])

    _, r = self.anagrams2.get_anagrams("plaguing")
    self.assertEqual(r, ['plaguing'])

    _, r = self.anagrams2.get_anagrams("plaid")
    self.assertEqual(r, ['plaid'])

    _, r = self.anagrams2.get_anagrams("plaids")
    self.assertEqual(r, ['plaids'])

    _, r = self.anagrams2.get_anagrams("plain")
    self.assertEqual(r, ['plain'])

    _, r = self.anagrams2.get_anagrams("plainer")
    self.assertEqual(r, ['plainer'])

    _, r = self.anagrams2.get_anagrams("plainest")
    self.assertEqual(r, ['panelist', 'plainest'])

    _, r = self.anagrams2.get_anagrams("plainfield")
    self.assertEqual(r, ['plainfield'])

    _, r = self.anagrams2.get_anagrams("plainly")
    self.assertEqual(r, ['plainly'])

    _, r = self.anagrams2.get_anagrams("plainness")
    self.assertEqual(r, ['plainness'])

    _, r = self.anagrams2.get_anagrams("plains")
    self.assertEqual(r, ['plains', 'spinal'])

    _, r = self.anagrams2.get_anagrams("plaintext")
    self.assertEqual(r, ['plaintext'])

    _, r = self.anagrams2.get_anagrams("plaintexts")
    self.assertEqual(r, ['plaintexts'])

    _, r = self.anagrams2.get_anagrams("plaintiff")
    self.assertEqual(r, ['plaintiff'])

    _, r = self.anagrams2.get_anagrams("plaintiffs")
    self.assertEqual(r, ['plaintiffs'])

    _, r = self.anagrams2.get_anagrams("plaintive")
    self.assertEqual(r, ['plaintive'])

    _, r = self.anagrams2.get_anagrams("plaintively")
    self.assertEqual(r, ['plaintively'])

    _, r = self.anagrams2.get_anagrams("plaintiveness")
    self.assertEqual(r, ['plaintiveness'])

    _, r = self.anagrams2.get_anagrams("plainview")
    self.assertEqual(r, ['plainview'])

    _, r = self.anagrams2.get_anagrams("plait")
    self.assertEqual(r, ['plait'])

    _, r = self.anagrams2.get_anagrams("plaits")
    self.assertEqual(r, ['plaits'])

    _, r = self.anagrams2.get_anagrams("plan")
    self.assertEqual(r, ['plan'])

    _, r = self.anagrams2.get_anagrams("planar")
    self.assertEqual(r, ['planar'])

    _, r = self.anagrams2.get_anagrams("planarity")
    self.assertEqual(r, ['planarity'])

    _, r = self.anagrams2.get_anagrams("planck")
    self.assertEqual(r, ['planck'])

    _, r = self.anagrams2.get_anagrams("plane")
    self.assertEqual(r, ['nepal', 'panel', 'penal', 'plane'])

    _, r = self.anagrams2.get_anagrams("planed")
    self.assertEqual(r, ['planed'])

    _, r = self.anagrams2.get_anagrams("planeload")
    self.assertEqual(r, ['planeload'])

    _, r = self.anagrams2.get_anagrams("planer")
    self.assertEqual(r, ['planer'])

    _, r = self.anagrams2.get_anagrams("planers")
    self.assertEqual(r, ['planers'])

    _, r = self.anagrams2.get_anagrams("planes")
    self.assertEqual(r, ['naples', 'panels', 'planes'])

    _, r = self.anagrams2.get_anagrams("planet")
    self.assertEqual(r, ['planet', 'platen'])

    _, r = self.anagrams2.get_anagrams("planetaria")
    self.assertEqual(r, ['planetaria'])

    _, r = self.anagrams2.get_anagrams("planetarium")
    self.assertEqual(r, ['planetarium'])

    _, r = self.anagrams2.get_anagrams("planetary")
    self.assertEqual(r, ['planetary'])

    _, r = self.anagrams2.get_anagrams("planetesimal")
    self.assertEqual(r, ['planetesimal'])

    _, r = self.anagrams2.get_anagrams("planetoid")
    self.assertEqual(r, ['planetoid'])

    _, r = self.anagrams2.get_anagrams("planets")
    self.assertEqual(r, ['planets', 'platens'])

    _, r = self.anagrams2.get_anagrams("planing")
    self.assertEqual(r, ['planing'])

    _, r = self.anagrams2.get_anagrams("plank")
    self.assertEqual(r, ['plank'])

    _, r = self.anagrams2.get_anagrams("planking")
    self.assertEqual(r, ['planking'])

    _, r = self.anagrams2.get_anagrams("planks")
    self.assertEqual(r, ['planks'])

    _, r = self.anagrams2.get_anagrams("plankton")
    self.assertEqual(r, ['plankton'])

    _, r = self.anagrams2.get_anagrams("planned")
    self.assertEqual(r, ['planned'])

    _, r = self.anagrams2.get_anagrams("planner")
    self.assertEqual(r, ['planner'])

    _, r = self.anagrams2.get_anagrams("planners")
    self.assertEqual(r, ['planners'])

    _, r = self.anagrams2.get_anagrams("planning")
    self.assertEqual(r, ['planning'])

    _, r = self.anagrams2.get_anagrams("planoconcave")
    self.assertEqual(r, ['planoconcave'])

    _, r = self.anagrams2.get_anagrams("planoconvex")
    self.assertEqual(r, ['planoconvex'])

    _, r = self.anagrams2.get_anagrams("plans")
    self.assertEqual(r, ['plans'])

    _, r = self.anagrams2.get_anagrams("plant")
    self.assertEqual(r, ['plant'])

    _, r = self.anagrams2.get_anagrams("plantation")
    self.assertEqual(r, ['plantation'])

    _, r = self.anagrams2.get_anagrams("plantations")
    self.assertEqual(r, ['plantations'])

    _, r = self.anagrams2.get_anagrams("planted")
    self.assertEqual(r, ['planted'])

    _, r = self.anagrams2.get_anagrams("planter")
    self.assertEqual(r, ['planter'])

    _, r = self.anagrams2.get_anagrams("planters")
    self.assertEqual(r, ['planters'])

    _, r = self.anagrams2.get_anagrams("planting")
    self.assertEqual(r, ['planting'])

    _, r = self.anagrams2.get_anagrams("plantings")
    self.assertEqual(r, ['plantings'])

    _, r = self.anagrams2.get_anagrams("plants")
    self.assertEqual(r, ['plants'])

    _, r = self.anagrams2.get_anagrams("plaque")
    self.assertEqual(r, ['plaque'])

    _, r = self.anagrams2.get_anagrams("plasma")
    self.assertEqual(r, ['plasma'])

    _, r = self.anagrams2.get_anagrams("plaster")
    self.assertEqual(r, ['plaster', 'stapler'])

    _, r = self.anagrams2.get_anagrams("plastered")
    self.assertEqual(r, ['plastered'])

    _, r = self.anagrams2.get_anagrams("plasterer")
    self.assertEqual(r, ['plasterer'])

    _, r = self.anagrams2.get_anagrams("plastering")
    self.assertEqual(r, ['plastering'])

    _, r = self.anagrams2.get_anagrams("plasters")
    self.assertEqual(r, ['plasters'])

    _, r = self.anagrams2.get_anagrams("plastic")
    self.assertEqual(r, ['plastic'])

    _, r = self.anagrams2.get_anagrams("plasticity")
    self.assertEqual(r, ['plasticity'])

    _, r = self.anagrams2.get_anagrams("plastics")
    self.assertEqual(r, ['plastics'])

    _, r = self.anagrams2.get_anagrams("plate")
    self.assertEqual(r, ['leapt', 'petal', 'plate', 'pleat'])

    _, r = self.anagrams2.get_anagrams("plateau")
    self.assertEqual(r, ['plateau'])

    _, r = self.anagrams2.get_anagrams("plateaus")
    self.assertEqual(r, ['plateaus'])

    _, r = self.anagrams2.get_anagrams("plated")
    self.assertEqual(r, ['plated'])

    _, r = self.anagrams2.get_anagrams("platelet")
    self.assertEqual(r, ['platelet'])

    _, r = self.anagrams2.get_anagrams("platelets")
    self.assertEqual(r, ['platelets'])

    _, r = self.anagrams2.get_anagrams("platen")
    self.assertEqual(r, ['planet', 'platen'])

    _, r = self.anagrams2.get_anagrams("platens")
    self.assertEqual(r, ['planets', 'platens'])

    _, r = self.anagrams2.get_anagrams("plates")
    self.assertEqual(r, ['palest', 'pastel', 'petals', 'plates', 'staple'])

    _, r = self.anagrams2.get_anagrams("platform")
    self.assertEqual(r, ['platform'])

    _, r = self.anagrams2.get_anagrams("platforms")
    self.assertEqual(r, ['platforms'])

    _, r = self.anagrams2.get_anagrams("plating")
    self.assertEqual(r, ['plating'])

    _, r = self.anagrams2.get_anagrams("platinum")
    self.assertEqual(r, ['platinum'])

    _, r = self.anagrams2.get_anagrams("platitude")
    self.assertEqual(r, ['platitude'])

    _, r = self.anagrams2.get_anagrams("plato")
    self.assertEqual(r, ['plato'])

    _, r = self.anagrams2.get_anagrams("platonic")
    self.assertEqual(r, ['platonic'])

    _, r = self.anagrams2.get_anagrams("platonism")
    self.assertEqual(r, ['platonism'])

    _, r = self.anagrams2.get_anagrams("platonist")
    self.assertEqual(r, ['platonist'])

    _, r = self.anagrams2.get_anagrams("platoon")
    self.assertEqual(r, ['platoon'])

    _, r = self.anagrams2.get_anagrams("platte")
    self.assertEqual(r, ['platte'])

    _, r = self.anagrams2.get_anagrams("platter")
    self.assertEqual(r, ['platter'])

    _, r = self.anagrams2.get_anagrams("platters")
    self.assertEqual(r, ['platters'])

    _, r = self.anagrams2.get_anagrams("platteville")
    self.assertEqual(r, ['platteville'])

    _, r = self.anagrams2.get_anagrams("plausibility")
    self.assertEqual(r, ['plausibility'])

    _, r = self.anagrams2.get_anagrams("plausible")
    self.assertEqual(r, ['plausible'])

    _, r = self.anagrams2.get_anagrams("play")
    self.assertEqual(r, ['play'])

    _, r = self.anagrams2.get_anagrams("playable")
    self.assertEqual(r, ['playable'])

    _, r = self.anagrams2.get_anagrams("playback")
    self.assertEqual(r, ['playback'])

    _, r = self.anagrams2.get_anagrams("playboy")
    self.assertEqual(r, ['playboy'])

    _, r = self.anagrams2.get_anagrams("played")
    self.assertEqual(r, ['played'])

    _, r = self.anagrams2.get_anagrams("player")
    self.assertEqual(r, ['parley', 'pearly', 'player', 'replay'])

    _, r = self.anagrams2.get_anagrams("players")
    self.assertEqual(r, ['parsley', 'players', 'replays', 'sparely'])

    _, r = self.anagrams2.get_anagrams("playful")
    self.assertEqual(r, ['playful'])

    _, r = self.anagrams2.get_anagrams("playfully")
    self.assertEqual(r, ['playfully'])

    _, r = self.anagrams2.get_anagrams("playfulness")
    self.assertEqual(r, ['playfulness'])

    _, r = self.anagrams2.get_anagrams("playground")
    self.assertEqual(r, ['playground'])

    _, r = self.anagrams2.get_anagrams("playgrounds")
    self.assertEqual(r, ['playgrounds'])

    _, r = self.anagrams2.get_anagrams("playhouse")
    self.assertEqual(r, ['playhouse'])

    _, r = self.anagrams2.get_anagrams("playing")
    self.assertEqual(r, ['playing'])

    _, r = self.anagrams2.get_anagrams("playmate")
    self.assertEqual(r, ['playmate'])

    _, r = self.anagrams2.get_anagrams("playmates")
    self.assertEqual(r, ['playmates'])

    _, r = self.anagrams2.get_anagrams("playoff")
    self.assertEqual(r, ['playoff'])

    _, r = self.anagrams2.get_anagrams("playroom")
    self.assertEqual(r, ['playroom'])

    _, r = self.anagrams2.get_anagrams("plays")
    self.assertEqual(r, ['palsy', 'plays'])

    _, r = self.anagrams2.get_anagrams("plaything")
    self.assertEqual(r, ['plaything'])

    _, r = self.anagrams2.get_anagrams("playthings")
    self.assertEqual(r, ['playthings'])

    _, r = self.anagrams2.get_anagrams("playtime")
    self.assertEqual(r, ['playtime'])

    _, r = self.anagrams2.get_anagrams("playwright")
    self.assertEqual(r, ['playwright'])

    _, r = self.anagrams2.get_anagrams("playwrights")
    self.assertEqual(r, ['playwrights'])

    _, r = self.anagrams2.get_anagrams("playwriting")
    self.assertEqual(r, ['playwriting'])

    _, r = self.anagrams2.get_anagrams("plaza")
    self.assertEqual(r, ['plaza'])

    _, r = self.anagrams2.get_anagrams("plea")
    self.assertEqual(r, ['leap', 'pale', 'peal', 'plea'])

    _, r = self.anagrams2.get_anagrams("plead")
    self.assertEqual(r, ['paled', 'pedal', 'plead'])

    _, r = self.anagrams2.get_anagrams("pleaded")
    self.assertEqual(r, ['pleaded'])

    _, r = self.anagrams2.get_anagrams("pleader")
    self.assertEqual(r, ['pleader'])

    _, r = self.anagrams2.get_anagrams("pleading")
    self.assertEqual(r, ['pleading'])

    _, r = self.anagrams2.get_anagrams("pleads")
    self.assertEqual(r, ['lapsed', 'pleads'])

    _, r = self.anagrams2.get_anagrams("pleas")
    self.assertEqual(r, ['lapse', 'leaps', 'pales', 'peals', 'pleas'])

    _, r = self.anagrams2.get_anagrams("pleasant")
    self.assertEqual(r, ['pleasant'])

    _, r = self.anagrams2.get_anagrams("pleasantly")
    self.assertEqual(r, ['pleasantly'])

    _, r = self.anagrams2.get_anagrams("pleasantness")
    self.assertEqual(r, ['pleasantness'])

    _, r = self.anagrams2.get_anagrams("please")
    self.assertEqual(r, ['asleep', 'elapse', 'please'])

    _, r = self.anagrams2.get_anagrams("pleased")
    self.assertEqual(r, ['elapsed', 'pleased'])

    _, r = self.anagrams2.get_anagrams("pleases")
    self.assertEqual(r, ['elapses', 'pleases'])

    _, r = self.anagrams2.get_anagrams("pleasing")
    self.assertEqual(r, ['elapsing', 'pleasing'])

    _, r = self.anagrams2.get_anagrams("pleasingly")
    self.assertEqual(r, ['pleasingly'])

    _, r = self.anagrams2.get_anagrams("pleasure")
    self.assertEqual(r, ['pleasure'])

    _, r = self.anagrams2.get_anagrams("pleasures")
    self.assertEqual(r, ['pleasures'])

    _, r = self.anagrams2.get_anagrams("pleat")
    self.assertEqual(r, ['leapt', 'petal', 'plate', 'pleat'])

    _, r = self.anagrams2.get_anagrams("plebeian")
    self.assertEqual(r, ['plebeian'])

    _, r = self.anagrams2.get_anagrams("plebian")
    self.assertEqual(r, ['biplane', 'plebian'])

    _, r = self.anagrams2.get_anagrams("plebiscite")
    self.assertEqual(r, ['plebiscite'])

    _, r = self.anagrams2.get_anagrams("plebiscites")
    self.assertEqual(r, ['plebiscites'])

    _, r = self.anagrams2.get_anagrams("pledge")
    self.assertEqual(r, ['pledge'])

    _, r = self.anagrams2.get_anagrams("pledged")
    self.assertEqual(r, ['pledged'])

    _, r = self.anagrams2.get_anagrams("pledges")
    self.assertEqual(r, ['pledges'])

    _, r = self.anagrams2.get_anagrams("pleiades")
    self.assertEqual(r, ['pleiades'])

    _, r = self.anagrams2.get_anagrams("pleistocene")
    self.assertEqual(r, ['pleistocene'])

    _, r = self.anagrams2.get_anagrams("plenary")
    self.assertEqual(r, ['plenary'])

    _, r = self.anagrams2.get_anagrams("plenipotentiary")
    self.assertEqual(r, ['plenipotentiary'])

    _, r = self.anagrams2.get_anagrams("plenteous")
    self.assertEqual(r, ['plenteous'])

    _, r = self.anagrams2.get_anagrams("plentiful")
    self.assertEqual(r, ['plentiful'])

    _, r = self.anagrams2.get_anagrams("plentifully")
    self.assertEqual(r, ['plentifully'])

    _, r = self.anagrams2.get_anagrams("plenty")
    self.assertEqual(r, ['plenty'])

    _, r = self.anagrams2.get_anagrams("plethora")
    self.assertEqual(r, ['plethora'])

    _, r = self.anagrams2.get_anagrams("pleurisy")
    self.assertEqual(r, ['pleurisy'])

    _, r = self.anagrams2.get_anagrams("plexiglas")
    self.assertEqual(r, ['plexiglas'])

    _, r = self.anagrams2.get_anagrams("pliable")
    self.assertEqual(r, ['pliable'])

    _, r = self.anagrams2.get_anagrams("pliant")
    self.assertEqual(r, ['pliant'])

    _, r = self.anagrams2.get_anagrams("plied")
    self.assertEqual(r, ['piled', 'plied'])

    _, r = self.anagrams2.get_anagrams("pliers")
    self.assertEqual(r, ['perils', 'pilers', 'pliers'])

    _, r = self.anagrams2.get_anagrams("plies")
    self.assertEqual(r, ['piles', 'plies'])

    _, r = self.anagrams2.get_anagrams("plight")
    self.assertEqual(r, ['plight'])

    _, r = self.anagrams2.get_anagrams("pliny")
    self.assertEqual(r, ['pliny'])

    _, r = self.anagrams2.get_anagrams("pliocene")
    self.assertEqual(r, ['pliocene'])

    _, r = self.anagrams2.get_anagrams("plod")
    self.assertEqual(r, ['plod'])

    _, r = self.anagrams2.get_anagrams("plodding")
    self.assertEqual(r, ['plodding'])

    _, r = self.anagrams2.get_anagrams("plot")
    self.assertEqual(r, ['plot'])

    _, r = self.anagrams2.get_anagrams("plots")
    self.assertEqual(r, ['plots'])

    _, r = self.anagrams2.get_anagrams("plotted")
    self.assertEqual(r, ['plotted'])

    _, r = self.anagrams2.get_anagrams("plotter")
    self.assertEqual(r, ['plotter'])

    _, r = self.anagrams2.get_anagrams("plotters")
    self.assertEqual(r, ['plotters'])

    _, r = self.anagrams2.get_anagrams("plotting")
    self.assertEqual(r, ['plotting'])

    _, r = self.anagrams2.get_anagrams("plow")
    self.assertEqual(r, ['plow'])

    _, r = self.anagrams2.get_anagrams("plowed")
    self.assertEqual(r, ['plowed'])

    _, r = self.anagrams2.get_anagrams("plower")
    self.assertEqual(r, ['plower'])

    _, r = self.anagrams2.get_anagrams("plowing")
    self.assertEqual(r, ['plowing'])

    _, r = self.anagrams2.get_anagrams("plowman")
    self.assertEqual(r, ['plowman'])

    _, r = self.anagrams2.get_anagrams("plows")
    self.assertEqual(r, ['plows'])

    _, r = self.anagrams2.get_anagrams("plowshare")
    self.assertEqual(r, ['plowshare'])

    _, r = self.anagrams2.get_anagrams("ploy")
    self.assertEqual(r, ['ploy'])

    _, r = self.anagrams2.get_anagrams("ploys")
    self.assertEqual(r, ['ploys'])

    _, r = self.anagrams2.get_anagrams("pluck")
    self.assertEqual(r, ['pluck'])

    _, r = self.anagrams2.get_anagrams("plucked")
    self.assertEqual(r, ['plucked'])

    _, r = self.anagrams2.get_anagrams("plucking")
    self.assertEqual(r, ['plucking'])

    _, r = self.anagrams2.get_anagrams("plucks")
    self.assertEqual(r, ['plucks'])

    _, r = self.anagrams2.get_anagrams("plucky")
    self.assertEqual(r, ['plucky'])

    _, r = self.anagrams2.get_anagrams("plug")
    self.assertEqual(r, ['gulp', 'plug'])

    _, r = self.anagrams2.get_anagrams("pluggable")
    self.assertEqual(r, ['pluggable'])

    _, r = self.anagrams2.get_anagrams("plugged")
    self.assertEqual(r, ['plugged'])

    _, r = self.anagrams2.get_anagrams("plugging")
    self.assertEqual(r, ['plugging'])

    _, r = self.anagrams2.get_anagrams("plugs")
    self.assertEqual(r, ['gulps', 'plugs'])

    _, r = self.anagrams2.get_anagrams("plum")
    self.assertEqual(r, ['lump', 'plum'])

    _, r = self.anagrams2.get_anagrams("plumage")
    self.assertEqual(r, ['plumage'])

    _, r = self.anagrams2.get_anagrams("plumb")
    self.assertEqual(r, ['plumb'])

    _, r = self.anagrams2.get_anagrams("plumbed")
    self.assertEqual(r, ['plumbed'])

    _, r = self.anagrams2.get_anagrams("plumbing")
    self.assertEqual(r, ['plumbing'])

    _, r = self.anagrams2.get_anagrams("plumbs")
    self.assertEqual(r, ['plumbs'])

    _, r = self.anagrams2.get_anagrams("plume")
    self.assertEqual(r, ['plume'])

    _, r = self.anagrams2.get_anagrams("plumed")
    self.assertEqual(r, ['lumped', 'plumed'])

    _, r = self.anagrams2.get_anagrams("plumes")
    self.assertEqual(r, ['plumes'])

    _, r = self.anagrams2.get_anagrams("plummet")
    self.assertEqual(r, ['plummet'])

    _, r = self.anagrams2.get_anagrams("plummeting")
    self.assertEqual(r, ['plummeting'])

    _, r = self.anagrams2.get_anagrams("plump")
    self.assertEqual(r, ['plump'])

    _, r = self.anagrams2.get_anagrams("plumped")
    self.assertEqual(r, ['plumped'])

    _, r = self.anagrams2.get_anagrams("plumpness")
    self.assertEqual(r, ['plumpness'])

    _, r = self.anagrams2.get_anagrams("plums")
    self.assertEqual(r, ['lumps', 'plums', 'slump'])

    _, r = self.anagrams2.get_anagrams("plunder")
    self.assertEqual(r, ['plunder'])

    _, r = self.anagrams2.get_anagrams("plundered")
    self.assertEqual(r, ['plundered'])

    _, r = self.anagrams2.get_anagrams("plunderer")
    self.assertEqual(r, ['plunderer'])

    _, r = self.anagrams2.get_anagrams("plunderers")
    self.assertEqual(r, ['plunderers'])

    _, r = self.anagrams2.get_anagrams("plundering")
    self.assertEqual(r, ['plundering'])

    _, r = self.anagrams2.get_anagrams("plunders")
    self.assertEqual(r, ['plunders'])

    _, r = self.anagrams2.get_anagrams("plunge")
    self.assertEqual(r, ['plunge'])

    _, r = self.anagrams2.get_anagrams("plunged")
    self.assertEqual(r, ['plunged'])

    _, r = self.anagrams2.get_anagrams("plunger")
    self.assertEqual(r, ['plunger'])

    _, r = self.anagrams2.get_anagrams("plungers")
    self.assertEqual(r, ['plungers'])

    _, r = self.anagrams2.get_anagrams("plunges")
    self.assertEqual(r, ['plunges'])

    _, r = self.anagrams2.get_anagrams("plunging")
    self.assertEqual(r, ['plunging'])

    _, r = self.anagrams2.get_anagrams("plunk")
    self.assertEqual(r, ['plunk'])

    _, r = self.anagrams2.get_anagrams("plural")
    self.assertEqual(r, ['plural'])

    _, r = self.anagrams2.get_anagrams("plurality")
    self.assertEqual(r, ['plurality'])

    _, r = self.anagrams2.get_anagrams("plurals")
    self.assertEqual(r, ['plurals'])

    _, r = self.anagrams2.get_anagrams("plus")
    self.assertEqual(r, ['plus'])

    _, r = self.anagrams2.get_anagrams("pluses")
    self.assertEqual(r, ['pluses', 'pulses'])

    _, r = self.anagrams2.get_anagrams("plush")
    self.assertEqual(r, ['plush'])

    _, r = self.anagrams2.get_anagrams("plutarch")
    self.assertEqual(r, ['plutarch'])

    _, r = self.anagrams2.get_anagrams("pluto")
    self.assertEqual(r, ['pluto'])

    _, r = self.anagrams2.get_anagrams("plutonium")
    self.assertEqual(r, ['plutonium'])

    _, r = self.anagrams2.get_anagrams("ply")
    self.assertEqual(r, ['ply'])

    _, r = self.anagrams2.get_anagrams("plymouth")
    self.assertEqual(r, ['plymouth'])

    _, r = self.anagrams2.get_anagrams("plywood")
    self.assertEqual(r, ['plywood'])

    _, r = self.anagrams2.get_anagrams("pneumatic")
    self.assertEqual(r, ['pneumatic'])

    _, r = self.anagrams2.get_anagrams("pneumonia")
    self.assertEqual(r, ['pneumonia'])

    _, r = self.anagrams2.get_anagrams("po")
    self.assertEqual(r, ['po'])

    _, r = self.anagrams2.get_anagrams("poach")
    self.assertEqual(r, ['poach'])

    _, r = self.anagrams2.get_anagrams("poacher")
    self.assertEqual(r, ['poacher'])

    _, r = self.anagrams2.get_anagrams("poaches")
    self.assertEqual(r, ['poaches'])

    _, r = self.anagrams2.get_anagrams("pocahontas")
    self.assertEqual(r, ['pocahontas'])

    _, r = self.anagrams2.get_anagrams("pocket")
    self.assertEqual(r, ['pocket'])

    _, r = self.anagrams2.get_anagrams("pocketbook")
    self.assertEqual(r, ['pocketbook'])

    _, r = self.anagrams2.get_anagrams("pocketbooks")
    self.assertEqual(r, ['pocketbooks'])

    _, r = self.anagrams2.get_anagrams("pocketed")
    self.assertEqual(r, ['pocketed'])

    _, r = self.anagrams2.get_anagrams("pocketful")
    self.assertEqual(r, ['pocketful'])

    _, r = self.anagrams2.get_anagrams("pocketing")
    self.assertEqual(r, ['pocketing'])

    _, r = self.anagrams2.get_anagrams("pockets")
    self.assertEqual(r, ['pockets'])

    _, r = self.anagrams2.get_anagrams("pocono")
    self.assertEqual(r, ['pocono'])

    _, r = self.anagrams2.get_anagrams("poconos")
    self.assertEqual(r, ['poconos'])

    _, r = self.anagrams2.get_anagrams("pod")
    self.assertEqual(r, ['pod'])

    _, r = self.anagrams2.get_anagrams("podia")
    self.assertEqual(r, ['podia'])

    _, r = self.anagrams2.get_anagrams("podium")
    self.assertEqual(r, ['podium'])

    _, r = self.anagrams2.get_anagrams("pods")
    self.assertEqual(r, ['pods'])

    _, r = self.anagrams2.get_anagrams("podunk")
    self.assertEqual(r, ['podunk'])

    _, r = self.anagrams2.get_anagrams("poe")
    self.assertEqual(r, ['poe'])

    _, r = self.anagrams2.get_anagrams("poem")
    self.assertEqual(r, ['poem'])

    _, r = self.anagrams2.get_anagrams("poems")
    self.assertEqual(r, ['epsom', 'poems'])

    _, r = self.anagrams2.get_anagrams("poet")
    self.assertEqual(r, ['poet'])

    _, r = self.anagrams2.get_anagrams("poetic")
    self.assertEqual(r, ['poetic'])

    _, r = self.anagrams2.get_anagrams("poetical")
    self.assertEqual(r, ['poetical'])

    _, r = self.anagrams2.get_anagrams("poetically")
    self.assertEqual(r, ['poetically'])

    _, r = self.anagrams2.get_anagrams("poetics")
    self.assertEqual(r, ['poetics'])

    _, r = self.anagrams2.get_anagrams("poetries")
    self.assertEqual(r, ['poetries'])

    _, r = self.anagrams2.get_anagrams("poetry")
    self.assertEqual(r, ['poetry'])

    _, r = self.anagrams2.get_anagrams("poets")
    self.assertEqual(r, ['poets'])

    _, r = self.anagrams2.get_anagrams("pogo")
    self.assertEqual(r, ['pogo'])

    _, r = self.anagrams2.get_anagrams("pogrom")
    self.assertEqual(r, ['pogrom'])

    _, r = self.anagrams2.get_anagrams("poignancy")
    self.assertEqual(r, ['poignancy'])

    _, r = self.anagrams2.get_anagrams("poignant")
    self.assertEqual(r, ['poignant'])

    _, r = self.anagrams2.get_anagrams("poincare")
    self.assertEqual(r, ['poincare', 'procaine'])

    _, r = self.anagrams2.get_anagrams("poindexter")
    self.assertEqual(r, ['poindexter'])

    _, r = self.anagrams2.get_anagrams("point")
    self.assertEqual(r, ['pinto', 'point'])

    _, r = self.anagrams2.get_anagrams("pointed")
    self.assertEqual(r, ['pointed'])

    _, r = self.anagrams2.get_anagrams("pointedly")
    self.assertEqual(r, ['pointedly'])

    _, r = self.anagrams2.get_anagrams("pointer")
    self.assertEqual(r, ['pointer', 'protein'])

    _, r = self.anagrams2.get_anagrams("pointers")
    self.assertEqual(r, ['pointers', 'proteins'])

    _, r = self.anagrams2.get_anagrams("pointing")
    self.assertEqual(r, ['pointing'])

    _, r = self.anagrams2.get_anagrams("pointless")
    self.assertEqual(r, ['pointless'])

    _, r = self.anagrams2.get_anagrams("points")
    self.assertEqual(r, ['piston', 'points'])

    _, r = self.anagrams2.get_anagrams("pointy")
    self.assertEqual(r, ['pointy'])

    _, r = self.anagrams2.get_anagrams("poise")
    self.assertEqual(r, ['poise'])

    _, r = self.anagrams2.get_anagrams("poised")
    self.assertEqual(r, ['poised'])

    _, r = self.anagrams2.get_anagrams("poises")
    self.assertEqual(r, ['poises'])

    _, r = self.anagrams2.get_anagrams("poison")
    self.assertEqual(r, ['poison'])

    _, r = self.anagrams2.get_anagrams("poisoned")
    self.assertEqual(r, ['poisoned', 'poseidon'])

    _, r = self.anagrams2.get_anagrams("poisoner")
    self.assertEqual(r, ['poisoner'])

    _, r = self.anagrams2.get_anagrams("poisoning")
    self.assertEqual(r, ['poisoning'])

    _, r = self.anagrams2.get_anagrams("poisonous")
    self.assertEqual(r, ['poisonous'])

    _, r = self.anagrams2.get_anagrams("poisonousness")
    self.assertEqual(r, ['poisonousness'])

    _, r = self.anagrams2.get_anagrams("poisons")
    self.assertEqual(r, ['poisons', 'poisson'])

    _, r = self.anagrams2.get_anagrams("poisson")
    self.assertEqual(r, ['poisons', 'poisson'])

    _, r = self.anagrams2.get_anagrams("poke")
    self.assertEqual(r, ['poke'])

    _, r = self.anagrams2.get_anagrams("poked")
    self.assertEqual(r, ['poked'])

    _, r = self.anagrams2.get_anagrams("poker")
    self.assertEqual(r, ['poker'])

    _, r = self.anagrams2.get_anagrams("pokerface")
    self.assertEqual(r, ['pokerface'])

    _, r = self.anagrams2.get_anagrams("pokes")
    self.assertEqual(r, ['pokes', 'spoke'])

    _, r = self.anagrams2.get_anagrams("poking")
    self.assertEqual(r, ['poking'])

    _, r = self.anagrams2.get_anagrams("poland")
    self.assertEqual(r, ['poland'])

    _, r = self.anagrams2.get_anagrams("polar")
    self.assertEqual(r, ['polar'])

    _, r = self.anagrams2.get_anagrams("polaris")
    self.assertEqual(r, ['polaris'])

    _, r = self.anagrams2.get_anagrams("polarities")
    self.assertEqual(r, ['polarities'])

    _, r = self.anagrams2.get_anagrams("polarity")
    self.assertEqual(r, ['polarity'])

    _, r = self.anagrams2.get_anagrams("polaroid")
    self.assertEqual(r, ['polaroid'])

    _, r = self.anagrams2.get_anagrams("pole")
    self.assertEqual(r, ['opel', 'pole'])

    _, r = self.anagrams2.get_anagrams("polecat")
    self.assertEqual(r, ['polecat'])

    _, r = self.anagrams2.get_anagrams("poled")
    self.assertEqual(r, ['poled'])

    _, r = self.anagrams2.get_anagrams("polemic")
    self.assertEqual(r, ['compile', 'polemic'])

    _, r = self.anagrams2.get_anagrams("polemics")
    self.assertEqual(r, ['compiles', 'polemics'])

    _, r = self.anagrams2.get_anagrams("poles")
    self.assertEqual(r, ['poles', 'slope'])

    _, r = self.anagrams2.get_anagrams("police")
    self.assertEqual(r, ['police'])

    _, r = self.anagrams2.get_anagrams("policed")
    self.assertEqual(r, ['policed'])

    _, r = self.anagrams2.get_anagrams("policeman")
    self.assertEqual(r, ['policeman'])

    _, r = self.anagrams2.get_anagrams("policemen")
    self.assertEqual(r, ['policemen'])

    _, r = self.anagrams2.get_anagrams("polices")
    self.assertEqual(r, ['polices'])

    _, r = self.anagrams2.get_anagrams("policies")
    self.assertEqual(r, ['policies'])

    _, r = self.anagrams2.get_anagrams("policing")
    self.assertEqual(r, ['policing'])

    _, r = self.anagrams2.get_anagrams("policy")
    self.assertEqual(r, ['policy'])

    _, r = self.anagrams2.get_anagrams("poling")
    self.assertEqual(r, ['poling'])

    _, r = self.anagrams2.get_anagrams("polio")
    self.assertEqual(r, ['polio'])

    _, r = self.anagrams2.get_anagrams("polish")
    self.assertEqual(r, ['polish'])

    _, r = self.anagrams2.get_anagrams("polished")
    self.assertEqual(r, ['polished'])

    _, r = self.anagrams2.get_anagrams("polisher")
    self.assertEqual(r, ['polisher'])

    _, r = self.anagrams2.get_anagrams("polishers")
    self.assertEqual(r, ['polishers'])

    _, r = self.anagrams2.get_anagrams("polishes")
    self.assertEqual(r, ['polishes'])

    _, r = self.anagrams2.get_anagrams("polishing")
    self.assertEqual(r, ['polishing'])

    _, r = self.anagrams2.get_anagrams("politburo")
    self.assertEqual(r, ['politburo'])

    _, r = self.anagrams2.get_anagrams("polite")
    self.assertEqual(r, ['polite'])

    _, r = self.anagrams2.get_anagrams("politely")
    self.assertEqual(r, ['politely'])

    _, r = self.anagrams2.get_anagrams("politeness")
    self.assertEqual(r, ['politeness'])

    _, r = self.anagrams2.get_anagrams("politer")
    self.assertEqual(r, ['politer'])

    _, r = self.anagrams2.get_anagrams("politest")
    self.assertEqual(r, ['politest'])

    _, r = self.anagrams2.get_anagrams("politic")
    self.assertEqual(r, ['politic'])

    _, r = self.anagrams2.get_anagrams("political")
    self.assertEqual(r, ['political'])

    _, r = self.anagrams2.get_anagrams("politically")
    self.assertEqual(r, ['politically'])

    _, r = self.anagrams2.get_anagrams("politician")
    self.assertEqual(r, ['politician'])

    _, r = self.anagrams2.get_anagrams("politicians")
    self.assertEqual(r, ['politicians'])

    _, r = self.anagrams2.get_anagrams("politicking")
    self.assertEqual(r, ['politicking'])

    _, r = self.anagrams2.get_anagrams("politics")
    self.assertEqual(r, ['politics'])

    _, r = self.anagrams2.get_anagrams("polk")
    self.assertEqual(r, ['polk'])

    _, r = self.anagrams2.get_anagrams("polka")
    self.assertEqual(r, ['polka'])

    _, r = self.anagrams2.get_anagrams("poll")
    self.assertEqual(r, ['poll'])

    _, r = self.anagrams2.get_anagrams("pollard")
    self.assertEqual(r, ['pollard'])

    _, r = self.anagrams2.get_anagrams("polled")
    self.assertEqual(r, ['polled'])

    _, r = self.anagrams2.get_anagrams("pollen")
    self.assertEqual(r, ['pollen'])

    _, r = self.anagrams2.get_anagrams("polling")
    self.assertEqual(r, ['polling'])

    _, r = self.anagrams2.get_anagrams("polloi")
    self.assertEqual(r, ['polloi'])

    _, r = self.anagrams2.get_anagrams("polls")
    self.assertEqual(r, ['polls'])

    _, r = self.anagrams2.get_anagrams("pollutant")
    self.assertEqual(r, ['pollutant'])

    _, r = self.anagrams2.get_anagrams("pollute")
    self.assertEqual(r, ['pollute'])

    _, r = self.anagrams2.get_anagrams("polluted")
    self.assertEqual(r, ['polluted'])

    _, r = self.anagrams2.get_anagrams("pollutes")
    self.assertEqual(r, ['pollutes'])

    _, r = self.anagrams2.get_anagrams("polluting")
    self.assertEqual(r, ['polluting'])

    _, r = self.anagrams2.get_anagrams("pollution")
    self.assertEqual(r, ['pollution'])

    _, r = self.anagrams2.get_anagrams("pollux")
    self.assertEqual(r, ['pollux'])

    _, r = self.anagrams2.get_anagrams("polo")
    self.assertEqual(r, ['loop', 'polo', 'pool'])

    _, r = self.anagrams2.get_anagrams("polyalphabetic")
    self.assertEqual(r, ['polyalphabetic'])

    _, r = self.anagrams2.get_anagrams("polygon")
    self.assertEqual(r, ['polygon'])

    _, r = self.anagrams2.get_anagrams("polygons")
    self.assertEqual(r, ['polygons'])

    _, r = self.anagrams2.get_anagrams("polyhymnia")
    self.assertEqual(r, ['polyhymnia'])

    _, r = self.anagrams2.get_anagrams("polymer")
    self.assertEqual(r, ['polymer'])

    _, r = self.anagrams2.get_anagrams("polymers")
    self.assertEqual(r, ['polymers'])

    _, r = self.anagrams2.get_anagrams("polymorphic")
    self.assertEqual(r, ['polymorphic'])

    _, r = self.anagrams2.get_anagrams("polynesia")
    self.assertEqual(r, ['polynesia'])

    _, r = self.anagrams2.get_anagrams("polynesian")
    self.assertEqual(r, ['polynesian'])

    _, r = self.anagrams2.get_anagrams("polynomial")
    self.assertEqual(r, ['polynomial'])

    _, r = self.anagrams2.get_anagrams("polynomials")
    self.assertEqual(r, ['polynomials'])

    _, r = self.anagrams2.get_anagrams("polyphemus")
    self.assertEqual(r, ['polyphemus'])

    _, r = self.anagrams2.get_anagrams("polytechnic")
    self.assertEqual(r, ['polytechnic'])

    _, r = self.anagrams2.get_anagrams("polytheist")
    self.assertEqual(r, ['polytheist'])

    _, r = self.anagrams2.get_anagrams("pomerania")
    self.assertEqual(r, ['pomerania'])

    _, r = self.anagrams2.get_anagrams("pomeranian")
    self.assertEqual(r, ['pomeranian'])

    _, r = self.anagrams2.get_anagrams("pomona")
    self.assertEqual(r, ['pomona'])

    _, r = self.anagrams2.get_anagrams("pomp")
    self.assertEqual(r, ['pomp'])

    _, r = self.anagrams2.get_anagrams("pompadour")
    self.assertEqual(r, ['pompadour'])

    _, r = self.anagrams2.get_anagrams("pompeii")
    self.assertEqual(r, ['pompeii'])

    _, r = self.anagrams2.get_anagrams("pompey")
    self.assertEqual(r, ['pompey'])

    _, r = self.anagrams2.get_anagrams("pomposity")
    self.assertEqual(r, ['pomposity'])

    _, r = self.anagrams2.get_anagrams("pompous")
    self.assertEqual(r, ['pompous'])

    _, r = self.anagrams2.get_anagrams("pompously")
    self.assertEqual(r, ['pompously'])

    _, r = self.anagrams2.get_anagrams("pompousness")
    self.assertEqual(r, ['pompousness'])

    _, r = self.anagrams2.get_anagrams("ponce")
    self.assertEqual(r, ['ponce'])

    _, r = self.anagrams2.get_anagrams("ponchartrain")
    self.assertEqual(r, ['ponchartrain'])

    _, r = self.anagrams2.get_anagrams("poncho")
    self.assertEqual(r, ['poncho'])

    _, r = self.anagrams2.get_anagrams("pond")
    self.assertEqual(r, ['pond'])

    _, r = self.anagrams2.get_anagrams("ponder")
    self.assertEqual(r, ['pernod', 'ponder'])

    _, r = self.anagrams2.get_anagrams("pondered")
    self.assertEqual(r, ['pondered'])

    _, r = self.anagrams2.get_anagrams("pondering")
    self.assertEqual(r, ['pondering'])

    _, r = self.anagrams2.get_anagrams("ponderous")
    self.assertEqual(r, ['ponderous'])

    _, r = self.anagrams2.get_anagrams("ponders")
    self.assertEqual(r, ['ponders', 'respond'])

    _, r = self.anagrams2.get_anagrams("ponds")
    self.assertEqual(r, ['ponds'])

    _, r = self.anagrams2.get_anagrams("pong")
    self.assertEqual(r, ['pong'])

    _, r = self.anagrams2.get_anagrams("ponies")
    self.assertEqual(r, ['ponies'])

    _, r = self.anagrams2.get_anagrams("pontiac")
    self.assertEqual(r, ['caption', 'pontiac'])

    _, r = self.anagrams2.get_anagrams("pontiff")
    self.assertEqual(r, ['pontiff'])

    _, r = self.anagrams2.get_anagrams("pontific")
    self.assertEqual(r, ['pontific'])

    _, r = self.anagrams2.get_anagrams("pontificate")
    self.assertEqual(r, ['pontificate'])

    _, r = self.anagrams2.get_anagrams("pony")
    self.assertEqual(r, ['pony'])

    _, r = self.anagrams2.get_anagrams("pooch")
    self.assertEqual(r, ['pooch'])

    _, r = self.anagrams2.get_anagrams("poodle")
    self.assertEqual(r, ['looped', 'poodle', 'pooled'])

    _, r = self.anagrams2.get_anagrams("pool")
    self.assertEqual(r, ['loop', 'polo', 'pool'])

    _, r = self.anagrams2.get_anagrams("poole")
    self.assertEqual(r, ['poole'])

    _, r = self.anagrams2.get_anagrams("pooled")
    self.assertEqual(r, ['looped', 'poodle', 'pooled'])

    _, r = self.anagrams2.get_anagrams("pooling")
    self.assertEqual(r, ['looping', 'pooling'])

    _, r = self.anagrams2.get_anagrams("pools")
    self.assertEqual(r, ['loops', 'pools', 'sloop', 'spool'])

    _, r = self.anagrams2.get_anagrams("poor")
    self.assertEqual(r, ['poor'])

    _, r = self.anagrams2.get_anagrams("poorer")
    self.assertEqual(r, ['poorer'])

    _, r = self.anagrams2.get_anagrams("poorest")
    self.assertEqual(r, ['poorest'])

    _, r = self.anagrams2.get_anagrams("poorly")
    self.assertEqual(r, ['poorly'])

    _, r = self.anagrams2.get_anagrams("poorness")
    self.assertEqual(r, ['poorness'])

    _, r = self.anagrams2.get_anagrams("pop")
    self.assertEqual(r, ['pop'])

    _, r = self.anagrams2.get_anagrams("popcorn")
    self.assertEqual(r, ['popcorn'])

    _, r = self.anagrams2.get_anagrams("pope")
    self.assertEqual(r, ['pope'])

    _, r = self.anagrams2.get_anagrams("popek")
    self.assertEqual(r, ['popek'])

    _, r = self.anagrams2.get_anagrams("popeks")
    self.assertEqual(r, ['popeks'])

    _, r = self.anagrams2.get_anagrams("popish")
    self.assertEqual(r, ['popish'])

    _, r = self.anagrams2.get_anagrams("poplar")
    self.assertEqual(r, ['poplar'])

    _, r = self.anagrams2.get_anagrams("poplin")
    self.assertEqual(r, ['poplin'])

    _, r = self.anagrams2.get_anagrams("popped")
    self.assertEqual(r, ['popped'])

    _, r = self.anagrams2.get_anagrams("poppies")
    self.assertEqual(r, ['poppies'])

    _, r = self.anagrams2.get_anagrams("popping")
    self.assertEqual(r, ['popping'])

    _, r = self.anagrams2.get_anagrams("poppy")
    self.assertEqual(r, ['poppy'])

    _, r = self.anagrams2.get_anagrams("pops")
    self.assertEqual(r, ['pops'])

    _, r = self.anagrams2.get_anagrams("popsicle")
    self.assertEqual(r, ['popsicle'])

    _, r = self.anagrams2.get_anagrams("popsicles")
    self.assertEqual(r, ['popsicles'])

    _, r = self.anagrams2.get_anagrams("populace")
    self.assertEqual(r, ['populace'])

    _, r = self.anagrams2.get_anagrams("popular")
    self.assertEqual(r, ['popular'])

    _, r = self.anagrams2.get_anagrams("popularity")
    self.assertEqual(r, ['popularity'])

    _, r = self.anagrams2.get_anagrams("popularization")
    self.assertEqual(r, ['popularization'])

    _, r = self.anagrams2.get_anagrams("popularize")
    self.assertEqual(r, ['popularize'])

    _, r = self.anagrams2.get_anagrams("popularized")
    self.assertEqual(r, ['popularized'])

    _, r = self.anagrams2.get_anagrams("popularizes")
    self.assertEqual(r, ['popularizes'])

    _, r = self.anagrams2.get_anagrams("popularizing")
    self.assertEqual(r, ['popularizing'])

    _, r = self.anagrams2.get_anagrams("popularly")
    self.assertEqual(r, ['popularly'])

    _, r = self.anagrams2.get_anagrams("populate")
    self.assertEqual(r, ['populate'])

    _, r = self.anagrams2.get_anagrams("populated")
    self.assertEqual(r, ['populated'])

    _, r = self.anagrams2.get_anagrams("populates")
    self.assertEqual(r, ['populates'])

    _, r = self.anagrams2.get_anagrams("populating")
    self.assertEqual(r, ['populating'])

    _, r = self.anagrams2.get_anagrams("population")
    self.assertEqual(r, ['population'])

    _, r = self.anagrams2.get_anagrams("populations")
    self.assertEqual(r, ['populations'])

    _, r = self.anagrams2.get_anagrams("populous")
    self.assertEqual(r, ['populous'])

    _, r = self.anagrams2.get_anagrams("populousness")
    self.assertEqual(r, ['populousness'])

    _, r = self.anagrams2.get_anagrams("porcelain")
    self.assertEqual(r, ['porcelain'])

    _, r = self.anagrams2.get_anagrams("porch")
    self.assertEqual(r, ['porch'])

    _, r = self.anagrams2.get_anagrams("porches")
    self.assertEqual(r, ['porches'])

    _, r = self.anagrams2.get_anagrams("porcine")
    self.assertEqual(r, ['porcine'])

    _, r = self.anagrams2.get_anagrams("porcupine")
    self.assertEqual(r, ['porcupine'])

    _, r = self.anagrams2.get_anagrams("porcupines")
    self.assertEqual(r, ['porcupines'])

    _, r = self.anagrams2.get_anagrams("pore")
    self.assertEqual(r, ['pore', 'rope'])

    _, r = self.anagrams2.get_anagrams("pored")
    self.assertEqual(r, ['doper', 'pedro', 'pored', 'roped'])

    _, r = self.anagrams2.get_anagrams("pores")
    self.assertEqual(r, ['pores', 'poser', 'prose', 'ropes', 'spore'])

    _, r = self.anagrams2.get_anagrams("poring")
    self.assertEqual(r, ['poring', 'roping'])

    _, r = self.anagrams2.get_anagrams("pork")
    self.assertEqual(r, ['pork'])

    _, r = self.anagrams2.get_anagrams("porker")
    self.assertEqual(r, ['porker'])

    _, r = self.anagrams2.get_anagrams("pornographer")
    self.assertEqual(r, ['pornographer'])

    _, r = self.anagrams2.get_anagrams("pornographic")
    self.assertEqual(r, ['pornographic'])

    _, r = self.anagrams2.get_anagrams("pornography")
    self.assertEqual(r, ['pornography'])

    _, r = self.anagrams2.get_anagrams("porous")
    self.assertEqual(r, ['porous'])

    _, r = self.anagrams2.get_anagrams("porpoise")
    self.assertEqual(r, ['porpoise'])

    _, r = self.anagrams2.get_anagrams("porridge")
    self.assertEqual(r, ['porridge'])

    _, r = self.anagrams2.get_anagrams("port")
    self.assertEqual(r, ['port'])

    _, r = self.anagrams2.get_anagrams("portability")
    self.assertEqual(r, ['portability'])

    _, r = self.anagrams2.get_anagrams("portable")
    self.assertEqual(r, ['portable'])

    _, r = self.anagrams2.get_anagrams("portage")
    self.assertEqual(r, ['portage'])

    _, r = self.anagrams2.get_anagrams("portal")
    self.assertEqual(r, ['patrol', 'portal'])

    _, r = self.anagrams2.get_anagrams("portals")
    self.assertEqual(r, ['patrols', 'portals'])

    _, r = self.anagrams2.get_anagrams("porte")
    self.assertEqual(r, ['porte', 'toper'])

    _, r = self.anagrams2.get_anagrams("ported")
    self.assertEqual(r, ['deport', 'ported'])

    _, r = self.anagrams2.get_anagrams("portend")
    self.assertEqual(r, ['portend'])

    _, r = self.anagrams2.get_anagrams("portended")
    self.assertEqual(r, ['portended'])

    _, r = self.anagrams2.get_anagrams("portending")
    self.assertEqual(r, ['portending'])

    _, r = self.anagrams2.get_anagrams("portends")
    self.assertEqual(r, ['portends'])

    _, r = self.anagrams2.get_anagrams("portent")
    self.assertEqual(r, ['portent'])

    _, r = self.anagrams2.get_anagrams("portentous")
    self.assertEqual(r, ['portentous'])

    _, r = self.anagrams2.get_anagrams("porter")
    self.assertEqual(r, ['porter', 'report'])

    _, r = self.anagrams2.get_anagrams("porterhouse")
    self.assertEqual(r, ['porterhouse'])

    _, r = self.anagrams2.get_anagrams("porters")
    self.assertEqual(r, ['porters', 'reports'])

    _, r = self.anagrams2.get_anagrams("portfolio")
    self.assertEqual(r, ['portfolio'])

    _, r = self.anagrams2.get_anagrams("portfolios")
    self.assertEqual(r, ['portfolios'])

    _, r = self.anagrams2.get_anagrams("portia")
    self.assertEqual(r, ['portia'])

    _, r = self.anagrams2.get_anagrams("portico")
    self.assertEqual(r, ['portico'])

    _, r = self.anagrams2.get_anagrams("porting")
    self.assertEqual(r, ['porting'])

    _, r = self.anagrams2.get_anagrams("portion")
    self.assertEqual(r, ['portion'])

    _, r = self.anagrams2.get_anagrams("portions")
    self.assertEqual(r, ['portions', 'positron'])

    _, r = self.anagrams2.get_anagrams("portland")
    self.assertEqual(r, ['portland'])

    _, r = self.anagrams2.get_anagrams("portly")
    self.assertEqual(r, ['portly'])

    _, r = self.anagrams2.get_anagrams("portmanteau")
    self.assertEqual(r, ['portmanteau'])

    _, r = self.anagrams2.get_anagrams("porto")
    self.assertEqual(r, ['porto', 'troop'])

    _, r = self.anagrams2.get_anagrams("portrait")
    self.assertEqual(r, ['portrait'])

    _, r = self.anagrams2.get_anagrams("portraits")
    self.assertEqual(r, ['portraits'])

    _, r = self.anagrams2.get_anagrams("portray")
    self.assertEqual(r, ['portray'])

    _, r = self.anagrams2.get_anagrams("portrayal")
    self.assertEqual(r, ['portrayal'])

    _, r = self.anagrams2.get_anagrams("portrayed")
    self.assertEqual(r, ['portrayed', 'predatory'])

    _, r = self.anagrams2.get_anagrams("portraying")
    self.assertEqual(r, ['portraying'])

    _, r = self.anagrams2.get_anagrams("portrays")
    self.assertEqual(r, ['portrays'])

    _, r = self.anagrams2.get_anagrams("ports")
    self.assertEqual(r, ['ports', 'sport'])

    _, r = self.anagrams2.get_anagrams("portsmouth")
    self.assertEqual(r, ['portsmouth'])

    _, r = self.anagrams2.get_anagrams("portugal")
    self.assertEqual(r, ['portugal'])

    _, r = self.anagrams2.get_anagrams("portuguese")
    self.assertEqual(r, ['portuguese'])

    _, r = self.anagrams2.get_anagrams("pose")
    self.assertEqual(r, ['pose'])

    _, r = self.anagrams2.get_anagrams("posed")
    self.assertEqual(r, ['dopes', 'posed'])

    _, r = self.anagrams2.get_anagrams("poseidon")
    self.assertEqual(r, ['poisoned', 'poseidon'])

    _, r = self.anagrams2.get_anagrams("poser")
    self.assertEqual(r, ['pores', 'poser', 'prose', 'ropes', 'spore'])

    _, r = self.anagrams2.get_anagrams("posers")
    self.assertEqual(r, ['posers', 'spores'])

    _, r = self.anagrams2.get_anagrams("poses")
    self.assertEqual(r, ['poses', 'posse'])

    _, r = self.anagrams2.get_anagrams("posh")
    self.assertEqual(r, ['hops', 'posh', 'shop'])

    _, r = self.anagrams2.get_anagrams("posing")
    self.assertEqual(r, ['posing'])

    _, r = self.anagrams2.get_anagrams("posit")
    self.assertEqual(r, ['posit'])

    _, r = self.anagrams2.get_anagrams("posited")
    self.assertEqual(r, ['deposit', 'posited'])

    _, r = self.anagrams2.get_anagrams("positing")
    self.assertEqual(r, ['positing'])

    _, r = self.anagrams2.get_anagrams("position")
    self.assertEqual(r, ['position'])

    _, r = self.anagrams2.get_anagrams("positional")
    self.assertEqual(r, ['positional'])

    _, r = self.anagrams2.get_anagrams("positioned")
    self.assertEqual(r, ['deposition', 'positioned'])

    _, r = self.anagrams2.get_anagrams("positioning")
    self.assertEqual(r, ['positioning'])

    _, r = self.anagrams2.get_anagrams("positions")
    self.assertEqual(r, ['positions'])

    _, r = self.anagrams2.get_anagrams("positive")
    self.assertEqual(r, ['positive'])

    _, r = self.anagrams2.get_anagrams("positively")
    self.assertEqual(r, ['positively'])

    _, r = self.anagrams2.get_anagrams("positiveness")
    self.assertEqual(r, ['positiveness'])

    _, r = self.anagrams2.get_anagrams("positives")
    self.assertEqual(r, ['positives'])

    _, r = self.anagrams2.get_anagrams("positron")
    self.assertEqual(r, ['portions', 'positron'])

    _, r = self.anagrams2.get_anagrams("posits")
    self.assertEqual(r, ['posits'])

    _, r = self.anagrams2.get_anagrams("posner")
    self.assertEqual(r, ['person', 'posner'])

    _, r = self.anagrams2.get_anagrams("posse")
    self.assertEqual(r, ['poses', 'posse'])

    _, r = self.anagrams2.get_anagrams("possess")
    self.assertEqual(r, ['possess'])

    _, r = self.anagrams2.get_anagrams("possessed")
    self.assertEqual(r, ['possessed'])

    _, r = self.anagrams2.get_anagrams("possesses")
    self.assertEqual(r, ['possesses'])

    _, r = self.anagrams2.get_anagrams("possessing")
    self.assertEqual(r, ['possessing'])

    _, r = self.anagrams2.get_anagrams("possession")
    self.assertEqual(r, ['possession'])

    _, r = self.anagrams2.get_anagrams("possessional")
    self.assertEqual(r, ['possessional'])

    _, r = self.anagrams2.get_anagrams("possessions")
    self.assertEqual(r, ['possessions'])

    _, r = self.anagrams2.get_anagrams("possessive")
    self.assertEqual(r, ['possessive'])

    _, r = self.anagrams2.get_anagrams("possessively")
    self.assertEqual(r, ['possessively'])

    _, r = self.anagrams2.get_anagrams("possessiveness")
    self.assertEqual(r, ['possessiveness'])

    _, r = self.anagrams2.get_anagrams("possessor")
    self.assertEqual(r, ['possessor'])

    _, r = self.anagrams2.get_anagrams("possessors")
    self.assertEqual(r, ['possessors'])

    _, r = self.anagrams2.get_anagrams("possibilities")
    self.assertEqual(r, ['possibilities'])

    _, r = self.anagrams2.get_anagrams("possibility")
    self.assertEqual(r, ['possibility'])

    _, r = self.anagrams2.get_anagrams("possible")
    self.assertEqual(r, ['possible'])

    _, r = self.anagrams2.get_anagrams("possibly")
    self.assertEqual(r, ['possibly'])

    _, r = self.anagrams2.get_anagrams("possum")
    self.assertEqual(r, ['possum'])

    _, r = self.anagrams2.get_anagrams("possums")
    self.assertEqual(r, ['possums'])

    _, r = self.anagrams2.get_anagrams("post")
    self.assertEqual(r, ['opts', 'post', 'pots', 'spot', 'stop', 'tops'])

    _, r = self.anagrams2.get_anagrams("postage")
    self.assertEqual(r, ['gestapo', 'postage'])

    _, r = self.anagrams2.get_anagrams("postal")
    self.assertEqual(r, ['postal'])

    _, r = self.anagrams2.get_anagrams("postcard")
    self.assertEqual(r, ['postcard'])

    _, r = self.anagrams2.get_anagrams("postcondition")
    self.assertEqual(r, ['postcondition'])

    _, r = self.anagrams2.get_anagrams("postdoctoral")
    self.assertEqual(r, ['postdoctoral'])

    _, r = self.anagrams2.get_anagrams("posted")
    self.assertEqual(r, ['depots', 'despot', 'posted'])

    _, r = self.anagrams2.get_anagrams("poster")
    self.assertEqual(r, ['poster'])

    _, r = self.anagrams2.get_anagrams("posterior")
    self.assertEqual(r, ['posterior'])

    _, r = self.anagrams2.get_anagrams("posteriori")
    self.assertEqual(r, ['posteriori'])

    _, r = self.anagrams2.get_anagrams("posterity")
    self.assertEqual(r, ['posterity'])

    _, r = self.anagrams2.get_anagrams("posters")
    self.assertEqual(r, ['posters'])

    _, r = self.anagrams2.get_anagrams("postfix")
    self.assertEqual(r, ['postfix'])

    _, r = self.anagrams2.get_anagrams("postgraduate")
    self.assertEqual(r, ['postgraduate'])

    _, r = self.anagrams2.get_anagrams("posting")
    self.assertEqual(r, ['posting'])

    _, r = self.anagrams2.get_anagrams("postlude")
    self.assertEqual(r, ['postlude'])

    _, r = self.anagrams2.get_anagrams("postman")
    self.assertEqual(r, ['postman'])

    _, r = self.anagrams2.get_anagrams("postmark")
    self.assertEqual(r, ['postmark'])

    _, r = self.anagrams2.get_anagrams("postmaster")
    self.assertEqual(r, ['postmaster'])

    _, r = self.anagrams2.get_anagrams("postmasters")
    self.assertEqual(r, ['postmasters'])

    _, r = self.anagrams2.get_anagrams("postmortem")
    self.assertEqual(r, ['postmortem'])

    _, r = self.anagrams2.get_anagrams("postoperative")
    self.assertEqual(r, ['postoperative'])

    _, r = self.anagrams2.get_anagrams("postorder")
    self.assertEqual(r, ['postorder'])

    _, r = self.anagrams2.get_anagrams("postpone")
    self.assertEqual(r, ['postpone'])

    _, r = self.anagrams2.get_anagrams("postponed")
    self.assertEqual(r, ['postponed'])

    _, r = self.anagrams2.get_anagrams("postponing")
    self.assertEqual(r, ['postponing'])

    _, r = self.anagrams2.get_anagrams("postprocess")
    self.assertEqual(r, ['postprocess'])

    _, r = self.anagrams2.get_anagrams("postprocessor")
    self.assertEqual(r, ['postprocessor'])

    _, r = self.anagrams2.get_anagrams("posts")
    self.assertEqual(r, ['posts', 'spots', 'stops'])

    _, r = self.anagrams2.get_anagrams("postscript")
    self.assertEqual(r, ['postscript'])

    _, r = self.anagrams2.get_anagrams("postscripts")
    self.assertEqual(r, ['postscripts'])

    _, r = self.anagrams2.get_anagrams("postulate")
    self.assertEqual(r, ['postulate'])

    _, r = self.anagrams2.get_anagrams("postulated")
    self.assertEqual(r, ['postulated'])

    _, r = self.anagrams2.get_anagrams("postulates")
    self.assertEqual(r, ['postulates'])

    _, r = self.anagrams2.get_anagrams("postulating")
    self.assertEqual(r, ['postulating'])

    _, r = self.anagrams2.get_anagrams("postulation")
    self.assertEqual(r, ['postulation'])

    _, r = self.anagrams2.get_anagrams("postulations")
    self.assertEqual(r, ['postulations'])

    _, r = self.anagrams2.get_anagrams("posture")
    self.assertEqual(r, ['posture'])

    _, r = self.anagrams2.get_anagrams("postures")
    self.assertEqual(r, ['postures'])

    _, r = self.anagrams2.get_anagrams("pot")
    self.assertEqual(r, ['opt', 'pot', 'top'])

    _, r = self.anagrams2.get_anagrams("potable")
    self.assertEqual(r, ['potable'])

    _, r = self.anagrams2.get_anagrams("potash")
    self.assertEqual(r, ['pathos', 'potash'])

    _, r = self.anagrams2.get_anagrams("potassium")
    self.assertEqual(r, ['potassium'])

    _, r = self.anagrams2.get_anagrams("potato")
    self.assertEqual(r, ['potato'])

    _, r = self.anagrams2.get_anagrams("potatoes")
    self.assertEqual(r, ['potatoes'])

    _, r = self.anagrams2.get_anagrams("potbelly")
    self.assertEqual(r, ['potbelly'])

    _, r = self.anagrams2.get_anagrams("potemkin")
    self.assertEqual(r, ['potemkin'])

    _, r = self.anagrams2.get_anagrams("potent")
    self.assertEqual(r, ['potent'])

    _, r = self.anagrams2.get_anagrams("potentate")
    self.assertEqual(r, ['potentate'])

    _, r = self.anagrams2.get_anagrams("potentates")
    self.assertEqual(r, ['potentates'])

    _, r = self.anagrams2.get_anagrams("potential")
    self.assertEqual(r, ['potential'])

    _, r = self.anagrams2.get_anagrams("potentialities")
    self.assertEqual(r, ['potentialities'])

    _, r = self.anagrams2.get_anagrams("potentiality")
    self.assertEqual(r, ['potentiality'])

    _, r = self.anagrams2.get_anagrams("potentially")
    self.assertEqual(r, ['potentially'])

    _, r = self.anagrams2.get_anagrams("potentials")
    self.assertEqual(r, ['potentials'])

    _, r = self.anagrams2.get_anagrams("potentiating")
    self.assertEqual(r, ['potentiating'])

    _, r = self.anagrams2.get_anagrams("potentiometer")
    self.assertEqual(r, ['potentiometer'])

    _, r = self.anagrams2.get_anagrams("potentiometers")
    self.assertEqual(r, ['potentiometers'])

    _, r = self.anagrams2.get_anagrams("pothole")
    self.assertEqual(r, ['pothole'])

    _, r = self.anagrams2.get_anagrams("potion")
    self.assertEqual(r, ['option', 'potion'])

    _, r = self.anagrams2.get_anagrams("potlatch")
    self.assertEqual(r, ['potlatch'])

    _, r = self.anagrams2.get_anagrams("potomac")
    self.assertEqual(r, ['potomac'])

    _, r = self.anagrams2.get_anagrams("potpourri")
    self.assertEqual(r, ['potpourri'])

    _, r = self.anagrams2.get_anagrams("pots")
    self.assertEqual(r, ['opts', 'post', 'pots', 'spot', 'stop', 'tops'])

    _, r = self.anagrams2.get_anagrams("potsdam")
    self.assertEqual(r, ['potsdam'])

    _, r = self.anagrams2.get_anagrams("pottawatomie")
    self.assertEqual(r, ['pottawatomie'])

    _, r = self.anagrams2.get_anagrams("potted")
    self.assertEqual(r, ['potted'])

    _, r = self.anagrams2.get_anagrams("potter")
    self.assertEqual(r, ['potter'])

    _, r = self.anagrams2.get_anagrams("potters")
    self.assertEqual(r, ['potters', 'protest', 'spotter'])

    _, r = self.anagrams2.get_anagrams("pottery")
    self.assertEqual(r, ['pottery'])

    _, r = self.anagrams2.get_anagrams("potting")
    self.assertEqual(r, ['potting'])

    _, r = self.anagrams2.get_anagrams("potts")
    self.assertEqual(r, ['potts'])

    _, r = self.anagrams2.get_anagrams("pouch")
    self.assertEqual(r, ['pouch'])

    _, r = self.anagrams2.get_anagrams("pouches")
    self.assertEqual(r, ['pouches'])

    _, r = self.anagrams2.get_anagrams("poughkeepsie")
    self.assertEqual(r, ['poughkeepsie'])

    _, r = self.anagrams2.get_anagrams("poultice")
    self.assertEqual(r, ['poultice'])

    _, r = self.anagrams2.get_anagrams("poultry")
    self.assertEqual(r, ['poultry'])

    _, r = self.anagrams2.get_anagrams("pounce")
    self.assertEqual(r, ['pounce'])

    _, r = self.anagrams2.get_anagrams("pounced")
    self.assertEqual(r, ['pounced'])

    _, r = self.anagrams2.get_anagrams("pounces")
    self.assertEqual(r, ['pounces'])

    _, r = self.anagrams2.get_anagrams("pouncing")
    self.assertEqual(r, ['pouncing'])

    _, r = self.anagrams2.get_anagrams("pound")
    self.assertEqual(r, ['pound'])

    _, r = self.anagrams2.get_anagrams("pounded")
    self.assertEqual(r, ['pounded'])

    _, r = self.anagrams2.get_anagrams("pounder")
    self.assertEqual(r, ['pounder'])

    _, r = self.anagrams2.get_anagrams("pounders")
    self.assertEqual(r, ['pounders'])

    _, r = self.anagrams2.get_anagrams("pounding")
    self.assertEqual(r, ['pounding'])

    _, r = self.anagrams2.get_anagrams("pounds")
    self.assertEqual(r, ['pounds'])

    _, r = self.anagrams2.get_anagrams("pour")
    self.assertEqual(r, ['pour'])

    _, r = self.anagrams2.get_anagrams("poured")
    self.assertEqual(r, ['poured'])

    _, r = self.anagrams2.get_anagrams("pourer")
    self.assertEqual(r, ['pourer'])

    _, r = self.anagrams2.get_anagrams("pourers")
    self.assertEqual(r, ['pourers'])

    _, r = self.anagrams2.get_anagrams("pouring")
    self.assertEqual(r, ['pouring'])

    _, r = self.anagrams2.get_anagrams("pours")
    self.assertEqual(r, ['pours'])

    _, r = self.anagrams2.get_anagrams("poussin")
    self.assertEqual(r, ['poussin'])

    _, r = self.anagrams2.get_anagrams("poussins")
    self.assertEqual(r, ['poussins'])

    _, r = self.anagrams2.get_anagrams("pout")
    self.assertEqual(r, ['pout'])

    _, r = self.anagrams2.get_anagrams("pouted")
    self.assertEqual(r, ['pouted'])

    _, r = self.anagrams2.get_anagrams("pouting")
    self.assertEqual(r, ['pouting'])

    _, r = self.anagrams2.get_anagrams("pouts")
    self.assertEqual(r, ['pouts', 'spout'])

    _, r = self.anagrams2.get_anagrams("poverty")
    self.assertEqual(r, ['poverty'])

    _, r = self.anagrams2.get_anagrams("powder")
    self.assertEqual(r, ['powder'])

    _, r = self.anagrams2.get_anagrams("powdered")
    self.assertEqual(r, ['powdered'])

    _, r = self.anagrams2.get_anagrams("powdering")
    self.assertEqual(r, ['powdering'])

    _, r = self.anagrams2.get_anagrams("powderpuff")
    self.assertEqual(r, ['powderpuff'])

    _, r = self.anagrams2.get_anagrams("powders")
    self.assertEqual(r, ['powders'])

    _, r = self.anagrams2.get_anagrams("powdery")
    self.assertEqual(r, ['powdery'])

    _, r = self.anagrams2.get_anagrams("powell")
    self.assertEqual(r, ['powell'])

    _, r = self.anagrams2.get_anagrams("power")
    self.assertEqual(r, ['power'])

    _, r = self.anagrams2.get_anagrams("powered")
    self.assertEqual(r, ['powered'])

    _, r = self.anagrams2.get_anagrams("powerful")
    self.assertEqual(r, ['powerful'])

    _, r = self.anagrams2.get_anagrams("powerfully")
    self.assertEqual(r, ['powerfully'])

    _, r = self.anagrams2.get_anagrams("powerfulness")
    self.assertEqual(r, ['powerfulness'])

    _, r = self.anagrams2.get_anagrams("powering")
    self.assertEqual(r, ['powering'])

    _, r = self.anagrams2.get_anagrams("powerless")
    self.assertEqual(r, ['powerless'])

    _, r = self.anagrams2.get_anagrams("powerlessly")
    self.assertEqual(r, ['powerlessly'])

    _, r = self.anagrams2.get_anagrams("powerlessness")
    self.assertEqual(r, ['powerlessness'])

    _, r = self.anagrams2.get_anagrams("powers")
    self.assertEqual(r, ['powers'])

    _, r = self.anagrams2.get_anagrams("pox")
    self.assertEqual(r, ['pox'])

    _, r = self.anagrams2.get_anagrams("poynting")
    self.assertEqual(r, ['poynting'])

    _, r = self.anagrams2.get_anagrams("practicable")
    self.assertEqual(r, ['practicable'])

    _, r = self.anagrams2.get_anagrams("practicably")
    self.assertEqual(r, ['practicably'])

    _, r = self.anagrams2.get_anagrams("practical")
    self.assertEqual(r, ['practical'])

    _, r = self.anagrams2.get_anagrams("practicality")
    self.assertEqual(r, ['practicality'])

    _, r = self.anagrams2.get_anagrams("practically")
    self.assertEqual(r, ['practically'])

    _, r = self.anagrams2.get_anagrams("practice")
    self.assertEqual(r, ['practice'])

    _, r = self.anagrams2.get_anagrams("practiced")
    self.assertEqual(r, ['practiced'])

    _, r = self.anagrams2.get_anagrams("practices")
    self.assertEqual(r, ['practices'])

    _, r = self.anagrams2.get_anagrams("practicing")
    self.assertEqual(r, ['practicing'])

    _, r = self.anagrams2.get_anagrams("practitioner")
    self.assertEqual(r, ['practitioner'])

    _, r = self.anagrams2.get_anagrams("practitioners")
    self.assertEqual(r, ['practitioners'])

    _, r = self.anagrams2.get_anagrams("pradesh")
    self.assertEqual(r, ['phrased', 'pradesh', 'shepard'])

    _, r = self.anagrams2.get_anagrams("prado")
    self.assertEqual(r, ['prado'])

    _, r = self.anagrams2.get_anagrams("pragmatic")
    self.assertEqual(r, ['pragmatic'])

    _, r = self.anagrams2.get_anagrams("pragmatically")
    self.assertEqual(r, ['pragmatically'])

    _, r = self.anagrams2.get_anagrams("pragmatics")
    self.assertEqual(r, ['pragmatics'])

    _, r = self.anagrams2.get_anagrams("pragmatism")
    self.assertEqual(r, ['pragmatism'])

    _, r = self.anagrams2.get_anagrams("pragmatist")
    self.assertEqual(r, ['pragmatist'])

    _, r = self.anagrams2.get_anagrams("prague")
    self.assertEqual(r, ['prague'])

    _, r = self.anagrams2.get_anagrams("prairie")
    self.assertEqual(r, ['prairie'])

    _, r = self.anagrams2.get_anagrams("praise")
    self.assertEqual(r, ['aspire', 'persia', 'praise'])

    _, r = self.anagrams2.get_anagrams("praised")
    self.assertEqual(r, ['aspired', 'despair', 'diapers', 'praised'])

    _, r = self.anagrams2.get_anagrams("praiser")
    self.assertEqual(r, ['praiser', 'repairs'])

    _, r = self.anagrams2.get_anagrams("praisers")
    self.assertEqual(r, ['praisers'])

    _, r = self.anagrams2.get_anagrams("praises")
    self.assertEqual(r, ['aspires', 'praises'])

    _, r = self.anagrams2.get_anagrams("praiseworthy")
    self.assertEqual(r, ['praiseworthy'])

    _, r = self.anagrams2.get_anagrams("praising")
    self.assertEqual(r, ['aspiring', 'pairings', 'praising'])

    _, r = self.anagrams2.get_anagrams("praisingly")
    self.assertEqual(r, ['praisingly'])

    _, r = self.anagrams2.get_anagrams("prance")
    self.assertEqual(r, ['prance'])

    _, r = self.anagrams2.get_anagrams("pranced")
    self.assertEqual(r, ['pranced'])

    _, r = self.anagrams2.get_anagrams("prancer")
    self.assertEqual(r, ['prancer'])

    _, r = self.anagrams2.get_anagrams("prancing")
    self.assertEqual(r, ['prancing'])

    _, r = self.anagrams2.get_anagrams("prank")
    self.assertEqual(r, ['prank'])

    _, r = self.anagrams2.get_anagrams("pranks")
    self.assertEqual(r, ['pranks'])

    _, r = self.anagrams2.get_anagrams("prate")
    self.assertEqual(r, ['prate', 'taper'])

    _, r = self.anagrams2.get_anagrams("pratt")
    self.assertEqual(r, ['pratt'])

    _, r = self.anagrams2.get_anagrams("prattville")
    self.assertEqual(r, ['prattville'])

    _, r = self.anagrams2.get_anagrams("pravda")
    self.assertEqual(r, ['pravda'])

    _, r = self.anagrams2.get_anagrams("pray")
    self.assertEqual(r, ['pray'])

    _, r = self.anagrams2.get_anagrams("prayed")
    self.assertEqual(r, ['prayed'])

    _, r = self.anagrams2.get_anagrams("prayer")
    self.assertEqual(r, ['prayer'])

    _, r = self.anagrams2.get_anagrams("prayers")
    self.assertEqual(r, ['prayers', 'sprayer'])

    _, r = self.anagrams2.get_anagrams("praying")
    self.assertEqual(r, ['praying'])

    _, r = self.anagrams2.get_anagrams("preach")
    self.assertEqual(r, ['preach'])

    _, r = self.anagrams2.get_anagrams("preached")
    self.assertEqual(r, ['preached'])

    _, r = self.anagrams2.get_anagrams("preacher")
    self.assertEqual(r, ['preacher'])

    _, r = self.anagrams2.get_anagrams("preachers")
    self.assertEqual(r, ['preachers'])

    _, r = self.anagrams2.get_anagrams("preaches")
    self.assertEqual(r, ['preaches'])

    _, r = self.anagrams2.get_anagrams("preaching")
    self.assertEqual(r, ['preaching'])

    _, r = self.anagrams2.get_anagrams("preallocate")
    self.assertEqual(r, ['preallocate'])

    _, r = self.anagrams2.get_anagrams("preallocated")
    self.assertEqual(r, ['preallocated'])

    _, r = self.anagrams2.get_anagrams("preallocating")
    self.assertEqual(r, ['preallocating'])

    _, r = self.anagrams2.get_anagrams("preamble")
    self.assertEqual(r, ['preamble'])

    _, r = self.anagrams2.get_anagrams("preambles")
    self.assertEqual(r, ['preambles'])

    _, r = self.anagrams2.get_anagrams("preassign")
    self.assertEqual(r, ['preassign'])

    _, r = self.anagrams2.get_anagrams("preassigned")
    self.assertEqual(r, ['preassigned'])

    _, r = self.anagrams2.get_anagrams("preassigning")
    self.assertEqual(r, ['preassigning'])

    _, r = self.anagrams2.get_anagrams("preassigns")
    self.assertEqual(r, ['preassigns'])

    _, r = self.anagrams2.get_anagrams("precambrian")
    self.assertEqual(r, ['precambrian'])

    _, r = self.anagrams2.get_anagrams("precarious")
    self.assertEqual(r, ['precarious'])

    _, r = self.anagrams2.get_anagrams("precariously")
    self.assertEqual(r, ['precariously'])

    _, r = self.anagrams2.get_anagrams("precariousness")
    self.assertEqual(r, ['precariousness'])

    _, r = self.anagrams2.get_anagrams("precaution")
    self.assertEqual(r, ['precaution'])

    _, r = self.anagrams2.get_anagrams("precautions")
    self.assertEqual(r, ['precautions'])

    _, r = self.anagrams2.get_anagrams("precede")
    self.assertEqual(r, ['precede'])

    _, r = self.anagrams2.get_anagrams("preceded")
    self.assertEqual(r, ['preceded'])

    _, r = self.anagrams2.get_anagrams("precedence")
    self.assertEqual(r, ['precedence'])

    _, r = self.anagrams2.get_anagrams("precedences")
    self.assertEqual(r, ['precedences'])

    _, r = self.anagrams2.get_anagrams("precedent")
    self.assertEqual(r, ['precedent'])

    _, r = self.anagrams2.get_anagrams("precedented")
    self.assertEqual(r, ['precedented'])

    _, r = self.anagrams2.get_anagrams("precedents")
    self.assertEqual(r, ['precedents'])

    _, r = self.anagrams2.get_anagrams("precedes")
    self.assertEqual(r, ['precedes'])

    _, r = self.anagrams2.get_anagrams("preceding")
    self.assertEqual(r, ['preceding'])

    _, r = self.anagrams2.get_anagrams("precept")
    self.assertEqual(r, ['precept'])

    _, r = self.anagrams2.get_anagrams("precepts")
    self.assertEqual(r, ['precepts'])

    _, r = self.anagrams2.get_anagrams("precess")
    self.assertEqual(r, ['precess'])

    _, r = self.anagrams2.get_anagrams("precession")
    self.assertEqual(r, ['precession'])

    _, r = self.anagrams2.get_anagrams("precinct")
    self.assertEqual(r, ['precinct'])

    _, r = self.anagrams2.get_anagrams("precincts")
    self.assertEqual(r, ['precincts'])

    _, r = self.anagrams2.get_anagrams("precious")
    self.assertEqual(r, ['precious'])

    _, r = self.anagrams2.get_anagrams("preciously")
    self.assertEqual(r, ['preciously'])

    _, r = self.anagrams2.get_anagrams("preciousness")
    self.assertEqual(r, ['preciousness'])

    _, r = self.anagrams2.get_anagrams("precipice")
    self.assertEqual(r, ['precipice'])

    _, r = self.anagrams2.get_anagrams("precipitable")
    self.assertEqual(r, ['precipitable'])

    _, r = self.anagrams2.get_anagrams("precipitate")
    self.assertEqual(r, ['precipitate'])

    _, r = self.anagrams2.get_anagrams("precipitated")
    self.assertEqual(r, ['precipitated'])

    _, r = self.anagrams2.get_anagrams("precipitately")
    self.assertEqual(r, ['precipitately'])

    _, r = self.anagrams2.get_anagrams("precipitateness")
    self.assertEqual(r, ['precipitateness'])

    _, r = self.anagrams2.get_anagrams("precipitates")
    self.assertEqual(r, ['precipitates'])

    _, r = self.anagrams2.get_anagrams("precipitating")
    self.assertEqual(r, ['precipitating'])

    _, r = self.anagrams2.get_anagrams("precipitation")
    self.assertEqual(r, ['precipitation'])

    _, r = self.anagrams2.get_anagrams("precipitous")
    self.assertEqual(r, ['precipitous'])

    _, r = self.anagrams2.get_anagrams("precipitously")
    self.assertEqual(r, ['precipitously'])

    _, r = self.anagrams2.get_anagrams("precise")
    self.assertEqual(r, ['pierces', 'precise', 'recipes'])

    _, r = self.anagrams2.get_anagrams("precisely")
    self.assertEqual(r, ['precisely'])

    _, r = self.anagrams2.get_anagrams("preciseness")
    self.assertEqual(r, ['preciseness'])

    _, r = self.anagrams2.get_anagrams("precision")
    self.assertEqual(r, ['precision'])

    _, r = self.anagrams2.get_anagrams("precisions")
    self.assertEqual(r, ['precisions'])

    _, r = self.anagrams2.get_anagrams("preclude")
    self.assertEqual(r, ['preclude'])

    _, r = self.anagrams2.get_anagrams("precluded")
    self.assertEqual(r, ['precluded'])

    _, r = self.anagrams2.get_anagrams("precludes")
    self.assertEqual(r, ['precludes'])

    _, r = self.anagrams2.get_anagrams("precluding")
    self.assertEqual(r, ['precluding'])

    _, r = self.anagrams2.get_anagrams("precocious")
    self.assertEqual(r, ['precocious'])

    _, r = self.anagrams2.get_anagrams("precociously")
    self.assertEqual(r, ['precociously'])

    _, r = self.anagrams2.get_anagrams("precocity")
    self.assertEqual(r, ['precocity'])

    _, r = self.anagrams2.get_anagrams("precompute")
    self.assertEqual(r, ['precompute'])

    _, r = self.anagrams2.get_anagrams("precomputed")
    self.assertEqual(r, ['precomputed'])

    _, r = self.anagrams2.get_anagrams("precomputing")
    self.assertEqual(r, ['precomputing'])

    _, r = self.anagrams2.get_anagrams("preconceive")
    self.assertEqual(r, ['preconceive'])

    _, r = self.anagrams2.get_anagrams("preconceived")
    self.assertEqual(r, ['preconceived'])

    _, r = self.anagrams2.get_anagrams("preconception")
    self.assertEqual(r, ['preconception'])

    _, r = self.anagrams2.get_anagrams("preconceptions")
    self.assertEqual(r, ['preconceptions'])

    _, r = self.anagrams2.get_anagrams("precondition")
    self.assertEqual(r, ['precondition'])

    _, r = self.anagrams2.get_anagrams("preconditioned")
    self.assertEqual(r, ['preconditioned'])

    _, r = self.anagrams2.get_anagrams("preconditions")
    self.assertEqual(r, ['preconditions'])

    _, r = self.anagrams2.get_anagrams("precursor")
    self.assertEqual(r, ['precursor', 'procurers'])

    _, r = self.anagrams2.get_anagrams("precursors")
    self.assertEqual(r, ['precursors'])

    _, r = self.anagrams2.get_anagrams("predate")
    self.assertEqual(r, ['predate', 'tapered'])

    _, r = self.anagrams2.get_anagrams("predated")
    self.assertEqual(r, ['departed', 'predated'])

    _, r = self.anagrams2.get_anagrams("predates")
    self.assertEqual(r, ['predates'])

    _, r = self.anagrams2.get_anagrams("predating")
    self.assertEqual(r, ['departing', 'predating'])

    _, r = self.anagrams2.get_anagrams("predatory")
    self.assertEqual(r, ['portrayed', 'predatory'])

    _, r = self.anagrams2.get_anagrams("predecessor")
    self.assertEqual(r, ['predecessor'])

    _, r = self.anagrams2.get_anagrams("predecessors")
    self.assertEqual(r, ['predecessors'])

    _, r = self.anagrams2.get_anagrams("predefine")
    self.assertEqual(r, ['predefine'])

    _, r = self.anagrams2.get_anagrams("predefined")
    self.assertEqual(r, ['predefined'])

    _, r = self.anagrams2.get_anagrams("predefines")
    self.assertEqual(r, ['predefines'])

    _, r = self.anagrams2.get_anagrams("predefining")
    self.assertEqual(r, ['predefining'])

    _, r = self.anagrams2.get_anagrams("predefinition")
    self.assertEqual(r, ['predefinition'])

    _, r = self.anagrams2.get_anagrams("predefinitions")
    self.assertEqual(r, ['predefinitions'])

    _, r = self.anagrams2.get_anagrams("predetermination")
    self.assertEqual(r, ['predetermination'])

    _, r = self.anagrams2.get_anagrams("predetermine")
    self.assertEqual(r, ['predetermine'])

    _, r = self.anagrams2.get_anagrams("predetermined")
    self.assertEqual(r, ['predetermined'])

    _, r = self.anagrams2.get_anagrams("predetermines")
    self.assertEqual(r, ['predetermines'])

    _, r = self.anagrams2.get_anagrams("predetermining")
    self.assertEqual(r, ['predetermining'])

    _, r = self.anagrams2.get_anagrams("predicament")
    self.assertEqual(r, ['predicament'])

    _, r = self.anagrams2.get_anagrams("predicate")
    self.assertEqual(r, ['predicate'])

    _, r = self.anagrams2.get_anagrams("predicated")
    self.assertEqual(r, ['predicated'])

    _, r = self.anagrams2.get_anagrams("predicates")
    self.assertEqual(r, ['predicates'])

    _, r = self.anagrams2.get_anagrams("predicating")
    self.assertEqual(r, ['predicating'])

    _, r = self.anagrams2.get_anagrams("predication")
    self.assertEqual(r, ['predication'])

    _, r = self.anagrams2.get_anagrams("predications")
    self.assertEqual(r, ['predications'])

    _, r = self.anagrams2.get_anagrams("predict")
    self.assertEqual(r, ['predict'])

    _, r = self.anagrams2.get_anagrams("predictability")
    self.assertEqual(r, ['predictability'])

    _, r = self.anagrams2.get_anagrams("predictable")
    self.assertEqual(r, ['predictable'])

    _, r = self.anagrams2.get_anagrams("predictably")
    self.assertEqual(r, ['predictably'])

    _, r = self.anagrams2.get_anagrams("predicted")
    self.assertEqual(r, ['predicted'])

    _, r = self.anagrams2.get_anagrams("predicting")
    self.assertEqual(r, ['predicting'])

    _, r = self.anagrams2.get_anagrams("prediction")
    self.assertEqual(r, ['prediction'])

    _, r = self.anagrams2.get_anagrams("predictions")
    self.assertEqual(r, ['description', 'predictions'])

    _, r = self.anagrams2.get_anagrams("predictive")
    self.assertEqual(r, ['predictive'])

    _, r = self.anagrams2.get_anagrams("predictor")
    self.assertEqual(r, ['predictor'])

    _, r = self.anagrams2.get_anagrams("predicts")
    self.assertEqual(r, ['predicts'])

    _, r = self.anagrams2.get_anagrams("predilection")
    self.assertEqual(r, ['predilection'])

    _, r = self.anagrams2.get_anagrams("predilections")
    self.assertEqual(r, ['predilections'])

    _, r = self.anagrams2.get_anagrams("predisposition")
    self.assertEqual(r, ['predisposition'])

    _, r = self.anagrams2.get_anagrams("predominant")
    self.assertEqual(r, ['predominant'])

    _, r = self.anagrams2.get_anagrams("predominantly")
    self.assertEqual(r, ['predominantly'])

    _, r = self.anagrams2.get_anagrams("predominate")
    self.assertEqual(r, ['predominate'])

    _, r = self.anagrams2.get_anagrams("predominated")
    self.assertEqual(r, ['predominated'])

    _, r = self.anagrams2.get_anagrams("predominately")
    self.assertEqual(r, ['predominately'])

    _, r = self.anagrams2.get_anagrams("predominates")
    self.assertEqual(r, ['impersonated', 'predominates'])

    _, r = self.anagrams2.get_anagrams("predominating")
    self.assertEqual(r, ['predominating'])

    _, r = self.anagrams2.get_anagrams("predomination")
    self.assertEqual(r, ['predomination'])

    _, r = self.anagrams2.get_anagrams("preeminence")
    self.assertEqual(r, ['preeminence'])

    _, r = self.anagrams2.get_anagrams("preeminent")
    self.assertEqual(r, ['preeminent'])

    _, r = self.anagrams2.get_anagrams("preempt")
    self.assertEqual(r, ['preempt'])

    _, r = self.anagrams2.get_anagrams("preempted")
    self.assertEqual(r, ['preempted'])

    _, r = self.anagrams2.get_anagrams("preempting")
    self.assertEqual(r, ['preempting'])

    _, r = self.anagrams2.get_anagrams("preemption")
    self.assertEqual(r, ['preemption'])

    _, r = self.anagrams2.get_anagrams("preemptive")
    self.assertEqual(r, ['preemptive'])

    _, r = self.anagrams2.get_anagrams("preemptor")
    self.assertEqual(r, ['preemptor'])

    _, r = self.anagrams2.get_anagrams("preempts")
    self.assertEqual(r, ['preempts'])

    _, r = self.anagrams2.get_anagrams("preen")
    self.assertEqual(r, ['preen'])

    _, r = self.anagrams2.get_anagrams("preexisting")
    self.assertEqual(r, ['preexisting'])

    _, r = self.anagrams2.get_anagrams("prefab")
    self.assertEqual(r, ['prefab'])

    _, r = self.anagrams2.get_anagrams("prefabricate")
    self.assertEqual(r, ['prefabricate'])

    _, r = self.anagrams2.get_anagrams("preface")
    self.assertEqual(r, ['preface'])

    _, r = self.anagrams2.get_anagrams("prefaced")
    self.assertEqual(r, ['prefaced'])

    _, r = self.anagrams2.get_anagrams("prefaces")
    self.assertEqual(r, ['prefaces'])

    _, r = self.anagrams2.get_anagrams("prefacing")
    self.assertEqual(r, ['prefacing'])

    _, r = self.anagrams2.get_anagrams("prefer")
    self.assertEqual(r, ['prefer'])

    _, r = self.anagrams2.get_anagrams("preferable")
    self.assertEqual(r, ['preferable'])

    _, r = self.anagrams2.get_anagrams("preferably")
    self.assertEqual(r, ['preferably'])

    _, r = self.anagrams2.get_anagrams("preference")
    self.assertEqual(r, ['preference'])

    _, r = self.anagrams2.get_anagrams("preferences")
    self.assertEqual(r, ['preferences'])

    _, r = self.anagrams2.get_anagrams("preferential")
    self.assertEqual(r, ['preferential'])

    _, r = self.anagrams2.get_anagrams("preferentially")
    self.assertEqual(r, ['preferentially'])

    _, r = self.anagrams2.get_anagrams("preferred")
    self.assertEqual(r, ['preferred'])

    _, r = self.anagrams2.get_anagrams("preferring")
    self.assertEqual(r, ['preferring'])

    _, r = self.anagrams2.get_anagrams("prefers")
    self.assertEqual(r, ['prefers'])

    _, r = self.anagrams2.get_anagrams("prefix")
    self.assertEqual(r, ['prefix'])

    _, r = self.anagrams2.get_anagrams("prefixed")
    self.assertEqual(r, ['prefixed'])

    _, r = self.anagrams2.get_anagrams("prefixes")
    self.assertEqual(r, ['prefixes'])

    _, r = self.anagrams2.get_anagrams("prefixing")
    self.assertEqual(r, ['prefixing'])

    _, r = self.anagrams2.get_anagrams("pregnancy")
    self.assertEqual(r, ['pregnancy'])

    _, r = self.anagrams2.get_anagrams("pregnant")
    self.assertEqual(r, ['pregnant'])

    _, r = self.anagrams2.get_anagrams("prehistoric")
    self.assertEqual(r, ['prehistoric'])

    _, r = self.anagrams2.get_anagrams("preinitialize")
    self.assertEqual(r, ['preinitialize'])

    _, r = self.anagrams2.get_anagrams("preinitialized")
    self.assertEqual(r, ['preinitialized'])

    _, r = self.anagrams2.get_anagrams("preinitializes")
    self.assertEqual(r, ['preinitializes'])

    _, r = self.anagrams2.get_anagrams("preinitializing")
    self.assertEqual(r, ['preinitializing'])

    _, r = self.anagrams2.get_anagrams("prejudge")
    self.assertEqual(r, ['prejudge'])

    _, r = self.anagrams2.get_anagrams("prejudged")
    self.assertEqual(r, ['prejudged'])

    _, r = self.anagrams2.get_anagrams("prejudice")
    self.assertEqual(r, ['prejudice'])

    _, r = self.anagrams2.get_anagrams("prejudiced")
    self.assertEqual(r, ['prejudiced'])

    _, r = self.anagrams2.get_anagrams("prejudices")
    self.assertEqual(r, ['prejudices'])

    _, r = self.anagrams2.get_anagrams("prejudicial")
    self.assertEqual(r, ['prejudicial'])

    _, r = self.anagrams2.get_anagrams("prelate")
    self.assertEqual(r, ['prelate'])

    _, r = self.anagrams2.get_anagrams("preliminaries")
    self.assertEqual(r, ['preliminaries'])

    _, r = self.anagrams2.get_anagrams("preliminary")
    self.assertEqual(r, ['preliminary'])

    _, r = self.anagrams2.get_anagrams("prelude")
    self.assertEqual(r, ['prelude'])

    _, r = self.anagrams2.get_anagrams("preludes")
    self.assertEqual(r, ['preludes', 'repulsed'])

    _, r = self.anagrams2.get_anagrams("premature")
    self.assertEqual(r, ['premature'])

    _, r = self.anagrams2.get_anagrams("prematurely")
    self.assertEqual(r, ['prematurely'])

    _, r = self.anagrams2.get_anagrams("prematurity")
    self.assertEqual(r, ['prematurity'])

    _, r = self.anagrams2.get_anagrams("premeditated")
    self.assertEqual(r, ['premeditated'])

    _, r = self.anagrams2.get_anagrams("premeditation")
    self.assertEqual(r, ['premeditation'])

    _, r = self.anagrams2.get_anagrams("premier")
    self.assertEqual(r, ['premier'])

    _, r = self.anagrams2.get_anagrams("premiers")
    self.assertEqual(r, ['premiers'])

    _, r = self.anagrams2.get_anagrams("premise")
    self.assertEqual(r, ['empires', 'premise'])

    _, r = self.anagrams2.get_anagrams("premises")
    self.assertEqual(r, ['premises'])

    _, r = self.anagrams2.get_anagrams("premium")
    self.assertEqual(r, ['premium'])

    _, r = self.anagrams2.get_anagrams("premiums")
    self.assertEqual(r, ['premiums'])

    _, r = self.anagrams2.get_anagrams("premonition")
    self.assertEqual(r, ['premonition'])

    _, r = self.anagrams2.get_anagrams("prenatal")
    self.assertEqual(r, ['parental', 'paternal', 'prenatal'])

    _, r = self.anagrams2.get_anagrams("prentice")
    self.assertEqual(r, ['prentice'])

    _, r = self.anagrams2.get_anagrams("prenticed")
    self.assertEqual(r, ['prenticed'])

    _, r = self.anagrams2.get_anagrams("prenticing")
    self.assertEqual(r, ['prenticing'])

    _, r = self.anagrams2.get_anagrams("preoccupation")
    self.assertEqual(r, ['preoccupation'])

    _, r = self.anagrams2.get_anagrams("preoccupied")
    self.assertEqual(r, ['preoccupied'])

    _, r = self.anagrams2.get_anagrams("preoccupies")
    self.assertEqual(r, ['preoccupies'])

    _, r = self.anagrams2.get_anagrams("preoccupy")
    self.assertEqual(r, ['preoccupy'])

    _, r = self.anagrams2.get_anagrams("prep")
    self.assertEqual(r, ['prep'])

    _, r = self.anagrams2.get_anagrams("preparation")
    self.assertEqual(r, ['preparation'])

    _, r = self.anagrams2.get_anagrams("preparations")
    self.assertEqual(r, ['preparations'])

    _, r = self.anagrams2.get_anagrams("preparative")
    self.assertEqual(r, ['preparative'])

    _, r = self.anagrams2.get_anagrams("preparatives")
    self.assertEqual(r, ['preparatives'])

    _, r = self.anagrams2.get_anagrams("preparatory")
    self.assertEqual(r, ['preparatory'])

    _, r = self.anagrams2.get_anagrams("prepare")
    self.assertEqual(r, ['paperer', 'prepare'])

    _, r = self.anagrams2.get_anagrams("prepared")
    self.assertEqual(r, ['prepared'])

    _, r = self.anagrams2.get_anagrams("prepares")
    self.assertEqual(r, ['paperers', 'prepares'])

    _, r = self.anagrams2.get_anagrams("preparing")
    self.assertEqual(r, ['preparing'])

    _, r = self.anagrams2.get_anagrams("prepend")
    self.assertEqual(r, ['prepend'])

    _, r = self.anagrams2.get_anagrams("prepended")
    self.assertEqual(r, ['prepended'])

    _, r = self.anagrams2.get_anagrams("prepending")
    self.assertEqual(r, ['prepending'])

    _, r = self.anagrams2.get_anagrams("preposition")
    self.assertEqual(r, ['preposition'])

    _, r = self.anagrams2.get_anagrams("prepositional")
    self.assertEqual(r, ['prepositional'])

    _, r = self.anagrams2.get_anagrams("prepositions")
    self.assertEqual(r, ['prepositions'])

    _, r = self.anagrams2.get_anagrams("preposterous")
    self.assertEqual(r, ['preposterous'])

    _, r = self.anagrams2.get_anagrams("preposterously")
    self.assertEqual(r, ['preposterously'])

    _, r = self.anagrams2.get_anagrams("preprocessed")
    self.assertEqual(r, ['preprocessed'])

    _, r = self.anagrams2.get_anagrams("preprocessing")
    self.assertEqual(r, ['preprocessing'])

    _, r = self.anagrams2.get_anagrams("preprocessor")
    self.assertEqual(r, ['preprocessor'])

    _, r = self.anagrams2.get_anagrams("preprocessors")
    self.assertEqual(r, ['preprocessors'])

    _, r = self.anagrams2.get_anagrams("preproduction")
    self.assertEqual(r, ['preproduction'])

    _, r = self.anagrams2.get_anagrams("preprogrammed")
    self.assertEqual(r, ['preprogrammed'])

    _, r = self.anagrams2.get_anagrams("prerequisite")
    self.assertEqual(r, ['prerequisite'])

    _, r = self.anagrams2.get_anagrams("prerequisites")
    self.assertEqual(r, ['prerequisites'])

    _, r = self.anagrams2.get_anagrams("prerogative")
    self.assertEqual(r, ['prerogative'])

    _, r = self.anagrams2.get_anagrams("prerogatives")
    self.assertEqual(r, ['prerogatives'])

    _, r = self.anagrams2.get_anagrams("presbyterian")
    self.assertEqual(r, ['presbyterian'])

    _, r = self.anagrams2.get_anagrams("presbyterianism")
    self.assertEqual(r, ['presbyterianism'])

    _, r = self.anagrams2.get_anagrams("presbyterianize")
    self.assertEqual(r, ['presbyterianize'])

    _, r = self.anagrams2.get_anagrams("presbyterianizes")
    self.assertEqual(r, ['presbyterianizes'])

    _, r = self.anagrams2.get_anagrams("prescott")
    self.assertEqual(r, ['prescott', 'protects'])

    _, r = self.anagrams2.get_anagrams("prescribe")
    self.assertEqual(r, ['prescribe'])

    _, r = self.anagrams2.get_anagrams("prescribed")
    self.assertEqual(r, ['prescribed'])

    _, r = self.anagrams2.get_anagrams("prescribes")
    self.assertEqual(r, ['prescribes'])

    _, r = self.anagrams2.get_anagrams("prescription")
    self.assertEqual(r, ['prescription'])

    _, r = self.anagrams2.get_anagrams("prescriptions")
    self.assertEqual(r, ['prescriptions'])

    _, r = self.anagrams2.get_anagrams("prescriptive")
    self.assertEqual(r, ['prescriptive'])

    _, r = self.anagrams2.get_anagrams("preselect")
    self.assertEqual(r, ['preselect'])

    _, r = self.anagrams2.get_anagrams("preselected")
    self.assertEqual(r, ['preselected'])

    _, r = self.anagrams2.get_anagrams("preselecting")
    self.assertEqual(r, ['preselecting'])

    _, r = self.anagrams2.get_anagrams("preselects")
    self.assertEqual(r, ['preselects'])

    _, r = self.anagrams2.get_anagrams("presence")
    self.assertEqual(r, ['presence'])

    _, r = self.anagrams2.get_anagrams("presences")
    self.assertEqual(r, ['presences'])

    _, r = self.anagrams2.get_anagrams("present")
    self.assertEqual(r, ['present', 'repents', 'serpent'])

    _, r = self.anagrams2.get_anagrams("presentation")
    self.assertEqual(r, ['penetrations', 'presentation'])

    _, r = self.anagrams2.get_anagrams("presentations")
    self.assertEqual(r, ['presentations'])

    _, r = self.anagrams2.get_anagrams("presented")
    self.assertEqual(r, ['presented'])

    _, r = self.anagrams2.get_anagrams("presenter")
    self.assertEqual(r, ['presenter', 'represent'])

    _, r = self.anagrams2.get_anagrams("presenting")
    self.assertEqual(r, ['presenting'])

    _, r = self.anagrams2.get_anagrams("presently")
    self.assertEqual(r, ['presently'])

    _, r = self.anagrams2.get_anagrams("presentness")
    self.assertEqual(r, ['presentness'])

    _, r = self.anagrams2.get_anagrams("presents")
    self.assertEqual(r, ['presents', 'serpents'])

    _, r = self.anagrams2.get_anagrams("preservation")
    self.assertEqual(r, ['preservation'])

    _, r = self.anagrams2.get_anagrams("preservations")
    self.assertEqual(r, ['preservations'])

    _, r = self.anagrams2.get_anagrams("preserve")
    self.assertEqual(r, ['preserve'])

    _, r = self.anagrams2.get_anagrams("preserved")
    self.assertEqual(r, ['preserved'])

    _, r = self.anagrams2.get_anagrams("preserver")
    self.assertEqual(r, ['preserver'])

    _, r = self.anagrams2.get_anagrams("preservers")
    self.assertEqual(r, ['preservers'])

    _, r = self.anagrams2.get_anagrams("preserves")
    self.assertEqual(r, ['preserves'])

    _, r = self.anagrams2.get_anagrams("preserving")
    self.assertEqual(r, ['preserving'])

    _, r = self.anagrams2.get_anagrams("preset")
    self.assertEqual(r, ['pester', 'peters', 'preset'])

    _, r = self.anagrams2.get_anagrams("preside")
    self.assertEqual(r, ['perseid', 'preside'])

    _, r = self.anagrams2.get_anagrams("presided")
    self.assertEqual(r, ['presided'])

    _, r = self.anagrams2.get_anagrams("presidency")
    self.assertEqual(r, ['presidency'])

    _, r = self.anagrams2.get_anagrams("president")
    self.assertEqual(r, ['president'])

    _, r = self.anagrams2.get_anagrams("presidential")
    self.assertEqual(r, ['presidential'])

    _, r = self.anagrams2.get_anagrams("presidents")
    self.assertEqual(r, ['presidents'])

    _, r = self.anagrams2.get_anagrams("presides")
    self.assertEqual(r, ['disperse', 'presides'])

    _, r = self.anagrams2.get_anagrams("presiding")
    self.assertEqual(r, ['presiding'])

    _, r = self.anagrams2.get_anagrams("presley")
    self.assertEqual(r, ['presley'])

    _, r = self.anagrams2.get_anagrams("press")
    self.assertEqual(r, ['press'])

    _, r = self.anagrams2.get_anagrams("pressed")
    self.assertEqual(r, ['depress', 'pressed'])

    _, r = self.anagrams2.get_anagrams("presser")
    self.assertEqual(r, ['presser', 'repress'])

    _, r = self.anagrams2.get_anagrams("presses")
    self.assertEqual(r, ['presses'])

    _, r = self.anagrams2.get_anagrams("pressing")
    self.assertEqual(r, ['pressing'])

    _, r = self.anagrams2.get_anagrams("pressings")
    self.assertEqual(r, ['pressings'])

    _, r = self.anagrams2.get_anagrams("pressure")
    self.assertEqual(r, ['perusers', 'pressure'])

    _, r = self.anagrams2.get_anagrams("pressured")
    self.assertEqual(r, ['pressured'])

    _, r = self.anagrams2.get_anagrams("pressures")
    self.assertEqual(r, ['pressures'])

    _, r = self.anagrams2.get_anagrams("pressuring")
    self.assertEqual(r, ['pressuring'])

    _, r = self.anagrams2.get_anagrams("pressurize")
    self.assertEqual(r, ['pressurize'])

    _, r = self.anagrams2.get_anagrams("pressurized")
    self.assertEqual(r, ['pressurized'])

    _, r = self.anagrams2.get_anagrams("prestidigitate")
    self.assertEqual(r, ['prestidigitate'])

    _, r = self.anagrams2.get_anagrams("prestige")
    self.assertEqual(r, ['prestige'])

    _, r = self.anagrams2.get_anagrams("prestigious")
    self.assertEqual(r, ['prestigious'])

    _, r = self.anagrams2.get_anagrams("preston")
    self.assertEqual(r, ['preston'])

    _, r = self.anagrams2.get_anagrams("presumably")
    self.assertEqual(r, ['presumably'])

    _, r = self.anagrams2.get_anagrams("presume")
    self.assertEqual(r, ['presume', 'supreme'])

    _, r = self.anagrams2.get_anagrams("presumed")
    self.assertEqual(r, ['presumed'])

    _, r = self.anagrams2.get_anagrams("presumes")
    self.assertEqual(r, ['presumes'])

    _, r = self.anagrams2.get_anagrams("presuming")
    self.assertEqual(r, ['presuming'])

    _, r = self.anagrams2.get_anagrams("presumption")
    self.assertEqual(r, ['presumption'])

    _, r = self.anagrams2.get_anagrams("presumptions")
    self.assertEqual(r, ['presumptions'])

    _, r = self.anagrams2.get_anagrams("presumptive")
    self.assertEqual(r, ['presumptive'])

    _, r = self.anagrams2.get_anagrams("presumptuous")
    self.assertEqual(r, ['presumptuous'])

    _, r = self.anagrams2.get_anagrams("presumptuousness")
    self.assertEqual(r, ['presumptuousness'])

    _, r = self.anagrams2.get_anagrams("presuppose")
    self.assertEqual(r, ['presuppose'])

    _, r = self.anagrams2.get_anagrams("presupposed")
    self.assertEqual(r, ['presupposed'])

    _, r = self.anagrams2.get_anagrams("presupposes")
    self.assertEqual(r, ['presupposes'])

    _, r = self.anagrams2.get_anagrams("presupposing")
    self.assertEqual(r, ['presupposing'])

    _, r = self.anagrams2.get_anagrams("presupposition")
    self.assertEqual(r, ['presupposition'])

    _, r = self.anagrams2.get_anagrams("pretend")
    self.assertEqual(r, ['pretend'])

    _, r = self.anagrams2.get_anagrams("pretended")
    self.assertEqual(r, ['pretended'])

    _, r = self.anagrams2.get_anagrams("pretender")
    self.assertEqual(r, ['pretender'])

    _, r = self.anagrams2.get_anagrams("pretenders")
    self.assertEqual(r, ['pretenders'])

    _, r = self.anagrams2.get_anagrams("pretending")
    self.assertEqual(r, ['pretending'])

    _, r = self.anagrams2.get_anagrams("pretends")
    self.assertEqual(r, ['pretends'])

    _, r = self.anagrams2.get_anagrams("pretense")
    self.assertEqual(r, ['petersen', 'pretense'])

    _, r = self.anagrams2.get_anagrams("pretenses")
    self.assertEqual(r, ['pretenses'])

    _, r = self.anagrams2.get_anagrams("pretension")
    self.assertEqual(r, ['pretension'])

    _, r = self.anagrams2.get_anagrams("pretensions")
    self.assertEqual(r, ['pretensions'])

    _, r = self.anagrams2.get_anagrams("pretentious")
    self.assertEqual(r, ['pretentious'])

    _, r = self.anagrams2.get_anagrams("pretentiously")
    self.assertEqual(r, ['pretentiously'])

    _, r = self.anagrams2.get_anagrams("pretentiousness")
    self.assertEqual(r, ['pretentiousness'])

    _, r = self.anagrams2.get_anagrams("pretext")
    self.assertEqual(r, ['pretext'])

    _, r = self.anagrams2.get_anagrams("pretexts")
    self.assertEqual(r, ['pretexts'])

    _, r = self.anagrams2.get_anagrams("pretoria")
    self.assertEqual(r, ['pretoria'])

    _, r = self.anagrams2.get_anagrams("pretorian")
    self.assertEqual(r, ['pretorian'])

    _, r = self.anagrams2.get_anagrams("prettier")
    self.assertEqual(r, ['prettier'])

    _, r = self.anagrams2.get_anagrams("prettiest")
    self.assertEqual(r, ['prettiest'])

    _, r = self.anagrams2.get_anagrams("prettily")
    self.assertEqual(r, ['prettily'])

    _, r = self.anagrams2.get_anagrams("prettiness")
    self.assertEqual(r, ['persistent', 'prettiness'])

    _, r = self.anagrams2.get_anagrams("pretty")
    self.assertEqual(r, ['pretty'])

    _, r = self.anagrams2.get_anagrams("prevail")
    self.assertEqual(r, ['prevail'])

    _, r = self.anagrams2.get_anagrams("prevailed")
    self.assertEqual(r, ['prevailed'])

    _, r = self.anagrams2.get_anagrams("prevailing")
    self.assertEqual(r, ['prevailing'])

    _, r = self.anagrams2.get_anagrams("prevailingly")
    self.assertEqual(r, ['prevailingly'])

    _, r = self.anagrams2.get_anagrams("prevails")
    self.assertEqual(r, ['prevails'])

    _, r = self.anagrams2.get_anagrams("prevalence")
    self.assertEqual(r, ['prevalence'])

    _, r = self.anagrams2.get_anagrams("prevalent")
    self.assertEqual(r, ['prevalent'])

    _, r = self.anagrams2.get_anagrams("prevalently")
    self.assertEqual(r, ['prevalently'])

    _, r = self.anagrams2.get_anagrams("prevent")
    self.assertEqual(r, ['prevent'])

    _, r = self.anagrams2.get_anagrams("preventable")
    self.assertEqual(r, ['preventable'])

    _, r = self.anagrams2.get_anagrams("preventably")
    self.assertEqual(r, ['preventably'])

    _, r = self.anagrams2.get_anagrams("prevented")
    self.assertEqual(r, ['prevented'])

    _, r = self.anagrams2.get_anagrams("preventing")
    self.assertEqual(r, ['preventing'])

    _, r = self.anagrams2.get_anagrams("prevention")
    self.assertEqual(r, ['prevention'])

    _, r = self.anagrams2.get_anagrams("preventive")
    self.assertEqual(r, ['preventive'])

    _, r = self.anagrams2.get_anagrams("preventives")
    self.assertEqual(r, ['preventives'])

    _, r = self.anagrams2.get_anagrams("prevents")
    self.assertEqual(r, ['prevents'])

    _, r = self.anagrams2.get_anagrams("preview")
    self.assertEqual(r, ['preview'])

    _, r = self.anagrams2.get_anagrams("previewed")
    self.assertEqual(r, ['previewed'])

    _, r = self.anagrams2.get_anagrams("previewing")
    self.assertEqual(r, ['previewing'])

    _, r = self.anagrams2.get_anagrams("previews")
    self.assertEqual(r, ['previews'])

    _, r = self.anagrams2.get_anagrams("previous")
    self.assertEqual(r, ['previous'])

    _, r = self.anagrams2.get_anagrams("previously")
    self.assertEqual(r, ['previously'])

    _, r = self.anagrams2.get_anagrams("prey")
    self.assertEqual(r, ['prey', 'pyre'])

    _, r = self.anagrams2.get_anagrams("preyed")
    self.assertEqual(r, ['preyed'])

    _, r = self.anagrams2.get_anagrams("preying")
    self.assertEqual(r, ['preying'])

    _, r = self.anagrams2.get_anagrams("preys")
    self.assertEqual(r, ['preys'])

    _, r = self.anagrams2.get_anagrams("priam")
    self.assertEqual(r, ['priam', 'prima'])

    _, r = self.anagrams2.get_anagrams("price")
    self.assertEqual(r, ['price'])

    _, r = self.anagrams2.get_anagrams("priced")
    self.assertEqual(r, ['priced'])

    _, r = self.anagrams2.get_anagrams("priceless")
    self.assertEqual(r, ['priceless'])

    _, r = self.anagrams2.get_anagrams("pricer")
    self.assertEqual(r, ['pricer'])

    _, r = self.anagrams2.get_anagrams("pricers")
    self.assertEqual(r, ['pricers'])

    _, r = self.anagrams2.get_anagrams("prices")
    self.assertEqual(r, ['prices'])

    _, r = self.anagrams2.get_anagrams("pricing")
    self.assertEqual(r, ['pricing'])

    _, r = self.anagrams2.get_anagrams("prick")
    self.assertEqual(r, ['prick'])

    _, r = self.anagrams2.get_anagrams("pricked")
    self.assertEqual(r, ['pricked'])

    _, r = self.anagrams2.get_anagrams("pricking")
    self.assertEqual(r, ['pricking'])

    _, r = self.anagrams2.get_anagrams("prickly")
    self.assertEqual(r, ['prickly'])

    _, r = self.anagrams2.get_anagrams("pricks")
    self.assertEqual(r, ['pricks'])

    _, r = self.anagrams2.get_anagrams("pride")
    self.assertEqual(r, ['pride'])

    _, r = self.anagrams2.get_anagrams("prided")
    self.assertEqual(r, ['prided'])

    _, r = self.anagrams2.get_anagrams("prides")
    self.assertEqual(r, ['prides', 'spider'])

    _, r = self.anagrams2.get_anagrams("priding")
    self.assertEqual(r, ['priding'])

    _, r = self.anagrams2.get_anagrams("priest")
    self.assertEqual(r, ['esprit', 'priest', 'sprite', 'stripe'])

    _, r = self.anagrams2.get_anagrams("priestley")
    self.assertEqual(r, ['priestley'])

    _, r = self.anagrams2.get_anagrams("priggish")
    self.assertEqual(r, ['priggish'])

    _, r = self.anagrams2.get_anagrams("prim")
    self.assertEqual(r, ['prim'])

    _, r = self.anagrams2.get_anagrams("prima")
    self.assertEqual(r, ['priam', 'prima'])

    _, r = self.anagrams2.get_anagrams("primacy")
    self.assertEqual(r, ['primacy'])

    _, r = self.anagrams2.get_anagrams("primal")
    self.assertEqual(r, ['primal'])

    _, r = self.anagrams2.get_anagrams("primaries")
    self.assertEqual(r, ['primaries'])

    _, r = self.anagrams2.get_anagrams("primarily")
    self.assertEqual(r, ['primarily'])

    _, r = self.anagrams2.get_anagrams("primary")
    self.assertEqual(r, ['primary'])

    _, r = self.anagrams2.get_anagrams("primate")
    self.assertEqual(r, ['primate'])

    _, r = self.anagrams2.get_anagrams("prime")
    self.assertEqual(r, ['prime'])

    _, r = self.anagrams2.get_anagrams("primed")
    self.assertEqual(r, ['primed'])

    _, r = self.anagrams2.get_anagrams("primeness")
    self.assertEqual(r, ['primeness'])

    _, r = self.anagrams2.get_anagrams("primer")
    self.assertEqual(r, ['primer'])

    _, r = self.anagrams2.get_anagrams("primers")
    self.assertEqual(r, ['primers'])

    _, r = self.anagrams2.get_anagrams("primes")
    self.assertEqual(r, ['primes'])

    _, r = self.anagrams2.get_anagrams("primeval")
    self.assertEqual(r, ['primeval'])

    _, r = self.anagrams2.get_anagrams("priming")
    self.assertEqual(r, ['priming'])

    _, r = self.anagrams2.get_anagrams("primitive")
    self.assertEqual(r, ['primitive'])

    _, r = self.anagrams2.get_anagrams("primitively")
    self.assertEqual(r, ['primitively'])

    _, r = self.anagrams2.get_anagrams("primitiveness")
    self.assertEqual(r, ['primitiveness'])

    _, r = self.anagrams2.get_anagrams("primitives")
    self.assertEqual(r, ['primitives'])

    _, r = self.anagrams2.get_anagrams("primrose")
    self.assertEqual(r, ['primrose'])

    _, r = self.anagrams2.get_anagrams("prince")
    self.assertEqual(r, ['prince'])

    _, r = self.anagrams2.get_anagrams("princely")
    self.assertEqual(r, ['princely'])

    _, r = self.anagrams2.get_anagrams("princes")
    self.assertEqual(r, ['princes'])

    _, r = self.anagrams2.get_anagrams("princess")
    self.assertEqual(r, ['princess'])

    _, r = self.anagrams2.get_anagrams("princesses")
    self.assertEqual(r, ['princesses'])

    _, r = self.anagrams2.get_anagrams("princeton")
    self.assertEqual(r, ['princeton'])

    _, r = self.anagrams2.get_anagrams("principal")
    self.assertEqual(r, ['principal'])

    _, r = self.anagrams2.get_anagrams("principalities")
    self.assertEqual(r, ['principalities'])

    _, r = self.anagrams2.get_anagrams("principality")
    self.assertEqual(r, ['principality'])

    _, r = self.anagrams2.get_anagrams("principally")
    self.assertEqual(r, ['principally'])

    _, r = self.anagrams2.get_anagrams("principals")
    self.assertEqual(r, ['principals'])

    _, r = self.anagrams2.get_anagrams("principia")
    self.assertEqual(r, ['principia'])

    _, r = self.anagrams2.get_anagrams("principle")
    self.assertEqual(r, ['principle'])

    _, r = self.anagrams2.get_anagrams("principled")
    self.assertEqual(r, ['principled'])

    _, r = self.anagrams2.get_anagrams("principles")
    self.assertEqual(r, ['principles'])

    _, r = self.anagrams2.get_anagrams("print")
    self.assertEqual(r, ['print'])

    _, r = self.anagrams2.get_anagrams("printable")
    self.assertEqual(r, ['printable'])

    _, r = self.anagrams2.get_anagrams("printably")
    self.assertEqual(r, ['printably'])

    _, r = self.anagrams2.get_anagrams("printed")
    self.assertEqual(r, ['printed'])

    _, r = self.anagrams2.get_anagrams("printer")
    self.assertEqual(r, ['printer', 'reprint'])

    _, r = self.anagrams2.get_anagrams("printers")
    self.assertEqual(r, ['printers', 'reprints', 'sprinter'])

    _, r = self.anagrams2.get_anagrams("printing")
    self.assertEqual(r, ['printing'])

    _, r = self.anagrams2.get_anagrams("printout")
    self.assertEqual(r, ['printout'])

    _, r = self.anagrams2.get_anagrams("prints")
    self.assertEqual(r, ['prints', 'sprint'])

    _, r = self.anagrams2.get_anagrams("prior")
    self.assertEqual(r, ['prior'])

    _, r = self.anagrams2.get_anagrams("priori")
    self.assertEqual(r, ['priori'])

    _, r = self.anagrams2.get_anagrams("priorities")
    self.assertEqual(r, ['priorities'])

    _, r = self.anagrams2.get_anagrams("priority")
    self.assertEqual(r, ['priority'])

    _, r = self.anagrams2.get_anagrams("priory")
    self.assertEqual(r, ['priory'])

    _, r = self.anagrams2.get_anagrams("priscilla")
    self.assertEqual(r, ['priscilla'])

    _, r = self.anagrams2.get_anagrams("prism")
    self.assertEqual(r, ['prism'])

    _, r = self.anagrams2.get_anagrams("prisms")
    self.assertEqual(r, ['prisms'])

    _, r = self.anagrams2.get_anagrams("prison")
    self.assertEqual(r, ['prison'])

    _, r = self.anagrams2.get_anagrams("prisoner")
    self.assertEqual(r, ['prisoner'])

    _, r = self.anagrams2.get_anagrams("prisoners")
    self.assertEqual(r, ['prisoners'])

    _, r = self.anagrams2.get_anagrams("prisons")
    self.assertEqual(r, ['prisons'])

    _, r = self.anagrams2.get_anagrams("pristine")
    self.assertEqual(r, ['pristine'])

    _, r = self.anagrams2.get_anagrams("pritchard")
    self.assertEqual(r, ['pritchard'])

    _, r = self.anagrams2.get_anagrams("privacies")
    self.assertEqual(r, ['privacies'])

    _, r = self.anagrams2.get_anagrams("privacy")
    self.assertEqual(r, ['privacy'])

    _, r = self.anagrams2.get_anagrams("private")
    self.assertEqual(r, ['private'])

    _, r = self.anagrams2.get_anagrams("privately")
    self.assertEqual(r, ['privately'])

    _, r = self.anagrams2.get_anagrams("privates")
    self.assertEqual(r, ['privates'])

    _, r = self.anagrams2.get_anagrams("privation")
    self.assertEqual(r, ['privation'])

    _, r = self.anagrams2.get_anagrams("privations")
    self.assertEqual(r, ['privations'])

    _, r = self.anagrams2.get_anagrams("privies")
    self.assertEqual(r, ['privies'])

    _, r = self.anagrams2.get_anagrams("privilege")
    self.assertEqual(r, ['privilege'])

    _, r = self.anagrams2.get_anagrams("privileged")
    self.assertEqual(r, ['privileged'])

    _, r = self.anagrams2.get_anagrams("privileges")
    self.assertEqual(r, ['privileges'])

    _, r = self.anagrams2.get_anagrams("privy")
    self.assertEqual(r, ['privy'])

    _, r = self.anagrams2.get_anagrams("prize")
    self.assertEqual(r, ['prize'])

    _, r = self.anagrams2.get_anagrams("prized")
    self.assertEqual(r, ['prized'])

    _, r = self.anagrams2.get_anagrams("prizer")
    self.assertEqual(r, ['prizer'])

    _, r = self.anagrams2.get_anagrams("prizers")
    self.assertEqual(r, ['prizers'])

    _, r = self.anagrams2.get_anagrams("prizes")
    self.assertEqual(r, ['prizes'])

    _, r = self.anagrams2.get_anagrams("prizewinning")
    self.assertEqual(r, ['prizewinning'])

    _, r = self.anagrams2.get_anagrams("prizing")
    self.assertEqual(r, ['prizing'])

    _, r = self.anagrams2.get_anagrams("pro")
    self.assertEqual(r, ['pro'])

    _, r = self.anagrams2.get_anagrams("probabilistic")
    self.assertEqual(r, ['probabilistic'])

    _, r = self.anagrams2.get_anagrams("probabilistically")
    self.assertEqual(r, ['probabilistically'])

    _, r = self.anagrams2.get_anagrams("probabilities")
    self.assertEqual(r, ['probabilities'])

    _, r = self.anagrams2.get_anagrams("probability")
    self.assertEqual(r, ['probability'])

    _, r = self.anagrams2.get_anagrams("probable")
    self.assertEqual(r, ['probable'])

    _, r = self.anagrams2.get_anagrams("probably")
    self.assertEqual(r, ['probably'])

    _, r = self.anagrams2.get_anagrams("probate")
    self.assertEqual(r, ['probate'])

    _, r = self.anagrams2.get_anagrams("probated")
    self.assertEqual(r, ['probated'])

    _, r = self.anagrams2.get_anagrams("probates")
    self.assertEqual(r, ['probates'])

    _, r = self.anagrams2.get_anagrams("probating")
    self.assertEqual(r, ['probating'])

    _, r = self.anagrams2.get_anagrams("probation")
    self.assertEqual(r, ['probation'])

    _, r = self.anagrams2.get_anagrams("probative")
    self.assertEqual(r, ['probative'])

    _, r = self.anagrams2.get_anagrams("probe")
    self.assertEqual(r, ['probe'])

    _, r = self.anagrams2.get_anagrams("probed")
    self.assertEqual(r, ['probed'])

    _, r = self.anagrams2.get_anagrams("probes")
    self.assertEqual(r, ['probes'])

    _, r = self.anagrams2.get_anagrams("probing")
    self.assertEqual(r, ['probing'])

    _, r = self.anagrams2.get_anagrams("probings")
    self.assertEqual(r, ['probings'])

    _, r = self.anagrams2.get_anagrams("probity")
    self.assertEqual(r, ['probity'])

    _, r = self.anagrams2.get_anagrams("problem")
    self.assertEqual(r, ['problem'])

    _, r = self.anagrams2.get_anagrams("problematic")
    self.assertEqual(r, ['problematic'])

    _, r = self.anagrams2.get_anagrams("problematical")
    self.assertEqual(r, ['problematical'])

    _, r = self.anagrams2.get_anagrams("problematically")
    self.assertEqual(r, ['problematically'])

    _, r = self.anagrams2.get_anagrams("problems")
    self.assertEqual(r, ['problems'])

    _, r = self.anagrams2.get_anagrams("procaine")
    self.assertEqual(r, ['poincare', 'procaine'])

    _, r = self.anagrams2.get_anagrams("procedural")
    self.assertEqual(r, ['procedural'])

    _, r = self.anagrams2.get_anagrams("procedurally")
    self.assertEqual(r, ['procedurally'])

    _, r = self.anagrams2.get_anagrams("procedure")
    self.assertEqual(r, ['procedure', 'reproduce'])

    _, r = self.anagrams2.get_anagrams("procedures")
    self.assertEqual(r, ['procedures', 'reproduces'])

    _, r = self.anagrams2.get_anagrams("proceed")
    self.assertEqual(r, ['proceed'])

    _, r = self.anagrams2.get_anagrams("proceeded")
    self.assertEqual(r, ['proceeded'])

    _, r = self.anagrams2.get_anagrams("proceeding")
    self.assertEqual(r, ['proceeding'])

    _, r = self.anagrams2.get_anagrams("proceedings")
    self.assertEqual(r, ['proceedings'])

    _, r = self.anagrams2.get_anagrams("proceeds")
    self.assertEqual(r, ['proceeds'])

    _, r = self.anagrams2.get_anagrams("process")
    self.assertEqual(r, ['corpses', 'process'])

    _, r = self.anagrams2.get_anagrams("processed")
    self.assertEqual(r, ['processed'])

    _, r = self.anagrams2.get_anagrams("processes")
    self.assertEqual(r, ['processes'])

    _, r = self.anagrams2.get_anagrams("processing")
    self.assertEqual(r, ['processing'])

    _, r = self.anagrams2.get_anagrams("procession")
    self.assertEqual(r, ['procession'])

    _, r = self.anagrams2.get_anagrams("processor")
    self.assertEqual(r, ['processor'])

    _, r = self.anagrams2.get_anagrams("processors")
    self.assertEqual(r, ['processors'])

    _, r = self.anagrams2.get_anagrams("proclaim")
    self.assertEqual(r, ['proclaim'])

    _, r = self.anagrams2.get_anagrams("proclaimed")
    self.assertEqual(r, ['proclaimed'])

    _, r = self.anagrams2.get_anagrams("proclaimer")
    self.assertEqual(r, ['proclaimer'])

    _, r = self.anagrams2.get_anagrams("proclaimers")
    self.assertEqual(r, ['proclaimers'])

    _, r = self.anagrams2.get_anagrams("proclaiming")
    self.assertEqual(r, ['proclaiming'])

    _, r = self.anagrams2.get_anagrams("proclaims")
    self.assertEqual(r, ['proclaims'])

    _, r = self.anagrams2.get_anagrams("proclamation")
    self.assertEqual(r, ['proclamation'])

    _, r = self.anagrams2.get_anagrams("proclamations")
    self.assertEqual(r, ['proclamations'])

    _, r = self.anagrams2.get_anagrams("proclivities")
    self.assertEqual(r, ['proclivities'])

    _, r = self.anagrams2.get_anagrams("proclivity")
    self.assertEqual(r, ['proclivity'])

    _, r = self.anagrams2.get_anagrams("procotols")
    self.assertEqual(r, ['procotols', 'protocols'])

    _, r = self.anagrams2.get_anagrams("procrastinate")
    self.assertEqual(r, ['procrastinate'])

    _, r = self.anagrams2.get_anagrams("procrastinated")
    self.assertEqual(r, ['procrastinated'])

    _, r = self.anagrams2.get_anagrams("procrastinates")
    self.assertEqual(r, ['procrastinates'])

    _, r = self.anagrams2.get_anagrams("procrastinating")
    self.assertEqual(r, ['procrastinating'])

    _, r = self.anagrams2.get_anagrams("procrastination")
    self.assertEqual(r, ['procrastination'])

    _, r = self.anagrams2.get_anagrams("procreate")
    self.assertEqual(r, ['procreate'])

    _, r = self.anagrams2.get_anagrams("procrustean")
    self.assertEqual(r, ['procrustean'])

    _, r = self.anagrams2.get_anagrams("procrusteanize")
    self.assertEqual(r, ['procrusteanize'])

    _, r = self.anagrams2.get_anagrams("procrusteanizes")
    self.assertEqual(r, ['procrusteanizes'])

    _, r = self.anagrams2.get_anagrams("procrustes")
    self.assertEqual(r, ['procrustes'])

    _, r = self.anagrams2.get_anagrams("procter")
    self.assertEqual(r, ['procter'])

    _, r = self.anagrams2.get_anagrams("procure")
    self.assertEqual(r, ['procure'])

    _, r = self.anagrams2.get_anagrams("procured")
    self.assertEqual(r, ['procured', 'producer'])

    _, r = self.anagrams2.get_anagrams("procurement")
    self.assertEqual(r, ['procurement'])

    _, r = self.anagrams2.get_anagrams("procurements")
    self.assertEqual(r, ['procurements'])

    _, r = self.anagrams2.get_anagrams("procurer")
    self.assertEqual(r, ['procurer'])

    _, r = self.anagrams2.get_anagrams("procurers")
    self.assertEqual(r, ['precursor', 'procurers'])

    _, r = self.anagrams2.get_anagrams("procures")
    self.assertEqual(r, ['procures'])

    _, r = self.anagrams2.get_anagrams("procuring")
    self.assertEqual(r, ['procuring'])

    _, r = self.anagrams2.get_anagrams("procyon")
    self.assertEqual(r, ['procyon'])

    _, r = self.anagrams2.get_anagrams("prod")
    self.assertEqual(r, ['drop', 'prod'])

    _, r = self.anagrams2.get_anagrams("prodigal")
    self.assertEqual(r, ['prodigal'])

    _, r = self.anagrams2.get_anagrams("prodigally")
    self.assertEqual(r, ['prodigally'])

    _, r = self.anagrams2.get_anagrams("prodigious")
    self.assertEqual(r, ['prodigious'])

    _, r = self.anagrams2.get_anagrams("prodigy")
    self.assertEqual(r, ['prodigy'])

    _, r = self.anagrams2.get_anagrams("produce")
    self.assertEqual(r, ['produce'])

    _, r = self.anagrams2.get_anagrams("produced")
    self.assertEqual(r, ['produced'])

    _, r = self.anagrams2.get_anagrams("producer")
    self.assertEqual(r, ['procured', 'producer'])

    _, r = self.anagrams2.get_anagrams("producers")
    self.assertEqual(r, ['producers'])

    _, r = self.anagrams2.get_anagrams("produces")
    self.assertEqual(r, ['produces'])

    _, r = self.anagrams2.get_anagrams("producible")
    self.assertEqual(r, ['producible'])

    _, r = self.anagrams2.get_anagrams("producing")
    self.assertEqual(r, ['producing'])

    _, r = self.anagrams2.get_anagrams("product")
    self.assertEqual(r, ['product'])

    _, r = self.anagrams2.get_anagrams("production")
    self.assertEqual(r, ['production'])

    _, r = self.anagrams2.get_anagrams("productions")
    self.assertEqual(r, ['productions'])

    _, r = self.anagrams2.get_anagrams("productive")
    self.assertEqual(r, ['productive'])

    _, r = self.anagrams2.get_anagrams("productively")
    self.assertEqual(r, ['productively'])

    _, r = self.anagrams2.get_anagrams("productivity")
    self.assertEqual(r, ['productivity'])

    _, r = self.anagrams2.get_anagrams("products")
    self.assertEqual(r, ['products'])

    _, r = self.anagrams2.get_anagrams("profane")
    self.assertEqual(r, ['profane'])

    _, r = self.anagrams2.get_anagrams("profanely")
    self.assertEqual(r, ['profanely'])

    _, r = self.anagrams2.get_anagrams("profess")
    self.assertEqual(r, ['profess'])

    _, r = self.anagrams2.get_anagrams("professed")
    self.assertEqual(r, ['professed'])

    _, r = self.anagrams2.get_anagrams("professes")
    self.assertEqual(r, ['professes'])

    _, r = self.anagrams2.get_anagrams("professing")
    self.assertEqual(r, ['professing'])

    _, r = self.anagrams2.get_anagrams("profession")
    self.assertEqual(r, ['profession'])

    _, r = self.anagrams2.get_anagrams("professional")
    self.assertEqual(r, ['professional'])

    _, r = self.anagrams2.get_anagrams("professionalism")
    self.assertEqual(r, ['professionalism'])

    _, r = self.anagrams2.get_anagrams("professionally")
    self.assertEqual(r, ['professionally'])

    _, r = self.anagrams2.get_anagrams("professionals")
    self.assertEqual(r, ['professionals'])

    _, r = self.anagrams2.get_anagrams("professions")
    self.assertEqual(r, ['professions'])

    _, r = self.anagrams2.get_anagrams("professor")
    self.assertEqual(r, ['professor'])

    _, r = self.anagrams2.get_anagrams("professorial")
    self.assertEqual(r, ['professorial'])

    _, r = self.anagrams2.get_anagrams("professors")
    self.assertEqual(r, ['professors'])

    _, r = self.anagrams2.get_anagrams("proffer")
    self.assertEqual(r, ['proffer'])

    _, r = self.anagrams2.get_anagrams("proffered")
    self.assertEqual(r, ['proffered'])

    _, r = self.anagrams2.get_anagrams("proffers")
    self.assertEqual(r, ['proffers'])

    _, r = self.anagrams2.get_anagrams("proficiency")
    self.assertEqual(r, ['proficiency'])

    _, r = self.anagrams2.get_anagrams("proficient")
    self.assertEqual(r, ['proficient'])

    _, r = self.anagrams2.get_anagrams("proficiently")
    self.assertEqual(r, ['proficiently'])

    _, r = self.anagrams2.get_anagrams("profile")
    self.assertEqual(r, ['profile'])

    _, r = self.anagrams2.get_anagrams("profiled")
    self.assertEqual(r, ['profiled'])

    _, r = self.anagrams2.get_anagrams("profiles")
    self.assertEqual(r, ['profiles'])

    _, r = self.anagrams2.get_anagrams("profiling")
    self.assertEqual(r, ['profiling'])

    _, r = self.anagrams2.get_anagrams("profit")
    self.assertEqual(r, ['profit'])

    _, r = self.anagrams2.get_anagrams("profitability")
    self.assertEqual(r, ['profitability'])

    _, r = self.anagrams2.get_anagrams("profitable")
    self.assertEqual(r, ['profitable'])

    _, r = self.anagrams2.get_anagrams("profitably")
    self.assertEqual(r, ['profitably'])

    _, r = self.anagrams2.get_anagrams("profited")
    self.assertEqual(r, ['piedfort', 'profited'])

    _, r = self.anagrams2.get_anagrams("profiteer")
    self.assertEqual(r, ['profiteer'])

    _, r = self.anagrams2.get_anagrams("profiteers")
    self.assertEqual(r, ['profiteers'])

    _, r = self.anagrams2.get_anagrams("profiting")
    self.assertEqual(r, ['profiting'])

    _, r = self.anagrams2.get_anagrams("profits")
    self.assertEqual(r, ['profits'])

    _, r = self.anagrams2.get_anagrams("profitted")
    self.assertEqual(r, ['profitted'])

    _, r = self.anagrams2.get_anagrams("profligate")
    self.assertEqual(r, ['profligate'])

    _, r = self.anagrams2.get_anagrams("profound")
    self.assertEqual(r, ['profound'])

    _, r = self.anagrams2.get_anagrams("profoundest")
    self.assertEqual(r, ['profoundest'])

    _, r = self.anagrams2.get_anagrams("profoundly")
    self.assertEqual(r, ['profoundly'])

    _, r = self.anagrams2.get_anagrams("profundity")
    self.assertEqual(r, ['profundity'])

    _, r = self.anagrams2.get_anagrams("profuse")
    self.assertEqual(r, ['profuse'])

    _, r = self.anagrams2.get_anagrams("profusion")
    self.assertEqual(r, ['profusion'])

    _, r = self.anagrams2.get_anagrams("progenitor")
    self.assertEqual(r, ['progenitor'])

    _, r = self.anagrams2.get_anagrams("progeny")
    self.assertEqual(r, ['progeny'])

    _, r = self.anagrams2.get_anagrams("prognosis")
    self.assertEqual(r, ['prognosis'])

    _, r = self.anagrams2.get_anagrams("prognosticate")
    self.assertEqual(r, ['prognosticate'])

    _, r = self.anagrams2.get_anagrams("program")
    self.assertEqual(r, ['program'])

    _, r = self.anagrams2.get_anagrams("programmability")
    self.assertEqual(r, ['programmability'])

    _, r = self.anagrams2.get_anagrams("programmable")
    self.assertEqual(r, ['programmable'])

    _, r = self.anagrams2.get_anagrams("programmed")
    self.assertEqual(r, ['programmed'])

    _, r = self.anagrams2.get_anagrams("programmer")
    self.assertEqual(r, ['programmer'])

    _, r = self.anagrams2.get_anagrams("programmers")
    self.assertEqual(r, ['programmers'])

    _, r = self.anagrams2.get_anagrams("programming")
    self.assertEqual(r, ['programming'])

    _, r = self.anagrams2.get_anagrams("programs")
    self.assertEqual(r, ['programs'])

    _, r = self.anagrams2.get_anagrams("progress")
    self.assertEqual(r, ['progress'])

    _, r = self.anagrams2.get_anagrams("progressed")
    self.assertEqual(r, ['progressed'])

    _, r = self.anagrams2.get_anagrams("progresses")
    self.assertEqual(r, ['progresses'])

    _, r = self.anagrams2.get_anagrams("progressing")
    self.assertEqual(r, ['progressing'])

    _, r = self.anagrams2.get_anagrams("progression")
    self.assertEqual(r, ['progression'])

    _, r = self.anagrams2.get_anagrams("progressions")
    self.assertEqual(r, ['progressions'])

    _, r = self.anagrams2.get_anagrams("progressive")
    self.assertEqual(r, ['progressive'])

    _, r = self.anagrams2.get_anagrams("progressively")
    self.assertEqual(r, ['progressively'])

    _, r = self.anagrams2.get_anagrams("prohibit")
    self.assertEqual(r, ['prohibit'])

    _, r = self.anagrams2.get_anagrams("prohibited")
    self.assertEqual(r, ['prohibited'])

    _, r = self.anagrams2.get_anagrams("prohibiting")
    self.assertEqual(r, ['prohibiting'])

    _, r = self.anagrams2.get_anagrams("prohibition")
    self.assertEqual(r, ['prohibition'])

    _, r = self.anagrams2.get_anagrams("prohibitions")
    self.assertEqual(r, ['prohibitions'])

    _, r = self.anagrams2.get_anagrams("prohibitive")
    self.assertEqual(r, ['prohibitive'])

    _, r = self.anagrams2.get_anagrams("prohibitively")
    self.assertEqual(r, ['prohibitively'])

    _, r = self.anagrams2.get_anagrams("prohibitory")
    self.assertEqual(r, ['prohibitory'])

    _, r = self.anagrams2.get_anagrams("prohibits")
    self.assertEqual(r, ['prohibits'])

    _, r = self.anagrams2.get_anagrams("project")
    self.assertEqual(r, ['project'])

    _, r = self.anagrams2.get_anagrams("projected")
    self.assertEqual(r, ['projected'])

    _, r = self.anagrams2.get_anagrams("projectile")
    self.assertEqual(r, ['projectile'])

    _, r = self.anagrams2.get_anagrams("projecting")
    self.assertEqual(r, ['projecting'])

    _, r = self.anagrams2.get_anagrams("projection")
    self.assertEqual(r, ['projection'])

    _, r = self.anagrams2.get_anagrams("projections")
    self.assertEqual(r, ['projections'])

    _, r = self.anagrams2.get_anagrams("projective")
    self.assertEqual(r, ['projective'])

    _, r = self.anagrams2.get_anagrams("projectively")
    self.assertEqual(r, ['projectively'])

    _, r = self.anagrams2.get_anagrams("projector")
    self.assertEqual(r, ['projector'])

    _, r = self.anagrams2.get_anagrams("projectors")
    self.assertEqual(r, ['projectors'])

    _, r = self.anagrams2.get_anagrams("projects")
    self.assertEqual(r, ['projects'])

    _, r = self.anagrams2.get_anagrams("prokofieff")
    self.assertEqual(r, ['prokofieff'])

    _, r = self.anagrams2.get_anagrams("prokofiev")
    self.assertEqual(r, ['prokofiev'])

    _, r = self.anagrams2.get_anagrams("prolate")
    self.assertEqual(r, ['prolate'])

    _, r = self.anagrams2.get_anagrams("prolegomena")
    self.assertEqual(r, ['prolegomena'])

    _, r = self.anagrams2.get_anagrams("proletariat")
    self.assertEqual(r, ['proletariat'])

    _, r = self.anagrams2.get_anagrams("proliferate")
    self.assertEqual(r, ['proliferate'])

    _, r = self.anagrams2.get_anagrams("proliferated")
    self.assertEqual(r, ['proliferated'])

    _, r = self.anagrams2.get_anagrams("proliferates")
    self.assertEqual(r, ['proliferates'])

    _, r = self.anagrams2.get_anagrams("proliferating")
    self.assertEqual(r, ['proliferating'])

    _, r = self.anagrams2.get_anagrams("proliferation")
    self.assertEqual(r, ['proliferation'])

    _, r = self.anagrams2.get_anagrams("prolific")
    self.assertEqual(r, ['prolific'])

    _, r = self.anagrams2.get_anagrams("prolix")
    self.assertEqual(r, ['prolix'])

    _, r = self.anagrams2.get_anagrams("prolog")
    self.assertEqual(r, ['prolog'])

    _, r = self.anagrams2.get_anagrams("prologue")
    self.assertEqual(r, ['prologue'])

    _, r = self.anagrams2.get_anagrams("prolong")
    self.assertEqual(r, ['prolong'])

    _, r = self.anagrams2.get_anagrams("prolongate")
    self.assertEqual(r, ['prolongate'])

    _, r = self.anagrams2.get_anagrams("prolonged")
    self.assertEqual(r, ['prolonged'])

    _, r = self.anagrams2.get_anagrams("prolonging")
    self.assertEqual(r, ['prolonging'])

    _, r = self.anagrams2.get_anagrams("prolongs")
    self.assertEqual(r, ['prolongs'])

    _, r = self.anagrams2.get_anagrams("promenade")
    self.assertEqual(r, ['promenade'])

    _, r = self.anagrams2.get_anagrams("promenades")
    self.assertEqual(r, ['promenades'])

    _, r = self.anagrams2.get_anagrams("promethean")
    self.assertEqual(r, ['promethean'])

    _, r = self.anagrams2.get_anagrams("prometheus")
    self.assertEqual(r, ['prometheus'])

    _, r = self.anagrams2.get_anagrams("prominence")
    self.assertEqual(r, ['prominence'])

    _, r = self.anagrams2.get_anagrams("prominent")
    self.assertEqual(r, ['prominent'])

    _, r = self.anagrams2.get_anagrams("prominently")
    self.assertEqual(r, ['prominently'])

    _, r = self.anagrams2.get_anagrams("promiscuous")
    self.assertEqual(r, ['promiscuous'])

    _, r = self.anagrams2.get_anagrams("promise")
    self.assertEqual(r, ['promise'])

    _, r = self.anagrams2.get_anagrams("promised")
    self.assertEqual(r, ['promised'])

    _, r = self.anagrams2.get_anagrams("promises")
    self.assertEqual(r, ['promises'])

    _, r = self.anagrams2.get_anagrams("promising")
    self.assertEqual(r, ['promising'])

    _, r = self.anagrams2.get_anagrams("promontory")
    self.assertEqual(r, ['promontory'])

    _, r = self.anagrams2.get_anagrams("promote")
    self.assertEqual(r, ['promote'])

    _, r = self.anagrams2.get_anagrams("promoted")
    self.assertEqual(r, ['promoted'])

    _, r = self.anagrams2.get_anagrams("promoter")
    self.assertEqual(r, ['promoter'])

    _, r = self.anagrams2.get_anagrams("promoters")
    self.assertEqual(r, ['promoters'])

    _, r = self.anagrams2.get_anagrams("promotes")
    self.assertEqual(r, ['promotes'])

    _, r = self.anagrams2.get_anagrams("promoting")
    self.assertEqual(r, ['promoting'])

    _, r = self.anagrams2.get_anagrams("promotion")
    self.assertEqual(r, ['promotion'])

    _, r = self.anagrams2.get_anagrams("promotional")
    self.assertEqual(r, ['promotional'])

    _, r = self.anagrams2.get_anagrams("promotions")
    self.assertEqual(r, ['promotions'])

    _, r = self.anagrams2.get_anagrams("prompt")
    self.assertEqual(r, ['prompt'])

    _, r = self.anagrams2.get_anagrams("prompted")
    self.assertEqual(r, ['prompted'])

    _, r = self.anagrams2.get_anagrams("prompter")
    self.assertEqual(r, ['prompter'])

    _, r = self.anagrams2.get_anagrams("promptest")
    self.assertEqual(r, ['promptest'])

    _, r = self.anagrams2.get_anagrams("prompting")
    self.assertEqual(r, ['prompting'])

    _, r = self.anagrams2.get_anagrams("promptings")
    self.assertEqual(r, ['promptings'])

    _, r = self.anagrams2.get_anagrams("promptly")
    self.assertEqual(r, ['promptly'])

    _, r = self.anagrams2.get_anagrams("promptness")
    self.assertEqual(r, ['promptness'])

    _, r = self.anagrams2.get_anagrams("prompts")
    self.assertEqual(r, ['prompts'])

    _, r = self.anagrams2.get_anagrams("promulgate")
    self.assertEqual(r, ['promulgate'])

    _, r = self.anagrams2.get_anagrams("promulgated")
    self.assertEqual(r, ['promulgated'])

    _, r = self.anagrams2.get_anagrams("promulgates")
    self.assertEqual(r, ['promulgates'])

    _, r = self.anagrams2.get_anagrams("promulgating")
    self.assertEqual(r, ['promulgating'])

    _, r = self.anagrams2.get_anagrams("promulgation")
    self.assertEqual(r, ['promulgation'])

    _, r = self.anagrams2.get_anagrams("prone")
    self.assertEqual(r, ['prone'])

    _, r = self.anagrams2.get_anagrams("proneness")
    self.assertEqual(r, ['proneness'])

    _, r = self.anagrams2.get_anagrams("prong")
    self.assertEqual(r, ['prong'])

    _, r = self.anagrams2.get_anagrams("pronged")
    self.assertEqual(r, ['pronged'])

    _, r = self.anagrams2.get_anagrams("prongs")
    self.assertEqual(r, ['prongs'])

    _, r = self.anagrams2.get_anagrams("pronoun")
    self.assertEqual(r, ['pronoun'])

    _, r = self.anagrams2.get_anagrams("pronounce")
    self.assertEqual(r, ['pronounce'])

    _, r = self.anagrams2.get_anagrams("pronounceable")
    self.assertEqual(r, ['pronounceable'])

    _, r = self.anagrams2.get_anagrams("pronounced")
    self.assertEqual(r, ['pronounced'])

    _, r = self.anagrams2.get_anagrams("pronouncement")
    self.assertEqual(r, ['pronouncement'])

    _, r = self.anagrams2.get_anagrams("pronouncements")
    self.assertEqual(r, ['pronouncements'])

    _, r = self.anagrams2.get_anagrams("pronounces")
    self.assertEqual(r, ['pronounces'])

    _, r = self.anagrams2.get_anagrams("pronouncing")
    self.assertEqual(r, ['pronouncing'])

    _, r = self.anagrams2.get_anagrams("pronouns")
    self.assertEqual(r, ['pronouns'])

    _, r = self.anagrams2.get_anagrams("pronunciation")
    self.assertEqual(r, ['pronunciation'])

    _, r = self.anagrams2.get_anagrams("pronunciations")
    self.assertEqual(r, ['pronunciations'])

    _, r = self.anagrams2.get_anagrams("proof")
    self.assertEqual(r, ['proof'])

    _, r = self.anagrams2.get_anagrams("proofread")
    self.assertEqual(r, ['proofread'])

    _, r = self.anagrams2.get_anagrams("proofreader")
    self.assertEqual(r, ['proofreader'])

    _, r = self.anagrams2.get_anagrams("proofs")
    self.assertEqual(r, ['proofs'])

    _, r = self.anagrams2.get_anagrams("prop")
    self.assertEqual(r, ['prop'])

    _, r = self.anagrams2.get_anagrams("propaganda")
    self.assertEqual(r, ['propaganda'])

    _, r = self.anagrams2.get_anagrams("propagandist")
    self.assertEqual(r, ['propagandist'])

    _, r = self.anagrams2.get_anagrams("propagate")
    self.assertEqual(r, ['propagate'])

    _, r = self.anagrams2.get_anagrams("propagated")
    self.assertEqual(r, ['propagated'])

    _, r = self.anagrams2.get_anagrams("propagates")
    self.assertEqual(r, ['propagates'])

    _, r = self.anagrams2.get_anagrams("propagating")
    self.assertEqual(r, ['propagating'])

    _, r = self.anagrams2.get_anagrams("propagation")
    self.assertEqual(r, ['propagation'])

    _, r = self.anagrams2.get_anagrams("propagations")
    self.assertEqual(r, ['propagations'])

    _, r = self.anagrams2.get_anagrams("propane")
    self.assertEqual(r, ['propane'])

    _, r = self.anagrams2.get_anagrams("propel")
    self.assertEqual(r, ['propel'])

    _, r = self.anagrams2.get_anagrams("propellant")
    self.assertEqual(r, ['propellant'])

    _, r = self.anagrams2.get_anagrams("propelled")
    self.assertEqual(r, ['propelled'])

    _, r = self.anagrams2.get_anagrams("propeller")
    self.assertEqual(r, ['propeller'])

    _, r = self.anagrams2.get_anagrams("propellers")
    self.assertEqual(r, ['propellers'])

    _, r = self.anagrams2.get_anagrams("propelling")
    self.assertEqual(r, ['propelling'])

    _, r = self.anagrams2.get_anagrams("propels")
    self.assertEqual(r, ['propels'])

    _, r = self.anagrams2.get_anagrams("propensity")
    self.assertEqual(r, ['propensity'])

    _, r = self.anagrams2.get_anagrams("proper")
    self.assertEqual(r, ['proper'])

    _, r = self.anagrams2.get_anagrams("properly")
    self.assertEqual(r, ['properly'])

    _, r = self.anagrams2.get_anagrams("properness")
    self.assertEqual(r, ['properness'])

    _, r = self.anagrams2.get_anagrams("propertied")
    self.assertEqual(r, ['propertied'])

    _, r = self.anagrams2.get_anagrams("properties")
    self.assertEqual(r, ['properties'])

    _, r = self.anagrams2.get_anagrams("property")
    self.assertEqual(r, ['property'])

    _, r = self.anagrams2.get_anagrams("prophecies")
    self.assertEqual(r, ['prophecies'])

    _, r = self.anagrams2.get_anagrams("prophecy")
    self.assertEqual(r, ['prophecy'])

    _, r = self.anagrams2.get_anagrams("prophesied")
    self.assertEqual(r, ['prophesied'])

    _, r = self.anagrams2.get_anagrams("prophesier")
    self.assertEqual(r, ['prophesier'])

    _, r = self.anagrams2.get_anagrams("prophesies")
    self.assertEqual(r, ['prophesies'])

    _, r = self.anagrams2.get_anagrams("prophesy")
    self.assertEqual(r, ['prophesy'])

    _, r = self.anagrams2.get_anagrams("prophet")
    self.assertEqual(r, ['prophet'])

    _, r = self.anagrams2.get_anagrams("prophetic")
    self.assertEqual(r, ['prophetic'])

    _, r = self.anagrams2.get_anagrams("prophets")
    self.assertEqual(r, ['prophets'])

    _, r = self.anagrams2.get_anagrams("propitious")
    self.assertEqual(r, ['propitious'])

    _, r = self.anagrams2.get_anagrams("proponent")
    self.assertEqual(r, ['proponent'])

    _, r = self.anagrams2.get_anagrams("proponents")
    self.assertEqual(r, ['proponents'])

    _, r = self.anagrams2.get_anagrams("proportion")
    self.assertEqual(r, ['proportion'])

    _, r = self.anagrams2.get_anagrams("proportional")
    self.assertEqual(r, ['proportional'])

    _, r = self.anagrams2.get_anagrams("proportionally")
    self.assertEqual(r, ['proportionally'])

    _, r = self.anagrams2.get_anagrams("proportionately")
    self.assertEqual(r, ['proportionately'])

    _, r = self.anagrams2.get_anagrams("proportioned")
    self.assertEqual(r, ['proportioned'])

    _, r = self.anagrams2.get_anagrams("proportioning")
    self.assertEqual(r, ['proportioning'])

    _, r = self.anagrams2.get_anagrams("proportionment")
    self.assertEqual(r, ['proportionment'])

    _, r = self.anagrams2.get_anagrams("proportions")
    self.assertEqual(r, ['proportions'])

    _, r = self.anagrams2.get_anagrams("propos")
    self.assertEqual(r, ['propos'])

    _, r = self.anagrams2.get_anagrams("proposal")
    self.assertEqual(r, ['proposal'])

    _, r = self.anagrams2.get_anagrams("proposals")
    self.assertEqual(r, ['proposals'])

    _, r = self.anagrams2.get_anagrams("propose")
    self.assertEqual(r, ['propose'])

    _, r = self.anagrams2.get_anagrams("proposed")
    self.assertEqual(r, ['proposed'])

    _, r = self.anagrams2.get_anagrams("proposer")
    self.assertEqual(r, ['proposer'])

    _, r = self.anagrams2.get_anagrams("proposes")
    self.assertEqual(r, ['proposes'])

    _, r = self.anagrams2.get_anagrams("proposing")
    self.assertEqual(r, ['proposing'])

    _, r = self.anagrams2.get_anagrams("proposition")
    self.assertEqual(r, ['proposition'])

    _, r = self.anagrams2.get_anagrams("propositional")
    self.assertEqual(r, ['propositional'])

    _, r = self.anagrams2.get_anagrams("propositionally")
    self.assertEqual(r, ['propositionally'])

    _, r = self.anagrams2.get_anagrams("propositioned")
    self.assertEqual(r, ['propositioned'])

    _, r = self.anagrams2.get_anagrams("propositioning")
    self.assertEqual(r, ['propositioning'])

    _, r = self.anagrams2.get_anagrams("propositions")
    self.assertEqual(r, ['propositions'])

    _, r = self.anagrams2.get_anagrams("propound")
    self.assertEqual(r, ['propound'])

    _, r = self.anagrams2.get_anagrams("propounded")
    self.assertEqual(r, ['propounded'])

    _, r = self.anagrams2.get_anagrams("propounding")
    self.assertEqual(r, ['propounding'])

    _, r = self.anagrams2.get_anagrams("propounds")
    self.assertEqual(r, ['propounds'])

    _, r = self.anagrams2.get_anagrams("proprietary")
    self.assertEqual(r, ['proprietary'])

    _, r = self.anagrams2.get_anagrams("proprietor")
    self.assertEqual(r, ['proprietor'])

    _, r = self.anagrams2.get_anagrams("proprietors")
    self.assertEqual(r, ['proprietors'])

    _, r = self.anagrams2.get_anagrams("propriety")
    self.assertEqual(r, ['propriety'])

    _, r = self.anagrams2.get_anagrams("props")
    self.assertEqual(r, ['props'])

    _, r = self.anagrams2.get_anagrams("propulsion")
    self.assertEqual(r, ['propulsion'])

    _, r = self.anagrams2.get_anagrams("propulsions")
    self.assertEqual(r, ['propulsions'])

    _, r = self.anagrams2.get_anagrams("prorate")
    self.assertEqual(r, ['prorate'])

    _, r = self.anagrams2.get_anagrams("prorated")
    self.assertEqual(r, ['prorated'])

    _, r = self.anagrams2.get_anagrams("prorates")
    self.assertEqual(r, ['prorates'])

    _, r = self.anagrams2.get_anagrams("pros")
    self.assertEqual(r, ['pros'])

    _, r = self.anagrams2.get_anagrams("proscenium")
    self.assertEqual(r, ['proscenium'])

    _, r = self.anagrams2.get_anagrams("proscribe")
    self.assertEqual(r, ['proscribe'])

    _, r = self.anagrams2.get_anagrams("proscription")
    self.assertEqual(r, ['proscription'])

    _, r = self.anagrams2.get_anagrams("prose")
    self.assertEqual(r, ['pores', 'poser', 'prose', 'ropes', 'spore'])

    _, r = self.anagrams2.get_anagrams("prosecute")
    self.assertEqual(r, ['prosecute'])

    _, r = self.anagrams2.get_anagrams("prosecuted")
    self.assertEqual(r, ['prosecuted'])

    _, r = self.anagrams2.get_anagrams("prosecutes")
    self.assertEqual(r, ['prosecutes'])

    _, r = self.anagrams2.get_anagrams("prosecuting")
    self.assertEqual(r, ['prosecuting'])

    _, r = self.anagrams2.get_anagrams("prosecution")
    self.assertEqual(r, ['prosecution'])

    _, r = self.anagrams2.get_anagrams("prosecutions")
    self.assertEqual(r, ['prosecutions'])

    _, r = self.anagrams2.get_anagrams("prosecutor")
    self.assertEqual(r, ['prosecutor'])

    _, r = self.anagrams2.get_anagrams("proselytize")
    self.assertEqual(r, ['proselytize'])

    _, r = self.anagrams2.get_anagrams("proselytized")
    self.assertEqual(r, ['proselytized'])

    _, r = self.anagrams2.get_anagrams("proselytizes")
    self.assertEqual(r, ['proselytizes'])

    _, r = self.anagrams2.get_anagrams("proselytizing")
    self.assertEqual(r, ['proselytizing'])

    _, r = self.anagrams2.get_anagrams("proserpine")
    self.assertEqual(r, ['proserpine'])

    _, r = self.anagrams2.get_anagrams("prosodic")
    self.assertEqual(r, ['prosodic'])

    _, r = self.anagrams2.get_anagrams("prosodics")
    self.assertEqual(r, ['prosodics'])

    _, r = self.anagrams2.get_anagrams("prospect")
    self.assertEqual(r, ['prospect'])

    _, r = self.anagrams2.get_anagrams("prospected")
    self.assertEqual(r, ['prospected'])

    _, r = self.anagrams2.get_anagrams("prospecting")
    self.assertEqual(r, ['prospecting'])

    _, r = self.anagrams2.get_anagrams("prospection")
    self.assertEqual(r, ['prospection'])

    _, r = self.anagrams2.get_anagrams("prospections")
    self.assertEqual(r, ['prospections'])

    _, r = self.anagrams2.get_anagrams("prospective")
    self.assertEqual(r, ['prospective'])

    _, r = self.anagrams2.get_anagrams("prospectively")
    self.assertEqual(r, ['prospectively'])

    _, r = self.anagrams2.get_anagrams("prospectives")
    self.assertEqual(r, ['prospectives'])

    _, r = self.anagrams2.get_anagrams("prospector")
    self.assertEqual(r, ['prospector'])

    _, r = self.anagrams2.get_anagrams("prospectors")
    self.assertEqual(r, ['prospectors'])

    _, r = self.anagrams2.get_anagrams("prospects")
    self.assertEqual(r, ['prospects'])

    _, r = self.anagrams2.get_anagrams("prospectus")
    self.assertEqual(r, ['prospectus'])

    _, r = self.anagrams2.get_anagrams("prosper")
    self.assertEqual(r, ['prosper'])

    _, r = self.anagrams2.get_anagrams("prospered")
    self.assertEqual(r, ['prospered'])

    _, r = self.anagrams2.get_anagrams("prospering")
    self.assertEqual(r, ['prospering'])

    _, r = self.anagrams2.get_anagrams("prosperity")
    self.assertEqual(r, ['prosperity'])

    _, r = self.anagrams2.get_anagrams("prosperous")
    self.assertEqual(r, ['prosperous'])

    _, r = self.anagrams2.get_anagrams("prospers")
    self.assertEqual(r, ['prospers'])

    _, r = self.anagrams2.get_anagrams("prostate")
    self.assertEqual(r, ['prostate'])

    _, r = self.anagrams2.get_anagrams("prosthetic")
    self.assertEqual(r, ['prosthetic'])

    _, r = self.anagrams2.get_anagrams("prostitute")
    self.assertEqual(r, ['prostitute'])

    _, r = self.anagrams2.get_anagrams("prostitution")
    self.assertEqual(r, ['prostitution'])

    _, r = self.anagrams2.get_anagrams("prostrate")
    self.assertEqual(r, ['prostrate'])

    _, r = self.anagrams2.get_anagrams("prostration")
    self.assertEqual(r, ['prostration'])

    _, r = self.anagrams2.get_anagrams("protagonist")
    self.assertEqual(r, ['protagonist'])

    _, r = self.anagrams2.get_anagrams("protean")
    self.assertEqual(r, ['protean'])

    _, r = self.anagrams2.get_anagrams("protect")
    self.assertEqual(r, ['protect'])

    _, r = self.anagrams2.get_anagrams("protected")
    self.assertEqual(r, ['protected'])

    _, r = self.anagrams2.get_anagrams("protecting")
    self.assertEqual(r, ['protecting'])

    _, r = self.anagrams2.get_anagrams("protection")
    self.assertEqual(r, ['protection'])

    _, r = self.anagrams2.get_anagrams("protections")
    self.assertEqual(r, ['protections'])

    _, r = self.anagrams2.get_anagrams("protective")
    self.assertEqual(r, ['protective'])

    _, r = self.anagrams2.get_anagrams("protectively")
    self.assertEqual(r, ['protectively'])

    _, r = self.anagrams2.get_anagrams("protectiveness")
    self.assertEqual(r, ['protectiveness'])

    _, r = self.anagrams2.get_anagrams("protector")
    self.assertEqual(r, ['protector'])

    _, r = self.anagrams2.get_anagrams("protectorate")
    self.assertEqual(r, ['protectorate'])

    _, r = self.anagrams2.get_anagrams("protectors")
    self.assertEqual(r, ['protectors'])

    _, r = self.anagrams2.get_anagrams("protects")
    self.assertEqual(r, ['prescott', 'protects'])

    _, r = self.anagrams2.get_anagrams("protege")
    self.assertEqual(r, ['protege'])

    _, r = self.anagrams2.get_anagrams("proteges")
    self.assertEqual(r, ['proteges'])

    _, r = self.anagrams2.get_anagrams("protein")
    self.assertEqual(r, ['pointer', 'protein'])

    _, r = self.anagrams2.get_anagrams("proteins")
    self.assertEqual(r, ['pointers', 'proteins'])

    _, r = self.anagrams2.get_anagrams("protest")
    self.assertEqual(r, ['potters', 'protest', 'spotter'])

    _, r = self.anagrams2.get_anagrams("protestant")
    self.assertEqual(r, ['protestant'])

    _, r = self.anagrams2.get_anagrams("protestantism")
    self.assertEqual(r, ['protestantism'])

    _, r = self.anagrams2.get_anagrams("protestantize")
    self.assertEqual(r, ['protestantize'])

    _, r = self.anagrams2.get_anagrams("protestantizes")
    self.assertEqual(r, ['protestantizes'])

    _, r = self.anagrams2.get_anagrams("protestation")
    self.assertEqual(r, ['protestation'])

    _, r = self.anagrams2.get_anagrams("protestations")
    self.assertEqual(r, ['protestations'])

    _, r = self.anagrams2.get_anagrams("protested")
    self.assertEqual(r, ['protested'])

    _, r = self.anagrams2.get_anagrams("protesting")
    self.assertEqual(r, ['protesting'])

    _, r = self.anagrams2.get_anagrams("protestingly")
    self.assertEqual(r, ['protestingly'])

    _, r = self.anagrams2.get_anagrams("protestor")
    self.assertEqual(r, ['protestor'])

    _, r = self.anagrams2.get_anagrams("protests")
    self.assertEqual(r, ['protests', 'spotters'])

    _, r = self.anagrams2.get_anagrams("protista")
    self.assertEqual(r, ['patriots', 'protista'])

    _, r = self.anagrams2.get_anagrams("protocol")
    self.assertEqual(r, ['protocol'])

    _, r = self.anagrams2.get_anagrams("protocols")
    self.assertEqual(r, ['procotols', 'protocols'])

    _, r = self.anagrams2.get_anagrams("proton")
    self.assertEqual(r, ['proton'])

    _, r = self.anagrams2.get_anagrams("protons")
    self.assertEqual(r, ['protons'])

    _, r = self.anagrams2.get_anagrams("protophyta")
    self.assertEqual(r, ['protophyta'])

    _, r = self.anagrams2.get_anagrams("protoplasm")
    self.assertEqual(r, ['protoplasm'])

    _, r = self.anagrams2.get_anagrams("prototype")
    self.assertEqual(r, ['prototype'])

    _, r = self.anagrams2.get_anagrams("prototyped")
    self.assertEqual(r, ['prototyped'])

    _, r = self.anagrams2.get_anagrams("prototypes")
    self.assertEqual(r, ['prototypes'])

    _, r = self.anagrams2.get_anagrams("prototypical")
    self.assertEqual(r, ['prototypical'])

    _, r = self.anagrams2.get_anagrams("prototypically")
    self.assertEqual(r, ['prototypically'])

    _, r = self.anagrams2.get_anagrams("prototyping")
    self.assertEqual(r, ['prototyping'])

    _, r = self.anagrams2.get_anagrams("protozoa")
    self.assertEqual(r, ['protozoa'])

    _, r = self.anagrams2.get_anagrams("protozoan")
    self.assertEqual(r, ['protozoan'])

    _, r = self.anagrams2.get_anagrams("protract")
    self.assertEqual(r, ['protract'])

    _, r = self.anagrams2.get_anagrams("protrude")
    self.assertEqual(r, ['protrude'])

    _, r = self.anagrams2.get_anagrams("protruded")
    self.assertEqual(r, ['protruded'])

    _, r = self.anagrams2.get_anagrams("protrudes")
    self.assertEqual(r, ['protrudes'])

    _, r = self.anagrams2.get_anagrams("protruding")
    self.assertEqual(r, ['protruding'])

    _, r = self.anagrams2.get_anagrams("protrusion")
    self.assertEqual(r, ['protrusion'])

    _, r = self.anagrams2.get_anagrams("protrusions")
    self.assertEqual(r, ['protrusions'])

    _, r = self.anagrams2.get_anagrams("protuberant")
    self.assertEqual(r, ['protuberant'])

    _, r = self.anagrams2.get_anagrams("proud")
    self.assertEqual(r, ['proud'])

    _, r = self.anagrams2.get_anagrams("prouder")
    self.assertEqual(r, ['prouder'])

    _, r = self.anagrams2.get_anagrams("proudest")
    self.assertEqual(r, ['proudest', 'sprouted'])

    _, r = self.anagrams2.get_anagrams("proudly")
    self.assertEqual(r, ['proudly'])

    _, r = self.anagrams2.get_anagrams("proust")
    self.assertEqual(r, ['proust', 'sprout', 'stupor'])

    _, r = self.anagrams2.get_anagrams("provability")
    self.assertEqual(r, ['provability'])

    _, r = self.anagrams2.get_anagrams("provable")
    self.assertEqual(r, ['provable'])

    _, r = self.anagrams2.get_anagrams("provably")
    self.assertEqual(r, ['provably'])

    _, r = self.anagrams2.get_anagrams("prove")
    self.assertEqual(r, ['prove'])

    _, r = self.anagrams2.get_anagrams("proved")
    self.assertEqual(r, ['proved'])

    _, r = self.anagrams2.get_anagrams("proven")
    self.assertEqual(r, ['proven'])

    _, r = self.anagrams2.get_anagrams("provenance")
    self.assertEqual(r, ['provenance'])

    _, r = self.anagrams2.get_anagrams("provence")
    self.assertEqual(r, ['provence'])

    _, r = self.anagrams2.get_anagrams("prover")
    self.assertEqual(r, ['prover'])

    _, r = self.anagrams2.get_anagrams("proverb")
    self.assertEqual(r, ['proverb'])

    _, r = self.anagrams2.get_anagrams("proverbial")
    self.assertEqual(r, ['proverbial'])

    _, r = self.anagrams2.get_anagrams("proverbs")
    self.assertEqual(r, ['proverbs'])

    _, r = self.anagrams2.get_anagrams("provers")
    self.assertEqual(r, ['provers'])

    _, r = self.anagrams2.get_anagrams("proves")
    self.assertEqual(r, ['proves'])

    _, r = self.anagrams2.get_anagrams("provide")
    self.assertEqual(r, ['provide'])

    _, r = self.anagrams2.get_anagrams("provided")
    self.assertEqual(r, ['provided'])

    _, r = self.anagrams2.get_anagrams("providence")
    self.assertEqual(r, ['providence'])

    _, r = self.anagrams2.get_anagrams("provident")
    self.assertEqual(r, ['provident'])

    _, r = self.anagrams2.get_anagrams("provider")
    self.assertEqual(r, ['provider'])

    _, r = self.anagrams2.get_anagrams("providers")
    self.assertEqual(r, ['providers'])

    _, r = self.anagrams2.get_anagrams("provides")
    self.assertEqual(r, ['disprove', 'provides'])

    _, r = self.anagrams2.get_anagrams("providing")
    self.assertEqual(r, ['providing'])

    _, r = self.anagrams2.get_anagrams("province")
    self.assertEqual(r, ['province'])

    _, r = self.anagrams2.get_anagrams("provinces")
    self.assertEqual(r, ['provinces'])

    _, r = self.anagrams2.get_anagrams("provincial")
    self.assertEqual(r, ['provincial'])

    _, r = self.anagrams2.get_anagrams("proving")
    self.assertEqual(r, ['proving'])

    _, r = self.anagrams2.get_anagrams("provision")
    self.assertEqual(r, ['provision'])

    _, r = self.anagrams2.get_anagrams("provisional")
    self.assertEqual(r, ['provisional'])

    _, r = self.anagrams2.get_anagrams("provisionally")
    self.assertEqual(r, ['provisionally'])

    _, r = self.anagrams2.get_anagrams("provisioned")
    self.assertEqual(r, ['provisioned'])

    _, r = self.anagrams2.get_anagrams("provisioning")
    self.assertEqual(r, ['provisioning'])

    _, r = self.anagrams2.get_anagrams("provisions")
    self.assertEqual(r, ['provisions'])

    _, r = self.anagrams2.get_anagrams("proviso")
    self.assertEqual(r, ['proviso'])

    _, r = self.anagrams2.get_anagrams("provocation")
    self.assertEqual(r, ['provocation'])

    _, r = self.anagrams2.get_anagrams("provoke")
    self.assertEqual(r, ['provoke'])

    _, r = self.anagrams2.get_anagrams("provoked")
    self.assertEqual(r, ['provoked'])

    _, r = self.anagrams2.get_anagrams("provokes")
    self.assertEqual(r, ['provokes'])

    _, r = self.anagrams2.get_anagrams("provost")
    self.assertEqual(r, ['provost'])

    _, r = self.anagrams2.get_anagrams("prow")
    self.assertEqual(r, ['prow'])

    _, r = self.anagrams2.get_anagrams("prowess")
    self.assertEqual(r, ['prowess'])

    _, r = self.anagrams2.get_anagrams("prowl")
    self.assertEqual(r, ['prowl'])

    _, r = self.anagrams2.get_anagrams("prowled")
    self.assertEqual(r, ['prowled'])

    _, r = self.anagrams2.get_anagrams("prowler")
    self.assertEqual(r, ['prowler'])

    _, r = self.anagrams2.get_anagrams("prowlers")
    self.assertEqual(r, ['prowlers'])

    _, r = self.anagrams2.get_anagrams("prowling")
    self.assertEqual(r, ['prowling'])

    _, r = self.anagrams2.get_anagrams("prows")
    self.assertEqual(r, ['prows'])

    _, r = self.anagrams2.get_anagrams("proximal")
    self.assertEqual(r, ['proximal'])

    _, r = self.anagrams2.get_anagrams("proximate")
    self.assertEqual(r, ['proximate'])

    _, r = self.anagrams2.get_anagrams("proximity")
    self.assertEqual(r, ['proximity'])

    _, r = self.anagrams2.get_anagrams("proxmire")
    self.assertEqual(r, ['proxmire'])

    _, r = self.anagrams2.get_anagrams("proxy")
    self.assertEqual(r, ['proxy'])

    _, r = self.anagrams2.get_anagrams("prudence")
    self.assertEqual(r, ['prudence'])

    _, r = self.anagrams2.get_anagrams("prudent")
    self.assertEqual(r, ['prudent'])

    _, r = self.anagrams2.get_anagrams("prudential")
    self.assertEqual(r, ['prudential'])

    _, r = self.anagrams2.get_anagrams("prudently")
    self.assertEqual(r, ['prudently'])

    _, r = self.anagrams2.get_anagrams("prune")
    self.assertEqual(r, ['prune'])

    _, r = self.anagrams2.get_anagrams("pruned")
    self.assertEqual(r, ['pruned'])

    _, r = self.anagrams2.get_anagrams("pruner")
    self.assertEqual(r, ['pruner'])

    _, r = self.anagrams2.get_anagrams("pruners")
    self.assertEqual(r, ['pruners'])

    _, r = self.anagrams2.get_anagrams("prunes")
    self.assertEqual(r, ['prunes'])

    _, r = self.anagrams2.get_anagrams("pruning")
    self.assertEqual(r, ['pruning'])

    _, r = self.anagrams2.get_anagrams("prurient")
    self.assertEqual(r, ['prurient'])

    _, r = self.anagrams2.get_anagrams("prussia")
    self.assertEqual(r, ['prussia'])

    _, r = self.anagrams2.get_anagrams("prussian")
    self.assertEqual(r, ['prussian'])

    _, r = self.anagrams2.get_anagrams("prussianization")
    self.assertEqual(r, ['prussianization'])

    _, r = self.anagrams2.get_anagrams("prussianizations")
    self.assertEqual(r, ['prussianizations'])

    _, r = self.anagrams2.get_anagrams("prussianize")
    self.assertEqual(r, ['prussianize'])

    _, r = self.anagrams2.get_anagrams("prussianizer")
    self.assertEqual(r, ['prussianizer'])

    _, r = self.anagrams2.get_anagrams("prussianizers")
    self.assertEqual(r, ['prussianizers'])

    _, r = self.anagrams2.get_anagrams("prussianizes")
    self.assertEqual(r, ['prussianizes'])

    _, r = self.anagrams2.get_anagrams("pry")
    self.assertEqual(r, ['pry'])

    _, r = self.anagrams2.get_anagrams("prying")
    self.assertEqual(r, ['prying'])

    _, r = self.anagrams2.get_anagrams("psalm")
    self.assertEqual(r, ['lamps', 'palms', 'psalm'])

    _, r = self.anagrams2.get_anagrams("psalms")
    self.assertEqual(r, ['psalms'])

    _, r = self.anagrams2.get_anagrams("pseudo")
    self.assertEqual(r, ['pseudo', 'souped'])

    _, r = self.anagrams2.get_anagrams("pseudofiles")
    self.assertEqual(r, ['pseudofiles'])

    _, r = self.anagrams2.get_anagrams("pseudoinstruction")
    self.assertEqual(r, ['pseudoinstruction'])

    _, r = self.anagrams2.get_anagrams("pseudoinstructions")
    self.assertEqual(r, ['pseudoinstructions'])

    _, r = self.anagrams2.get_anagrams("pseudonym")
    self.assertEqual(r, ['pseudonym'])

    _, r = self.anagrams2.get_anagrams("pseudoparallelism")
    self.assertEqual(r, ['pseudoparallelism'])

    _, r = self.anagrams2.get_anagrams("psilocybin")
    self.assertEqual(r, ['psilocybin'])

    _, r = self.anagrams2.get_anagrams("psych")
    self.assertEqual(r, ['psych'])

    _, r = self.anagrams2.get_anagrams("psyche")
    self.assertEqual(r, ['psyche'])

    _, r = self.anagrams2.get_anagrams("psychedelic")
    self.assertEqual(r, ['psychedelic'])

    _, r = self.anagrams2.get_anagrams("psyches")
    self.assertEqual(r, ['psyches'])

    _, r = self.anagrams2.get_anagrams("psychiatric")
    self.assertEqual(r, ['psychiatric'])

    _, r = self.anagrams2.get_anagrams("psychiatrist")
    self.assertEqual(r, ['psychiatrist'])

    _, r = self.anagrams2.get_anagrams("psychiatrists")
    self.assertEqual(r, ['psychiatrists'])

    _, r = self.anagrams2.get_anagrams("psychiatry")
    self.assertEqual(r, ['psychiatry'])

    _, r = self.anagrams2.get_anagrams("psychic")
    self.assertEqual(r, ['psychic'])

    _, r = self.anagrams2.get_anagrams("psycho")
    self.assertEqual(r, ['psycho'])

    _, r = self.anagrams2.get_anagrams("psychoanalysis")
    self.assertEqual(r, ['psychoanalysis'])

    _, r = self.anagrams2.get_anagrams("psychoanalyst")
    self.assertEqual(r, ['psychoanalyst'])

    _, r = self.anagrams2.get_anagrams("psychoanalytic")
    self.assertEqual(r, ['psychoanalytic'])

    _, r = self.anagrams2.get_anagrams("psychobiology")
    self.assertEqual(r, ['psychobiology'])

    _, r = self.anagrams2.get_anagrams("psychological")
    self.assertEqual(r, ['psychological'])

    _, r = self.anagrams2.get_anagrams("psychologically")
    self.assertEqual(r, ['psychologically'])

    _, r = self.anagrams2.get_anagrams("psychologist")
    self.assertEqual(r, ['psychologist'])

    _, r = self.anagrams2.get_anagrams("psychologists")
    self.assertEqual(r, ['psychologists'])

    _, r = self.anagrams2.get_anagrams("psychology")
    self.assertEqual(r, ['psychology'])

    _, r = self.anagrams2.get_anagrams("psychopath")
    self.assertEqual(r, ['psychopath'])

    _, r = self.anagrams2.get_anagrams("psychopathic")
    self.assertEqual(r, ['psychopathic'])

    _, r = self.anagrams2.get_anagrams("psychophysic")
    self.assertEqual(r, ['psychophysic'])

    _, r = self.anagrams2.get_anagrams("psychoses")
    self.assertEqual(r, ['psychoses'])

    _, r = self.anagrams2.get_anagrams("psychosis")
    self.assertEqual(r, ['psychosis'])

    _, r = self.anagrams2.get_anagrams("psychosocial")
    self.assertEqual(r, ['psychosocial'])

    _, r = self.anagrams2.get_anagrams("psychosomatic")
    self.assertEqual(r, ['psychosomatic'])

    _, r = self.anagrams2.get_anagrams("psychotherapeutic")
    self.assertEqual(r, ['psychotherapeutic'])

    _, r = self.anagrams2.get_anagrams("psychotherapist")
    self.assertEqual(r, ['psychotherapist'])

    _, r = self.anagrams2.get_anagrams("psychotherapy")
    self.assertEqual(r, ['psychotherapy'])

    _, r = self.anagrams2.get_anagrams("psychotic")
    self.assertEqual(r, ['psychotic'])

    _, r = self.anagrams2.get_anagrams("ptolemaic")
    self.assertEqual(r, ['ptolemaic'])

    _, r = self.anagrams2.get_anagrams("ptolemaists")
    self.assertEqual(r, ['ptolemaists'])

    _, r = self.anagrams2.get_anagrams("ptolemy")
    self.assertEqual(r, ['ptolemy'])

    _, r = self.anagrams2.get_anagrams("pub")
    self.assertEqual(r, ['pub'])

    _, r = self.anagrams2.get_anagrams("puberty")
    self.assertEqual(r, ['puberty'])

    _, r = self.anagrams2.get_anagrams("public")
    self.assertEqual(r, ['public'])

    _, r = self.anagrams2.get_anagrams("publication")
    self.assertEqual(r, ['publication'])

    _, r = self.anagrams2.get_anagrams("publications")
    self.assertEqual(r, ['publications'])

    _, r = self.anagrams2.get_anagrams("publicity")
    self.assertEqual(r, ['publicity'])

    _, r = self.anagrams2.get_anagrams("publicize")
    self.assertEqual(r, ['publicize'])

    _, r = self.anagrams2.get_anagrams("publicized")
    self.assertEqual(r, ['publicized'])

    _, r = self.anagrams2.get_anagrams("publicizes")
    self.assertEqual(r, ['publicizes'])

    _, r = self.anagrams2.get_anagrams("publicizing")
    self.assertEqual(r, ['publicizing'])

    _, r = self.anagrams2.get_anagrams("publicly")
    self.assertEqual(r, ['publicly'])

    _, r = self.anagrams2.get_anagrams("publish")
    self.assertEqual(r, ['publish'])

    _, r = self.anagrams2.get_anagrams("published")
    self.assertEqual(r, ['published'])

    _, r = self.anagrams2.get_anagrams("publisher")
    self.assertEqual(r, ['publisher'])

    _, r = self.anagrams2.get_anagrams("publishers")
    self.assertEqual(r, ['publishers'])

    _, r = self.anagrams2.get_anagrams("publishes")
    self.assertEqual(r, ['publishes'])

    _, r = self.anagrams2.get_anagrams("publishing")
    self.assertEqual(r, ['publishing'])

    _, r = self.anagrams2.get_anagrams("pubs")
    self.assertEqual(r, ['pubs'])

    _, r = self.anagrams2.get_anagrams("puccini")
    self.assertEqual(r, ['puccini'])

    _, r = self.anagrams2.get_anagrams("pucker")
    self.assertEqual(r, ['pucker'])

    _, r = self.anagrams2.get_anagrams("puckered")
    self.assertEqual(r, ['puckered'])

    _, r = self.anagrams2.get_anagrams("puckering")
    self.assertEqual(r, ['puckering'])

    _, r = self.anagrams2.get_anagrams("puckers")
    self.assertEqual(r, ['puckers'])

    _, r = self.anagrams2.get_anagrams("pudding")
    self.assertEqual(r, ['pudding'])

    _, r = self.anagrams2.get_anagrams("puddings")
    self.assertEqual(r, ['puddings'])

    _, r = self.anagrams2.get_anagrams("puddle")
    self.assertEqual(r, ['puddle'])

    _, r = self.anagrams2.get_anagrams("puddles")
    self.assertEqual(r, ['puddles'])

    _, r = self.anagrams2.get_anagrams("puddling")
    self.assertEqual(r, ['puddling'])

    _, r = self.anagrams2.get_anagrams("puerto")
    self.assertEqual(r, ['puerto'])

    _, r = self.anagrams2.get_anagrams("puff")
    self.assertEqual(r, ['puff'])

    _, r = self.anagrams2.get_anagrams("puffed")
    self.assertEqual(r, ['puffed'])

    _, r = self.anagrams2.get_anagrams("puffin")
    self.assertEqual(r, ['puffin'])

    _, r = self.anagrams2.get_anagrams("puffing")
    self.assertEqual(r, ['puffing'])

    _, r = self.anagrams2.get_anagrams("puffs")
    self.assertEqual(r, ['puffs'])

    _, r = self.anagrams2.get_anagrams("pugh")
    self.assertEqual(r, ['pugh'])

    _, r = self.anagrams2.get_anagrams("puke")
    self.assertEqual(r, ['puke'])

    _, r = self.anagrams2.get_anagrams("pulaski")
    self.assertEqual(r, ['pulaski'])

    _, r = self.anagrams2.get_anagrams("pulitzer")
    self.assertEqual(r, ['pulitzer'])

    _, r = self.anagrams2.get_anagrams("pull")
    self.assertEqual(r, ['pull'])

    _, r = self.anagrams2.get_anagrams("pulled")
    self.assertEqual(r, ['pulled'])

    _, r = self.anagrams2.get_anagrams("puller")
    self.assertEqual(r, ['puller'])

    _, r = self.anagrams2.get_anagrams("pulley")
    self.assertEqual(r, ['pulley'])

    _, r = self.anagrams2.get_anagrams("pulleys")
    self.assertEqual(r, ['pulleys'])

    _, r = self.anagrams2.get_anagrams("pulling")
    self.assertEqual(r, ['pulling'])

    _, r = self.anagrams2.get_anagrams("pullings")
    self.assertEqual(r, ['pullings'])

    _, r = self.anagrams2.get_anagrams("pullman")
    self.assertEqual(r, ['pullman'])

    _, r = self.anagrams2.get_anagrams("pullmanize")
    self.assertEqual(r, ['pullmanize'])

    _, r = self.anagrams2.get_anagrams("pullmanizes")
    self.assertEqual(r, ['pullmanizes'])

    _, r = self.anagrams2.get_anagrams("pullmans")
    self.assertEqual(r, ['pullmans'])

    _, r = self.anagrams2.get_anagrams("pullover")
    self.assertEqual(r, ['pullover'])

    _, r = self.anagrams2.get_anagrams("pulls")
    self.assertEqual(r, ['pulls'])

    _, r = self.anagrams2.get_anagrams("pulmonary")
    self.assertEqual(r, ['pulmonary'])

    _, r = self.anagrams2.get_anagrams("pulp")
    self.assertEqual(r, ['pulp'])

    _, r = self.anagrams2.get_anagrams("pulping")
    self.assertEqual(r, ['pulping'])

    _, r = self.anagrams2.get_anagrams("pulpit")
    self.assertEqual(r, ['pulpit'])

    _, r = self.anagrams2.get_anagrams("pulpits")
    self.assertEqual(r, ['pulpits'])

    _, r = self.anagrams2.get_anagrams("pulsar")
    self.assertEqual(r, ['pulsar'])

    _, r = self.anagrams2.get_anagrams("pulsate")
    self.assertEqual(r, ['pulsate'])

    _, r = self.anagrams2.get_anagrams("pulsation")
    self.assertEqual(r, ['pulsation'])

    _, r = self.anagrams2.get_anagrams("pulsations")
    self.assertEqual(r, ['pulsations'])

    _, r = self.anagrams2.get_anagrams("pulse")
    self.assertEqual(r, ['pulse'])

    _, r = self.anagrams2.get_anagrams("pulsed")
    self.assertEqual(r, ['pulsed'])

    _, r = self.anagrams2.get_anagrams("pulses")
    self.assertEqual(r, ['pluses', 'pulses'])

    _, r = self.anagrams2.get_anagrams("pulsing")
    self.assertEqual(r, ['pulsing'])

    _, r = self.anagrams2.get_anagrams("puma")
    self.assertEqual(r, ['puma'])

    _, r = self.anagrams2.get_anagrams("pumice")
    self.assertEqual(r, ['pumice'])

    _, r = self.anagrams2.get_anagrams("pummel")
    self.assertEqual(r, ['pummel'])

    _, r = self.anagrams2.get_anagrams("pump")
    self.assertEqual(r, ['pump'])

    _, r = self.anagrams2.get_anagrams("pumped")
    self.assertEqual(r, ['pumped'])

    _, r = self.anagrams2.get_anagrams("pumping")
    self.assertEqual(r, ['pumping'])

    _, r = self.anagrams2.get_anagrams("pumpkin")
    self.assertEqual(r, ['pumpkin'])

    _, r = self.anagrams2.get_anagrams("pumpkins")
    self.assertEqual(r, ['pumpkins'])

    _, r = self.anagrams2.get_anagrams("pumps")
    self.assertEqual(r, ['pumps'])

    _, r = self.anagrams2.get_anagrams("pun")
    self.assertEqual(r, ['pun'])

    _, r = self.anagrams2.get_anagrams("punch")
    self.assertEqual(r, ['punch'])

    _, r = self.anagrams2.get_anagrams("punched")
    self.assertEqual(r, ['punched'])

    _, r = self.anagrams2.get_anagrams("puncher")
    self.assertEqual(r, ['puncher'])

    _, r = self.anagrams2.get_anagrams("punches")
    self.assertEqual(r, ['punches'])

    _, r = self.anagrams2.get_anagrams("punching")
    self.assertEqual(r, ['punching'])

    _, r = self.anagrams2.get_anagrams("punctual")
    self.assertEqual(r, ['punctual'])

    _, r = self.anagrams2.get_anagrams("punctually")
    self.assertEqual(r, ['punctually'])

    _, r = self.anagrams2.get_anagrams("punctuation")
    self.assertEqual(r, ['punctuation'])

    _, r = self.anagrams2.get_anagrams("puncture")
    self.assertEqual(r, ['puncture'])

    _, r = self.anagrams2.get_anagrams("punctured")
    self.assertEqual(r, ['punctured'])

    _, r = self.anagrams2.get_anagrams("punctures")
    self.assertEqual(r, ['punctures'])

    _, r = self.anagrams2.get_anagrams("puncturing")
    self.assertEqual(r, ['puncturing'])

    _, r = self.anagrams2.get_anagrams("pundit")
    self.assertEqual(r, ['pundit'])

    _, r = self.anagrams2.get_anagrams("pungent")
    self.assertEqual(r, ['pungent'])

    _, r = self.anagrams2.get_anagrams("punic")
    self.assertEqual(r, ['punic'])

    _, r = self.anagrams2.get_anagrams("punish")
    self.assertEqual(r, ['punish'])

    _, r = self.anagrams2.get_anagrams("punishable")
    self.assertEqual(r, ['punishable'])

    _, r = self.anagrams2.get_anagrams("punished")
    self.assertEqual(r, ['punished'])

    _, r = self.anagrams2.get_anagrams("punishes")
    self.assertEqual(r, ['punishes'])

    _, r = self.anagrams2.get_anagrams("punishing")
    self.assertEqual(r, ['punishing'])

    _, r = self.anagrams2.get_anagrams("punishment")
    self.assertEqual(r, ['punishment'])

    _, r = self.anagrams2.get_anagrams("punishments")
    self.assertEqual(r, ['punishments'])

    _, r = self.anagrams2.get_anagrams("punitive")
    self.assertEqual(r, ['punitive'])

    _, r = self.anagrams2.get_anagrams("punjab")
    self.assertEqual(r, ['punjab'])

    _, r = self.anagrams2.get_anagrams("punjabi")
    self.assertEqual(r, ['punjabi'])

    _, r = self.anagrams2.get_anagrams("puns")
    self.assertEqual(r, ['puns', 'spun'])

    _, r = self.anagrams2.get_anagrams("punt")
    self.assertEqual(r, ['punt'])

    _, r = self.anagrams2.get_anagrams("punted")
    self.assertEqual(r, ['punted'])

    _, r = self.anagrams2.get_anagrams("punting")
    self.assertEqual(r, ['punting'])

    _, r = self.anagrams2.get_anagrams("punts")
    self.assertEqual(r, ['punts'])

    _, r = self.anagrams2.get_anagrams("puny")
    self.assertEqual(r, ['puny'])

    _, r = self.anagrams2.get_anagrams("pup")
    self.assertEqual(r, ['pup'])

    _, r = self.anagrams2.get_anagrams("pupa")
    self.assertEqual(r, ['pupa'])

    _, r = self.anagrams2.get_anagrams("pupil")
    self.assertEqual(r, ['pupil'])

    _, r = self.anagrams2.get_anagrams("pupils")
    self.assertEqual(r, ['pupils'])

    _, r = self.anagrams2.get_anagrams("puppet")
    self.assertEqual(r, ['puppet'])

    _, r = self.anagrams2.get_anagrams("puppeteer")
    self.assertEqual(r, ['puppeteer'])

    _, r = self.anagrams2.get_anagrams("puppets")
    self.assertEqual(r, ['puppets'])

    _, r = self.anagrams2.get_anagrams("puppies")
    self.assertEqual(r, ['puppies'])

    _, r = self.anagrams2.get_anagrams("puppy")
    self.assertEqual(r, ['puppy'])

    _, r = self.anagrams2.get_anagrams("pups")
    self.assertEqual(r, ['pups'])

    _, r = self.anagrams2.get_anagrams("purcell")
    self.assertEqual(r, ['purcell'])

    _, r = self.anagrams2.get_anagrams("purchase")
    self.assertEqual(r, ['purchase'])

    _, r = self.anagrams2.get_anagrams("purchased")
    self.assertEqual(r, ['purchased'])

    _, r = self.anagrams2.get_anagrams("purchaser")
    self.assertEqual(r, ['purchaser'])

    _, r = self.anagrams2.get_anagrams("purchasers")
    self.assertEqual(r, ['purchasers'])

    _, r = self.anagrams2.get_anagrams("purchases")
    self.assertEqual(r, ['purchases'])

    _, r = self.anagrams2.get_anagrams("purchasing")
    self.assertEqual(r, ['purchasing'])

    _, r = self.anagrams2.get_anagrams("purdue")
    self.assertEqual(r, ['purdue'])

    _, r = self.anagrams2.get_anagrams("pure")
    self.assertEqual(r, ['peru', 'pure'])

    _, r = self.anagrams2.get_anagrams("purely")
    self.assertEqual(r, ['purely'])

    _, r = self.anagrams2.get_anagrams("purer")
    self.assertEqual(r, ['purer'])

    _, r = self.anagrams2.get_anagrams("purest")
    self.assertEqual(r, ['purest'])

    _, r = self.anagrams2.get_anagrams("purgatory")
    self.assertEqual(r, ['purgatory'])

    _, r = self.anagrams2.get_anagrams("purge")
    self.assertEqual(r, ['purge'])

    _, r = self.anagrams2.get_anagrams("purged")
    self.assertEqual(r, ['purged'])

    _, r = self.anagrams2.get_anagrams("purges")
    self.assertEqual(r, ['purges'])

    _, r = self.anagrams2.get_anagrams("purging")
    self.assertEqual(r, ['purging'])

    _, r = self.anagrams2.get_anagrams("purification")
    self.assertEqual(r, ['purification'])

    _, r = self.anagrams2.get_anagrams("purifications")
    self.assertEqual(r, ['purifications'])

    _, r = self.anagrams2.get_anagrams("purified")
    self.assertEqual(r, ['purified'])

    _, r = self.anagrams2.get_anagrams("purifier")
    self.assertEqual(r, ['purifier'])

    _, r = self.anagrams2.get_anagrams("purifiers")
    self.assertEqual(r, ['purifiers'])

    _, r = self.anagrams2.get_anagrams("purifies")
    self.assertEqual(r, ['purifies'])

    _, r = self.anagrams2.get_anagrams("purify")
    self.assertEqual(r, ['purify'])

    _, r = self.anagrams2.get_anagrams("purifying")
    self.assertEqual(r, ['purifying'])

    _, r = self.anagrams2.get_anagrams("purina")
    self.assertEqual(r, ['purina'])

    _, r = self.anagrams2.get_anagrams("purist")
    self.assertEqual(r, ['purist'])

    _, r = self.anagrams2.get_anagrams("puritan")
    self.assertEqual(r, ['puritan'])

    _, r = self.anagrams2.get_anagrams("puritanic")
    self.assertEqual(r, ['puritanic'])

    _, r = self.anagrams2.get_anagrams("puritanize")
    self.assertEqual(r, ['puritanize'])

    _, r = self.anagrams2.get_anagrams("puritanizer")
    self.assertEqual(r, ['puritanizer'])

    _, r = self.anagrams2.get_anagrams("puritanizers")
    self.assertEqual(r, ['puritanizers'])

    _, r = self.anagrams2.get_anagrams("puritanizes")
    self.assertEqual(r, ['puritanizes'])

    _, r = self.anagrams2.get_anagrams("purity")
    self.assertEqual(r, ['purity'])

    _, r = self.anagrams2.get_anagrams("purple")
    self.assertEqual(r, ['purple'])

    _, r = self.anagrams2.get_anagrams("purpler")
    self.assertEqual(r, ['purpler'])

    _, r = self.anagrams2.get_anagrams("purplest")
    self.assertEqual(r, ['purplest'])

    _, r = self.anagrams2.get_anagrams("purport")
    self.assertEqual(r, ['purport'])

    _, r = self.anagrams2.get_anagrams("purported")
    self.assertEqual(r, ['purported'])

    _, r = self.anagrams2.get_anagrams("purportedly")
    self.assertEqual(r, ['purportedly'])

    _, r = self.anagrams2.get_anagrams("purporter")
    self.assertEqual(r, ['purporter'])

    _, r = self.anagrams2.get_anagrams("purporters")
    self.assertEqual(r, ['purporters'])

    _, r = self.anagrams2.get_anagrams("purporting")
    self.assertEqual(r, ['purporting'])

    _, r = self.anagrams2.get_anagrams("purports")
    self.assertEqual(r, ['purports'])

    _, r = self.anagrams2.get_anagrams("purpose")
    self.assertEqual(r, ['purpose'])

    _, r = self.anagrams2.get_anagrams("purposed")
    self.assertEqual(r, ['purposed'])

    _, r = self.anagrams2.get_anagrams("purposeful")
    self.assertEqual(r, ['purposeful'])

    _, r = self.anagrams2.get_anagrams("purposefully")
    self.assertEqual(r, ['purposefully'])

    _, r = self.anagrams2.get_anagrams("purposely")
    self.assertEqual(r, ['purposely'])

    _, r = self.anagrams2.get_anagrams("purposes")
    self.assertEqual(r, ['purposes'])

    _, r = self.anagrams2.get_anagrams("purposive")
    self.assertEqual(r, ['purposive'])

    _, r = self.anagrams2.get_anagrams("purr")
    self.assertEqual(r, ['purr'])

    _, r = self.anagrams2.get_anagrams("purred")
    self.assertEqual(r, ['purred'])

    _, r = self.anagrams2.get_anagrams("purring")
    self.assertEqual(r, ['purring'])

    _, r = self.anagrams2.get_anagrams("purrs")
    self.assertEqual(r, ['purrs'])

    _, r = self.anagrams2.get_anagrams("purse")
    self.assertEqual(r, ['purse', 'super'])

    _, r = self.anagrams2.get_anagrams("pursed")
    self.assertEqual(r, ['pursed'])

    _, r = self.anagrams2.get_anagrams("purser")
    self.assertEqual(r, ['purser'])

    _, r = self.anagrams2.get_anagrams("purses")
    self.assertEqual(r, ['purses'])

    _, r = self.anagrams2.get_anagrams("pursuant")
    self.assertEqual(r, ['pursuant'])

    _, r = self.anagrams2.get_anagrams("pursue")
    self.assertEqual(r, ['pursue'])

    _, r = self.anagrams2.get_anagrams("pursued")
    self.assertEqual(r, ['pursued', 'usurped'])

    _, r = self.anagrams2.get_anagrams("pursuer")
    self.assertEqual(r, ['pursuer', 'usurper'])

    _, r = self.anagrams2.get_anagrams("pursuers")
    self.assertEqual(r, ['pursuers'])

    _, r = self.anagrams2.get_anagrams("pursues")
    self.assertEqual(r, ['pursues'])

    _, r = self.anagrams2.get_anagrams("pursuing")
    self.assertEqual(r, ['pursuing'])

    _, r = self.anagrams2.get_anagrams("pursuit")
    self.assertEqual(r, ['pursuit'])

    _, r = self.anagrams2.get_anagrams("pursuits")
    self.assertEqual(r, ['pursuits'])

    _, r = self.anagrams2.get_anagrams("purveyor")
    self.assertEqual(r, ['purveyor'])

    _, r = self.anagrams2.get_anagrams("purview")
    self.assertEqual(r, ['purview'])

    _, r = self.anagrams2.get_anagrams("pus")
    self.assertEqual(r, ['pus'])

    _, r = self.anagrams2.get_anagrams("pusan")
    self.assertEqual(r, ['pusan'])

    _, r = self.anagrams2.get_anagrams("pusey")
    self.assertEqual(r, ['pusey'])

    _, r = self.anagrams2.get_anagrams("push")
    self.assertEqual(r, ['push'])

    _, r = self.anagrams2.get_anagrams("pushbutton")
    self.assertEqual(r, ['pushbutton'])

    _, r = self.anagrams2.get_anagrams("pushdown")
    self.assertEqual(r, ['pushdown'])

    _, r = self.anagrams2.get_anagrams("pushed")
    self.assertEqual(r, ['pushed'])

    _, r = self.anagrams2.get_anagrams("pusher")
    self.assertEqual(r, ['pusher'])

    _, r = self.anagrams2.get_anagrams("pushers")
    self.assertEqual(r, ['pushers'])

    _, r = self.anagrams2.get_anagrams("pushes")
    self.assertEqual(r, ['pushes'])

    _, r = self.anagrams2.get_anagrams("pushing")
    self.assertEqual(r, ['pushing'])

    _, r = self.anagrams2.get_anagrams("puss")
    self.assertEqual(r, ['puss'])

    _, r = self.anagrams2.get_anagrams("pussy")
    self.assertEqual(r, ['pussy'])

    _, r = self.anagrams2.get_anagrams("pussycat")
    self.assertEqual(r, ['pussycat'])

    _, r = self.anagrams2.get_anagrams("put")
    self.assertEqual(r, ['put'])

    _, r = self.anagrams2.get_anagrams("putnam")
    self.assertEqual(r, ['putnam'])

    _, r = self.anagrams2.get_anagrams("puts")
    self.assertEqual(r, ['puts'])

    _, r = self.anagrams2.get_anagrams("putt")
    self.assertEqual(r, ['putt'])

    _, r = self.anagrams2.get_anagrams("putter")
    self.assertEqual(r, ['putter'])

    _, r = self.anagrams2.get_anagrams("puttering")
    self.assertEqual(r, ['puttering'])

    _, r = self.anagrams2.get_anagrams("putters")
    self.assertEqual(r, ['putters', 'sputter'])

    _, r = self.anagrams2.get_anagrams("putting")
    self.assertEqual(r, ['putting'])

    _, r = self.anagrams2.get_anagrams("putty")
    self.assertEqual(r, ['putty'])

    _, r = self.anagrams2.get_anagrams("puzzle")
    self.assertEqual(r, ['puzzle'])

    _, r = self.anagrams2.get_anagrams("puzzled")
    self.assertEqual(r, ['puzzled'])

    _, r = self.anagrams2.get_anagrams("puzzlement")
    self.assertEqual(r, ['puzzlement'])

    _, r = self.anagrams2.get_anagrams("puzzler")
    self.assertEqual(r, ['puzzler'])

    _, r = self.anagrams2.get_anagrams("puzzlers")
    self.assertEqual(r, ['puzzlers'])

    _, r = self.anagrams2.get_anagrams("puzzles")
    self.assertEqual(r, ['puzzles'])

    _, r = self.anagrams2.get_anagrams("puzzling")
    self.assertEqual(r, ['puzzling'])

    _, r = self.anagrams2.get_anagrams("puzzlings")
    self.assertEqual(r, ['puzzlings'])

    _, r = self.anagrams2.get_anagrams("pygmalion")
    self.assertEqual(r, ['pygmalion'])

    _, r = self.anagrams2.get_anagrams("pygmies")
    self.assertEqual(r, ['pygmies'])

    _, r = self.anagrams2.get_anagrams("pygmy")
    self.assertEqual(r, ['pygmy'])

    _, r = self.anagrams2.get_anagrams("pyle")
    self.assertEqual(r, ['pyle', 'yelp'])

    _, r = self.anagrams2.get_anagrams("pyongyang")
    self.assertEqual(r, ['pyongyang'])

    _, r = self.anagrams2.get_anagrams("pyotr")
    self.assertEqual(r, ['pyotr'])

    _, r = self.anagrams2.get_anagrams("pyramid")
    self.assertEqual(r, ['pyramid'])

    _, r = self.anagrams2.get_anagrams("pyramids")
    self.assertEqual(r, ['pyramids'])

    _, r = self.anagrams2.get_anagrams("pyre")
    self.assertEqual(r, ['prey', 'pyre'])

    _, r = self.anagrams2.get_anagrams("pyrex")
    self.assertEqual(r, ['pyrex'])

    _, r = self.anagrams2.get_anagrams("pyrrhic")
    self.assertEqual(r, ['pyrrhic'])

    _, r = self.anagrams2.get_anagrams("pythagoras")
    self.assertEqual(r, ['pythagoras'])

    _, r = self.anagrams2.get_anagrams("pythagorean")
    self.assertEqual(r, ['pythagorean'])

    _, r = self.anagrams2.get_anagrams("pythagoreanize")
    self.assertEqual(r, ['pythagoreanize'])

    _, r = self.anagrams2.get_anagrams("pythagoreanizes")
    self.assertEqual(r, ['pythagoreanizes'])

    _, r = self.anagrams2.get_anagrams("pythagoreans")
    self.assertEqual(r, ['pythagoreans'])

    _, r = self.anagrams2.get_anagrams("python")
    self.assertEqual(r, ['python', 'typhon'])

    _, r = self.anagrams2.get_anagrams("qatar")
    self.assertEqual(r, ['qatar'])

    _, r = self.anagrams2.get_anagrams("qua")
    self.assertEqual(r, ['qua'])

    _, r = self.anagrams2.get_anagrams("quack")
    self.assertEqual(r, ['quack'])

    _, r = self.anagrams2.get_anagrams("quacked")
    self.assertEqual(r, ['quacked'])

    _, r = self.anagrams2.get_anagrams("quackery")
    self.assertEqual(r, ['quackery'])

    _, r = self.anagrams2.get_anagrams("quacks")
    self.assertEqual(r, ['quacks'])

    _, r = self.anagrams2.get_anagrams("quad")
    self.assertEqual(r, ['quad'])

    _, r = self.anagrams2.get_anagrams("quadrangle")
    self.assertEqual(r, ['quadrangle'])

    _, r = self.anagrams2.get_anagrams("quadrangular")
    self.assertEqual(r, ['quadrangular'])

    _, r = self.anagrams2.get_anagrams("quadrant")
    self.assertEqual(r, ['quadrant'])

    _, r = self.anagrams2.get_anagrams("quadrants")
    self.assertEqual(r, ['quadrants'])

    _, r = self.anagrams2.get_anagrams("quadratic")
    self.assertEqual(r, ['quadratic'])

    _, r = self.anagrams2.get_anagrams("quadratical")
    self.assertEqual(r, ['quadratical'])

    _, r = self.anagrams2.get_anagrams("quadratically")
    self.assertEqual(r, ['quadratically'])

    _, r = self.anagrams2.get_anagrams("quadratics")
    self.assertEqual(r, ['quadratics'])

    _, r = self.anagrams2.get_anagrams("quadrature")
    self.assertEqual(r, ['quadrature'])

    _, r = self.anagrams2.get_anagrams("quadratures")
    self.assertEqual(r, ['quadratures'])

    _, r = self.anagrams2.get_anagrams("quadrennial")
    self.assertEqual(r, ['quadrennial'])

    _, r = self.anagrams2.get_anagrams("quadrilateral")
    self.assertEqual(r, ['quadrilateral'])

    _, r = self.anagrams2.get_anagrams("quadrillion")
    self.assertEqual(r, ['quadrillion'])

    _, r = self.anagrams2.get_anagrams("quadruple")
    self.assertEqual(r, ['quadruple'])

    _, r = self.anagrams2.get_anagrams("quadrupled")
    self.assertEqual(r, ['quadrupled'])

    _, r = self.anagrams2.get_anagrams("quadruples")
    self.assertEqual(r, ['quadruples'])

    _, r = self.anagrams2.get_anagrams("quadrupling")
    self.assertEqual(r, ['quadrupling'])

    _, r = self.anagrams2.get_anagrams("quadrupole")
    self.assertEqual(r, ['quadrupole'])

    _, r = self.anagrams2.get_anagrams("quaff")
    self.assertEqual(r, ['quaff'])

    _, r = self.anagrams2.get_anagrams("quagmire")
    self.assertEqual(r, ['quagmire'])

    _, r = self.anagrams2.get_anagrams("quagmires")
    self.assertEqual(r, ['quagmires'])

    _, r = self.anagrams2.get_anagrams("quahog")
    self.assertEqual(r, ['quahog'])

    _, r = self.anagrams2.get_anagrams("quail")
    self.assertEqual(r, ['quail'])

    _, r = self.anagrams2.get_anagrams("quails")
    self.assertEqual(r, ['quails'])

    _, r = self.anagrams2.get_anagrams("quaint")
    self.assertEqual(r, ['quaint'])

    _, r = self.anagrams2.get_anagrams("quaintly")
    self.assertEqual(r, ['quaintly'])

    _, r = self.anagrams2.get_anagrams("quaintness")
    self.assertEqual(r, ['quaintness'])

    _, r = self.anagrams2.get_anagrams("quake")
    self.assertEqual(r, ['quake'])

    _, r = self.anagrams2.get_anagrams("quaked")
    self.assertEqual(r, ['quaked'])

    _, r = self.anagrams2.get_anagrams("quaker")
    self.assertEqual(r, ['quaker'])

    _, r = self.anagrams2.get_anagrams("quakeress")
    self.assertEqual(r, ['quakeress'])

    _, r = self.anagrams2.get_anagrams("quakerization")
    self.assertEqual(r, ['quakerization'])

    _, r = self.anagrams2.get_anagrams("quakerizations")
    self.assertEqual(r, ['quakerizations'])

    _, r = self.anagrams2.get_anagrams("quakerize")
    self.assertEqual(r, ['quakerize'])

    _, r = self.anagrams2.get_anagrams("quakerizes")
    self.assertEqual(r, ['quakerizes'])

    _, r = self.anagrams2.get_anagrams("quakers")
    self.assertEqual(r, ['quakers'])

    _, r = self.anagrams2.get_anagrams("quakes")
    self.assertEqual(r, ['quakes', 'squeak'])

    _, r = self.anagrams2.get_anagrams("quaking")
    self.assertEqual(r, ['quaking'])

    _, r = self.anagrams2.get_anagrams("qualification")
    self.assertEqual(r, ['qualification'])

    _, r = self.anagrams2.get_anagrams("qualifications")
    self.assertEqual(r, ['qualifications'])

    _, r = self.anagrams2.get_anagrams("qualified")
    self.assertEqual(r, ['qualified'])

    _, r = self.anagrams2.get_anagrams("qualifier")
    self.assertEqual(r, ['qualifier'])

    _, r = self.anagrams2.get_anagrams("qualifiers")
    self.assertEqual(r, ['qualifiers'])

    _, r = self.anagrams2.get_anagrams("qualifies")
    self.assertEqual(r, ['qualifies'])

    _, r = self.anagrams2.get_anagrams("qualify")
    self.assertEqual(r, ['qualify'])

    _, r = self.anagrams2.get_anagrams("qualifying")
    self.assertEqual(r, ['qualifying'])

    _, r = self.anagrams2.get_anagrams("qualitative")
    self.assertEqual(r, ['qualitative'])

    _, r = self.anagrams2.get_anagrams("qualitatively")
    self.assertEqual(r, ['qualitatively'])

    _, r = self.anagrams2.get_anagrams("qualities")
    self.assertEqual(r, ['qualities'])

    _, r = self.anagrams2.get_anagrams("quality")
    self.assertEqual(r, ['quality'])

    _, r = self.anagrams2.get_anagrams("qualm")
    self.assertEqual(r, ['qualm'])

    _, r = self.anagrams2.get_anagrams("quandaries")
    self.assertEqual(r, ['quandaries'])

    _, r = self.anagrams2.get_anagrams("quandary")
    self.assertEqual(r, ['quandary'])

    _, r = self.anagrams2.get_anagrams("quanta")
    self.assertEqual(r, ['quanta'])

    _, r = self.anagrams2.get_anagrams("quantico")
    self.assertEqual(r, ['quantico'])

    _, r = self.anagrams2.get_anagrams("quantifiable")
    self.assertEqual(r, ['quantifiable'])

    _, r = self.anagrams2.get_anagrams("quantification")
    self.assertEqual(r, ['quantification'])

    _, r = self.anagrams2.get_anagrams("quantifications")
    self.assertEqual(r, ['quantifications'])

    _, r = self.anagrams2.get_anagrams("quantified")
    self.assertEqual(r, ['quantified'])

    _, r = self.anagrams2.get_anagrams("quantifier")
    self.assertEqual(r, ['quantifier'])

    _, r = self.anagrams2.get_anagrams("quantifiers")
    self.assertEqual(r, ['quantifiers'])

    _, r = self.anagrams2.get_anagrams("quantifies")
    self.assertEqual(r, ['quantifies'])

    _, r = self.anagrams2.get_anagrams("quantify")
    self.assertEqual(r, ['quantify'])

    _, r = self.anagrams2.get_anagrams("quantifying")
    self.assertEqual(r, ['quantifying'])

    _, r = self.anagrams2.get_anagrams("quantile")
    self.assertEqual(r, ['quantile'])

    _, r = self.anagrams2.get_anagrams("quantitative")
    self.assertEqual(r, ['quantitative'])

    _, r = self.anagrams2.get_anagrams("quantitatively")
    self.assertEqual(r, ['quantitatively'])

    _, r = self.anagrams2.get_anagrams("quantities")
    self.assertEqual(r, ['quantities'])

    _, r = self.anagrams2.get_anagrams("quantity")
    self.assertEqual(r, ['quantity'])

    _, r = self.anagrams2.get_anagrams("quantization")
    self.assertEqual(r, ['quantization'])

    _, r = self.anagrams2.get_anagrams("quantize")
    self.assertEqual(r, ['quantize'])

    _, r = self.anagrams2.get_anagrams("quantized")
    self.assertEqual(r, ['quantized'])

    _, r = self.anagrams2.get_anagrams("quantizes")
    self.assertEqual(r, ['quantizes'])

    _, r = self.anagrams2.get_anagrams("quantizing")
    self.assertEqual(r, ['quantizing'])

    _, r = self.anagrams2.get_anagrams("quantum")
    self.assertEqual(r, ['quantum'])

    _, r = self.anagrams2.get_anagrams("quarantine")
    self.assertEqual(r, ['quarantine'])

    _, r = self.anagrams2.get_anagrams("quarantines")
    self.assertEqual(r, ['quarantines'])

    _, r = self.anagrams2.get_anagrams("quarantining")
    self.assertEqual(r, ['quarantining'])

    _, r = self.anagrams2.get_anagrams("quark")
    self.assertEqual(r, ['quark'])

    _, r = self.anagrams2.get_anagrams("quarrel")
    self.assertEqual(r, ['quarrel'])

    _, r = self.anagrams2.get_anagrams("quarreled")
    self.assertEqual(r, ['quarreled'])

    _, r = self.anagrams2.get_anagrams("quarreling")
    self.assertEqual(r, ['quarreling'])

    _, r = self.anagrams2.get_anagrams("quarrels")
    self.assertEqual(r, ['quarrels'])

    _, r = self.anagrams2.get_anagrams("quarrelsome")
    self.assertEqual(r, ['quarrelsome'])

    _, r = self.anagrams2.get_anagrams("quarries")
    self.assertEqual(r, ['quarries'])

    _, r = self.anagrams2.get_anagrams("quarry")
    self.assertEqual(r, ['quarry'])

    _, r = self.anagrams2.get_anagrams("quart")
    self.assertEqual(r, ['quart'])

    _, r = self.anagrams2.get_anagrams("quarter")
    self.assertEqual(r, ['quarter'])

    _, r = self.anagrams2.get_anagrams("quarterback")
    self.assertEqual(r, ['quarterback'])

    _, r = self.anagrams2.get_anagrams("quartered")
    self.assertEqual(r, ['quartered'])

    _, r = self.anagrams2.get_anagrams("quartering")
    self.assertEqual(r, ['quartering'])

    _, r = self.anagrams2.get_anagrams("quarterly")
    self.assertEqual(r, ['quarterly'])

    _, r = self.anagrams2.get_anagrams("quartermaster")
    self.assertEqual(r, ['quartermaster'])

    _, r = self.anagrams2.get_anagrams("quarters")
    self.assertEqual(r, ['quarters'])

    _, r = self.anagrams2.get_anagrams("quartet")
    self.assertEqual(r, ['quartet'])

    _, r = self.anagrams2.get_anagrams("quartets")
    self.assertEqual(r, ['quartets'])

    _, r = self.anagrams2.get_anagrams("quartile")
    self.assertEqual(r, ['quartile'])

    _, r = self.anagrams2.get_anagrams("quarts")
    self.assertEqual(r, ['quarts'])

    _, r = self.anagrams2.get_anagrams("quartz")
    self.assertEqual(r, ['quartz'])

    _, r = self.anagrams2.get_anagrams("quartzite")
    self.assertEqual(r, ['quartzite'])

    _, r = self.anagrams2.get_anagrams("quasar")
    self.assertEqual(r, ['quasar'])

    _, r = self.anagrams2.get_anagrams("quash")
    self.assertEqual(r, ['quash'])

    _, r = self.anagrams2.get_anagrams("quashed")
    self.assertEqual(r, ['quashed'])

    _, r = self.anagrams2.get_anagrams("quashes")
    self.assertEqual(r, ['quashes'])

    _, r = self.anagrams2.get_anagrams("quashing")
    self.assertEqual(r, ['quashing'])

    _, r = self.anagrams2.get_anagrams("quasi")
    self.assertEqual(r, ['quasi'])

    _, r = self.anagrams2.get_anagrams("quasimodo")
    self.assertEqual(r, ['quasimodo'])

    _, r = self.anagrams2.get_anagrams("quaternary")
    self.assertEqual(r, ['quaternary'])

    _, r = self.anagrams2.get_anagrams("quaver")
    self.assertEqual(r, ['quaver'])

    _, r = self.anagrams2.get_anagrams("quavered")
    self.assertEqual(r, ['quavered'])

    _, r = self.anagrams2.get_anagrams("quavering")
    self.assertEqual(r, ['quavering'])

    _, r = self.anagrams2.get_anagrams("quavers")
    self.assertEqual(r, ['quavers'])

    _, r = self.anagrams2.get_anagrams("quay")
    self.assertEqual(r, ['quay'])

    _, r = self.anagrams2.get_anagrams("queasy")
    self.assertEqual(r, ['queasy'])

    _, r = self.anagrams2.get_anagrams("quebec")
    self.assertEqual(r, ['quebec'])

    _, r = self.anagrams2.get_anagrams("queen")
    self.assertEqual(r, ['queen'])

    _, r = self.anagrams2.get_anagrams("queenly")
    self.assertEqual(r, ['queenly'])

    _, r = self.anagrams2.get_anagrams("queens")
    self.assertEqual(r, ['queens'])

    _, r = self.anagrams2.get_anagrams("queensland")
    self.assertEqual(r, ['queensland'])

    _, r = self.anagrams2.get_anagrams("queer")
    self.assertEqual(r, ['queer'])

    _, r = self.anagrams2.get_anagrams("queerer")
    self.assertEqual(r, ['queerer'])

    _, r = self.anagrams2.get_anagrams("queerest")
    self.assertEqual(r, ['queerest'])

    _, r = self.anagrams2.get_anagrams("queerly")
    self.assertEqual(r, ['queerly'])

    _, r = self.anagrams2.get_anagrams("queerness")
    self.assertEqual(r, ['queerness'])

    _, r = self.anagrams2.get_anagrams("quell")
    self.assertEqual(r, ['quell'])

    _, r = self.anagrams2.get_anagrams("quelling")
    self.assertEqual(r, ['quelling'])

    _, r = self.anagrams2.get_anagrams("quench")
    self.assertEqual(r, ['quench'])

    _, r = self.anagrams2.get_anagrams("quenched")
    self.assertEqual(r, ['quenched'])

    _, r = self.anagrams2.get_anagrams("quenches")
    self.assertEqual(r, ['quenches'])

    _, r = self.anagrams2.get_anagrams("quenching")
    self.assertEqual(r, ['quenching'])

    _, r = self.anagrams2.get_anagrams("queried")
    self.assertEqual(r, ['queried'])

    _, r = self.anagrams2.get_anagrams("queries")
    self.assertEqual(r, ['esquire', 'queries'])

    _, r = self.anagrams2.get_anagrams("query")
    self.assertEqual(r, ['query'])

    _, r = self.anagrams2.get_anagrams("querying")
    self.assertEqual(r, ['querying'])

    _, r = self.anagrams2.get_anagrams("quest")
    self.assertEqual(r, ['quest'])

    _, r = self.anagrams2.get_anagrams("quested")
    self.assertEqual(r, ['quested'])

    _, r = self.anagrams2.get_anagrams("quester")
    self.assertEqual(r, ['quester', 'request'])

    _, r = self.anagrams2.get_anagrams("questers")
    self.assertEqual(r, ['questers', 'requests'])

    _, r = self.anagrams2.get_anagrams("questing")
    self.assertEqual(r, ['questing'])

    _, r = self.anagrams2.get_anagrams("question")
    self.assertEqual(r, ['question'])

    _, r = self.anagrams2.get_anagrams("questionable")
    self.assertEqual(r, ['questionable'])

    _, r = self.anagrams2.get_anagrams("questionably")
    self.assertEqual(r, ['questionably'])

    _, r = self.anagrams2.get_anagrams("questioned")
    self.assertEqual(r, ['questioned'])

    _, r = self.anagrams2.get_anagrams("questioner")
    self.assertEqual(r, ['questioner'])

    _, r = self.anagrams2.get_anagrams("questioners")
    self.assertEqual(r, ['questioners'])

    _, r = self.anagrams2.get_anagrams("questioning")
    self.assertEqual(r, ['questioning'])

    _, r = self.anagrams2.get_anagrams("questioningly")
    self.assertEqual(r, ['questioningly'])

    _, r = self.anagrams2.get_anagrams("questionings")
    self.assertEqual(r, ['questionings'])

    _, r = self.anagrams2.get_anagrams("questionnaire")
    self.assertEqual(r, ['questionnaire'])

    _, r = self.anagrams2.get_anagrams("questionnaires")
    self.assertEqual(r, ['questionnaires'])

    _, r = self.anagrams2.get_anagrams("questions")
    self.assertEqual(r, ['questions'])

    _, r = self.anagrams2.get_anagrams("quests")
    self.assertEqual(r, ['quests'])

    _, r = self.anagrams2.get_anagrams("queue")
    self.assertEqual(r, ['queue'])

    _, r = self.anagrams2.get_anagrams("queued")
    self.assertEqual(r, ['queued'])

    _, r = self.anagrams2.get_anagrams("queueing")
    self.assertEqual(r, ['queueing'])

    _, r = self.anagrams2.get_anagrams("queuer")
    self.assertEqual(r, ['queuer'])

    _, r = self.anagrams2.get_anagrams("queuers")
    self.assertEqual(r, ['queuers'])

    _, r = self.anagrams2.get_anagrams("queues")
    self.assertEqual(r, ['queues'])

    _, r = self.anagrams2.get_anagrams("queuing")
    self.assertEqual(r, ['queuing'])

    _, r = self.anagrams2.get_anagrams("quezon")
    self.assertEqual(r, ['quezon'])

    _, r = self.anagrams2.get_anagrams("quibble")
    self.assertEqual(r, ['quibble'])

    _, r = self.anagrams2.get_anagrams("quichua")
    self.assertEqual(r, ['quichua'])

    _, r = self.anagrams2.get_anagrams("quick")
    self.assertEqual(r, ['quick'])

    _, r = self.anagrams2.get_anagrams("quicken")
    self.assertEqual(r, ['quicken'])

    _, r = self.anagrams2.get_anagrams("quickened")
    self.assertEqual(r, ['quickened'])

    _, r = self.anagrams2.get_anagrams("quickening")
    self.assertEqual(r, ['quickening'])

    _, r = self.anagrams2.get_anagrams("quickens")
    self.assertEqual(r, ['quickens'])

    _, r = self.anagrams2.get_anagrams("quicker")
    self.assertEqual(r, ['quicker'])

    _, r = self.anagrams2.get_anagrams("quickest")
    self.assertEqual(r, ['quickest'])

    _, r = self.anagrams2.get_anagrams("quickie")
    self.assertEqual(r, ['quickie'])

    _, r = self.anagrams2.get_anagrams("quicklime")
    self.assertEqual(r, ['quicklime'])

    _, r = self.anagrams2.get_anagrams("quickly")
    self.assertEqual(r, ['quickly'])

    _, r = self.anagrams2.get_anagrams("quickness")
    self.assertEqual(r, ['quickness'])

    _, r = self.anagrams2.get_anagrams("quicksand")
    self.assertEqual(r, ['quicksand'])

    _, r = self.anagrams2.get_anagrams("quicksilver")
    self.assertEqual(r, ['quicksilver'])

    _, r = self.anagrams2.get_anagrams("quiescent")
    self.assertEqual(r, ['quiescent'])

    _, r = self.anagrams2.get_anagrams("quiet")
    self.assertEqual(r, ['quiet', 'quite'])

    _, r = self.anagrams2.get_anagrams("quieted")
    self.assertEqual(r, ['quieted'])

    _, r = self.anagrams2.get_anagrams("quieter")
    self.assertEqual(r, ['quieter'])

    _, r = self.anagrams2.get_anagrams("quietest")
    self.assertEqual(r, ['quietest'])

    _, r = self.anagrams2.get_anagrams("quieting")
    self.assertEqual(r, ['quieting'])

    _, r = self.anagrams2.get_anagrams("quietly")
    self.assertEqual(r, ['quietly'])

    _, r = self.anagrams2.get_anagrams("quietness")
    self.assertEqual(r, ['quietness'])

    _, r = self.anagrams2.get_anagrams("quiets")
    self.assertEqual(r, ['quiets'])

    _, r = self.anagrams2.get_anagrams("quietude")
    self.assertEqual(r, ['quietude'])

    _, r = self.anagrams2.get_anagrams("quill")
    self.assertEqual(r, ['quill'])

    _, r = self.anagrams2.get_anagrams("quilt")
    self.assertEqual(r, ['quilt'])

    _, r = self.anagrams2.get_anagrams("quilted")
    self.assertEqual(r, ['quilted'])

    _, r = self.anagrams2.get_anagrams("quilting")
    self.assertEqual(r, ['quilting'])

    _, r = self.anagrams2.get_anagrams("quilts")
    self.assertEqual(r, ['quilts'])

    _, r = self.anagrams2.get_anagrams("quince")
    self.assertEqual(r, ['quince'])

    _, r = self.anagrams2.get_anagrams("quinine")
    self.assertEqual(r, ['quinine'])

    _, r = self.anagrams2.get_anagrams("quinn")
    self.assertEqual(r, ['quinn'])

    _, r = self.anagrams2.get_anagrams("quint")
    self.assertEqual(r, ['quint'])

    _, r = self.anagrams2.get_anagrams("quintet")
    self.assertEqual(r, ['quintet'])

    _, r = self.anagrams2.get_anagrams("quintillion")
    self.assertEqual(r, ['quintillion'])

    _, r = self.anagrams2.get_anagrams("quip")
    self.assertEqual(r, ['quip'])

    _, r = self.anagrams2.get_anagrams("quirinal")
    self.assertEqual(r, ['quirinal'])

    _, r = self.anagrams2.get_anagrams("quirk")
    self.assertEqual(r, ['quirk'])

    _, r = self.anagrams2.get_anagrams("quirky")
    self.assertEqual(r, ['quirky'])

    _, r = self.anagrams2.get_anagrams("quit")
    self.assertEqual(r, ['quit'])

    _, r = self.anagrams2.get_anagrams("quite")
    self.assertEqual(r, ['quiet', 'quite'])

    _, r = self.anagrams2.get_anagrams("quito")
    self.assertEqual(r, ['quito'])

    _, r = self.anagrams2.get_anagrams("quits")
    self.assertEqual(r, ['quits'])

    _, r = self.anagrams2.get_anagrams("quitter")
    self.assertEqual(r, ['quitter'])

    _, r = self.anagrams2.get_anagrams("quitters")
    self.assertEqual(r, ['quitters'])

    _, r = self.anagrams2.get_anagrams("quitting")
    self.assertEqual(r, ['quitting'])

    _, r = self.anagrams2.get_anagrams("quiver")
    self.assertEqual(r, ['quiver'])

    _, r = self.anagrams2.get_anagrams("quivered")
    self.assertEqual(r, ['quivered'])

    _, r = self.anagrams2.get_anagrams("quivering")
    self.assertEqual(r, ['quivering'])

    _, r = self.anagrams2.get_anagrams("quivers")
    self.assertEqual(r, ['quivers'])

    _, r = self.anagrams2.get_anagrams("quixote")
    self.assertEqual(r, ['quixote'])

    _, r = self.anagrams2.get_anagrams("quixotic")
    self.assertEqual(r, ['quixotic'])

    _, r = self.anagrams2.get_anagrams("quixotism")
    self.assertEqual(r, ['quixotism'])

    _, r = self.anagrams2.get_anagrams("quiz")
    self.assertEqual(r, ['quiz'])

    _, r = self.anagrams2.get_anagrams("quizzed")
    self.assertEqual(r, ['quizzed'])

    _, r = self.anagrams2.get_anagrams("quizzes")
    self.assertEqual(r, ['quizzes'])

    _, r = self.anagrams2.get_anagrams("quizzical")
    self.assertEqual(r, ['quizzical'])

    _, r = self.anagrams2.get_anagrams("quizzing")
    self.assertEqual(r, ['quizzing'])

    _, r = self.anagrams2.get_anagrams("quo")
    self.assertEqual(r, ['quo'])

    _, r = self.anagrams2.get_anagrams("quonset")
    self.assertEqual(r, ['quonset'])

    _, r = self.anagrams2.get_anagrams("quorum")
    self.assertEqual(r, ['quorum'])

    _, r = self.anagrams2.get_anagrams("quota")
    self.assertEqual(r, ['quota'])

    _, r = self.anagrams2.get_anagrams("quotas")
    self.assertEqual(r, ['quotas'])

    _, r = self.anagrams2.get_anagrams("quotation")
    self.assertEqual(r, ['quotation'])

    _, r = self.anagrams2.get_anagrams("quotations")
    self.assertEqual(r, ['quotations'])

    _, r = self.anagrams2.get_anagrams("quote")
    self.assertEqual(r, ['quote'])

    _, r = self.anagrams2.get_anagrams("quoted")
    self.assertEqual(r, ['quoted'])

    _, r = self.anagrams2.get_anagrams("quotes")
    self.assertEqual(r, ['quotes'])

    _, r = self.anagrams2.get_anagrams("quoth")
    self.assertEqual(r, ['quoth'])

    _, r = self.anagrams2.get_anagrams("quotient")
    self.assertEqual(r, ['quotient'])

    _, r = self.anagrams2.get_anagrams("quotients")
    self.assertEqual(r, ['quotients'])

    _, r = self.anagrams2.get_anagrams("quoting")
    self.assertEqual(r, ['quoting'])

    _, r = self.anagrams2.get_anagrams("rabat")
    self.assertEqual(r, ['rabat'])

    _, r = self.anagrams2.get_anagrams("rabbi")
    self.assertEqual(r, ['rabbi'])

    _, r = self.anagrams2.get_anagrams("rabbit")
    self.assertEqual(r, ['rabbit'])

    _, r = self.anagrams2.get_anagrams("rabbits")
    self.assertEqual(r, ['rabbits'])

    _, r = self.anagrams2.get_anagrams("rabble")
    self.assertEqual(r, ['rabble'])

    _, r = self.anagrams2.get_anagrams("rabid")
    self.assertEqual(r, ['baird', 'braid', 'rabid'])

    _, r = self.anagrams2.get_anagrams("rabies")
    self.assertEqual(r, ['rabies', 'serbia'])

    _, r = self.anagrams2.get_anagrams("rabin")
    self.assertEqual(r, ['bairn', 'brain', 'brian', 'rabin'])

    _, r = self.anagrams2.get_anagrams("raccoon")
    self.assertEqual(r, ['raccoon'])

    _, r = self.anagrams2.get_anagrams("raccoons")
    self.assertEqual(r, ['raccoons'])

    _, r = self.anagrams2.get_anagrams("race")
    self.assertEqual(r, ['acre', 'care', 'race'])

    _, r = self.anagrams2.get_anagrams("raced")
    self.assertEqual(r, ['arced', 'cared', 'cedar', 'raced'])

    _, r = self.anagrams2.get_anagrams("racer")
    self.assertEqual(r, ['racer'])

    _, r = self.anagrams2.get_anagrams("racers")
    self.assertEqual(r, ['racers'])

    _, r = self.anagrams2.get_anagrams("races")
    self.assertEqual(r, ['acres', 'cares', 'races', 'scare'])

    _, r = self.anagrams2.get_anagrams("racetrack")
    self.assertEqual(r, ['racetrack'])

    _, r = self.anagrams2.get_anagrams("rachel")
    self.assertEqual(r, ['rachel'])

    _, r = self.anagrams2.get_anagrams("rachmaninoff")
    self.assertEqual(r, ['rachmaninoff'])

    _, r = self.anagrams2.get_anagrams("racial")
    self.assertEqual(r, ['racial'])

    _, r = self.anagrams2.get_anagrams("racially")
    self.assertEqual(r, ['racially'])

    _, r = self.anagrams2.get_anagrams("racine")
    self.assertEqual(r, ['racine'])

    _, r = self.anagrams2.get_anagrams("racing")
    self.assertEqual(r, ['arcing', 'caring', 'racing'])

    _, r = self.anagrams2.get_anagrams("rack")
    self.assertEqual(r, ['rack'])

    _, r = self.anagrams2.get_anagrams("racked")
    self.assertEqual(r, ['racked'])

    _, r = self.anagrams2.get_anagrams("racket")
    self.assertEqual(r, ['racket'])

    _, r = self.anagrams2.get_anagrams("racketeer")
    self.assertEqual(r, ['racketeer'])

    _, r = self.anagrams2.get_anagrams("racketeering")
    self.assertEqual(r, ['racketeering'])

    _, r = self.anagrams2.get_anagrams("racketeers")
    self.assertEqual(r, ['racketeers'])

    _, r = self.anagrams2.get_anagrams("rackets")
    self.assertEqual(r, ['rackets'])

    _, r = self.anagrams2.get_anagrams("racking")
    self.assertEqual(r, ['racking'])

    _, r = self.anagrams2.get_anagrams("racks")
    self.assertEqual(r, ['racks'])

    _, r = self.anagrams2.get_anagrams("radar")
    self.assertEqual(r, ['radar'])

    _, r = self.anagrams2.get_anagrams("radars")
    self.assertEqual(r, ['radars'])

    _, r = self.anagrams2.get_anagrams("radcliffe")
    self.assertEqual(r, ['radcliffe'])

    _, r = self.anagrams2.get_anagrams("radial")
    self.assertEqual(r, ['radial'])

    _, r = self.anagrams2.get_anagrams("radially")
    self.assertEqual(r, ['radially'])

    _, r = self.anagrams2.get_anagrams("radian")
    self.assertEqual(r, ['adrian', 'radian'])

    _, r = self.anagrams2.get_anagrams("radiance")
    self.assertEqual(r, ['radiance'])

    _, r = self.anagrams2.get_anagrams("radiant")
    self.assertEqual(r, ['radiant'])

    _, r = self.anagrams2.get_anagrams("radiantly")
    self.assertEqual(r, ['radiantly'])

    _, r = self.anagrams2.get_anagrams("radiate")
    self.assertEqual(r, ['radiate'])

    _, r = self.anagrams2.get_anagrams("radiated")
    self.assertEqual(r, ['radiated'])

    _, r = self.anagrams2.get_anagrams("radiates")
    self.assertEqual(r, ['radiates'])

    _, r = self.anagrams2.get_anagrams("radiating")
    self.assertEqual(r, ['radiating'])

    _, r = self.anagrams2.get_anagrams("radiation")
    self.assertEqual(r, ['radiation'])

    _, r = self.anagrams2.get_anagrams("radiations")
    self.assertEqual(r, ['radiations'])

    _, r = self.anagrams2.get_anagrams("radiator")
    self.assertEqual(r, ['radiator'])

    _, r = self.anagrams2.get_anagrams("radiators")
    self.assertEqual(r, ['radiators'])

    _, r = self.anagrams2.get_anagrams("radical")
    self.assertEqual(r, ['radical'])

    _, r = self.anagrams2.get_anagrams("radically")
    self.assertEqual(r, ['radically'])

    _, r = self.anagrams2.get_anagrams("radicals")
    self.assertEqual(r, ['radicals'])

    _, r = self.anagrams2.get_anagrams("radices")
    self.assertEqual(r, ['radices', 'sidecar'])

    _, r = self.anagrams2.get_anagrams("radii")
    self.assertEqual(r, ['radii'])

    _, r = self.anagrams2.get_anagrams("radio")
    self.assertEqual(r, ['doria', 'radio'])

    _, r = self.anagrams2.get_anagrams("radioactive")
    self.assertEqual(r, ['radioactive'])

    _, r = self.anagrams2.get_anagrams("radioastronomy")
    self.assertEqual(r, ['radioastronomy'])

    _, r = self.anagrams2.get_anagrams("radioed")
    self.assertEqual(r, ['radioed'])

    _, r = self.anagrams2.get_anagrams("radiography")
    self.assertEqual(r, ['radiography'])

    _, r = self.anagrams2.get_anagrams("radioing")
    self.assertEqual(r, ['radioing'])

    _, r = self.anagrams2.get_anagrams("radiology")
    self.assertEqual(r, ['radiology'])

    _, r = self.anagrams2.get_anagrams("radios")
    self.assertEqual(r, ['radios'])

    _, r = self.anagrams2.get_anagrams("radish")
    self.assertEqual(r, ['radish'])

    _, r = self.anagrams2.get_anagrams("radishes")
    self.assertEqual(r, ['radishes'])

    _, r = self.anagrams2.get_anagrams("radium")
    self.assertEqual(r, ['radium'])

    _, r = self.anagrams2.get_anagrams("radius")
    self.assertEqual(r, ['darius', 'radius'])

    _, r = self.anagrams2.get_anagrams("radix")
    self.assertEqual(r, ['radix'])

    _, r = self.anagrams2.get_anagrams("radon")
    self.assertEqual(r, ['adorn', 'radon'])

    _, r = self.anagrams2.get_anagrams("rae")
    self.assertEqual(r, ['are', 'ear', 'era', 'rae'])

    _, r = self.anagrams2.get_anagrams("rafael")
    self.assertEqual(r, ['rafael'])

    _, r = self.anagrams2.get_anagrams("rafferty")
    self.assertEqual(r, ['rafferty'])

    _, r = self.anagrams2.get_anagrams("raft")
    self.assertEqual(r, ['raft'])

    _, r = self.anagrams2.get_anagrams("rafter")
    self.assertEqual(r, ['rafter'])

    _, r = self.anagrams2.get_anagrams("rafters")
    self.assertEqual(r, ['rafters'])

    _, r = self.anagrams2.get_anagrams("rafts")
    self.assertEqual(r, ['rafts'])

    _, r = self.anagrams2.get_anagrams("rag")
    self.assertEqual(r, ['rag'])

    _, r = self.anagrams2.get_anagrams("rage")
    self.assertEqual(r, ['ager', 'gear', 'rage'])

    _, r = self.anagrams2.get_anagrams("raged")
    self.assertEqual(r, ['edgar', 'grade', 'raged'])

    _, r = self.anagrams2.get_anagrams("rages")
    self.assertEqual(r, ['agers', 'gears', 'rages'])

    _, r = self.anagrams2.get_anagrams("ragged")
    self.assertEqual(r, ['dagger', 'ragged'])

    _, r = self.anagrams2.get_anagrams("raggedly")
    self.assertEqual(r, ['raggedly'])

    _, r = self.anagrams2.get_anagrams("raggedness")
    self.assertEqual(r, ['raggedness'])

    _, r = self.anagrams2.get_anagrams("raging")
    self.assertEqual(r, ['raging'])

    _, r = self.anagrams2.get_anagrams("rags")
    self.assertEqual(r, ['rags'])

    _, r = self.anagrams2.get_anagrams("ragusan")
    self.assertEqual(r, ['ragusan'])

    _, r = self.anagrams2.get_anagrams("ragweed")
    self.assertEqual(r, ['ragweed'])

    _, r = self.anagrams2.get_anagrams("raid")
    self.assertEqual(r, ['arid', 'raid'])

    _, r = self.anagrams2.get_anagrams("raided")
    self.assertEqual(r, ['raided'])

    _, r = self.anagrams2.get_anagrams("raider")
    self.assertEqual(r, ['raider'])

    _, r = self.anagrams2.get_anagrams("raiders")
    self.assertEqual(r, ['raiders'])

    _, r = self.anagrams2.get_anagrams("raiding")
    self.assertEqual(r, ['raiding'])

    _, r = self.anagrams2.get_anagrams("raids")
    self.assertEqual(r, ['raids'])

    _, r = self.anagrams2.get_anagrams("rail")
    self.assertEqual(r, ['lair', 'liar', 'rail'])

    _, r = self.anagrams2.get_anagrams("railed")
    self.assertEqual(r, ['derail', 'dialer', 'railed'])

    _, r = self.anagrams2.get_anagrams("railer")
    self.assertEqual(r, ['railer'])

    _, r = self.anagrams2.get_anagrams("railers")
    self.assertEqual(r, ['railers'])

    _, r = self.anagrams2.get_anagrams("railing")
    self.assertEqual(r, ['railing'])

    _, r = self.anagrams2.get_anagrams("railroad")
    self.assertEqual(r, ['railroad'])

    _, r = self.anagrams2.get_anagrams("railroaded")
    self.assertEqual(r, ['railroaded'])

    _, r = self.anagrams2.get_anagrams("railroader")
    self.assertEqual(r, ['railroader'])

    _, r = self.anagrams2.get_anagrams("railroaders")
    self.assertEqual(r, ['railroaders'])

    _, r = self.anagrams2.get_anagrams("railroading")
    self.assertEqual(r, ['railroading'])

    _, r = self.anagrams2.get_anagrams("railroads")
    self.assertEqual(r, ['railroads'])

    _, r = self.anagrams2.get_anagrams("rails")
    self.assertEqual(r, ['lairs', 'liars', 'rails'])

    _, r = self.anagrams2.get_anagrams("railway")
    self.assertEqual(r, ['railway'])

    _, r = self.anagrams2.get_anagrams("railways")
    self.assertEqual(r, ['railways'])

    _, r = self.anagrams2.get_anagrams("raiment")
    self.assertEqual(r, ['minaret', 'raiment'])

    _, r = self.anagrams2.get_anagrams("rain")
    self.assertEqual(r, ['iran', 'nair', 'rain'])

    _, r = self.anagrams2.get_anagrams("rainbow")
    self.assertEqual(r, ['rainbow'])

    _, r = self.anagrams2.get_anagrams("raincoat")
    self.assertEqual(r, ['croatian', 'raincoat'])

    _, r = self.anagrams2.get_anagrams("raincoats")
    self.assertEqual(r, ['raincoats'])

    _, r = self.anagrams2.get_anagrams("raindrop")
    self.assertEqual(r, ['raindrop'])

    _, r = self.anagrams2.get_anagrams("raindrops")
    self.assertEqual(r, ['raindrops'])

    _, r = self.anagrams2.get_anagrams("rained")
    self.assertEqual(r, ['andrei', 'rained'])

    _, r = self.anagrams2.get_anagrams("rainfall")
    self.assertEqual(r, ['rainfall'])

    _, r = self.anagrams2.get_anagrams("rainier")
    self.assertEqual(r, ['rainier'])

    _, r = self.anagrams2.get_anagrams("rainiest")
    self.assertEqual(r, ['rainiest'])

    _, r = self.anagrams2.get_anagrams("raining")
    self.assertEqual(r, ['raining'])

    _, r = self.anagrams2.get_anagrams("rains")
    self.assertEqual(r, ['rains'])

    _, r = self.anagrams2.get_anagrams("rainstorm")
    self.assertEqual(r, ['rainstorm'])

    _, r = self.anagrams2.get_anagrams("rainy")
    self.assertEqual(r, ['rainy'])

    _, r = self.anagrams2.get_anagrams("raise")
    self.assertEqual(r, ['aires', 'aries', 'arise', 'raise'])

    _, r = self.anagrams2.get_anagrams("raised")
    self.assertEqual(r, ['raised'])

    _, r = self.anagrams2.get_anagrams("raiser")
    self.assertEqual(r, ['airers', 'ariser', 'raiser', 'sierra'])

    _, r = self.anagrams2.get_anagrams("raisers")
    self.assertEqual(r, ['raisers'])

    _, r = self.anagrams2.get_anagrams("raises")
    self.assertEqual(r, ['arises', 'raises'])

    _, r = self.anagrams2.get_anagrams("raisin")
    self.assertEqual(r, ['raisin'])

    _, r = self.anagrams2.get_anagrams("raising")
    self.assertEqual(r, ['airings', 'arising', 'raising'])

    _, r = self.anagrams2.get_anagrams("rake")
    self.assertEqual(r, ['rake'])

    _, r = self.anagrams2.get_anagrams("raked")
    self.assertEqual(r, ['drake', 'raked'])

    _, r = self.anagrams2.get_anagrams("rakes")
    self.assertEqual(r, ['akers', 'asker', 'rakes'])

    _, r = self.anagrams2.get_anagrams("raking")
    self.assertEqual(r, ['raking'])

    _, r = self.anagrams2.get_anagrams("raleigh")
    self.assertEqual(r, ['raleigh'])

    _, r = self.anagrams2.get_anagrams("rallied")
    self.assertEqual(r, ['rallied'])

    _, r = self.anagrams2.get_anagrams("rallies")
    self.assertEqual(r, ['rallies'])

    _, r = self.anagrams2.get_anagrams("rally")
    self.assertEqual(r, ['rally'])

    _, r = self.anagrams2.get_anagrams("rallying")
    self.assertEqual(r, ['rallying'])

    _, r = self.anagrams2.get_anagrams("ralph")
    self.assertEqual(r, ['ralph'])

    _, r = self.anagrams2.get_anagrams("ralston")
    self.assertEqual(r, ['ralston'])

    _, r = self.anagrams2.get_anagrams("ram")
    self.assertEqual(r, ['arm', 'ram'])

    _, r = self.anagrams2.get_anagrams("ramada")
    self.assertEqual(r, ['armada', 'ramada'])

    _, r = self.anagrams2.get_anagrams("raman")
    self.assertEqual(r, ['raman'])

    _, r = self.anagrams2.get_anagrams("ramble")
    self.assertEqual(r, ['ambler', 'blamer', 'marble', 'ramble'])

    _, r = self.anagrams2.get_anagrams("rambler")
    self.assertEqual(r, ['rambler'])

    _, r = self.anagrams2.get_anagrams("rambles")
    self.assertEqual(r, ['blamers', 'marbles', 'rambles'])

    _, r = self.anagrams2.get_anagrams("rambling")
    self.assertEqual(r, ['marbling', 'rambling'])

    _, r = self.anagrams2.get_anagrams("ramblings")
    self.assertEqual(r, ['ramblings'])

    _, r = self.anagrams2.get_anagrams("ramification")
    self.assertEqual(r, ['ramification'])

    _, r = self.anagrams2.get_anagrams("ramifications")
    self.assertEqual(r, ['ramifications'])

    _, r = self.anagrams2.get_anagrams("ramirez")
    self.assertEqual(r, ['ramirez'])

    _, r = self.anagrams2.get_anagrams("ramo")
    self.assertEqual(r, ['ramo', 'roam'])

    _, r = self.anagrams2.get_anagrams("ramona")
    self.assertEqual(r, ['ramona'])

    _, r = self.anagrams2.get_anagrams("ramp")
    self.assertEqual(r, ['ramp'])

    _, r = self.anagrams2.get_anagrams("rampage")
    self.assertEqual(r, ['rampage'])

    _, r = self.anagrams2.get_anagrams("rampant")
    self.assertEqual(r, ['rampant'])

    _, r = self.anagrams2.get_anagrams("rampart")
    self.assertEqual(r, ['rampart'])

    _, r = self.anagrams2.get_anagrams("ramps")
    self.assertEqual(r, ['ramps'])

    _, r = self.anagrams2.get_anagrams("ramrod")
    self.assertEqual(r, ['ramrod'])

    _, r = self.anagrams2.get_anagrams("rams")
    self.assertEqual(r, ['arms', 'mars', 'rams'])

    _, r = self.anagrams2.get_anagrams("ramsey")
    self.assertEqual(r, ['ramsey'])

    _, r = self.anagrams2.get_anagrams("ran")
    self.assertEqual(r, ['ran'])

    _, r = self.anagrams2.get_anagrams("ranch")
    self.assertEqual(r, ['ranch'])

    _, r = self.anagrams2.get_anagrams("ranched")
    self.assertEqual(r, ['ranched'])

    _, r = self.anagrams2.get_anagrams("rancher")
    self.assertEqual(r, ['rancher'])

    _, r = self.anagrams2.get_anagrams("ranchers")
    self.assertEqual(r, ['ranchers'])

    _, r = self.anagrams2.get_anagrams("ranches")
    self.assertEqual(r, ['ranches'])

    _, r = self.anagrams2.get_anagrams("ranching")
    self.assertEqual(r, ['ranching'])

    _, r = self.anagrams2.get_anagrams("rancid")
    self.assertEqual(r, ['rancid'])

    _, r = self.anagrams2.get_anagrams("rand")
    self.assertEqual(r, ['darn', 'rand'])

    _, r = self.anagrams2.get_anagrams("randall")
    self.assertEqual(r, ['randall'])

    _, r = self.anagrams2.get_anagrams("randolph")
    self.assertEqual(r, ['randolph'])

    _, r = self.anagrams2.get_anagrams("random")
    self.assertEqual(r, ['random'])

    _, r = self.anagrams2.get_anagrams("randomization")
    self.assertEqual(r, ['randomization'])

    _, r = self.anagrams2.get_anagrams("randomize")
    self.assertEqual(r, ['randomize'])

    _, r = self.anagrams2.get_anagrams("randomized")
    self.assertEqual(r, ['randomized'])

    _, r = self.anagrams2.get_anagrams("randomizes")
    self.assertEqual(r, ['randomizes'])

    _, r = self.anagrams2.get_anagrams("randomly")
    self.assertEqual(r, ['randomly'])

    _, r = self.anagrams2.get_anagrams("randomness")
    self.assertEqual(r, ['randomness'])

    _, r = self.anagrams2.get_anagrams("randy")
    self.assertEqual(r, ['randy'])

    _, r = self.anagrams2.get_anagrams("rang")
    self.assertEqual(r, ['rang'])

    _, r = self.anagrams2.get_anagrams("range")
    self.assertEqual(r, ['anger', 'range'])

    _, r = self.anagrams2.get_anagrams("ranged")
    self.assertEqual(r, ['danger', 'gander', 'garden', 'ranged'])

    _, r = self.anagrams2.get_anagrams("rangeland")
    self.assertEqual(r, ['rangeland'])

    _, r = self.anagrams2.get_anagrams("ranger")
    self.assertEqual(r, ['garner', 'ranger'])

    _, r = self.anagrams2.get_anagrams("rangers")
    self.assertEqual(r, ['rangers'])

    _, r = self.anagrams2.get_anagrams("ranges")
    self.assertEqual(r, ['angers', 'ranges'])

    _, r = self.anagrams2.get_anagrams("ranging")
    self.assertEqual(r, ['ranging'])

    _, r = self.anagrams2.get_anagrams("rangoon")
    self.assertEqual(r, ['rangoon'])

    _, r = self.anagrams2.get_anagrams("rangy")
    self.assertEqual(r, ['angry', 'rangy'])

    _, r = self.anagrams2.get_anagrams("ranier")
    self.assertEqual(r, ['ranier'])

    _, r = self.anagrams2.get_anagrams("rank")
    self.assertEqual(r, ['rank'])

    _, r = self.anagrams2.get_anagrams("ranked")
    self.assertEqual(r, ['darken', 'ranked'])

    _, r = self.anagrams2.get_anagrams("ranker")
    self.assertEqual(r, ['ranker'])

    _, r = self.anagrams2.get_anagrams("rankers")
    self.assertEqual(r, ['rankers'])

    _, r = self.anagrams2.get_anagrams("rankest")
    self.assertEqual(r, ['rankest', 'tankers'])

    _, r = self.anagrams2.get_anagrams("rankin")
    self.assertEqual(r, ['rankin'])

    _, r = self.anagrams2.get_anagrams("rankine")
    self.assertEqual(r, ['rankine'])

    _, r = self.anagrams2.get_anagrams("ranking")
    self.assertEqual(r, ['ranking'])

    _, r = self.anagrams2.get_anagrams("rankings")
    self.assertEqual(r, ['rankings'])

    _, r = self.anagrams2.get_anagrams("rankle")
    self.assertEqual(r, ['rankle'])

    _, r = self.anagrams2.get_anagrams("rankly")
    self.assertEqual(r, ['rankly'])

    _, r = self.anagrams2.get_anagrams("rankness")
    self.assertEqual(r, ['rankness'])

    _, r = self.anagrams2.get_anagrams("ranks")
    self.assertEqual(r, ['ranks', 'snark'])

    _, r = self.anagrams2.get_anagrams("ransack")
    self.assertEqual(r, ['ransack'])

    _, r = self.anagrams2.get_anagrams("ransacked")
    self.assertEqual(r, ['ransacked'])

    _, r = self.anagrams2.get_anagrams("ransacking")
    self.assertEqual(r, ['ransacking'])

    _, r = self.anagrams2.get_anagrams("ransacks")
    self.assertEqual(r, ['ransacks'])

    _, r = self.anagrams2.get_anagrams("ransom")
    self.assertEqual(r, ['manors', 'ransom', 'romans'])

    _, r = self.anagrams2.get_anagrams("ransomer")
    self.assertEqual(r, ['ransomer'])

    _, r = self.anagrams2.get_anagrams("ransoming")
    self.assertEqual(r, ['ransoming'])

    _, r = self.anagrams2.get_anagrams("ransoms")
    self.assertEqual(r, ['ransoms'])

    _, r = self.anagrams2.get_anagrams("rant")
    self.assertEqual(r, ['rant'])

    _, r = self.anagrams2.get_anagrams("ranted")
    self.assertEqual(r, ['ardent', 'ranted'])

    _, r = self.anagrams2.get_anagrams("ranter")
    self.assertEqual(r, ['errant', 'ranter', 'terran'])

    _, r = self.anagrams2.get_anagrams("ranters")
    self.assertEqual(r, ['ranters'])

    _, r = self.anagrams2.get_anagrams("ranting")
    self.assertEqual(r, ['ranting'])

    _, r = self.anagrams2.get_anagrams("rants")
    self.assertEqual(r, ['rants'])

    _, r = self.anagrams2.get_anagrams("raoul")
    self.assertEqual(r, ['raoul'])

    _, r = self.anagrams2.get_anagrams("rap")
    self.assertEqual(r, ['par', 'rap'])

    _, r = self.anagrams2.get_anagrams("rapacious")
    self.assertEqual(r, ['rapacious'])

    _, r = self.anagrams2.get_anagrams("rape")
    self.assertEqual(r, ['earp', 'pare', 'pear', 'rape', 'reap'])

    _, r = self.anagrams2.get_anagrams("raped")
    self.assertEqual(r, ['drape', 'raped'])

    _, r = self.anagrams2.get_anagrams("raper")
    self.assertEqual(r, ['raper'])

    _, r = self.anagrams2.get_anagrams("rapes")
    self.assertEqual(r, ['pares', 'parse', 'pears', 'rapes', 'reaps', 'spare', 'spear'])

    _, r = self.anagrams2.get_anagrams("raphael")
    self.assertEqual(r, ['raphael'])

    _, r = self.anagrams2.get_anagrams("rapid")
    self.assertEqual(r, ['rapid'])

    _, r = self.anagrams2.get_anagrams("rapidity")
    self.assertEqual(r, ['rapidity'])

    _, r = self.anagrams2.get_anagrams("rapidly")
    self.assertEqual(r, ['rapidly'])

    _, r = self.anagrams2.get_anagrams("rapids")
    self.assertEqual(r, ['rapids'])

    _, r = self.anagrams2.get_anagrams("rapier")
    self.assertEqual(r, ['rapier', 'repair'])

    _, r = self.anagrams2.get_anagrams("raping")
    self.assertEqual(r, ['paring', 'raping'])

    _, r = self.anagrams2.get_anagrams("rapport")
    self.assertEqual(r, ['rapport'])

    _, r = self.anagrams2.get_anagrams("rapprochement")
    self.assertEqual(r, ['rapprochement'])

    _, r = self.anagrams2.get_anagrams("raps")
    self.assertEqual(r, ['pars', 'raps', 'rasp'])

    _, r = self.anagrams2.get_anagrams("rapt")
    self.assertEqual(r, ['part', 'rapt', 'trap'])

    _, r = self.anagrams2.get_anagrams("raptly")
    self.assertEqual(r, ['partly', 'raptly'])

    _, r = self.anagrams2.get_anagrams("rapture")
    self.assertEqual(r, ['rapture'])

    _, r = self.anagrams2.get_anagrams("raptures")
    self.assertEqual(r, ['raptures'])

    _, r = self.anagrams2.get_anagrams("rapturous")
    self.assertEqual(r, ['rapturous'])

    _, r = self.anagrams2.get_anagrams("rapunzel")
    self.assertEqual(r, ['rapunzel'])

    _, r = self.anagrams2.get_anagrams("rare")
    self.assertEqual(r, ['rare', 'rear'])

    _, r = self.anagrams2.get_anagrams("rarely")
    self.assertEqual(r, ['rarely'])

    _, r = self.anagrams2.get_anagrams("rareness")
    self.assertEqual(r, ['rareness'])

    _, r = self.anagrams2.get_anagrams("rarer")
    self.assertEqual(r, ['rarer'])

    _, r = self.anagrams2.get_anagrams("rarest")
    self.assertEqual(r, ['arrest', 'rarest', 'raster', 'raters', 'sartre', 'starer'])

    _, r = self.anagrams2.get_anagrams("raritan")
    self.assertEqual(r, ['raritan'])

    _, r = self.anagrams2.get_anagrams("rarity")
    self.assertEqual(r, ['rarity'])

    _, r = self.anagrams2.get_anagrams("rascal")
    self.assertEqual(r, ['rascal', 'scalar'])

    _, r = self.anagrams2.get_anagrams("rascally")
    self.assertEqual(r, ['rascally'])

    _, r = self.anagrams2.get_anagrams("rascals")
    self.assertEqual(r, ['rascals', 'scalars'])

    _, r = self.anagrams2.get_anagrams("rash")
    self.assertEqual(r, ['rash'])

    _, r = self.anagrams2.get_anagrams("rasher")
    self.assertEqual(r, ['rasher', 'sharer'])

    _, r = self.anagrams2.get_anagrams("rashly")
    self.assertEqual(r, ['rashly'])

    _, r = self.anagrams2.get_anagrams("rashness")
    self.assertEqual(r, ['rashness'])

    _, r = self.anagrams2.get_anagrams("rasmussen")
    self.assertEqual(r, ['rasmussen'])

    _, r = self.anagrams2.get_anagrams("rasp")
    self.assertEqual(r, ['pars', 'raps', 'rasp'])

    _, r = self.anagrams2.get_anagrams("raspberry")
    self.assertEqual(r, ['raspberry'])

    _, r = self.anagrams2.get_anagrams("rasped")
    self.assertEqual(r, ['drapes', 'parsed', 'rasped', 'spared', 'spread'])

    _, r = self.anagrams2.get_anagrams("rasping")
    self.assertEqual(r, ['parings', 'parsing', 'rasping', 'sparing'])

    _, r = self.anagrams2.get_anagrams("rasps")
    self.assertEqual(r, ['rasps'])

    _, r = self.anagrams2.get_anagrams("raster")
    self.assertEqual(r, ['arrest', 'rarest', 'raster', 'raters', 'sartre', 'starer'])

    _, r = self.anagrams2.get_anagrams("rastus")
    self.assertEqual(r, ['rastus'])

    _, r = self.anagrams2.get_anagrams("rat")
    self.assertEqual(r, ['art', 'rat', 'tar'])

    _, r = self.anagrams2.get_anagrams("rate")
    self.assertEqual(r, ['rate', 'tear'])

    _, r = self.anagrams2.get_anagrams("rated")
    self.assertEqual(r, ['dater', 'rated', 'trade', 'tread'])

    _, r = self.anagrams2.get_anagrams("rater")
    self.assertEqual(r, ['rater', 'terra'])

    _, r = self.anagrams2.get_anagrams("raters")
    self.assertEqual(r, ['arrest', 'rarest', 'raster', 'raters', 'sartre', 'starer'])

    _, r = self.anagrams2.get_anagrams("rates")
    self.assertEqual(r, ['aster', 'rates', 'stare', 'tears'])

    _, r = self.anagrams2.get_anagrams("ratfor")
    self.assertEqual(r, ['ratfor'])

    _, r = self.anagrams2.get_anagrams("rather")
    self.assertEqual(r, ['rather'])

    _, r = self.anagrams2.get_anagrams("ratification")
    self.assertEqual(r, ['ratification'])

    _, r = self.anagrams2.get_anagrams("ratified")
    self.assertEqual(r, ['ratified'])

    _, r = self.anagrams2.get_anagrams("ratifies")
    self.assertEqual(r, ['ratifies'])

    _, r = self.anagrams2.get_anagrams("ratify")
    self.assertEqual(r, ['ratify'])

    _, r = self.anagrams2.get_anagrams("ratifying")
    self.assertEqual(r, ['ratifying'])

    _, r = self.anagrams2.get_anagrams("rating")
    self.assertEqual(r, ['rating'])

    _, r = self.anagrams2.get_anagrams("ratings")
    self.assertEqual(r, ['ratings', 'staring'])

    _, r = self.anagrams2.get_anagrams("ratio")
    self.assertEqual(r, ['ratio'])

    _, r = self.anagrams2.get_anagrams("ration")
    self.assertEqual(r, ['ration'])

    _, r = self.anagrams2.get_anagrams("rational")
    self.assertEqual(r, ['rational'])

    _, r = self.anagrams2.get_anagrams("rationale")
    self.assertEqual(r, ['rationale'])

    _, r = self.anagrams2.get_anagrams("rationales")
    self.assertEqual(r, ['rationales', 'senatorial'])

    _, r = self.anagrams2.get_anagrams("rationalities")
    self.assertEqual(r, ['rationalities'])

    _, r = self.anagrams2.get_anagrams("rationality")
    self.assertEqual(r, ['rationality'])

    _, r = self.anagrams2.get_anagrams("rationalization")
    self.assertEqual(r, ['rationalization'])

    _, r = self.anagrams2.get_anagrams("rationalizations")
    self.assertEqual(r, ['rationalizations'])

    _, r = self.anagrams2.get_anagrams("rationalize")
    self.assertEqual(r, ['rationalize', 'realization'])

    _, r = self.anagrams2.get_anagrams("rationalized")
    self.assertEqual(r, ['rationalized'])

    _, r = self.anagrams2.get_anagrams("rationalizes")
    self.assertEqual(r, ['rationalizes', 'realizations'])

    _, r = self.anagrams2.get_anagrams("rationalizing")
    self.assertEqual(r, ['rationalizing'])

    _, r = self.anagrams2.get_anagrams("rationally")
    self.assertEqual(r, ['rationally'])

    _, r = self.anagrams2.get_anagrams("rationals")
    self.assertEqual(r, ['rationals'])

    _, r = self.anagrams2.get_anagrams("rationing")
    self.assertEqual(r, ['rationing'])

    _, r = self.anagrams2.get_anagrams("rations")
    self.assertEqual(r, ['rations'])

    _, r = self.anagrams2.get_anagrams("ratios")
    self.assertEqual(r, ['ratios'])

    _, r = self.anagrams2.get_anagrams("rats")
    self.assertEqual(r, ['arts', 'rats', 'star'])

    _, r = self.anagrams2.get_anagrams("rattle")
    self.assertEqual(r, ['latter', 'rattle'])

    _, r = self.anagrams2.get_anagrams("rattled")
    self.assertEqual(r, ['rattled'])

    _, r = self.anagrams2.get_anagrams("rattler")
    self.assertEqual(r, ['rattler'])

    _, r = self.anagrams2.get_anagrams("rattlers")
    self.assertEqual(r, ['rattlers'])

    _, r = self.anagrams2.get_anagrams("rattles")
    self.assertEqual(r, ['rattles', 'starlet', 'startle', 'statler'])

    _, r = self.anagrams2.get_anagrams("rattlesnake")
    self.assertEqual(r, ['rattlesnake'])

    _, r = self.anagrams2.get_anagrams("rattlesnakes")
    self.assertEqual(r, ['rattlesnakes'])

    _, r = self.anagrams2.get_anagrams("rattling")
    self.assertEqual(r, ['rattling'])

    _, r = self.anagrams2.get_anagrams("raucous")
    self.assertEqual(r, ['raucous'])

    _, r = self.anagrams2.get_anagrams("raul")
    self.assertEqual(r, ['lura', 'raul'])

    _, r = self.anagrams2.get_anagrams("ravage")
    self.assertEqual(r, ['ravage'])

    _, r = self.anagrams2.get_anagrams("ravaged")
    self.assertEqual(r, ['ravaged'])

    _, r = self.anagrams2.get_anagrams("ravager")
    self.assertEqual(r, ['ravager'])

    _, r = self.anagrams2.get_anagrams("ravagers")
    self.assertEqual(r, ['ravagers'])

    _, r = self.anagrams2.get_anagrams("ravages")
    self.assertEqual(r, ['ravages', 'savager'])

    _, r = self.anagrams2.get_anagrams("ravaging")
    self.assertEqual(r, ['ravaging'])

    _, r = self.anagrams2.get_anagrams("rave")
    self.assertEqual(r, ['aver', 'rave', 'vera'])

    _, r = self.anagrams2.get_anagrams("raved")
    self.assertEqual(r, ['raved'])

    _, r = self.anagrams2.get_anagrams("raven")
    self.assertEqual(r, ['raven', 'verna'])

    _, r = self.anagrams2.get_anagrams("ravening")
    self.assertEqual(r, ['ravening'])

    _, r = self.anagrams2.get_anagrams("ravenous")
    self.assertEqual(r, ['ravenous'])

    _, r = self.anagrams2.get_anagrams("ravenously")
    self.assertEqual(r, ['ravenously'])

    _, r = self.anagrams2.get_anagrams("ravens")
    self.assertEqual(r, ['ravens'])

    _, r = self.anagrams2.get_anagrams("raves")
    self.assertEqual(r, ['avers', 'raves', 'saver', 'versa'])

    _, r = self.anagrams2.get_anagrams("ravine")
    self.assertEqual(r, ['ravine'])

    _, r = self.anagrams2.get_anagrams("ravines")
    self.assertEqual(r, ['ravines'])

    _, r = self.anagrams2.get_anagrams("raving")
    self.assertEqual(r, ['raving'])

    _, r = self.anagrams2.get_anagrams("ravings")
    self.assertEqual(r, ['ravings'])

    _, r = self.anagrams2.get_anagrams("raw")
    self.assertEqual(r, ['raw', 'war'])

    _, r = self.anagrams2.get_anagrams("rawer")
    self.assertEqual(r, ['rawer'])

    _, r = self.anagrams2.get_anagrams("rawest")
    self.assertEqual(r, ['rawest', 'waters'])

    _, r = self.anagrams2.get_anagrams("rawlings")
    self.assertEqual(r, ['rawlings'])

    _, r = self.anagrams2.get_anagrams("rawlins")
    self.assertEqual(r, ['rawlins'])

    _, r = self.anagrams2.get_anagrams("rawlinson")
    self.assertEqual(r, ['rawlinson'])

    _, r = self.anagrams2.get_anagrams("rawly")
    self.assertEqual(r, ['rawly'])

    _, r = self.anagrams2.get_anagrams("rawness")
    self.assertEqual(r, ['answers', 'rawness'])

    _, r = self.anagrams2.get_anagrams("rawson")
    self.assertEqual(r, ['rawson'])

    _, r = self.anagrams2.get_anagrams("ray")
    self.assertEqual(r, ['ray'])

    _, r = self.anagrams2.get_anagrams("rayburn")
    self.assertEqual(r, ['rayburn'])

    _, r = self.anagrams2.get_anagrams("rayleigh")
    self.assertEqual(r, ['rayleigh'])

    _, r = self.anagrams2.get_anagrams("raymond")
    self.assertEqual(r, ['raymond'])

    _, r = self.anagrams2.get_anagrams("raymondville")
    self.assertEqual(r, ['raymondville'])

    _, r = self.anagrams2.get_anagrams("rays")
    self.assertEqual(r, ['rays'])

    _, r = self.anagrams2.get_anagrams("raytheon")
    self.assertEqual(r, ['raytheon'])

    _, r = self.anagrams2.get_anagrams("raze")
    self.assertEqual(r, ['ezra', 'raze'])

    _, r = self.anagrams2.get_anagrams("razor")
    self.assertEqual(r, ['razor'])

    _, r = self.anagrams2.get_anagrams("razors")
    self.assertEqual(r, ['razors'])

    _, r = self.anagrams2.get_anagrams("re")
    self.assertEqual(r, ['re'])

    _, r = self.anagrams2.get_anagrams("reabbreviate")
    self.assertEqual(r, ['reabbreviate'])

    _, r = self.anagrams2.get_anagrams("reabbreviated")
    self.assertEqual(r, ['reabbreviated'])

    _, r = self.anagrams2.get_anagrams("reabbreviates")
    self.assertEqual(r, ['reabbreviates'])

    _, r = self.anagrams2.get_anagrams("reabbreviating")
    self.assertEqual(r, ['reabbreviating'])

    _, r = self.anagrams2.get_anagrams("reach")
    self.assertEqual(r, ['reach'])

    _, r = self.anagrams2.get_anagrams("reachability")
    self.assertEqual(r, ['reachability'])

    _, r = self.anagrams2.get_anagrams("reachable")
    self.assertEqual(r, ['reachable'])

    _, r = self.anagrams2.get_anagrams("reachably")
    self.assertEqual(r, ['reachably'])

    _, r = self.anagrams2.get_anagrams("reached")
    self.assertEqual(r, ['reached'])

    _, r = self.anagrams2.get_anagrams("reacher")
    self.assertEqual(r, ['reacher'])

    _, r = self.anagrams2.get_anagrams("reaches")
    self.assertEqual(r, ['reaches'])

    _, r = self.anagrams2.get_anagrams("reaching")
    self.assertEqual(r, ['reaching'])

    _, r = self.anagrams2.get_anagrams("reacquired")
    self.assertEqual(r, ['reacquired'])

    _, r = self.anagrams2.get_anagrams("react")
    self.assertEqual(r, ['caret', 'cater', 'crate', 'react', 'recta', 'trace'])

    _, r = self.anagrams2.get_anagrams("reacted")
    self.assertEqual(r, ['catered', 'created', 'reacted'])

    _, r = self.anagrams2.get_anagrams("reacting")
    self.assertEqual(r, ['catering', 'creating', 'reacting'])

    _, r = self.anagrams2.get_anagrams("reaction")
    self.assertEqual(r, ['creation', 'reaction'])

    _, r = self.anagrams2.get_anagrams("reactionaries")
    self.assertEqual(r, ['reactionaries'])

    _, r = self.anagrams2.get_anagrams("reactionary")
    self.assertEqual(r, ['reactionary'])

    _, r = self.anagrams2.get_anagrams("reactions")
    self.assertEqual(r, ['creations', 'reactions'])

    _, r = self.anagrams2.get_anagrams("reactivate")
    self.assertEqual(r, ['reactivate'])

    _, r = self.anagrams2.get_anagrams("reactivated")
    self.assertEqual(r, ['reactivated'])

    _, r = self.anagrams2.get_anagrams("reactivates")
    self.assertEqual(r, ['reactivates'])

    _, r = self.anagrams2.get_anagrams("reactivating")
    self.assertEqual(r, ['reactivating'])

    _, r = self.anagrams2.get_anagrams("reactivation")
    self.assertEqual(r, ['reactivation'])

    _, r = self.anagrams2.get_anagrams("reactive")
    self.assertEqual(r, ['creative', 'reactive'])

    _, r = self.anagrams2.get_anagrams("reactively")
    self.assertEqual(r, ['creatively', 'reactively'])

    _, r = self.anagrams2.get_anagrams("reactivity")
    self.assertEqual(r, ['creativity', 'reactivity'])

    _, r = self.anagrams2.get_anagrams("reactor")
    self.assertEqual(r, ['creator', 'reactor'])

    _, r = self.anagrams2.get_anagrams("reactors")
    self.assertEqual(r, ['creators', 'reactors'])

    _, r = self.anagrams2.get_anagrams("reacts")
    self.assertEqual(r, ['caster', 'caters', 'crates', 'reacts', 'recast', 'traces'])

    _, r = self.anagrams2.get_anagrams("read")
    self.assertEqual(r, ['dare', 'dear', 'read'])

    _, r = self.anagrams2.get_anagrams("readability")
    self.assertEqual(r, ['readability'])

    _, r = self.anagrams2.get_anagrams("readable")
    self.assertEqual(r, ['readable'])

    _, r = self.anagrams2.get_anagrams("reader")
    self.assertEqual(r, ['dearer', 'reader', 'reared', 'reread'])

    _, r = self.anagrams2.get_anagrams("readers")
    self.assertEqual(r, ['readers'])

    _, r = self.anagrams2.get_anagrams("readied")
    self.assertEqual(r, ['readied'])

    _, r = self.anagrams2.get_anagrams("readier")
    self.assertEqual(r, ['readier'])

    _, r = self.anagrams2.get_anagrams("readies")
    self.assertEqual(r, ['readies'])

    _, r = self.anagrams2.get_anagrams("readiest")
    self.assertEqual(r, ['readiest', 'steadier'])

    _, r = self.anagrams2.get_anagrams("readily")
    self.assertEqual(r, ['readily'])

    _, r = self.anagrams2.get_anagrams("readiness")
    self.assertEqual(r, ['readiness'])

    _, r = self.anagrams2.get_anagrams("reading")
    self.assertEqual(r, ['grained', 'reading'])

    _, r = self.anagrams2.get_anagrams("readings")
    self.assertEqual(r, ['readings'])

    _, r = self.anagrams2.get_anagrams("readjusted")
    self.assertEqual(r, ['readjusted'])

    _, r = self.anagrams2.get_anagrams("readout")
    self.assertEqual(r, ['readout'])

    _, r = self.anagrams2.get_anagrams("readouts")
    self.assertEqual(r, ['readouts'])

    _, r = self.anagrams2.get_anagrams("reads")
    self.assertEqual(r, ['dares', 'reads'])

    _, r = self.anagrams2.get_anagrams("ready")
    self.assertEqual(r, ['ready'])

    _, r = self.anagrams2.get_anagrams("readying")
    self.assertEqual(r, ['readying'])

    _, r = self.anagrams2.get_anagrams("reagan")
    self.assertEqual(r, ['reagan'])

    _, r = self.anagrams2.get_anagrams("real")
    self.assertEqual(r, ['earl', 'lear', 'real'])

    _, r = self.anagrams2.get_anagrams("realest")
    self.assertEqual(r, ['realest', 'relates', 'stealer'])

    _, r = self.anagrams2.get_anagrams("realign")
    self.assertEqual(r, ['realign'])

    _, r = self.anagrams2.get_anagrams("realigned")
    self.assertEqual(r, ['geraldine', 'realigned'])

    _, r = self.anagrams2.get_anagrams("realigning")
    self.assertEqual(r, ['realigning'])

    _, r = self.anagrams2.get_anagrams("realigns")
    self.assertEqual(r, ['realigns'])

    _, r = self.anagrams2.get_anagrams("realism")
    self.assertEqual(r, ['realism'])

    _, r = self.anagrams2.get_anagrams("realist")
    self.assertEqual(r, ['realist', 'saltier'])

    _, r = self.anagrams2.get_anagrams("realistic")
    self.assertEqual(r, ['realistic'])

    _, r = self.anagrams2.get_anagrams("realistically")
    self.assertEqual(r, ['realistically'])

    _, r = self.anagrams2.get_anagrams("realists")
    self.assertEqual(r, ['realists'])

    _, r = self.anagrams2.get_anagrams("realities")
    self.assertEqual(r, ['israelite', 'realities'])

    _, r = self.anagrams2.get_anagrams("reality")
    self.assertEqual(r, ['irately', 'reality'])

    _, r = self.anagrams2.get_anagrams("realizable")
    self.assertEqual(r, ['realizable'])

    _, r = self.anagrams2.get_anagrams("realizably")
    self.assertEqual(r, ['realizably'])

    _, r = self.anagrams2.get_anagrams("realization")
    self.assertEqual(r, ['rationalize', 'realization'])

    _, r = self.anagrams2.get_anagrams("realizations")
    self.assertEqual(r, ['rationalizes', 'realizations'])

    _, r = self.anagrams2.get_anagrams("realize")
    self.assertEqual(r, ['realize'])

    _, r = self.anagrams2.get_anagrams("realized")
    self.assertEqual(r, ['realized'])

    _, r = self.anagrams2.get_anagrams("realizes")
    self.assertEqual(r, ['realizes'])

    _, r = self.anagrams2.get_anagrams("realizing")
    self.assertEqual(r, ['realizing'])

    _, r = self.anagrams2.get_anagrams("reallocate")
    self.assertEqual(r, ['reallocate'])

    _, r = self.anagrams2.get_anagrams("really")
    self.assertEqual(r, ['really'])

    _, r = self.anagrams2.get_anagrams("realm")
    self.assertEqual(r, ['realm'])

    _, r = self.anagrams2.get_anagrams("realms")
    self.assertEqual(r, ['realms'])

    _, r = self.anagrams2.get_anagrams("realness")
    self.assertEqual(r, ['realness'])

    _, r = self.anagrams2.get_anagrams("reals")
    self.assertEqual(r, ['earls', 'lares', 'laser', 'reals'])

    _, r = self.anagrams2.get_anagrams("realtor")
    self.assertEqual(r, ['realtor'])

    _, r = self.anagrams2.get_anagrams("ream")
    self.assertEqual(r, ['mare', 'ream'])

    _, r = self.anagrams2.get_anagrams("reanalyze")
    self.assertEqual(r, ['reanalyze'])

    _, r = self.anagrams2.get_anagrams("reanalyzes")
    self.assertEqual(r, ['reanalyzes'])

    _, r = self.anagrams2.get_anagrams("reanalyzing")
    self.assertEqual(r, ['reanalyzing'])

    _, r = self.anagrams2.get_anagrams("reap")
    self.assertEqual(r, ['earp', 'pare', 'pear', 'rape', 'reap'])

    _, r = self.anagrams2.get_anagrams("reaped")
    self.assertEqual(r, ['reaped'])

    _, r = self.anagrams2.get_anagrams("reaper")
    self.assertEqual(r, ['reaper'])

    _, r = self.anagrams2.get_anagrams("reaping")
    self.assertEqual(r, ['reaping'])

    _, r = self.anagrams2.get_anagrams("reappear")
    self.assertEqual(r, ['appearer', 'reappear'])

    _, r = self.anagrams2.get_anagrams("reappeared")
    self.assertEqual(r, ['reappeared'])

    _, r = self.anagrams2.get_anagrams("reappearing")
    self.assertEqual(r, ['reappearing'])

    _, r = self.anagrams2.get_anagrams("reappears")
    self.assertEqual(r, ['appearers', 'reappears'])

    _, r = self.anagrams2.get_anagrams("reappraisal")
    self.assertEqual(r, ['reappraisal'])

    _, r = self.anagrams2.get_anagrams("reappraisals")
    self.assertEqual(r, ['reappraisals'])

    _, r = self.anagrams2.get_anagrams("reaps")
    self.assertEqual(r, ['pares', 'parse', 'pears', 'rapes', 'reaps', 'spare', 'spear'])

    _, r = self.anagrams2.get_anagrams("rear")
    self.assertEqual(r, ['rare', 'rear'])

    _, r = self.anagrams2.get_anagrams("reared")
    self.assertEqual(r, ['dearer', 'reader', 'reared', 'reread'])

    _, r = self.anagrams2.get_anagrams("rearing")
    self.assertEqual(r, ['angrier', 'earring', 'rearing'])

    _, r = self.anagrams2.get_anagrams("rearrange")
    self.assertEqual(r, ['rearrange'])

    _, r = self.anagrams2.get_anagrams("rearrangeable")
    self.assertEqual(r, ['rearrangeable'])

    _, r = self.anagrams2.get_anagrams("rearranged")
    self.assertEqual(r, ['rearranged'])

    _, r = self.anagrams2.get_anagrams("rearrangement")
    self.assertEqual(r, ['rearrangement'])

    _, r = self.anagrams2.get_anagrams("rearrangements")
    self.assertEqual(r, ['rearrangements'])

    _, r = self.anagrams2.get_anagrams("rearranges")
    self.assertEqual(r, ['rearranges'])

    _, r = self.anagrams2.get_anagrams("rearranging")
    self.assertEqual(r, ['rearranging'])

    _, r = self.anagrams2.get_anagrams("rearrest")
    self.assertEqual(r, ['arrester', 'rearrest'])

    _, r = self.anagrams2.get_anagrams("rearrested")
    self.assertEqual(r, ['rearrested'])

    _, r = self.anagrams2.get_anagrams("rears")
    self.assertEqual(r, ['rears', 'serra'])

    _, r = self.anagrams2.get_anagrams("reason")
    self.assertEqual(r, ['reason'])

    _, r = self.anagrams2.get_anagrams("reasonable")
    self.assertEqual(r, ['reasonable'])

    _, r = self.anagrams2.get_anagrams("reasonableness")
    self.assertEqual(r, ['reasonableness'])

    _, r = self.anagrams2.get_anagrams("reasonably")
    self.assertEqual(r, ['reasonably'])

    _, r = self.anagrams2.get_anagrams("reasoned")
    self.assertEqual(r, ['reasoned'])

    _, r = self.anagrams2.get_anagrams("reasoner")
    self.assertEqual(r, ['reasoner'])

    _, r = self.anagrams2.get_anagrams("reasoning")
    self.assertEqual(r, ['reasoning'])

    _, r = self.anagrams2.get_anagrams("reasonings")
    self.assertEqual(r, ['reasonings'])

    _, r = self.anagrams2.get_anagrams("reasons")
    self.assertEqual(r, ['reasons'])

    _, r = self.anagrams2.get_anagrams("reassemble")
    self.assertEqual(r, ['reassemble'])

    _, r = self.anagrams2.get_anagrams("reassembled")
    self.assertEqual(r, ['reassembled'])

    _, r = self.anagrams2.get_anagrams("reassembles")
    self.assertEqual(r, ['reassembles'])

    _, r = self.anagrams2.get_anagrams("reassembling")
    self.assertEqual(r, ['reassembling'])

    _, r = self.anagrams2.get_anagrams("reassembly")
    self.assertEqual(r, ['reassembly'])

    _, r = self.anagrams2.get_anagrams("reassessment")
    self.assertEqual(r, ['reassessment'])

    _, r = self.anagrams2.get_anagrams("reassessments")
    self.assertEqual(r, ['reassessments'])

    _, r = self.anagrams2.get_anagrams("reassign")
    self.assertEqual(r, ['assigner', 'reassign'])

    _, r = self.anagrams2.get_anagrams("reassigned")
    self.assertEqual(r, ['reassigned'])

    _, r = self.anagrams2.get_anagrams("reassigning")
    self.assertEqual(r, ['reassigning'])

    _, r = self.anagrams2.get_anagrams("reassignment")
    self.assertEqual(r, ['reassignment'])

    _, r = self.anagrams2.get_anagrams("reassignments")
    self.assertEqual(r, ['reassignments'])

    _, r = self.anagrams2.get_anagrams("reassigns")
    self.assertEqual(r, ['assigners', 'reassigns'])

    _, r = self.anagrams2.get_anagrams("reassure")
    self.assertEqual(r, ['reassure'])

    _, r = self.anagrams2.get_anagrams("reassured")
    self.assertEqual(r, ['reassured'])

    _, r = self.anagrams2.get_anagrams("reassures")
    self.assertEqual(r, ['reassures'])

    _, r = self.anagrams2.get_anagrams("reassuring")
    self.assertEqual(r, ['reassuring'])

    _, r = self.anagrams2.get_anagrams("reawaken")
    self.assertEqual(r, ['reawaken'])

    _, r = self.anagrams2.get_anagrams("reawakened")
    self.assertEqual(r, ['reawakened'])

    _, r = self.anagrams2.get_anagrams("reawakening")
    self.assertEqual(r, ['reawakening'])

    _, r = self.anagrams2.get_anagrams("reawakens")
    self.assertEqual(r, ['reawakens'])

    _, r = self.anagrams2.get_anagrams("rebate")
    self.assertEqual(r, ['beater', 'berate', 'rebate'])

    _, r = self.anagrams2.get_anagrams("rebates")
    self.assertEqual(r, ['beaters', 'berates', 'rebates'])

    _, r = self.anagrams2.get_anagrams("rebecca")
    self.assertEqual(r, ['rebecca'])

    _, r = self.anagrams2.get_anagrams("rebel")
    self.assertEqual(r, ['rebel'])

    _, r = self.anagrams2.get_anagrams("rebelled")
    self.assertEqual(r, ['rebelled'])

    _, r = self.anagrams2.get_anagrams("rebelling")
    self.assertEqual(r, ['rebelling'])

    _, r = self.anagrams2.get_anagrams("rebellion")
    self.assertEqual(r, ['rebellion'])

    _, r = self.anagrams2.get_anagrams("rebellions")
    self.assertEqual(r, ['rebellions'])

    _, r = self.anagrams2.get_anagrams("rebellious")
    self.assertEqual(r, ['rebellious'])

    _, r = self.anagrams2.get_anagrams("rebelliously")
    self.assertEqual(r, ['rebelliously'])

    _, r = self.anagrams2.get_anagrams("rebelliousness")
    self.assertEqual(r, ['rebelliousness'])

    _, r = self.anagrams2.get_anagrams("rebels")
    self.assertEqual(r, ['rebels'])

    _, r = self.anagrams2.get_anagrams("rebind")
    self.assertEqual(r, ['binder', 'rebind'])

    _, r = self.anagrams2.get_anagrams("rebinding")
    self.assertEqual(r, ['rebinding'])

    _, r = self.anagrams2.get_anagrams("rebinds")
    self.assertEqual(r, ['binders', 'rebinds'])

    _, r = self.anagrams2.get_anagrams("reboot")
    self.assertEqual(r, ['reboot'])

    _, r = self.anagrams2.get_anagrams("rebooted")
    self.assertEqual(r, ['rebooted'])

    _, r = self.anagrams2.get_anagrams("rebooting")
    self.assertEqual(r, ['rebooting'])

    _, r = self.anagrams2.get_anagrams("reboots")
    self.assertEqual(r, ['booster', 'reboots'])

    _, r = self.anagrams2.get_anagrams("rebound")
    self.assertEqual(r, ['rebound'])

    _, r = self.anagrams2.get_anagrams("rebounded")
    self.assertEqual(r, ['rebounded'])

    _, r = self.anagrams2.get_anagrams("rebounding")
    self.assertEqual(r, ['rebounding'])

    _, r = self.anagrams2.get_anagrams("rebounds")
    self.assertEqual(r, ['rebounds'])

    _, r = self.anagrams2.get_anagrams("rebroadcast")
    self.assertEqual(r, ['broadcaster', 'rebroadcast'])

    _, r = self.anagrams2.get_anagrams("rebroadcasting")
    self.assertEqual(r, ['rebroadcasting'])

    _, r = self.anagrams2.get_anagrams("rebroadcasts")
    self.assertEqual(r, ['broadcasters', 'rebroadcasts'])

    _, r = self.anagrams2.get_anagrams("rebuff")
    self.assertEqual(r, ['buffer', 'rebuff'])

    _, r = self.anagrams2.get_anagrams("rebuffed")
    self.assertEqual(r, ['buffered', 'rebuffed'])

    _, r = self.anagrams2.get_anagrams("rebuild")
    self.assertEqual(r, ['builder', 'rebuild'])

    _, r = self.anagrams2.get_anagrams("rebuilding")
    self.assertEqual(r, ['rebuilding'])

    _, r = self.anagrams2.get_anagrams("rebuilds")
    self.assertEqual(r, ['builders', 'rebuilds'])

    _, r = self.anagrams2.get_anagrams("rebuilt")
    self.assertEqual(r, ['rebuilt'])

    _, r = self.anagrams2.get_anagrams("rebuke")
    self.assertEqual(r, ['rebuke'])

    _, r = self.anagrams2.get_anagrams("rebuked")
    self.assertEqual(r, ['rebuked'])

    _, r = self.anagrams2.get_anagrams("rebukes")
    self.assertEqual(r, ['rebukes'])

    _, r = self.anagrams2.get_anagrams("rebuking")
    self.assertEqual(r, ['rebuking'])

    _, r = self.anagrams2.get_anagrams("rebuttal")
    self.assertEqual(r, ['rebuttal'])

    _, r = self.anagrams2.get_anagrams("rebutted")
    self.assertEqual(r, ['buttered', 'rebutted'])

    _, r = self.anagrams2.get_anagrams("rebutting")
    self.assertEqual(r, ['buttering', 'rebutting'])

    _, r = self.anagrams2.get_anagrams("recalcitrant")
    self.assertEqual(r, ['recalcitrant'])

    _, r = self.anagrams2.get_anagrams("recalculate")
    self.assertEqual(r, ['recalculate'])

    _, r = self.anagrams2.get_anagrams("recalculated")
    self.assertEqual(r, ['recalculated'])

    _, r = self.anagrams2.get_anagrams("recalculates")
    self.assertEqual(r, ['recalculates'])

    _, r = self.anagrams2.get_anagrams("recalculating")
    self.assertEqual(r, ['recalculating'])

    _, r = self.anagrams2.get_anagrams("recalculation")
    self.assertEqual(r, ['recalculation'])

    _, r = self.anagrams2.get_anagrams("recalculations")
    self.assertEqual(r, ['recalculations'])

    _, r = self.anagrams2.get_anagrams("recalibrate")
    self.assertEqual(r, ['recalibrate'])

    _, r = self.anagrams2.get_anagrams("recalibrated")
    self.assertEqual(r, ['recalibrated'])

    _, r = self.anagrams2.get_anagrams("recalibrates")
    self.assertEqual(r, ['recalibrates'])

    _, r = self.anagrams2.get_anagrams("recalibrating")
    self.assertEqual(r, ['recalibrating'])

    _, r = self.anagrams2.get_anagrams("recall")
    self.assertEqual(r, ['caller', 'cellar', 'recall'])

    _, r = self.anagrams2.get_anagrams("recalled")
    self.assertEqual(r, ['recalled'])

    _, r = self.anagrams2.get_anagrams("recalling")
    self.assertEqual(r, ['recalling'])

    _, r = self.anagrams2.get_anagrams("recalls")
    self.assertEqual(r, ['callers', 'cellars', 'recalls'])

    _, r = self.anagrams2.get_anagrams("recant")
    self.assertEqual(r, ['cretan', 'nectar', 'recant', 'trance'])

    _, r = self.anagrams2.get_anagrams("recapitulate")
    self.assertEqual(r, ['recapitulate'])

    _, r = self.anagrams2.get_anagrams("recapitulated")
    self.assertEqual(r, ['recapitulated'])

    _, r = self.anagrams2.get_anagrams("recapitulates")
    self.assertEqual(r, ['recapitulates'])

    _, r = self.anagrams2.get_anagrams("recapitulation")
    self.assertEqual(r, ['recapitulation'])

    _, r = self.anagrams2.get_anagrams("recapture")
    self.assertEqual(r, ['recapture'])

    _, r = self.anagrams2.get_anagrams("recaptured")
    self.assertEqual(r, ['recaptured'])

    _, r = self.anagrams2.get_anagrams("recaptures")
    self.assertEqual(r, ['recaptures'])

    _, r = self.anagrams2.get_anagrams("recapturing")
    self.assertEqual(r, ['recapturing'])

    _, r = self.anagrams2.get_anagrams("recast")
    self.assertEqual(r, ['caster', 'caters', 'crates', 'reacts', 'recast', 'traces'])

    _, r = self.anagrams2.get_anagrams("recasting")
    self.assertEqual(r, ['recasting'])

    _, r = self.anagrams2.get_anagrams("recasts")
    self.assertEqual(r, ['actress', 'casters', 'recasts'])

    _, r = self.anagrams2.get_anagrams("recede")
    self.assertEqual(r, ['decree', 'recede'])

    _, r = self.anagrams2.get_anagrams("receded")
    self.assertEqual(r, ['decreed', 'receded'])

    _, r = self.anagrams2.get_anagrams("recedes")
    self.assertEqual(r, ['decrees', 'recedes'])

    _, r = self.anagrams2.get_anagrams("receding")
    self.assertEqual(r, ['receding'])

    _, r = self.anagrams2.get_anagrams("receipt")
    self.assertEqual(r, ['receipt'])

    _, r = self.anagrams2.get_anagrams("receipts")
    self.assertEqual(r, ['receipts'])

    _, r = self.anagrams2.get_anagrams("receivable")
    self.assertEqual(r, ['receivable'])

    _, r = self.anagrams2.get_anagrams("receive")
    self.assertEqual(r, ['receive'])

    _, r = self.anagrams2.get_anagrams("received")
    self.assertEqual(r, ['deceiver', 'received'])

    _, r = self.anagrams2.get_anagrams("receiver")
    self.assertEqual(r, ['receiver'])

    _, r = self.anagrams2.get_anagrams("receivers")
    self.assertEqual(r, ['receivers'])

    _, r = self.anagrams2.get_anagrams("receives")
    self.assertEqual(r, ['receives'])

    _, r = self.anagrams2.get_anagrams("receiving")
    self.assertEqual(r, ['receiving'])

    _, r = self.anagrams2.get_anagrams("recent")
    self.assertEqual(r, ['center', 'recent'])

    _, r = self.anagrams2.get_anagrams("recently")
    self.assertEqual(r, ['recently'])

    _, r = self.anagrams2.get_anagrams("recentness")
    self.assertEqual(r, ['recentness'])

    _, r = self.anagrams2.get_anagrams("receptacle")
    self.assertEqual(r, ['receptacle'])

    _, r = self.anagrams2.get_anagrams("receptacles")
    self.assertEqual(r, ['receptacles'])

    _, r = self.anagrams2.get_anagrams("reception")
    self.assertEqual(r, ['reception'])

    _, r = self.anagrams2.get_anagrams("receptionist")
    self.assertEqual(r, ['receptionist'])

    _, r = self.anagrams2.get_anagrams("receptions")
    self.assertEqual(r, ['receptions'])

    _, r = self.anagrams2.get_anagrams("receptive")
    self.assertEqual(r, ['receptive'])

    _, r = self.anagrams2.get_anagrams("receptively")
    self.assertEqual(r, ['receptively'])

    _, r = self.anagrams2.get_anagrams("receptiveness")
    self.assertEqual(r, ['receptiveness'])

    _, r = self.anagrams2.get_anagrams("receptivity")
    self.assertEqual(r, ['receptivity'])

    _, r = self.anagrams2.get_anagrams("receptor")
    self.assertEqual(r, ['receptor'])

    _, r = self.anagrams2.get_anagrams("recess")
    self.assertEqual(r, ['recess'])

    _, r = self.anagrams2.get_anagrams("recessed")
    self.assertEqual(r, ['recessed'])

    _, r = self.anagrams2.get_anagrams("recesses")
    self.assertEqual(r, ['recesses'])

    _, r = self.anagrams2.get_anagrams("recession")
    self.assertEqual(r, ['recession'])

    _, r = self.anagrams2.get_anagrams("recessive")
    self.assertEqual(r, ['recessive'])

    _, r = self.anagrams2.get_anagrams("recife")
    self.assertEqual(r, ['fierce', 'recife'])

    _, r = self.anagrams2.get_anagrams("recipe")
    self.assertEqual(r, ['pierce', 'recipe'])

    _, r = self.anagrams2.get_anagrams("recipes")
    self.assertEqual(r, ['pierces', 'precise', 'recipes'])

    _, r = self.anagrams2.get_anagrams("recipient")
    self.assertEqual(r, ['recipient'])

    _, r = self.anagrams2.get_anagrams("recipients")
    self.assertEqual(r, ['recipients'])

    _, r = self.anagrams2.get_anagrams("reciprocal")
    self.assertEqual(r, ['reciprocal'])

    _, r = self.anagrams2.get_anagrams("reciprocally")
    self.assertEqual(r, ['reciprocally'])

    _, r = self.anagrams2.get_anagrams("reciprocate")
    self.assertEqual(r, ['reciprocate'])

    _, r = self.anagrams2.get_anagrams("reciprocated")
    self.assertEqual(r, ['reciprocated'])

    _, r = self.anagrams2.get_anagrams("reciprocates")
    self.assertEqual(r, ['reciprocates'])

    _, r = self.anagrams2.get_anagrams("reciprocating")
    self.assertEqual(r, ['reciprocating'])

    _, r = self.anagrams2.get_anagrams("reciprocation")
    self.assertEqual(r, ['reciprocation'])

    _, r = self.anagrams2.get_anagrams("reciprocity")
    self.assertEqual(r, ['reciprocity'])

    _, r = self.anagrams2.get_anagrams("recirculate")
    self.assertEqual(r, ['recirculate'])

    _, r = self.anagrams2.get_anagrams("recirculated")
    self.assertEqual(r, ['recirculated'])

    _, r = self.anagrams2.get_anagrams("recirculates")
    self.assertEqual(r, ['recirculates'])

    _, r = self.anagrams2.get_anagrams("recirculating")
    self.assertEqual(r, ['recirculating'])

    _, r = self.anagrams2.get_anagrams("recital")
    self.assertEqual(r, ['article', 'recital'])

    _, r = self.anagrams2.get_anagrams("recitals")
    self.assertEqual(r, ['articles', 'recitals'])

    _, r = self.anagrams2.get_anagrams("recitation")
    self.assertEqual(r, ['recitation'])

    _, r = self.anagrams2.get_anagrams("recitations")
    self.assertEqual(r, ['recitations'])

    _, r = self.anagrams2.get_anagrams("recite")
    self.assertEqual(r, ['recite'])

    _, r = self.anagrams2.get_anagrams("recited")
    self.assertEqual(r, ['recited'])

    _, r = self.anagrams2.get_anagrams("reciter")
    self.assertEqual(r, ['reciter'])

    _, r = self.anagrams2.get_anagrams("recites")
    self.assertEqual(r, ['recites'])

    _, r = self.anagrams2.get_anagrams("reciting")
    self.assertEqual(r, ['reciting'])

    _, r = self.anagrams2.get_anagrams("reckless")
    self.assertEqual(r, ['reckless'])

    _, r = self.anagrams2.get_anagrams("recklessly")
    self.assertEqual(r, ['recklessly'])

    _, r = self.anagrams2.get_anagrams("recklessness")
    self.assertEqual(r, ['recklessness'])

    _, r = self.anagrams2.get_anagrams("reckon")
    self.assertEqual(r, ['reckon'])

    _, r = self.anagrams2.get_anagrams("reckoned")
    self.assertEqual(r, ['reckoned'])

    _, r = self.anagrams2.get_anagrams("reckoner")
    self.assertEqual(r, ['reckoner'])

    _, r = self.anagrams2.get_anagrams("reckoning")
    self.assertEqual(r, ['reckoning'])

    _, r = self.anagrams2.get_anagrams("reckonings")
    self.assertEqual(r, ['reckonings'])

    _, r = self.anagrams2.get_anagrams("reckons")
    self.assertEqual(r, ['reckons'])

    _, r = self.anagrams2.get_anagrams("reclaim")
    self.assertEqual(r, ['miracle', 'reclaim'])

    _, r = self.anagrams2.get_anagrams("reclaimable")
    self.assertEqual(r, ['reclaimable'])

    _, r = self.anagrams2.get_anagrams("reclaimed")
    self.assertEqual(r, ['reclaimed'])

    _, r = self.anagrams2.get_anagrams("reclaimer")
    self.assertEqual(r, ['reclaimer'])

    _, r = self.anagrams2.get_anagrams("reclaimers")
    self.assertEqual(r, ['reclaimers'])

    _, r = self.anagrams2.get_anagrams("reclaiming")
    self.assertEqual(r, ['reclaiming'])

    _, r = self.anagrams2.get_anagrams("reclaims")
    self.assertEqual(r, ['miracles', 'reclaims'])

    _, r = self.anagrams2.get_anagrams("reclamation")
    self.assertEqual(r, ['reclamation'])

    _, r = self.anagrams2.get_anagrams("reclamations")
    self.assertEqual(r, ['reclamations'])

    _, r = self.anagrams2.get_anagrams("reclassification")
    self.assertEqual(r, ['reclassification'])

    _, r = self.anagrams2.get_anagrams("reclassified")
    self.assertEqual(r, ['reclassified'])

    _, r = self.anagrams2.get_anagrams("reclassifies")
    self.assertEqual(r, ['reclassifies'])

    _, r = self.anagrams2.get_anagrams("reclassify")
    self.assertEqual(r, ['reclassify'])

    _, r = self.anagrams2.get_anagrams("reclassifying")
    self.assertEqual(r, ['reclassifying'])

    _, r = self.anagrams2.get_anagrams("recline")
    self.assertEqual(r, ['recline'])

    _, r = self.anagrams2.get_anagrams("reclining")
    self.assertEqual(r, ['reclining'])

    _, r = self.anagrams2.get_anagrams("recode")
    self.assertEqual(r, ['recode'])

    _, r = self.anagrams2.get_anagrams("recoded")
    self.assertEqual(r, ['decoder', 'recoded'])

    _, r = self.anagrams2.get_anagrams("recodes")
    self.assertEqual(r, ['recodes'])

    _, r = self.anagrams2.get_anagrams("recoding")
    self.assertEqual(r, ['recoding'])

    _, r = self.anagrams2.get_anagrams("recognition")
    self.assertEqual(r, ['recognition'])

    _, r = self.anagrams2.get_anagrams("recognitions")
    self.assertEqual(r, ['recognitions'])

    _, r = self.anagrams2.get_anagrams("recognizability")
    self.assertEqual(r, ['recognizability'])

    _, r = self.anagrams2.get_anagrams("recognizable")
    self.assertEqual(r, ['recognizable'])

    _, r = self.anagrams2.get_anagrams("recognizably")
    self.assertEqual(r, ['recognizably'])

    _, r = self.anagrams2.get_anagrams("recognize")
    self.assertEqual(r, ['recognize'])

    _, r = self.anagrams2.get_anagrams("recognized")
    self.assertEqual(r, ['recognized'])

    _, r = self.anagrams2.get_anagrams("recognizer")
    self.assertEqual(r, ['recognizer'])

    _, r = self.anagrams2.get_anagrams("recognizers")
    self.assertEqual(r, ['recognizers'])

    _, r = self.anagrams2.get_anagrams("recognizes")
    self.assertEqual(r, ['recognizes'])

    _, r = self.anagrams2.get_anagrams("recognizing")
    self.assertEqual(r, ['recognizing'])

    _, r = self.anagrams2.get_anagrams("recoil")
    self.assertEqual(r, ['recoil'])

    _, r = self.anagrams2.get_anagrams("recoiled")
    self.assertEqual(r, ['recoiled'])

    _, r = self.anagrams2.get_anagrams("recoiling")
    self.assertEqual(r, ['recoiling'])

    _, r = self.anagrams2.get_anagrams("recoils")
    self.assertEqual(r, ['recoils'])

    _, r = self.anagrams2.get_anagrams("recollect")
    self.assertEqual(r, ['recollect'])

    _, r = self.anagrams2.get_anagrams("recollected")
    self.assertEqual(r, ['recollected'])

    _, r = self.anagrams2.get_anagrams("recollecting")
    self.assertEqual(r, ['recollecting'])

    _, r = self.anagrams2.get_anagrams("recollection")
    self.assertEqual(r, ['recollection'])

    _, r = self.anagrams2.get_anagrams("recollections")
    self.assertEqual(r, ['recollections'])

    _, r = self.anagrams2.get_anagrams("recombination")
    self.assertEqual(r, ['recombination'])

    _, r = self.anagrams2.get_anagrams("recombine")
    self.assertEqual(r, ['recombine'])

    _, r = self.anagrams2.get_anagrams("recombined")
    self.assertEqual(r, ['recombined'])

    _, r = self.anagrams2.get_anagrams("recombines")
    self.assertEqual(r, ['recombines'])

    _, r = self.anagrams2.get_anagrams("recombining")
    self.assertEqual(r, ['recombining'])

    _, r = self.anagrams2.get_anagrams("recommend")
    self.assertEqual(r, ['recommend'])

    _, r = self.anagrams2.get_anagrams("recommendation")
    self.assertEqual(r, ['recommendation'])

    _, r = self.anagrams2.get_anagrams("recommendations")
    self.assertEqual(r, ['recommendations'])

    _, r = self.anagrams2.get_anagrams("recommended")
    self.assertEqual(r, ['recommended'])

    _, r = self.anagrams2.get_anagrams("recommender")
    self.assertEqual(r, ['recommender'])

    _, r = self.anagrams2.get_anagrams("recommending")
    self.assertEqual(r, ['recommending'])

    _, r = self.anagrams2.get_anagrams("recommends")
    self.assertEqual(r, ['recommends'])

    _, r = self.anagrams2.get_anagrams("recompense")
    self.assertEqual(r, ['recompense'])

    _, r = self.anagrams2.get_anagrams("recompile")
    self.assertEqual(r, ['recompile'])

    _, r = self.anagrams2.get_anagrams("recompiled")
    self.assertEqual(r, ['recompiled'])

    _, r = self.anagrams2.get_anagrams("recompiles")
    self.assertEqual(r, ['recompiles'])

    _, r = self.anagrams2.get_anagrams("recompiling")
    self.assertEqual(r, ['recompiling'])

    _, r = self.anagrams2.get_anagrams("recompute")
    self.assertEqual(r, ['recompute'])

    _, r = self.anagrams2.get_anagrams("recomputed")
    self.assertEqual(r, ['recomputed'])

    _, r = self.anagrams2.get_anagrams("recomputes")
    self.assertEqual(r, ['recomputes'])

    _, r = self.anagrams2.get_anagrams("recomputing")
    self.assertEqual(r, ['recomputing'])

    _, r = self.anagrams2.get_anagrams("reconcile")
    self.assertEqual(r, ['reconcile'])

    _, r = self.anagrams2.get_anagrams("reconciled")
    self.assertEqual(r, ['reconciled'])

    _, r = self.anagrams2.get_anagrams("reconciler")
    self.assertEqual(r, ['reconciler'])

    _, r = self.anagrams2.get_anagrams("reconciles")
    self.assertEqual(r, ['reconciles'])

    _, r = self.anagrams2.get_anagrams("reconciliation")
    self.assertEqual(r, ['reconciliation'])

    _, r = self.anagrams2.get_anagrams("reconciling")
    self.assertEqual(r, ['reconciling'])

    _, r = self.anagrams2.get_anagrams("reconfigurable")
    self.assertEqual(r, ['reconfigurable'])

    _, r = self.anagrams2.get_anagrams("reconfiguration")
    self.assertEqual(r, ['reconfiguration'])

    _, r = self.anagrams2.get_anagrams("reconfigurations")
    self.assertEqual(r, ['reconfigurations'])

    _, r = self.anagrams2.get_anagrams("reconfigure")
    self.assertEqual(r, ['reconfigure'])

    _, r = self.anagrams2.get_anagrams("reconfigured")
    self.assertEqual(r, ['reconfigured'])

    _, r = self.anagrams2.get_anagrams("reconfigurer")
    self.assertEqual(r, ['reconfigurer'])

    _, r = self.anagrams2.get_anagrams("reconfigures")
    self.assertEqual(r, ['reconfigures'])

    _, r = self.anagrams2.get_anagrams("reconfiguring")
    self.assertEqual(r, ['reconfiguring'])

    _, r = self.anagrams2.get_anagrams("reconnect")
    self.assertEqual(r, ['reconnect'])

    _, r = self.anagrams2.get_anagrams("reconnected")
    self.assertEqual(r, ['reconnected'])

    _, r = self.anagrams2.get_anagrams("reconnecting")
    self.assertEqual(r, ['reconnecting'])

    _, r = self.anagrams2.get_anagrams("reconnection")
    self.assertEqual(r, ['reconnection'])

    _, r = self.anagrams2.get_anagrams("reconnects")
    self.assertEqual(r, ['reconnects'])

    _, r = self.anagrams2.get_anagrams("reconsider")
    self.assertEqual(r, ['reconsider'])

    _, r = self.anagrams2.get_anagrams("reconsideration")
    self.assertEqual(r, ['reconsideration'])

    _, r = self.anagrams2.get_anagrams("reconsidered")
    self.assertEqual(r, ['reconsidered'])

    _, r = self.anagrams2.get_anagrams("reconsidering")
    self.assertEqual(r, ['reconsidering'])

    _, r = self.anagrams2.get_anagrams("reconsiders")
    self.assertEqual(r, ['reconsiders'])

    _, r = self.anagrams2.get_anagrams("reconstituted")
    self.assertEqual(r, ['reconstituted'])

    _, r = self.anagrams2.get_anagrams("reconstruct")
    self.assertEqual(r, ['reconstruct'])

    _, r = self.anagrams2.get_anagrams("reconstructed")
    self.assertEqual(r, ['reconstructed'])

    _, r = self.anagrams2.get_anagrams("reconstructing")
    self.assertEqual(r, ['reconstructing'])

    _, r = self.anagrams2.get_anagrams("reconstruction")
    self.assertEqual(r, ['reconstruction'])

    _, r = self.anagrams2.get_anagrams("reconstructs")
    self.assertEqual(r, ['reconstructs'])

    _, r = self.anagrams2.get_anagrams("reconverted")
    self.assertEqual(r, ['reconverted'])

    _, r = self.anagrams2.get_anagrams("reconverts")
    self.assertEqual(r, ['converters', 'reconverts'])

    _, r = self.anagrams2.get_anagrams("record")
    self.assertEqual(r, ['corder', 'record'])

    _, r = self.anagrams2.get_anagrams("recorded")
    self.assertEqual(r, ['recorded'])

    _, r = self.anagrams2.get_anagrams("recorder")
    self.assertEqual(r, ['recorder'])

    _, r = self.anagrams2.get_anagrams("recorders")
    self.assertEqual(r, ['recorders'])

    _, r = self.anagrams2.get_anagrams("recording")
    self.assertEqual(r, ['recording'])

    _, r = self.anagrams2.get_anagrams("recordings")
    self.assertEqual(r, ['recordings'])

    _, r = self.anagrams2.get_anagrams("records")
    self.assertEqual(r, ['records'])

    _, r = self.anagrams2.get_anagrams("recount")
    self.assertEqual(r, ['counter', 'recount'])

    _, r = self.anagrams2.get_anagrams("recounted")
    self.assertEqual(r, ['countered', 'recounted'])

    _, r = self.anagrams2.get_anagrams("recounting")
    self.assertEqual(r, ['countering', 'recounting'])

    _, r = self.anagrams2.get_anagrams("recounts")
    self.assertEqual(r, ['construe', 'counters', 'recounts'])

    _, r = self.anagrams2.get_anagrams("recourse")
    self.assertEqual(r, ['recourse', 'resource'])

    _, r = self.anagrams2.get_anagrams("recover")
    self.assertEqual(r, ['recover'])

    _, r = self.anagrams2.get_anagrams("recoverable")
    self.assertEqual(r, ['recoverable'])

    _, r = self.anagrams2.get_anagrams("recovered")
    self.assertEqual(r, ['recovered'])

    _, r = self.anagrams2.get_anagrams("recoveries")
    self.assertEqual(r, ['recoveries'])

    _, r = self.anagrams2.get_anagrams("recovering")
    self.assertEqual(r, ['recovering'])

    _, r = self.anagrams2.get_anagrams("recovers")
    self.assertEqual(r, ['recovers'])

    _, r = self.anagrams2.get_anagrams("recovery")
    self.assertEqual(r, ['recovery'])

    _, r = self.anagrams2.get_anagrams("recreate")
    self.assertEqual(r, ['recreate'])

    _, r = self.anagrams2.get_anagrams("recreated")
    self.assertEqual(r, ['recreated'])

    _, r = self.anagrams2.get_anagrams("recreates")
    self.assertEqual(r, ['recreates'])

    _, r = self.anagrams2.get_anagrams("recreating")
    self.assertEqual(r, ['recreating'])

    _, r = self.anagrams2.get_anagrams("recreation")
    self.assertEqual(r, ['recreation'])

    _, r = self.anagrams2.get_anagrams("recreational")
    self.assertEqual(r, ['recreational'])

    _, r = self.anagrams2.get_anagrams("recreations")
    self.assertEqual(r, ['recreations'])

    _, r = self.anagrams2.get_anagrams("recreative")
    self.assertEqual(r, ['recreative'])

    _, r = self.anagrams2.get_anagrams("recruit")
    self.assertEqual(r, ['recruit'])

    _, r = self.anagrams2.get_anagrams("recruited")
    self.assertEqual(r, ['recruited'])

    _, r = self.anagrams2.get_anagrams("recruiter")
    self.assertEqual(r, ['recruiter'])

    _, r = self.anagrams2.get_anagrams("recruiting")
    self.assertEqual(r, ['recruiting'])

    _, r = self.anagrams2.get_anagrams("recruits")
    self.assertEqual(r, ['recruits'])

    _, r = self.anagrams2.get_anagrams("recta")
    self.assertEqual(r, ['caret', 'cater', 'crate', 'react', 'recta', 'trace'])

    _, r = self.anagrams2.get_anagrams("rectangle")
    self.assertEqual(r, ['rectangle'])

    _, r = self.anagrams2.get_anagrams("rectangles")
    self.assertEqual(r, ['rectangles'])

    _, r = self.anagrams2.get_anagrams("rectangular")
    self.assertEqual(r, ['rectangular'])

    _, r = self.anagrams2.get_anagrams("rectify")
    self.assertEqual(r, ['certify', 'rectify'])

    _, r = self.anagrams2.get_anagrams("rector")
    self.assertEqual(r, ['rector'])

    _, r = self.anagrams2.get_anagrams("rectors")
    self.assertEqual(r, ['rectors'])

    _, r = self.anagrams2.get_anagrams("rectum")
    self.assertEqual(r, ['rectum'])

    _, r = self.anagrams2.get_anagrams("rectums")
    self.assertEqual(r, ['rectums'])

    _, r = self.anagrams2.get_anagrams("recuperate")
    self.assertEqual(r, ['recuperate'])

    _, r = self.anagrams2.get_anagrams("recur")
    self.assertEqual(r, ['recur'])

    _, r = self.anagrams2.get_anagrams("recurrence")
    self.assertEqual(r, ['recurrence'])

    _, r = self.anagrams2.get_anagrams("recurrences")
    self.assertEqual(r, ['recurrences'])

    _, r = self.anagrams2.get_anagrams("recurrent")
    self.assertEqual(r, ['recurrent'])

    _, r = self.anagrams2.get_anagrams("recurrently")
    self.assertEqual(r, ['recurrently'])

    _, r = self.anagrams2.get_anagrams("recurring")
    self.assertEqual(r, ['recurring'])

    _, r = self.anagrams2.get_anagrams("recurs")
    self.assertEqual(r, ['recurs'])

    _, r = self.anagrams2.get_anagrams("recurse")
    self.assertEqual(r, ['recurse', 'rescuer'])

    _, r = self.anagrams2.get_anagrams("recursed")
    self.assertEqual(r, ['recursed', 'reducers'])

    _, r = self.anagrams2.get_anagrams("recurses")
    self.assertEqual(r, ['recurses', 'rescuers'])

    _, r = self.anagrams2.get_anagrams("recursing")
    self.assertEqual(r, ['recursing'])

    _, r = self.anagrams2.get_anagrams("recursion")
    self.assertEqual(r, ['recursion'])

    _, r = self.anagrams2.get_anagrams("recursions")
    self.assertEqual(r, ['recursions'])

    _, r = self.anagrams2.get_anagrams("recursive")
    self.assertEqual(r, ['recursive'])

    _, r = self.anagrams2.get_anagrams("recursively")
    self.assertEqual(r, ['recursively'])

    _, r = self.anagrams2.get_anagrams("recyclable")
    self.assertEqual(r, ['recyclable'])

    _, r = self.anagrams2.get_anagrams("recycle")
    self.assertEqual(r, ['recycle'])

    _, r = self.anagrams2.get_anagrams("recycled")
    self.assertEqual(r, ['recycled'])

    _, r = self.anagrams2.get_anagrams("recycles")
    self.assertEqual(r, ['recycles'])

    _, r = self.anagrams2.get_anagrams("recycling")
    self.assertEqual(r, ['recycling'])

    _, r = self.anagrams2.get_anagrams("red")
    self.assertEqual(r, ['red'])

    _, r = self.anagrams2.get_anagrams("redbreast")
    self.assertEqual(r, ['redbreast'])

    _, r = self.anagrams2.get_anagrams("redcoat")
    self.assertEqual(r, ['redcoat'])

    _, r = self.anagrams2.get_anagrams("redden")
    self.assertEqual(r, ['redden'])

    _, r = self.anagrams2.get_anagrams("reddened")
    self.assertEqual(r, ['reddened'])

    _, r = self.anagrams2.get_anagrams("redder")
    self.assertEqual(r, ['redder'])

    _, r = self.anagrams2.get_anagrams("reddest")
    self.assertEqual(r, ['reddest'])

    _, r = self.anagrams2.get_anagrams("reddish")
    self.assertEqual(r, ['reddish'])

    _, r = self.anagrams2.get_anagrams("reddishness")
    self.assertEqual(r, ['reddishness'])

    _, r = self.anagrams2.get_anagrams("redeclare")
    self.assertEqual(r, ['redeclare'])

    _, r = self.anagrams2.get_anagrams("redeclared")
    self.assertEqual(r, ['redeclared'])

    _, r = self.anagrams2.get_anagrams("redeclares")
    self.assertEqual(r, ['redeclares'])

    _, r = self.anagrams2.get_anagrams("redeclaring")
    self.assertEqual(r, ['redeclaring'])

    _, r = self.anagrams2.get_anagrams("redeem")
    self.assertEqual(r, ['redeem'])

    _, r = self.anagrams2.get_anagrams("redeemed")
    self.assertEqual(r, ['redeemed'])

    _, r = self.anagrams2.get_anagrams("redeemer")
    self.assertEqual(r, ['redeemer'])

    _, r = self.anagrams2.get_anagrams("redeemers")
    self.assertEqual(r, ['redeemers'])

    _, r = self.anagrams2.get_anagrams("redeeming")
    self.assertEqual(r, ['redeeming'])

    _, r = self.anagrams2.get_anagrams("redeems")
    self.assertEqual(r, ['redeems'])

    _, r = self.anagrams2.get_anagrams("redefine")
    self.assertEqual(r, ['redefine'])

    _, r = self.anagrams2.get_anagrams("redefined")
    self.assertEqual(r, ['redefined'])

    _, r = self.anagrams2.get_anagrams("redefines")
    self.assertEqual(r, ['redefines'])

    _, r = self.anagrams2.get_anagrams("redefining")
    self.assertEqual(r, ['redefining'])

    _, r = self.anagrams2.get_anagrams("redefinition")
    self.assertEqual(r, ['redefinition'])

    _, r = self.anagrams2.get_anagrams("redefinitions")
    self.assertEqual(r, ['redefinitions'])

    _, r = self.anagrams2.get_anagrams("redemption")
    self.assertEqual(r, ['redemption'])

    _, r = self.anagrams2.get_anagrams("redesign")
    self.assertEqual(r, ['designer', 'redesign', 'resigned'])

    _, r = self.anagrams2.get_anagrams("redesigned")
    self.assertEqual(r, ['redesigned'])

    _, r = self.anagrams2.get_anagrams("redesigning")
    self.assertEqual(r, ['redesigning'])

    _, r = self.anagrams2.get_anagrams("redesigns")
    self.assertEqual(r, ['designers', 'redesigns'])

    _, r = self.anagrams2.get_anagrams("redevelopment")
    self.assertEqual(r, ['redevelopment'])

    _, r = self.anagrams2.get_anagrams("redford")
    self.assertEqual(r, ['redford'])

    _, r = self.anagrams2.get_anagrams("redhead")
    self.assertEqual(r, ['adhered', 'redhead'])

    _, r = self.anagrams2.get_anagrams("redhook")
    self.assertEqual(r, ['redhook'])

    _, r = self.anagrams2.get_anagrams("redirect")
    self.assertEqual(r, ['redirect'])

    _, r = self.anagrams2.get_anagrams("redirected")
    self.assertEqual(r, ['redirected'])

    _, r = self.anagrams2.get_anagrams("redirecting")
    self.assertEqual(r, ['redirecting'])

    _, r = self.anagrams2.get_anagrams("redirection")
    self.assertEqual(r, ['redirection'])

    _, r = self.anagrams2.get_anagrams("redirections")
    self.assertEqual(r, ['redirections'])

    _, r = self.anagrams2.get_anagrams("redisplay")
    self.assertEqual(r, ['displayer', 'redisplay'])

    _, r = self.anagrams2.get_anagrams("redisplayed")
    self.assertEqual(r, ['redisplayed'])

    _, r = self.anagrams2.get_anagrams("redisplaying")
    self.assertEqual(r, ['despairingly', 'redisplaying'])

    _, r = self.anagrams2.get_anagrams("redisplays")
    self.assertEqual(r, ['redisplays'])

    _, r = self.anagrams2.get_anagrams("redistribute")
    self.assertEqual(r, ['redistribute'])

    _, r = self.anagrams2.get_anagrams("redistributed")
    self.assertEqual(r, ['redistributed'])

    _, r = self.anagrams2.get_anagrams("redistributes")
    self.assertEqual(r, ['redistributes'])

    _, r = self.anagrams2.get_anagrams("redistributing")
    self.assertEqual(r, ['redistributing'])

    _, r = self.anagrams2.get_anagrams("redly")
    self.assertEqual(r, ['redly'])

    _, r = self.anagrams2.get_anagrams("redmond")
    self.assertEqual(r, ['redmond'])

    _, r = self.anagrams2.get_anagrams("redneck")
    self.assertEqual(r, ['redneck'])

    _, r = self.anagrams2.get_anagrams("redness")
    self.assertEqual(r, ['redness', 'senders'])

    _, r = self.anagrams2.get_anagrams("redo")
    self.assertEqual(r, ['doer', 'redo', 'rode'])

    _, r = self.anagrams2.get_anagrams("redone")
    self.assertEqual(r, ['doreen', 'redone'])

    _, r = self.anagrams2.get_anagrams("redouble")
    self.assertEqual(r, ['redouble'])

    _, r = self.anagrams2.get_anagrams("redoubled")
    self.assertEqual(r, ['redoubled'])

    _, r = self.anagrams2.get_anagrams("redraw")
    self.assertEqual(r, ['drawer', 'redraw', 'reward', 'warder', 'warred'])

    _, r = self.anagrams2.get_anagrams("redrawn")
    self.assertEqual(r, ['redrawn'])

    _, r = self.anagrams2.get_anagrams("redress")
    self.assertEqual(r, ['dresser', 'redress'])

    _, r = self.anagrams2.get_anagrams("redressed")
    self.assertEqual(r, ['redressed'])

    _, r = self.anagrams2.get_anagrams("redresses")
    self.assertEqual(r, ['redresses'])

    _, r = self.anagrams2.get_anagrams("redressing")
    self.assertEqual(r, ['redressing'])

    _, r = self.anagrams2.get_anagrams("reds")
    self.assertEqual(r, ['reds'])

    _, r = self.anagrams2.get_anagrams("redstone")
    self.assertEqual(r, ['redstone'])

    _, r = self.anagrams2.get_anagrams("reduce")
    self.assertEqual(r, ['reduce'])

    _, r = self.anagrams2.get_anagrams("reduced")
    self.assertEqual(r, ['deducer', 'reduced'])

    _, r = self.anagrams2.get_anagrams("reducer")
    self.assertEqual(r, ['reducer'])

    _, r = self.anagrams2.get_anagrams("reducers")
    self.assertEqual(r, ['recursed', 'reducers'])

    _, r = self.anagrams2.get_anagrams("reduces")
    self.assertEqual(r, ['reduces', 'rescued', 'secured', 'seducer'])

    _, r = self.anagrams2.get_anagrams("reducibility")
    self.assertEqual(r, ['reducibility'])

    _, r = self.anagrams2.get_anagrams("reducible")
    self.assertEqual(r, ['reducible'])

    _, r = self.anagrams2.get_anagrams("reducibly")
    self.assertEqual(r, ['reducibly'])

    _, r = self.anagrams2.get_anagrams("reducing")
    self.assertEqual(r, ['reducing'])

    _, r = self.anagrams2.get_anagrams("reduction")
    self.assertEqual(r, ['introduce', 'reduction'])

    _, r = self.anagrams2.get_anagrams("reductions")
    self.assertEqual(r, ['introduces', 'reductions'])

    _, r = self.anagrams2.get_anagrams("redundancies")
    self.assertEqual(r, ['redundancies'])

    _, r = self.anagrams2.get_anagrams("redundancy")
    self.assertEqual(r, ['redundancy'])

    _, r = self.anagrams2.get_anagrams("redundant")
    self.assertEqual(r, ['redundant'])

    _, r = self.anagrams2.get_anagrams("redundantly")
    self.assertEqual(r, ['redundantly'])

    _, r = self.anagrams2.get_anagrams("redwood")
    self.assertEqual(r, ['redwood'])

    _, r = self.anagrams2.get_anagrams("reed")
    self.assertEqual(r, ['deer', 'reed'])

    _, r = self.anagrams2.get_anagrams("reeds")
    self.assertEqual(r, ['reeds'])

    _, r = self.anagrams2.get_anagrams("reeducation")
    self.assertEqual(r, ['reeducation'])

    _, r = self.anagrams2.get_anagrams("reedville")
    self.assertEqual(r, ['reedville'])

    _, r = self.anagrams2.get_anagrams("reef")
    self.assertEqual(r, ['free', 'reef'])

    _, r = self.anagrams2.get_anagrams("reefer")
    self.assertEqual(r, ['reefer'])

    _, r = self.anagrams2.get_anagrams("reefs")
    self.assertEqual(r, ['frees', 'reefs'])

    _, r = self.anagrams2.get_anagrams("reel")
    self.assertEqual(r, ['leer', 'reel'])

    _, r = self.anagrams2.get_anagrams("reelect")
    self.assertEqual(r, ['reelect'])

    _, r = self.anagrams2.get_anagrams("reelected")
    self.assertEqual(r, ['reelected'])

    _, r = self.anagrams2.get_anagrams("reelecting")
    self.assertEqual(r, ['reelecting'])

    _, r = self.anagrams2.get_anagrams("reelects")
    self.assertEqual(r, ['reelects', 'reselect'])

    _, r = self.anagrams2.get_anagrams("reeled")
    self.assertEqual(r, ['reeled'])

    _, r = self.anagrams2.get_anagrams("reeler")
    self.assertEqual(r, ['reeler'])

    _, r = self.anagrams2.get_anagrams("reeling")
    self.assertEqual(r, ['reeling'])

    _, r = self.anagrams2.get_anagrams("reels")
    self.assertEqual(r, ['reels'])

    _, r = self.anagrams2.get_anagrams("reemphasize")
    self.assertEqual(r, ['reemphasize'])

    _, r = self.anagrams2.get_anagrams("reemphasized")
    self.assertEqual(r, ['reemphasized'])

    _, r = self.anagrams2.get_anagrams("reemphasizes")
    self.assertEqual(r, ['reemphasizes'])

    _, r = self.anagrams2.get_anagrams("reemphasizing")
    self.assertEqual(r, ['reemphasizing'])

    _, r = self.anagrams2.get_anagrams("reenabled")
    self.assertEqual(r, ['reenabled'])

    _, r = self.anagrams2.get_anagrams("reenforcement")
    self.assertEqual(r, ['reenforcement'])

    _, r = self.anagrams2.get_anagrams("reenter")
    self.assertEqual(r, ['reenter'])

    _, r = self.anagrams2.get_anagrams("reentered")
    self.assertEqual(r, ['reentered'])

    _, r = self.anagrams2.get_anagrams("reentering")
    self.assertEqual(r, ['reentering'])

    _, r = self.anagrams2.get_anagrams("reenters")
    self.assertEqual(r, ['reenters'])

    _, r = self.anagrams2.get_anagrams("reentrant")
    self.assertEqual(r, ['reentrant'])

    _, r = self.anagrams2.get_anagrams("reese")
    self.assertEqual(r, ['reese'])

    _, r = self.anagrams2.get_anagrams("reestablish")
    self.assertEqual(r, ['reestablish'])

    _, r = self.anagrams2.get_anagrams("reestablished")
    self.assertEqual(r, ['reestablished'])

    _, r = self.anagrams2.get_anagrams("reestablishes")
    self.assertEqual(r, ['reestablishes'])

    _, r = self.anagrams2.get_anagrams("reestablishing")
    self.assertEqual(r, ['reestablishing'])

    _, r = self.anagrams2.get_anagrams("reevaluate")
    self.assertEqual(r, ['reevaluate'])

    _, r = self.anagrams2.get_anagrams("reevaluated")
    self.assertEqual(r, ['reevaluated'])

    _, r = self.anagrams2.get_anagrams("reevaluates")
    self.assertEqual(r, ['reevaluates'])

    _, r = self.anagrams2.get_anagrams("reevaluating")
    self.assertEqual(r, ['reevaluating'])

    _, r = self.anagrams2.get_anagrams("reevaluation")
    self.assertEqual(r, ['reevaluation'])

    _, r = self.anagrams2.get_anagrams("reeves")
    self.assertEqual(r, ['reeves', 'severe'])

    _, r = self.anagrams2.get_anagrams("reexamine")
    self.assertEqual(r, ['reexamine'])

    _, r = self.anagrams2.get_anagrams("reexamined")
    self.assertEqual(r, ['reexamined'])

    _, r = self.anagrams2.get_anagrams("reexamines")
    self.assertEqual(r, ['reexamines'])

    _, r = self.anagrams2.get_anagrams("reexamining")
    self.assertEqual(r, ['reexamining'])

    _, r = self.anagrams2.get_anagrams("reexecuted")
    self.assertEqual(r, ['reexecuted'])

    _, r = self.anagrams2.get_anagrams("refer")
    self.assertEqual(r, ['freer', 'refer'])

    _, r = self.anagrams2.get_anagrams("referee")
    self.assertEqual(r, ['referee'])

    _, r = self.anagrams2.get_anagrams("refereed")
    self.assertEqual(r, ['refereed'])

    _, r = self.anagrams2.get_anagrams("refereeing")
    self.assertEqual(r, ['refereeing'])

    _, r = self.anagrams2.get_anagrams("referees")
    self.assertEqual(r, ['referees'])

    _, r = self.anagrams2.get_anagrams("reference")
    self.assertEqual(r, ['reference'])

    _, r = self.anagrams2.get_anagrams("referenced")
    self.assertEqual(r, ['referenced'])

    _, r = self.anagrams2.get_anagrams("referencer")
    self.assertEqual(r, ['referencer'])

    _, r = self.anagrams2.get_anagrams("references")
    self.assertEqual(r, ['references'])

    _, r = self.anagrams2.get_anagrams("referencing")
    self.assertEqual(r, ['referencing'])

    _, r = self.anagrams2.get_anagrams("referenda")
    self.assertEqual(r, ['referenda'])

    _, r = self.anagrams2.get_anagrams("referendum")
    self.assertEqual(r, ['referendum'])

    _, r = self.anagrams2.get_anagrams("referendums")
    self.assertEqual(r, ['referendums'])

    _, r = self.anagrams2.get_anagrams("referent")
    self.assertEqual(r, ['referent'])

    _, r = self.anagrams2.get_anagrams("referential")
    self.assertEqual(r, ['referential'])

    _, r = self.anagrams2.get_anagrams("referentiality")
    self.assertEqual(r, ['referentiality'])

    _, r = self.anagrams2.get_anagrams("referentially")
    self.assertEqual(r, ['referentially'])

    _, r = self.anagrams2.get_anagrams("referents")
    self.assertEqual(r, ['referents'])

    _, r = self.anagrams2.get_anagrams("referral")
    self.assertEqual(r, ['referral'])

    _, r = self.anagrams2.get_anagrams("referrals")
    self.assertEqual(r, ['referrals'])

    _, r = self.anagrams2.get_anagrams("referred")
    self.assertEqual(r, ['deferrer', 'referred'])

    _, r = self.anagrams2.get_anagrams("referring")
    self.assertEqual(r, ['referring'])

    _, r = self.anagrams2.get_anagrams("refers")
    self.assertEqual(r, ['refers'])

    _, r = self.anagrams2.get_anagrams("refill")
    self.assertEqual(r, ['filler', 'refill'])

    _, r = self.anagrams2.get_anagrams("refillable")
    self.assertEqual(r, ['refillable'])

    _, r = self.anagrams2.get_anagrams("refilled")
    self.assertEqual(r, ['refilled'])

    _, r = self.anagrams2.get_anagrams("refilling")
    self.assertEqual(r, ['refilling'])

    _, r = self.anagrams2.get_anagrams("refills")
    self.assertEqual(r, ['fillers', 'refills'])

    _, r = self.anagrams2.get_anagrams("refine")
    self.assertEqual(r, ['refine'])

    _, r = self.anagrams2.get_anagrams("refined")
    self.assertEqual(r, ['definer', 'refined'])

    _, r = self.anagrams2.get_anagrams("refinement")
    self.assertEqual(r, ['refinement'])

    _, r = self.anagrams2.get_anagrams("refinements")
    self.assertEqual(r, ['refinements'])

    _, r = self.anagrams2.get_anagrams("refiner")
    self.assertEqual(r, ['refiner'])

    _, r = self.anagrams2.get_anagrams("refinery")
    self.assertEqual(r, ['refinery'])

    _, r = self.anagrams2.get_anagrams("refines")
    self.assertEqual(r, ['refines'])

    _, r = self.anagrams2.get_anagrams("refining")
    self.assertEqual(r, ['infringe', 'refining'])

    _, r = self.anagrams2.get_anagrams("reflect")
    self.assertEqual(r, ['reflect'])

    _, r = self.anagrams2.get_anagrams("reflected")
    self.assertEqual(r, ['reflected'])

    _, r = self.anagrams2.get_anagrams("reflecting")
    self.assertEqual(r, ['reflecting'])

    _, r = self.anagrams2.get_anagrams("reflection")
    self.assertEqual(r, ['reflection'])

    _, r = self.anagrams2.get_anagrams("reflections")
    self.assertEqual(r, ['reflections'])

    _, r = self.anagrams2.get_anagrams("reflective")
    self.assertEqual(r, ['reflective'])

    _, r = self.anagrams2.get_anagrams("reflectively")
    self.assertEqual(r, ['reflectively'])

    _, r = self.anagrams2.get_anagrams("reflectivity")
    self.assertEqual(r, ['reflectivity'])

    _, r = self.anagrams2.get_anagrams("reflector")
    self.assertEqual(r, ['reflector'])

    _, r = self.anagrams2.get_anagrams("reflectors")
    self.assertEqual(r, ['reflectors'])

    _, r = self.anagrams2.get_anagrams("reflects")
    self.assertEqual(r, ['reflects'])

    _, r = self.anagrams2.get_anagrams("reflex")
    self.assertEqual(r, ['reflex'])

    _, r = self.anagrams2.get_anagrams("reflexes")
    self.assertEqual(r, ['reflexes'])

    _, r = self.anagrams2.get_anagrams("reflexive")
    self.assertEqual(r, ['reflexive'])

    _, r = self.anagrams2.get_anagrams("reflexively")
    self.assertEqual(r, ['reflexively'])

    _, r = self.anagrams2.get_anagrams("reflexiveness")
    self.assertEqual(r, ['reflexiveness'])

    _, r = self.anagrams2.get_anagrams("reflexivity")
    self.assertEqual(r, ['reflexivity'])

    _, r = self.anagrams2.get_anagrams("reforestation")
    self.assertEqual(r, ['reforestation'])

    _, r = self.anagrams2.get_anagrams("reform")
    self.assertEqual(r, ['former', 'reform'])

    _, r = self.anagrams2.get_anagrams("reformable")
    self.assertEqual(r, ['reformable'])

    _, r = self.anagrams2.get_anagrams("reformat")
    self.assertEqual(r, ['reformat'])

    _, r = self.anagrams2.get_anagrams("reformation")
    self.assertEqual(r, ['reformation'])

    _, r = self.anagrams2.get_anagrams("reformatory")
    self.assertEqual(r, ['reformatory'])

    _, r = self.anagrams2.get_anagrams("reformats")
    self.assertEqual(r, ['reformats'])

    _, r = self.anagrams2.get_anagrams("reformatted")
    self.assertEqual(r, ['reformatted'])

    _, r = self.anagrams2.get_anagrams("reformatting")
    self.assertEqual(r, ['reformatting'])

    _, r = self.anagrams2.get_anagrams("reformed")
    self.assertEqual(r, ['reformed'])

    _, r = self.anagrams2.get_anagrams("reformer")
    self.assertEqual(r, ['reformer'])

    _, r = self.anagrams2.get_anagrams("reformers")
    self.assertEqual(r, ['reformers'])

    _, r = self.anagrams2.get_anagrams("reforming")
    self.assertEqual(r, ['reforming'])

    _, r = self.anagrams2.get_anagrams("reforms")
    self.assertEqual(r, ['reforms'])

    _, r = self.anagrams2.get_anagrams("reformulate")
    self.assertEqual(r, ['reformulate'])

    _, r = self.anagrams2.get_anagrams("reformulated")
    self.assertEqual(r, ['reformulated'])

    _, r = self.anagrams2.get_anagrams("reformulates")
    self.assertEqual(r, ['reformulates'])

    _, r = self.anagrams2.get_anagrams("reformulating")
    self.assertEqual(r, ['reformulating'])

    _, r = self.anagrams2.get_anagrams("reformulation")
    self.assertEqual(r, ['reformulation'])

    _, r = self.anagrams2.get_anagrams("refract")
    self.assertEqual(r, ['crafter', 'refract'])

    _, r = self.anagrams2.get_anagrams("refracted")
    self.assertEqual(r, ['refracted'])

    _, r = self.anagrams2.get_anagrams("refraction")
    self.assertEqual(r, ['refraction'])

    _, r = self.anagrams2.get_anagrams("refractory")
    self.assertEqual(r, ['refractory'])

    _, r = self.anagrams2.get_anagrams("refragment")
    self.assertEqual(r, ['refragment'])

    _, r = self.anagrams2.get_anagrams("refrain")
    self.assertEqual(r, ['refrain'])

    _, r = self.anagrams2.get_anagrams("refrained")
    self.assertEqual(r, ['refrained'])

    _, r = self.anagrams2.get_anagrams("refraining")
    self.assertEqual(r, ['refraining'])

    _, r = self.anagrams2.get_anagrams("refrains")
    self.assertEqual(r, ['refrains'])

    _, r = self.anagrams2.get_anagrams("refresh")
    self.assertEqual(r, ['fresher', 'refresh'])

    _, r = self.anagrams2.get_anagrams("refreshed")
    self.assertEqual(r, ['refreshed'])

    _, r = self.anagrams2.get_anagrams("refresher")
    self.assertEqual(r, ['refresher'])

    _, r = self.anagrams2.get_anagrams("refreshers")
    self.assertEqual(r, ['refreshers'])

    _, r = self.anagrams2.get_anagrams("refreshes")
    self.assertEqual(r, ['refreshes'])

    _, r = self.anagrams2.get_anagrams("refreshing")
    self.assertEqual(r, ['refreshing'])

    _, r = self.anagrams2.get_anagrams("refreshingly")
    self.assertEqual(r, ['refreshingly'])

    _, r = self.anagrams2.get_anagrams("refreshment")
    self.assertEqual(r, ['refreshment'])

    _, r = self.anagrams2.get_anagrams("refreshments")
    self.assertEqual(r, ['refreshments'])

    _, r = self.anagrams2.get_anagrams("refrigerate")
    self.assertEqual(r, ['refrigerate'])

    _, r = self.anagrams2.get_anagrams("refrigerator")
    self.assertEqual(r, ['refrigerator'])

    _, r = self.anagrams2.get_anagrams("refrigerators")
    self.assertEqual(r, ['refrigerators'])

    _, r = self.anagrams2.get_anagrams("refuel")
    self.assertEqual(r, ['refuel'])

    _, r = self.anagrams2.get_anagrams("refueled")
    self.assertEqual(r, ['refueled'])

    _, r = self.anagrams2.get_anagrams("refueling")
    self.assertEqual(r, ['refueling'])

    _, r = self.anagrams2.get_anagrams("refuels")
    self.assertEqual(r, ['refuels'])

    _, r = self.anagrams2.get_anagrams("refuge")
    self.assertEqual(r, ['refuge'])

    _, r = self.anagrams2.get_anagrams("refugee")
    self.assertEqual(r, ['refugee'])

    _, r = self.anagrams2.get_anagrams("refugees")
    self.assertEqual(r, ['refugees'])

    _, r = self.anagrams2.get_anagrams("refusal")
    self.assertEqual(r, ['refusal'])

    _, r = self.anagrams2.get_anagrams("refuse")
    self.assertEqual(r, ['refuse'])

    _, r = self.anagrams2.get_anagrams("refused")
    self.assertEqual(r, ['refused'])

    _, r = self.anagrams2.get_anagrams("refuses")
    self.assertEqual(r, ['refuses'])

    _, r = self.anagrams2.get_anagrams("refusing")
    self.assertEqual(r, ['refusing'])

    _, r = self.anagrams2.get_anagrams("refutable")
    self.assertEqual(r, ['refutable'])

    _, r = self.anagrams2.get_anagrams("refutation")
    self.assertEqual(r, ['refutation'])

    _, r = self.anagrams2.get_anagrams("refute")
    self.assertEqual(r, ['refute'])

    _, r = self.anagrams2.get_anagrams("refuted")
    self.assertEqual(r, ['refuted'])

    _, r = self.anagrams2.get_anagrams("refuter")
    self.assertEqual(r, ['refuter'])

    _, r = self.anagrams2.get_anagrams("refutes")
    self.assertEqual(r, ['refutes'])

    _, r = self.anagrams2.get_anagrams("refuting")
    self.assertEqual(r, ['refuting'])

    _, r = self.anagrams2.get_anagrams("regain")
    self.assertEqual(r, ['gainer', 'regain', 'regina'])

    _, r = self.anagrams2.get_anagrams("regained")
    self.assertEqual(r, ['regained'])

    _, r = self.anagrams2.get_anagrams("regaining")
    self.assertEqual(r, ['regaining'])

    _, r = self.anagrams2.get_anagrams("regains")
    self.assertEqual(r, ['erasing', 'gainers', 'regains', 'searing'])

    _, r = self.anagrams2.get_anagrams("regal")
    self.assertEqual(r, ['alger', 'glare', 'lager', 'large', 'regal'])

    _, r = self.anagrams2.get_anagrams("regaled")
    self.assertEqual(r, ['regaled'])

    _, r = self.anagrams2.get_anagrams("regally")
    self.assertEqual(r, ['allergy', 'gallery', 'largely', 'regally'])

    _, r = self.anagrams2.get_anagrams("regard")
    self.assertEqual(r, ['gerard', 'grader', 'regard'])

    _, r = self.anagrams2.get_anagrams("regarded")
    self.assertEqual(r, ['regarded'])

    _, r = self.anagrams2.get_anagrams("regarding")
    self.assertEqual(r, ['regarding'])

    _, r = self.anagrams2.get_anagrams("regardless")
    self.assertEqual(r, ['regardless'])

    _, r = self.anagrams2.get_anagrams("regards")
    self.assertEqual(r, ['graders', 'regards'])

    _, r = self.anagrams2.get_anagrams("regatta")
    self.assertEqual(r, ['regatta'])

    _, r = self.anagrams2.get_anagrams("regenerate")
    self.assertEqual(r, ['regenerate'])

    _, r = self.anagrams2.get_anagrams("regenerated")
    self.assertEqual(r, ['regenerated'])

    _, r = self.anagrams2.get_anagrams("regenerates")
    self.assertEqual(r, ['regenerates'])

    _, r = self.anagrams2.get_anagrams("regenerating")
    self.assertEqual(r, ['regenerating'])

    _, r = self.anagrams2.get_anagrams("regeneration")
    self.assertEqual(r, ['regeneration'])

    _, r = self.anagrams2.get_anagrams("regenerative")
    self.assertEqual(r, ['regenerative'])

    _, r = self.anagrams2.get_anagrams("regenerator")
    self.assertEqual(r, ['regenerator'])

    _, r = self.anagrams2.get_anagrams("regenerators")
    self.assertEqual(r, ['regenerators'])

    _, r = self.anagrams2.get_anagrams("regent")
    self.assertEqual(r, ['regent'])

    _, r = self.anagrams2.get_anagrams("regents")
    self.assertEqual(r, ['regents'])

    _, r = self.anagrams2.get_anagrams("regime")
    self.assertEqual(r, ['regime'])

    _, r = self.anagrams2.get_anagrams("regimen")
    self.assertEqual(r, ['regimen'])

    _, r = self.anagrams2.get_anagrams("regiment")
    self.assertEqual(r, ['metering', 'regiment'])

    _, r = self.anagrams2.get_anagrams("regimentation")
    self.assertEqual(r, ['regimentation'])

    _, r = self.anagrams2.get_anagrams("regimented")
    self.assertEqual(r, ['regimented'])

    _, r = self.anagrams2.get_anagrams("regiments")
    self.assertEqual(r, ['regiments'])

    _, r = self.anagrams2.get_anagrams("regimes")
    self.assertEqual(r, ['regimes'])

    _, r = self.anagrams2.get_anagrams("regina")
    self.assertEqual(r, ['gainer', 'regain', 'regina'])

    _, r = self.anagrams2.get_anagrams("reginald")
    self.assertEqual(r, ['reginald'])

    _, r = self.anagrams2.get_anagrams("region")
    self.assertEqual(r, ['ignore', 'region'])

    _, r = self.anagrams2.get_anagrams("regional")
    self.assertEqual(r, ['regional'])

    _, r = self.anagrams2.get_anagrams("regionally")
    self.assertEqual(r, ['regionally'])

    _, r = self.anagrams2.get_anagrams("regions")
    self.assertEqual(r, ['ignores', 'regions'])

    _, r = self.anagrams2.get_anagrams("regis")
    self.assertEqual(r, ['regis'])

    _, r = self.anagrams2.get_anagrams("register")
    self.assertEqual(r, ['register'])

    _, r = self.anagrams2.get_anagrams("registered")
    self.assertEqual(r, ['registered'])

    _, r = self.anagrams2.get_anagrams("registering")
    self.assertEqual(r, ['registering'])

    _, r = self.anagrams2.get_anagrams("registers")
    self.assertEqual(r, ['registers'])

    _, r = self.anagrams2.get_anagrams("registrar")
    self.assertEqual(r, ['registrar'])

    _, r = self.anagrams2.get_anagrams("registration")
    self.assertEqual(r, ['registration'])

    _, r = self.anagrams2.get_anagrams("registrations")
    self.assertEqual(r, ['registrations'])

    _, r = self.anagrams2.get_anagrams("registry")
    self.assertEqual(r, ['registry'])

    _, r = self.anagrams2.get_anagrams("regress")
    self.assertEqual(r, ['regress'])

    _, r = self.anagrams2.get_anagrams("regressed")
    self.assertEqual(r, ['regressed'])

    _, r = self.anagrams2.get_anagrams("regresses")
    self.assertEqual(r, ['regresses'])

    _, r = self.anagrams2.get_anagrams("regressing")
    self.assertEqual(r, ['regressing'])

    _, r = self.anagrams2.get_anagrams("regression")
    self.assertEqual(r, ['regression'])

    _, r = self.anagrams2.get_anagrams("regressions")
    self.assertEqual(r, ['regressions'])

    _, r = self.anagrams2.get_anagrams("regressive")
    self.assertEqual(r, ['regressive'])

    _, r = self.anagrams2.get_anagrams("regret")
    self.assertEqual(r, ['regret'])

    _, r = self.anagrams2.get_anagrams("regretful")
    self.assertEqual(r, ['regretful'])

    _, r = self.anagrams2.get_anagrams("regretfully")
    self.assertEqual(r, ['regretfully'])

    _, r = self.anagrams2.get_anagrams("regrets")
    self.assertEqual(r, ['regrets'])

    _, r = self.anagrams2.get_anagrams("regrettable")
    self.assertEqual(r, ['regrettable'])

    _, r = self.anagrams2.get_anagrams("regrettably")
    self.assertEqual(r, ['regrettably'])

    _, r = self.anagrams2.get_anagrams("regretted")
    self.assertEqual(r, ['regretted'])

    _, r = self.anagrams2.get_anagrams("regretting")
    self.assertEqual(r, ['regretting'])

    _, r = self.anagrams2.get_anagrams("regroup")
    self.assertEqual(r, ['regroup'])

    _, r = self.anagrams2.get_anagrams("regrouped")
    self.assertEqual(r, ['regrouped'])

    _, r = self.anagrams2.get_anagrams("regrouping")
    self.assertEqual(r, ['regrouping'])

    _, r = self.anagrams2.get_anagrams("regular")
    self.assertEqual(r, ['regular'])

    _, r = self.anagrams2.get_anagrams("regularities")
    self.assertEqual(r, ['regularities'])

    _, r = self.anagrams2.get_anagrams("regularity")
    self.assertEqual(r, ['regularity'])

    _, r = self.anagrams2.get_anagrams("regularly")
    self.assertEqual(r, ['regularly'])

    _, r = self.anagrams2.get_anagrams("regulars")
    self.assertEqual(r, ['regulars'])

    _, r = self.anagrams2.get_anagrams("regulate")
    self.assertEqual(r, ['regulate'])

    _, r = self.anagrams2.get_anagrams("regulated")
    self.assertEqual(r, ['regulated'])

    _, r = self.anagrams2.get_anagrams("regulates")
    self.assertEqual(r, ['regulates'])

    _, r = self.anagrams2.get_anagrams("regulating")
    self.assertEqual(r, ['regulating'])

    _, r = self.anagrams2.get_anagrams("regulation")
    self.assertEqual(r, ['regulation'])

    _, r = self.anagrams2.get_anagrams("regulations")
    self.assertEqual(r, ['regulations'])

    _, r = self.anagrams2.get_anagrams("regulative")
    self.assertEqual(r, ['regulative'])

    _, r = self.anagrams2.get_anagrams("regulator")
    self.assertEqual(r, ['regulator'])

    _, r = self.anagrams2.get_anagrams("regulators")
    self.assertEqual(r, ['regulators'])

    _, r = self.anagrams2.get_anagrams("regulatory")
    self.assertEqual(r, ['regulatory'])

    _, r = self.anagrams2.get_anagrams("regulus")
    self.assertEqual(r, ['regulus'])

    _, r = self.anagrams2.get_anagrams("rehabilitate")
    self.assertEqual(r, ['rehabilitate'])

    _, r = self.anagrams2.get_anagrams("rehearsal")
    self.assertEqual(r, ['rehearsal'])

    _, r = self.anagrams2.get_anagrams("rehearsals")
    self.assertEqual(r, ['rehearsals'])

    _, r = self.anagrams2.get_anagrams("rehearse")
    self.assertEqual(r, ['rehearse'])

    _, r = self.anagrams2.get_anagrams("rehearsed")
    self.assertEqual(r, ['rehearsed'])

    _, r = self.anagrams2.get_anagrams("rehearser")
    self.assertEqual(r, ['rehearser'])

    _, r = self.anagrams2.get_anagrams("rehearses")
    self.assertEqual(r, ['rehearses'])

    _, r = self.anagrams2.get_anagrams("rehearsing")
    self.assertEqual(r, ['rehearsing'])

    _, r = self.anagrams2.get_anagrams("reich")
    self.assertEqual(r, ['erich', 'reich'])

    _, r = self.anagrams2.get_anagrams("reichenberg")
    self.assertEqual(r, ['reichenberg'])

    _, r = self.anagrams2.get_anagrams("reichstag")
    self.assertEqual(r, ['reichstag'])

    _, r = self.anagrams2.get_anagrams("reid")
    self.assertEqual(r, ['dire', 'reid', 'ride'])

    _, r = self.anagrams2.get_anagrams("reign")
    self.assertEqual(r, ['niger', 'reign'])

    _, r = self.anagrams2.get_anagrams("reigned")
    self.assertEqual(r, ['reigned'])

    _, r = self.anagrams2.get_anagrams("reigning")
    self.assertEqual(r, ['reigning'])

    _, r = self.anagrams2.get_anagrams("reigns")
    self.assertEqual(r, ['reigns', 'resign', 'signer', 'singer'])

    _, r = self.anagrams2.get_anagrams("reilly")
    self.assertEqual(r, ['reilly'])

    _, r = self.anagrams2.get_anagrams("reimbursable")
    self.assertEqual(r, ['reimbursable'])

    _, r = self.anagrams2.get_anagrams("reimburse")
    self.assertEqual(r, ['reimburse'])

    _, r = self.anagrams2.get_anagrams("reimbursed")
    self.assertEqual(r, ['reimbursed'])

    _, r = self.anagrams2.get_anagrams("reimbursement")
    self.assertEqual(r, ['reimbursement'])

    _, r = self.anagrams2.get_anagrams("reimbursements")
    self.assertEqual(r, ['reimbursements'])

    _, r = self.anagrams2.get_anagrams("rein")
    self.assertEqual(r, ['rein'])

    _, r = self.anagrams2.get_anagrams("reincarnate")
    self.assertEqual(r, ['reincarnate'])

    _, r = self.anagrams2.get_anagrams("reincarnated")
    self.assertEqual(r, ['reincarnated'])

    _, r = self.anagrams2.get_anagrams("reincarnation")
    self.assertEqual(r, ['reincarnation'])

    _, r = self.anagrams2.get_anagrams("reindeer")
    self.assertEqual(r, ['reindeer'])

    _, r = self.anagrams2.get_anagrams("reined")
    self.assertEqual(r, ['denier', 'reined'])

    _, r = self.anagrams2.get_anagrams("reinforce")
    self.assertEqual(r, ['reinforce'])

    _, r = self.anagrams2.get_anagrams("reinforced")
    self.assertEqual(r, ['reinforced'])

    _, r = self.anagrams2.get_anagrams("reinforcement")
    self.assertEqual(r, ['reinforcement'])

    _, r = self.anagrams2.get_anagrams("reinforcements")
    self.assertEqual(r, ['reinforcements'])

    _, r = self.anagrams2.get_anagrams("reinforcer")
    self.assertEqual(r, ['reinforcer'])

    _, r = self.anagrams2.get_anagrams("reinforces")
    self.assertEqual(r, ['reinforces'])

    _, r = self.anagrams2.get_anagrams("reinforcing")
    self.assertEqual(r, ['reinforcing'])

    _, r = self.anagrams2.get_anagrams("reinhard")
    self.assertEqual(r, ['reinhard'])

    _, r = self.anagrams2.get_anagrams("reinhardt")
    self.assertEqual(r, ['reinhardt'])

    _, r = self.anagrams2.get_anagrams("reinhold")
    self.assertEqual(r, ['reinhold'])

    _, r = self.anagrams2.get_anagrams("reinitialize")
    self.assertEqual(r, ['reinitialize'])

    _, r = self.anagrams2.get_anagrams("reinitialized")
    self.assertEqual(r, ['reinitialized'])

    _, r = self.anagrams2.get_anagrams("reinitializing")
    self.assertEqual(r, ['reinitializing'])

    _, r = self.anagrams2.get_anagrams("reins")
    self.assertEqual(r, ['reins', 'resin', 'rinse', 'risen', 'siren'])

    _, r = self.anagrams2.get_anagrams("reinsert")
    self.assertEqual(r, ['reinsert'])

    _, r = self.anagrams2.get_anagrams("reinserted")
    self.assertEqual(r, ['reinserted'])

    _, r = self.anagrams2.get_anagrams("reinserting")
    self.assertEqual(r, ['reinserting'])

    _, r = self.anagrams2.get_anagrams("reinserts")
    self.assertEqual(r, ['reinserts'])

    _, r = self.anagrams2.get_anagrams("reinstate")
    self.assertEqual(r, ['reinstate'])

    _, r = self.anagrams2.get_anagrams("reinstated")
    self.assertEqual(r, ['reinstated'])

    _, r = self.anagrams2.get_anagrams("reinstatement")
    self.assertEqual(r, ['reinstatement'])

    _, r = self.anagrams2.get_anagrams("reinstates")
    self.assertEqual(r, ['reinstates'])

    _, r = self.anagrams2.get_anagrams("reinstating")
    self.assertEqual(r, ['reinstating'])

    _, r = self.anagrams2.get_anagrams("reinterpret")
    self.assertEqual(r, ['interpreter', 'reinterpret'])

    _, r = self.anagrams2.get_anagrams("reinterpreted")
    self.assertEqual(r, ['reinterpreted'])

    _, r = self.anagrams2.get_anagrams("reinterpreting")
    self.assertEqual(r, ['reinterpreting'])

    _, r = self.anagrams2.get_anagrams("reinterprets")
    self.assertEqual(r, ['interpreters', 'reinterprets'])

    _, r = self.anagrams2.get_anagrams("reintroduce")
    self.assertEqual(r, ['reintroduce'])

    _, r = self.anagrams2.get_anagrams("reintroduced")
    self.assertEqual(r, ['reintroduced'])

    _, r = self.anagrams2.get_anagrams("reintroduces")
    self.assertEqual(r, ['reintroduces'])

    _, r = self.anagrams2.get_anagrams("reintroducing")
    self.assertEqual(r, ['reintroducing'])

    _, r = self.anagrams2.get_anagrams("reinvent")
    self.assertEqual(r, ['reinvent'])

    _, r = self.anagrams2.get_anagrams("reinvented")
    self.assertEqual(r, ['intervened', 'reinvented'])

    _, r = self.anagrams2.get_anagrams("reinventing")
    self.assertEqual(r, ['intervening', 'reinventing'])

    _, r = self.anagrams2.get_anagrams("reinvents")
    self.assertEqual(r, ['reinvents'])

    _, r = self.anagrams2.get_anagrams("reiterate")
    self.assertEqual(r, ['reiterate'])

    _, r = self.anagrams2.get_anagrams("reiterated")
    self.assertEqual(r, ['reiterated'])

    _, r = self.anagrams2.get_anagrams("reiterates")
    self.assertEqual(r, ['reiterates'])

    _, r = self.anagrams2.get_anagrams("reiterating")
    self.assertEqual(r, ['reiterating'])

    _, r = self.anagrams2.get_anagrams("reiteration")
    self.assertEqual(r, ['reiteration'])

    _, r = self.anagrams2.get_anagrams("reject")
    self.assertEqual(r, ['reject'])

    _, r = self.anagrams2.get_anagrams("rejected")
    self.assertEqual(r, ['rejected'])

    _, r = self.anagrams2.get_anagrams("rejecting")
    self.assertEqual(r, ['rejecting'])

    _, r = self.anagrams2.get_anagrams("rejection")
    self.assertEqual(r, ['rejection'])

    _, r = self.anagrams2.get_anagrams("rejections")
    self.assertEqual(r, ['rejections'])

    _, r = self.anagrams2.get_anagrams("rejector")
    self.assertEqual(r, ['rejector'])

    _, r = self.anagrams2.get_anagrams("rejectors")
    self.assertEqual(r, ['rejectors'])

    _, r = self.anagrams2.get_anagrams("rejects")
    self.assertEqual(r, ['rejects'])

    _, r = self.anagrams2.get_anagrams("rejoice")
    self.assertEqual(r, ['rejoice'])

    _, r = self.anagrams2.get_anagrams("rejoiced")
    self.assertEqual(r, ['rejoiced'])

    _, r = self.anagrams2.get_anagrams("rejoicer")
    self.assertEqual(r, ['rejoicer'])

    _, r = self.anagrams2.get_anagrams("rejoices")
    self.assertEqual(r, ['rejoices'])

    _, r = self.anagrams2.get_anagrams("rejoicing")
    self.assertEqual(r, ['rejoicing'])

    _, r = self.anagrams2.get_anagrams("rejoin")
    self.assertEqual(r, ['joiner', 'rejoin'])

    _, r = self.anagrams2.get_anagrams("rejoinder")
    self.assertEqual(r, ['rejoinder'])

    _, r = self.anagrams2.get_anagrams("rejoined")
    self.assertEqual(r, ['rejoined'])

    _, r = self.anagrams2.get_anagrams("rejoining")
    self.assertEqual(r, ['rejoining'])

    _, r = self.anagrams2.get_anagrams("rejoins")
    self.assertEqual(r, ['joiners', 'rejoins'])

    _, r = self.anagrams2.get_anagrams("relabel")
    self.assertEqual(r, ['relabel'])

    _, r = self.anagrams2.get_anagrams("relabeled")
    self.assertEqual(r, ['relabeled'])

    _, r = self.anagrams2.get_anagrams("relabeling")
    self.assertEqual(r, ['relabeling'])

    _, r = self.anagrams2.get_anagrams("relabelled")
    self.assertEqual(r, ['relabelled'])

    _, r = self.anagrams2.get_anagrams("relabelling")
    self.assertEqual(r, ['relabelling'])

    _, r = self.anagrams2.get_anagrams("relabels")
    self.assertEqual(r, ['relabels'])

    _, r = self.anagrams2.get_anagrams("relapse")
    self.assertEqual(r, ['relapse', 'repeals'])

    _, r = self.anagrams2.get_anagrams("relate")
    self.assertEqual(r, ['relate'])

    _, r = self.anagrams2.get_anagrams("related")
    self.assertEqual(r, ['alerted', 'altered', 'related'])

    _, r = self.anagrams2.get_anagrams("relater")
    self.assertEqual(r, ['alerter', 'alterer', 'relater'])

    _, r = self.anagrams2.get_anagrams("relates")
    self.assertEqual(r, ['realest', 'relates', 'stealer'])

    _, r = self.anagrams2.get_anagrams("relating")
    self.assertEqual(r, ['alerting', 'altering', 'integral', 'relating', 'triangle'])

    _, r = self.anagrams2.get_anagrams("relation")
    self.assertEqual(r, ['oriental', 'relation'])

    _, r = self.anagrams2.get_anagrams("relational")
    self.assertEqual(r, ['relational'])

    _, r = self.anagrams2.get_anagrams("relationally")
    self.assertEqual(r, ['relationally'])

    _, r = self.anagrams2.get_anagrams("relations")
    self.assertEqual(r, ['orientals', 'relations'])

    _, r = self.anagrams2.get_anagrams("relationship")
    self.assertEqual(r, ['relationship'])

    _, r = self.anagrams2.get_anagrams("relationships")
    self.assertEqual(r, ['relationships'])

    _, r = self.anagrams2.get_anagrams("relative")
    self.assertEqual(r, ['relative'])

    _, r = self.anagrams2.get_anagrams("relatively")
    self.assertEqual(r, ['relatively'])

    _, r = self.anagrams2.get_anagrams("relativeness")
    self.assertEqual(r, ['relativeness'])

    _, r = self.anagrams2.get_anagrams("relatives")
    self.assertEqual(r, ['relatives', 'versatile'])

    _, r = self.anagrams2.get_anagrams("relativism")
    self.assertEqual(r, ['relativism'])

    _, r = self.anagrams2.get_anagrams("relativistic")
    self.assertEqual(r, ['relativistic'])

    _, r = self.anagrams2.get_anagrams("relativistically")
    self.assertEqual(r, ['relativistically'])

    _, r = self.anagrams2.get_anagrams("relativity")
    self.assertEqual(r, ['relativity'])

    _, r = self.anagrams2.get_anagrams("relax")
    self.assertEqual(r, ['relax'])

    _, r = self.anagrams2.get_anagrams("relaxation")
    self.assertEqual(r, ['relaxation'])

    _, r = self.anagrams2.get_anagrams("relaxations")
    self.assertEqual(r, ['relaxations'])

    _, r = self.anagrams2.get_anagrams("relaxed")
    self.assertEqual(r, ['relaxed'])

    _, r = self.anagrams2.get_anagrams("relaxer")
    self.assertEqual(r, ['relaxer'])

    _, r = self.anagrams2.get_anagrams("relaxes")
    self.assertEqual(r, ['relaxes'])

    _, r = self.anagrams2.get_anagrams("relaxing")
    self.assertEqual(r, ['relaxing'])

    _, r = self.anagrams2.get_anagrams("relay")
    self.assertEqual(r, ['early', 'layer', 'leary', 'relay'])

    _, r = self.anagrams2.get_anagrams("relayed")
    self.assertEqual(r, ['layered', 'relayed'])

    _, r = self.anagrams2.get_anagrams("relaying")
    self.assertEqual(r, ['layering', 'relaying'])

    _, r = self.anagrams2.get_anagrams("relays")
    self.assertEqual(r, ['layers', 'relays', 'slayer'])

    _, r = self.anagrams2.get_anagrams("release")
    self.assertEqual(r, ['release'])

    _, r = self.anagrams2.get_anagrams("released")
    self.assertEqual(r, ['released'])

    _, r = self.anagrams2.get_anagrams("releases")
    self.assertEqual(r, ['releases'])

    _, r = self.anagrams2.get_anagrams("releasing")
    self.assertEqual(r, ['releasing'])

    _, r = self.anagrams2.get_anagrams("relegate")
    self.assertEqual(r, ['relegate'])

    _, r = self.anagrams2.get_anagrams("relegated")
    self.assertEqual(r, ['relegated'])

    _, r = self.anagrams2.get_anagrams("relegates")
    self.assertEqual(r, ['relegates'])

    _, r = self.anagrams2.get_anagrams("relegating")
    self.assertEqual(r, ['relegating'])

    _, r = self.anagrams2.get_anagrams("relent")
    self.assertEqual(r, ['relent'])

    _, r = self.anagrams2.get_anagrams("relented")
    self.assertEqual(r, ['relented'])

    _, r = self.anagrams2.get_anagrams("relenting")
    self.assertEqual(r, ['relenting'])

    _, r = self.anagrams2.get_anagrams("relentless")
    self.assertEqual(r, ['relentless'])

    _, r = self.anagrams2.get_anagrams("relentlessly")
    self.assertEqual(r, ['relentlessly'])

    _, r = self.anagrams2.get_anagrams("relentlessness")
    self.assertEqual(r, ['relentlessness'])

    _, r = self.anagrams2.get_anagrams("relents")
    self.assertEqual(r, ['relents'])

    _, r = self.anagrams2.get_anagrams("relevance")
    self.assertEqual(r, ['relevance'])

    _, r = self.anagrams2.get_anagrams("relevances")
    self.assertEqual(r, ['relevances'])

    _, r = self.anagrams2.get_anagrams("relevant")
    self.assertEqual(r, ['relevant'])

    _, r = self.anagrams2.get_anagrams("relevantly")
    self.assertEqual(r, ['relevantly'])

    _, r = self.anagrams2.get_anagrams("reliability")
    self.assertEqual(r, ['reliability'])

    _, r = self.anagrams2.get_anagrams("reliable")
    self.assertEqual(r, ['reliable'])

    _, r = self.anagrams2.get_anagrams("reliably")
    self.assertEqual(r, ['reliably'])

    _, r = self.anagrams2.get_anagrams("reliance")
    self.assertEqual(r, ['reliance'])

    _, r = self.anagrams2.get_anagrams("reliant")
    self.assertEqual(r, ['latrine', 'reliant', 'retinal'])

    _, r = self.anagrams2.get_anagrams("relic")
    self.assertEqual(r, ['relic'])

    _, r = self.anagrams2.get_anagrams("relics")
    self.assertEqual(r, ['relics', 'slicer'])

    _, r = self.anagrams2.get_anagrams("relied")
    self.assertEqual(r, ['relied'])

    _, r = self.anagrams2.get_anagrams("relief")
    self.assertEqual(r, ['relief'])

    _, r = self.anagrams2.get_anagrams("relies")
    self.assertEqual(r, ['relies'])

    _, r = self.anagrams2.get_anagrams("relieve")
    self.assertEqual(r, ['relieve'])

    _, r = self.anagrams2.get_anagrams("relieved")
    self.assertEqual(r, ['relieved'])

    _, r = self.anagrams2.get_anagrams("reliever")
    self.assertEqual(r, ['reliever'])

    _, r = self.anagrams2.get_anagrams("relievers")
    self.assertEqual(r, ['relievers'])

    _, r = self.anagrams2.get_anagrams("relieves")
    self.assertEqual(r, ['elsevier', 'relieves'])

    _, r = self.anagrams2.get_anagrams("relieving")
    self.assertEqual(r, ['relieving'])

    _, r = self.anagrams2.get_anagrams("religion")
    self.assertEqual(r, ['religion'])

    _, r = self.anagrams2.get_anagrams("religions")
    self.assertEqual(r, ['religions'])

    _, r = self.anagrams2.get_anagrams("religious")
    self.assertEqual(r, ['religious'])

    _, r = self.anagrams2.get_anagrams("religiously")
    self.assertEqual(r, ['religiously'])

    _, r = self.anagrams2.get_anagrams("religiousness")
    self.assertEqual(r, ['religiousness'])

    _, r = self.anagrams2.get_anagrams("relink")
    self.assertEqual(r, ['linker', 'relink'])

    _, r = self.anagrams2.get_anagrams("relinquish")
    self.assertEqual(r, ['relinquish'])

    _, r = self.anagrams2.get_anagrams("relinquished")
    self.assertEqual(r, ['relinquished'])

    _, r = self.anagrams2.get_anagrams("relinquishes")
    self.assertEqual(r, ['relinquishes'])

    _, r = self.anagrams2.get_anagrams("relinquishing")
    self.assertEqual(r, ['relinquishing'])

    _, r = self.anagrams2.get_anagrams("relish")
    self.assertEqual(r, ['relish'])

    _, r = self.anagrams2.get_anagrams("relished")
    self.assertEqual(r, ['relished'])

    _, r = self.anagrams2.get_anagrams("relishes")
    self.assertEqual(r, ['relishes'])

    _, r = self.anagrams2.get_anagrams("relishing")
    self.assertEqual(r, ['relishing'])

    _, r = self.anagrams2.get_anagrams("relive")
    self.assertEqual(r, ['relive', 'revile'])

    _, r = self.anagrams2.get_anagrams("relives")
    self.assertEqual(r, ['relives', 'servile'])

    _, r = self.anagrams2.get_anagrams("reliving")
    self.assertEqual(r, ['reliving', 'reviling'])

    _, r = self.anagrams2.get_anagrams("reload")
    self.assertEqual(r, ['laredo', 'loader', 'ordeal', 'reload'])

    _, r = self.anagrams2.get_anagrams("reloaded")
    self.assertEqual(r, ['reloaded'])

    _, r = self.anagrams2.get_anagrams("reloader")
    self.assertEqual(r, ['reloader'])

    _, r = self.anagrams2.get_anagrams("reloading")
    self.assertEqual(r, ['reloading'])

    _, r = self.anagrams2.get_anagrams("reloads")
    self.assertEqual(r, ['loaders', 'reloads'])

    _, r = self.anagrams2.get_anagrams("relocatable")
    self.assertEqual(r, ['relocatable'])

    _, r = self.anagrams2.get_anagrams("relocate")
    self.assertEqual(r, ['relocate'])

    _, r = self.anagrams2.get_anagrams("relocated")
    self.assertEqual(r, ['relocated'])

    _, r = self.anagrams2.get_anagrams("relocates")
    self.assertEqual(r, ['relocates'])

    _, r = self.anagrams2.get_anagrams("relocating")
    self.assertEqual(r, ['relocating'])

    _, r = self.anagrams2.get_anagrams("relocation")
    self.assertEqual(r, ['relocation'])

    _, r = self.anagrams2.get_anagrams("relocations")
    self.assertEqual(r, ['relocations'])

    _, r = self.anagrams2.get_anagrams("reluctance")
    self.assertEqual(r, ['reluctance'])

    _, r = self.anagrams2.get_anagrams("reluctant")
    self.assertEqual(r, ['reluctant'])

    _, r = self.anagrams2.get_anagrams("reluctantly")
    self.assertEqual(r, ['reluctantly'])

    _, r = self.anagrams2.get_anagrams("rely")
    self.assertEqual(r, ['lyre', 'rely'])

    _, r = self.anagrams2.get_anagrams("relying")
    self.assertEqual(r, ['relying'])

    _, r = self.anagrams2.get_anagrams("remain")
    self.assertEqual(r, ['airmen', 'marine', 'remain'])

    _, r = self.anagrams2.get_anagrams("remainder")
    self.assertEqual(r, ['remainder'])

    _, r = self.anagrams2.get_anagrams("remainders")
    self.assertEqual(r, ['remainders'])

    _, r = self.anagrams2.get_anagrams("remained")
    self.assertEqual(r, ['remained'])

    _, r = self.anagrams2.get_anagrams("remaining")
    self.assertEqual(r, ['remaining'])

    _, r = self.anagrams2.get_anagrams("remains")
    self.assertEqual(r, ['marines', 'remains', 'seminar'])

    _, r = self.anagrams2.get_anagrams("remark")
    self.assertEqual(r, ['kramer', 'marker', 'remark'])

    _, r = self.anagrams2.get_anagrams("remarkable")
    self.assertEqual(r, ['remarkable'])

    _, r = self.anagrams2.get_anagrams("remarkableness")
    self.assertEqual(r, ['remarkableness'])

    _, r = self.anagrams2.get_anagrams("remarkably")
    self.assertEqual(r, ['remarkably'])

    _, r = self.anagrams2.get_anagrams("remarked")
    self.assertEqual(r, ['remarked'])

    _, r = self.anagrams2.get_anagrams("remarking")
    self.assertEqual(r, ['remarking'])

    _, r = self.anagrams2.get_anagrams("remarks")
    self.assertEqual(r, ['markers', 'remarks'])

    _, r = self.anagrams2.get_anagrams("rembrandt")
    self.assertEqual(r, ['rembrandt'])

    _, r = self.anagrams2.get_anagrams("remedial")
    self.assertEqual(r, ['remedial'])

    _, r = self.anagrams2.get_anagrams("remedied")
    self.assertEqual(r, ['remedied'])

    _, r = self.anagrams2.get_anagrams("remedies")
    self.assertEqual(r, ['remedies'])

    _, r = self.anagrams2.get_anagrams("remedy")
    self.assertEqual(r, ['remedy'])

    _, r = self.anagrams2.get_anagrams("remedying")
    self.assertEqual(r, ['remedying'])

    _, r = self.anagrams2.get_anagrams("remember")
    self.assertEqual(r, ['remember'])

    _, r = self.anagrams2.get_anagrams("remembered")
    self.assertEqual(r, ['remembered'])

    _, r = self.anagrams2.get_anagrams("remembering")
    self.assertEqual(r, ['remembering'])

    _, r = self.anagrams2.get_anagrams("remembers")
    self.assertEqual(r, ['remembers'])

    _, r = self.anagrams2.get_anagrams("remembrance")
    self.assertEqual(r, ['remembrance'])

    _, r = self.anagrams2.get_anagrams("remembrances")
    self.assertEqual(r, ['remembrances'])

    _, r = self.anagrams2.get_anagrams("remind")
    self.assertEqual(r, ['remind'])

    _, r = self.anagrams2.get_anagrams("reminded")
    self.assertEqual(r, ['reminded'])

    _, r = self.anagrams2.get_anagrams("reminder")
    self.assertEqual(r, ['reminder'])

    _, r = self.anagrams2.get_anagrams("reminders")
    self.assertEqual(r, ['reminders'])

    _, r = self.anagrams2.get_anagrams("reminding")
    self.assertEqual(r, ['reminding'])

    _, r = self.anagrams2.get_anagrams("reminds")
    self.assertEqual(r, ['reminds'])

    _, r = self.anagrams2.get_anagrams("remington")
    self.assertEqual(r, ['remington'])

    _, r = self.anagrams2.get_anagrams("reminiscence")
    self.assertEqual(r, ['reminiscence'])

    _, r = self.anagrams2.get_anagrams("reminiscences")
    self.assertEqual(r, ['reminiscences'])

    _, r = self.anagrams2.get_anagrams("reminiscent")
    self.assertEqual(r, ['reminiscent'])

    _, r = self.anagrams2.get_anagrams("reminiscently")
    self.assertEqual(r, ['reminiscently'])

    _, r = self.anagrams2.get_anagrams("remiss")
    self.assertEqual(r, ['misers', 'remiss'])

    _, r = self.anagrams2.get_anagrams("remission")
    self.assertEqual(r, ['missioner', 'remission'])

    _, r = self.anagrams2.get_anagrams("remit")
    self.assertEqual(r, ['merit', 'miter', 'mitre', 'remit', 'timer'])

    _, r = self.anagrams2.get_anagrams("remittance")
    self.assertEqual(r, ['remittance'])

    _, r = self.anagrams2.get_anagrams("remnant")
    self.assertEqual(r, ['remnant'])

    _, r = self.anagrams2.get_anagrams("remnants")
    self.assertEqual(r, ['remnants'])

    _, r = self.anagrams2.get_anagrams("remodel")
    self.assertEqual(r, ['remodel'])

    _, r = self.anagrams2.get_anagrams("remodeled")
    self.assertEqual(r, ['remodeled'])

    _, r = self.anagrams2.get_anagrams("remodeling")
    self.assertEqual(r, ['remodeling'])

    _, r = self.anagrams2.get_anagrams("remodels")
    self.assertEqual(r, ['remodels'])

    _, r = self.anagrams2.get_anagrams("remonstrate")
    self.assertEqual(r, ['remonstrate'])

    _, r = self.anagrams2.get_anagrams("remonstrated")
    self.assertEqual(r, ['remonstrated'])

    _, r = self.anagrams2.get_anagrams("remonstrates")
    self.assertEqual(r, ['remonstrates'])

    _, r = self.anagrams2.get_anagrams("remonstrating")
    self.assertEqual(r, ['remonstrating'])

    _, r = self.anagrams2.get_anagrams("remonstration")
    self.assertEqual(r, ['remonstration'])

    _, r = self.anagrams2.get_anagrams("remonstrative")
    self.assertEqual(r, ['remonstrative'])

    _, r = self.anagrams2.get_anagrams("remorse")
    self.assertEqual(r, ['remorse'])

    _, r = self.anagrams2.get_anagrams("remorseful")
    self.assertEqual(r, ['remorseful'])

    _, r = self.anagrams2.get_anagrams("remote")
    self.assertEqual(r, ['meteor', 'remote'])

    _, r = self.anagrams2.get_anagrams("remotely")
    self.assertEqual(r, ['remotely'])

    _, r = self.anagrams2.get_anagrams("remoteness")
    self.assertEqual(r, ['remoteness'])

    _, r = self.anagrams2.get_anagrams("remotest")
    self.assertEqual(r, ['remotest'])

    _, r = self.anagrams2.get_anagrams("removable")
    self.assertEqual(r, ['removable'])

    _, r = self.anagrams2.get_anagrams("removal")
    self.assertEqual(r, ['removal'])

    _, r = self.anagrams2.get_anagrams("removals")
    self.assertEqual(r, ['removals'])

    _, r = self.anagrams2.get_anagrams("remove")
    self.assertEqual(r, ['remove'])

    _, r = self.anagrams2.get_anagrams("removed")
    self.assertEqual(r, ['removed'])

    _, r = self.anagrams2.get_anagrams("remover")
    self.assertEqual(r, ['remover'])

    _, r = self.anagrams2.get_anagrams("removes")
    self.assertEqual(r, ['removes'])

    _, r = self.anagrams2.get_anagrams("removing")
    self.assertEqual(r, ['removing'])

    _, r = self.anagrams2.get_anagrams("remunerate")
    self.assertEqual(r, ['remunerate'])

    _, r = self.anagrams2.get_anagrams("remuneration")
    self.assertEqual(r, ['remuneration'])

    _, r = self.anagrams2.get_anagrams("remus")
    self.assertEqual(r, ['remus', 'serum'])

    _, r = self.anagrams2.get_anagrams("remy")
    self.assertEqual(r, ['remy'])

    _, r = self.anagrams2.get_anagrams("rena")
    self.assertEqual(r, ['earn', 'near', 'rena'])

    _, r = self.anagrams2.get_anagrams("renaissance")
    self.assertEqual(r, ['renaissance'])

    _, r = self.anagrams2.get_anagrams("renal")
    self.assertEqual(r, ['arlen', 'learn', 'renal'])

    _, r = self.anagrams2.get_anagrams("rename")
    self.assertEqual(r, ['meaner', 'rename'])

    _, r = self.anagrams2.get_anagrams("renamed")
    self.assertEqual(r, ['meander', 'renamed'])

    _, r = self.anagrams2.get_anagrams("renames")
    self.assertEqual(r, ['renames'])

    _, r = self.anagrams2.get_anagrams("renaming")
    self.assertEqual(r, ['renaming'])

    _, r = self.anagrams2.get_anagrams("renault")
    self.assertEqual(r, ['laurent', 'neutral', 'renault'])

    _, r = self.anagrams2.get_anagrams("renaults")
    self.assertEqual(r, ['renaults'])

    _, r = self.anagrams2.get_anagrams("rend")
    self.assertEqual(r, ['rend'])

    _, r = self.anagrams2.get_anagrams("render")
    self.assertEqual(r, ['render'])

    _, r = self.anagrams2.get_anagrams("rendered")
    self.assertEqual(r, ['rendered'])

    _, r = self.anagrams2.get_anagrams("rendering")
    self.assertEqual(r, ['rendering'])

    _, r = self.anagrams2.get_anagrams("renderings")
    self.assertEqual(r, ['renderings'])

    _, r = self.anagrams2.get_anagrams("renders")
    self.assertEqual(r, ['renders'])

    _, r = self.anagrams2.get_anagrams("rendezvous")
    self.assertEqual(r, ['rendezvous'])

    _, r = self.anagrams2.get_anagrams("rending")
    self.assertEqual(r, ['rending'])

    _, r = self.anagrams2.get_anagrams("rendition")
    self.assertEqual(r, ['rendition'])

    _, r = self.anagrams2.get_anagrams("renditions")
    self.assertEqual(r, ['renditions'])

    _, r = self.anagrams2.get_anagrams("rends")
    self.assertEqual(r, ['rends'])

    _, r = self.anagrams2.get_anagrams("rene")
    self.assertEqual(r, ['erne', 'rene'])

    _, r = self.anagrams2.get_anagrams("renee")
    self.assertEqual(r, ['renee'])

    _, r = self.anagrams2.get_anagrams("renegade")
    self.assertEqual(r, ['renegade'])

    _, r = self.anagrams2.get_anagrams("renegotiable")
    self.assertEqual(r, ['renegotiable'])

    _, r = self.anagrams2.get_anagrams("renew")
    self.assertEqual(r, ['newer', 'renew'])

    _, r = self.anagrams2.get_anagrams("renewable")
    self.assertEqual(r, ['renewable'])

    _, r = self.anagrams2.get_anagrams("renewal")
    self.assertEqual(r, ['renewal'])

    _, r = self.anagrams2.get_anagrams("renewed")
    self.assertEqual(r, ['renewed'])

    _, r = self.anagrams2.get_anagrams("renewer")
    self.assertEqual(r, ['renewer'])

    _, r = self.anagrams2.get_anagrams("renewing")
    self.assertEqual(r, ['renewing'])

    _, r = self.anagrams2.get_anagrams("renews")
    self.assertEqual(r, ['renews'])

    _, r = self.anagrams2.get_anagrams("reno")
    self.assertEqual(r, ['nero', 'reno'])

    _, r = self.anagrams2.get_anagrams("renoir")
    self.assertEqual(r, ['renoir'])

    _, r = self.anagrams2.get_anagrams("renounce")
    self.assertEqual(r, ['renounce'])

    _, r = self.anagrams2.get_anagrams("renounces")
    self.assertEqual(r, ['renounces'])

    _, r = self.anagrams2.get_anagrams("renouncing")
    self.assertEqual(r, ['renouncing'])

    _, r = self.anagrams2.get_anagrams("renovate")
    self.assertEqual(r, ['renovate'])

    _, r = self.anagrams2.get_anagrams("renovated")
    self.assertEqual(r, ['renovated'])

    _, r = self.anagrams2.get_anagrams("renovation")
    self.assertEqual(r, ['renovation'])

    _, r = self.anagrams2.get_anagrams("renown")
    self.assertEqual(r, ['renown'])

    _, r = self.anagrams2.get_anagrams("renowned")
    self.assertEqual(r, ['renowned'])

    _, r = self.anagrams2.get_anagrams("rensselaer")
    self.assertEqual(r, ['rensselaer'])

    _, r = self.anagrams2.get_anagrams("rent")
    self.assertEqual(r, ['rent'])

    _, r = self.anagrams2.get_anagrams("rental")
    self.assertEqual(r, ['antler', 'rental'])

    _, r = self.anagrams2.get_anagrams("rentals")
    self.assertEqual(r, ['rentals'])

    _, r = self.anagrams2.get_anagrams("rented")
    self.assertEqual(r, ['rented', 'tender'])

    _, r = self.anagrams2.get_anagrams("renting")
    self.assertEqual(r, ['renting'])

    _, r = self.anagrams2.get_anagrams("rents")
    self.assertEqual(r, ['ernst', 'rents', 'stern'])

    _, r = self.anagrams2.get_anagrams("renumber")
    self.assertEqual(r, ['numberer', 'renumber'])

    _, r = self.anagrams2.get_anagrams("renumbering")
    self.assertEqual(r, ['renumbering'])

    _, r = self.anagrams2.get_anagrams("renumbers")
    self.assertEqual(r, ['renumbers'])

    _, r = self.anagrams2.get_anagrams("renunciate")
    self.assertEqual(r, ['renunciate'])

    _, r = self.anagrams2.get_anagrams("renunciation")
    self.assertEqual(r, ['renunciation'])

    _, r = self.anagrams2.get_anagrams("renville")
    self.assertEqual(r, ['renville'])

    _, r = self.anagrams2.get_anagrams("reoccur")
    self.assertEqual(r, ['reoccur'])

    _, r = self.anagrams2.get_anagrams("reopen")
    self.assertEqual(r, ['opener', 'reopen'])

    _, r = self.anagrams2.get_anagrams("reopened")
    self.assertEqual(r, ['reopened'])

    _, r = self.anagrams2.get_anagrams("reopening")
    self.assertEqual(r, ['reopening'])

    _, r = self.anagrams2.get_anagrams("reopens")
    self.assertEqual(r, ['openers', 'penrose', 'reopens'])

    _, r = self.anagrams2.get_anagrams("reorder")
    self.assertEqual(r, ['reorder'])

    _, r = self.anagrams2.get_anagrams("reordered")
    self.assertEqual(r, ['reordered'])

    _, r = self.anagrams2.get_anagrams("reordering")
    self.assertEqual(r, ['reordering'])

    _, r = self.anagrams2.get_anagrams("reorders")
    self.assertEqual(r, ['reorders'])

    _, r = self.anagrams2.get_anagrams("reorganization")
    self.assertEqual(r, ['reorganization'])

    _, r = self.anagrams2.get_anagrams("reorganizations")
    self.assertEqual(r, ['reorganizations'])

    _, r = self.anagrams2.get_anagrams("reorganize")
    self.assertEqual(r, ['reorganize'])

    _, r = self.anagrams2.get_anagrams("reorganized")
    self.assertEqual(r, ['reorganized'])

    _, r = self.anagrams2.get_anagrams("reorganizes")
    self.assertEqual(r, ['reorganizes'])

    _, r = self.anagrams2.get_anagrams("reorganizing")
    self.assertEqual(r, ['reorganizing'])

    _, r = self.anagrams2.get_anagrams("repackage")
    self.assertEqual(r, ['repackage'])

    _, r = self.anagrams2.get_anagrams("repaid")
    self.assertEqual(r, ['diaper', 'paired', 'repaid'])

    _, r = self.anagrams2.get_anagrams("repair")
    self.assertEqual(r, ['rapier', 'repair'])

    _, r = self.anagrams2.get_anagrams("repaired")
    self.assertEqual(r, ['repaired'])

    _, r = self.anagrams2.get_anagrams("repairer")
    self.assertEqual(r, ['repairer'])

    _, r = self.anagrams2.get_anagrams("repairing")
    self.assertEqual(r, ['repairing'])

    _, r = self.anagrams2.get_anagrams("repairman")
    self.assertEqual(r, ['repairman'])

    _, r = self.anagrams2.get_anagrams("repairmen")
    self.assertEqual(r, ['repairmen'])

    _, r = self.anagrams2.get_anagrams("repairs")
    self.assertEqual(r, ['praiser', 'repairs'])

    _, r = self.anagrams2.get_anagrams("reparation")
    self.assertEqual(r, ['reparation'])

    _, r = self.anagrams2.get_anagrams("reparations")
    self.assertEqual(r, ['reparations'])

    _, r = self.anagrams2.get_anagrams("repartee")
    self.assertEqual(r, ['repartee', 'repeater'])

    _, r = self.anagrams2.get_anagrams("repartition")
    self.assertEqual(r, ['repartition'])

    _, r = self.anagrams2.get_anagrams("repast")
    self.assertEqual(r, ['repast', 'tapers'])

    _, r = self.anagrams2.get_anagrams("repasts")
    self.assertEqual(r, ['repasts', 'sparest'])

    _, r = self.anagrams2.get_anagrams("repay")
    self.assertEqual(r, ['payer', 'repay'])

    _, r = self.anagrams2.get_anagrams("repaying")
    self.assertEqual(r, ['repaying'])

    _, r = self.anagrams2.get_anagrams("repays")
    self.assertEqual(r, ['payers', 'repays'])

    _, r = self.anagrams2.get_anagrams("repeal")
    self.assertEqual(r, ['repeal'])

    _, r = self.anagrams2.get_anagrams("repealed")
    self.assertEqual(r, ['repealed'])

    _, r = self.anagrams2.get_anagrams("repealer")
    self.assertEqual(r, ['repealer'])

    _, r = self.anagrams2.get_anagrams("repealing")
    self.assertEqual(r, ['repealing'])

    _, r = self.anagrams2.get_anagrams("repeals")
    self.assertEqual(r, ['relapse', 'repeals'])

    _, r = self.anagrams2.get_anagrams("repeat")
    self.assertEqual(r, ['repeat'])

    _, r = self.anagrams2.get_anagrams("repeatable")
    self.assertEqual(r, ['repeatable'])

    _, r = self.anagrams2.get_anagrams("repeated")
    self.assertEqual(r, ['repeated'])

    _, r = self.anagrams2.get_anagrams("repeatedly")
    self.assertEqual(r, ['repeatedly'])

    _, r = self.anagrams2.get_anagrams("repeater")
    self.assertEqual(r, ['repartee', 'repeater'])

    _, r = self.anagrams2.get_anagrams("repeaters")
    self.assertEqual(r, ['repeaters'])

    _, r = self.anagrams2.get_anagrams("repeating")
    self.assertEqual(r, ['repeating'])

    _, r = self.anagrams2.get_anagrams("repeats")
    self.assertEqual(r, ['repeats'])

    _, r = self.anagrams2.get_anagrams("repel")
    self.assertEqual(r, ['leper', 'perle', 'repel'])

    _, r = self.anagrams2.get_anagrams("repelled")
    self.assertEqual(r, ['repelled'])

    _, r = self.anagrams2.get_anagrams("repellent")
    self.assertEqual(r, ['repellent'])

    _, r = self.anagrams2.get_anagrams("repels")
    self.assertEqual(r, ['repels'])

    _, r = self.anagrams2.get_anagrams("repent")
    self.assertEqual(r, ['repent'])

    _, r = self.anagrams2.get_anagrams("repentance")
    self.assertEqual(r, ['repentance'])

    _, r = self.anagrams2.get_anagrams("repented")
    self.assertEqual(r, ['repented'])

    _, r = self.anagrams2.get_anagrams("repenting")
    self.assertEqual(r, ['repenting'])

    _, r = self.anagrams2.get_anagrams("repents")
    self.assertEqual(r, ['present', 'repents', 'serpent'])

    _, r = self.anagrams2.get_anagrams("repercussion")
    self.assertEqual(r, ['repercussion'])

    _, r = self.anagrams2.get_anagrams("repercussions")
    self.assertEqual(r, ['repercussions'])

    _, r = self.anagrams2.get_anagrams("repertoire")
    self.assertEqual(r, ['repertoire'])

    _, r = self.anagrams2.get_anagrams("repertory")
    self.assertEqual(r, ['repertory'])

    _, r = self.anagrams2.get_anagrams("repetition")
    self.assertEqual(r, ['petitioner', 'repetition'])

    _, r = self.anagrams2.get_anagrams("repetitions")
    self.assertEqual(r, ['repetitions'])

    _, r = self.anagrams2.get_anagrams("repetitious")
    self.assertEqual(r, ['repetitious'])

    _, r = self.anagrams2.get_anagrams("repetitive")
    self.assertEqual(r, ['repetitive'])

    _, r = self.anagrams2.get_anagrams("repetitively")
    self.assertEqual(r, ['repetitively'])

    _, r = self.anagrams2.get_anagrams("repetitiveness")
    self.assertEqual(r, ['repetitiveness'])

    _, r = self.anagrams2.get_anagrams("rephrase")
    self.assertEqual(r, ['rephrase'])

    _, r = self.anagrams2.get_anagrams("rephrased")
    self.assertEqual(r, ['rephrased'])

    _, r = self.anagrams2.get_anagrams("rephrases")
    self.assertEqual(r, ['rephrases'])

    _, r = self.anagrams2.get_anagrams("rephrasing")
    self.assertEqual(r, ['rephrasing'])

    _, r = self.anagrams2.get_anagrams("repine")
    self.assertEqual(r, ['repine'])

    _, r = self.anagrams2.get_anagrams("replace")
    self.assertEqual(r, ['replace'])

    _, r = self.anagrams2.get_anagrams("replaceable")
    self.assertEqual(r, ['replaceable'])

    _, r = self.anagrams2.get_anagrams("replaced")
    self.assertEqual(r, ['parceled', 'replaced'])

    _, r = self.anagrams2.get_anagrams("replacement")
    self.assertEqual(r, ['replacement'])

    _, r = self.anagrams2.get_anagrams("replacements")
    self.assertEqual(r, ['replacements'])

    _, r = self.anagrams2.get_anagrams("replacer")
    self.assertEqual(r, ['replacer'])

    _, r = self.anagrams2.get_anagrams("replaces")
    self.assertEqual(r, ['replaces'])

    _, r = self.anagrams2.get_anagrams("replacing")
    self.assertEqual(r, ['parceling', 'replacing'])

    _, r = self.anagrams2.get_anagrams("replay")
    self.assertEqual(r, ['parley', 'pearly', 'player', 'replay'])

    _, r = self.anagrams2.get_anagrams("replayed")
    self.assertEqual(r, ['replayed'])

    _, r = self.anagrams2.get_anagrams("replaying")
    self.assertEqual(r, ['replaying'])

    _, r = self.anagrams2.get_anagrams("replays")
    self.assertEqual(r, ['parsley', 'players', 'replays', 'sparely'])

    _, r = self.anagrams2.get_anagrams("replenish")
    self.assertEqual(r, ['replenish'])

    _, r = self.anagrams2.get_anagrams("replenished")
    self.assertEqual(r, ['replenished'])

    _, r = self.anagrams2.get_anagrams("replenishes")
    self.assertEqual(r, ['replenishes'])

    _, r = self.anagrams2.get_anagrams("replenishing")
    self.assertEqual(r, ['replenishing'])

    _, r = self.anagrams2.get_anagrams("replete")
    self.assertEqual(r, ['replete'])

    _, r = self.anagrams2.get_anagrams("repleteness")
    self.assertEqual(r, ['repleteness'])

    _, r = self.anagrams2.get_anagrams("repletion")
    self.assertEqual(r, ['repletion'])

    _, r = self.anagrams2.get_anagrams("replica")
    self.assertEqual(r, ['replica'])

    _, r = self.anagrams2.get_anagrams("replicas")
    self.assertEqual(r, ['replicas'])

    _, r = self.anagrams2.get_anagrams("replicate")
    self.assertEqual(r, ['replicate'])

    _, r = self.anagrams2.get_anagrams("replicated")
    self.assertEqual(r, ['replicated'])

    _, r = self.anagrams2.get_anagrams("replicates")
    self.assertEqual(r, ['replicates'])

    _, r = self.anagrams2.get_anagrams("replicating")
    self.assertEqual(r, ['replicating'])

    _, r = self.anagrams2.get_anagrams("replication")
    self.assertEqual(r, ['replication'])

    _, r = self.anagrams2.get_anagrams("replications")
    self.assertEqual(r, ['replications'])

    _, r = self.anagrams2.get_anagrams("replied")
    self.assertEqual(r, ['replied'])

    _, r = self.anagrams2.get_anagrams("replies")
    self.assertEqual(r, ['replies'])

    _, r = self.anagrams2.get_anagrams("reply")
    self.assertEqual(r, ['reply'])

    _, r = self.anagrams2.get_anagrams("replying")
    self.assertEqual(r, ['replying'])

    _, r = self.anagrams2.get_anagrams("report")
    self.assertEqual(r, ['porter', 'report'])

    _, r = self.anagrams2.get_anagrams("reported")
    self.assertEqual(r, ['reported'])

    _, r = self.anagrams2.get_anagrams("reportedly")
    self.assertEqual(r, ['reportedly'])

    _, r = self.anagrams2.get_anagrams("reporter")
    self.assertEqual(r, ['reporter'])

    _, r = self.anagrams2.get_anagrams("reporters")
    self.assertEqual(r, ['reporters'])

    _, r = self.anagrams2.get_anagrams("reporting")
    self.assertEqual(r, ['reporting'])

    _, r = self.anagrams2.get_anagrams("reports")
    self.assertEqual(r, ['porters', 'reports'])

    _, r = self.anagrams2.get_anagrams("repose")
    self.assertEqual(r, ['repose'])

    _, r = self.anagrams2.get_anagrams("reposed")
    self.assertEqual(r, ['reposed'])

    _, r = self.anagrams2.get_anagrams("reposes")
    self.assertEqual(r, ['reposes'])

    _, r = self.anagrams2.get_anagrams("reposing")
    self.assertEqual(r, ['reposing'])

    _, r = self.anagrams2.get_anagrams("reposition")
    self.assertEqual(r, ['reposition'])

    _, r = self.anagrams2.get_anagrams("repositioned")
    self.assertEqual(r, ['repositioned'])

    _, r = self.anagrams2.get_anagrams("repositioning")
    self.assertEqual(r, ['repositioning'])

    _, r = self.anagrams2.get_anagrams("repositions")
    self.assertEqual(r, ['repositions'])

    _, r = self.anagrams2.get_anagrams("repositories")
    self.assertEqual(r, ['repositories'])

    _, r = self.anagrams2.get_anagrams("repository")
    self.assertEqual(r, ['repository'])

    _, r = self.anagrams2.get_anagrams("reprehensible")
    self.assertEqual(r, ['reprehensible'])

    _, r = self.anagrams2.get_anagrams("represent")
    self.assertEqual(r, ['presenter', 'represent'])

    _, r = self.anagrams2.get_anagrams("representable")
    self.assertEqual(r, ['representable'])

    _, r = self.anagrams2.get_anagrams("representably")
    self.assertEqual(r, ['representably'])

    _, r = self.anagrams2.get_anagrams("representation")
    self.assertEqual(r, ['representation'])

    _, r = self.anagrams2.get_anagrams("representational")
    self.assertEqual(r, ['representational'])

    _, r = self.anagrams2.get_anagrams("representationally")
    self.assertEqual(r, ['representationally'])

    _, r = self.anagrams2.get_anagrams("representations")
    self.assertEqual(r, ['representations'])

    _, r = self.anagrams2.get_anagrams("representative")
    self.assertEqual(r, ['representative'])

    _, r = self.anagrams2.get_anagrams("representatively")
    self.assertEqual(r, ['representatively'])

    _, r = self.anagrams2.get_anagrams("representativeness")
    self.assertEqual(r, ['representativeness'])

    _, r = self.anagrams2.get_anagrams("representatives")
    self.assertEqual(r, ['representatives'])

    _, r = self.anagrams2.get_anagrams("represented")
    self.assertEqual(r, ['represented'])

    _, r = self.anagrams2.get_anagrams("representing")
    self.assertEqual(r, ['representing'])

    _, r = self.anagrams2.get_anagrams("represents")
    self.assertEqual(r, ['represents'])

    _, r = self.anagrams2.get_anagrams("repress")
    self.assertEqual(r, ['presser', 'repress'])

    _, r = self.anagrams2.get_anagrams("repressed")
    self.assertEqual(r, ['repressed'])

    _, r = self.anagrams2.get_anagrams("represses")
    self.assertEqual(r, ['represses'])

    _, r = self.anagrams2.get_anagrams("repressing")
    self.assertEqual(r, ['repressing'])

    _, r = self.anagrams2.get_anagrams("repression")
    self.assertEqual(r, ['repression'])

    _, r = self.anagrams2.get_anagrams("repressions")
    self.assertEqual(r, ['repressions'])

    _, r = self.anagrams2.get_anagrams("repressive")
    self.assertEqual(r, ['repressive'])

    _, r = self.anagrams2.get_anagrams("reprieve")
    self.assertEqual(r, ['reprieve'])

    _, r = self.anagrams2.get_anagrams("reprieved")
    self.assertEqual(r, ['reprieved'])

    _, r = self.anagrams2.get_anagrams("reprieves")
    self.assertEqual(r, ['reprieves'])

    _, r = self.anagrams2.get_anagrams("reprieving")
    self.assertEqual(r, ['reprieving'])

    _, r = self.anagrams2.get_anagrams("reprimand")
    self.assertEqual(r, ['reprimand'])

    _, r = self.anagrams2.get_anagrams("reprint")
    self.assertEqual(r, ['printer', 'reprint'])

    _, r = self.anagrams2.get_anagrams("reprinted")
    self.assertEqual(r, ['reprinted'])

    _, r = self.anagrams2.get_anagrams("reprinting")
    self.assertEqual(r, ['reprinting'])

    _, r = self.anagrams2.get_anagrams("reprints")
    self.assertEqual(r, ['printers', 'reprints', 'sprinter'])

    _, r = self.anagrams2.get_anagrams("reprisal")
    self.assertEqual(r, ['reprisal'])

    _, r = self.anagrams2.get_anagrams("reprisals")
    self.assertEqual(r, ['reprisals'])

    _, r = self.anagrams2.get_anagrams("reproach")
    self.assertEqual(r, ['reproach'])

    _, r = self.anagrams2.get_anagrams("reproached")
    self.assertEqual(r, ['reproached'])

    _, r = self.anagrams2.get_anagrams("reproaches")
    self.assertEqual(r, ['reproaches'])

    _, r = self.anagrams2.get_anagrams("reproaching")
    self.assertEqual(r, ['reproaching'])

    _, r = self.anagrams2.get_anagrams("reprobate")
    self.assertEqual(r, ['reprobate'])

    _, r = self.anagrams2.get_anagrams("reproduce")
    self.assertEqual(r, ['procedure', 'reproduce'])

    _, r = self.anagrams2.get_anagrams("reproduced")
    self.assertEqual(r, ['reproduced'])

    _, r = self.anagrams2.get_anagrams("reproducer")
    self.assertEqual(r, ['reproducer'])

    _, r = self.anagrams2.get_anagrams("reproducers")
    self.assertEqual(r, ['reproducers'])

    _, r = self.anagrams2.get_anagrams("reproduces")
    self.assertEqual(r, ['procedures', 'reproduces'])

    _, r = self.anagrams2.get_anagrams("reproducibilities")
    self.assertEqual(r, ['reproducibilities'])

    _, r = self.anagrams2.get_anagrams("reproducibility")
    self.assertEqual(r, ['reproducibility'])

    _, r = self.anagrams2.get_anagrams("reproducible")
    self.assertEqual(r, ['reproducible'])

    _, r = self.anagrams2.get_anagrams("reproducibly")
    self.assertEqual(r, ['reproducibly'])

    _, r = self.anagrams2.get_anagrams("reproducing")
    self.assertEqual(r, ['reproducing'])

    _, r = self.anagrams2.get_anagrams("reproduction")
    self.assertEqual(r, ['reproduction'])

    _, r = self.anagrams2.get_anagrams("reproductions")
    self.assertEqual(r, ['reproductions'])

    _, r = self.anagrams2.get_anagrams("reprogram")
    self.assertEqual(r, ['reprogram'])

    _, r = self.anagrams2.get_anagrams("reprogrammed")
    self.assertEqual(r, ['reprogrammed'])

    _, r = self.anagrams2.get_anagrams("reprogramming")
    self.assertEqual(r, ['reprogramming'])

    _, r = self.anagrams2.get_anagrams("reprograms")
    self.assertEqual(r, ['reprograms'])

    _, r = self.anagrams2.get_anagrams("reproof")
    self.assertEqual(r, ['reproof'])

    _, r = self.anagrams2.get_anagrams("reprove")
    self.assertEqual(r, ['reprove'])

    _, r = self.anagrams2.get_anagrams("reprover")
    self.assertEqual(r, ['reprover'])

    _, r = self.anagrams2.get_anagrams("reptile")
    self.assertEqual(r, ['reptile'])

    _, r = self.anagrams2.get_anagrams("reptiles")
    self.assertEqual(r, ['reptiles'])

    _, r = self.anagrams2.get_anagrams("reptilian")
    self.assertEqual(r, ['reptilian'])

    _, r = self.anagrams2.get_anagrams("republic")
    self.assertEqual(r, ['republic'])

    _, r = self.anagrams2.get_anagrams("republican")
    self.assertEqual(r, ['republican'])

    _, r = self.anagrams2.get_anagrams("republicans")
    self.assertEqual(r, ['republicans'])

    _, r = self.anagrams2.get_anagrams("republics")
    self.assertEqual(r, ['republics'])

    _, r = self.anagrams2.get_anagrams("repudiate")
    self.assertEqual(r, ['repudiate'])

    _, r = self.anagrams2.get_anagrams("repudiated")
    self.assertEqual(r, ['repudiated'])

    _, r = self.anagrams2.get_anagrams("repudiates")
    self.assertEqual(r, ['repudiates'])

    _, r = self.anagrams2.get_anagrams("repudiating")
    self.assertEqual(r, ['repudiating'])

    _, r = self.anagrams2.get_anagrams("repudiation")
    self.assertEqual(r, ['repudiation'])

    _, r = self.anagrams2.get_anagrams("repudiations")
    self.assertEqual(r, ['repudiations'])

    _, r = self.anagrams2.get_anagrams("repugnant")
    self.assertEqual(r, ['repugnant'])

    _, r = self.anagrams2.get_anagrams("repulse")
    self.assertEqual(r, ['repulse'])

    _, r = self.anagrams2.get_anagrams("repulsed")
    self.assertEqual(r, ['preludes', 'repulsed'])

    _, r = self.anagrams2.get_anagrams("repulses")
    self.assertEqual(r, ['repulses'])

    _, r = self.anagrams2.get_anagrams("repulsing")
    self.assertEqual(r, ['repulsing'])

    _, r = self.anagrams2.get_anagrams("repulsion")
    self.assertEqual(r, ['repulsion'])

    _, r = self.anagrams2.get_anagrams("repulsions")
    self.assertEqual(r, ['repulsions'])

    _, r = self.anagrams2.get_anagrams("repulsive")
    self.assertEqual(r, ['repulsive'])

    _, r = self.anagrams2.get_anagrams("reputable")
    self.assertEqual(r, ['reputable'])

    _, r = self.anagrams2.get_anagrams("reputably")
    self.assertEqual(r, ['reputably'])

    _, r = self.anagrams2.get_anagrams("reputation")
    self.assertEqual(r, ['reputation'])

    _, r = self.anagrams2.get_anagrams("reputations")
    self.assertEqual(r, ['reputations'])

    _, r = self.anagrams2.get_anagrams("repute")
    self.assertEqual(r, ['repute'])

    _, r = self.anagrams2.get_anagrams("reputed")
    self.assertEqual(r, ['reputed'])

    _, r = self.anagrams2.get_anagrams("reputedly")
    self.assertEqual(r, ['reputedly'])

    _, r = self.anagrams2.get_anagrams("reputes")
    self.assertEqual(r, ['reputes'])

    _, r = self.anagrams2.get_anagrams("request")
    self.assertEqual(r, ['quester', 'request'])

    _, r = self.anagrams2.get_anagrams("requested")
    self.assertEqual(r, ['requested'])

    _, r = self.anagrams2.get_anagrams("requester")
    self.assertEqual(r, ['requester'])

    _, r = self.anagrams2.get_anagrams("requesters")
    self.assertEqual(r, ['requesters'])

    _, r = self.anagrams2.get_anagrams("requesting")
    self.assertEqual(r, ['requesting'])

    _, r = self.anagrams2.get_anagrams("requests")
    self.assertEqual(r, ['questers', 'requests'])

    _, r = self.anagrams2.get_anagrams("require")
    self.assertEqual(r, ['require'])

    _, r = self.anagrams2.get_anagrams("required")
    self.assertEqual(r, ['required'])

    _, r = self.anagrams2.get_anagrams("requirement")
    self.assertEqual(r, ['requirement'])

    _, r = self.anagrams2.get_anagrams("requirements")
    self.assertEqual(r, ['requirements'])

    _, r = self.anagrams2.get_anagrams("requires")
    self.assertEqual(r, ['requires'])

    _, r = self.anagrams2.get_anagrams("requiring")
    self.assertEqual(r, ['requiring'])

    _, r = self.anagrams2.get_anagrams("requisite")
    self.assertEqual(r, ['requisite'])

    _, r = self.anagrams2.get_anagrams("requisites")
    self.assertEqual(r, ['requisites'])

    _, r = self.anagrams2.get_anagrams("requisition")
    self.assertEqual(r, ['requisition'])

    _, r = self.anagrams2.get_anagrams("requisitioned")
    self.assertEqual(r, ['requisitioned'])

    _, r = self.anagrams2.get_anagrams("requisitioning")
    self.assertEqual(r, ['requisitioning'])

    _, r = self.anagrams2.get_anagrams("requisitions")
    self.assertEqual(r, ['requisitions'])

    _, r = self.anagrams2.get_anagrams("reread")
    self.assertEqual(r, ['dearer', 'reader', 'reared', 'reread'])

    _, r = self.anagrams2.get_anagrams("reregister")
    self.assertEqual(r, ['reregister'])

    _, r = self.anagrams2.get_anagrams("reroute")
    self.assertEqual(r, ['reroute'])

    _, r = self.anagrams2.get_anagrams("rerouted")
    self.assertEqual(r, ['rerouted'])

    _, r = self.anagrams2.get_anagrams("reroutes")
    self.assertEqual(r, ['reroutes'])

    _, r = self.anagrams2.get_anagrams("rerouting")
    self.assertEqual(r, ['rerouting'])

    _, r = self.anagrams2.get_anagrams("rerun")
    self.assertEqual(r, ['rerun'])

    _, r = self.anagrams2.get_anagrams("reruns")
    self.assertEqual(r, ['reruns'])

    _, r = self.anagrams2.get_anagrams("reschedule")
    self.assertEqual(r, ['reschedule'])

    _, r = self.anagrams2.get_anagrams("rescind")
    self.assertEqual(r, ['cinders', 'discern', 'rescind'])

    _, r = self.anagrams2.get_anagrams("rescue")
    self.assertEqual(r, ['rescue', 'secure'])

    _, r = self.anagrams2.get_anagrams("rescued")
    self.assertEqual(r, ['reduces', 'rescued', 'secured', 'seducer'])

    _, r = self.anagrams2.get_anagrams("rescuer")
    self.assertEqual(r, ['recurse', 'rescuer'])

    _, r = self.anagrams2.get_anagrams("rescuers")
    self.assertEqual(r, ['recurses', 'rescuers'])

    _, r = self.anagrams2.get_anagrams("rescues")
    self.assertEqual(r, ['rescues', 'secures'])

    _, r = self.anagrams2.get_anagrams("rescuing")
    self.assertEqual(r, ['rescuing', 'securing'])

    _, r = self.anagrams2.get_anagrams("research")
    self.assertEqual(r, ['research', 'searcher'])

    _, r = self.anagrams2.get_anagrams("researched")
    self.assertEqual(r, ['researched'])

    _, r = self.anagrams2.get_anagrams("researcher")
    self.assertEqual(r, ['researcher'])

    _, r = self.anagrams2.get_anagrams("researchers")
    self.assertEqual(r, ['researchers'])

    _, r = self.anagrams2.get_anagrams("researches")
    self.assertEqual(r, ['researches'])

    _, r = self.anagrams2.get_anagrams("researching")
    self.assertEqual(r, ['researching'])

    _, r = self.anagrams2.get_anagrams("reselect")
    self.assertEqual(r, ['reelects', 'reselect'])

    _, r = self.anagrams2.get_anagrams("reselected")
    self.assertEqual(r, ['reselected'])

    _, r = self.anagrams2.get_anagrams("reselecting")
    self.assertEqual(r, ['reselecting'])

    _, r = self.anagrams2.get_anagrams("reselects")
    self.assertEqual(r, ['reselects'])

    _, r = self.anagrams2.get_anagrams("resell")
    self.assertEqual(r, ['resell', 'seller'])

    _, r = self.anagrams2.get_anagrams("reselling")
    self.assertEqual(r, ['reselling'])

    _, r = self.anagrams2.get_anagrams("resemblance")
    self.assertEqual(r, ['resemblance'])

    _, r = self.anagrams2.get_anagrams("resemblances")
    self.assertEqual(r, ['resemblances'])

    _, r = self.anagrams2.get_anagrams("resemble")
    self.assertEqual(r, ['resemble'])

    _, r = self.anagrams2.get_anagrams("resembled")
    self.assertEqual(r, ['resembled'])

    _, r = self.anagrams2.get_anagrams("resembles")
    self.assertEqual(r, ['resembles'])

    _, r = self.anagrams2.get_anagrams("resembling")
    self.assertEqual(r, ['resembling'])

    _, r = self.anagrams2.get_anagrams("resent")
    self.assertEqual(r, ['enters', 'ernest', 'nester', 'resent', 'tenser'])

    _, r = self.anagrams2.get_anagrams("resented")
    self.assertEqual(r, ['resented'])

    _, r = self.anagrams2.get_anagrams("resentful")
    self.assertEqual(r, ['resentful'])

    _, r = self.anagrams2.get_anagrams("resentfully")
    self.assertEqual(r, ['resentfully'])

    _, r = self.anagrams2.get_anagrams("resenting")
    self.assertEqual(r, ['resenting'])

    _, r = self.anagrams2.get_anagrams("resentment")
    self.assertEqual(r, ['resentment'])

    _, r = self.anagrams2.get_anagrams("resents")
    self.assertEqual(r, ['resents'])

    _, r = self.anagrams2.get_anagrams("reserpine")
    self.assertEqual(r, ['reserpine'])

    _, r = self.anagrams2.get_anagrams("reservation")
    self.assertEqual(r, ['reservation'])

    _, r = self.anagrams2.get_anagrams("reservations")
    self.assertEqual(r, ['reservations'])

    _, r = self.anagrams2.get_anagrams("reserve")
    self.assertEqual(r, ['reserve', 'reveres', 'reverse', 'severer'])

    _, r = self.anagrams2.get_anagrams("reserved")
    self.assertEqual(r, ['reserved', 'reversed'])

    _, r = self.anagrams2.get_anagrams("reserver")
    self.assertEqual(r, ['reserver', 'reverser'])

    _, r = self.anagrams2.get_anagrams("reserves")
    self.assertEqual(r, ['reserves', 'reverses'])

    _, r = self.anagrams2.get_anagrams("reserving")
    self.assertEqual(r, ['reserving', 'reversing'])

    _, r = self.anagrams2.get_anagrams("reservoir")
    self.assertEqual(r, ['reservoir'])

    _, r = self.anagrams2.get_anagrams("reservoirs")
    self.assertEqual(r, ['reservoirs'])

    _, r = self.anagrams2.get_anagrams("reset")
    self.assertEqual(r, ['reset', 'steer', 'trees'])

    _, r = self.anagrams2.get_anagrams("resets")
    self.assertEqual(r, ['resets', 'steers'])

    _, r = self.anagrams2.get_anagrams("resetting")
    self.assertEqual(r, ['resetting'])

    _, r = self.anagrams2.get_anagrams("resettings")
    self.assertEqual(r, ['resettings'])

    _, r = self.anagrams2.get_anagrams("reside")
    self.assertEqual(r, ['desire', 'reside'])

    _, r = self.anagrams2.get_anagrams("resided")
    self.assertEqual(r, ['desired', 'resided'])

    _, r = self.anagrams2.get_anagrams("residence")
    self.assertEqual(r, ['residence'])

    _, r = self.anagrams2.get_anagrams("residences")
    self.assertEqual(r, ['residences'])

    _, r = self.anagrams2.get_anagrams("resident")
    self.assertEqual(r, ['inserted', 'resident'])

    _, r = self.anagrams2.get_anagrams("residential")
    self.assertEqual(r, ['residential'])

    _, r = self.anagrams2.get_anagrams("residentially")
    self.assertEqual(r, ['residentially'])

    _, r = self.anagrams2.get_anagrams("residents")
    self.assertEqual(r, ['dissenter', 'residents'])

    _, r = self.anagrams2.get_anagrams("resides")
    self.assertEqual(r, ['desires', 'resides'])

    _, r = self.anagrams2.get_anagrams("residing")
    self.assertEqual(r, ['desiring', 'residing', 'ringside'])

    _, r = self.anagrams2.get_anagrams("residual")
    self.assertEqual(r, ['residual'])

    _, r = self.anagrams2.get_anagrams("residue")
    self.assertEqual(r, ['residue'])

    _, r = self.anagrams2.get_anagrams("residues")
    self.assertEqual(r, ['residues'])

    _, r = self.anagrams2.get_anagrams("resign")
    self.assertEqual(r, ['reigns', 'resign', 'signer', 'singer'])

    _, r = self.anagrams2.get_anagrams("resignation")
    self.assertEqual(r, ['resignation'])

    _, r = self.anagrams2.get_anagrams("resignations")
    self.assertEqual(r, ['resignations'])

    _, r = self.anagrams2.get_anagrams("resigned")
    self.assertEqual(r, ['designer', 'redesign', 'resigned'])

    _, r = self.anagrams2.get_anagrams("resigning")
    self.assertEqual(r, ['resigning'])

    _, r = self.anagrams2.get_anagrams("resigns")
    self.assertEqual(r, ['resigns', 'signers', 'singers'])

    _, r = self.anagrams2.get_anagrams("resilient")
    self.assertEqual(r, ['resilient'])

    _, r = self.anagrams2.get_anagrams("resin")
    self.assertEqual(r, ['reins', 'resin', 'rinse', 'risen', 'siren'])

    _, r = self.anagrams2.get_anagrams("resins")
    self.assertEqual(r, ['resins', 'rinses', 'sirens'])

    _, r = self.anagrams2.get_anagrams("resist")
    self.assertEqual(r, ['resist', 'sister'])

    _, r = self.anagrams2.get_anagrams("resistable")
    self.assertEqual(r, ['resistable'])

    _, r = self.anagrams2.get_anagrams("resistance")
    self.assertEqual(r, ['resistance'])

    _, r = self.anagrams2.get_anagrams("resistances")
    self.assertEqual(r, ['resistances'])

    _, r = self.anagrams2.get_anagrams("resistant")
    self.assertEqual(r, ['resistant'])

    _, r = self.anagrams2.get_anagrams("resistantly")
    self.assertEqual(r, ['resistantly'])

    _, r = self.anagrams2.get_anagrams("resisted")
    self.assertEqual(r, ['resisted'])

    _, r = self.anagrams2.get_anagrams("resistible")
    self.assertEqual(r, ['resistible'])

    _, r = self.anagrams2.get_anagrams("resisting")
    self.assertEqual(r, ['resisting'])

    _, r = self.anagrams2.get_anagrams("resistive")
    self.assertEqual(r, ['resistive'])

    _, r = self.anagrams2.get_anagrams("resistivity")
    self.assertEqual(r, ['resistivity'])

    _, r = self.anagrams2.get_anagrams("resistor")
    self.assertEqual(r, ['resistor', 'sorriest'])

    _, r = self.anagrams2.get_anagrams("resistors")
    self.assertEqual(r, ['resistors'])

    _, r = self.anagrams2.get_anagrams("resists")
    self.assertEqual(r, ['resists', 'sisters'])

    _, r = self.anagrams2.get_anagrams("resolute")
    self.assertEqual(r, ['resolute'])

    _, r = self.anagrams2.get_anagrams("resolutely")
    self.assertEqual(r, ['resolutely'])

    _, r = self.anagrams2.get_anagrams("resoluteness")
    self.assertEqual(r, ['resoluteness'])

    _, r = self.anagrams2.get_anagrams("resolution")
    self.assertEqual(r, ['resolution'])

    _, r = self.anagrams2.get_anagrams("resolutions")
    self.assertEqual(r, ['resolutions'])

    _, r = self.anagrams2.get_anagrams("resolvable")
    self.assertEqual(r, ['resolvable'])

    _, r = self.anagrams2.get_anagrams("resolve")
    self.assertEqual(r, ['resolve'])

    _, r = self.anagrams2.get_anagrams("resolved")
    self.assertEqual(r, ['resolved'])

    _, r = self.anagrams2.get_anagrams("resolver")
    self.assertEqual(r, ['resolver'])

    _, r = self.anagrams2.get_anagrams("resolvers")
    self.assertEqual(r, ['resolvers'])

    _, r = self.anagrams2.get_anagrams("resolves")
    self.assertEqual(r, ['resolves'])

    _, r = self.anagrams2.get_anagrams("resolving")
    self.assertEqual(r, ['resolving'])

    _, r = self.anagrams2.get_anagrams("resonance")
    self.assertEqual(r, ['resonance'])

    _, r = self.anagrams2.get_anagrams("resonances")
    self.assertEqual(r, ['resonances'])

    _, r = self.anagrams2.get_anagrams("resonant")
    self.assertEqual(r, ['resonant'])

    _, r = self.anagrams2.get_anagrams("resonate")
    self.assertEqual(r, ['resonate'])

    _, r = self.anagrams2.get_anagrams("resort")
    self.assertEqual(r, ['resort', 'roster', 'sorter'])

    _, r = self.anagrams2.get_anagrams("resorted")
    self.assertEqual(r, ['resorted', 'restored'])

    _, r = self.anagrams2.get_anagrams("resorting")
    self.assertEqual(r, ['resorting', 'restoring'])

    _, r = self.anagrams2.get_anagrams("resorts")
    self.assertEqual(r, ['resorts', 'sorters'])

    _, r = self.anagrams2.get_anagrams("resound")
    self.assertEqual(r, ['resound', 'sounder'])

    _, r = self.anagrams2.get_anagrams("resounding")
    self.assertEqual(r, ['resounding'])

    _, r = self.anagrams2.get_anagrams("resounds")
    self.assertEqual(r, ['resounds'])

    _, r = self.anagrams2.get_anagrams("resource")
    self.assertEqual(r, ['recourse', 'resource'])

    _, r = self.anagrams2.get_anagrams("resourceful")
    self.assertEqual(r, ['resourceful'])

    _, r = self.anagrams2.get_anagrams("resourcefully")
    self.assertEqual(r, ['resourcefully'])

    _, r = self.anagrams2.get_anagrams("resourcefulness")
    self.assertEqual(r, ['resourcefulness'])

    _, r = self.anagrams2.get_anagrams("resources")
    self.assertEqual(r, ['resources'])

    _, r = self.anagrams2.get_anagrams("respect")
    self.assertEqual(r, ['respect', 'scepter', 'specter'])

    _, r = self.anagrams2.get_anagrams("respectability")
    self.assertEqual(r, ['respectability'])

    _, r = self.anagrams2.get_anagrams("respectable")
    self.assertEqual(r, ['respectable'])

    _, r = self.anagrams2.get_anagrams("respectably")
    self.assertEqual(r, ['respectably'])

    _, r = self.anagrams2.get_anagrams("respected")
    self.assertEqual(r, ['respected'])

    _, r = self.anagrams2.get_anagrams("respecter")
    self.assertEqual(r, ['respecter'])

    _, r = self.anagrams2.get_anagrams("respectful")
    self.assertEqual(r, ['respectful'])

    _, r = self.anagrams2.get_anagrams("respectfully")
    self.assertEqual(r, ['respectfully'])

    _, r = self.anagrams2.get_anagrams("respectfulness")
    self.assertEqual(r, ['respectfulness'])

    _, r = self.anagrams2.get_anagrams("respecting")
    self.assertEqual(r, ['respecting'])

    _, r = self.anagrams2.get_anagrams("respective")
    self.assertEqual(r, ['respective'])

    _, r = self.anagrams2.get_anagrams("respectively")
    self.assertEqual(r, ['respectively'])

    _, r = self.anagrams2.get_anagrams("respects")
    self.assertEqual(r, ['respects', 'scepters', 'specters'])

    _, r = self.anagrams2.get_anagrams("respiration")
    self.assertEqual(r, ['respiration'])

    _, r = self.anagrams2.get_anagrams("respirator")
    self.assertEqual(r, ['respirator'])

    _, r = self.anagrams2.get_anagrams("respiratory")
    self.assertEqual(r, ['respiratory'])

    _, r = self.anagrams2.get_anagrams("respite")
    self.assertEqual(r, ['respite'])

    _, r = self.anagrams2.get_anagrams("resplendent")
    self.assertEqual(r, ['resplendent'])

    _, r = self.anagrams2.get_anagrams("resplendently")
    self.assertEqual(r, ['resplendently'])

    _, r = self.anagrams2.get_anagrams("respond")
    self.assertEqual(r, ['ponders', 'respond'])

    _, r = self.anagrams2.get_anagrams("responded")
    self.assertEqual(r, ['responded'])

    _, r = self.anagrams2.get_anagrams("respondent")
    self.assertEqual(r, ['respondent'])

    _, r = self.anagrams2.get_anagrams("respondents")
    self.assertEqual(r, ['respondents'])

    _, r = self.anagrams2.get_anagrams("responder")
    self.assertEqual(r, ['responder'])

    _, r = self.anagrams2.get_anagrams("responding")
    self.assertEqual(r, ['responding'])

    _, r = self.anagrams2.get_anagrams("responds")
    self.assertEqual(r, ['responds'])

    _, r = self.anagrams2.get_anagrams("response")
    self.assertEqual(r, ['response'])

    _, r = self.anagrams2.get_anagrams("responses")
    self.assertEqual(r, ['responses'])

    _, r = self.anagrams2.get_anagrams("responsibilities")
    self.assertEqual(r, ['responsibilities'])

    _, r = self.anagrams2.get_anagrams("responsibility")
    self.assertEqual(r, ['responsibility'])

    _, r = self.anagrams2.get_anagrams("responsible")
    self.assertEqual(r, ['responsible'])

    _, r = self.anagrams2.get_anagrams("responsibleness")
    self.assertEqual(r, ['responsibleness'])

    _, r = self.anagrams2.get_anagrams("responsibly")
    self.assertEqual(r, ['responsibly'])

    _, r = self.anagrams2.get_anagrams("responsive")
    self.assertEqual(r, ['responsive'])

    _, r = self.anagrams2.get_anagrams("responsively")
    self.assertEqual(r, ['responsively'])

    _, r = self.anagrams2.get_anagrams("responsiveness")
    self.assertEqual(r, ['responsiveness'])

    _, r = self.anagrams2.get_anagrams("rest")
    self.assertEqual(r, ['rest'])

    _, r = self.anagrams2.get_anagrams("restart")
    self.assertEqual(r, ['restart', 'starter'])

    _, r = self.anagrams2.get_anagrams("restarted")
    self.assertEqual(r, ['restarted'])

    _, r = self.anagrams2.get_anagrams("restarting")
    self.assertEqual(r, ['restarting'])

    _, r = self.anagrams2.get_anagrams("restarts")
    self.assertEqual(r, ['restarts', 'starters'])

    _, r = self.anagrams2.get_anagrams("restate")
    self.assertEqual(r, ['restate'])

    _, r = self.anagrams2.get_anagrams("restated")
    self.assertEqual(r, ['restated'])

    _, r = self.anagrams2.get_anagrams("restatement")
    self.assertEqual(r, ['restatement'])

    _, r = self.anagrams2.get_anagrams("restates")
    self.assertEqual(r, ['restates'])

    _, r = self.anagrams2.get_anagrams("restating")
    self.assertEqual(r, ['restating'])

    _, r = self.anagrams2.get_anagrams("restaurant")
    self.assertEqual(r, ['restaurant'])

    _, r = self.anagrams2.get_anagrams("restaurants")
    self.assertEqual(r, ['restaurants'])

    _, r = self.anagrams2.get_anagrams("restaurateur")
    self.assertEqual(r, ['restaurateur'])

    _, r = self.anagrams2.get_anagrams("rested")
    self.assertEqual(r, ['desert', 'rested'])

    _, r = self.anagrams2.get_anagrams("restful")
    self.assertEqual(r, ['restful'])

    _, r = self.anagrams2.get_anagrams("restfully")
    self.assertEqual(r, ['restfully'])

    _, r = self.anagrams2.get_anagrams("restfulness")
    self.assertEqual(r, ['restfulness'])

    _, r = self.anagrams2.get_anagrams("resting")
    self.assertEqual(r, ['resting'])

    _, r = self.anagrams2.get_anagrams("restitution")
    self.assertEqual(r, ['restitution'])

    _, r = self.anagrams2.get_anagrams("restive")
    self.assertEqual(r, ['restive'])

    _, r = self.anagrams2.get_anagrams("restless")
    self.assertEqual(r, ['restless'])

    _, r = self.anagrams2.get_anagrams("restlessly")
    self.assertEqual(r, ['restlessly'])

    _, r = self.anagrams2.get_anagrams("restlessness")
    self.assertEqual(r, ['restlessness'])

    _, r = self.anagrams2.get_anagrams("restoration")
    self.assertEqual(r, ['restoration'])

    _, r = self.anagrams2.get_anagrams("restorations")
    self.assertEqual(r, ['restorations'])

    _, r = self.anagrams2.get_anagrams("restore")
    self.assertEqual(r, ['restore'])

    _, r = self.anagrams2.get_anagrams("restored")
    self.assertEqual(r, ['resorted', 'restored'])

    _, r = self.anagrams2.get_anagrams("restorer")
    self.assertEqual(r, ['restorer'])

    _, r = self.anagrams2.get_anagrams("restorers")
    self.assertEqual(r, ['restorers'])

    _, r = self.anagrams2.get_anagrams("restores")
    self.assertEqual(r, ['restores'])

    _, r = self.anagrams2.get_anagrams("restoring")
    self.assertEqual(r, ['resorting', 'restoring'])

    _, r = self.anagrams2.get_anagrams("restrain")
    self.assertEqual(r, ['restrain', 'retrains', 'strainer', 'terrains', 'trainers'])

    _, r = self.anagrams2.get_anagrams("restrained")
    self.assertEqual(r, ['restrained'])

    _, r = self.anagrams2.get_anagrams("restrainer")
    self.assertEqual(r, ['restrainer'])

    _, r = self.anagrams2.get_anagrams("restrainers")
    self.assertEqual(r, ['restrainers'])

    _, r = self.anagrams2.get_anagrams("restraining")
    self.assertEqual(r, ['restraining'])

    _, r = self.anagrams2.get_anagrams("restrains")
    self.assertEqual(r, ['restrains', 'strainers'])

    _, r = self.anagrams2.get_anagrams("restraint")
    self.assertEqual(r, ['restraint'])

    _, r = self.anagrams2.get_anagrams("restraints")
    self.assertEqual(r, ['restraints'])

    _, r = self.anagrams2.get_anagrams("restrict")
    self.assertEqual(r, ['restrict', 'stricter'])

    _, r = self.anagrams2.get_anagrams("restricted")
    self.assertEqual(r, ['restricted'])

    _, r = self.anagrams2.get_anagrams("restricting")
    self.assertEqual(r, ['restricting'])

    _, r = self.anagrams2.get_anagrams("restriction")
    self.assertEqual(r, ['restriction'])

    _, r = self.anagrams2.get_anagrams("restrictions")
    self.assertEqual(r, ['restrictions'])

    _, r = self.anagrams2.get_anagrams("restrictive")
    self.assertEqual(r, ['restrictive'])

    _, r = self.anagrams2.get_anagrams("restrictively")
    self.assertEqual(r, ['restrictively'])

    _, r = self.anagrams2.get_anagrams("restricts")
    self.assertEqual(r, ['restricts'])

    _, r = self.anagrams2.get_anagrams("restroom")
    self.assertEqual(r, ['restroom'])

    _, r = self.anagrams2.get_anagrams("restructure")
    self.assertEqual(r, ['restructure'])

    _, r = self.anagrams2.get_anagrams("restructured")
    self.assertEqual(r, ['restructured'])

    _, r = self.anagrams2.get_anagrams("restructures")
    self.assertEqual(r, ['restructures'])

    _, r = self.anagrams2.get_anagrams("restructuring")
    self.assertEqual(r, ['restructuring'])

    _, r = self.anagrams2.get_anagrams("rests")
    self.assertEqual(r, ['rests', 'tress'])

    _, r = self.anagrams2.get_anagrams("result")
    self.assertEqual(r, ['luster', 'result', 'rustle', 'ulster'])

    _, r = self.anagrams2.get_anagrams("resultant")
    self.assertEqual(r, ['resultant'])

    _, r = self.anagrams2.get_anagrams("resultantly")
    self.assertEqual(r, ['resultantly'])

    _, r = self.anagrams2.get_anagrams("resultants")
    self.assertEqual(r, ['resultants'])

    _, r = self.anagrams2.get_anagrams("resulted")
    self.assertEqual(r, ['resulted'])

    _, r = self.anagrams2.get_anagrams("resulting")
    self.assertEqual(r, ['resulting'])

    _, r = self.anagrams2.get_anagrams("results")
    self.assertEqual(r, ['results'])

    _, r = self.anagrams2.get_anagrams("resumable")
    self.assertEqual(r, ['resumable'])

    _, r = self.anagrams2.get_anagrams("resume")
    self.assertEqual(r, ['resume'])

    _, r = self.anagrams2.get_anagrams("resumed")
    self.assertEqual(r, ['resumed'])

    _, r = self.anagrams2.get_anagrams("resumes")
    self.assertEqual(r, ['resumes'])

    _, r = self.anagrams2.get_anagrams("resuming")
    self.assertEqual(r, ['resuming'])

    _, r = self.anagrams2.get_anagrams("resumption")
    self.assertEqual(r, ['resumption'])

    _, r = self.anagrams2.get_anagrams("resumptions")
    self.assertEqual(r, ['resumptions'])

    _, r = self.anagrams2.get_anagrams("resurgent")
    self.assertEqual(r, ['resurgent'])

    _, r = self.anagrams2.get_anagrams("resurrect")
    self.assertEqual(r, ['resurrect'])

    _, r = self.anagrams2.get_anagrams("resurrected")
    self.assertEqual(r, ['resurrected'])

    _, r = self.anagrams2.get_anagrams("resurrecting")
    self.assertEqual(r, ['resurrecting'])

    _, r = self.anagrams2.get_anagrams("resurrection")
    self.assertEqual(r, ['resurrection'])

    _, r = self.anagrams2.get_anagrams("resurrections")
    self.assertEqual(r, ['resurrections'])

    _, r = self.anagrams2.get_anagrams("resurrector")
    self.assertEqual(r, ['resurrector'])

    _, r = self.anagrams2.get_anagrams("resurrectors")
    self.assertEqual(r, ['resurrectors'])

    _, r = self.anagrams2.get_anagrams("resurrects")
    self.assertEqual(r, ['resurrects'])

    _, r = self.anagrams2.get_anagrams("resuscitate")
    self.assertEqual(r, ['resuscitate'])

    _, r = self.anagrams2.get_anagrams("resynchronization")
    self.assertEqual(r, ['resynchronization'])

    _, r = self.anagrams2.get_anagrams("resynchronize")
    self.assertEqual(r, ['resynchronize'])

    _, r = self.anagrams2.get_anagrams("resynchronized")
    self.assertEqual(r, ['resynchronized'])

    _, r = self.anagrams2.get_anagrams("resynchronizing")
    self.assertEqual(r, ['resynchronizing'])

    _, r = self.anagrams2.get_anagrams("retail")
    self.assertEqual(r, ['retail'])

    _, r = self.anagrams2.get_anagrams("retailer")
    self.assertEqual(r, ['retailer'])

    _, r = self.anagrams2.get_anagrams("retailers")
    self.assertEqual(r, ['retailers'])

    _, r = self.anagrams2.get_anagrams("retailing")
    self.assertEqual(r, ['retailing'])

    _, r = self.anagrams2.get_anagrams("retain")
    self.assertEqual(r, ['retain', 'retina'])

    _, r = self.anagrams2.get_anagrams("retained")
    self.assertEqual(r, ['retained'])

    _, r = self.anagrams2.get_anagrams("retainer")
    self.assertEqual(r, ['retainer'])

    _, r = self.anagrams2.get_anagrams("retainers")
    self.assertEqual(r, ['retainers'])

    _, r = self.anagrams2.get_anagrams("retaining")
    self.assertEqual(r, ['retaining'])

    _, r = self.anagrams2.get_anagrams("retainment")
    self.assertEqual(r, ['retainment'])

    _, r = self.anagrams2.get_anagrams("retains")
    self.assertEqual(r, ['nastier', 'retains', 'retinas'])

    _, r = self.anagrams2.get_anagrams("retaliate")
    self.assertEqual(r, ['retaliate'])

    _, r = self.anagrams2.get_anagrams("retaliation")
    self.assertEqual(r, ['retaliation'])

    _, r = self.anagrams2.get_anagrams("retaliatory")
    self.assertEqual(r, ['retaliatory'])

    _, r = self.anagrams2.get_anagrams("retard")
    self.assertEqual(r, ['darter', 'retard', 'trader'])

    _, r = self.anagrams2.get_anagrams("retarded")
    self.assertEqual(r, ['retarded'])

    _, r = self.anagrams2.get_anagrams("retarder")
    self.assertEqual(r, ['retarder'])

    _, r = self.anagrams2.get_anagrams("retarding")
    self.assertEqual(r, ['retarding'])

    _, r = self.anagrams2.get_anagrams("retch")
    self.assertEqual(r, ['retch'])

    _, r = self.anagrams2.get_anagrams("retention")
    self.assertEqual(r, ['retention'])

    _, r = self.anagrams2.get_anagrams("retentions")
    self.assertEqual(r, ['retentions'])

    _, r = self.anagrams2.get_anagrams("retentive")
    self.assertEqual(r, ['retentive'])

    _, r = self.anagrams2.get_anagrams("retentively")
    self.assertEqual(r, ['retentively'])

    _, r = self.anagrams2.get_anagrams("retentiveness")
    self.assertEqual(r, ['retentiveness'])

    _, r = self.anagrams2.get_anagrams("reticle")
    self.assertEqual(r, ['reticle'])

    _, r = self.anagrams2.get_anagrams("reticles")
    self.assertEqual(r, ['reticles'])

    _, r = self.anagrams2.get_anagrams("reticular")
    self.assertEqual(r, ['reticular'])

    _, r = self.anagrams2.get_anagrams("reticulate")
    self.assertEqual(r, ['reticulate'])

    _, r = self.anagrams2.get_anagrams("reticulated")
    self.assertEqual(r, ['reticulated'])

    _, r = self.anagrams2.get_anagrams("reticulately")
    self.assertEqual(r, ['reticulately'])

    _, r = self.anagrams2.get_anagrams("reticulates")
    self.assertEqual(r, ['reticulates'])

    _, r = self.anagrams2.get_anagrams("reticulating")
    self.assertEqual(r, ['reticulating'])

    _, r = self.anagrams2.get_anagrams("reticulation")
    self.assertEqual(r, ['reticulation'])

    _, r = self.anagrams2.get_anagrams("retina")
    self.assertEqual(r, ['retain', 'retina'])

    _, r = self.anagrams2.get_anagrams("retinal")
    self.assertEqual(r, ['latrine', 'reliant', 'retinal'])

    _, r = self.anagrams2.get_anagrams("retinas")
    self.assertEqual(r, ['nastier', 'retains', 'retinas'])

    _, r = self.anagrams2.get_anagrams("retinue")
    self.assertEqual(r, ['retinue', 'reunite'])

    _, r = self.anagrams2.get_anagrams("retire")
    self.assertEqual(r, ['retire'])

    _, r = self.anagrams2.get_anagrams("retired")
    self.assertEqual(r, ['retired', 'retried'])

    _, r = self.anagrams2.get_anagrams("retiree")
    self.assertEqual(r, ['retiree'])

    _, r = self.anagrams2.get_anagrams("retirement")
    self.assertEqual(r, ['retirement'])

    _, r = self.anagrams2.get_anagrams("retirements")
    self.assertEqual(r, ['retirements'])

    _, r = self.anagrams2.get_anagrams("retires")
    self.assertEqual(r, ['retires', 'retries'])

    _, r = self.anagrams2.get_anagrams("retiring")
    self.assertEqual(r, ['retiring'])

    _, r = self.anagrams2.get_anagrams("retort")
    self.assertEqual(r, ['retort'])

    _, r = self.anagrams2.get_anagrams("retorted")
    self.assertEqual(r, ['retorted'])

    _, r = self.anagrams2.get_anagrams("retorts")
    self.assertEqual(r, ['retorts'])

    _, r = self.anagrams2.get_anagrams("retrace")
    self.assertEqual(r, ['caterer', 'retrace', 'terrace'])

    _, r = self.anagrams2.get_anagrams("retraced")
    self.assertEqual(r, ['retraced', 'terraced'])

    _, r = self.anagrams2.get_anagrams("retraces")
    self.assertEqual(r, ['retraces', 'terraces'])

    _, r = self.anagrams2.get_anagrams("retracing")
    self.assertEqual(r, ['retracing'])

    _, r = self.anagrams2.get_anagrams("retract")
    self.assertEqual(r, ['retract'])

    _, r = self.anagrams2.get_anagrams("retracted")
    self.assertEqual(r, ['retracted'])

    _, r = self.anagrams2.get_anagrams("retracting")
    self.assertEqual(r, ['retracting'])

    _, r = self.anagrams2.get_anagrams("retraction")
    self.assertEqual(r, ['retraction'])

    _, r = self.anagrams2.get_anagrams("retractions")
    self.assertEqual(r, ['retractions'])

    _, r = self.anagrams2.get_anagrams("retracts")
    self.assertEqual(r, ['retracts'])

    _, r = self.anagrams2.get_anagrams("retrain")
    self.assertEqual(r, ['retrain', 'terrain', 'trainer'])

    _, r = self.anagrams2.get_anagrams("retrained")
    self.assertEqual(r, ['retrained'])

    _, r = self.anagrams2.get_anagrams("retraining")
    self.assertEqual(r, ['retraining'])

    _, r = self.anagrams2.get_anagrams("retrains")
    self.assertEqual(r, ['restrain', 'retrains', 'strainer', 'terrains', 'trainers'])

    _, r = self.anagrams2.get_anagrams("retranslate")
    self.assertEqual(r, ['retranslate'])

    _, r = self.anagrams2.get_anagrams("retranslated")
    self.assertEqual(r, ['retranslated'])

    _, r = self.anagrams2.get_anagrams("retransmission")
    self.assertEqual(r, ['retransmission'])

    _, r = self.anagrams2.get_anagrams("retransmissions")
    self.assertEqual(r, ['retransmissions'])

    _, r = self.anagrams2.get_anagrams("retransmit")
    self.assertEqual(r, ['retransmit'])

    _, r = self.anagrams2.get_anagrams("retransmits")
    self.assertEqual(r, ['retransmits'])

    _, r = self.anagrams2.get_anagrams("retransmitted")
    self.assertEqual(r, ['retransmitted'])

    _, r = self.anagrams2.get_anagrams("retransmitting")
    self.assertEqual(r, ['retransmitting'])

    _, r = self.anagrams2.get_anagrams("retreat")
    self.assertEqual(r, ['retreat'])

    _, r = self.anagrams2.get_anagrams("retreated")
    self.assertEqual(r, ['retreated'])

    _, r = self.anagrams2.get_anagrams("retreating")
    self.assertEqual(r, ['retreating'])

    _, r = self.anagrams2.get_anagrams("retreats")
    self.assertEqual(r, ['retreats'])

    _, r = self.anagrams2.get_anagrams("retribution")
    self.assertEqual(r, ['retribution'])

    _, r = self.anagrams2.get_anagrams("retried")
    self.assertEqual(r, ['retired', 'retried'])

    _, r = self.anagrams2.get_anagrams("retrier")
    self.assertEqual(r, ['retrier', 'terrier'])

    _, r = self.anagrams2.get_anagrams("retriers")
    self.assertEqual(r, ['retriers', 'terriers'])

    _, r = self.anagrams2.get_anagrams("retries")
    self.assertEqual(r, ['retires', 'retries'])

    _, r = self.anagrams2.get_anagrams("retrievable")
    self.assertEqual(r, ['retrievable'])

    _, r = self.anagrams2.get_anagrams("retrieval")
    self.assertEqual(r, ['retrieval'])

    _, r = self.anagrams2.get_anagrams("retrievals")
    self.assertEqual(r, ['retrievals'])

    _, r = self.anagrams2.get_anagrams("retrieve")
    self.assertEqual(r, ['retrieve'])

    _, r = self.anagrams2.get_anagrams("retrieved")
    self.assertEqual(r, ['retrieved'])

    _, r = self.anagrams2.get_anagrams("retriever")
    self.assertEqual(r, ['retriever'])

    _, r = self.anagrams2.get_anagrams("retrievers")
    self.assertEqual(r, ['retrievers'])

    _, r = self.anagrams2.get_anagrams("retrieves")
    self.assertEqual(r, ['retrieves'])

    _, r = self.anagrams2.get_anagrams("retrieving")
    self.assertEqual(r, ['retrieving'])

    _, r = self.anagrams2.get_anagrams("retroactive")
    self.assertEqual(r, ['retroactive'])

    _, r = self.anagrams2.get_anagrams("retroactively")
    self.assertEqual(r, ['retroactively'])

    _, r = self.anagrams2.get_anagrams("retrofit")
    self.assertEqual(r, ['retrofit'])

    _, r = self.anagrams2.get_anagrams("retrofitting")
    self.assertEqual(r, ['retrofitting'])

    _, r = self.anagrams2.get_anagrams("retrograde")
    self.assertEqual(r, ['retrograde'])

    _, r = self.anagrams2.get_anagrams("retrospect")
    self.assertEqual(r, ['retrospect'])

    _, r = self.anagrams2.get_anagrams("retrospection")
    self.assertEqual(r, ['retrospection'])

    _, r = self.anagrams2.get_anagrams("retrospective")
    self.assertEqual(r, ['retrospective'])

    _, r = self.anagrams2.get_anagrams("retry")
    self.assertEqual(r, ['retry'])

    _, r = self.anagrams2.get_anagrams("retrying")
    self.assertEqual(r, ['retrying'])

    _, r = self.anagrams2.get_anagrams("return")
    self.assertEqual(r, ['return', 'turner'])

    _, r = self.anagrams2.get_anagrams("returnable")
    self.assertEqual(r, ['returnable'])

    _, r = self.anagrams2.get_anagrams("returned")
    self.assertEqual(r, ['returned'])

    _, r = self.anagrams2.get_anagrams("returner")
    self.assertEqual(r, ['returner'])

    _, r = self.anagrams2.get_anagrams("returning")
    self.assertEqual(r, ['returning'])

    _, r = self.anagrams2.get_anagrams("returns")
    self.assertEqual(r, ['returns', 'turners'])

    _, r = self.anagrams2.get_anagrams("retype")
    self.assertEqual(r, ['retype'])

    _, r = self.anagrams2.get_anagrams("retyped")
    self.assertEqual(r, ['retyped'])

    _, r = self.anagrams2.get_anagrams("retypes")
    self.assertEqual(r, ['retypes'])

    _, r = self.anagrams2.get_anagrams("retyping")
    self.assertEqual(r, ['retyping'])

    _, r = self.anagrams2.get_anagrams("reub")
    self.assertEqual(r, ['reub', 'rube'])

    _, r = self.anagrams2.get_anagrams("reuben")
    self.assertEqual(r, ['reuben'])

    _, r = self.anagrams2.get_anagrams("reunion")
    self.assertEqual(r, ['reunion'])

    _, r = self.anagrams2.get_anagrams("reunions")
    self.assertEqual(r, ['reunions'])

    _, r = self.anagrams2.get_anagrams("reunite")
    self.assertEqual(r, ['retinue', 'reunite'])

    _, r = self.anagrams2.get_anagrams("reunited")
    self.assertEqual(r, ['reunited'])

    _, r = self.anagrams2.get_anagrams("reuniting")
    self.assertEqual(r, ['reuniting'])

    _, r = self.anagrams2.get_anagrams("reusable")
    self.assertEqual(r, ['reusable'])

    _, r = self.anagrams2.get_anagrams("reuse")
    self.assertEqual(r, ['reuse'])

    _, r = self.anagrams2.get_anagrams("reused")
    self.assertEqual(r, ['reused'])

    _, r = self.anagrams2.get_anagrams("reuses")
    self.assertEqual(r, ['reuses'])

    _, r = self.anagrams2.get_anagrams("reusing")
    self.assertEqual(r, ['reusing'])

    _, r = self.anagrams2.get_anagrams("reuters")
    self.assertEqual(r, ['reuters'])

    _, r = self.anagrams2.get_anagrams("reuther")
    self.assertEqual(r, ['reuther'])

    _, r = self.anagrams2.get_anagrams("revamp")
    self.assertEqual(r, ['revamp'])

    _, r = self.anagrams2.get_anagrams("revamped")
    self.assertEqual(r, ['revamped'])

    _, r = self.anagrams2.get_anagrams("revamping")
    self.assertEqual(r, ['revamping'])

    _, r = self.anagrams2.get_anagrams("revamps")
    self.assertEqual(r, ['revamps'])

    _, r = self.anagrams2.get_anagrams("reveal")
    self.assertEqual(r, ['reveal'])

    _, r = self.anagrams2.get_anagrams("revealed")
    self.assertEqual(r, ['revealed'])

    _, r = self.anagrams2.get_anagrams("revealing")
    self.assertEqual(r, ['revealing'])

    _, r = self.anagrams2.get_anagrams("reveals")
    self.assertEqual(r, ['reveals', 'several'])

    _, r = self.anagrams2.get_anagrams("revel")
    self.assertEqual(r, ['lever', 'revel'])

    _, r = self.anagrams2.get_anagrams("revelation")
    self.assertEqual(r, ['revelation'])

    _, r = self.anagrams2.get_anagrams("revelations")
    self.assertEqual(r, ['revelations'])

    _, r = self.anagrams2.get_anagrams("reveled")
    self.assertEqual(r, ['reveled'])

    _, r = self.anagrams2.get_anagrams("reveler")
    self.assertEqual(r, ['reveler'])

    _, r = self.anagrams2.get_anagrams("reveling")
    self.assertEqual(r, ['reveling'])

    _, r = self.anagrams2.get_anagrams("revelry")
    self.assertEqual(r, ['revelry'])

    _, r = self.anagrams2.get_anagrams("revels")
    self.assertEqual(r, ['levers', 'revels'])

    _, r = self.anagrams2.get_anagrams("revenge")
    self.assertEqual(r, ['revenge'])

    _, r = self.anagrams2.get_anagrams("revenger")
    self.assertEqual(r, ['revenger'])

    _, r = self.anagrams2.get_anagrams("revenue")
    self.assertEqual(r, ['revenue'])

    _, r = self.anagrams2.get_anagrams("revenuers")
    self.assertEqual(r, ['revenuers'])

    _, r = self.anagrams2.get_anagrams("revenues")
    self.assertEqual(r, ['revenues'])

    _, r = self.anagrams2.get_anagrams("reverberate")
    self.assertEqual(r, ['reverberate'])

    _, r = self.anagrams2.get_anagrams("revere")
    self.assertEqual(r, ['revere'])

    _, r = self.anagrams2.get_anagrams("revered")
    self.assertEqual(r, ['revered'])

    _, r = self.anagrams2.get_anagrams("reverence")
    self.assertEqual(r, ['reverence'])

    _, r = self.anagrams2.get_anagrams("reverend")
    self.assertEqual(r, ['reverend'])

    _, r = self.anagrams2.get_anagrams("reverends")
    self.assertEqual(r, ['reverends'])

    _, r = self.anagrams2.get_anagrams("reverent")
    self.assertEqual(r, ['reverent'])

    _, r = self.anagrams2.get_anagrams("reverently")
    self.assertEqual(r, ['reverently'])

    _, r = self.anagrams2.get_anagrams("reveres")
    self.assertEqual(r, ['reserve', 'reveres', 'reverse', 'severer'])

    _, r = self.anagrams2.get_anagrams("reverie")
    self.assertEqual(r, ['reverie'])

    _, r = self.anagrams2.get_anagrams("reverified")
    self.assertEqual(r, ['reverified'])

    _, r = self.anagrams2.get_anagrams("reverifies")
    self.assertEqual(r, ['reverifies'])

    _, r = self.anagrams2.get_anagrams("reverify")
    self.assertEqual(r, ['reverify'])

    _, r = self.anagrams2.get_anagrams("reverifying")
    self.assertEqual(r, ['reverifying'])

    _, r = self.anagrams2.get_anagrams("revering")
    self.assertEqual(r, ['revering'])

    _, r = self.anagrams2.get_anagrams("reversal")
    self.assertEqual(r, ['reversal'])

    _, r = self.anagrams2.get_anagrams("reversals")
    self.assertEqual(r, ['reversals'])

    _, r = self.anagrams2.get_anagrams("reverse")
    self.assertEqual(r, ['reserve', 'reveres', 'reverse', 'severer'])

    _, r = self.anagrams2.get_anagrams("reversed")
    self.assertEqual(r, ['reserved', 'reversed'])

    _, r = self.anagrams2.get_anagrams("reversely")
    self.assertEqual(r, ['reversely'])

    _, r = self.anagrams2.get_anagrams("reverser")
    self.assertEqual(r, ['reserver', 'reverser'])

    _, r = self.anagrams2.get_anagrams("reverses")
    self.assertEqual(r, ['reserves', 'reverses'])

    _, r = self.anagrams2.get_anagrams("reversible")
    self.assertEqual(r, ['reversible'])

    _, r = self.anagrams2.get_anagrams("reversing")
    self.assertEqual(r, ['reserving', 'reversing'])

    _, r = self.anagrams2.get_anagrams("reversion")
    self.assertEqual(r, ['reversion'])

    _, r = self.anagrams2.get_anagrams("revert")
    self.assertEqual(r, ['revert'])

    _, r = self.anagrams2.get_anagrams("reverted")
    self.assertEqual(r, ['reverted'])

    _, r = self.anagrams2.get_anagrams("reverting")
    self.assertEqual(r, ['reverting'])

    _, r = self.anagrams2.get_anagrams("reverts")
    self.assertEqual(r, ['reverts'])

    _, r = self.anagrams2.get_anagrams("review")
    self.assertEqual(r, ['review', 'viewer'])

    _, r = self.anagrams2.get_anagrams("reviewed")
    self.assertEqual(r, ['reviewed'])

    _, r = self.anagrams2.get_anagrams("reviewer")
    self.assertEqual(r, ['reviewer'])

    _, r = self.anagrams2.get_anagrams("reviewers")
    self.assertEqual(r, ['reviewers'])

    _, r = self.anagrams2.get_anagrams("reviewing")
    self.assertEqual(r, ['reviewing'])

    _, r = self.anagrams2.get_anagrams("reviews")
    self.assertEqual(r, ['reviews', 'viewers'])

    _, r = self.anagrams2.get_anagrams("revile")
    self.assertEqual(r, ['relive', 'revile'])

    _, r = self.anagrams2.get_anagrams("reviled")
    self.assertEqual(r, ['deliver', 'reviled'])

    _, r = self.anagrams2.get_anagrams("reviler")
    self.assertEqual(r, ['reviler'])

    _, r = self.anagrams2.get_anagrams("reviling")
    self.assertEqual(r, ['reliving', 'reviling'])

    _, r = self.anagrams2.get_anagrams("revise")
    self.assertEqual(r, ['revise'])

    _, r = self.anagrams2.get_anagrams("revised")
    self.assertEqual(r, ['derives', 'diverse', 'revised'])

    _, r = self.anagrams2.get_anagrams("reviser")
    self.assertEqual(r, ['reviser'])

    _, r = self.anagrams2.get_anagrams("revises")
    self.assertEqual(r, ['revises'])

    _, r = self.anagrams2.get_anagrams("revising")
    self.assertEqual(r, ['revising'])

    _, r = self.anagrams2.get_anagrams("revision")
    self.assertEqual(r, ['revision'])

    _, r = self.anagrams2.get_anagrams("revisionary")
    self.assertEqual(r, ['revisionary'])

    _, r = self.anagrams2.get_anagrams("revisions")
    self.assertEqual(r, ['revisions'])

    _, r = self.anagrams2.get_anagrams("revisit")
    self.assertEqual(r, ['revisit'])

    _, r = self.anagrams2.get_anagrams("revisited")
    self.assertEqual(r, ['revisited'])

    _, r = self.anagrams2.get_anagrams("revisiting")
    self.assertEqual(r, ['revisiting'])

    _, r = self.anagrams2.get_anagrams("revisits")
    self.assertEqual(r, ['revisits'])

    _, r = self.anagrams2.get_anagrams("revival")
    self.assertEqual(r, ['revival'])

    _, r = self.anagrams2.get_anagrams("revivals")
    self.assertEqual(r, ['revivals'])

    _, r = self.anagrams2.get_anagrams("revive")
    self.assertEqual(r, ['revive'])

    _, r = self.anagrams2.get_anagrams("revived")
    self.assertEqual(r, ['revived'])

    _, r = self.anagrams2.get_anagrams("reviver")
    self.assertEqual(r, ['reviver'])

    _, r = self.anagrams2.get_anagrams("revives")
    self.assertEqual(r, ['revives'])

    _, r = self.anagrams2.get_anagrams("reviving")
    self.assertEqual(r, ['reviving'])

    _, r = self.anagrams2.get_anagrams("revocable")
    self.assertEqual(r, ['coverable', 'revocable'])

    _, r = self.anagrams2.get_anagrams("revocation")
    self.assertEqual(r, ['revocation'])

    _, r = self.anagrams2.get_anagrams("revoke")
    self.assertEqual(r, ['revoke'])

    _, r = self.anagrams2.get_anagrams("revoked")
    self.assertEqual(r, ['revoked'])

    _, r = self.anagrams2.get_anagrams("revoker")
    self.assertEqual(r, ['revoker'])

    _, r = self.anagrams2.get_anagrams("revokes")
    self.assertEqual(r, ['revokes'])

    _, r = self.anagrams2.get_anagrams("revoking")
    self.assertEqual(r, ['revoking'])

    _, r = self.anagrams2.get_anagrams("revolt")
    self.assertEqual(r, ['revolt'])

    _, r = self.anagrams2.get_anagrams("revolted")
    self.assertEqual(r, ['revolted'])

    _, r = self.anagrams2.get_anagrams("revolter")
    self.assertEqual(r, ['revolter'])

    _, r = self.anagrams2.get_anagrams("revolting")
    self.assertEqual(r, ['revolting'])

    _, r = self.anagrams2.get_anagrams("revoltingly")
    self.assertEqual(r, ['revoltingly'])

    _, r = self.anagrams2.get_anagrams("revolts")
    self.assertEqual(r, ['revolts'])

    _, r = self.anagrams2.get_anagrams("revolution")
    self.assertEqual(r, ['revolution'])

    _, r = self.anagrams2.get_anagrams("revolutionaries")
    self.assertEqual(r, ['revolutionaries'])

    _, r = self.anagrams2.get_anagrams("revolutionary")
    self.assertEqual(r, ['revolutionary'])

    _, r = self.anagrams2.get_anagrams("revolutionize")
    self.assertEqual(r, ['revolutionize'])

    _, r = self.anagrams2.get_anagrams("revolutionized")
    self.assertEqual(r, ['revolutionized'])

    _, r = self.anagrams2.get_anagrams("revolutionizer")
    self.assertEqual(r, ['revolutionizer'])

    _, r = self.anagrams2.get_anagrams("revolutions")
    self.assertEqual(r, ['revolutions'])

    _, r = self.anagrams2.get_anagrams("revolve")
    self.assertEqual(r, ['revolve'])

    _, r = self.anagrams2.get_anagrams("revolved")
    self.assertEqual(r, ['revolved'])

    _, r = self.anagrams2.get_anagrams("revolver")
    self.assertEqual(r, ['revolver'])

    _, r = self.anagrams2.get_anagrams("revolvers")
    self.assertEqual(r, ['revolvers'])

    _, r = self.anagrams2.get_anagrams("revolves")
    self.assertEqual(r, ['revolves'])

    _, r = self.anagrams2.get_anagrams("revolving")
    self.assertEqual(r, ['revolving'])

    _, r = self.anagrams2.get_anagrams("revulsion")
    self.assertEqual(r, ['revulsion'])

    _, r = self.anagrams2.get_anagrams("reward")
    self.assertEqual(r, ['drawer', 'redraw', 'reward', 'warder', 'warred'])

    _, r = self.anagrams2.get_anagrams("rewarded")
    self.assertEqual(r, ['rewarded'])

    _, r = self.anagrams2.get_anagrams("rewarding")
    self.assertEqual(r, ['rewarding'])

    _, r = self.anagrams2.get_anagrams("rewardingly")
    self.assertEqual(r, ['rewardingly'])

    _, r = self.anagrams2.get_anagrams("rewards")
    self.assertEqual(r, ['drawers', 'rewards'])

    _, r = self.anagrams2.get_anagrams("rewind")
    self.assertEqual(r, ['rewind', 'winder'])

    _, r = self.anagrams2.get_anagrams("rewinding")
    self.assertEqual(r, ['rewinding'])

    _, r = self.anagrams2.get_anagrams("rewinds")
    self.assertEqual(r, ['rewinds', 'winders'])

    _, r = self.anagrams2.get_anagrams("rewire")
    self.assertEqual(r, ['rewire'])

    _, r = self.anagrams2.get_anagrams("rework")
    self.assertEqual(r, ['rework', 'worker'])

    _, r = self.anagrams2.get_anagrams("reworked")
    self.assertEqual(r, ['reworked'])

    _, r = self.anagrams2.get_anagrams("reworking")
    self.assertEqual(r, ['reworking'])

    _, r = self.anagrams2.get_anagrams("reworks")
    self.assertEqual(r, ['reworks', 'workers'])

    _, r = self.anagrams2.get_anagrams("rewound")
    self.assertEqual(r, ['rewound'])

    _, r = self.anagrams2.get_anagrams("rewrite")
    self.assertEqual(r, ['rewrite'])

    _, r = self.anagrams2.get_anagrams("rewrites")
    self.assertEqual(r, ['rewrites'])

    _, r = self.anagrams2.get_anagrams("rewriting")
    self.assertEqual(r, ['rewriting'])

    _, r = self.anagrams2.get_anagrams("rewritten")
    self.assertEqual(r, ['rewritten'])

    _, r = self.anagrams2.get_anagrams("rex")
    self.assertEqual(r, ['rex'])

    _, r = self.anagrams2.get_anagrams("reykjavik")
    self.assertEqual(r, ['reykjavik'])

    _, r = self.anagrams2.get_anagrams("reynolds")
    self.assertEqual(r, ['reynolds'])

    _, r = self.anagrams2.get_anagrams("rhapsody")
    self.assertEqual(r, ['rhapsody'])

    _, r = self.anagrams2.get_anagrams("rhea")
    self.assertEqual(r, ['hare', 'hear', 'hera', 'rhea'])

    _, r = self.anagrams2.get_anagrams("rheims")
    self.assertEqual(r, ['rheims'])

    _, r = self.anagrams2.get_anagrams("rheinholdt")
    self.assertEqual(r, ['rheinholdt'])

    _, r = self.anagrams2.get_anagrams("rhenish")
    self.assertEqual(r, ['rhenish'])

    _, r = self.anagrams2.get_anagrams("rhesus")
    self.assertEqual(r, ['rhesus', 'rushes', 'ushers'])

    _, r = self.anagrams2.get_anagrams("rhetoric")
    self.assertEqual(r, ['rhetoric'])

    _, r = self.anagrams2.get_anagrams("rheumatic")
    self.assertEqual(r, ['rheumatic'])

    _, r = self.anagrams2.get_anagrams("rheumatism")
    self.assertEqual(r, ['rheumatism'])

    _, r = self.anagrams2.get_anagrams("rhine")
    self.assertEqual(r, ['henri', 'rhine'])

    _, r = self.anagrams2.get_anagrams("rhinestone")
    self.assertEqual(r, ['rhinestone'])

    _, r = self.anagrams2.get_anagrams("rhino")
    self.assertEqual(r, ['rhino'])

    _, r = self.anagrams2.get_anagrams("rhinoceros")
    self.assertEqual(r, ['rhinoceros'])

    _, r = self.anagrams2.get_anagrams("rho")
    self.assertEqual(r, ['rho'])

    _, r = self.anagrams2.get_anagrams("rhoda")
    self.assertEqual(r, ['hoard', 'rhoda'])

    _, r = self.anagrams2.get_anagrams("rhode")
    self.assertEqual(r, ['horde', 'rhode'])

    _, r = self.anagrams2.get_anagrams("rhodes")
    self.assertEqual(r, ['hordes', 'rhodes'])

    _, r = self.anagrams2.get_anagrams("rhodesia")
    self.assertEqual(r, ['rhodesia'])

    _, r = self.anagrams2.get_anagrams("rhododendron")
    self.assertEqual(r, ['rhododendron'])

    _, r = self.anagrams2.get_anagrams("rhombic")
    self.assertEqual(r, ['rhombic'])

    _, r = self.anagrams2.get_anagrams("rhombus")
    self.assertEqual(r, ['rhombus'])

    _, r = self.anagrams2.get_anagrams("rhubarb")
    self.assertEqual(r, ['rhubarb'])

    _, r = self.anagrams2.get_anagrams("rhyme")
    self.assertEqual(r, ['rhyme'])

    _, r = self.anagrams2.get_anagrams("rhymed")
    self.assertEqual(r, ['rhymed'])

    _, r = self.anagrams2.get_anagrams("rhymes")
    self.assertEqual(r, ['rhymes'])

    _, r = self.anagrams2.get_anagrams("rhyming")
    self.assertEqual(r, ['rhyming'])

    _, r = self.anagrams2.get_anagrams("rhythm")
    self.assertEqual(r, ['rhythm'])

    _, r = self.anagrams2.get_anagrams("rhythmic")
    self.assertEqual(r, ['rhythmic'])

    _, r = self.anagrams2.get_anagrams("rhythmically")
    self.assertEqual(r, ['rhythmically'])

    _, r = self.anagrams2.get_anagrams("rhythms")
    self.assertEqual(r, ['rhythms'])

    _, r = self.anagrams2.get_anagrams("rib")
    self.assertEqual(r, ['rib'])

    _, r = self.anagrams2.get_anagrams("ribald")
    self.assertEqual(r, ['bridal', 'ribald'])

    _, r = self.anagrams2.get_anagrams("ribbed")
    self.assertEqual(r, ['bribed', 'ribbed'])

    _, r = self.anagrams2.get_anagrams("ribbing")
    self.assertEqual(r, ['bribing', 'ribbing'])

    _, r = self.anagrams2.get_anagrams("ribbon")
    self.assertEqual(r, ['ribbon', 'robbin'])

    _, r = self.anagrams2.get_anagrams("ribbons")
    self.assertEqual(r, ['ribbons', 'robbins'])

    _, r = self.anagrams2.get_anagrams("riboflavin")
    self.assertEqual(r, ['riboflavin'])

    _, r = self.anagrams2.get_anagrams("ribonucleic")
    self.assertEqual(r, ['ribonucleic'])

    _, r = self.anagrams2.get_anagrams("ribs")
    self.assertEqual(r, ['ribs'])

    _, r = self.anagrams2.get_anagrams("rica")
    self.assertEqual(r, ['rica'])

    _, r = self.anagrams2.get_anagrams("rican")
    self.assertEqual(r, ['cairn', 'rican'])

    _, r = self.anagrams2.get_anagrams("ricanism")
    self.assertEqual(r, ['ricanism'])

    _, r = self.anagrams2.get_anagrams("ricans")
    self.assertEqual(r, ['ricans'])

    _, r = self.anagrams2.get_anagrams("rice")
    self.assertEqual(r, ['eric', 'rice'])

    _, r = self.anagrams2.get_anagrams("rich")
    self.assertEqual(r, ['rich'])

    _, r = self.anagrams2.get_anagrams("richard")
    self.assertEqual(r, ['richard'])

    _, r = self.anagrams2.get_anagrams("richards")
    self.assertEqual(r, ['richards'])

    _, r = self.anagrams2.get_anagrams("richardson")
    self.assertEqual(r, ['richardson'])

    _, r = self.anagrams2.get_anagrams("richer")
    self.assertEqual(r, ['richer'])

    _, r = self.anagrams2.get_anagrams("riches")
    self.assertEqual(r, ['riches'])

    _, r = self.anagrams2.get_anagrams("richest")
    self.assertEqual(r, ['richest'])

    _, r = self.anagrams2.get_anagrams("richey")
    self.assertEqual(r, ['richey'])

    _, r = self.anagrams2.get_anagrams("richfield")
    self.assertEqual(r, ['richfield'])

    _, r = self.anagrams2.get_anagrams("richland")
    self.assertEqual(r, ['richland'])

    _, r = self.anagrams2.get_anagrams("richly")
    self.assertEqual(r, ['richly'])

    _, r = self.anagrams2.get_anagrams("richmond")
    self.assertEqual(r, ['richmond'])

    _, r = self.anagrams2.get_anagrams("richness")
    self.assertEqual(r, ['richness'])

    _, r = self.anagrams2.get_anagrams("richter")
    self.assertEqual(r, ['richter'])

    _, r = self.anagrams2.get_anagrams("rick")
    self.assertEqual(r, ['rick'])

    _, r = self.anagrams2.get_anagrams("rickenbaugh")
    self.assertEqual(r, ['rickenbaugh'])

    _, r = self.anagrams2.get_anagrams("rickets")
    self.assertEqual(r, ['rickets', 'sticker', 'tickers'])

    _, r = self.anagrams2.get_anagrams("rickettsia")
    self.assertEqual(r, ['rickettsia'])

    _, r = self.anagrams2.get_anagrams("rickety")
    self.assertEqual(r, ['rickety'])

    _, r = self.anagrams2.get_anagrams("rickshaw")
    self.assertEqual(r, ['rickshaw'])

    _, r = self.anagrams2.get_anagrams("rickshaws")
    self.assertEqual(r, ['rickshaws'])

    _, r = self.anagrams2.get_anagrams("rico")
    self.assertEqual(r, ['rico'])

    _, r = self.anagrams2.get_anagrams("ricochet")
    self.assertEqual(r, ['ricochet'])

    _, r = self.anagrams2.get_anagrams("rid")
    self.assertEqual(r, ['rid'])

    _, r = self.anagrams2.get_anagrams("riddance")
    self.assertEqual(r, ['riddance'])

    _, r = self.anagrams2.get_anagrams("ridden")
    self.assertEqual(r, ['ridden'])

    _, r = self.anagrams2.get_anagrams("ridding")
    self.assertEqual(r, ['ridding'])

    _, r = self.anagrams2.get_anagrams("riddle")
    self.assertEqual(r, ['riddle'])

    _, r = self.anagrams2.get_anagrams("riddled")
    self.assertEqual(r, ['riddled'])

    _, r = self.anagrams2.get_anagrams("riddles")
    self.assertEqual(r, ['riddles'])

    _, r = self.anagrams2.get_anagrams("riddling")
    self.assertEqual(r, ['riddling'])

    _, r = self.anagrams2.get_anagrams("ride")
    self.assertEqual(r, ['dire', 'reid', 'ride'])

    _, r = self.anagrams2.get_anagrams("rider")
    self.assertEqual(r, ['drier', 'rider'])

    _, r = self.anagrams2.get_anagrams("riders")
    self.assertEqual(r, ['driers', 'riders'])

    _, r = self.anagrams2.get_anagrams("rides")
    self.assertEqual(r, ['dries', 'rides', 'sired'])

    _, r = self.anagrams2.get_anagrams("ridge")
    self.assertEqual(r, ['dirge', 'ridge'])

    _, r = self.anagrams2.get_anagrams("ridgefield")
    self.assertEqual(r, ['ridgefield'])

    _, r = self.anagrams2.get_anagrams("ridgepole")
    self.assertEqual(r, ['ridgepole'])

    _, r = self.anagrams2.get_anagrams("ridges")
    self.assertEqual(r, ['dirges', 'ridges'])

    _, r = self.anagrams2.get_anagrams("ridgway")
    self.assertEqual(r, ['ridgway'])

    _, r = self.anagrams2.get_anagrams("ridicule")
    self.assertEqual(r, ['ridicule'])

    _, r = self.anagrams2.get_anagrams("ridiculed")
    self.assertEqual(r, ['ridiculed'])

    _, r = self.anagrams2.get_anagrams("ridicules")
    self.assertEqual(r, ['ridicules'])

    _, r = self.anagrams2.get_anagrams("ridiculing")
    self.assertEqual(r, ['ridiculing'])

    _, r = self.anagrams2.get_anagrams("ridiculous")
    self.assertEqual(r, ['ridiculous'])

    _, r = self.anagrams2.get_anagrams("ridiculously")
    self.assertEqual(r, ['ridiculously'])

    _, r = self.anagrams2.get_anagrams("ridiculousness")
    self.assertEqual(r, ['ridiculousness'])

    _, r = self.anagrams2.get_anagrams("riding")
    self.assertEqual(r, ['riding'])

    _, r = self.anagrams2.get_anagrams("rids")
    self.assertEqual(r, ['rids'])

    _, r = self.anagrams2.get_anagrams("riemann")
    self.assertEqual(r, ['riemann'])

    _, r = self.anagrams2.get_anagrams("riemannian")
    self.assertEqual(r, ['riemannian'])

    _, r = self.anagrams2.get_anagrams("rifle")
    self.assertEqual(r, ['filer', 'flier', 'lifer', 'rifle'])

    _, r = self.anagrams2.get_anagrams("rifled")
    self.assertEqual(r, ['rifled'])

    _, r = self.anagrams2.get_anagrams("rifleman")
    self.assertEqual(r, ['rifleman'])

    _, r = self.anagrams2.get_anagrams("rifler")
    self.assertEqual(r, ['rifler'])

    _, r = self.anagrams2.get_anagrams("rifles")
    self.assertEqual(r, ['fliers', 'rifles'])

    _, r = self.anagrams2.get_anagrams("rifling")
    self.assertEqual(r, ['rifling'])

    _, r = self.anagrams2.get_anagrams("rift")
    self.assertEqual(r, ['rift'])

    _, r = self.anagrams2.get_anagrams("rig")
    self.assertEqual(r, ['rig'])

    _, r = self.anagrams2.get_anagrams("riga")
    self.assertEqual(r, ['riga'])

    _, r = self.anagrams2.get_anagrams("rigel")
    self.assertEqual(r, ['rigel'])

    _, r = self.anagrams2.get_anagrams("rigging")
    self.assertEqual(r, ['rigging'])

    _, r = self.anagrams2.get_anagrams("riggs")
    self.assertEqual(r, ['riggs'])

    _, r = self.anagrams2.get_anagrams("right")
    self.assertEqual(r, ['girth', 'right'])

    _, r = self.anagrams2.get_anagrams("righted")
    self.assertEqual(r, ['righted'])

    _, r = self.anagrams2.get_anagrams("righteous")
    self.assertEqual(r, ['righteous'])

    _, r = self.anagrams2.get_anagrams("righteously")
    self.assertEqual(r, ['righteously'])

    _, r = self.anagrams2.get_anagrams("righteousness")
    self.assertEqual(r, ['righteousness'])

    _, r = self.anagrams2.get_anagrams("righter")
    self.assertEqual(r, ['righter'])

    _, r = self.anagrams2.get_anagrams("rightful")
    self.assertEqual(r, ['rightful'])

    _, r = self.anagrams2.get_anagrams("rightfully")
    self.assertEqual(r, ['rightfully'])

    _, r = self.anagrams2.get_anagrams("rightfulness")
    self.assertEqual(r, ['rightfulness'])

    _, r = self.anagrams2.get_anagrams("righting")
    self.assertEqual(r, ['righting'])

    _, r = self.anagrams2.get_anagrams("rightly")
    self.assertEqual(r, ['rightly'])

    _, r = self.anagrams2.get_anagrams("rightmost")
    self.assertEqual(r, ['rightmost'])

    _, r = self.anagrams2.get_anagrams("rightness")
    self.assertEqual(r, ['rightness'])

    _, r = self.anagrams2.get_anagrams("rights")
    self.assertEqual(r, ['rights'])

    _, r = self.anagrams2.get_anagrams("rightward")
    self.assertEqual(r, ['rightward'])

    _, r = self.anagrams2.get_anagrams("rigid")
    self.assertEqual(r, ['rigid'])

    _, r = self.anagrams2.get_anagrams("rigidity")
    self.assertEqual(r, ['rigidity'])

    _, r = self.anagrams2.get_anagrams("rigidly")
    self.assertEqual(r, ['rigidly'])

    _, r = self.anagrams2.get_anagrams("rigor")
    self.assertEqual(r, ['rigor'])

    _, r = self.anagrams2.get_anagrams("rigorous")
    self.assertEqual(r, ['rigorous'])

    _, r = self.anagrams2.get_anagrams("rigorously")
    self.assertEqual(r, ['rigorously'])

    _, r = self.anagrams2.get_anagrams("rigors")
    self.assertEqual(r, ['rigors'])

    _, r = self.anagrams2.get_anagrams("rigs")
    self.assertEqual(r, ['gris', 'rigs'])

    _, r = self.anagrams2.get_anagrams("riley")
    self.assertEqual(r, ['riley'])

    _, r = self.anagrams2.get_anagrams("rilke")
    self.assertEqual(r, ['rilke'])

    _, r = self.anagrams2.get_anagrams("rill")
    self.assertEqual(r, ['rill'])

    _, r = self.anagrams2.get_anagrams("rim")
    self.assertEqual(r, ['rim'])

    _, r = self.anagrams2.get_anagrams("rime")
    self.assertEqual(r, ['mire', 'rime'])

    _, r = self.anagrams2.get_anagrams("rims")
    self.assertEqual(r, ['rims'])

    _, r = self.anagrams2.get_anagrams("rind")
    self.assertEqual(r, ['rind'])

    _, r = self.anagrams2.get_anagrams("rinds")
    self.assertEqual(r, ['rinds'])

    _, r = self.anagrams2.get_anagrams("rinehart")
    self.assertEqual(r, ['rinehart'])

    _, r = self.anagrams2.get_anagrams("ring")
    self.assertEqual(r, ['grin', 'ring'])

    _, r = self.anagrams2.get_anagrams("ringed")
    self.assertEqual(r, ['ringed'])

    _, r = self.anagrams2.get_anagrams("ringer")
    self.assertEqual(r, ['erring', 'ringer'])

    _, r = self.anagrams2.get_anagrams("ringers")
    self.assertEqual(r, ['ringers'])

    _, r = self.anagrams2.get_anagrams("ringing")
    self.assertEqual(r, ['ringing'])

    _, r = self.anagrams2.get_anagrams("ringingly")
    self.assertEqual(r, ['ringingly'])

    _, r = self.anagrams2.get_anagrams("ringings")
    self.assertEqual(r, ['ringings'])

    _, r = self.anagrams2.get_anagrams("rings")
    self.assertEqual(r, ['grins', 'rings'])

    _, r = self.anagrams2.get_anagrams("ringside")
    self.assertEqual(r, ['desiring', 'residing', 'ringside'])

    _, r = self.anagrams2.get_anagrams("rink")
    self.assertEqual(r, ['rink'])

    _, r = self.anagrams2.get_anagrams("rinse")
    self.assertEqual(r, ['reins', 'resin', 'rinse', 'risen', 'siren'])

    _, r = self.anagrams2.get_anagrams("rinsed")
    self.assertEqual(r, ['diners', 'rinsed', 'snider'])

    _, r = self.anagrams2.get_anagrams("rinser")
    self.assertEqual(r, ['rinser'])

    _, r = self.anagrams2.get_anagrams("rinses")
    self.assertEqual(r, ['resins', 'rinses', 'sirens'])

    _, r = self.anagrams2.get_anagrams("rinsing")
    self.assertEqual(r, ['rinsing'])

    _, r = self.anagrams2.get_anagrams("rio")
    self.assertEqual(r, ['rio'])

    _, r = self.anagrams2.get_anagrams("riordan")
    self.assertEqual(r, ['riordan'])

    _, r = self.anagrams2.get_anagrams("riot")
    self.assertEqual(r, ['riot', 'trio'])

    _, r = self.anagrams2.get_anagrams("rioted")
    self.assertEqual(r, ['editor', 'rioted'])

    _, r = self.anagrams2.get_anagrams("rioter")
    self.assertEqual(r, ['rioter'])

    _, r = self.anagrams2.get_anagrams("rioters")
    self.assertEqual(r, ['rioters'])

    _, r = self.anagrams2.get_anagrams("rioting")
    self.assertEqual(r, ['rioting'])

    _, r = self.anagrams2.get_anagrams("riotous")
    self.assertEqual(r, ['riotous'])

    _, r = self.anagrams2.get_anagrams("riots")
    self.assertEqual(r, ['riots'])

    _, r = self.anagrams2.get_anagrams("rip")
    self.assertEqual(r, ['rip'])

    _, r = self.anagrams2.get_anagrams("ripe")
    self.assertEqual(r, ['pier', 'ripe'])

    _, r = self.anagrams2.get_anagrams("ripely")
    self.assertEqual(r, ['ripely', 'ripley'])

    _, r = self.anagrams2.get_anagrams("ripen")
    self.assertEqual(r, ['ripen'])

    _, r = self.anagrams2.get_anagrams("ripeness")
    self.assertEqual(r, ['ripeness'])

    _, r = self.anagrams2.get_anagrams("ripley")
    self.assertEqual(r, ['ripely', 'ripley'])

    _, r = self.anagrams2.get_anagrams("ripoff")
    self.assertEqual(r, ['ripoff'])

    _, r = self.anagrams2.get_anagrams("ripped")
    self.assertEqual(r, ['dipper', 'ripped'])

    _, r = self.anagrams2.get_anagrams("ripping")
    self.assertEqual(r, ['ripping'])

    _, r = self.anagrams2.get_anagrams("ripple")
    self.assertEqual(r, ['ripple'])

    _, r = self.anagrams2.get_anagrams("rippled")
    self.assertEqual(r, ['rippled'])

    _, r = self.anagrams2.get_anagrams("ripples")
    self.assertEqual(r, ['ripples', 'slipper'])

    _, r = self.anagrams2.get_anagrams("rippling")
    self.assertEqual(r, ['rippling'])

    _, r = self.anagrams2.get_anagrams("rips")
    self.assertEqual(r, ['rips'])

    _, r = self.anagrams2.get_anagrams("risc")
    self.assertEqual(r, ['risc'])

    _, r = self.anagrams2.get_anagrams("rise")
    self.assertEqual(r, ['eris', 'ires', 'rise', 'sire'])

    _, r = self.anagrams2.get_anagrams("risen")
    self.assertEqual(r, ['reins', 'resin', 'rinse', 'risen', 'siren'])

    _, r = self.anagrams2.get_anagrams("riser")
    self.assertEqual(r, ['riser'])

    _, r = self.anagrams2.get_anagrams("risers")
    self.assertEqual(r, ['risers'])

    _, r = self.anagrams2.get_anagrams("rises")
    self.assertEqual(r, ['rises', 'sires'])

    _, r = self.anagrams2.get_anagrams("rising")
    self.assertEqual(r, ['rising'])

    _, r = self.anagrams2.get_anagrams("risings")
    self.assertEqual(r, ['risings'])

    _, r = self.anagrams2.get_anagrams("risk")
    self.assertEqual(r, ['irks', 'risk'])

    _, r = self.anagrams2.get_anagrams("risked")
    self.assertEqual(r, ['risked'])

    _, r = self.anagrams2.get_anagrams("risking")
    self.assertEqual(r, ['risking'])

    _, r = self.anagrams2.get_anagrams("risks")
    self.assertEqual(r, ['risks'])

    _, r = self.anagrams2.get_anagrams("risky")
    self.assertEqual(r, ['risky'])

    _, r = self.anagrams2.get_anagrams("ritchie")
    self.assertEqual(r, ['ritchie'])

    _, r = self.anagrams2.get_anagrams("rite")
    self.assertEqual(r, ['rite', 'tier', 'tire'])

    _, r = self.anagrams2.get_anagrams("rites")
    self.assertEqual(r, ['rites', 'tiers', 'tires', 'tries'])

    _, r = self.anagrams2.get_anagrams("ritter")
    self.assertEqual(r, ['ritter'])

    _, r = self.anagrams2.get_anagrams("ritual")
    self.assertEqual(r, ['ritual'])

    _, r = self.anagrams2.get_anagrams("ritually")
    self.assertEqual(r, ['ritually'])

    _, r = self.anagrams2.get_anagrams("rituals")
    self.assertEqual(r, ['rituals'])

    _, r = self.anagrams2.get_anagrams("ritz")
    self.assertEqual(r, ['ritz'])

    _, r = self.anagrams2.get_anagrams("rival")
    self.assertEqual(r, ['rival'])

    _, r = self.anagrams2.get_anagrams("rivaled")
    self.assertEqual(r, ['rivaled'])

    _, r = self.anagrams2.get_anagrams("rivalled")
    self.assertEqual(r, ['rivalled'])

    _, r = self.anagrams2.get_anagrams("rivalling")
    self.assertEqual(r, ['rivalling'])

    _, r = self.anagrams2.get_anagrams("rivalries")
    self.assertEqual(r, ['rivalries'])

    _, r = self.anagrams2.get_anagrams("rivalry")
    self.assertEqual(r, ['rivalry'])

    _, r = self.anagrams2.get_anagrams("rivals")
    self.assertEqual(r, ['rivals'])

    _, r = self.anagrams2.get_anagrams("river")
    self.assertEqual(r, ['river'])

    _, r = self.anagrams2.get_anagrams("riverbank")
    self.assertEqual(r, ['riverbank'])

    _, r = self.anagrams2.get_anagrams("riverfront")
    self.assertEqual(r, ['riverfront'])

    _, r = self.anagrams2.get_anagrams("rivers")
    self.assertEqual(r, ['rivers'])

    _, r = self.anagrams2.get_anagrams("riverside")
    self.assertEqual(r, ['riverside'])

    _, r = self.anagrams2.get_anagrams("riverview")
    self.assertEqual(r, ['riverview'])

    _, r = self.anagrams2.get_anagrams("rivet")
    self.assertEqual(r, ['rivet'])

    _, r = self.anagrams2.get_anagrams("riveter")
    self.assertEqual(r, ['riveter'])

    _, r = self.anagrams2.get_anagrams("rivets")
    self.assertEqual(r, ['rivets', 'strive'])

    _, r = self.anagrams2.get_anagrams("riviera")
    self.assertEqual(r, ['riviera'])

    _, r = self.anagrams2.get_anagrams("rivulet")
    self.assertEqual(r, ['rivulet'])

    _, r = self.anagrams2.get_anagrams("rivulets")
    self.assertEqual(r, ['rivulets'])

    _, r = self.anagrams2.get_anagrams("riyadh")
    self.assertEqual(r, ['riyadh'])

    _, r = self.anagrams2.get_anagrams("roach")
    self.assertEqual(r, ['roach'])

    _, r = self.anagrams2.get_anagrams("road")
    self.assertEqual(r, ['dora', 'road'])

    _, r = self.anagrams2.get_anagrams("roadbed")
    self.assertEqual(r, ['boarded', 'roadbed'])

    _, r = self.anagrams2.get_anagrams("roadblock")
    self.assertEqual(r, ['roadblock'])

    _, r = self.anagrams2.get_anagrams("roads")
    self.assertEqual(r, ['roads'])

    _, r = self.anagrams2.get_anagrams("roadside")
    self.assertEqual(r, ['roadside'])

    _, r = self.anagrams2.get_anagrams("roadster")
    self.assertEqual(r, ['roadster'])

    _, r = self.anagrams2.get_anagrams("roadsters")
    self.assertEqual(r, ['roadsters'])

    _, r = self.anagrams2.get_anagrams("roadway")
    self.assertEqual(r, ['roadway'])

    _, r = self.anagrams2.get_anagrams("roadways")
    self.assertEqual(r, ['roadways'])

    _, r = self.anagrams2.get_anagrams("roam")
    self.assertEqual(r, ['ramo', 'roam'])

    _, r = self.anagrams2.get_anagrams("roamed")
    self.assertEqual(r, ['roamed'])

    _, r = self.anagrams2.get_anagrams("roaming")
    self.assertEqual(r, ['roaming'])

    _, r = self.anagrams2.get_anagrams("roams")
    self.assertEqual(r, ['roams'])

    _, r = self.anagrams2.get_anagrams("roar")
    self.assertEqual(r, ['roar'])

    _, r = self.anagrams2.get_anagrams("roared")
    self.assertEqual(r, ['roared'])

    _, r = self.anagrams2.get_anagrams("roarer")
    self.assertEqual(r, ['roarer'])

    _, r = self.anagrams2.get_anagrams("roaring")
    self.assertEqual(r, ['roaring'])

    _, r = self.anagrams2.get_anagrams("roars")
    self.assertEqual(r, ['roars'])

    _, r = self.anagrams2.get_anagrams("roast")
    self.assertEqual(r, ['astor', 'roast'])

    _, r = self.anagrams2.get_anagrams("roasted")
    self.assertEqual(r, ['roasted'])

    _, r = self.anagrams2.get_anagrams("roaster")
    self.assertEqual(r, ['roaster'])

    _, r = self.anagrams2.get_anagrams("roasting")
    self.assertEqual(r, ['organist', 'roasting'])

    _, r = self.anagrams2.get_anagrams("roasts")
    self.assertEqual(r, ['assort', 'roasts'])

    _, r = self.anagrams2.get_anagrams("rob")
    self.assertEqual(r, ['orb', 'rob'])

    _, r = self.anagrams2.get_anagrams("robbed")
    self.assertEqual(r, ['robbed'])

    _, r = self.anagrams2.get_anagrams("robber")
    self.assertEqual(r, ['robber'])

    _, r = self.anagrams2.get_anagrams("robberies")
    self.assertEqual(r, ['robberies'])

    _, r = self.anagrams2.get_anagrams("robbers")
    self.assertEqual(r, ['robbers'])

    _, r = self.anagrams2.get_anagrams("robbery")
    self.assertEqual(r, ['robbery'])

    _, r = self.anagrams2.get_anagrams("robbie")
    self.assertEqual(r, ['robbie'])

    _, r = self.anagrams2.get_anagrams("robbin")
    self.assertEqual(r, ['ribbon', 'robbin'])

    _, r = self.anagrams2.get_anagrams("robbing")
    self.assertEqual(r, ['robbing'])

    _, r = self.anagrams2.get_anagrams("robbins")
    self.assertEqual(r, ['ribbons', 'robbins'])

    _, r = self.anagrams2.get_anagrams("robe")
    self.assertEqual(r, ['boer', 'bore', 'robe'])

    _, r = self.anagrams2.get_anagrams("robed")
    self.assertEqual(r, ['bored', 'robed'])

    _, r = self.anagrams2.get_anagrams("robert")
    self.assertEqual(r, ['robert'])

    _, r = self.anagrams2.get_anagrams("roberta")
    self.assertEqual(r, ['roberta'])

    _, r = self.anagrams2.get_anagrams("roberto")
    self.assertEqual(r, ['roberto'])

    _, r = self.anagrams2.get_anagrams("roberts")
    self.assertEqual(r, ['roberts'])

    _, r = self.anagrams2.get_anagrams("robertson")
    self.assertEqual(r, ['robertson'])

    _, r = self.anagrams2.get_anagrams("robertsons")
    self.assertEqual(r, ['robertsons'])

    _, r = self.anagrams2.get_anagrams("robes")
    self.assertEqual(r, ['boers', 'bores', 'robes', 'sober'])

    _, r = self.anagrams2.get_anagrams("robin")
    self.assertEqual(r, ['robin'])

    _, r = self.anagrams2.get_anagrams("robing")
    self.assertEqual(r, ['boring', 'robing'])

    _, r = self.anagrams2.get_anagrams("robins")
    self.assertEqual(r, ['robins'])

    _, r = self.anagrams2.get_anagrams("robinson")
    self.assertEqual(r, ['robinson'])

    _, r = self.anagrams2.get_anagrams("robinsonville")
    self.assertEqual(r, ['robinsonville'])

    _, r = self.anagrams2.get_anagrams("robot")
    self.assertEqual(r, ['robot'])

    _, r = self.anagrams2.get_anagrams("robotic")
    self.assertEqual(r, ['robotic'])

    _, r = self.anagrams2.get_anagrams("robotics")
    self.assertEqual(r, ['robotics'])

    _, r = self.anagrams2.get_anagrams("robots")
    self.assertEqual(r, ['robots'])

    _, r = self.anagrams2.get_anagrams("robs")
    self.assertEqual(r, ['robs'])

    _, r = self.anagrams2.get_anagrams("robust")
    self.assertEqual(r, ['robust'])

    _, r = self.anagrams2.get_anagrams("robustly")
    self.assertEqual(r, ['robustly'])

    _, r = self.anagrams2.get_anagrams("robustness")
    self.assertEqual(r, ['robustness'])

    _, r = self.anagrams2.get_anagrams("rocco")
    self.assertEqual(r, ['rocco'])

    _, r = self.anagrams2.get_anagrams("rochester")
    self.assertEqual(r, ['rochester'])

    _, r = self.anagrams2.get_anagrams("rochford")
    self.assertEqual(r, ['rochford'])

    _, r = self.anagrams2.get_anagrams("rock")
    self.assertEqual(r, ['cork', 'rock'])

    _, r = self.anagrams2.get_anagrams("rockabye")
    self.assertEqual(r, ['rockabye'])

    _, r = self.anagrams2.get_anagrams("rockaway")
    self.assertEqual(r, ['rockaway'])

    _, r = self.anagrams2.get_anagrams("rockaways")
    self.assertEqual(r, ['rockaways'])

    _, r = self.anagrams2.get_anagrams("rocked")
    self.assertEqual(r, ['corked', 'rocked'])

    _, r = self.anagrams2.get_anagrams("rockefeller")
    self.assertEqual(r, ['rockefeller'])

    _, r = self.anagrams2.get_anagrams("rocker")
    self.assertEqual(r, ['corker', 'rocker'])

    _, r = self.anagrams2.get_anagrams("rockers")
    self.assertEqual(r, ['corkers', 'rockers'])

    _, r = self.anagrams2.get_anagrams("rocket")
    self.assertEqual(r, ['rocket'])

    _, r = self.anagrams2.get_anagrams("rocketed")
    self.assertEqual(r, ['rocketed'])

    _, r = self.anagrams2.get_anagrams("rocketing")
    self.assertEqual(r, ['rocketing'])

    _, r = self.anagrams2.get_anagrams("rockets")
    self.assertEqual(r, ['rockets', 'stocker'])

    _, r = self.anagrams2.get_anagrams("rockford")
    self.assertEqual(r, ['rockford'])

    _, r = self.anagrams2.get_anagrams("rockies")
    self.assertEqual(r, ['rockies'])

    _, r = self.anagrams2.get_anagrams("rocking")
    self.assertEqual(r, ['corking', 'rocking'])

    _, r = self.anagrams2.get_anagrams("rockland")
    self.assertEqual(r, ['rockland'])

    _, r = self.anagrams2.get_anagrams("rocks")
    self.assertEqual(r, ['corks', 'rocks'])

    _, r = self.anagrams2.get_anagrams("rockville")
    self.assertEqual(r, ['rockville'])

    _, r = self.anagrams2.get_anagrams("rockwell")
    self.assertEqual(r, ['rockwell'])

    _, r = self.anagrams2.get_anagrams("rocky")
    self.assertEqual(r, ['rocky'])

    _, r = self.anagrams2.get_anagrams("rod")
    self.assertEqual(r, ['rod'])

    _, r = self.anagrams2.get_anagrams("rode")
    self.assertEqual(r, ['doer', 'redo', 'rode'])

    _, r = self.anagrams2.get_anagrams("rodent")
    self.assertEqual(r, ['rodent'])

    _, r = self.anagrams2.get_anagrams("rodents")
    self.assertEqual(r, ['rodents', 'snorted'])

    _, r = self.anagrams2.get_anagrams("rodeo")
    self.assertEqual(r, ['rodeo'])

    _, r = self.anagrams2.get_anagrams("rodgers")
    self.assertEqual(r, ['rodgers'])

    _, r = self.anagrams2.get_anagrams("rodney")
    self.assertEqual(r, ['rodney', 'yonder'])

    _, r = self.anagrams2.get_anagrams("rodriguez")
    self.assertEqual(r, ['rodriguez'])

    _, r = self.anagrams2.get_anagrams("rods")
    self.assertEqual(r, ['rods'])

    _, r = self.anagrams2.get_anagrams("roe")
    self.assertEqual(r, ['ore', 'roe'])

    _, r = self.anagrams2.get_anagrams("roentgen")
    self.assertEqual(r, ['roentgen'])

    _, r = self.anagrams2.get_anagrams("roger")
    self.assertEqual(r, ['roger'])

    _, r = self.anagrams2.get_anagrams("rogers")
    self.assertEqual(r, ['rogers'])

    _, r = self.anagrams2.get_anagrams("rogue")
    self.assertEqual(r, ['rogue', 'rouge'])

    _, r = self.anagrams2.get_anagrams("rogues")
    self.assertEqual(r, ['grouse', 'rogues'])

    _, r = self.anagrams2.get_anagrams("roland")
    self.assertEqual(r, ['arnold', 'roland', 'ronald'])

    _, r = self.anagrams2.get_anagrams("role")
    self.assertEqual(r, ['lore', 'role'])

    _, r = self.anagrams2.get_anagrams("roles")
    self.assertEqual(r, ['loser', 'roles'])

    _, r = self.anagrams2.get_anagrams("roll")
    self.assertEqual(r, ['roll'])

    _, r = self.anagrams2.get_anagrams("rollback")
    self.assertEqual(r, ['rollback'])

    _, r = self.anagrams2.get_anagrams("rolled")
    self.assertEqual(r, ['rolled'])

    _, r = self.anagrams2.get_anagrams("roller")
    self.assertEqual(r, ['roller'])

    _, r = self.anagrams2.get_anagrams("rollers")
    self.assertEqual(r, ['rollers'])

    _, r = self.anagrams2.get_anagrams("rollie")
    self.assertEqual(r, ['rollie'])

    _, r = self.anagrams2.get_anagrams("rolling")
    self.assertEqual(r, ['rolling'])

    _, r = self.anagrams2.get_anagrams("rollins")
    self.assertEqual(r, ['rollins'])

    _, r = self.anagrams2.get_anagrams("rolls")
    self.assertEqual(r, ['rolls'])

    _, r = self.anagrams2.get_anagrams("roman")
    self.assertEqual(r, ['manor', 'moran', 'norma', 'roman'])

    _, r = self.anagrams2.get_anagrams("romance")
    self.assertEqual(r, ['cameron', 'menorca', 'romance'])

    _, r = self.anagrams2.get_anagrams("romancer")
    self.assertEqual(r, ['romancer'])

    _, r = self.anagrams2.get_anagrams("romancers")
    self.assertEqual(r, ['romancers'])

    _, r = self.anagrams2.get_anagrams("romances")
    self.assertEqual(r, ['romances'])

    _, r = self.anagrams2.get_anagrams("romancing")
    self.assertEqual(r, ['romancing'])

    _, r = self.anagrams2.get_anagrams("romanesque")
    self.assertEqual(r, ['romanesque'])

    _, r = self.anagrams2.get_anagrams("romania")
    self.assertEqual(r, ['romania'])

    _, r = self.anagrams2.get_anagrams("romanizations")
    self.assertEqual(r, ['romanizations'])

    _, r = self.anagrams2.get_anagrams("romanizer")
    self.assertEqual(r, ['romanizer'])

    _, r = self.anagrams2.get_anagrams("romanizers")
    self.assertEqual(r, ['romanizers'])

    _, r = self.anagrams2.get_anagrams("romanizes")
    self.assertEqual(r, ['romanizes'])

    _, r = self.anagrams2.get_anagrams("romano")
    self.assertEqual(r, ['maroon', 'romano'])

    _, r = self.anagrams2.get_anagrams("romans")
    self.assertEqual(r, ['manors', 'ransom', 'romans'])

    _, r = self.anagrams2.get_anagrams("romantic")
    self.assertEqual(r, ['romantic'])

    _, r = self.anagrams2.get_anagrams("romantics")
    self.assertEqual(r, ['romantics'])

    _, r = self.anagrams2.get_anagrams("rome")
    self.assertEqual(r, ['more', 'rome'])

    _, r = self.anagrams2.get_anagrams("romeldale")
    self.assertEqual(r, ['romeldale'])

    _, r = self.anagrams2.get_anagrams("romeo")
    self.assertEqual(r, ['moore', 'romeo'])

    _, r = self.anagrams2.get_anagrams("romp")
    self.assertEqual(r, ['romp'])

    _, r = self.anagrams2.get_anagrams("romped")
    self.assertEqual(r, ['romped'])

    _, r = self.anagrams2.get_anagrams("romper")
    self.assertEqual(r, ['romper'])

    _, r = self.anagrams2.get_anagrams("romping")
    self.assertEqual(r, ['romping'])

    _, r = self.anagrams2.get_anagrams("romps")
    self.assertEqual(r, ['romps'])

    _, r = self.anagrams2.get_anagrams("romulus")
    self.assertEqual(r, ['romulus'])

    _, r = self.anagrams2.get_anagrams("ron")
    self.assertEqual(r, ['nor', 'ron'])

    _, r = self.anagrams2.get_anagrams("ronald")
    self.assertEqual(r, ['arnold', 'roland', 'ronald'])

    _, r = self.anagrams2.get_anagrams("ronnie")
    self.assertEqual(r, ['ronnie'])

    _, r = self.anagrams2.get_anagrams("roof")
    self.assertEqual(r, ['roof'])

    _, r = self.anagrams2.get_anagrams("roofed")
    self.assertEqual(r, ['roofed'])

    _, r = self.anagrams2.get_anagrams("roofer")
    self.assertEqual(r, ['roofer'])

    _, r = self.anagrams2.get_anagrams("roofing")
    self.assertEqual(r, ['roofing'])

    _, r = self.anagrams2.get_anagrams("roofs")
    self.assertEqual(r, ['roofs'])

    _, r = self.anagrams2.get_anagrams("rooftop")
    self.assertEqual(r, ['rooftop'])

    _, r = self.anagrams2.get_anagrams("rook")
    self.assertEqual(r, ['rook'])

    _, r = self.anagrams2.get_anagrams("rookie")
    self.assertEqual(r, ['rookie'])

    _, r = self.anagrams2.get_anagrams("room")
    self.assertEqual(r, ['moor', 'room'])

    _, r = self.anagrams2.get_anagrams("roomed")
    self.assertEqual(r, ['moored', 'roomed'])

    _, r = self.anagrams2.get_anagrams("roomer")
    self.assertEqual(r, ['roomer'])

    _, r = self.anagrams2.get_anagrams("roomers")
    self.assertEqual(r, ['roomers'])

    _, r = self.anagrams2.get_anagrams("roomful")
    self.assertEqual(r, ['roomful'])

    _, r = self.anagrams2.get_anagrams("rooming")
    self.assertEqual(r, ['mooring', 'rooming'])

    _, r = self.anagrams2.get_anagrams("roommate")
    self.assertEqual(r, ['roommate'])

    _, r = self.anagrams2.get_anagrams("rooms")
    self.assertEqual(r, ['moors', 'rooms'])

    _, r = self.anagrams2.get_anagrams("roomy")
    self.assertEqual(r, ['roomy'])

    _, r = self.anagrams2.get_anagrams("rooney")
    self.assertEqual(r, ['rooney'])

    _, r = self.anagrams2.get_anagrams("roosevelt")
    self.assertEqual(r, ['roosevelt'])

    _, r = self.anagrams2.get_anagrams("rooseveltian")
    self.assertEqual(r, ['rooseveltian'])

    _, r = self.anagrams2.get_anagrams("roost")
    self.assertEqual(r, ['roost', 'roots'])

    _, r = self.anagrams2.get_anagrams("rooster")
    self.assertEqual(r, ['rooster'])

    _, r = self.anagrams2.get_anagrams("roosters")
    self.assertEqual(r, ['roosters'])

    _, r = self.anagrams2.get_anagrams("root")
    self.assertEqual(r, ['root'])

    _, r = self.anagrams2.get_anagrams("rooted")
    self.assertEqual(r, ['rooted'])

    _, r = self.anagrams2.get_anagrams("rooter")
    self.assertEqual(r, ['rooter'])

    _, r = self.anagrams2.get_anagrams("rooting")
    self.assertEqual(r, ['rooting'])

    _, r = self.anagrams2.get_anagrams("roots")
    self.assertEqual(r, ['roost', 'roots'])

    _, r = self.anagrams2.get_anagrams("rope")
    self.assertEqual(r, ['pore', 'rope'])

    _, r = self.anagrams2.get_anagrams("roped")
    self.assertEqual(r, ['doper', 'pedro', 'pored', 'roped'])

    _, r = self.anagrams2.get_anagrams("roper")
    self.assertEqual(r, ['roper'])

    _, r = self.anagrams2.get_anagrams("ropers")
    self.assertEqual(r, ['ropers'])

    _, r = self.anagrams2.get_anagrams("ropes")
    self.assertEqual(r, ['pores', 'poser', 'prose', 'ropes', 'spore'])

    _, r = self.anagrams2.get_anagrams("roping")
    self.assertEqual(r, ['poring', 'roping'])

    _, r = self.anagrams2.get_anagrams("roquemore")
    self.assertEqual(r, ['roquemore'])

    _, r = self.anagrams2.get_anagrams("rorschach")
    self.assertEqual(r, ['rorschach'])

    _, r = self.anagrams2.get_anagrams("rosa")
    self.assertEqual(r, ['oars', 'rosa', 'soar'])

    _, r = self.anagrams2.get_anagrams("rosabelle")
    self.assertEqual(r, ['rosabelle'])

    _, r = self.anagrams2.get_anagrams("rosalie")
    self.assertEqual(r, ['rosalie'])

    _, r = self.anagrams2.get_anagrams("rosary")
    self.assertEqual(r, ['rosary'])

    _, r = self.anagrams2.get_anagrams("rose")
    self.assertEqual(r, ['eros', 'ores', 'rose', 'sore'])

    _, r = self.anagrams2.get_anagrams("rosebud")
    self.assertEqual(r, ['rosebud'])

    _, r = self.anagrams2.get_anagrams("rosebuds")
    self.assertEqual(r, ['rosebuds'])

    _, r = self.anagrams2.get_anagrams("rosebush")
    self.assertEqual(r, ['rosebush'])

    _, r = self.anagrams2.get_anagrams("roseland")
    self.assertEqual(r, ['roseland'])

    _, r = self.anagrams2.get_anagrams("rosella")
    self.assertEqual(r, ['rosella'])

    _, r = self.anagrams2.get_anagrams("rosemary")
    self.assertEqual(r, ['rosemary'])

    _, r = self.anagrams2.get_anagrams("rosen")
    self.assertEqual(r, ['norse', 'rosen', 'snore'])

    _, r = self.anagrams2.get_anagrams("rosenberg")
    self.assertEqual(r, ['rosenberg'])

    _, r = self.anagrams2.get_anagrams("rosenblum")
    self.assertEqual(r, ['rosenblum'])

    _, r = self.anagrams2.get_anagrams("rosenthal")
    self.assertEqual(r, ['rosenthal'])

    _, r = self.anagrams2.get_anagrams("rosenzweig")
    self.assertEqual(r, ['rosenzweig'])

    _, r = self.anagrams2.get_anagrams("roses")
    self.assertEqual(r, ['roses', 'sores'])

    _, r = self.anagrams2.get_anagrams("rosetta")
    self.assertEqual(r, ['rosetta', 'rotates', 'toaster'])

    _, r = self.anagrams2.get_anagrams("rosette")
    self.assertEqual(r, ['rosette'])

    _, r = self.anagrams2.get_anagrams("rosie")
    self.assertEqual(r, ['rosie'])

    _, r = self.anagrams2.get_anagrams("rosiness")
    self.assertEqual(r, ['rosiness'])

    _, r = self.anagrams2.get_anagrams("ross")
    self.assertEqual(r, ['ross'])

    _, r = self.anagrams2.get_anagrams("rossi")
    self.assertEqual(r, ['rossi'])

    _, r = self.anagrams2.get_anagrams("roster")
    self.assertEqual(r, ['resort', 'roster', 'sorter'])

    _, r = self.anagrams2.get_anagrams("rostrum")
    self.assertEqual(r, ['rostrum'])

    _, r = self.anagrams2.get_anagrams("roswell")
    self.assertEqual(r, ['roswell'])

    _, r = self.anagrams2.get_anagrams("rosy")
    self.assertEqual(r, ['rosy'])

    _, r = self.anagrams2.get_anagrams("rot")
    self.assertEqual(r, ['rot'])

    _, r = self.anagrams2.get_anagrams("rotarian")
    self.assertEqual(r, ['rotarian'])

    _, r = self.anagrams2.get_anagrams("rotarians")
    self.assertEqual(r, ['rotarians'])

    _, r = self.anagrams2.get_anagrams("rotary")
    self.assertEqual(r, ['rotary'])

    _, r = self.anagrams2.get_anagrams("rotate")
    self.assertEqual(r, ['rotate'])

    _, r = self.anagrams2.get_anagrams("rotated")
    self.assertEqual(r, ['rotated'])

    _, r = self.anagrams2.get_anagrams("rotates")
    self.assertEqual(r, ['rosetta', 'rotates', 'toaster'])

    _, r = self.anagrams2.get_anagrams("rotating")
    self.assertEqual(r, ['rotating'])

    _, r = self.anagrams2.get_anagrams("rotation")
    self.assertEqual(r, ['rotation'])

    _, r = self.anagrams2.get_anagrams("rotational")
    self.assertEqual(r, ['rotational'])

    _, r = self.anagrams2.get_anagrams("rotations")
    self.assertEqual(r, ['rotations'])

    _, r = self.anagrams2.get_anagrams("rotator")
    self.assertEqual(r, ['rotator'])

    _, r = self.anagrams2.get_anagrams("roth")
    self.assertEqual(r, ['roth', 'thor'])

    _, r = self.anagrams2.get_anagrams("rothschild")
    self.assertEqual(r, ['rothschild'])

    _, r = self.anagrams2.get_anagrams("rotor")
    self.assertEqual(r, ['rotor'])

    _, r = self.anagrams2.get_anagrams("rots")
    self.assertEqual(r, ['rots', 'sort'])

    _, r = self.anagrams2.get_anagrams("rotten")
    self.assertEqual(r, ['rotten'])

    _, r = self.anagrams2.get_anagrams("rottenness")
    self.assertEqual(r, ['rottenness'])

    _, r = self.anagrams2.get_anagrams("rotterdam")
    self.assertEqual(r, ['rotterdam'])

    _, r = self.anagrams2.get_anagrams("rotting")
    self.assertEqual(r, ['rotting'])

    _, r = self.anagrams2.get_anagrams("rotund")
    self.assertEqual(r, ['rotund'])

    _, r = self.anagrams2.get_anagrams("rotunda")
    self.assertEqual(r, ['rotunda'])

    _, r = self.anagrams2.get_anagrams("rouge")
    self.assertEqual(r, ['rogue', 'rouge'])

    _, r = self.anagrams2.get_anagrams("rough")
    self.assertEqual(r, ['rough'])

    _, r = self.anagrams2.get_anagrams("roughed")
    self.assertEqual(r, ['roughed'])

    _, r = self.anagrams2.get_anagrams("roughen")
    self.assertEqual(r, ['roughen'])

    _, r = self.anagrams2.get_anagrams("rougher")
    self.assertEqual(r, ['rougher'])

    _, r = self.anagrams2.get_anagrams("roughest")
    self.assertEqual(r, ['roughest'])

    _, r = self.anagrams2.get_anagrams("roughly")
    self.assertEqual(r, ['roughly'])

    _, r = self.anagrams2.get_anagrams("roughneck")
    self.assertEqual(r, ['roughneck'])

    _, r = self.anagrams2.get_anagrams("roughness")
    self.assertEqual(r, ['roughness'])

    _, r = self.anagrams2.get_anagrams("roulette")
    self.assertEqual(r, ['roulette'])

    _, r = self.anagrams2.get_anagrams("round")
    self.assertEqual(r, ['round'])

    _, r = self.anagrams2.get_anagrams("roundabout")
    self.assertEqual(r, ['roundabout'])

    _, r = self.anagrams2.get_anagrams("rounded")
    self.assertEqual(r, ['rounded'])

    _, r = self.anagrams2.get_anagrams("roundedness")
    self.assertEqual(r, ['roundedness'])

    _, r = self.anagrams2.get_anagrams("rounder")
    self.assertEqual(r, ['rounder'])

    _, r = self.anagrams2.get_anagrams("roundest")
    self.assertEqual(r, ['roundest'])

    _, r = self.anagrams2.get_anagrams("roundhead")
    self.assertEqual(r, ['roundhead'])

    _, r = self.anagrams2.get_anagrams("roundhouse")
    self.assertEqual(r, ['roundhouse'])

    _, r = self.anagrams2.get_anagrams("rounding")
    self.assertEqual(r, ['rounding'])

    _, r = self.anagrams2.get_anagrams("roundly")
    self.assertEqual(r, ['roundly'])

    _, r = self.anagrams2.get_anagrams("roundness")
    self.assertEqual(r, ['roundness'])

    _, r = self.anagrams2.get_anagrams("roundoff")
    self.assertEqual(r, ['roundoff'])

    _, r = self.anagrams2.get_anagrams("rounds")
    self.assertEqual(r, ['rounds'])

    _, r = self.anagrams2.get_anagrams("roundtable")
    self.assertEqual(r, ['roundtable'])

    _, r = self.anagrams2.get_anagrams("roundup")
    self.assertEqual(r, ['roundup'])

    _, r = self.anagrams2.get_anagrams("roundworm")
    self.assertEqual(r, ['roundworm'])

    _, r = self.anagrams2.get_anagrams("rourke")
    self.assertEqual(r, ['rourke'])

    _, r = self.anagrams2.get_anagrams("rouse")
    self.assertEqual(r, ['rouse'])

    _, r = self.anagrams2.get_anagrams("roused")
    self.assertEqual(r, ['roused', 'soured'])

    _, r = self.anagrams2.get_anagrams("rouses")
    self.assertEqual(r, ['rouses'])

    _, r = self.anagrams2.get_anagrams("rousing")
    self.assertEqual(r, ['rousing', 'souring'])

    _, r = self.anagrams2.get_anagrams("rousseau")
    self.assertEqual(r, ['rousseau'])

    _, r = self.anagrams2.get_anagrams("roustabout")
    self.assertEqual(r, ['roustabout'])

    _, r = self.anagrams2.get_anagrams("rout")
    self.assertEqual(r, ['rout', 'tour'])

    _, r = self.anagrams2.get_anagrams("route")
    self.assertEqual(r, ['outer', 'route'])

    _, r = self.anagrams2.get_anagrams("routed")
    self.assertEqual(r, ['detour', 'routed', 'toured'])

    _, r = self.anagrams2.get_anagrams("router")
    self.assertEqual(r, ['router'])

    _, r = self.anagrams2.get_anagrams("routers")
    self.assertEqual(r, ['routers', 'trouser'])

    _, r = self.anagrams2.get_anagrams("routes")
    self.assertEqual(r, ['routes'])

    _, r = self.anagrams2.get_anagrams("routine")
    self.assertEqual(r, ['routine'])

    _, r = self.anagrams2.get_anagrams("routinely")
    self.assertEqual(r, ['routinely'])

    _, r = self.anagrams2.get_anagrams("routines")
    self.assertEqual(r, ['routines'])

    _, r = self.anagrams2.get_anagrams("routing")
    self.assertEqual(r, ['routing', 'touring'])

    _, r = self.anagrams2.get_anagrams("routings")
    self.assertEqual(r, ['routings'])

    _, r = self.anagrams2.get_anagrams("rove")
    self.assertEqual(r, ['over', 'rove'])

    _, r = self.anagrams2.get_anagrams("roved")
    self.assertEqual(r, ['dover', 'drove', 'roved'])

    _, r = self.anagrams2.get_anagrams("rover")
    self.assertEqual(r, ['rover'])

    _, r = self.anagrams2.get_anagrams("roves")
    self.assertEqual(r, ['roves', 'servo'])

    _, r = self.anagrams2.get_anagrams("roving")
    self.assertEqual(r, ['roving'])

    _, r = self.anagrams2.get_anagrams("row")
    self.assertEqual(r, ['row'])

    _, r = self.anagrams2.get_anagrams("rowboat")
    self.assertEqual(r, ['rowboat'])

    _, r = self.anagrams2.get_anagrams("rowdy")
    self.assertEqual(r, ['dowry', 'rowdy', 'wordy'])

    _, r = self.anagrams2.get_anagrams("rowe")
    self.assertEqual(r, ['rowe', 'wore'])

    _, r = self.anagrams2.get_anagrams("rowed")
    self.assertEqual(r, ['rowed'])

    _, r = self.anagrams2.get_anagrams("rowena")
    self.assertEqual(r, ['rowena'])

    _, r = self.anagrams2.get_anagrams("rower")
    self.assertEqual(r, ['rower'])

    _, r = self.anagrams2.get_anagrams("rowing")
    self.assertEqual(r, ['rowing'])

    _, r = self.anagrams2.get_anagrams("rowland")
    self.assertEqual(r, ['rowland', 'waldron'])

    _, r = self.anagrams2.get_anagrams("rowley")
    self.assertEqual(r, ['rowley'])

    _, r = self.anagrams2.get_anagrams("rows")
    self.assertEqual(r, ['rows'])

    _, r = self.anagrams2.get_anagrams("roxbury")
    self.assertEqual(r, ['roxbury'])

    _, r = self.anagrams2.get_anagrams("roxy")
    self.assertEqual(r, ['roxy'])

    _, r = self.anagrams2.get_anagrams("roy")
    self.assertEqual(r, ['roy'])

    _, r = self.anagrams2.get_anagrams("royal")
    self.assertEqual(r, ['royal'])

    _, r = self.anagrams2.get_anagrams("royalist")
    self.assertEqual(r, ['royalist', 'solitary'])

    _, r = self.anagrams2.get_anagrams("royalists")
    self.assertEqual(r, ['royalists'])

    _, r = self.anagrams2.get_anagrams("royally")
    self.assertEqual(r, ['royally'])

    _, r = self.anagrams2.get_anagrams("royalties")
    self.assertEqual(r, ['royalties'])

    _, r = self.anagrams2.get_anagrams("royalty")
    self.assertEqual(r, ['royalty'])

    _, r = self.anagrams2.get_anagrams("royce")
    self.assertEqual(r, ['corey', 'royce'])

    _, r = self.anagrams2.get_anagrams("rozelle")
    self.assertEqual(r, ['rozelle'])

    _, r = self.anagrams2.get_anagrams("ruanda")
    self.assertEqual(r, ['ruanda'])

    _, r = self.anagrams2.get_anagrams("rub")
    self.assertEqual(r, ['rub'])

    _, r = self.anagrams2.get_anagrams("rubaiyat")
    self.assertEqual(r, ['rubaiyat'])

    _, r = self.anagrams2.get_anagrams("rubbed")
    self.assertEqual(r, ['rubbed'])

    _, r = self.anagrams2.get_anagrams("rubber")
    self.assertEqual(r, ['rubber'])

    _, r = self.anagrams2.get_anagrams("rubbers")
    self.assertEqual(r, ['rubbers'])

    _, r = self.anagrams2.get_anagrams("rubbery")
    self.assertEqual(r, ['rubbery'])

    _, r = self.anagrams2.get_anagrams("rubbing")
    self.assertEqual(r, ['rubbing'])

    _, r = self.anagrams2.get_anagrams("rubbish")
    self.assertEqual(r, ['rubbish'])

    _, r = self.anagrams2.get_anagrams("rubble")
    self.assertEqual(r, ['rubble'])

    _, r = self.anagrams2.get_anagrams("rubdown")
    self.assertEqual(r, ['rubdown'])

    _, r = self.anagrams2.get_anagrams("rube")
    self.assertEqual(r, ['reub', 'rube'])

    _, r = self.anagrams2.get_anagrams("ruben")
    self.assertEqual(r, ['burne', 'ruben'])

    _, r = self.anagrams2.get_anagrams("rubens")
    self.assertEqual(r, ['burnes', 'rubens'])

    _, r = self.anagrams2.get_anagrams("rubies")
    self.assertEqual(r, ['bruise', 'buries', 'busier', 'rubies'])

    _, r = self.anagrams2.get_anagrams("rubin")
    self.assertEqual(r, ['rubin'])

    _, r = self.anagrams2.get_anagrams("ruble")
    self.assertEqual(r, ['bluer', 'ruble'])

    _, r = self.anagrams2.get_anagrams("rubles")
    self.assertEqual(r, ['rubles'])

    _, r = self.anagrams2.get_anagrams("rubout")
    self.assertEqual(r, ['rubout'])

    _, r = self.anagrams2.get_anagrams("rubs")
    self.assertEqual(r, ['rubs'])

    _, r = self.anagrams2.get_anagrams("ruby")
    self.assertEqual(r, ['bury', 'ruby'])

    _, r = self.anagrams2.get_anagrams("rudder")
    self.assertEqual(r, ['rudder'])

    _, r = self.anagrams2.get_anagrams("rudders")
    self.assertEqual(r, ['rudders'])

    _, r = self.anagrams2.get_anagrams("ruddiness")
    self.assertEqual(r, ['ruddiness'])

    _, r = self.anagrams2.get_anagrams("ruddy")
    self.assertEqual(r, ['ruddy'])

    _, r = self.anagrams2.get_anagrams("rude")
    self.assertEqual(r, ['rude'])

    _, r = self.anagrams2.get_anagrams("rudely")
    self.assertEqual(r, ['rudely'])

    _, r = self.anagrams2.get_anagrams("rudeness")
    self.assertEqual(r, ['rudeness'])

    _, r = self.anagrams2.get_anagrams("rudiment")
    self.assertEqual(r, ['rudiment'])

    _, r = self.anagrams2.get_anagrams("rudimentary")
    self.assertEqual(r, ['rudimentary'])

    _, r = self.anagrams2.get_anagrams("rudiments")
    self.assertEqual(r, ['rudiments'])

    _, r = self.anagrams2.get_anagrams("rudolf")
    self.assertEqual(r, ['rudolf'])

    _, r = self.anagrams2.get_anagrams("rudolph")
    self.assertEqual(r, ['rudolph'])

    _, r = self.anagrams2.get_anagrams("rudy")
    self.assertEqual(r, ['rudy'])

    _, r = self.anagrams2.get_anagrams("rudyard")
    self.assertEqual(r, ['rudyard'])

    _, r = self.anagrams2.get_anagrams("rue")
    self.assertEqual(r, ['rue'])

    _, r = self.anagrams2.get_anagrams("ruefully")
    self.assertEqual(r, ['ruefully'])

    _, r = self.anagrams2.get_anagrams("ruffian")
    self.assertEqual(r, ['ruffian'])

    _, r = self.anagrams2.get_anagrams("ruffianly")
    self.assertEqual(r, ['ruffianly'])

    _, r = self.anagrams2.get_anagrams("ruffians")
    self.assertEqual(r, ['ruffians'])

    _, r = self.anagrams2.get_anagrams("ruffle")
    self.assertEqual(r, ['ruffle'])

    _, r = self.anagrams2.get_anagrams("ruffled")
    self.assertEqual(r, ['ruffled'])

    _, r = self.anagrams2.get_anagrams("ruffles")
    self.assertEqual(r, ['ruffles'])

    _, r = self.anagrams2.get_anagrams("rufus")
    self.assertEqual(r, ['rufus'])

    _, r = self.anagrams2.get_anagrams("rug")
    self.assertEqual(r, ['rug'])

    _, r = self.anagrams2.get_anagrams("rugged")
    self.assertEqual(r, ['grudge', 'rugged'])

    _, r = self.anagrams2.get_anagrams("ruggedly")
    self.assertEqual(r, ['ruggedly'])

    _, r = self.anagrams2.get_anagrams("ruggedness")
    self.assertEqual(r, ['ruggedness'])

    _, r = self.anagrams2.get_anagrams("rugs")
    self.assertEqual(r, ['rugs'])

    _, r = self.anagrams2.get_anagrams("ruin")
    self.assertEqual(r, ['ruin'])

    _, r = self.anagrams2.get_anagrams("ruination")
    self.assertEqual(r, ['ruination', 'urination'])

    _, r = self.anagrams2.get_anagrams("ruinations")
    self.assertEqual(r, ['ruinations'])

    _, r = self.anagrams2.get_anagrams("ruined")
    self.assertEqual(r, ['ruined'])

    _, r = self.anagrams2.get_anagrams("ruining")
    self.assertEqual(r, ['ruining'])

    _, r = self.anagrams2.get_anagrams("ruinous")
    self.assertEqual(r, ['ruinous'])

    _, r = self.anagrams2.get_anagrams("ruinously")
    self.assertEqual(r, ['ruinously'])

    _, r = self.anagrams2.get_anagrams("ruins")
    self.assertEqual(r, ['ruins'])

    _, r = self.anagrams2.get_anagrams("rule")
    self.assertEqual(r, ['lure', 'rule'])

    _, r = self.anagrams2.get_anagrams("ruled")
    self.assertEqual(r, ['lured', 'ruled'])

    _, r = self.anagrams2.get_anagrams("ruler")
    self.assertEqual(r, ['ruler'])

    _, r = self.anagrams2.get_anagrams("rulers")
    self.assertEqual(r, ['rulers'])

    _, r = self.anagrams2.get_anagrams("rules")
    self.assertEqual(r, ['lures', 'rules'])

    _, r = self.anagrams2.get_anagrams("ruling")
    self.assertEqual(r, ['luring', 'ruling'])

    _, r = self.anagrams2.get_anagrams("rulings")
    self.assertEqual(r, ['rulings'])

    _, r = self.anagrams2.get_anagrams("rum")
    self.assertEqual(r, ['rum'])

    _, r = self.anagrams2.get_anagrams("rumania")
    self.assertEqual(r, ['rumania'])

    _, r = self.anagrams2.get_anagrams("rumanian")
    self.assertEqual(r, ['rumanian'])

    _, r = self.anagrams2.get_anagrams("rumanians")
    self.assertEqual(r, ['rumanians'])

    _, r = self.anagrams2.get_anagrams("rumble")
    self.assertEqual(r, ['lumber', 'rumble'])

    _, r = self.anagrams2.get_anagrams("rumbled")
    self.assertEqual(r, ['rumbled'])

    _, r = self.anagrams2.get_anagrams("rumbler")
    self.assertEqual(r, ['rumbler'])

    _, r = self.anagrams2.get_anagrams("rumbles")
    self.assertEqual(r, ['rumbles', 'slumber'])

    _, r = self.anagrams2.get_anagrams("rumbling")
    self.assertEqual(r, ['rumbling'])

    _, r = self.anagrams2.get_anagrams("rumen")
    self.assertEqual(r, ['rumen'])

    _, r = self.anagrams2.get_anagrams("rumford")
    self.assertEqual(r, ['rumford'])

    _, r = self.anagrams2.get_anagrams("rummage")
    self.assertEqual(r, ['rummage'])

    _, r = self.anagrams2.get_anagrams("rummel")
    self.assertEqual(r, ['rummel'])

    _, r = self.anagrams2.get_anagrams("rummy")
    self.assertEqual(r, ['rummy'])

    _, r = self.anagrams2.get_anagrams("rumor")
    self.assertEqual(r, ['rumor'])

    _, r = self.anagrams2.get_anagrams("rumored")
    self.assertEqual(r, ['rumored'])

    _, r = self.anagrams2.get_anagrams("rumors")
    self.assertEqual(r, ['rumors'])

    _, r = self.anagrams2.get_anagrams("rump")
    self.assertEqual(r, ['rump'])

    _, r = self.anagrams2.get_anagrams("rumple")
    self.assertEqual(r, ['rumple'])

    _, r = self.anagrams2.get_anagrams("rumpled")
    self.assertEqual(r, ['rumpled'])

    _, r = self.anagrams2.get_anagrams("rumply")
    self.assertEqual(r, ['rumply'])

    _, r = self.anagrams2.get_anagrams("rumpus")
    self.assertEqual(r, ['rumpus'])

    _, r = self.anagrams2.get_anagrams("run")
    self.assertEqual(r, ['run', 'urn'])

    _, r = self.anagrams2.get_anagrams("runaway")
    self.assertEqual(r, ['runaway'])

    _, r = self.anagrams2.get_anagrams("rundown")
    self.assertEqual(r, ['rundown'])

    _, r = self.anagrams2.get_anagrams("rung")
    self.assertEqual(r, ['rung'])

    _, r = self.anagrams2.get_anagrams("runge")
    self.assertEqual(r, ['runge'])

    _, r = self.anagrams2.get_anagrams("rungs")
    self.assertEqual(r, ['rungs'])

    _, r = self.anagrams2.get_anagrams("runnable")
    self.assertEqual(r, ['runnable'])

    _, r = self.anagrams2.get_anagrams("runner")
    self.assertEqual(r, ['runner'])

    _, r = self.anagrams2.get_anagrams("runners")
    self.assertEqual(r, ['runners'])

    _, r = self.anagrams2.get_anagrams("running")
    self.assertEqual(r, ['running'])

    _, r = self.anagrams2.get_anagrams("runnymede")
    self.assertEqual(r, ['runnymede'])

    _, r = self.anagrams2.get_anagrams("runoff")
    self.assertEqual(r, ['runoff'])

    _, r = self.anagrams2.get_anagrams("runs")
    self.assertEqual(r, ['runs', 'urns'])

    _, r = self.anagrams2.get_anagrams("runt")
    self.assertEqual(r, ['runt', 'turn'])

    _, r = self.anagrams2.get_anagrams("runtime")
    self.assertEqual(r, ['minuter', 'runtime'])

    _, r = self.anagrams2.get_anagrams("runyon")
    self.assertEqual(r, ['runyon'])

    _, r = self.anagrams2.get_anagrams("rupee")
    self.assertEqual(r, ['rupee'])

    _, r = self.anagrams2.get_anagrams("ruppert")
    self.assertEqual(r, ['ruppert'])

    _, r = self.anagrams2.get_anagrams("rupture")
    self.assertEqual(r, ['rupture'])

    _, r = self.anagrams2.get_anagrams("ruptured")
    self.assertEqual(r, ['ruptured'])

    _, r = self.anagrams2.get_anagrams("ruptures")
    self.assertEqual(r, ['ruptures'])

    _, r = self.anagrams2.get_anagrams("rupturing")
    self.assertEqual(r, ['rupturing'])

    _, r = self.anagrams2.get_anagrams("rural")
    self.assertEqual(r, ['rural'])

    _, r = self.anagrams2.get_anagrams("rurally")
    self.assertEqual(r, ['rurally'])

    _, r = self.anagrams2.get_anagrams("rush")
    self.assertEqual(r, ['rush'])

    _, r = self.anagrams2.get_anagrams("rushed")
    self.assertEqual(r, ['rushed'])

    _, r = self.anagrams2.get_anagrams("rusher")
    self.assertEqual(r, ['rusher'])

    _, r = self.anagrams2.get_anagrams("rushes")
    self.assertEqual(r, ['rhesus', 'rushes', 'ushers'])

    _, r = self.anagrams2.get_anagrams("rushing")
    self.assertEqual(r, ['rushing'])

    _, r = self.anagrams2.get_anagrams("rushmore")
    self.assertEqual(r, ['humorers', 'rushmore'])

    _, r = self.anagrams2.get_anagrams("russ")
    self.assertEqual(r, ['russ'])

    _, r = self.anagrams2.get_anagrams("russell")
    self.assertEqual(r, ['russell'])

    _, r = self.anagrams2.get_anagrams("russet")
    self.assertEqual(r, ['russet'])

    _, r = self.anagrams2.get_anagrams("russia")
    self.assertEqual(r, ['russia'])

    _, r = self.anagrams2.get_anagrams("russian")
    self.assertEqual(r, ['russian'])

    _, r = self.anagrams2.get_anagrams("russianizations")
    self.assertEqual(r, ['russianizations'])

    _, r = self.anagrams2.get_anagrams("russianizes")
    self.assertEqual(r, ['russianizes'])

    _, r = self.anagrams2.get_anagrams("russians")
    self.assertEqual(r, ['russians'])

    _, r = self.anagrams2.get_anagrams("russo")
    self.assertEqual(r, ['russo', 'sours'])

    _, r = self.anagrams2.get_anagrams("rust")
    self.assertEqual(r, ['rust', 'ruts'])

    _, r = self.anagrams2.get_anagrams("rusted")
    self.assertEqual(r, ['duster', 'rusted'])

    _, r = self.anagrams2.get_anagrams("rustic")
    self.assertEqual(r, ['citrus', 'curtis', 'rustic'])

    _, r = self.anagrams2.get_anagrams("rusticate")
    self.assertEqual(r, ['rusticate'])

    _, r = self.anagrams2.get_anagrams("rusticated")
    self.assertEqual(r, ['rusticated'])

    _, r = self.anagrams2.get_anagrams("rusticates")
    self.assertEqual(r, ['rusticates'])

    _, r = self.anagrams2.get_anagrams("rusticating")
    self.assertEqual(r, ['rusticating'])

    _, r = self.anagrams2.get_anagrams("rustication")
    self.assertEqual(r, ['rustication'])

    _, r = self.anagrams2.get_anagrams("rusting")
    self.assertEqual(r, ['rusting'])

    _, r = self.anagrams2.get_anagrams("rustle")
    self.assertEqual(r, ['luster', 'result', 'rustle', 'ulster'])

    _, r = self.anagrams2.get_anagrams("rustled")
    self.assertEqual(r, ['rustled'])

    _, r = self.anagrams2.get_anagrams("rustler")
    self.assertEqual(r, ['rustler'])

    _, r = self.anagrams2.get_anagrams("rustlers")
    self.assertEqual(r, ['rustlers'])

    _, r = self.anagrams2.get_anagrams("rustling")
    self.assertEqual(r, ['rustling'])

    _, r = self.anagrams2.get_anagrams("rusts")
    self.assertEqual(r, ['rusts'])

    _, r = self.anagrams2.get_anagrams("rusty")
    self.assertEqual(r, ['rusty'])

    _, r = self.anagrams2.get_anagrams("rut")
    self.assertEqual(r, ['rut'])

    _, r = self.anagrams2.get_anagrams("rutgers")
    self.assertEqual(r, ['rutgers'])

    _, r = self.anagrams2.get_anagrams("ruth")
    self.assertEqual(r, ['hurt', 'ruth'])

    _, r = self.anagrams2.get_anagrams("rutherford")
    self.assertEqual(r, ['rutherford'])

    _, r = self.anagrams2.get_anagrams("ruthless")
    self.assertEqual(r, ['ruthless'])

    _, r = self.anagrams2.get_anagrams("ruthlessly")
    self.assertEqual(r, ['ruthlessly'])

    _, r = self.anagrams2.get_anagrams("ruthlessness")
    self.assertEqual(r, ['ruthlessness'])

    _, r = self.anagrams2.get_anagrams("rutland")
    self.assertEqual(r, ['rutland'])

    _, r = self.anagrams2.get_anagrams("rutledge")
    self.assertEqual(r, ['rutledge'])

    _, r = self.anagrams2.get_anagrams("ruts")
    self.assertEqual(r, ['rust', 'ruts'])

    _, r = self.anagrams2.get_anagrams("rwanda")
    self.assertEqual(r, ['rwanda'])

    _, r = self.anagrams2.get_anagrams("ryan")
    self.assertEqual(r, ['nary', 'ryan', 'yarn'])

    _, r = self.anagrams2.get_anagrams("rydberg")
    self.assertEqual(r, ['rydberg'])

    _, r = self.anagrams2.get_anagrams("ryder")
    self.assertEqual(r, ['ryder'])

    _, r = self.anagrams2.get_anagrams("rye")
    self.assertEqual(r, ['rye'])

    _, r = self.anagrams2.get_anagrams("sabbath")
    self.assertEqual(r, ['sabbath'])

    _, r = self.anagrams2.get_anagrams("sabbathize")
    self.assertEqual(r, ['sabbathize'])

    _, r = self.anagrams2.get_anagrams("sabbathizes")
    self.assertEqual(r, ['sabbathizes'])

    _, r = self.anagrams2.get_anagrams("sabbatical")
    self.assertEqual(r, ['sabbatical'])

    _, r = self.anagrams2.get_anagrams("saber")
    self.assertEqual(r, ['bares', 'baser', 'bears', 'braes', 'saber'])

    _, r = self.anagrams2.get_anagrams("sabers")
    self.assertEqual(r, ['sabers'])

    _, r = self.anagrams2.get_anagrams("sabina")
    self.assertEqual(r, ['sabina'])

    _, r = self.anagrams2.get_anagrams("sabine")
    self.assertEqual(r, ['sabine'])

    _, r = self.anagrams2.get_anagrams("sable")
    self.assertEqual(r, ['bales', 'basel', 'blase', 'sable'])

    _, r = self.anagrams2.get_anagrams("sables")
    self.assertEqual(r, ['sables'])

    _, r = self.anagrams2.get_anagrams("sabotage")
    self.assertEqual(r, ['sabotage'])

    _, r = self.anagrams2.get_anagrams("sachs")
    self.assertEqual(r, ['sachs'])

    _, r = self.anagrams2.get_anagrams("sack")
    self.assertEqual(r, ['cask', 'sack'])

    _, r = self.anagrams2.get_anagrams("sacker")
    self.assertEqual(r, ['creaks', 'sacker'])

    _, r = self.anagrams2.get_anagrams("sacking")
    self.assertEqual(r, ['sacking'])

    _, r = self.anagrams2.get_anagrams("sacks")
    self.assertEqual(r, ['casks', 'sacks'])

    _, r = self.anagrams2.get_anagrams("sacrament")
    self.assertEqual(r, ['sacrament'])

    _, r = self.anagrams2.get_anagrams("sacramento")
    self.assertEqual(r, ['sacramento'])

    _, r = self.anagrams2.get_anagrams("sacred")
    self.assertEqual(r, ['cadres', 'sacred', 'scared'])

    _, r = self.anagrams2.get_anagrams("sacredly")
    self.assertEqual(r, ['sacredly'])

    _, r = self.anagrams2.get_anagrams("sacredness")
    self.assertEqual(r, ['sacredness'])

    _, r = self.anagrams2.get_anagrams("sacrifice")
    self.assertEqual(r, ['sacrifice'])

    _, r = self.anagrams2.get_anagrams("sacrificed")
    self.assertEqual(r, ['sacrificed'])

    _, r = self.anagrams2.get_anagrams("sacrificer")
    self.assertEqual(r, ['sacrificer'])

    _, r = self.anagrams2.get_anagrams("sacrificers")
    self.assertEqual(r, ['sacrificers'])

    _, r = self.anagrams2.get_anagrams("sacrifices")
    self.assertEqual(r, ['sacrifices'])

    _, r = self.anagrams2.get_anagrams("sacrificial")
    self.assertEqual(r, ['sacrificial'])

    _, r = self.anagrams2.get_anagrams("sacrificially")
    self.assertEqual(r, ['sacrificially'])

    _, r = self.anagrams2.get_anagrams("sacrificing")
    self.assertEqual(r, ['sacrificing'])

    _, r = self.anagrams2.get_anagrams("sacrilege")
    self.assertEqual(r, ['sacrilege'])

    _, r = self.anagrams2.get_anagrams("sacrilegious")
    self.assertEqual(r, ['sacrilegious'])

    _, r = self.anagrams2.get_anagrams("sacrosanct")
    self.assertEqual(r, ['sacrosanct'])

    _, r = self.anagrams2.get_anagrams("sad")
    self.assertEqual(r, ['ads', 'sad'])

    _, r = self.anagrams2.get_anagrams("sadden")
    self.assertEqual(r, ['sadden', 'sanded'])

    _, r = self.anagrams2.get_anagrams("saddened")
    self.assertEqual(r, ['saddened'])

    _, r = self.anagrams2.get_anagrams("saddens")
    self.assertEqual(r, ['saddens'])

    _, r = self.anagrams2.get_anagrams("sadder")
    self.assertEqual(r, ['adders', 'dreads', 'sadder'])

    _, r = self.anagrams2.get_anagrams("saddest")
    self.assertEqual(r, ['saddest'])

    _, r = self.anagrams2.get_anagrams("saddle")
    self.assertEqual(r, ['saddle'])

    _, r = self.anagrams2.get_anagrams("saddlebag")
    self.assertEqual(r, ['saddlebag'])

    _, r = self.anagrams2.get_anagrams("saddled")
    self.assertEqual(r, ['saddled'])

    _, r = self.anagrams2.get_anagrams("saddles")
    self.assertEqual(r, ['saddles'])

    _, r = self.anagrams2.get_anagrams("sadie")
    self.assertEqual(r, ['aides', 'aside', 'ideas', 'sadie'])

    _, r = self.anagrams2.get_anagrams("sadism")
    self.assertEqual(r, ['sadism'])

    _, r = self.anagrams2.get_anagrams("sadist")
    self.assertEqual(r, ['sadist'])

    _, r = self.anagrams2.get_anagrams("sadistic")
    self.assertEqual(r, ['sadistic'])

    _, r = self.anagrams2.get_anagrams("sadistically")
    self.assertEqual(r, ['sadistically'])

    _, r = self.anagrams2.get_anagrams("sadists")
    self.assertEqual(r, ['sadists'])

    _, r = self.anagrams2.get_anagrams("sadler")
    self.assertEqual(r, ['sadler'])

    _, r = self.anagrams2.get_anagrams("sadly")
    self.assertEqual(r, ['sadly'])

    _, r = self.anagrams2.get_anagrams("sadness")
    self.assertEqual(r, ['sadness'])

    _, r = self.anagrams2.get_anagrams("safari")
    self.assertEqual(r, ['safari'])

    _, r = self.anagrams2.get_anagrams("safe")
    self.assertEqual(r, ['safe'])

    _, r = self.anagrams2.get_anagrams("safeguard")
    self.assertEqual(r, ['safeguard'])

    _, r = self.anagrams2.get_anagrams("safeguarded")
    self.assertEqual(r, ['safeguarded'])

    _, r = self.anagrams2.get_anagrams("safeguarding")
    self.assertEqual(r, ['safeguarding'])

    _, r = self.anagrams2.get_anagrams("safeguards")
    self.assertEqual(r, ['safeguards'])

    _, r = self.anagrams2.get_anagrams("safekeeping")
    self.assertEqual(r, ['safekeeping'])

    _, r = self.anagrams2.get_anagrams("safely")
    self.assertEqual(r, ['safely'])

    _, r = self.anagrams2.get_anagrams("safeness")
    self.assertEqual(r, ['safeness'])

    _, r = self.anagrams2.get_anagrams("safer")
    self.assertEqual(r, ['fares', 'fears', 'safer'])

    _, r = self.anagrams2.get_anagrams("safes")
    self.assertEqual(r, ['safes'])

    _, r = self.anagrams2.get_anagrams("safest")
    self.assertEqual(r, ['feasts', 'safest'])

    _, r = self.anagrams2.get_anagrams("safeties")
    self.assertEqual(r, ['safeties'])

    _, r = self.anagrams2.get_anagrams("safety")
    self.assertEqual(r, ['safety'])

    _, r = self.anagrams2.get_anagrams("saffron")
    self.assertEqual(r, ['saffron'])

    _, r = self.anagrams2.get_anagrams("sag")
    self.assertEqual(r, ['gas', 'sag'])

    _, r = self.anagrams2.get_anagrams("saga")
    self.assertEqual(r, ['saga'])

    _, r = self.anagrams2.get_anagrams("sagacious")
    self.assertEqual(r, ['sagacious'])

    _, r = self.anagrams2.get_anagrams("sagacity")
    self.assertEqual(r, ['sagacity'])

    _, r = self.anagrams2.get_anagrams("sage")
    self.assertEqual(r, ['ages', 'sage'])

    _, r = self.anagrams2.get_anagrams("sagebrush")
    self.assertEqual(r, ['sagebrush'])

    _, r = self.anagrams2.get_anagrams("sagely")
    self.assertEqual(r, ['sagely'])

    _, r = self.anagrams2.get_anagrams("sages")
    self.assertEqual(r, ['gases', 'sages'])

    _, r = self.anagrams2.get_anagrams("sagging")
    self.assertEqual(r, ['sagging'])

    _, r = self.anagrams2.get_anagrams("saginaw")
    self.assertEqual(r, ['saginaw'])

    _, r = self.anagrams2.get_anagrams("sagittal")
    self.assertEqual(r, ['sagittal'])

    _, r = self.anagrams2.get_anagrams("sagittarius")
    self.assertEqual(r, ['sagittarius'])

    _, r = self.anagrams2.get_anagrams("sags")
    self.assertEqual(r, ['sags'])

    _, r = self.anagrams2.get_anagrams("saguaro")
    self.assertEqual(r, ['saguaro'])

    _, r = self.anagrams2.get_anagrams("sahara")
    self.assertEqual(r, ['sahara'])

    _, r = self.anagrams2.get_anagrams("said")
    self.assertEqual(r, ['aids', 'said'])

    _, r = self.anagrams2.get_anagrams("saigon")
    self.assertEqual(r, ['saigon'])

    _, r = self.anagrams2.get_anagrams("sail")
    self.assertEqual(r, ['lisa', 'sail'])

    _, r = self.anagrams2.get_anagrams("sailboat")
    self.assertEqual(r, ['sailboat'])

    _, r = self.anagrams2.get_anagrams("sailed")
    self.assertEqual(r, ['ideals', 'ladies', 'sailed'])

    _, r = self.anagrams2.get_anagrams("sailfish")
    self.assertEqual(r, ['sailfish'])

    _, r = self.anagrams2.get_anagrams("sailing")
    self.assertEqual(r, ['sailing'])

    _, r = self.anagrams2.get_anagrams("sailor")
    self.assertEqual(r, ['sailor'])

    _, r = self.anagrams2.get_anagrams("sailorly")
    self.assertEqual(r, ['sailorly'])

    _, r = self.anagrams2.get_anagrams("sailors")
    self.assertEqual(r, ['sailors'])

    _, r = self.anagrams2.get_anagrams("sails")
    self.assertEqual(r, ['sails', 'silas'])

    _, r = self.anagrams2.get_anagrams("saint")
    self.assertEqual(r, ['saint', 'satin', 'stain'])

    _, r = self.anagrams2.get_anagrams("sainted")
    self.assertEqual(r, ['detains', 'instead', 'sainted', 'stained'])

    _, r = self.anagrams2.get_anagrams("sainthood")
    self.assertEqual(r, ['sainthood'])

    _, r = self.anagrams2.get_anagrams("saintly")
    self.assertEqual(r, ['nastily', 'saintly'])

    _, r = self.anagrams2.get_anagrams("saints")
    self.assertEqual(r, ['saints', 'stains'])

    _, r = self.anagrams2.get_anagrams("sake")
    self.assertEqual(r, ['sake'])

    _, r = self.anagrams2.get_anagrams("sakes")
    self.assertEqual(r, ['sakes'])

    _, r = self.anagrams2.get_anagrams("sal")
    self.assertEqual(r, ['sal'])

    _, r = self.anagrams2.get_anagrams("salaam")
    self.assertEqual(r, ['salaam'])

    _, r = self.anagrams2.get_anagrams("salable")
    self.assertEqual(r, ['salable'])

    _, r = self.anagrams2.get_anagrams("salad")
    self.assertEqual(r, ['salad'])

    _, r = self.anagrams2.get_anagrams("salads")
    self.assertEqual(r, ['salads'])

    _, r = self.anagrams2.get_anagrams("salamander")
    self.assertEqual(r, ['salamander'])

    _, r = self.anagrams2.get_anagrams("salami")
    self.assertEqual(r, ['salami'])

    _, r = self.anagrams2.get_anagrams("salaried")
    self.assertEqual(r, ['salaried'])

    _, r = self.anagrams2.get_anagrams("salaries")
    self.assertEqual(r, ['salaries'])

    _, r = self.anagrams2.get_anagrams("salary")
    self.assertEqual(r, ['salary'])

    _, r = self.anagrams2.get_anagrams("sale")
    self.assertEqual(r, ['sale', 'seal'])

    _, r = self.anagrams2.get_anagrams("salem")
    self.assertEqual(r, ['lames', 'males', 'meals', 'salem', 'selma'])

    _, r = self.anagrams2.get_anagrams("salerno")
    self.assertEqual(r, ['orleans', 'salerno'])

    _, r = self.anagrams2.get_anagrams("sales")
    self.assertEqual(r, ['sales', 'seals'])

    _, r = self.anagrams2.get_anagrams("salesgirl")
    self.assertEqual(r, ['salesgirl'])

    _, r = self.anagrams2.get_anagrams("salesian")
    self.assertEqual(r, ['salesian'])

    _, r = self.anagrams2.get_anagrams("saleslady")
    self.assertEqual(r, ['saleslady'])

    _, r = self.anagrams2.get_anagrams("salesman")
    self.assertEqual(r, ['salesman'])

    _, r = self.anagrams2.get_anagrams("salesmen")
    self.assertEqual(r, ['lameness', 'maleness', 'nameless', 'salesmen'])

    _, r = self.anagrams2.get_anagrams("salesperson")
    self.assertEqual(r, ['salesperson'])

    _, r = self.anagrams2.get_anagrams("salient")
    self.assertEqual(r, ['entails', 'salient'])

    _, r = self.anagrams2.get_anagrams("salina")
    self.assertEqual(r, ['salina'])

    _, r = self.anagrams2.get_anagrams("saline")
    self.assertEqual(r, ['aliens', 'saline'])

    _, r = self.anagrams2.get_anagrams("salisbury")
    self.assertEqual(r, ['salisbury'])

    _, r = self.anagrams2.get_anagrams("salish")
    self.assertEqual(r, ['salish'])

    _, r = self.anagrams2.get_anagrams("saliva")
    self.assertEqual(r, ['avails', 'saliva'])

    _, r = self.anagrams2.get_anagrams("salivary")
    self.assertEqual(r, ['salivary'])

    _, r = self.anagrams2.get_anagrams("salivate")
    self.assertEqual(r, ['salivate'])

    _, r = self.anagrams2.get_anagrams("salk")
    self.assertEqual(r, ['salk'])

    _, r = self.anagrams2.get_anagrams("salle")
    self.assertEqual(r, ['salle'])

    _, r = self.anagrams2.get_anagrams("sallies")
    self.assertEqual(r, ['sallies'])

    _, r = self.anagrams2.get_anagrams("sallow")
    self.assertEqual(r, ['allows', 'sallow'])

    _, r = self.anagrams2.get_anagrams("sally")
    self.assertEqual(r, ['sally'])

    _, r = self.anagrams2.get_anagrams("sallying")
    self.assertEqual(r, ['sallying', 'signally'])

    _, r = self.anagrams2.get_anagrams("salmon")
    self.assertEqual(r, ['salmon'])

    _, r = self.anagrams2.get_anagrams("salon")
    self.assertEqual(r, ['loans', 'salon', 'sloan'])

    _, r = self.anagrams2.get_anagrams("salons")
    self.assertEqual(r, ['salons'])

    _, r = self.anagrams2.get_anagrams("saloon")
    self.assertEqual(r, ['saloon'])

    _, r = self.anagrams2.get_anagrams("saloons")
    self.assertEqual(r, ['saloons'])

    _, r = self.anagrams2.get_anagrams("salt")
    self.assertEqual(r, ['last', 'salt', 'slat'])

    _, r = self.anagrams2.get_anagrams("salted")
    self.assertEqual(r, ['deltas', 'lasted', 'salted', 'slated'])

    _, r = self.anagrams2.get_anagrams("salter")
    self.assertEqual(r, ['alerts', 'alters', 'salter', 'slater'])

    _, r = self.anagrams2.get_anagrams("salters")
    self.assertEqual(r, ['artless', 'salters'])

    _, r = self.anagrams2.get_anagrams("saltier")
    self.assertEqual(r, ['realist', 'saltier'])

    _, r = self.anagrams2.get_anagrams("saltiest")
    self.assertEqual(r, ['saltiest'])

    _, r = self.anagrams2.get_anagrams("saltiness")
    self.assertEqual(r, ['saltiness', 'stainless'])

    _, r = self.anagrams2.get_anagrams("salting")
    self.assertEqual(r, ['lasting', 'salting'])

    _, r = self.anagrams2.get_anagrams("salton")
    self.assertEqual(r, ['salton'])

    _, r = self.anagrams2.get_anagrams("salts")
    self.assertEqual(r, ['lasts', 'salts', 'slats'])

    _, r = self.anagrams2.get_anagrams("salty")
    self.assertEqual(r, ['salty'])

    _, r = self.anagrams2.get_anagrams("salutary")
    self.assertEqual(r, ['salutary'])

    _, r = self.anagrams2.get_anagrams("salutation")
    self.assertEqual(r, ['salutation'])

    _, r = self.anagrams2.get_anagrams("salutations")
    self.assertEqual(r, ['salutations'])

    _, r = self.anagrams2.get_anagrams("salute")
    self.assertEqual(r, ['salute'])

    _, r = self.anagrams2.get_anagrams("saluted")
    self.assertEqual(r, ['saluted'])

    _, r = self.anagrams2.get_anagrams("salutes")
    self.assertEqual(r, ['salutes'])

    _, r = self.anagrams2.get_anagrams("saluting")
    self.assertEqual(r, ['saluting'])

    _, r = self.anagrams2.get_anagrams("salvador")
    self.assertEqual(r, ['salvador'])

    _, r = self.anagrams2.get_anagrams("salvadoran")
    self.assertEqual(r, ['salvadoran'])

    _, r = self.anagrams2.get_anagrams("salvage")
    self.assertEqual(r, ['salvage'])

    _, r = self.anagrams2.get_anagrams("salvaged")
    self.assertEqual(r, ['salvaged'])

    _, r = self.anagrams2.get_anagrams("salvager")
    self.assertEqual(r, ['salvager'])

    _, r = self.anagrams2.get_anagrams("salvages")
    self.assertEqual(r, ['salvages'])

    _, r = self.anagrams2.get_anagrams("salvaging")
    self.assertEqual(r, ['salvaging'])

    _, r = self.anagrams2.get_anagrams("salvation")
    self.assertEqual(r, ['salvation'])

    _, r = self.anagrams2.get_anagrams("salvatore")
    self.assertEqual(r, ['salvatore'])

    _, r = self.anagrams2.get_anagrams("salve")
    self.assertEqual(r, ['salve', 'slave', 'vales'])

    _, r = self.anagrams2.get_anagrams("salver")
    self.assertEqual(r, ['salver', 'slaver'])

    _, r = self.anagrams2.get_anagrams("salves")
    self.assertEqual(r, ['salves', 'slaves'])

    _, r = self.anagrams2.get_anagrams("salz")
    self.assertEqual(r, ['salz'])

    _, r = self.anagrams2.get_anagrams("sam")
    self.assertEqual(r, ['sam'])

    _, r = self.anagrams2.get_anagrams("samaritan")
    self.assertEqual(r, ['samaritan'])

    _, r = self.anagrams2.get_anagrams("same")
    self.assertEqual(r, ['ames', 'same', 'seam'])

    _, r = self.anagrams2.get_anagrams("sameness")
    self.assertEqual(r, ['sameness'])

    _, r = self.anagrams2.get_anagrams("sammy")
    self.assertEqual(r, ['sammy'])

    _, r = self.anagrams2.get_anagrams("samoa")
    self.assertEqual(r, ['samoa'])

    _, r = self.anagrams2.get_anagrams("samoan")
    self.assertEqual(r, ['samoan'])

    _, r = self.anagrams2.get_anagrams("sample")
    self.assertEqual(r, ['maples', 'sample'])

    _, r = self.anagrams2.get_anagrams("sampled")
    self.assertEqual(r, ['sampled'])

    _, r = self.anagrams2.get_anagrams("sampler")
    self.assertEqual(r, ['sampler'])

    _, r = self.anagrams2.get_anagrams("samplers")
    self.assertEqual(r, ['samplers'])

    _, r = self.anagrams2.get_anagrams("samples")
    self.assertEqual(r, ['samples'])

    _, r = self.anagrams2.get_anagrams("sampling")
    self.assertEqual(r, ['sampling'])

    _, r = self.anagrams2.get_anagrams("samplings")
    self.assertEqual(r, ['samplings'])

    _, r = self.anagrams2.get_anagrams("sampson")
    self.assertEqual(r, ['sampson'])

    _, r = self.anagrams2.get_anagrams("samson")
    self.assertEqual(r, ['masons', 'samson'])

    _, r = self.anagrams2.get_anagrams("samuel")
    self.assertEqual(r, ['samuel'])

    _, r = self.anagrams2.get_anagrams("samuels")
    self.assertEqual(r, ['samuels'])

    _, r = self.anagrams2.get_anagrams("samuelson")
    self.assertEqual(r, ['samuelson'])

    _, r = self.anagrams2.get_anagrams("san")
    self.assertEqual(r, ['san'])

    _, r = self.anagrams2.get_anagrams("sana")
    self.assertEqual(r, ['nasa', 'sana'])

    _, r = self.anagrams2.get_anagrams("sanatoria")
    self.assertEqual(r, ['sanatoria'])

    _, r = self.anagrams2.get_anagrams("sanatorium")
    self.assertEqual(r, ['sanatorium'])

    _, r = self.anagrams2.get_anagrams("sanborn")
    self.assertEqual(r, ['sanborn'])

    _, r = self.anagrams2.get_anagrams("sanchez")
    self.assertEqual(r, ['sanchez'])

    _, r = self.anagrams2.get_anagrams("sancho")
    self.assertEqual(r, ['sancho'])

    _, r = self.anagrams2.get_anagrams("sanctification")
    self.assertEqual(r, ['sanctification'])

    _, r = self.anagrams2.get_anagrams("sanctified")
    self.assertEqual(r, ['sanctified'])

    _, r = self.anagrams2.get_anagrams("sanctify")
    self.assertEqual(r, ['sanctify'])

    _, r = self.anagrams2.get_anagrams("sanctimonious")
    self.assertEqual(r, ['sanctimonious'])

    _, r = self.anagrams2.get_anagrams("sanction")
    self.assertEqual(r, ['contains', 'sanction'])

    _, r = self.anagrams2.get_anagrams("sanctioned")
    self.assertEqual(r, ['sanctioned'])

    _, r = self.anagrams2.get_anagrams("sanctioning")
    self.assertEqual(r, ['sanctioning'])

    _, r = self.anagrams2.get_anagrams("sanctions")
    self.assertEqual(r, ['sanctions'])

    _, r = self.anagrams2.get_anagrams("sanctity")
    self.assertEqual(r, ['sanctity'])

    _, r = self.anagrams2.get_anagrams("sanctuaries")
    self.assertEqual(r, ['sanctuaries'])

    _, r = self.anagrams2.get_anagrams("sanctuary")
    self.assertEqual(r, ['sanctuary'])

    _, r = self.anagrams2.get_anagrams("sanctum")
    self.assertEqual(r, ['sanctum'])

    _, r = self.anagrams2.get_anagrams("sand")
    self.assertEqual(r, ['sand'])

    _, r = self.anagrams2.get_anagrams("sandal")
    self.assertEqual(r, ['sandal'])

    _, r = self.anagrams2.get_anagrams("sandals")
    self.assertEqual(r, ['sandals'])

    _, r = self.anagrams2.get_anagrams("sandbag")
    self.assertEqual(r, ['sandbag'])

    _, r = self.anagrams2.get_anagrams("sandburg")
    self.assertEqual(r, ['sandburg'])

    _, r = self.anagrams2.get_anagrams("sanded")
    self.assertEqual(r, ['sadden', 'sanded'])

    _, r = self.anagrams2.get_anagrams("sander")
    self.assertEqual(r, ['anders', 'sander', 'snared'])

    _, r = self.anagrams2.get_anagrams("sanderling")
    self.assertEqual(r, ['sanderling'])

    _, r = self.anagrams2.get_anagrams("sanders")
    self.assertEqual(r, ['sanders'])

    _, r = self.anagrams2.get_anagrams("sanderson")
    self.assertEqual(r, ['sanderson'])

    _, r = self.anagrams2.get_anagrams("sandia")
    self.assertEqual(r, ['sandia'])

    _, r = self.anagrams2.get_anagrams("sanding")
    self.assertEqual(r, ['sanding'])

    _, r = self.anagrams2.get_anagrams("sandman")
    self.assertEqual(r, ['sandman'])

    _, r = self.anagrams2.get_anagrams("sandpaper")
    self.assertEqual(r, ['sandpaper'])

    _, r = self.anagrams2.get_anagrams("sandra")
    self.assertEqual(r, ['sandra'])

    _, r = self.anagrams2.get_anagrams("sands")
    self.assertEqual(r, ['sands'])

    _, r = self.anagrams2.get_anagrams("sandstone")
    self.assertEqual(r, ['sandstone'])

    _, r = self.anagrams2.get_anagrams("sandusky")
    self.assertEqual(r, ['sandusky'])

    _, r = self.anagrams2.get_anagrams("sandwich")
    self.assertEqual(r, ['sandwich'])

    _, r = self.anagrams2.get_anagrams("sandwiches")
    self.assertEqual(r, ['sandwiches'])

    _, r = self.anagrams2.get_anagrams("sandy")
    self.assertEqual(r, ['sandy'])

    _, r = self.anagrams2.get_anagrams("sane")
    self.assertEqual(r, ['sane', 'sean'])

    _, r = self.anagrams2.get_anagrams("sanely")
    self.assertEqual(r, ['sanely'])

    _, r = self.anagrams2.get_anagrams("saner")
    self.assertEqual(r, ['earns', 'nears', 'saner', 'snare'])

    _, r = self.anagrams2.get_anagrams("sanest")
    self.assertEqual(r, ['assent', 'sanest'])

    _, r = self.anagrams2.get_anagrams("sanford")
    self.assertEqual(r, ['sanford'])

    _, r = self.anagrams2.get_anagrams("sang")
    self.assertEqual(r, ['nags', 'sang', 'snag'])

    _, r = self.anagrams2.get_anagrams("sanguine")
    self.assertEqual(r, ['sanguine'])

    _, r = self.anagrams2.get_anagrams("sanhedrin")
    self.assertEqual(r, ['sanhedrin'])

    _, r = self.anagrams2.get_anagrams("sanitarium")
    self.assertEqual(r, ['sanitarium'])

    _, r = self.anagrams2.get_anagrams("sanitary")
    self.assertEqual(r, ['sanitary'])

    _, r = self.anagrams2.get_anagrams("sanitation")
    self.assertEqual(r, ['sanitation'])

    _, r = self.anagrams2.get_anagrams("sanity")
    self.assertEqual(r, ['sanity'])

    _, r = self.anagrams2.get_anagrams("sank")
    self.assertEqual(r, ['sank'])

    _, r = self.anagrams2.get_anagrams("sanskrit")
    self.assertEqual(r, ['sanskrit'])

    _, r = self.anagrams2.get_anagrams("sanskritic")
    self.assertEqual(r, ['sanskritic'])

    _, r = self.anagrams2.get_anagrams("sanskritize")
    self.assertEqual(r, ['sanskritize'])

    _, r = self.anagrams2.get_anagrams("santa")
    self.assertEqual(r, ['santa', 'satan'])

    _, r = self.anagrams2.get_anagrams("santayana")
    self.assertEqual(r, ['santayana'])

    _, r = self.anagrams2.get_anagrams("santiago")
    self.assertEqual(r, ['santiago'])

    _, r = self.anagrams2.get_anagrams("santo")
    self.assertEqual(r, ['aston', 'natos', 'santo'])

    _, r = self.anagrams2.get_anagrams("sao")
    self.assertEqual(r, ['sao'])

    _, r = self.anagrams2.get_anagrams("sap")
    self.assertEqual(r, ['asp', 'sap', 'spa'])

    _, r = self.anagrams2.get_anagrams("sapiens")
    self.assertEqual(r, ['pansies', 'sapiens'])

    _, r = self.anagrams2.get_anagrams("sapling")
    self.assertEqual(r, ['lapsing', 'sapling'])

    _, r = self.anagrams2.get_anagrams("saplings")
    self.assertEqual(r, ['saplings'])

    _, r = self.anagrams2.get_anagrams("sapphire")
    self.assertEqual(r, ['sapphire'])

    _, r = self.anagrams2.get_anagrams("sappho")
    self.assertEqual(r, ['sappho'])

    _, r = self.anagrams2.get_anagrams("saps")
    self.assertEqual(r, ['pass', 'saps'])

    _, r = self.anagrams2.get_anagrams("sapsucker")
    self.assertEqual(r, ['sapsucker'])

    _, r = self.anagrams2.get_anagrams("sara")
    self.assertEqual(r, ['sara'])

    _, r = self.anagrams2.get_anagrams("saracen")
    self.assertEqual(r, ['saracen'])

    _, r = self.anagrams2.get_anagrams("saracens")
    self.assertEqual(r, ['saracens'])

    _, r = self.anagrams2.get_anagrams("sarah")
    self.assertEqual(r, ['sarah'])

    _, r = self.anagrams2.get_anagrams("saran")
    self.assertEqual(r, ['saran'])

    _, r = self.anagrams2.get_anagrams("sarasota")
    self.assertEqual(r, ['sarasota'])

    _, r = self.anagrams2.get_anagrams("saratoga")
    self.assertEqual(r, ['saratoga'])

    _, r = self.anagrams2.get_anagrams("sarcasm")
    self.assertEqual(r, ['sarcasm'])

    _, r = self.anagrams2.get_anagrams("sarcasms")
    self.assertEqual(r, ['sarcasms'])

    _, r = self.anagrams2.get_anagrams("sarcastic")
    self.assertEqual(r, ['sarcastic'])

    _, r = self.anagrams2.get_anagrams("sardine")
    self.assertEqual(r, ['sardine'])

    _, r = self.anagrams2.get_anagrams("sardinia")
    self.assertEqual(r, ['sardinia'])

    _, r = self.anagrams2.get_anagrams("sardonic")
    self.assertEqual(r, ['sardonic'])

    _, r = self.anagrams2.get_anagrams("sargent")
    self.assertEqual(r, ['sargent', 'strange'])

    _, r = self.anagrams2.get_anagrams("sari")
    self.assertEqual(r, ['airs', 'sari'])

    _, r = self.anagrams2.get_anagrams("sartre")
    self.assertEqual(r, ['arrest', 'rarest', 'raster', 'raters', 'sartre', 'starer'])

    _, r = self.anagrams2.get_anagrams("sash")
    self.assertEqual(r, ['sash'])

    _, r = self.anagrams2.get_anagrams("saskatchewan")
    self.assertEqual(r, ['saskatchewan'])

    _, r = self.anagrams2.get_anagrams("saskatoon")
    self.assertEqual(r, ['saskatoon'])

    _, r = self.anagrams2.get_anagrams("sat")
    self.assertEqual(r, ['sat'])

    _, r = self.anagrams2.get_anagrams("satan")
    self.assertEqual(r, ['santa', 'satan'])

    _, r = self.anagrams2.get_anagrams("satanic")
    self.assertEqual(r, ['satanic'])

    _, r = self.anagrams2.get_anagrams("satanism")
    self.assertEqual(r, ['mantissa', 'satanism'])

    _, r = self.anagrams2.get_anagrams("satanist")
    self.assertEqual(r, ['satanist'])

    _, r = self.anagrams2.get_anagrams("satchel")
    self.assertEqual(r, ['latches', 'satchel'])

    _, r = self.anagrams2.get_anagrams("satchels")
    self.assertEqual(r, ['satchels'])

    _, r = self.anagrams2.get_anagrams("sate")
    self.assertEqual(r, ['east', 'eats', 'sate', 'seat', 'teas'])

    _, r = self.anagrams2.get_anagrams("sated")
    self.assertEqual(r, ['dates', 'sated', 'stead'])

    _, r = self.anagrams2.get_anagrams("satellite")
    self.assertEqual(r, ['satellite'])

    _, r = self.anagrams2.get_anagrams("satellites")
    self.assertEqual(r, ['satellites'])

    _, r = self.anagrams2.get_anagrams("sates")
    self.assertEqual(r, ['asset', 'sates', 'seats'])

    _, r = self.anagrams2.get_anagrams("satin")
    self.assertEqual(r, ['saint', 'satin', 'stain'])

    _, r = self.anagrams2.get_anagrams("sating")
    self.assertEqual(r, ['giants', 'sating'])

    _, r = self.anagrams2.get_anagrams("satire")
    self.assertEqual(r, ['satire'])

    _, r = self.anagrams2.get_anagrams("satires")
    self.assertEqual(r, ['satires'])

    _, r = self.anagrams2.get_anagrams("satiric")
    self.assertEqual(r, ['satiric'])

    _, r = self.anagrams2.get_anagrams("satisfaction")
    self.assertEqual(r, ['satisfaction'])

    _, r = self.anagrams2.get_anagrams("satisfactions")
    self.assertEqual(r, ['satisfactions'])

    _, r = self.anagrams2.get_anagrams("satisfactorily")
    self.assertEqual(r, ['satisfactorily'])

    _, r = self.anagrams2.get_anagrams("satisfactory")
    self.assertEqual(r, ['satisfactory'])

    _, r = self.anagrams2.get_anagrams("satisfiability")
    self.assertEqual(r, ['satisfiability'])

    _, r = self.anagrams2.get_anagrams("satisfiable")
    self.assertEqual(r, ['satisfiable'])

    _, r = self.anagrams2.get_anagrams("satisfied")
    self.assertEqual(r, ['satisfied'])

    _, r = self.anagrams2.get_anagrams("satisfies")
    self.assertEqual(r, ['satisfies'])

    _, r = self.anagrams2.get_anagrams("satisfy")
    self.assertEqual(r, ['satisfy'])

    _, r = self.anagrams2.get_anagrams("satisfying")
    self.assertEqual(r, ['satisfying'])

    _, r = self.anagrams2.get_anagrams("saturate")
    self.assertEqual(r, ['saturate'])

    _, r = self.anagrams2.get_anagrams("saturated")
    self.assertEqual(r, ['saturated'])

    _, r = self.anagrams2.get_anagrams("saturates")
    self.assertEqual(r, ['saturates'])

    _, r = self.anagrams2.get_anagrams("saturating")
    self.assertEqual(r, ['saturating'])

    _, r = self.anagrams2.get_anagrams("saturation")
    self.assertEqual(r, ['saturation'])

    _, r = self.anagrams2.get_anagrams("saturday")
    self.assertEqual(r, ['saturday'])

    _, r = self.anagrams2.get_anagrams("saturdays")
    self.assertEqual(r, ['saturdays'])

    _, r = self.anagrams2.get_anagrams("saturn")
    self.assertEqual(r, ['saturn'])

    _, r = self.anagrams2.get_anagrams("saturnalia")
    self.assertEqual(r, ['australian', 'saturnalia'])

    _, r = self.anagrams2.get_anagrams("saturnism")
    self.assertEqual(r, ['saturnism'])

    _, r = self.anagrams2.get_anagrams("satyr")
    self.assertEqual(r, ['satyr', 'stray', 'trays'])

    _, r = self.anagrams2.get_anagrams("sauce")
    self.assertEqual(r, ['cause', 'sauce'])

    _, r = self.anagrams2.get_anagrams("saucepan")
    self.assertEqual(r, ['saucepan'])

    _, r = self.anagrams2.get_anagrams("saucepans")
    self.assertEqual(r, ['saucepans'])

    _, r = self.anagrams2.get_anagrams("saucer")
    self.assertEqual(r, ['causer', 'saucer'])

    _, r = self.anagrams2.get_anagrams("saucers")
    self.assertEqual(r, ['saucers'])

    _, r = self.anagrams2.get_anagrams("sauces")
    self.assertEqual(r, ['causes', 'sauces'])

    _, r = self.anagrams2.get_anagrams("saucy")
    self.assertEqual(r, ['saucy'])

    _, r = self.anagrams2.get_anagrams("saud")
    self.assertEqual(r, ['saud'])

    _, r = self.anagrams2.get_anagrams("saudi")
    self.assertEqual(r, ['saudi'])

    _, r = self.anagrams2.get_anagrams("saukville")
    self.assertEqual(r, ['saukville'])

    _, r = self.anagrams2.get_anagrams("saul")
    self.assertEqual(r, ['saul'])

    _, r = self.anagrams2.get_anagrams("sault")
    self.assertEqual(r, ['sault', 'tulsa'])

    _, r = self.anagrams2.get_anagrams("saunders")
    self.assertEqual(r, ['saunders'])

    _, r = self.anagrams2.get_anagrams("saunter")
    self.assertEqual(r, ['natures', 'saunter'])

    _, r = self.anagrams2.get_anagrams("sausage")
    self.assertEqual(r, ['assuage', 'sausage'])

    _, r = self.anagrams2.get_anagrams("sausages")
    self.assertEqual(r, ['assuages', 'sausages'])

    _, r = self.anagrams2.get_anagrams("savage")
    self.assertEqual(r, ['savage'])

    _, r = self.anagrams2.get_anagrams("savaged")
    self.assertEqual(r, ['savaged'])

    _, r = self.anagrams2.get_anagrams("savagely")
    self.assertEqual(r, ['savagely'])

    _, r = self.anagrams2.get_anagrams("savageness")
    self.assertEqual(r, ['savageness'])

    _, r = self.anagrams2.get_anagrams("savager")
    self.assertEqual(r, ['ravages', 'savager'])

    _, r = self.anagrams2.get_anagrams("savagers")
    self.assertEqual(r, ['savagers'])

    _, r = self.anagrams2.get_anagrams("savages")
    self.assertEqual(r, ['savages'])

    _, r = self.anagrams2.get_anagrams("savaging")
    self.assertEqual(r, ['savaging'])

    _, r = self.anagrams2.get_anagrams("savannah")
    self.assertEqual(r, ['savannah'])

    _, r = self.anagrams2.get_anagrams("save")
    self.assertEqual(r, ['save', 'vase'])

    _, r = self.anagrams2.get_anagrams("saved")
    self.assertEqual(r, ['saved'])

    _, r = self.anagrams2.get_anagrams("saver")
    self.assertEqual(r, ['avers', 'raves', 'saver', 'versa'])

    _, r = self.anagrams2.get_anagrams("savers")
    self.assertEqual(r, ['savers'])

    _, r = self.anagrams2.get_anagrams("saves")
    self.assertEqual(r, ['saves', 'vases'])

    _, r = self.anagrams2.get_anagrams("saving")
    self.assertEqual(r, ['saving'])

    _, r = self.anagrams2.get_anagrams("savings")
    self.assertEqual(r, ['savings'])

    _, r = self.anagrams2.get_anagrams("savior")
    self.assertEqual(r, ['savior'])

    _, r = self.anagrams2.get_anagrams("saviors")
    self.assertEqual(r, ['saviors'])

    _, r = self.anagrams2.get_anagrams("saviour")
    self.assertEqual(r, ['saviour', 'various'])

    _, r = self.anagrams2.get_anagrams("savonarola")
    self.assertEqual(r, ['savonarola'])

    _, r = self.anagrams2.get_anagrams("savor")
    self.assertEqual(r, ['savor'])

    _, r = self.anagrams2.get_anagrams("savored")
    self.assertEqual(r, ['savored'])

    _, r = self.anagrams2.get_anagrams("savoring")
    self.assertEqual(r, ['savoring'])

    _, r = self.anagrams2.get_anagrams("savors")
    self.assertEqual(r, ['savors'])

    _, r = self.anagrams2.get_anagrams("savory")
    self.assertEqual(r, ['savory'])

    _, r = self.anagrams2.get_anagrams("savoy")
    self.assertEqual(r, ['savoy'])

    _, r = self.anagrams2.get_anagrams("savoyard")
    self.assertEqual(r, ['savoyard'])

    _, r = self.anagrams2.get_anagrams("savoyards")
    self.assertEqual(r, ['savoyards'])

    _, r = self.anagrams2.get_anagrams("saw")
    self.assertEqual(r, ['saw', 'was'])

    _, r = self.anagrams2.get_anagrams("sawdust")
    self.assertEqual(r, ['sawdust'])

    _, r = self.anagrams2.get_anagrams("sawed")
    self.assertEqual(r, ['sawed', 'wades'])

    _, r = self.anagrams2.get_anagrams("sawfish")
    self.assertEqual(r, ['sawfish'])

    _, r = self.anagrams2.get_anagrams("sawing")
    self.assertEqual(r, ['sawing'])

    _, r = self.anagrams2.get_anagrams("sawmill")
    self.assertEqual(r, ['sawmill'])

    _, r = self.anagrams2.get_anagrams("sawmills")
    self.assertEqual(r, ['sawmills'])

    _, r = self.anagrams2.get_anagrams("saws")
    self.assertEqual(r, ['saws'])

    _, r = self.anagrams2.get_anagrams("sawtooth")
    self.assertEqual(r, ['sawtooth'])

    _, r = self.anagrams2.get_anagrams("sax")
    self.assertEqual(r, ['sax'])

    _, r = self.anagrams2.get_anagrams("saxon")
    self.assertEqual(r, ['axons', 'saxon'])

    _, r = self.anagrams2.get_anagrams("saxonization")
    self.assertEqual(r, ['saxonization'])

    _, r = self.anagrams2.get_anagrams("saxonizations")
    self.assertEqual(r, ['saxonizations'])

    _, r = self.anagrams2.get_anagrams("saxonize")
    self.assertEqual(r, ['saxonize'])

    _, r = self.anagrams2.get_anagrams("saxonizes")
    self.assertEqual(r, ['saxonizes'])

    _, r = self.anagrams2.get_anagrams("saxons")
    self.assertEqual(r, ['saxons'])

    _, r = self.anagrams2.get_anagrams("saxony")
    self.assertEqual(r, ['saxony'])

    _, r = self.anagrams2.get_anagrams("saxophone")
    self.assertEqual(r, ['saxophone'])

    _, r = self.anagrams2.get_anagrams("saxton")
    self.assertEqual(r, ['saxton'])

    _, r = self.anagrams2.get_anagrams("say")
    self.assertEqual(r, ['say'])

    _, r = self.anagrams2.get_anagrams("sayer")
    self.assertEqual(r, ['ayers', 'sayer', 'years'])

    _, r = self.anagrams2.get_anagrams("sayers")
    self.assertEqual(r, ['sayers'])

    _, r = self.anagrams2.get_anagrams("saying")
    self.assertEqual(r, ['saying'])

    _, r = self.anagrams2.get_anagrams("sayings")
    self.assertEqual(r, ['sayings'])

    _, r = self.anagrams2.get_anagrams("says")
    self.assertEqual(r, ['says'])

    _, r = self.anagrams2.get_anagrams("scab")
    self.assertEqual(r, ['cabs', 'scab'])

    _, r = self.anagrams2.get_anagrams("scabbard")
    self.assertEqual(r, ['scabbard'])

    _, r = self.anagrams2.get_anagrams("scabbards")
    self.assertEqual(r, ['scabbards'])

    _, r = self.anagrams2.get_anagrams("scabrous")
    self.assertEqual(r, ['scabrous'])

    _, r = self.anagrams2.get_anagrams("scaffold")
    self.assertEqual(r, ['scaffold'])

    _, r = self.anagrams2.get_anagrams("scaffolding")
    self.assertEqual(r, ['scaffolding'])

    _, r = self.anagrams2.get_anagrams("scaffoldings")
    self.assertEqual(r, ['scaffoldings'])

    _, r = self.anagrams2.get_anagrams("scaffolds")
    self.assertEqual(r, ['scaffolds'])

    _, r = self.anagrams2.get_anagrams("scala")
    self.assertEqual(r, ['scala'])

    _, r = self.anagrams2.get_anagrams("scalable")
    self.assertEqual(r, ['scalable'])

    _, r = self.anagrams2.get_anagrams("scalar")
    self.assertEqual(r, ['rascal', 'scalar'])

    _, r = self.anagrams2.get_anagrams("scalars")
    self.assertEqual(r, ['rascals', 'scalars'])

    _, r = self.anagrams2.get_anagrams("scald")
    self.assertEqual(r, ['scald'])

    _, r = self.anagrams2.get_anagrams("scalded")
    self.assertEqual(r, ['scalded'])

    _, r = self.anagrams2.get_anagrams("scalding")
    self.assertEqual(r, ['scalding'])

    _, r = self.anagrams2.get_anagrams("scale")
    self.assertEqual(r, ['laces', 'scale'])

    _, r = self.anagrams2.get_anagrams("scaled")
    self.assertEqual(r, ['scaled'])

    _, r = self.anagrams2.get_anagrams("scales")
    self.assertEqual(r, ['scales'])

    _, r = self.anagrams2.get_anagrams("scaling")
    self.assertEqual(r, ['scaling'])

    _, r = self.anagrams2.get_anagrams("scalings")
    self.assertEqual(r, ['scalings'])

    _, r = self.anagrams2.get_anagrams("scallop")
    self.assertEqual(r, ['scallop'])

    _, r = self.anagrams2.get_anagrams("scalloped")
    self.assertEqual(r, ['collapsed', 'scalloped'])

    _, r = self.anagrams2.get_anagrams("scallops")
    self.assertEqual(r, ['scallops'])

    _, r = self.anagrams2.get_anagrams("scalp")
    self.assertEqual(r, ['claps', 'clasp', 'scalp'])

    _, r = self.anagrams2.get_anagrams("scalps")
    self.assertEqual(r, ['clasps', 'scalps'])

    _, r = self.anagrams2.get_anagrams("scaly")
    self.assertEqual(r, ['clays', 'scaly'])

    _, r = self.anagrams2.get_anagrams("scamper")
    self.assertEqual(r, ['campers', 'scamper'])

    _, r = self.anagrams2.get_anagrams("scampering")
    self.assertEqual(r, ['scampering'])

    _, r = self.anagrams2.get_anagrams("scampers")
    self.assertEqual(r, ['scampers'])

    _, r = self.anagrams2.get_anagrams("scan")
    self.assertEqual(r, ['cans', 'scan'])

    _, r = self.anagrams2.get_anagrams("scandal")
    self.assertEqual(r, ['scandal'])

    _, r = self.anagrams2.get_anagrams("scandalous")
    self.assertEqual(r, ['scandalous'])

    _, r = self.anagrams2.get_anagrams("scandals")
    self.assertEqual(r, ['scandals'])

    _, r = self.anagrams2.get_anagrams("scandinavia")
    self.assertEqual(r, ['scandinavia'])

    _, r = self.anagrams2.get_anagrams("scandinavian")
    self.assertEqual(r, ['scandinavian'])

    _, r = self.anagrams2.get_anagrams("scandinavians")
    self.assertEqual(r, ['scandinavians'])

    _, r = self.anagrams2.get_anagrams("scanned")
    self.assertEqual(r, ['scanned'])

    _, r = self.anagrams2.get_anagrams("scanner")
    self.assertEqual(r, ['canners', 'scanner'])

    _, r = self.anagrams2.get_anagrams("scanners")
    self.assertEqual(r, ['scanners'])

    _, r = self.anagrams2.get_anagrams("scanning")
    self.assertEqual(r, ['scanning'])

    _, r = self.anagrams2.get_anagrams("scans")
    self.assertEqual(r, ['scans'])

    _, r = self.anagrams2.get_anagrams("scant")
    self.assertEqual(r, ['scant'])

    _, r = self.anagrams2.get_anagrams("scantier")
    self.assertEqual(r, ['canister', 'scantier'])

    _, r = self.anagrams2.get_anagrams("scantiest")
    self.assertEqual(r, ['scantiest'])

    _, r = self.anagrams2.get_anagrams("scantily")
    self.assertEqual(r, ['scantily'])

    _, r = self.anagrams2.get_anagrams("scantiness")
    self.assertEqual(r, ['scantiness'])

    _, r = self.anagrams2.get_anagrams("scantly")
    self.assertEqual(r, ['scantly'])

    _, r = self.anagrams2.get_anagrams("scanty")
    self.assertEqual(r, ['scanty'])

    _, r = self.anagrams2.get_anagrams("scapegoat")
    self.assertEqual(r, ['scapegoat'])

    _, r = self.anagrams2.get_anagrams("scar")
    self.assertEqual(r, ['arcs', 'cars', 'scar'])

    _, r = self.anagrams2.get_anagrams("scarborough")
    self.assertEqual(r, ['scarborough'])

    _, r = self.anagrams2.get_anagrams("scarce")
    self.assertEqual(r, ['scarce'])

    _, r = self.anagrams2.get_anagrams("scarcely")
    self.assertEqual(r, ['scarcely'])

    _, r = self.anagrams2.get_anagrams("scarceness")
    self.assertEqual(r, ['scarceness'])

    _, r = self.anagrams2.get_anagrams("scarcer")
    self.assertEqual(r, ['scarcer'])

    _, r = self.anagrams2.get_anagrams("scarcity")
    self.assertEqual(r, ['scarcity'])

    _, r = self.anagrams2.get_anagrams("scare")
    self.assertEqual(r, ['acres', 'cares', 'races', 'scare'])

    _, r = self.anagrams2.get_anagrams("scarecrow")
    self.assertEqual(r, ['scarecrow'])

    _, r = self.anagrams2.get_anagrams("scared")
    self.assertEqual(r, ['cadres', 'sacred', 'scared'])

    _, r = self.anagrams2.get_anagrams("scares")
    self.assertEqual(r, ['caress', 'scares'])

    _, r = self.anagrams2.get_anagrams("scarf")
    self.assertEqual(r, ['scarf'])

    _, r = self.anagrams2.get_anagrams("scaring")
    self.assertEqual(r, ['scaring'])

    _, r = self.anagrams2.get_anagrams("scarlatti")
    self.assertEqual(r, ['scarlatti'])

    _, r = self.anagrams2.get_anagrams("scarlet")
    self.assertEqual(r, ['scarlet'])

    _, r = self.anagrams2.get_anagrams("scars")
    self.assertEqual(r, ['crass', 'scars'])

    _, r = self.anagrams2.get_anagrams("scarsdale")
    self.assertEqual(r, ['scarsdale'])

    _, r = self.anagrams2.get_anagrams("scarves")
    self.assertEqual(r, ['scarves'])

    _, r = self.anagrams2.get_anagrams("scary")
    self.assertEqual(r, ['crays', 'scary'])

    _, r = self.anagrams2.get_anagrams("scatter")
    self.assertEqual(r, ['scatter'])

    _, r = self.anagrams2.get_anagrams("scatterbrain")
    self.assertEqual(r, ['scatterbrain'])

    _, r = self.anagrams2.get_anagrams("scattered")
    self.assertEqual(r, ['scattered'])

    _, r = self.anagrams2.get_anagrams("scattering")
    self.assertEqual(r, ['scattering'])

    _, r = self.anagrams2.get_anagrams("scatters")
    self.assertEqual(r, ['scatters'])

    _, r = self.anagrams2.get_anagrams("scenario")
    self.assertEqual(r, ['scenario'])

    _, r = self.anagrams2.get_anagrams("scenarios")
    self.assertEqual(r, ['scenarios'])

    _, r = self.anagrams2.get_anagrams("scene")
    self.assertEqual(r, ['scene'])

    _, r = self.anagrams2.get_anagrams("scenery")
    self.assertEqual(r, ['scenery'])

    _, r = self.anagrams2.get_anagrams("scenes")
    self.assertEqual(r, ['scenes'])

    _, r = self.anagrams2.get_anagrams("scenic")
    self.assertEqual(r, ['scenic'])

    _, r = self.anagrams2.get_anagrams("scent")
    self.assertEqual(r, ['cents', 'scent'])

    _, r = self.anagrams2.get_anagrams("scented")
    self.assertEqual(r, ['descent', 'scented'])

    _, r = self.anagrams2.get_anagrams("scents")
    self.assertEqual(r, ['scents'])

    _, r = self.anagrams2.get_anagrams("scepter")
    self.assertEqual(r, ['respect', 'scepter', 'specter'])

    _, r = self.anagrams2.get_anagrams("scepters")
    self.assertEqual(r, ['respects', 'scepters', 'specters'])

    _, r = self.anagrams2.get_anagrams("schaefer")
    self.assertEqual(r, ['schaefer'])

    _, r = self.anagrams2.get_anagrams("schaeffer")
    self.assertEqual(r, ['schaeffer'])

    _, r = self.anagrams2.get_anagrams("schafer")
    self.assertEqual(r, ['schafer'])

    _, r = self.anagrams2.get_anagrams("schaffner")
    self.assertEqual(r, ['schaffner'])

    _, r = self.anagrams2.get_anagrams("schantz")
    self.assertEqual(r, ['schantz'])

    _, r = self.anagrams2.get_anagrams("schapiro")
    self.assertEqual(r, ['schapiro'])

    _, r = self.anagrams2.get_anagrams("schedulable")
    self.assertEqual(r, ['schedulable'])

    _, r = self.anagrams2.get_anagrams("schedule")
    self.assertEqual(r, ['schedule'])

    _, r = self.anagrams2.get_anagrams("scheduled")
    self.assertEqual(r, ['scheduled'])

    _, r = self.anagrams2.get_anagrams("scheduler")
    self.assertEqual(r, ['scheduler'])

    _, r = self.anagrams2.get_anagrams("schedulers")
    self.assertEqual(r, ['schedulers'])

    _, r = self.anagrams2.get_anagrams("schedules")
    self.assertEqual(r, ['schedules'])

    _, r = self.anagrams2.get_anagrams("scheduling")
    self.assertEqual(r, ['scheduling'])

    _, r = self.anagrams2.get_anagrams("scheherazade")
    self.assertEqual(r, ['scheherazade'])

    _, r = self.anagrams2.get_anagrams("schelling")
    self.assertEqual(r, ['schelling'])

    _, r = self.anagrams2.get_anagrams("schema")
    self.assertEqual(r, ['schema'])

    _, r = self.anagrams2.get_anagrams("schemas")
    self.assertEqual(r, ['schemas'])

    _, r = self.anagrams2.get_anagrams("schemata")
    self.assertEqual(r, ['schemata'])

    _, r = self.anagrams2.get_anagrams("schematic")
    self.assertEqual(r, ['schematic'])

    _, r = self.anagrams2.get_anagrams("schematically")
    self.assertEqual(r, ['schematically'])

    _, r = self.anagrams2.get_anagrams("schematics")
    self.assertEqual(r, ['schematics'])

    _, r = self.anagrams2.get_anagrams("scheme")
    self.assertEqual(r, ['scheme'])

    _, r = self.anagrams2.get_anagrams("schemed")
    self.assertEqual(r, ['schemed'])

    _, r = self.anagrams2.get_anagrams("schemer")
    self.assertEqual(r, ['schemer'])

    _, r = self.anagrams2.get_anagrams("schemers")
    self.assertEqual(r, ['schemers'])

    _, r = self.anagrams2.get_anagrams("schemes")
    self.assertEqual(r, ['schemes'])

    _, r = self.anagrams2.get_anagrams("scheming")
    self.assertEqual(r, ['scheming'])

    _, r = self.anagrams2.get_anagrams("schiller")
    self.assertEqual(r, ['chillers', 'schiller'])

    _, r = self.anagrams2.get_anagrams("schism")
    self.assertEqual(r, ['schism'])

    _, r = self.anagrams2.get_anagrams("schizophrenia")
    self.assertEqual(r, ['schizophrenia'])

    _, r = self.anagrams2.get_anagrams("schlesinger")
    self.assertEqual(r, ['schlesinger'])

    _, r = self.anagrams2.get_anagrams("schlitz")
    self.assertEqual(r, ['schlitz'])

    _, r = self.anagrams2.get_anagrams("schloss")
    self.assertEqual(r, ['schloss'])

    _, r = self.anagrams2.get_anagrams("schmidt")
    self.assertEqual(r, ['schmidt'])

    _, r = self.anagrams2.get_anagrams("schmitt")
    self.assertEqual(r, ['schmitt'])

    _, r = self.anagrams2.get_anagrams("schnabel")
    self.assertEqual(r, ['blanches', 'schnabel'])

    _, r = self.anagrams2.get_anagrams("schneider")
    self.assertEqual(r, ['schneider'])

    _, r = self.anagrams2.get_anagrams("schoenberg")
    self.assertEqual(r, ['schoenberg'])

    _, r = self.anagrams2.get_anagrams("schofield")
    self.assertEqual(r, ['schofield'])

    _, r = self.anagrams2.get_anagrams("scholar")
    self.assertEqual(r, ['scholar'])

    _, r = self.anagrams2.get_anagrams("scholarly")
    self.assertEqual(r, ['scholarly'])

    _, r = self.anagrams2.get_anagrams("scholars")
    self.assertEqual(r, ['scholars'])

    _, r = self.anagrams2.get_anagrams("scholarship")
    self.assertEqual(r, ['scholarship'])

    _, r = self.anagrams2.get_anagrams("scholarships")
    self.assertEqual(r, ['scholarships'])

    _, r = self.anagrams2.get_anagrams("scholastic")
    self.assertEqual(r, ['scholastic'])

    _, r = self.anagrams2.get_anagrams("scholastically")
    self.assertEqual(r, ['scholastically'])

    _, r = self.anagrams2.get_anagrams("scholastics")
    self.assertEqual(r, ['scholastics'])

    _, r = self.anagrams2.get_anagrams("school")
    self.assertEqual(r, ['school'])

    _, r = self.anagrams2.get_anagrams("schoolboy")
    self.assertEqual(r, ['schoolboy'])

    _, r = self.anagrams2.get_anagrams("schoolboys")
    self.assertEqual(r, ['schoolboys'])

    _, r = self.anagrams2.get_anagrams("schooled")
    self.assertEqual(r, ['schooled'])

    _, r = self.anagrams2.get_anagrams("schooler")
    self.assertEqual(r, ['schooler'])

    _, r = self.anagrams2.get_anagrams("schoolers")
    self.assertEqual(r, ['schoolers'])

    _, r = self.anagrams2.get_anagrams("schoolhouse")
    self.assertEqual(r, ['schoolhouse'])

    _, r = self.anagrams2.get_anagrams("schoolhouses")
    self.assertEqual(r, ['schoolhouses'])

    _, r = self.anagrams2.get_anagrams("schooling")
    self.assertEqual(r, ['schooling'])

    _, r = self.anagrams2.get_anagrams("schoolmaster")
    self.assertEqual(r, ['schoolmaster'])

    _, r = self.anagrams2.get_anagrams("schoolmasters")
    self.assertEqual(r, ['schoolmasters'])

    _, r = self.anagrams2.get_anagrams("schoolroom")
    self.assertEqual(r, ['schoolroom'])

    _, r = self.anagrams2.get_anagrams("schoolrooms")
    self.assertEqual(r, ['schoolrooms'])

    _, r = self.anagrams2.get_anagrams("schools")
    self.assertEqual(r, ['schools'])

    _, r = self.anagrams2.get_anagrams("schooner")
    self.assertEqual(r, ['schooner'])

    _, r = self.anagrams2.get_anagrams("schopenhauer")
    self.assertEqual(r, ['schopenhauer'])

    _, r = self.anagrams2.get_anagrams("schottky")
    self.assertEqual(r, ['schottky'])

    _, r = self.anagrams2.get_anagrams("schroeder")
    self.assertEqual(r, ['schroeder'])

    _, r = self.anagrams2.get_anagrams("schroedinger")
    self.assertEqual(r, ['schroedinger'])

    _, r = self.anagrams2.get_anagrams("schubert")
    self.assertEqual(r, ['butchers', 'schubert'])

    _, r = self.anagrams2.get_anagrams("schultz")
    self.assertEqual(r, ['schultz'])

    _, r = self.anagrams2.get_anagrams("schulz")
    self.assertEqual(r, ['schulz'])

    _, r = self.anagrams2.get_anagrams("schumacher")
    self.assertEqual(r, ['schumacher'])

    _, r = self.anagrams2.get_anagrams("schuman")
    self.assertEqual(r, ['cushman', 'schuman'])

    _, r = self.anagrams2.get_anagrams("schumann")
    self.assertEqual(r, ['schumann'])

    _, r = self.anagrams2.get_anagrams("schuster")
    self.assertEqual(r, ['schuster'])

    _, r = self.anagrams2.get_anagrams("schuyler")
    self.assertEqual(r, ['schuyler'])

    _, r = self.anagrams2.get_anagrams("schuylkill")
    self.assertEqual(r, ['schuylkill'])

    _, r = self.anagrams2.get_anagrams("schwab")
    self.assertEqual(r, ['schwab'])

    _, r = self.anagrams2.get_anagrams("schwartz")
    self.assertEqual(r, ['schwartz'])

    _, r = self.anagrams2.get_anagrams("schweitzer")
    self.assertEqual(r, ['schweitzer'])

    _, r = self.anagrams2.get_anagrams("science")
    self.assertEqual(r, ['science'])

    _, r = self.anagrams2.get_anagrams("sciences")
    self.assertEqual(r, ['sciences'])

    _, r = self.anagrams2.get_anagrams("scientific")
    self.assertEqual(r, ['scientific'])

    _, r = self.anagrams2.get_anagrams("scientifically")
    self.assertEqual(r, ['scientifically'])

    _, r = self.anagrams2.get_anagrams("scientist")
    self.assertEqual(r, ['scientist'])

    _, r = self.anagrams2.get_anagrams("scientists")
    self.assertEqual(r, ['scientists'])

    _, r = self.anagrams2.get_anagrams("scissor")
    self.assertEqual(r, ['scissor'])

    _, r = self.anagrams2.get_anagrams("scissored")
    self.assertEqual(r, ['scissored'])

    _, r = self.anagrams2.get_anagrams("scissoring")
    self.assertEqual(r, ['scissoring'])

    _, r = self.anagrams2.get_anagrams("scissors")
    self.assertEqual(r, ['scissors'])

    _, r = self.anagrams2.get_anagrams("sclerosis")
    self.assertEqual(r, ['sclerosis'])

    _, r = self.anagrams2.get_anagrams("sclerotic")
    self.assertEqual(r, ['sclerotic'])

    _, r = self.anagrams2.get_anagrams("scoff")
    self.assertEqual(r, ['scoff'])

    _, r = self.anagrams2.get_anagrams("scoffed")
    self.assertEqual(r, ['scoffed'])

    _, r = self.anagrams2.get_anagrams("scoffer")
    self.assertEqual(r, ['coffers', 'scoffer'])

    _, r = self.anagrams2.get_anagrams("scoffing")
    self.assertEqual(r, ['scoffing'])

    _, r = self.anagrams2.get_anagrams("scoffs")
    self.assertEqual(r, ['scoffs'])

    _, r = self.anagrams2.get_anagrams("scold")
    self.assertEqual(r, ['clods', 'colds', 'scold'])

    _, r = self.anagrams2.get_anagrams("scolded")
    self.assertEqual(r, ['scolded'])

    _, r = self.anagrams2.get_anagrams("scolding")
    self.assertEqual(r, ['scolding'])

    _, r = self.anagrams2.get_anagrams("scolds")
    self.assertEqual(r, ['scolds'])

    _, r = self.anagrams2.get_anagrams("scoop")
    self.assertEqual(r, ['coops', 'scoop'])

    _, r = self.anagrams2.get_anagrams("scooped")
    self.assertEqual(r, ['scooped'])

    _, r = self.anagrams2.get_anagrams("scooping")
    self.assertEqual(r, ['scooping'])

    _, r = self.anagrams2.get_anagrams("scoops")
    self.assertEqual(r, ['scoops'])

    _, r = self.anagrams2.get_anagrams("scoot")
    self.assertEqual(r, ['scoot'])

    _, r = self.anagrams2.get_anagrams("scope")
    self.assertEqual(r, ['copes', 'copse', 'pecos', 'scope'])

    _, r = self.anagrams2.get_anagrams("scoped")
    self.assertEqual(r, ['scoped'])

    _, r = self.anagrams2.get_anagrams("scopes")
    self.assertEqual(r, ['scopes'])

    _, r = self.anagrams2.get_anagrams("scoping")
    self.assertEqual(r, ['copings', 'scoping'])

    _, r = self.anagrams2.get_anagrams("scorch")
    self.assertEqual(r, ['scorch'])

    _, r = self.anagrams2.get_anagrams("scorched")
    self.assertEqual(r, ['scorched'])

    _, r = self.anagrams2.get_anagrams("scorcher")
    self.assertEqual(r, ['scorcher'])

    _, r = self.anagrams2.get_anagrams("scorches")
    self.assertEqual(r, ['scorches'])

    _, r = self.anagrams2.get_anagrams("scorching")
    self.assertEqual(r, ['scorching'])

    _, r = self.anagrams2.get_anagrams("score")
    self.assertEqual(r, ['cores', 'score'])

    _, r = self.anagrams2.get_anagrams("scoreboard")
    self.assertEqual(r, ['scoreboard'])

    _, r = self.anagrams2.get_anagrams("scorecard")
    self.assertEqual(r, ['accorders', 'scorecard'])

    _, r = self.anagrams2.get_anagrams("scored")
    self.assertEqual(r, ['coders', 'scored'])

    _, r = self.anagrams2.get_anagrams("scorer")
    self.assertEqual(r, ['corers', 'scorer'])

    _, r = self.anagrams2.get_anagrams("scorers")
    self.assertEqual(r, ['crosser', 'scorers'])

    _, r = self.anagrams2.get_anagrams("scores")
    self.assertEqual(r, ['scores'])

    _, r = self.anagrams2.get_anagrams("scoring")
    self.assertEqual(r, ['scoring'])

    _, r = self.anagrams2.get_anagrams("scorings")
    self.assertEqual(r, ['crossing', 'scorings'])

    _, r = self.anagrams2.get_anagrams("scorn")
    self.assertEqual(r, ['corns', 'scorn'])

    _, r = self.anagrams2.get_anagrams("scorned")
    self.assertEqual(r, ['scorned'])

    _, r = self.anagrams2.get_anagrams("scorner")
    self.assertEqual(r, ['corners', 'scorner'])

    _, r = self.anagrams2.get_anagrams("scornful")
    self.assertEqual(r, ['scornful'])

    _, r = self.anagrams2.get_anagrams("scornfully")
    self.assertEqual(r, ['scornfully'])

    _, r = self.anagrams2.get_anagrams("scorning")
    self.assertEqual(r, ['scorning'])

    _, r = self.anagrams2.get_anagrams("scorns")
    self.assertEqual(r, ['scorns'])

    _, r = self.anagrams2.get_anagrams("scorpio")
    self.assertEqual(r, ['scorpio'])

    _, r = self.anagrams2.get_anagrams("scorpion")
    self.assertEqual(r, ['scorpion'])

    _, r = self.anagrams2.get_anagrams("scorpions")
    self.assertEqual(r, ['scorpions'])

    _, r = self.anagrams2.get_anagrams("scot")
    self.assertEqual(r, ['cost', 'cots', 'scot'])

    _, r = self.anagrams2.get_anagrams("scotch")
    self.assertEqual(r, ['scotch'])

    _, r = self.anagrams2.get_anagrams("scotchgard")
    self.assertEqual(r, ['scotchgard'])

    _, r = self.anagrams2.get_anagrams("scotchman")
    self.assertEqual(r, ['scotchman'])

    _, r = self.anagrams2.get_anagrams("scotia")
    self.assertEqual(r, ['scotia'])

    _, r = self.anagrams2.get_anagrams("scotian")
    self.assertEqual(r, ['actions', 'scotian'])

    _, r = self.anagrams2.get_anagrams("scotland")
    self.assertEqual(r, ['scotland'])

    _, r = self.anagrams2.get_anagrams("scots")
    self.assertEqual(r, ['costs', 'scots'])

    _, r = self.anagrams2.get_anagrams("scotsman")
    self.assertEqual(r, ['scotsman'])

    _, r = self.anagrams2.get_anagrams("scotsmen")
    self.assertEqual(r, ['scotsmen'])

    _, r = self.anagrams2.get_anagrams("scott")
    self.assertEqual(r, ['scott'])

    _, r = self.anagrams2.get_anagrams("scottish")
    self.assertEqual(r, ['scottish'])

    _, r = self.anagrams2.get_anagrams("scottsdale")
    self.assertEqual(r, ['scottsdale'])

    _, r = self.anagrams2.get_anagrams("scotty")
    self.assertEqual(r, ['scotty'])

    _, r = self.anagrams2.get_anagrams("scoundrel")
    self.assertEqual(r, ['scoundrel'])

    _, r = self.anagrams2.get_anagrams("scoundrels")
    self.assertEqual(r, ['scoundrels'])

    _, r = self.anagrams2.get_anagrams("scour")
    self.assertEqual(r, ['scour'])

    _, r = self.anagrams2.get_anagrams("scoured")
    self.assertEqual(r, ['coursed', 'scoured'])

    _, r = self.anagrams2.get_anagrams("scourge")
    self.assertEqual(r, ['scourge'])

    _, r = self.anagrams2.get_anagrams("scouring")
    self.assertEqual(r, ['coursing', 'scouring'])

    _, r = self.anagrams2.get_anagrams("scours")
    self.assertEqual(r, ['scours'])

    _, r = self.anagrams2.get_anagrams("scout")
    self.assertEqual(r, ['scout'])

    _, r = self.anagrams2.get_anagrams("scouted")
    self.assertEqual(r, ['scouted'])

    _, r = self.anagrams2.get_anagrams("scouting")
    self.assertEqual(r, ['scouting'])

    _, r = self.anagrams2.get_anagrams("scouts")
    self.assertEqual(r, ['scouts'])

    _, r = self.anagrams2.get_anagrams("scow")
    self.assertEqual(r, ['cows', 'scow'])

    _, r = self.anagrams2.get_anagrams("scowl")
    self.assertEqual(r, ['cowls', 'scowl'])

    _, r = self.anagrams2.get_anagrams("scowled")
    self.assertEqual(r, ['scowled'])

    _, r = self.anagrams2.get_anagrams("scowling")
    self.assertEqual(r, ['scowling'])

    _, r = self.anagrams2.get_anagrams("scowls")
    self.assertEqual(r, ['scowls'])

    _, r = self.anagrams2.get_anagrams("scram")
    self.assertEqual(r, ['crams', 'scram'])

    _, r = self.anagrams2.get_anagrams("scramble")
    self.assertEqual(r, ['clambers', 'scramble'])

    _, r = self.anagrams2.get_anagrams("scrambled")
    self.assertEqual(r, ['scrambled'])

    _, r = self.anagrams2.get_anagrams("scrambler")
    self.assertEqual(r, ['scrambler'])

    _, r = self.anagrams2.get_anagrams("scrambles")
    self.assertEqual(r, ['scrambles'])

    _, r = self.anagrams2.get_anagrams("scrambling")
    self.assertEqual(r, ['scrambling'])

    _, r = self.anagrams2.get_anagrams("scranton")
    self.assertEqual(r, ['cranston', 'scranton'])

    _, r = self.anagrams2.get_anagrams("scrap")
    self.assertEqual(r, ['scrap', 'sparc'])

    _, r = self.anagrams2.get_anagrams("scrape")
    self.assertEqual(r, ['capers', 'pacers', 'scrape', 'spacer'])

    _, r = self.anagrams2.get_anagrams("scraped")
    self.assertEqual(r, ['scraped'])

    _, r = self.anagrams2.get_anagrams("scraper")
    self.assertEqual(r, ['scraper'])

    _, r = self.anagrams2.get_anagrams("scrapers")
    self.assertEqual(r, ['scrapers'])

    _, r = self.anagrams2.get_anagrams("scrapes")
    self.assertEqual(r, ['scrapes', 'spacers'])

    _, r = self.anagrams2.get_anagrams("scraping")
    self.assertEqual(r, ['scraping'])

    _, r = self.anagrams2.get_anagrams("scrapings")
    self.assertEqual(r, ['scrapings'])

    _, r = self.anagrams2.get_anagrams("scrapped")
    self.assertEqual(r, ['scrapped'])

    _, r = self.anagrams2.get_anagrams("scraps")
    self.assertEqual(r, ['scraps'])

    _, r = self.anagrams2.get_anagrams("scratch")
    self.assertEqual(r, ['scratch'])

    _, r = self.anagrams2.get_anagrams("scratched")
    self.assertEqual(r, ['scratched'])

    _, r = self.anagrams2.get_anagrams("scratcher")
    self.assertEqual(r, ['scratcher'])

    _, r = self.anagrams2.get_anagrams("scratchers")
    self.assertEqual(r, ['scratchers'])

    _, r = self.anagrams2.get_anagrams("scratches")
    self.assertEqual(r, ['scratches'])

    _, r = self.anagrams2.get_anagrams("scratching")
    self.assertEqual(r, ['scratching'])

    _, r = self.anagrams2.get_anagrams("scratchy")
    self.assertEqual(r, ['scratchy'])

    _, r = self.anagrams2.get_anagrams("scrawl")
    self.assertEqual(r, ['crawls', 'scrawl'])

    _, r = self.anagrams2.get_anagrams("scrawled")
    self.assertEqual(r, ['scrawled'])

    _, r = self.anagrams2.get_anagrams("scrawling")
    self.assertEqual(r, ['scrawling'])

    _, r = self.anagrams2.get_anagrams("scrawls")
    self.assertEqual(r, ['scrawls'])

    _, r = self.anagrams2.get_anagrams("scrawny")
    self.assertEqual(r, ['scrawny'])

    _, r = self.anagrams2.get_anagrams("scream")
    self.assertEqual(r, ['creams', 'scream'])

    _, r = self.anagrams2.get_anagrams("screamed")
    self.assertEqual(r, ['screamed'])

    _, r = self.anagrams2.get_anagrams("screamer")
    self.assertEqual(r, ['creamers', 'screamer'])

    _, r = self.anagrams2.get_anagrams("screamers")
    self.assertEqual(r, ['screamers'])

    _, r = self.anagrams2.get_anagrams("screaming")
    self.assertEqual(r, ['screaming'])

    _, r = self.anagrams2.get_anagrams("screams")
    self.assertEqual(r, ['screams'])

    _, r = self.anagrams2.get_anagrams("screech")
    self.assertEqual(r, ['screech'])

    _, r = self.anagrams2.get_anagrams("screeched")
    self.assertEqual(r, ['screeched'])

    _, r = self.anagrams2.get_anagrams("screeches")
    self.assertEqual(r, ['screeches'])

    _, r = self.anagrams2.get_anagrams("screeching")
    self.assertEqual(r, ['screeching'])

    _, r = self.anagrams2.get_anagrams("screen")
    self.assertEqual(r, ['screen'])

    _, r = self.anagrams2.get_anagrams("screened")
    self.assertEqual(r, ['screened'])

    _, r = self.anagrams2.get_anagrams("screening")
    self.assertEqual(r, ['screening'])

    _, r = self.anagrams2.get_anagrams("screenings")
    self.assertEqual(r, ['screenings'])

    _, r = self.anagrams2.get_anagrams("screenplay")
    self.assertEqual(r, ['screenplay'])

    _, r = self.anagrams2.get_anagrams("screens")
    self.assertEqual(r, ['screens'])

    _, r = self.anagrams2.get_anagrams("screw")
    self.assertEqual(r, ['crews', 'screw'])

    _, r = self.anagrams2.get_anagrams("screwball")
    self.assertEqual(r, ['screwball'])

    _, r = self.anagrams2.get_anagrams("screwdriver")
    self.assertEqual(r, ['screwdriver'])

    _, r = self.anagrams2.get_anagrams("screwed")
    self.assertEqual(r, ['screwed'])

    _, r = self.anagrams2.get_anagrams("screwing")
    self.assertEqual(r, ['screwing'])

    _, r = self.anagrams2.get_anagrams("screws")
    self.assertEqual(r, ['screws'])

    _, r = self.anagrams2.get_anagrams("scribble")
    self.assertEqual(r, ['scribble'])

    _, r = self.anagrams2.get_anagrams("scribbled")
    self.assertEqual(r, ['scribbled'])

    _, r = self.anagrams2.get_anagrams("scribbler")
    self.assertEqual(r, ['scribbler'])

    _, r = self.anagrams2.get_anagrams("scribbles")
    self.assertEqual(r, ['scribbles'])

    _, r = self.anagrams2.get_anagrams("scribe")
    self.assertEqual(r, ['scribe'])

    _, r = self.anagrams2.get_anagrams("scribes")
    self.assertEqual(r, ['scribes'])

    _, r = self.anagrams2.get_anagrams("scribing")
    self.assertEqual(r, ['scribing'])

    _, r = self.anagrams2.get_anagrams("scribners")
    self.assertEqual(r, ['scribners'])

    _, r = self.anagrams2.get_anagrams("scrimmage")
    self.assertEqual(r, ['scrimmage'])

    _, r = self.anagrams2.get_anagrams("scripps")
    self.assertEqual(r, ['scripps'])

    _, r = self.anagrams2.get_anagrams("script")
    self.assertEqual(r, ['script'])

    _, r = self.anagrams2.get_anagrams("scripts")
    self.assertEqual(r, ['scripts'])

    _, r = self.anagrams2.get_anagrams("scripture")
    self.assertEqual(r, ['scripture'])

    _, r = self.anagrams2.get_anagrams("scriptures")
    self.assertEqual(r, ['scriptures'])

    _, r = self.anagrams2.get_anagrams("scroll")
    self.assertEqual(r, ['scroll'])

    _, r = self.anagrams2.get_anagrams("scrolled")
    self.assertEqual(r, ['scrolled'])

    _, r = self.anagrams2.get_anagrams("scrolling")
    self.assertEqual(r, ['scrolling'])

    _, r = self.anagrams2.get_anagrams("scrolls")
    self.assertEqual(r, ['scrolls'])

    _, r = self.anagrams2.get_anagrams("scrooge")
    self.assertEqual(r, ['scrooge'])

    _, r = self.anagrams2.get_anagrams("scrounge")
    self.assertEqual(r, ['scrounge'])

    _, r = self.anagrams2.get_anagrams("scrub")
    self.assertEqual(r, ['curbs', 'scrub'])

    _, r = self.anagrams2.get_anagrams("scrumptious")
    self.assertEqual(r, ['scrumptious'])

    _, r = self.anagrams2.get_anagrams("scruple")
    self.assertEqual(r, ['scruple'])

    _, r = self.anagrams2.get_anagrams("scrupulous")
    self.assertEqual(r, ['scrupulous'])

    _, r = self.anagrams2.get_anagrams("scrupulously")
    self.assertEqual(r, ['scrupulously'])

    _, r = self.anagrams2.get_anagrams("scrutinize")
    self.assertEqual(r, ['scrutinize'])

    _, r = self.anagrams2.get_anagrams("scrutinized")
    self.assertEqual(r, ['scrutinized'])

    _, r = self.anagrams2.get_anagrams("scrutinizing")
    self.assertEqual(r, ['scrutinizing'])

    _, r = self.anagrams2.get_anagrams("scrutiny")
    self.assertEqual(r, ['scrutiny'])

    _, r = self.anagrams2.get_anagrams("scuba")
    self.assertEqual(r, ['scuba'])

    _, r = self.anagrams2.get_anagrams("scud")
    self.assertEqual(r, ['scud'])

    _, r = self.anagrams2.get_anagrams("scuffle")
    self.assertEqual(r, ['scuffle'])

    _, r = self.anagrams2.get_anagrams("scuffled")
    self.assertEqual(r, ['scuffled'])

    _, r = self.anagrams2.get_anagrams("scuffles")
    self.assertEqual(r, ['scuffles'])

    _, r = self.anagrams2.get_anagrams("scuffling")
    self.assertEqual(r, ['scuffling'])

    _, r = self.anagrams2.get_anagrams("sculpt")
    self.assertEqual(r, ['sculpt'])

    _, r = self.anagrams2.get_anagrams("sculpted")
    self.assertEqual(r, ['sculpted'])

    _, r = self.anagrams2.get_anagrams("sculptor")
    self.assertEqual(r, ['sculptor'])

    _, r = self.anagrams2.get_anagrams("sculptors")
    self.assertEqual(r, ['sculptors'])

    _, r = self.anagrams2.get_anagrams("sculpts")
    self.assertEqual(r, ['sculpts'])

    _, r = self.anagrams2.get_anagrams("sculpture")
    self.assertEqual(r, ['sculpture'])

    _, r = self.anagrams2.get_anagrams("sculptured")
    self.assertEqual(r, ['sculptured'])

    _, r = self.anagrams2.get_anagrams("sculptures")
    self.assertEqual(r, ['sculptures'])

    _, r = self.anagrams2.get_anagrams("scurried")
    self.assertEqual(r, ['scurried'])

    _, r = self.anagrams2.get_anagrams("scurry")
    self.assertEqual(r, ['scurry'])

    _, r = self.anagrams2.get_anagrams("scurvy")
    self.assertEqual(r, ['scurvy'])

    _, r = self.anagrams2.get_anagrams("scuttle")
    self.assertEqual(r, ['scuttle'])

    _, r = self.anagrams2.get_anagrams("scuttled")
    self.assertEqual(r, ['scuttled'])

    _, r = self.anagrams2.get_anagrams("scuttles")
    self.assertEqual(r, ['scuttles'])

    _, r = self.anagrams2.get_anagrams("scuttling")
    self.assertEqual(r, ['scuttling'])

    _, r = self.anagrams2.get_anagrams("scylla")
    self.assertEqual(r, ['scylla'])

    _, r = self.anagrams2.get_anagrams("scythe")
    self.assertEqual(r, ['scythe'])

    _, r = self.anagrams2.get_anagrams("scythes")
    self.assertEqual(r, ['scythes'])

    _, r = self.anagrams2.get_anagrams("scythia")
    self.assertEqual(r, ['scythia'])

    _, r = self.anagrams2.get_anagrams("sea")
    self.assertEqual(r, ['sea'])

    _, r = self.anagrams2.get_anagrams("seaboard")
    self.assertEqual(r, ['seaboard'])

    _, r = self.anagrams2.get_anagrams("seaborg")
    self.assertEqual(r, ['seaborg'])

    _, r = self.anagrams2.get_anagrams("seabrook")
    self.assertEqual(r, ['seabrook'])

    _, r = self.anagrams2.get_anagrams("seacoast")
    self.assertEqual(r, ['seacoast'])

    _, r = self.anagrams2.get_anagrams("seacoasts")
    self.assertEqual(r, ['seacoasts'])

    _, r = self.anagrams2.get_anagrams("seafood")
    self.assertEqual(r, ['seafood'])

    _, r = self.anagrams2.get_anagrams("seagate")
    self.assertEqual(r, ['seagate'])

    _, r = self.anagrams2.get_anagrams("seagram")
    self.assertEqual(r, ['seagram'])

    _, r = self.anagrams2.get_anagrams("seagull")
    self.assertEqual(r, ['seagull'])

    _, r = self.anagrams2.get_anagrams("seahorse")
    self.assertEqual(r, ['seahorse', 'seashore'])

    _, r = self.anagrams2.get_anagrams("seal")
    self.assertEqual(r, ['sale', 'seal'])

    _, r = self.anagrams2.get_anagrams("sealed")
    self.assertEqual(r, ['leased', 'sealed'])

    _, r = self.anagrams2.get_anagrams("sealer")
    self.assertEqual(r, ['sealer'])

    _, r = self.anagrams2.get_anagrams("sealing")
    self.assertEqual(r, ['leasing', 'sealing'])

    _, r = self.anagrams2.get_anagrams("seals")
    self.assertEqual(r, ['sales', 'seals'])

    _, r = self.anagrams2.get_anagrams("sealy")
    self.assertEqual(r, ['sealy'])

    _, r = self.anagrams2.get_anagrams("seam")
    self.assertEqual(r, ['ames', 'same', 'seam'])

    _, r = self.anagrams2.get_anagrams("seaman")
    self.assertEqual(r, ['seaman'])

    _, r = self.anagrams2.get_anagrams("seamed")
    self.assertEqual(r, ['seamed'])

    _, r = self.anagrams2.get_anagrams("seamen")
    self.assertEqual(r, ['enemas', 'seamen'])

    _, r = self.anagrams2.get_anagrams("seaming")
    self.assertEqual(r, ['seaming'])

    _, r = self.anagrams2.get_anagrams("seams")
    self.assertEqual(r, ['seams'])

    _, r = self.anagrams2.get_anagrams("seamy")
    self.assertEqual(r, ['seamy'])

    _, r = self.anagrams2.get_anagrams("sean")
    self.assertEqual(r, ['sane', 'sean'])

    _, r = self.anagrams2.get_anagrams("seaport")
    self.assertEqual(r, ['seaport'])

    _, r = self.anagrams2.get_anagrams("seaports")
    self.assertEqual(r, ['seaports'])

    _, r = self.anagrams2.get_anagrams("seaquarium")
    self.assertEqual(r, ['seaquarium'])

    _, r = self.anagrams2.get_anagrams("sear")
    self.assertEqual(r, ['ares', 'ears', 'eras', 'sear'])

    _, r = self.anagrams2.get_anagrams("search")
    self.assertEqual(r, ['arches', 'casher', 'chaser', 'search'])

    _, r = self.anagrams2.get_anagrams("searched")
    self.assertEqual(r, ['searched'])

    _, r = self.anagrams2.get_anagrams("searcher")
    self.assertEqual(r, ['research', 'searcher'])

    _, r = self.anagrams2.get_anagrams("searchers")
    self.assertEqual(r, ['searchers'])

    _, r = self.anagrams2.get_anagrams("searches")
    self.assertEqual(r, ['searches'])

    _, r = self.anagrams2.get_anagrams("searching")
    self.assertEqual(r, ['searching'])

    _, r = self.anagrams2.get_anagrams("searchingly")
    self.assertEqual(r, ['searchingly'])

    _, r = self.anagrams2.get_anagrams("searchings")
    self.assertEqual(r, ['searchings'])

    _, r = self.anagrams2.get_anagrams("searchlight")
    self.assertEqual(r, ['searchlight'])

    _, r = self.anagrams2.get_anagrams("seared")
    self.assertEqual(r, ['erased', 'seared'])

    _, r = self.anagrams2.get_anagrams("searing")
    self.assertEqual(r, ['erasing', 'gainers', 'regains', 'searing'])

    _, r = self.anagrams2.get_anagrams("searingly")
    self.assertEqual(r, ['searingly'])

    _, r = self.anagrams2.get_anagrams("sears")
    self.assertEqual(r, ['sears'])

    _, r = self.anagrams2.get_anagrams("seas")
    self.assertEqual(r, ['seas'])

    _, r = self.anagrams2.get_anagrams("seashore")
    self.assertEqual(r, ['seahorse', 'seashore'])

    _, r = self.anagrams2.get_anagrams("seashores")
    self.assertEqual(r, ['seashores'])

    _, r = self.anagrams2.get_anagrams("seaside")
    self.assertEqual(r, ['disease', 'seaside'])

    _, r = self.anagrams2.get_anagrams("season")
    self.assertEqual(r, ['season'])

    _, r = self.anagrams2.get_anagrams("seasonable")
    self.assertEqual(r, ['seasonable'])

    _, r = self.anagrams2.get_anagrams("seasonably")
    self.assertEqual(r, ['seasonably'])

    _, r = self.anagrams2.get_anagrams("seasonal")
    self.assertEqual(r, ['seasonal'])

    _, r = self.anagrams2.get_anagrams("seasonally")
    self.assertEqual(r, ['seasonally'])

    _, r = self.anagrams2.get_anagrams("seasoned")
    self.assertEqual(r, ['seasoned'])

    _, r = self.anagrams2.get_anagrams("seasoner")
    self.assertEqual(r, ['seasoner'])

    _, r = self.anagrams2.get_anagrams("seasoners")
    self.assertEqual(r, ['seasoners'])

    _, r = self.anagrams2.get_anagrams("seasoning")
    self.assertEqual(r, ['seasoning'])

    _, r = self.anagrams2.get_anagrams("seasonings")
    self.assertEqual(r, ['seasonings'])

    _, r = self.anagrams2.get_anagrams("seasons")
    self.assertEqual(r, ['seasons'])

    _, r = self.anagrams2.get_anagrams("seat")
    self.assertEqual(r, ['east', 'eats', 'sate', 'seat', 'teas'])

    _, r = self.anagrams2.get_anagrams("seated")
    self.assertEqual(r, ['seated', 'sedate', 'teased'])

    _, r = self.anagrams2.get_anagrams("seating")
    self.assertEqual(r, ['eatings', 'seating', 'teasing'])

    _, r = self.anagrams2.get_anagrams("seats")
    self.assertEqual(r, ['asset', 'sates', 'seats'])

    _, r = self.anagrams2.get_anagrams("seattle")
    self.assertEqual(r, ['seattle'])

    _, r = self.anagrams2.get_anagrams("seaward")
    self.assertEqual(r, ['seaward'])

    _, r = self.anagrams2.get_anagrams("seaweed")
    self.assertEqual(r, ['seaweed'])

    _, r = self.anagrams2.get_anagrams("sebastian")
    self.assertEqual(r, ['sebastian'])

    _, r = self.anagrams2.get_anagrams("secant")
    self.assertEqual(r, ['ascent', 'enacts', 'secant'])

    _, r = self.anagrams2.get_anagrams("secede")
    self.assertEqual(r, ['secede'])

    _, r = self.anagrams2.get_anagrams("seceded")
    self.assertEqual(r, ['seceded'])

    _, r = self.anagrams2.get_anagrams("secedes")
    self.assertEqual(r, ['secedes'])

    _, r = self.anagrams2.get_anagrams("seceding")
    self.assertEqual(r, ['seceding'])

    _, r = self.anagrams2.get_anagrams("secession")
    self.assertEqual(r, ['secession'])

    _, r = self.anagrams2.get_anagrams("seclude")
    self.assertEqual(r, ['seclude'])

    _, r = self.anagrams2.get_anagrams("secluded")
    self.assertEqual(r, ['secluded'])

    _, r = self.anagrams2.get_anagrams("seclusion")
    self.assertEqual(r, ['seclusion'])

    _, r = self.anagrams2.get_anagrams("second")
    self.assertEqual(r, ['second'])

    _, r = self.anagrams2.get_anagrams("secondaries")
    self.assertEqual(r, ['secondaries'])

    _, r = self.anagrams2.get_anagrams("secondarily")
    self.assertEqual(r, ['secondarily'])

    _, r = self.anagrams2.get_anagrams("secondary")
    self.assertEqual(r, ['secondary'])

    _, r = self.anagrams2.get_anagrams("seconded")
    self.assertEqual(r, ['seconded'])

    _, r = self.anagrams2.get_anagrams("seconder")
    self.assertEqual(r, ['censored', 'encoders', 'seconder'])

    _, r = self.anagrams2.get_anagrams("seconders")
    self.assertEqual(r, ['seconders'])

    _, r = self.anagrams2.get_anagrams("secondhand")
    self.assertEqual(r, ['secondhand'])

    _, r = self.anagrams2.get_anagrams("seconding")
    self.assertEqual(r, ['consigned', 'encodings', 'seconding'])

    _, r = self.anagrams2.get_anagrams("secondly")
    self.assertEqual(r, ['secondly'])

    _, r = self.anagrams2.get_anagrams("seconds")
    self.assertEqual(r, ['seconds'])

    _, r = self.anagrams2.get_anagrams("secrecy")
    self.assertEqual(r, ['secrecy'])

    _, r = self.anagrams2.get_anagrams("secret")
    self.assertEqual(r, ['erects', 'secret'])

    _, r = self.anagrams2.get_anagrams("secretarial")
    self.assertEqual(r, ['secretarial'])

    _, r = self.anagrams2.get_anagrams("secretariat")
    self.assertEqual(r, ['secretariat'])

    _, r = self.anagrams2.get_anagrams("secretaries")
    self.assertEqual(r, ['secretaries'])

    _, r = self.anagrams2.get_anagrams("secretary")
    self.assertEqual(r, ['secretary'])

    _, r = self.anagrams2.get_anagrams("secrete")
    self.assertEqual(r, ['secrete'])

    _, r = self.anagrams2.get_anagrams("secreted")
    self.assertEqual(r, ['secreted'])

    _, r = self.anagrams2.get_anagrams("secretes")
    self.assertEqual(r, ['secretes'])

    _, r = self.anagrams2.get_anagrams("secreting")
    self.assertEqual(r, ['secreting'])

    _, r = self.anagrams2.get_anagrams("secretion")
    self.assertEqual(r, ['erections', 'secretion'])

    _, r = self.anagrams2.get_anagrams("secretions")
    self.assertEqual(r, ['secretions'])

    _, r = self.anagrams2.get_anagrams("secretive")
    self.assertEqual(r, ['secretive'])

    _, r = self.anagrams2.get_anagrams("secretively")
    self.assertEqual(r, ['secretively'])

    _, r = self.anagrams2.get_anagrams("secretly")
    self.assertEqual(r, ['secretly'])

    _, r = self.anagrams2.get_anagrams("secrets")
    self.assertEqual(r, ['secrets'])

    _, r = self.anagrams2.get_anagrams("sect")
    self.assertEqual(r, ['sect'])

    _, r = self.anagrams2.get_anagrams("sectarian")
    self.assertEqual(r, ['ascertain', 'cartesian', 'sectarian'])

    _, r = self.anagrams2.get_anagrams("section")
    self.assertEqual(r, ['notices', 'section'])

    _, r = self.anagrams2.get_anagrams("sectional")
    self.assertEqual(r, ['coastline', 'sectional'])

    _, r = self.anagrams2.get_anagrams("sectioned")
    self.assertEqual(r, ['sectioned'])

    _, r = self.anagrams2.get_anagrams("sectioning")
    self.assertEqual(r, ['sectioning'])

    _, r = self.anagrams2.get_anagrams("sections")
    self.assertEqual(r, ['sections'])

    _, r = self.anagrams2.get_anagrams("sector")
    self.assertEqual(r, ['corset', 'escort', 'sector'])

    _, r = self.anagrams2.get_anagrams("sectors")
    self.assertEqual(r, ['escorts', 'sectors'])

    _, r = self.anagrams2.get_anagrams("sects")
    self.assertEqual(r, ['sects'])

    _, r = self.anagrams2.get_anagrams("secular")
    self.assertEqual(r, ['secular'])

    _, r = self.anagrams2.get_anagrams("secure")
    self.assertEqual(r, ['rescue', 'secure'])

    _, r = self.anagrams2.get_anagrams("secured")
    self.assertEqual(r, ['reduces', 'rescued', 'secured', 'seducer'])

    _, r = self.anagrams2.get_anagrams("securely")
    self.assertEqual(r, ['securely'])

    _, r = self.anagrams2.get_anagrams("secures")
    self.assertEqual(r, ['rescues', 'secures'])

    _, r = self.anagrams2.get_anagrams("securing")
    self.assertEqual(r, ['rescuing', 'securing'])

    _, r = self.anagrams2.get_anagrams("securings")
    self.assertEqual(r, ['securings'])

    _, r = self.anagrams2.get_anagrams("securities")
    self.assertEqual(r, ['securities'])

    _, r = self.anagrams2.get_anagrams("security")
    self.assertEqual(r, ['security'])

    _, r = self.anagrams2.get_anagrams("sedan")
    self.assertEqual(r, ['andes', 'danes', 'deans', 'sedan', 'snead'])

    _, r = self.anagrams2.get_anagrams("sedate")
    self.assertEqual(r, ['seated', 'sedate', 'teased'])

    _, r = self.anagrams2.get_anagrams("sedge")
    self.assertEqual(r, ['edges', 'sedge'])

    _, r = self.anagrams2.get_anagrams("sedgwick")
    self.assertEqual(r, ['sedgwick'])

    _, r = self.anagrams2.get_anagrams("sediment")
    self.assertEqual(r, ['sediment'])

    _, r = self.anagrams2.get_anagrams("sedimentary")
    self.assertEqual(r, ['sedimentary'])

    _, r = self.anagrams2.get_anagrams("sediments")
    self.assertEqual(r, ['sediments'])

    _, r = self.anagrams2.get_anagrams("sedition")
    self.assertEqual(r, ['editions', 'sedition'])

    _, r = self.anagrams2.get_anagrams("seditious")
    self.assertEqual(r, ['seditious'])

    _, r = self.anagrams2.get_anagrams("seduce")
    self.assertEqual(r, ['seduce'])

    _, r = self.anagrams2.get_anagrams("seduced")
    self.assertEqual(r, ['deduces', 'seduced'])

    _, r = self.anagrams2.get_anagrams("seducer")
    self.assertEqual(r, ['reduces', 'rescued', 'secured', 'seducer'])

    _, r = self.anagrams2.get_anagrams("seducers")
    self.assertEqual(r, ['seducers'])

    _, r = self.anagrams2.get_anagrams("seduces")
    self.assertEqual(r, ['seduces'])

    _, r = self.anagrams2.get_anagrams("seducing")
    self.assertEqual(r, ['seducing'])

    _, r = self.anagrams2.get_anagrams("seduction")
    self.assertEqual(r, ['seduction'])

    _, r = self.anagrams2.get_anagrams("seductive")
    self.assertEqual(r, ['seductive'])

    _, r = self.anagrams2.get_anagrams("see")
    self.assertEqual(r, ['see'])

    _, r = self.anagrams2.get_anagrams("seed")
    self.assertEqual(r, ['seed'])

    _, r = self.anagrams2.get_anagrams("seeded")
    self.assertEqual(r, ['seeded'])

    _, r = self.anagrams2.get_anagrams("seeder")
    self.assertEqual(r, ['seeder'])

    _, r = self.anagrams2.get_anagrams("seeders")
    self.assertEqual(r, ['seeders'])

    _, r = self.anagrams2.get_anagrams("seeding")
    self.assertEqual(r, ['seeding'])

    _, r = self.anagrams2.get_anagrams("seedings")
    self.assertEqual(r, ['seedings'])

    _, r = self.anagrams2.get_anagrams("seedling")
    self.assertEqual(r, ['seedling'])

    _, r = self.anagrams2.get_anagrams("seedlings")
    self.assertEqual(r, ['seedlings'])

    _, r = self.anagrams2.get_anagrams("seeds")
    self.assertEqual(r, ['seeds'])

    _, r = self.anagrams2.get_anagrams("seedy")
    self.assertEqual(r, ['seedy'])

    _, r = self.anagrams2.get_anagrams("seeing")
    self.assertEqual(r, ['seeing'])

    _, r = self.anagrams2.get_anagrams("seek")
    self.assertEqual(r, ['ekes', 'seek'])

    _, r = self.anagrams2.get_anagrams("seeker")
    self.assertEqual(r, ['seeker'])

    _, r = self.anagrams2.get_anagrams("seekers")
    self.assertEqual(r, ['seekers'])

    _, r = self.anagrams2.get_anagrams("seeking")
    self.assertEqual(r, ['seeking'])

    _, r = self.anagrams2.get_anagrams("seeks")
    self.assertEqual(r, ['seeks'])

    _, r = self.anagrams2.get_anagrams("seeley")
    self.assertEqual(r, ['elysee', 'seeley'])

    _, r = self.anagrams2.get_anagrams("seem")
    self.assertEqual(r, ['seem'])

    _, r = self.anagrams2.get_anagrams("seemed")
    self.assertEqual(r, ['seemed'])

    _, r = self.anagrams2.get_anagrams("seeming")
    self.assertEqual(r, ['seeming'])

    _, r = self.anagrams2.get_anagrams("seemingly")
    self.assertEqual(r, ['seemingly'])

    _, r = self.anagrams2.get_anagrams("seemly")
    self.assertEqual(r, ['seemly'])

    _, r = self.anagrams2.get_anagrams("seems")
    self.assertEqual(r, ['seems'])

    _, r = self.anagrams2.get_anagrams("seen")
    self.assertEqual(r, ['seen'])

    _, r = self.anagrams2.get_anagrams("seep")
    self.assertEqual(r, ['seep'])

    _, r = self.anagrams2.get_anagrams("seepage")
    self.assertEqual(r, ['seepage'])

    _, r = self.anagrams2.get_anagrams("seeped")
    self.assertEqual(r, ['seeped'])

    _, r = self.anagrams2.get_anagrams("seeping")
    self.assertEqual(r, ['seeping'])

    _, r = self.anagrams2.get_anagrams("seeps")
    self.assertEqual(r, ['seeps'])

    _, r = self.anagrams2.get_anagrams("seer")
    self.assertEqual(r, ['seer'])

    _, r = self.anagrams2.get_anagrams("seers")
    self.assertEqual(r, ['seers'])

    _, r = self.anagrams2.get_anagrams("seersucker")
    self.assertEqual(r, ['seersucker'])

    _, r = self.anagrams2.get_anagrams("sees")
    self.assertEqual(r, ['sees'])

    _, r = self.anagrams2.get_anagrams("seethe")
    self.assertEqual(r, ['seethe'])

    _, r = self.anagrams2.get_anagrams("seethed")
    self.assertEqual(r, ['seethed', 'sheeted'])

    _, r = self.anagrams2.get_anagrams("seethes")
    self.assertEqual(r, ['seethes'])

    _, r = self.anagrams2.get_anagrams("seething")
    self.assertEqual(r, ['seething', 'sheeting'])

    _, r = self.anagrams2.get_anagrams("segment")
    self.assertEqual(r, ['segment'])

    _, r = self.anagrams2.get_anagrams("segmentation")
    self.assertEqual(r, ['segmentation'])

    _, r = self.anagrams2.get_anagrams("segmentations")
    self.assertEqual(r, ['segmentations'])

    _, r = self.anagrams2.get_anagrams("segmented")
    self.assertEqual(r, ['segmented'])

    _, r = self.anagrams2.get_anagrams("segmenting")
    self.assertEqual(r, ['segmenting'])

    _, r = self.anagrams2.get_anagrams("segments")
    self.assertEqual(r, ['segments'])

    _, r = self.anagrams2.get_anagrams("segovia")
    self.assertEqual(r, ['segovia'])

    _, r = self.anagrams2.get_anagrams("segregate")
    self.assertEqual(r, ['segregate'])

    _, r = self.anagrams2.get_anagrams("segregated")
    self.assertEqual(r, ['segregated'])

    _, r = self.anagrams2.get_anagrams("segregates")
    self.assertEqual(r, ['segregates'])

    _, r = self.anagrams2.get_anagrams("segregating")
    self.assertEqual(r, ['segregating'])

    _, r = self.anagrams2.get_anagrams("segregation")
    self.assertEqual(r, ['segregation'])

    _, r = self.anagrams2.get_anagrams("segundo")
    self.assertEqual(r, ['segundo'])

    _, r = self.anagrams2.get_anagrams("seidel")
    self.assertEqual(r, ['diesel', 'seidel'])

    _, r = self.anagrams2.get_anagrams("seismic")
    self.assertEqual(r, ['seismic'])

    _, r = self.anagrams2.get_anagrams("seismograph")
    self.assertEqual(r, ['seismograph'])

    _, r = self.anagrams2.get_anagrams("seismology")
    self.assertEqual(r, ['seismology'])

    _, r = self.anagrams2.get_anagrams("seize")
    self.assertEqual(r, ['seize'])

    _, r = self.anagrams2.get_anagrams("seized")
    self.assertEqual(r, ['seized'])

    _, r = self.anagrams2.get_anagrams("seizes")
    self.assertEqual(r, ['seizes'])

    _, r = self.anagrams2.get_anagrams("seizing")
    self.assertEqual(r, ['seizing'])

    _, r = self.anagrams2.get_anagrams("seizure")
    self.assertEqual(r, ['seizure'])

    _, r = self.anagrams2.get_anagrams("seizures")
    self.assertEqual(r, ['seizures'])

    _, r = self.anagrams2.get_anagrams("seldom")
    self.assertEqual(r, ['models', 'seldom'])

    _, r = self.anagrams2.get_anagrams("select")
    self.assertEqual(r, ['elects', 'select'])

    _, r = self.anagrams2.get_anagrams("selected")
    self.assertEqual(r, ['selected'])

    _, r = self.anagrams2.get_anagrams("selecting")
    self.assertEqual(r, ['selecting'])

    _, r = self.anagrams2.get_anagrams("selection")
    self.assertEqual(r, ['elections', 'selection'])

    _, r = self.anagrams2.get_anagrams("selections")
    self.assertEqual(r, ['selections'])

    _, r = self.anagrams2.get_anagrams("selective")
    self.assertEqual(r, ['electives', 'selective'])

    _, r = self.anagrams2.get_anagrams("selectively")
    self.assertEqual(r, ['selectively'])

    _, r = self.anagrams2.get_anagrams("selectivity")
    self.assertEqual(r, ['selectivity'])

    _, r = self.anagrams2.get_anagrams("selectman")
    self.assertEqual(r, ['selectman'])

    _, r = self.anagrams2.get_anagrams("selectmen")
    self.assertEqual(r, ['selectmen'])

    _, r = self.anagrams2.get_anagrams("selector")
    self.assertEqual(r, ['electors', 'selector'])

    _, r = self.anagrams2.get_anagrams("selectors")
    self.assertEqual(r, ['selectors'])

    _, r = self.anagrams2.get_anagrams("selectric")
    self.assertEqual(r, ['selectric'])

    _, r = self.anagrams2.get_anagrams("selects")
    self.assertEqual(r, ['selects'])

    _, r = self.anagrams2.get_anagrams("selena")
    self.assertEqual(r, ['selena'])

    _, r = self.anagrams2.get_anagrams("selenium")
    self.assertEqual(r, ['selenium'])

    _, r = self.anagrams2.get_anagrams("self")
    self.assertEqual(r, ['self'])

    _, r = self.anagrams2.get_anagrams("selfish")
    self.assertEqual(r, ['selfish'])

    _, r = self.anagrams2.get_anagrams("selfishly")
    self.assertEqual(r, ['selfishly'])

    _, r = self.anagrams2.get_anagrams("selfishness")
    self.assertEqual(r, ['selfishness'])

    _, r = self.anagrams2.get_anagrams("selfridge")
    self.assertEqual(r, ['selfridge'])

    _, r = self.anagrams2.get_anagrams("selfsame")
    self.assertEqual(r, ['selfsame'])

    _, r = self.anagrams2.get_anagrams("selkirk")
    self.assertEqual(r, ['selkirk'])

    _, r = self.anagrams2.get_anagrams("sell")
    self.assertEqual(r, ['sell'])

    _, r = self.anagrams2.get_anagrams("seller")
    self.assertEqual(r, ['resell', 'seller'])

    _, r = self.anagrams2.get_anagrams("sellers")
    self.assertEqual(r, ['sellers'])

    _, r = self.anagrams2.get_anagrams("selling")
    self.assertEqual(r, ['selling'])

    _, r = self.anagrams2.get_anagrams("sellout")
    self.assertEqual(r, ['sellout'])

    _, r = self.anagrams2.get_anagrams("sells")
    self.assertEqual(r, ['sells'])

    _, r = self.anagrams2.get_anagrams("selma")
    self.assertEqual(r, ['lames', 'males', 'meals', 'salem', 'selma'])

    _, r = self.anagrams2.get_anagrams("seltzer")
    self.assertEqual(r, ['seltzer'])

    _, r = self.anagrams2.get_anagrams("selves")
    self.assertEqual(r, ['selves', 'vessel'])

    _, r = self.anagrams2.get_anagrams("selwyn")
    self.assertEqual(r, ['selwyn'])

    _, r = self.anagrams2.get_anagrams("semantic")
    self.assertEqual(r, ['semantic'])

    _, r = self.anagrams2.get_anagrams("semantical")
    self.assertEqual(r, ['semantical'])

    _, r = self.anagrams2.get_anagrams("semantically")
    self.assertEqual(r, ['semantically'])

    _, r = self.anagrams2.get_anagrams("semanticist")
    self.assertEqual(r, ['semanticist'])

    _, r = self.anagrams2.get_anagrams("semanticists")
    self.assertEqual(r, ['semanticists'])

    _, r = self.anagrams2.get_anagrams("semantics")
    self.assertEqual(r, ['semantics'])

    _, r = self.anagrams2.get_anagrams("semaphore")
    self.assertEqual(r, ['semaphore'])

    _, r = self.anagrams2.get_anagrams("semaphores")
    self.assertEqual(r, ['semaphores'])

    _, r = self.anagrams2.get_anagrams("semblance")
    self.assertEqual(r, ['semblance'])

    _, r = self.anagrams2.get_anagrams("semester")
    self.assertEqual(r, ['semester'])

    _, r = self.anagrams2.get_anagrams("semesters")
    self.assertEqual(r, ['semesters'])

    _, r = self.anagrams2.get_anagrams("semi")
    self.assertEqual(r, ['semi'])

    _, r = self.anagrams2.get_anagrams("semiautomated")
    self.assertEqual(r, ['semiautomated'])

    _, r = self.anagrams2.get_anagrams("semicolon")
    self.assertEqual(r, ['semicolon'])

    _, r = self.anagrams2.get_anagrams("semicolons")
    self.assertEqual(r, ['semicolons'])

    _, r = self.anagrams2.get_anagrams("semiconductor")
    self.assertEqual(r, ['semiconductor'])

    _, r = self.anagrams2.get_anagrams("semiconductors")
    self.assertEqual(r, ['semiconductors'])

    _, r = self.anagrams2.get_anagrams("seminal")
    self.assertEqual(r, ['menials', 'seminal'])

    _, r = self.anagrams2.get_anagrams("seminar")
    self.assertEqual(r, ['marines', 'remains', 'seminar'])

    _, r = self.anagrams2.get_anagrams("seminarian")
    self.assertEqual(r, ['seminarian'])

    _, r = self.anagrams2.get_anagrams("seminaries")
    self.assertEqual(r, ['seminaries'])

    _, r = self.anagrams2.get_anagrams("seminars")
    self.assertEqual(r, ['seminars'])

    _, r = self.anagrams2.get_anagrams("seminary")
    self.assertEqual(r, ['seminary'])

    _, r = self.anagrams2.get_anagrams("seminole")
    self.assertEqual(r, ['seminole'])

    _, r = self.anagrams2.get_anagrams("semipermanent")
    self.assertEqual(r, ['semipermanent'])

    _, r = self.anagrams2.get_anagrams("semipermanently")
    self.assertEqual(r, ['semipermanently'])

    _, r = self.anagrams2.get_anagrams("semiramis")
    self.assertEqual(r, ['semiramis'])

    _, r = self.anagrams2.get_anagrams("semite")
    self.assertEqual(r, ['semite'])

    _, r = self.anagrams2.get_anagrams("semitic")
    self.assertEqual(r, ['semitic'])

    _, r = self.anagrams2.get_anagrams("semiticize")
    self.assertEqual(r, ['semiticize'])

    _, r = self.anagrams2.get_anagrams("semiticizes")
    self.assertEqual(r, ['semiticizes'])

    _, r = self.anagrams2.get_anagrams("semitization")
    self.assertEqual(r, ['itemizations', 'semitization'])

    _, r = self.anagrams2.get_anagrams("semitizations")
    self.assertEqual(r, ['semitizations'])

    _, r = self.anagrams2.get_anagrams("semitize")
    self.assertEqual(r, ['itemizes', 'semitize'])

    _, r = self.anagrams2.get_anagrams("semitizes")
    self.assertEqual(r, ['semitizes'])

    _, r = self.anagrams2.get_anagrams("senate")
    self.assertEqual(r, ['senate'])

    _, r = self.anagrams2.get_anagrams("senates")
    self.assertEqual(r, ['senates'])

    _, r = self.anagrams2.get_anagrams("senator")
    self.assertEqual(r, ['senator', 'treason'])

    _, r = self.anagrams2.get_anagrams("senatorial")
    self.assertEqual(r, ['rationales', 'senatorial'])

    _, r = self.anagrams2.get_anagrams("senators")
    self.assertEqual(r, ['senators'])

    _, r = self.anagrams2.get_anagrams("send")
    self.assertEqual(r, ['dens', 'ends', 'send'])

    _, r = self.anagrams2.get_anagrams("sender")
    self.assertEqual(r, ['denser', 'enders', 'sender'])

    _, r = self.anagrams2.get_anagrams("senders")
    self.assertEqual(r, ['redness', 'senders'])

    _, r = self.anagrams2.get_anagrams("sending")
    self.assertEqual(r, ['endings', 'sending'])

    _, r = self.anagrams2.get_anagrams("sends")
    self.assertEqual(r, ['sends'])

    _, r = self.anagrams2.get_anagrams("seneca")
    self.assertEqual(r, ['seneca'])

    _, r = self.anagrams2.get_anagrams("senegal")
    self.assertEqual(r, ['angeles', 'senegal'])

    _, r = self.anagrams2.get_anagrams("senile")
    self.assertEqual(r, ['senile'])

    _, r = self.anagrams2.get_anagrams("senior")
    self.assertEqual(r, ['senior'])

    _, r = self.anagrams2.get_anagrams("seniority")
    self.assertEqual(r, ['seniority'])

    _, r = self.anagrams2.get_anagrams("seniors")
    self.assertEqual(r, ['seniors'])

    _, r = self.anagrams2.get_anagrams("sensation")
    self.assertEqual(r, ['sensation'])

    _, r = self.anagrams2.get_anagrams("sensational")
    self.assertEqual(r, ['sensational'])

    _, r = self.anagrams2.get_anagrams("sensationally")
    self.assertEqual(r, ['sensationally'])

    _, r = self.anagrams2.get_anagrams("sensations")
    self.assertEqual(r, ['sensations'])

    _, r = self.anagrams2.get_anagrams("sense")
    self.assertEqual(r, ['essen', 'sense'])

    _, r = self.anagrams2.get_anagrams("sensed")
    self.assertEqual(r, ['sensed'])

    _, r = self.anagrams2.get_anagrams("senseless")
    self.assertEqual(r, ['senseless'])

    _, r = self.anagrams2.get_anagrams("senselessly")
    self.assertEqual(r, ['senselessly'])

    _, r = self.anagrams2.get_anagrams("senselessness")
    self.assertEqual(r, ['senselessness'])

    _, r = self.anagrams2.get_anagrams("senses")
    self.assertEqual(r, ['senses'])

    _, r = self.anagrams2.get_anagrams("sensibilities")
    self.assertEqual(r, ['sensibilities'])

    _, r = self.anagrams2.get_anagrams("sensibility")
    self.assertEqual(r, ['sensibility'])

    _, r = self.anagrams2.get_anagrams("sensible")
    self.assertEqual(r, ['sensible'])

    _, r = self.anagrams2.get_anagrams("sensibly")
    self.assertEqual(r, ['sensibly'])

    _, r = self.anagrams2.get_anagrams("sensing")
    self.assertEqual(r, ['ensigns', 'sensing'])

    _, r = self.anagrams2.get_anagrams("sensitive")
    self.assertEqual(r, ['sensitive'])

    _, r = self.anagrams2.get_anagrams("sensitively")
    self.assertEqual(r, ['sensitively'])

    _, r = self.anagrams2.get_anagrams("sensitiveness")
    self.assertEqual(r, ['sensitiveness'])

    _, r = self.anagrams2.get_anagrams("sensitives")
    self.assertEqual(r, ['sensitives'])

    _, r = self.anagrams2.get_anagrams("sensitivities")
    self.assertEqual(r, ['sensitivities'])

    _, r = self.anagrams2.get_anagrams("sensitivity")
    self.assertEqual(r, ['sensitivity'])

    _, r = self.anagrams2.get_anagrams("sensor")
    self.assertEqual(r, ['sensor', 'snores'])

    _, r = self.anagrams2.get_anagrams("sensors")
    self.assertEqual(r, ['sensors'])

    _, r = self.anagrams2.get_anagrams("sensory")
    self.assertEqual(r, ['sensory'])

    _, r = self.anagrams2.get_anagrams("sensual")
    self.assertEqual(r, ['sensual'])

    _, r = self.anagrams2.get_anagrams("sensuous")
    self.assertEqual(r, ['sensuous'])

    _, r = self.anagrams2.get_anagrams("sent")
    self.assertEqual(r, ['nest', 'nets', 'sent', 'tens'])

    _, r = self.anagrams2.get_anagrams("sentence")
    self.assertEqual(r, ['sentence'])

    _, r = self.anagrams2.get_anagrams("sentenced")
    self.assertEqual(r, ['sentenced'])

    _, r = self.anagrams2.get_anagrams("sentences")
    self.assertEqual(r, ['sentences'])

    _, r = self.anagrams2.get_anagrams("sentencing")
    self.assertEqual(r, ['sentencing'])

    _, r = self.anagrams2.get_anagrams("sentential")
    self.assertEqual(r, ['sentential'])

    _, r = self.anagrams2.get_anagrams("sentiment")
    self.assertEqual(r, ['sentiment'])

    _, r = self.anagrams2.get_anagrams("sentimental")
    self.assertEqual(r, ['sentimental'])

    _, r = self.anagrams2.get_anagrams("sentimentally")
    self.assertEqual(r, ['sentimentally'])

    _, r = self.anagrams2.get_anagrams("sentiments")
    self.assertEqual(r, ['sentiments'])

    _, r = self.anagrams2.get_anagrams("sentinel")
    self.assertEqual(r, ['sentinel'])

    _, r = self.anagrams2.get_anagrams("sentinels")
    self.assertEqual(r, ['sentinels'])

    _, r = self.anagrams2.get_anagrams("sentries")
    self.assertEqual(r, ['sentries'])

    _, r = self.anagrams2.get_anagrams("sentry")
    self.assertEqual(r, ['sentry'])

    _, r = self.anagrams2.get_anagrams("seoul")
    self.assertEqual(r, ['louse', 'seoul'])

    _, r = self.anagrams2.get_anagrams("separable")
    self.assertEqual(r, ['separable'])

    _, r = self.anagrams2.get_anagrams("separate")
    self.assertEqual(r, ['separate'])

    _, r = self.anagrams2.get_anagrams("separated")
    self.assertEqual(r, ['separated'])

    _, r = self.anagrams2.get_anagrams("separately")
    self.assertEqual(r, ['separately'])

    _, r = self.anagrams2.get_anagrams("separateness")
    self.assertEqual(r, ['separateness'])

    _, r = self.anagrams2.get_anagrams("separates")
    self.assertEqual(r, ['separates'])

    _, r = self.anagrams2.get_anagrams("separating")
    self.assertEqual(r, ['separating'])

    _, r = self.anagrams2.get_anagrams("separation")
    self.assertEqual(r, ['separation'])

    _, r = self.anagrams2.get_anagrams("separations")
    self.assertEqual(r, ['separations'])

    _, r = self.anagrams2.get_anagrams("separator")
    self.assertEqual(r, ['separator'])

    _, r = self.anagrams2.get_anagrams("separators")
    self.assertEqual(r, ['separators'])

    _, r = self.anagrams2.get_anagrams("sepia")
    self.assertEqual(r, ['sepia'])

    _, r = self.anagrams2.get_anagrams("sepoy")
    self.assertEqual(r, ['sepoy'])

    _, r = self.anagrams2.get_anagrams("sept")
    self.assertEqual(r, ['pest', 'pets', 'sept', 'step'])

    _, r = self.anagrams2.get_anagrams("september")
    self.assertEqual(r, ['september'])

    _, r = self.anagrams2.get_anagrams("septembers")
    self.assertEqual(r, ['septembers'])

    _, r = self.anagrams2.get_anagrams("sepulcher")
    self.assertEqual(r, ['sepulcher'])

    _, r = self.anagrams2.get_anagrams("sepulchers")
    self.assertEqual(r, ['sepulchers'])

    _, r = self.anagrams2.get_anagrams("sequel")
    self.assertEqual(r, ['sequel'])

    _, r = self.anagrams2.get_anagrams("sequels")
    self.assertEqual(r, ['sequels'])

    _, r = self.anagrams2.get_anagrams("sequence")
    self.assertEqual(r, ['sequence'])

    _, r = self.anagrams2.get_anagrams("sequenced")
    self.assertEqual(r, ['sequenced'])

    _, r = self.anagrams2.get_anagrams("sequencer")
    self.assertEqual(r, ['sequencer'])

    _, r = self.anagrams2.get_anagrams("sequencers")
    self.assertEqual(r, ['sequencers'])

    _, r = self.anagrams2.get_anagrams("sequences")
    self.assertEqual(r, ['sequences'])

    _, r = self.anagrams2.get_anagrams("sequencing")
    self.assertEqual(r, ['sequencing'])

    _, r = self.anagrams2.get_anagrams("sequencings")
    self.assertEqual(r, ['sequencings'])

    _, r = self.anagrams2.get_anagrams("sequential")
    self.assertEqual(r, ['sequential'])

    _, r = self.anagrams2.get_anagrams("sequentiality")
    self.assertEqual(r, ['sequentiality'])

    _, r = self.anagrams2.get_anagrams("sequentialize")
    self.assertEqual(r, ['sequentialize'])

    _, r = self.anagrams2.get_anagrams("sequentialized")
    self.assertEqual(r, ['sequentialized'])

    _, r = self.anagrams2.get_anagrams("sequentializes")
    self.assertEqual(r, ['sequentializes'])

    _, r = self.anagrams2.get_anagrams("sequentializing")
    self.assertEqual(r, ['sequentializing'])

    _, r = self.anagrams2.get_anagrams("sequentially")
    self.assertEqual(r, ['sequentially'])

    _, r = self.anagrams2.get_anagrams("sequester")
    self.assertEqual(r, ['sequester'])

    _, r = self.anagrams2.get_anagrams("sequoia")
    self.assertEqual(r, ['sequoia'])

    _, r = self.anagrams2.get_anagrams("serafin")
    self.assertEqual(r, ['serafin'])

    _, r = self.anagrams2.get_anagrams("serbia")
    self.assertEqual(r, ['rabies', 'serbia'])

    _, r = self.anagrams2.get_anagrams("serbian")
    self.assertEqual(r, ['serbian'])

    _, r = self.anagrams2.get_anagrams("serbians")
    self.assertEqual(r, ['serbians'])

    _, r = self.anagrams2.get_anagrams("serbo-")
    self.assertEqual(r, ['serbo-'])

    _, r = self.anagrams2.get_anagrams("serendipitous")
    self.assertEqual(r, ['serendipitous'])

    _, r = self.anagrams2.get_anagrams("serendipity")
    self.assertEqual(r, ['serendipity'])

    _, r = self.anagrams2.get_anagrams("serene")
    self.assertEqual(r, ['serene'])

    _, r = self.anagrams2.get_anagrams("serenely")
    self.assertEqual(r, ['serenely'])

    _, r = self.anagrams2.get_anagrams("serenity")
    self.assertEqual(r, ['serenity'])

    _, r = self.anagrams2.get_anagrams("serf")
    self.assertEqual(r, ['serf'])

    _, r = self.anagrams2.get_anagrams("serfs")
    self.assertEqual(r, ['serfs'])

    _, r = self.anagrams2.get_anagrams("sergeant")
    self.assertEqual(r, ['sergeant'])

    _, r = self.anagrams2.get_anagrams("sergeants")
    self.assertEqual(r, ['greatness', 'sergeants'])

    _, r = self.anagrams2.get_anagrams("sergei")
    self.assertEqual(r, ['sergei'])

    _, r = self.anagrams2.get_anagrams("serial")
    self.assertEqual(r, ['israel', 'serial'])

    _, r = self.anagrams2.get_anagrams("serializability")
    self.assertEqual(r, ['serializability'])

    _, r = self.anagrams2.get_anagrams("serializable")
    self.assertEqual(r, ['serializable'])

    _, r = self.anagrams2.get_anagrams("serialization")
    self.assertEqual(r, ['serialization'])

    _, r = self.anagrams2.get_anagrams("serializations")
    self.assertEqual(r, ['serializations'])

    _, r = self.anagrams2.get_anagrams("serialize")
    self.assertEqual(r, ['serialize'])

    _, r = self.anagrams2.get_anagrams("serialized")
    self.assertEqual(r, ['serialized'])

    _, r = self.anagrams2.get_anagrams("serializes")
    self.assertEqual(r, ['serializes'])

    _, r = self.anagrams2.get_anagrams("serializing")
    self.assertEqual(r, ['serializing'])

    _, r = self.anagrams2.get_anagrams("serially")
    self.assertEqual(r, ['serially'])

    _, r = self.anagrams2.get_anagrams("serials")
    self.assertEqual(r, ['airless', 'serials'])

    _, r = self.anagrams2.get_anagrams("series")
    self.assertEqual(r, ['series'])

    _, r = self.anagrams2.get_anagrams("serif")
    self.assertEqual(r, ['fires', 'fries', 'serif'])

    _, r = self.anagrams2.get_anagrams("serious")
    self.assertEqual(r, ['serious'])

    _, r = self.anagrams2.get_anagrams("seriously")
    self.assertEqual(r, ['seriously'])

    _, r = self.anagrams2.get_anagrams("seriousness")
    self.assertEqual(r, ['seriousness'])

    _, r = self.anagrams2.get_anagrams("sermon")
    self.assertEqual(r, ['sermon'])

    _, r = self.anagrams2.get_anagrams("sermons")
    self.assertEqual(r, ['sermons'])

    _, r = self.anagrams2.get_anagrams("serpens")
    self.assertEqual(r, ['serpens'])

    _, r = self.anagrams2.get_anagrams("serpent")
    self.assertEqual(r, ['present', 'repents', 'serpent'])

    _, r = self.anagrams2.get_anagrams("serpentine")
    self.assertEqual(r, ['serpentine'])

    _, r = self.anagrams2.get_anagrams("serpents")
    self.assertEqual(r, ['presents', 'serpents'])

    _, r = self.anagrams2.get_anagrams("serra")
    self.assertEqual(r, ['rears', 'serra'])

    _, r = self.anagrams2.get_anagrams("serum")
    self.assertEqual(r, ['remus', 'serum'])

    _, r = self.anagrams2.get_anagrams("serums")
    self.assertEqual(r, ['serums'])

    _, r = self.anagrams2.get_anagrams("servant")
    self.assertEqual(r, ['servant', 'taverns'])

    _, r = self.anagrams2.get_anagrams("servants")
    self.assertEqual(r, ['servants'])

    _, r = self.anagrams2.get_anagrams("serve")
    self.assertEqual(r, ['serve', 'sever', 'veers', 'verse'])

    _, r = self.anagrams2.get_anagrams("served")
    self.assertEqual(r, ['served', 'versed'])

    _, r = self.anagrams2.get_anagrams("server")
    self.assertEqual(r, ['server'])

    _, r = self.anagrams2.get_anagrams("servers")
    self.assertEqual(r, ['servers'])

    _, r = self.anagrams2.get_anagrams("serves")
    self.assertEqual(r, ['serves', 'severs', 'verses'])

    _, r = self.anagrams2.get_anagrams("service")
    self.assertEqual(r, ['service'])

    _, r = self.anagrams2.get_anagrams("serviceability")
    self.assertEqual(r, ['serviceability'])

    _, r = self.anagrams2.get_anagrams("serviceable")
    self.assertEqual(r, ['serviceable'])

    _, r = self.anagrams2.get_anagrams("serviced")
    self.assertEqual(r, ['serviced'])

    _, r = self.anagrams2.get_anagrams("serviceman")
    self.assertEqual(r, ['serviceman'])

    _, r = self.anagrams2.get_anagrams("servicemen")
    self.assertEqual(r, ['servicemen'])

    _, r = self.anagrams2.get_anagrams("services")
    self.assertEqual(r, ['services'])

    _, r = self.anagrams2.get_anagrams("servicing")
    self.assertEqual(r, ['servicing'])

    _, r = self.anagrams2.get_anagrams("servile")
    self.assertEqual(r, ['relives', 'servile'])

    _, r = self.anagrams2.get_anagrams("serving")
    self.assertEqual(r, ['serving', 'versing'])

    _, r = self.anagrams2.get_anagrams("servings")
    self.assertEqual(r, ['servings'])

    _, r = self.anagrams2.get_anagrams("servitude")
    self.assertEqual(r, ['servitude'])

    _, r = self.anagrams2.get_anagrams("servo")
    self.assertEqual(r, ['roves', 'servo'])

    _, r = self.anagrams2.get_anagrams("servomechanism")
    self.assertEqual(r, ['servomechanism'])

    _, r = self.anagrams2.get_anagrams("sesame")
    self.assertEqual(r, ['sesame'])

    _, r = self.anagrams2.get_anagrams("session")
    self.assertEqual(r, ['session'])

    _, r = self.anagrams2.get_anagrams("sessions")
    self.assertEqual(r, ['sessions'])

    _, r = self.anagrams2.get_anagrams("set")
    self.assertEqual(r, ['set'])

    _, r = self.anagrams2.get_anagrams("setback")
    self.assertEqual(r, ['setback'])

    _, r = self.anagrams2.get_anagrams("seth")
    self.assertEqual(r, ['seth'])

    _, r = self.anagrams2.get_anagrams("sets")
    self.assertEqual(r, ['sets', 'tess'])

    _, r = self.anagrams2.get_anagrams("settable")
    self.assertEqual(r, ['settable', 'testable'])

    _, r = self.anagrams2.get_anagrams("setter")
    self.assertEqual(r, ['setter', 'street', 'tester'])

    _, r = self.anagrams2.get_anagrams("setters")
    self.assertEqual(r, ['setters', 'streets', 'testers'])

    _, r = self.anagrams2.get_anagrams("setting")
    self.assertEqual(r, ['setting', 'testing'])

    _, r = self.anagrams2.get_anagrams("settings")
    self.assertEqual(r, ['settings', 'testings'])

    _, r = self.anagrams2.get_anagrams("settle")
    self.assertEqual(r, ['settle'])

    _, r = self.anagrams2.get_anagrams("settled")
    self.assertEqual(r, ['settled'])

    _, r = self.anagrams2.get_anagrams("settlement")
    self.assertEqual(r, ['settlement'])

    _, r = self.anagrams2.get_anagrams("settlements")
    self.assertEqual(r, ['settlements'])

    _, r = self.anagrams2.get_anagrams("settler")
    self.assertEqual(r, ['letters', 'settler'])

    _, r = self.anagrams2.get_anagrams("settlers")
    self.assertEqual(r, ['settlers'])

    _, r = self.anagrams2.get_anagrams("settles")
    self.assertEqual(r, ['settles'])

    _, r = self.anagrams2.get_anagrams("settling")
    self.assertEqual(r, ['settling'])

    _, r = self.anagrams2.get_anagrams("setup")
    self.assertEqual(r, ['setup', 'upset'])

    _, r = self.anagrams2.get_anagrams("setups")
    self.assertEqual(r, ['setups', 'upsets'])

    _, r = self.anagrams2.get_anagrams("seven")
    self.assertEqual(r, ['evens', 'seven'])

    _, r = self.anagrams2.get_anagrams("sevenfold")
    self.assertEqual(r, ['sevenfold'])

    _, r = self.anagrams2.get_anagrams("sevens")
    self.assertEqual(r, ['sevens'])

    _, r = self.anagrams2.get_anagrams("seventeen")
    self.assertEqual(r, ['seventeen'])

    _, r = self.anagrams2.get_anagrams("seventeens")
    self.assertEqual(r, ['seventeens'])

    _, r = self.anagrams2.get_anagrams("seventeenth")
    self.assertEqual(r, ['seventeenth'])

    _, r = self.anagrams2.get_anagrams("seventh")
    self.assertEqual(r, ['seventh'])

    _, r = self.anagrams2.get_anagrams("seventies")
    self.assertEqual(r, ['seventies'])

    _, r = self.anagrams2.get_anagrams("seventieth")
    self.assertEqual(r, ['seventieth'])

    _, r = self.anagrams2.get_anagrams("seventy")
    self.assertEqual(r, ['seventy'])

    _, r = self.anagrams2.get_anagrams("sever")
    self.assertEqual(r, ['serve', 'sever', 'veers', 'verse'])

    _, r = self.anagrams2.get_anagrams("several")
    self.assertEqual(r, ['reveals', 'several'])

    _, r = self.anagrams2.get_anagrams("severalfold")
    self.assertEqual(r, ['severalfold'])

    _, r = self.anagrams2.get_anagrams("severally")
    self.assertEqual(r, ['severally'])

    _, r = self.anagrams2.get_anagrams("severance")
    self.assertEqual(r, ['severance'])

    _, r = self.anagrams2.get_anagrams("severe")
    self.assertEqual(r, ['reeves', 'severe'])

    _, r = self.anagrams2.get_anagrams("severed")
    self.assertEqual(r, ['deserve', 'severed'])

    _, r = self.anagrams2.get_anagrams("severely")
    self.assertEqual(r, ['severely'])

    _, r = self.anagrams2.get_anagrams("severer")
    self.assertEqual(r, ['reserve', 'reveres', 'reverse', 'severer'])

    _, r = self.anagrams2.get_anagrams("severest")
    self.assertEqual(r, ['severest'])

    _, r = self.anagrams2.get_anagrams("severing")
    self.assertEqual(r, ['severing'])

    _, r = self.anagrams2.get_anagrams("severities")
    self.assertEqual(r, ['severities'])

    _, r = self.anagrams2.get_anagrams("severity")
    self.assertEqual(r, ['severity'])

    _, r = self.anagrams2.get_anagrams("severn")
    self.assertEqual(r, ['nerves', 'severn'])

    _, r = self.anagrams2.get_anagrams("severs")
    self.assertEqual(r, ['serves', 'severs', 'verses'])

    _, r = self.anagrams2.get_anagrams("seville")
    self.assertEqual(r, ['seville'])

    _, r = self.anagrams2.get_anagrams("sew")
    self.assertEqual(r, ['sew'])

    _, r = self.anagrams2.get_anagrams("sewage")
    self.assertEqual(r, ['sewage'])

    _, r = self.anagrams2.get_anagrams("seward")
    self.assertEqual(r, ['seward'])

    _, r = self.anagrams2.get_anagrams("sewed")
    self.assertEqual(r, ['sewed', 'swede', 'weeds'])

    _, r = self.anagrams2.get_anagrams("sewer")
    self.assertEqual(r, ['sewer'])

    _, r = self.anagrams2.get_anagrams("sewers")
    self.assertEqual(r, ['sewers'])

    _, r = self.anagrams2.get_anagrams("sewing")
    self.assertEqual(r, ['sewing'])

    _, r = self.anagrams2.get_anagrams("sews")
    self.assertEqual(r, ['sews'])

    _, r = self.anagrams2.get_anagrams("sex")
    self.assertEqual(r, ['sex'])

    _, r = self.anagrams2.get_anagrams("sexed")
    self.assertEqual(r, ['sexed'])

    _, r = self.anagrams2.get_anagrams("sexes")
    self.assertEqual(r, ['essex', 'sexes'])

    _, r = self.anagrams2.get_anagrams("sexist")
    self.assertEqual(r, ['exists', 'sexist'])

    _, r = self.anagrams2.get_anagrams("sextans")
    self.assertEqual(r, ['sextans'])

    _, r = self.anagrams2.get_anagrams("sextet")
    self.assertEqual(r, ['sextet'])

    _, r = self.anagrams2.get_anagrams("sextillion")
    self.assertEqual(r, ['sextillion'])

    _, r = self.anagrams2.get_anagrams("sexton")
    self.assertEqual(r, ['sexton'])

    _, r = self.anagrams2.get_anagrams("sextuple")
    self.assertEqual(r, ['sextuple'])

    _, r = self.anagrams2.get_anagrams("sextuplet")
    self.assertEqual(r, ['sextuplet'])

    _, r = self.anagrams2.get_anagrams("sexual")
    self.assertEqual(r, ['sexual'])

    _, r = self.anagrams2.get_anagrams("sexuality")
    self.assertEqual(r, ['sexuality'])

    _, r = self.anagrams2.get_anagrams("sexually")
    self.assertEqual(r, ['sexually'])

    _, r = self.anagrams2.get_anagrams("sexy")
    self.assertEqual(r, ['sexy'])

    _, r = self.anagrams2.get_anagrams("seychelles")
    self.assertEqual(r, ['seychelles'])

    _, r = self.anagrams2.get_anagrams("seymour")
    self.assertEqual(r, ['seymour'])

    _, r = self.anagrams2.get_anagrams("shabby")
    self.assertEqual(r, ['shabby'])

    _, r = self.anagrams2.get_anagrams("shack")
    self.assertEqual(r, ['hacks', 'shack'])

    _, r = self.anagrams2.get_anagrams("shacked")
    self.assertEqual(r, ['shacked'])

    _, r = self.anagrams2.get_anagrams("shackle")
    self.assertEqual(r, ['shackle'])

    _, r = self.anagrams2.get_anagrams("shackled")
    self.assertEqual(r, ['shackled'])

    _, r = self.anagrams2.get_anagrams("shackles")
    self.assertEqual(r, ['shackles'])

    _, r = self.anagrams2.get_anagrams("shackling")
    self.assertEqual(r, ['shackling'])

    _, r = self.anagrams2.get_anagrams("shacks")
    self.assertEqual(r, ['shacks'])

    _, r = self.anagrams2.get_anagrams("shade")
    self.assertEqual(r, ['hades', 'heads', 'shade'])

    _, r = self.anagrams2.get_anagrams("shaded")
    self.assertEqual(r, ['dashed', 'shaded'])

    _, r = self.anagrams2.get_anagrams("shades")
    self.assertEqual(r, ['dashes', 'shades'])

    _, r = self.anagrams2.get_anagrams("shadier")
    self.assertEqual(r, ['shadier'])

    _, r = self.anagrams2.get_anagrams("shadiest")
    self.assertEqual(r, ['shadiest'])

    _, r = self.anagrams2.get_anagrams("shadily")
    self.assertEqual(r, ['shadily'])

    _, r = self.anagrams2.get_anagrams("shadiness")
    self.assertEqual(r, ['shadiness'])

    _, r = self.anagrams2.get_anagrams("shading")
    self.assertEqual(r, ['dashing', 'shading'])

    _, r = self.anagrams2.get_anagrams("shadings")
    self.assertEqual(r, ['shadings'])

    _, r = self.anagrams2.get_anagrams("shadow")
    self.assertEqual(r, ['shadow'])

    _, r = self.anagrams2.get_anagrams("shadowed")
    self.assertEqual(r, ['shadowed'])

    _, r = self.anagrams2.get_anagrams("shadowing")
    self.assertEqual(r, ['shadowing'])

    _, r = self.anagrams2.get_anagrams("shadows")
    self.assertEqual(r, ['shadows'])

    _, r = self.anagrams2.get_anagrams("shadowy")
    self.assertEqual(r, ['shadowy'])

    _, r = self.anagrams2.get_anagrams("shady")
    self.assertEqual(r, ['shady'])

    _, r = self.anagrams2.get_anagrams("shafer")
    self.assertEqual(r, ['afresh', 'shafer'])

    _, r = self.anagrams2.get_anagrams("shaffer")
    self.assertEqual(r, ['shaffer'])

    _, r = self.anagrams2.get_anagrams("shaft")
    self.assertEqual(r, ['shaft'])

    _, r = self.anagrams2.get_anagrams("shafts")
    self.assertEqual(r, ['shafts'])

    _, r = self.anagrams2.get_anagrams("shaggy")
    self.assertEqual(r, ['shaggy'])

    _, r = self.anagrams2.get_anagrams("shakable")
    self.assertEqual(r, ['shakable'])

    _, r = self.anagrams2.get_anagrams("shakably")
    self.assertEqual(r, ['shakably'])

    _, r = self.anagrams2.get_anagrams("shake")
    self.assertEqual(r, ['shake'])

    _, r = self.anagrams2.get_anagrams("shakedown")
    self.assertEqual(r, ['shakedown'])

    _, r = self.anagrams2.get_anagrams("shaken")
    self.assertEqual(r, ['shaken'])

    _, r = self.anagrams2.get_anagrams("shaker")
    self.assertEqual(r, ['shaker'])

    _, r = self.anagrams2.get_anagrams("shakers")
    self.assertEqual(r, ['shakers'])

    _, r = self.anagrams2.get_anagrams("shakes")
    self.assertEqual(r, ['shakes'])

    _, r = self.anagrams2.get_anagrams("shakespeare")
    self.assertEqual(r, ['shakespeare'])

    _, r = self.anagrams2.get_anagrams("shakespearean")
    self.assertEqual(r, ['shakespearean'])

    _, r = self.anagrams2.get_anagrams("shakespearian")
    self.assertEqual(r, ['shakespearian'])

    _, r = self.anagrams2.get_anagrams("shakespearize")
    self.assertEqual(r, ['shakespearize'])

    _, r = self.anagrams2.get_anagrams("shakespearizes")
    self.assertEqual(r, ['shakespearizes'])

    _, r = self.anagrams2.get_anagrams("shakiness")
    self.assertEqual(r, ['shakiness'])

    _, r = self.anagrams2.get_anagrams("shaking")
    self.assertEqual(r, ['shaking'])

    _, r = self.anagrams2.get_anagrams("shaky")
    self.assertEqual(r, ['shaky'])

    _, r = self.anagrams2.get_anagrams("shale")
    self.assertEqual(r, ['heals', 'leash', 'shale'])

    _, r = self.anagrams2.get_anagrams("shall")
    self.assertEqual(r, ['halls', 'shall'])

    _, r = self.anagrams2.get_anagrams("shallow")
    self.assertEqual(r, ['shallow'])

    _, r = self.anagrams2.get_anagrams("shallower")
    self.assertEqual(r, ['shallower'])

    _, r = self.anagrams2.get_anagrams("shallowly")
    self.assertEqual(r, ['shallowly'])

    _, r = self.anagrams2.get_anagrams("shallowness")
    self.assertEqual(r, ['shallowness'])

    _, r = self.anagrams2.get_anagrams("sham")
    self.assertEqual(r, ['hams', 'mash', 'sham'])

    _, r = self.anagrams2.get_anagrams("shambles")
    self.assertEqual(r, ['shambles'])

    _, r = self.anagrams2.get_anagrams("shame")
    self.assertEqual(r, ['shame'])

    _, r = self.anagrams2.get_anagrams("shamed")
    self.assertEqual(r, ['mashed', 'shamed'])

    _, r = self.anagrams2.get_anagrams("shameful")
    self.assertEqual(r, ['shameful'])

    _, r = self.anagrams2.get_anagrams("shamefully")
    self.assertEqual(r, ['shamefully'])

    _, r = self.anagrams2.get_anagrams("shameless")
    self.assertEqual(r, ['shameless'])

    _, r = self.anagrams2.get_anagrams("shamelessly")
    self.assertEqual(r, ['shamelessly'])

    _, r = self.anagrams2.get_anagrams("shames")
    self.assertEqual(r, ['mashes', 'shames'])

    _, r = self.anagrams2.get_anagrams("shaming")
    self.assertEqual(r, ['mashing', 'shaming'])

    _, r = self.anagrams2.get_anagrams("shampoo")
    self.assertEqual(r, ['shampoo'])

    _, r = self.anagrams2.get_anagrams("shamrock")
    self.assertEqual(r, ['shamrock'])

    _, r = self.anagrams2.get_anagrams("shams")
    self.assertEqual(r, ['shams', 'smash'])

    _, r = self.anagrams2.get_anagrams("shanghai")
    self.assertEqual(r, ['shanghai'])

    _, r = self.anagrams2.get_anagrams("shanghaied")
    self.assertEqual(r, ['shanghaied'])

    _, r = self.anagrams2.get_anagrams("shanghaiing")
    self.assertEqual(r, ['shanghaiing'])

    _, r = self.anagrams2.get_anagrams("shanghaiings")
    self.assertEqual(r, ['shanghaiings'])

    _, r = self.anagrams2.get_anagrams("shanghais")
    self.assertEqual(r, ['shanghais'])

    _, r = self.anagrams2.get_anagrams("shannon")
    self.assertEqual(r, ['shannon'])

    _, r = self.anagrams2.get_anagrams("shanties")
    self.assertEqual(r, ['shanties'])

    _, r = self.anagrams2.get_anagrams("shantung")
    self.assertEqual(r, ['shantung'])

    _, r = self.anagrams2.get_anagrams("shanty")
    self.assertEqual(r, ['shanty'])

    _, r = self.anagrams2.get_anagrams("shape")
    self.assertEqual(r, ['heaps', 'phase', 'shape'])

    _, r = self.anagrams2.get_anagrams("shaped")
    self.assertEqual(r, ['phased', 'shaped'])

    _, r = self.anagrams2.get_anagrams("shapeless")
    self.assertEqual(r, ['shapeless'])

    _, r = self.anagrams2.get_anagrams("shapelessly")
    self.assertEqual(r, ['shapelessly'])

    _, r = self.anagrams2.get_anagrams("shapelessness")
    self.assertEqual(r, ['shapelessness'])

    _, r = self.anagrams2.get_anagrams("shapely")
    self.assertEqual(r, ['shapely'])

    _, r = self.anagrams2.get_anagrams("shaper")
    self.assertEqual(r, ['phaser', 'phrase', 'shaper', 'sharpe'])

    _, r = self.anagrams2.get_anagrams("shapers")
    self.assertEqual(r, ['phasers', 'phrases', 'shapers'])

    _, r = self.anagrams2.get_anagrams("shapes")
    self.assertEqual(r, ['phases', 'shapes'])

    _, r = self.anagrams2.get_anagrams("shaping")
    self.assertEqual(r, ['phasing', 'shaping'])

    _, r = self.anagrams2.get_anagrams("shapiro")
    self.assertEqual(r, ['shapiro'])

    _, r = self.anagrams2.get_anagrams("sharable")
    self.assertEqual(r, ['sharable'])

    _, r = self.anagrams2.get_anagrams("shard")
    self.assertEqual(r, ['shard'])

    _, r = self.anagrams2.get_anagrams("share")
    self.assertEqual(r, ['asher', 'hares', 'hears', 'share', 'shear'])

    _, r = self.anagrams2.get_anagrams("shareable")
    self.assertEqual(r, ['shareable'])

    _, r = self.anagrams2.get_anagrams("sharecropper")
    self.assertEqual(r, ['sharecropper'])

    _, r = self.anagrams2.get_anagrams("sharecroppers")
    self.assertEqual(r, ['sharecroppers'])

    _, r = self.anagrams2.get_anagrams("shared")
    self.assertEqual(r, ['dasher', 'shared'])

    _, r = self.anagrams2.get_anagrams("shareholder")
    self.assertEqual(r, ['shareholder'])

    _, r = self.anagrams2.get_anagrams("shareholders")
    self.assertEqual(r, ['shareholders'])

    _, r = self.anagrams2.get_anagrams("sharer")
    self.assertEqual(r, ['rasher', 'sharer'])

    _, r = self.anagrams2.get_anagrams("sharers")
    self.assertEqual(r, ['sharers'])

    _, r = self.anagrams2.get_anagrams("shares")
    self.assertEqual(r, ['shares', 'shears'])

    _, r = self.anagrams2.get_anagrams("shari")
    self.assertEqual(r, ['hairs', 'shari'])

    _, r = self.anagrams2.get_anagrams("sharing")
    self.assertEqual(r, ['garnish', 'sharing'])

    _, r = self.anagrams2.get_anagrams("shark")
    self.assertEqual(r, ['shark'])

    _, r = self.anagrams2.get_anagrams("sharks")
    self.assertEqual(r, ['sharks'])

    _, r = self.anagrams2.get_anagrams("sharon")
    self.assertEqual(r, ['sharon'])

    _, r = self.anagrams2.get_anagrams("sharp")
    self.assertEqual(r, ['sharp'])

    _, r = self.anagrams2.get_anagrams("sharpe")
    self.assertEqual(r, ['phaser', 'phrase', 'shaper', 'sharpe'])

    _, r = self.anagrams2.get_anagrams("sharpen")
    self.assertEqual(r, ['sharpen'])

    _, r = self.anagrams2.get_anagrams("sharpened")
    self.assertEqual(r, ['sharpened'])

    _, r = self.anagrams2.get_anagrams("sharpening")
    self.assertEqual(r, ['sharpening'])

    _, r = self.anagrams2.get_anagrams("sharpens")
    self.assertEqual(r, ['sharpens'])

    _, r = self.anagrams2.get_anagrams("sharper")
    self.assertEqual(r, ['harpers', 'sharper'])

    _, r = self.anagrams2.get_anagrams("sharpest")
    self.assertEqual(r, ['sharpest'])

    _, r = self.anagrams2.get_anagrams("sharply")
    self.assertEqual(r, ['sharply'])

    _, r = self.anagrams2.get_anagrams("sharpness")
    self.assertEqual(r, ['sharpness'])

    _, r = self.anagrams2.get_anagrams("sharpshoot")
    self.assertEqual(r, ['sharpshoot'])

    _, r = self.anagrams2.get_anagrams("shasta")
    self.assertEqual(r, ['shasta'])

    _, r = self.anagrams2.get_anagrams("shatter")
    self.assertEqual(r, ['shatter', 'threats'])

    _, r = self.anagrams2.get_anagrams("shattered")
    self.assertEqual(r, ['shattered'])

    _, r = self.anagrams2.get_anagrams("shattering")
    self.assertEqual(r, ['shattering', 'straighten'])

    _, r = self.anagrams2.get_anagrams("shatterproof")
    self.assertEqual(r, ['shatterproof'])

    _, r = self.anagrams2.get_anagrams("shatters")
    self.assertEqual(r, ['shatters'])

    _, r = self.anagrams2.get_anagrams("shattuck")
    self.assertEqual(r, ['shattuck'])

    _, r = self.anagrams2.get_anagrams("shave")
    self.assertEqual(r, ['haves', 'shave'])

    _, r = self.anagrams2.get_anagrams("shaved")
    self.assertEqual(r, ['shaved'])

    _, r = self.anagrams2.get_anagrams("shaven")
    self.assertEqual(r, ['havens', 'shaven'])

    _, r = self.anagrams2.get_anagrams("shaves")
    self.assertEqual(r, ['shaves'])

    _, r = self.anagrams2.get_anagrams("shaving")
    self.assertEqual(r, ['shaving'])

    _, r = self.anagrams2.get_anagrams("shavings")
    self.assertEqual(r, ['shavings'])

    _, r = self.anagrams2.get_anagrams("shawano")
    self.assertEqual(r, ['shawano'])

    _, r = self.anagrams2.get_anagrams("shawl")
    self.assertEqual(r, ['shawl', 'walsh'])

    _, r = self.anagrams2.get_anagrams("shawls")
    self.assertEqual(r, ['shawls'])

    _, r = self.anagrams2.get_anagrams("shawnee")
    self.assertEqual(r, ['shawnee'])

    _, r = self.anagrams2.get_anagrams("she")
    self.assertEqual(r, ['she'])

    _, r = self.anagrams2.get_anagrams("shea")
    self.assertEqual(r, ['shea'])

    _, r = self.anagrams2.get_anagrams("sheaf")
    self.assertEqual(r, ['sheaf'])

    _, r = self.anagrams2.get_anagrams("shear")
    self.assertEqual(r, ['asher', 'hares', 'hears', 'share', 'shear'])

    _, r = self.anagrams2.get_anagrams("sheared")
    self.assertEqual(r, ['adheres', 'headers', 'sheared'])

    _, r = self.anagrams2.get_anagrams("shearer")
    self.assertEqual(r, ['hearers', 'shearer'])

    _, r = self.anagrams2.get_anagrams("shearing")
    self.assertEqual(r, ['hearings', 'shearing'])

    _, r = self.anagrams2.get_anagrams("shears")
    self.assertEqual(r, ['shares', 'shears'])

    _, r = self.anagrams2.get_anagrams("sheath")
    self.assertEqual(r, ['sheath'])

    _, r = self.anagrams2.get_anagrams("sheathing")
    self.assertEqual(r, ['sheathing'])

    _, r = self.anagrams2.get_anagrams("sheaths")
    self.assertEqual(r, ['sheaths'])

    _, r = self.anagrams2.get_anagrams("sheaves")
    self.assertEqual(r, ['sheaves'])

    _, r = self.anagrams2.get_anagrams("sheboygan")
    self.assertEqual(r, ['sheboygan'])

    _, r = self.anagrams2.get_anagrams("shed")
    self.assertEqual(r, ['shed'])

    _, r = self.anagrams2.get_anagrams("shedding")
    self.assertEqual(r, ['shedding'])

    _, r = self.anagrams2.get_anagrams("shedir")
    self.assertEqual(r, ['shedir'])

    _, r = self.anagrams2.get_anagrams("sheds")
    self.assertEqual(r, ['sheds'])

    _, r = self.anagrams2.get_anagrams("sheehan")
    self.assertEqual(r, ['sheehan'])

    _, r = self.anagrams2.get_anagrams("sheen")
    self.assertEqual(r, ['sheen'])

    _, r = self.anagrams2.get_anagrams("sheep")
    self.assertEqual(r, ['sheep'])

    _, r = self.anagrams2.get_anagrams("sheepskin")
    self.assertEqual(r, ['sheepskin'])

    _, r = self.anagrams2.get_anagrams("sheer")
    self.assertEqual(r, ['heres', 'sheer'])

    _, r = self.anagrams2.get_anagrams("sheered")
    self.assertEqual(r, ['sheered'])

    _, r = self.anagrams2.get_anagrams("sheet")
    self.assertEqual(r, ['sheet', 'these'])

    _, r = self.anagrams2.get_anagrams("sheeted")
    self.assertEqual(r, ['seethed', 'sheeted'])

    _, r = self.anagrams2.get_anagrams("sheeting")
    self.assertEqual(r, ['seething', 'sheeting'])

    _, r = self.anagrams2.get_anagrams("sheets")
    self.assertEqual(r, ['sheets', 'theses'])

    _, r = self.anagrams2.get_anagrams("sheffield")
    self.assertEqual(r, ['sheffield'])

    _, r = self.anagrams2.get_anagrams("sheik")
    self.assertEqual(r, ['hikes', 'sheik'])

    _, r = self.anagrams2.get_anagrams("sheila")
    self.assertEqual(r, ['elisha', 'sheila'])

    _, r = self.anagrams2.get_anagrams("shelby")
    self.assertEqual(r, ['shelby'])

    _, r = self.anagrams2.get_anagrams("sheldon")
    self.assertEqual(r, ['sheldon'])

    _, r = self.anagrams2.get_anagrams("shelf")
    self.assertEqual(r, ['flesh', 'shelf'])

    _, r = self.anagrams2.get_anagrams("shell")
    self.assertEqual(r, ['hells', 'shell'])

    _, r = self.anagrams2.get_anagrams("shelled")
    self.assertEqual(r, ['shelled'])

    _, r = self.anagrams2.get_anagrams("sheller")
    self.assertEqual(r, ['sheller'])

    _, r = self.anagrams2.get_anagrams("shelley")
    self.assertEqual(r, ['shelley'])

    _, r = self.anagrams2.get_anagrams("shelling")
    self.assertEqual(r, ['shelling'])

    _, r = self.anagrams2.get_anagrams("shells")
    self.assertEqual(r, ['shells'])

    _, r = self.anagrams2.get_anagrams("shelter")
    self.assertEqual(r, ['shelter'])

    _, r = self.anagrams2.get_anagrams("sheltered")
    self.assertEqual(r, ['sheltered'])

    _, r = self.anagrams2.get_anagrams("sheltering")
    self.assertEqual(r, ['sheltering'])

    _, r = self.anagrams2.get_anagrams("shelters")
    self.assertEqual(r, ['shelters'])

    _, r = self.anagrams2.get_anagrams("shelton")
    self.assertEqual(r, ['shelton'])

    _, r = self.anagrams2.get_anagrams("shelve")
    self.assertEqual(r, ['shelve'])

    _, r = self.anagrams2.get_anagrams("shelved")
    self.assertEqual(r, ['shelved'])

    _, r = self.anagrams2.get_anagrams("shelves")
    self.assertEqual(r, ['shelves'])

    _, r = self.anagrams2.get_anagrams("shelving")
    self.assertEqual(r, ['shelving'])

    _, r = self.anagrams2.get_anagrams("shenandoah")
    self.assertEqual(r, ['shenandoah'])

    _, r = self.anagrams2.get_anagrams("shenanigan")
    self.assertEqual(r, ['shenanigan'])

    _, r = self.anagrams2.get_anagrams("shepard")
    self.assertEqual(r, ['phrased', 'pradesh', 'shepard'])

    _, r = self.anagrams2.get_anagrams("shepherd")
    self.assertEqual(r, ['shepherd'])

    _, r = self.anagrams2.get_anagrams("shepherds")
    self.assertEqual(r, ['shepherds'])

    _, r = self.anagrams2.get_anagrams("sheppard")
    self.assertEqual(r, ['sheppard'])

    _, r = self.anagrams2.get_anagrams("sheraton")
    self.assertEqual(r, ['sheraton'])

    _, r = self.anagrams2.get_anagrams("sherbet")
    self.assertEqual(r, ['sherbet'])

    _, r = self.anagrams2.get_anagrams("sheridan")
    self.assertEqual(r, ['sheridan'])

    _, r = self.anagrams2.get_anagrams("sheriff")
    self.assertEqual(r, ['sheriff'])

    _, r = self.anagrams2.get_anagrams("sheriffs")
    self.assertEqual(r, ['sheriffs'])

    _, r = self.anagrams2.get_anagrams("sherlock")
    self.assertEqual(r, ['sherlock'])

    _, r = self.anagrams2.get_anagrams("sherman")
    self.assertEqual(r, ['sherman'])

    _, r = self.anagrams2.get_anagrams("sherrill")
    self.assertEqual(r, ['sherrill'])

    _, r = self.anagrams2.get_anagrams("sherry")
    self.assertEqual(r, ['sherry'])

    _, r = self.anagrams2.get_anagrams("sherwin")
    self.assertEqual(r, ['sherwin'])

    _, r = self.anagrams2.get_anagrams("sherwood")
    self.assertEqual(r, ['sherwood'])

    _, r = self.anagrams2.get_anagrams("shibboleth")
    self.assertEqual(r, ['shibboleth'])

    _, r = self.anagrams2.get_anagrams("shied")
    self.assertEqual(r, ['hides', 'shied'])

    _, r = self.anagrams2.get_anagrams("shield")
    self.assertEqual(r, ['shield'])

    _, r = self.anagrams2.get_anagrams("shielded")
    self.assertEqual(r, ['shielded'])

    _, r = self.anagrams2.get_anagrams("shielding")
    self.assertEqual(r, ['shielding'])

    _, r = self.anagrams2.get_anagrams("shields")
    self.assertEqual(r, ['shields'])

    _, r = self.anagrams2.get_anagrams("shies")
    self.assertEqual(r, ['shies'])

    _, r = self.anagrams2.get_anagrams("shift")
    self.assertEqual(r, ['shift'])

    _, r = self.anagrams2.get_anagrams("shifted")
    self.assertEqual(r, ['shifted'])

    _, r = self.anagrams2.get_anagrams("shifter")
    self.assertEqual(r, ['shifter'])

    _, r = self.anagrams2.get_anagrams("shifters")
    self.assertEqual(r, ['shifters'])

    _, r = self.anagrams2.get_anagrams("shiftier")
    self.assertEqual(r, ['shiftier'])

    _, r = self.anagrams2.get_anagrams("shiftiest")
    self.assertEqual(r, ['shiftiest'])

    _, r = self.anagrams2.get_anagrams("shiftily")
    self.assertEqual(r, ['shiftily'])

    _, r = self.anagrams2.get_anagrams("shiftiness")
    self.assertEqual(r, ['shiftiness'])

    _, r = self.anagrams2.get_anagrams("shifting")
    self.assertEqual(r, ['shifting'])

    _, r = self.anagrams2.get_anagrams("shifts")
    self.assertEqual(r, ['shifts'])

    _, r = self.anagrams2.get_anagrams("shifty")
    self.assertEqual(r, ['shifty'])

    _, r = self.anagrams2.get_anagrams("shiite")
    self.assertEqual(r, ['shiite'])

    _, r = self.anagrams2.get_anagrams("shiites")
    self.assertEqual(r, ['shiites'])

    _, r = self.anagrams2.get_anagrams("shill")
    self.assertEqual(r, ['hills', 'shill'])

    _, r = self.anagrams2.get_anagrams("shilling")
    self.assertEqual(r, ['shilling'])

    _, r = self.anagrams2.get_anagrams("shillings")
    self.assertEqual(r, ['shillings'])

    _, r = self.anagrams2.get_anagrams("shillong")
    self.assertEqual(r, ['shillong'])

    _, r = self.anagrams2.get_anagrams("shiloh")
    self.assertEqual(r, ['shiloh'])

    _, r = self.anagrams2.get_anagrams("shimmer")
    self.assertEqual(r, ['shimmer'])

    _, r = self.anagrams2.get_anagrams("shimmering")
    self.assertEqual(r, ['shimmering'])

    _, r = self.anagrams2.get_anagrams("shin")
    self.assertEqual(r, ['shin'])

    _, r = self.anagrams2.get_anagrams("shinbone")
    self.assertEqual(r, ['shinbone'])

    _, r = self.anagrams2.get_anagrams("shine")
    self.assertEqual(r, ['hines', 'shine'])

    _, r = self.anagrams2.get_anagrams("shined")
    self.assertEqual(r, ['shined'])

    _, r = self.anagrams2.get_anagrams("shiner")
    self.assertEqual(r, ['shiner', 'shrine'])

    _, r = self.anagrams2.get_anagrams("shiners")
    self.assertEqual(r, ['shiners', 'shrines'])

    _, r = self.anagrams2.get_anagrams("shines")
    self.assertEqual(r, ['shines'])

    _, r = self.anagrams2.get_anagrams("shingle")
    self.assertEqual(r, ['english', 'shingle'])

    _, r = self.anagrams2.get_anagrams("shingles")
    self.assertEqual(r, ['shingles'])

    _, r = self.anagrams2.get_anagrams("shining")
    self.assertEqual(r, ['shining'])

    _, r = self.anagrams2.get_anagrams("shiningly")
    self.assertEqual(r, ['shiningly'])

    _, r = self.anagrams2.get_anagrams("shinto")
    self.assertEqual(r, ['shinto'])

    _, r = self.anagrams2.get_anagrams("shintoism")
    self.assertEqual(r, ['shintoism'])

    _, r = self.anagrams2.get_anagrams("shintoize")
    self.assertEqual(r, ['shintoize'])

    _, r = self.anagrams2.get_anagrams("shintoizes")
    self.assertEqual(r, ['shintoizes'])

    _, r = self.anagrams2.get_anagrams("shiny")
    self.assertEqual(r, ['shiny'])

    _, r = self.anagrams2.get_anagrams("ship")
    self.assertEqual(r, ['hips', 'ship'])

    _, r = self.anagrams2.get_anagrams("shipboard")
    self.assertEqual(r, ['shipboard'])

    _, r = self.anagrams2.get_anagrams("shipbuilding")
    self.assertEqual(r, ['shipbuilding'])

    _, r = self.anagrams2.get_anagrams("shipley")
    self.assertEqual(r, ['shipley'])

    _, r = self.anagrams2.get_anagrams("shipmate")
    self.assertEqual(r, ['shipmate'])

    _, r = self.anagrams2.get_anagrams("shipment")
    self.assertEqual(r, ['shipment'])

    _, r = self.anagrams2.get_anagrams("shipments")
    self.assertEqual(r, ['shipments'])

    _, r = self.anagrams2.get_anagrams("shipped")
    self.assertEqual(r, ['shipped'])

    _, r = self.anagrams2.get_anagrams("shipper")
    self.assertEqual(r, ['shipper'])

    _, r = self.anagrams2.get_anagrams("shippers")
    self.assertEqual(r, ['shippers'])

    _, r = self.anagrams2.get_anagrams("shipping")
    self.assertEqual(r, ['shipping'])

    _, r = self.anagrams2.get_anagrams("ships")
    self.assertEqual(r, ['ships'])

    _, r = self.anagrams2.get_anagrams("shipshape")
    self.assertEqual(r, ['shipshape'])

    _, r = self.anagrams2.get_anagrams("shipwreck")
    self.assertEqual(r, ['shipwreck'])

    _, r = self.anagrams2.get_anagrams("shipwrecked")
    self.assertEqual(r, ['shipwrecked'])

    _, r = self.anagrams2.get_anagrams("shipwrecks")
    self.assertEqual(r, ['shipwrecks'])

    _, r = self.anagrams2.get_anagrams("shipyard")
    self.assertEqual(r, ['shipyard'])

    _, r = self.anagrams2.get_anagrams("shire")
    self.assertEqual(r, ['heirs', 'hires', 'shire'])

    _, r = self.anagrams2.get_anagrams("shirk")
    self.assertEqual(r, ['shirk'])

    _, r = self.anagrams2.get_anagrams("shirker")
    self.assertEqual(r, ['shirker'])

    _, r = self.anagrams2.get_anagrams("shirking")
    self.assertEqual(r, ['shirking'])

    _, r = self.anagrams2.get_anagrams("shirks")
    self.assertEqual(r, ['shirks'])

    _, r = self.anagrams2.get_anagrams("shirley")
    self.assertEqual(r, ['shirley'])

    _, r = self.anagrams2.get_anagrams("shirt")
    self.assertEqual(r, ['shirt'])

    _, r = self.anagrams2.get_anagrams("shirting")
    self.assertEqual(r, ['shirting'])

    _, r = self.anagrams2.get_anagrams("shirts")
    self.assertEqual(r, ['shirts'])

    _, r = self.anagrams2.get_anagrams("shit")
    self.assertEqual(r, ['hits', 'shit', 'this'])

    _, r = self.anagrams2.get_anagrams("shiva")
    self.assertEqual(r, ['shiva'])

    _, r = self.anagrams2.get_anagrams("shiver")
    self.assertEqual(r, ['shiver'])

    _, r = self.anagrams2.get_anagrams("shivered")
    self.assertEqual(r, ['shivered'])

    _, r = self.anagrams2.get_anagrams("shiverer")
    self.assertEqual(r, ['shiverer'])

    _, r = self.anagrams2.get_anagrams("shivering")
    self.assertEqual(r, ['shivering'])

    _, r = self.anagrams2.get_anagrams("shivers")
    self.assertEqual(r, ['shivers'])

    _, r = self.anagrams2.get_anagrams("shmuel")
    self.assertEqual(r, ['shmuel'])

    _, r = self.anagrams2.get_anagrams("shoal")
    self.assertEqual(r, ['shoal'])

    _, r = self.anagrams2.get_anagrams("shoals")
    self.assertEqual(r, ['shoals'])

    _, r = self.anagrams2.get_anagrams("shock")
    self.assertEqual(r, ['shock'])

    _, r = self.anagrams2.get_anagrams("shocked")
    self.assertEqual(r, ['shocked'])

    _, r = self.anagrams2.get_anagrams("shocker")
    self.assertEqual(r, ['chokers', 'shocker'])

    _, r = self.anagrams2.get_anagrams("shockers")
    self.assertEqual(r, ['shockers'])

    _, r = self.anagrams2.get_anagrams("shocking")
    self.assertEqual(r, ['shocking'])

    _, r = self.anagrams2.get_anagrams("shockingly")
    self.assertEqual(r, ['shockingly'])

    _, r = self.anagrams2.get_anagrams("shockley")
    self.assertEqual(r, ['shockley'])

    _, r = self.anagrams2.get_anagrams("shocks")
    self.assertEqual(r, ['shocks'])

    _, r = self.anagrams2.get_anagrams("shod")
    self.assertEqual(r, ['shod'])

    _, r = self.anagrams2.get_anagrams("shoddy")
    self.assertEqual(r, ['shoddy'])

    _, r = self.anagrams2.get_anagrams("shoe")
    self.assertEqual(r, ['hoes', 'hose', 'shoe'])

    _, r = self.anagrams2.get_anagrams("shoed")
    self.assertEqual(r, ['shoed'])

    _, r = self.anagrams2.get_anagrams("shoehorn")
    self.assertEqual(r, ['shoehorn'])

    _, r = self.anagrams2.get_anagrams("shoeing")
    self.assertEqual(r, ['shoeing'])

    _, r = self.anagrams2.get_anagrams("shoelace")
    self.assertEqual(r, ['shoelace'])

    _, r = self.anagrams2.get_anagrams("shoemaker")
    self.assertEqual(r, ['shoemaker'])

    _, r = self.anagrams2.get_anagrams("shoes")
    self.assertEqual(r, ['hoses', 'shoes'])

    _, r = self.anagrams2.get_anagrams("shoestring")
    self.assertEqual(r, ['shoestring'])

    _, r = self.anagrams2.get_anagrams("shoji")
    self.assertEqual(r, ['shoji'])

    _, r = self.anagrams2.get_anagrams("shone")
    self.assertEqual(r, ['hones', 'shone'])

    _, r = self.anagrams2.get_anagrams("shook")
    self.assertEqual(r, ['hooks', 'shook'])

    _, r = self.anagrams2.get_anagrams("shoot")
    self.assertEqual(r, ['hoots', 'shoot', 'sooth'])

    _, r = self.anagrams2.get_anagrams("shooter")
    self.assertEqual(r, ['shooter', 'soother'])

    _, r = self.anagrams2.get_anagrams("shooters")
    self.assertEqual(r, ['shooters'])

    _, r = self.anagrams2.get_anagrams("shooting")
    self.assertEqual(r, ['shooting', 'soothing'])

    _, r = self.anagrams2.get_anagrams("shootings")
    self.assertEqual(r, ['shootings'])

    _, r = self.anagrams2.get_anagrams("shoots")
    self.assertEqual(r, ['shoots'])

    _, r = self.anagrams2.get_anagrams("shop")
    self.assertEqual(r, ['hops', 'posh', 'shop'])

    _, r = self.anagrams2.get_anagrams("shopkeeper")
    self.assertEqual(r, ['shopkeeper'])

    _, r = self.anagrams2.get_anagrams("shopkeepers")
    self.assertEqual(r, ['shopkeepers'])

    _, r = self.anagrams2.get_anagrams("shopped")
    self.assertEqual(r, ['shopped'])

    _, r = self.anagrams2.get_anagrams("shopper")
    self.assertEqual(r, ['hoppers', 'shopper'])

    _, r = self.anagrams2.get_anagrams("shoppers")
    self.assertEqual(r, ['shoppers'])

    _, r = self.anagrams2.get_anagrams("shopping")
    self.assertEqual(r, ['shopping'])

    _, r = self.anagrams2.get_anagrams("shops")
    self.assertEqual(r, ['shops'])

    _, r = self.anagrams2.get_anagrams("shopworn")
    self.assertEqual(r, ['shopworn'])

    _, r = self.anagrams2.get_anagrams("shore")
    self.assertEqual(r, ['horse', 'shore'])

    _, r = self.anagrams2.get_anagrams("shoreline")
    self.assertEqual(r, ['shoreline'])

    _, r = self.anagrams2.get_anagrams("shores")
    self.assertEqual(r, ['horses', 'shores'])

    _, r = self.anagrams2.get_anagrams("shorewood")
    self.assertEqual(r, ['shorewood'])

    _, r = self.anagrams2.get_anagrams("shorn")
    self.assertEqual(r, ['horns', 'shorn'])

    _, r = self.anagrams2.get_anagrams("short")
    self.assertEqual(r, ['short'])

    _, r = self.anagrams2.get_anagrams("shortage")
    self.assertEqual(r, ['shortage'])

    _, r = self.anagrams2.get_anagrams("shortages")
    self.assertEqual(r, ['shortages'])

    _, r = self.anagrams2.get_anagrams("shortcoming")
    self.assertEqual(r, ['shortcoming'])

    _, r = self.anagrams2.get_anagrams("shortcomings")
    self.assertEqual(r, ['shortcomings'])

    _, r = self.anagrams2.get_anagrams("shortcut")
    self.assertEqual(r, ['shortcut'])

    _, r = self.anagrams2.get_anagrams("shortcuts")
    self.assertEqual(r, ['shortcuts'])

    _, r = self.anagrams2.get_anagrams("shorted")
    self.assertEqual(r, ['shorted'])

    _, r = self.anagrams2.get_anagrams("shorten")
    self.assertEqual(r, ['hornets', 'shorten', 'thrones'])

    _, r = self.anagrams2.get_anagrams("shortened")
    self.assertEqual(r, ['shortened'])

    _, r = self.anagrams2.get_anagrams("shortening")
    self.assertEqual(r, ['shortening'])

    _, r = self.anagrams2.get_anagrams("shortens")
    self.assertEqual(r, ['shortens'])

    _, r = self.anagrams2.get_anagrams("shorter")
    self.assertEqual(r, ['shorter'])

    _, r = self.anagrams2.get_anagrams("shortest")
    self.assertEqual(r, ['shortest'])

    _, r = self.anagrams2.get_anagrams("shortfall")
    self.assertEqual(r, ['shortfall'])

    _, r = self.anagrams2.get_anagrams("shorthand")
    self.assertEqual(r, ['shorthand'])

    _, r = self.anagrams2.get_anagrams("shorthanded")
    self.assertEqual(r, ['shorthanded'])

    _, r = self.anagrams2.get_anagrams("shorting")
    self.assertEqual(r, ['shorting'])

    _, r = self.anagrams2.get_anagrams("shortish")
    self.assertEqual(r, ['shortish'])

    _, r = self.anagrams2.get_anagrams("shortly")
    self.assertEqual(r, ['shortly'])

    _, r = self.anagrams2.get_anagrams("shortness")
    self.assertEqual(r, ['shortness'])

    _, r = self.anagrams2.get_anagrams("shorts")
    self.assertEqual(r, ['shorts'])

    _, r = self.anagrams2.get_anagrams("shortsighted")
    self.assertEqual(r, ['shortsighted'])

    _, r = self.anagrams2.get_anagrams("shortstop")
    self.assertEqual(r, ['shortstop'])

    _, r = self.anagrams2.get_anagrams("shoshone")
    self.assertEqual(r, ['shoshone'])

    _, r = self.anagrams2.get_anagrams("shot")
    self.assertEqual(r, ['host', 'shot'])

    _, r = self.anagrams2.get_anagrams("shotgun")
    self.assertEqual(r, ['gunshot', 'shotgun'])

    _, r = self.anagrams2.get_anagrams("shotguns")
    self.assertEqual(r, ['shotguns'])

    _, r = self.anagrams2.get_anagrams("shots")
    self.assertEqual(r, ['hosts', 'shots'])

    _, r = self.anagrams2.get_anagrams("should")
    self.assertEqual(r, ['should'])

    _, r = self.anagrams2.get_anagrams("shoulder")
    self.assertEqual(r, ['shoulder'])

    _, r = self.anagrams2.get_anagrams("shouldered")
    self.assertEqual(r, ['shouldered'])

    _, r = self.anagrams2.get_anagrams("shouldering")
    self.assertEqual(r, ['shouldering'])

    _, r = self.anagrams2.get_anagrams("shoulders")
    self.assertEqual(r, ['shoulders'])

    _, r = self.anagrams2.get_anagrams("shout")
    self.assertEqual(r, ['shout', 'south'])

    _, r = self.anagrams2.get_anagrams("shouted")
    self.assertEqual(r, ['shouted'])

    _, r = self.anagrams2.get_anagrams("shouter")
    self.assertEqual(r, ['shouter'])

    _, r = self.anagrams2.get_anagrams("shouters")
    self.assertEqual(r, ['shouters'])

    _, r = self.anagrams2.get_anagrams("shouting")
    self.assertEqual(r, ['shouting'])

    _, r = self.anagrams2.get_anagrams("shouts")
    self.assertEqual(r, ['shouts'])

    _, r = self.anagrams2.get_anagrams("shove")
    self.assertEqual(r, ['shove'])

    _, r = self.anagrams2.get_anagrams("shoved")
    self.assertEqual(r, ['shoved'])

    _, r = self.anagrams2.get_anagrams("shovel")
    self.assertEqual(r, ['hovels', 'shovel'])

    _, r = self.anagrams2.get_anagrams("shoveled")
    self.assertEqual(r, ['shoveled'])

    _, r = self.anagrams2.get_anagrams("shovels")
    self.assertEqual(r, ['shovels'])

    _, r = self.anagrams2.get_anagrams("shoves")
    self.assertEqual(r, ['shoves'])

    _, r = self.anagrams2.get_anagrams("shoving")
    self.assertEqual(r, ['shoving'])

    _, r = self.anagrams2.get_anagrams("show")
    self.assertEqual(r, ['show'])

    _, r = self.anagrams2.get_anagrams("showboat")
    self.assertEqual(r, ['showboat'])

    _, r = self.anagrams2.get_anagrams("showcase")
    self.assertEqual(r, ['showcase'])

    _, r = self.anagrams2.get_anagrams("showdown")
    self.assertEqual(r, ['showdown'])

    _, r = self.anagrams2.get_anagrams("showed")
    self.assertEqual(r, ['showed'])

    _, r = self.anagrams2.get_anagrams("shower")
    self.assertEqual(r, ['shower', 'whores'])

    _, r = self.anagrams2.get_anagrams("showered")
    self.assertEqual(r, ['showered'])

    _, r = self.anagrams2.get_anagrams("showering")
    self.assertEqual(r, ['showering'])

    _, r = self.anagrams2.get_anagrams("showers")
    self.assertEqual(r, ['showers'])

    _, r = self.anagrams2.get_anagrams("showing")
    self.assertEqual(r, ['showing'])

    _, r = self.anagrams2.get_anagrams("showings")
    self.assertEqual(r, ['showings'])

    _, r = self.anagrams2.get_anagrams("shown")
    self.assertEqual(r, ['shown'])

    _, r = self.anagrams2.get_anagrams("showpiece")
    self.assertEqual(r, ['showpiece'])

    _, r = self.anagrams2.get_anagrams("showroom")
    self.assertEqual(r, ['showroom'])

    _, r = self.anagrams2.get_anagrams("shows")
    self.assertEqual(r, ['shows'])

    _, r = self.anagrams2.get_anagrams("showy")
    self.assertEqual(r, ['showy'])

    _, r = self.anagrams2.get_anagrams("shrank")
    self.assertEqual(r, ['shrank'])

    _, r = self.anagrams2.get_anagrams("shrapnel")
    self.assertEqual(r, ['shrapnel'])

    _, r = self.anagrams2.get_anagrams("shred")
    self.assertEqual(r, ['herds', 'shred'])

    _, r = self.anagrams2.get_anagrams("shredder")
    self.assertEqual(r, ['shredder'])

    _, r = self.anagrams2.get_anagrams("shredding")
    self.assertEqual(r, ['shredding'])

    _, r = self.anagrams2.get_anagrams("shreds")
    self.assertEqual(r, ['shreds'])

    _, r = self.anagrams2.get_anagrams("shreveport")
    self.assertEqual(r, ['shreveport'])

    _, r = self.anagrams2.get_anagrams("shrew")
    self.assertEqual(r, ['shrew'])

    _, r = self.anagrams2.get_anagrams("shrewd")
    self.assertEqual(r, ['shrewd'])

    _, r = self.anagrams2.get_anagrams("shrewdest")
    self.assertEqual(r, ['shrewdest'])

    _, r = self.anagrams2.get_anagrams("shrewdly")
    self.assertEqual(r, ['shrewdly'])

    _, r = self.anagrams2.get_anagrams("shrewdness")
    self.assertEqual(r, ['shrewdness'])

    _, r = self.anagrams2.get_anagrams("shrews")
    self.assertEqual(r, ['shrews'])

    _, r = self.anagrams2.get_anagrams("shriek")
    self.assertEqual(r, ['shriek'])

    _, r = self.anagrams2.get_anagrams("shrieked")
    self.assertEqual(r, ['shrieked'])

    _, r = self.anagrams2.get_anagrams("shrieking")
    self.assertEqual(r, ['shrieking'])

    _, r = self.anagrams2.get_anagrams("shrieks")
    self.assertEqual(r, ['shrieks'])

    _, r = self.anagrams2.get_anagrams("shrill")
    self.assertEqual(r, ['shrill'])

    _, r = self.anagrams2.get_anagrams("shrilled")
    self.assertEqual(r, ['shrilled'])

    _, r = self.anagrams2.get_anagrams("shrilling")
    self.assertEqual(r, ['shrilling'])

    _, r = self.anagrams2.get_anagrams("shrillness")
    self.assertEqual(r, ['shrillness'])

    _, r = self.anagrams2.get_anagrams("shrilly")
    self.assertEqual(r, ['shrilly'])

    _, r = self.anagrams2.get_anagrams("shrimp")
    self.assertEqual(r, ['shrimp'])

    _, r = self.anagrams2.get_anagrams("shrine")
    self.assertEqual(r, ['shiner', 'shrine'])

    _, r = self.anagrams2.get_anagrams("shrines")
    self.assertEqual(r, ['shiners', 'shrines'])

    _, r = self.anagrams2.get_anagrams("shrink")
    self.assertEqual(r, ['shrink'])

    _, r = self.anagrams2.get_anagrams("shrinkable")
    self.assertEqual(r, ['shrinkable'])

    _, r = self.anagrams2.get_anagrams("shrinkage")
    self.assertEqual(r, ['shrinkage'])

    _, r = self.anagrams2.get_anagrams("shrinking")
    self.assertEqual(r, ['shrinking'])

    _, r = self.anagrams2.get_anagrams("shrinks")
    self.assertEqual(r, ['shrinks'])

    _, r = self.anagrams2.get_anagrams("shrivel")
    self.assertEqual(r, ['shrivel'])

    _, r = self.anagrams2.get_anagrams("shriveled")
    self.assertEqual(r, ['shriveled'])

    _, r = self.anagrams2.get_anagrams("shroud")
    self.assertEqual(r, ['shroud'])

    _, r = self.anagrams2.get_anagrams("shrouded")
    self.assertEqual(r, ['shrouded'])

    _, r = self.anagrams2.get_anagrams("shrub")
    self.assertEqual(r, ['brush', 'shrub'])

    _, r = self.anagrams2.get_anagrams("shrubbery")
    self.assertEqual(r, ['shrubbery'])

    _, r = self.anagrams2.get_anagrams("shrubs")
    self.assertEqual(r, ['shrubs'])

    _, r = self.anagrams2.get_anagrams("shrug")
    self.assertEqual(r, ['shrug'])

    _, r = self.anagrams2.get_anagrams("shrugs")
    self.assertEqual(r, ['shrugs'])

    _, r = self.anagrams2.get_anagrams("shrunk")
    self.assertEqual(r, ['shrunk'])

    _, r = self.anagrams2.get_anagrams("shrunken")
    self.assertEqual(r, ['shrunken'])

    _, r = self.anagrams2.get_anagrams("shu")
    self.assertEqual(r, ['shu'])

    _, r = self.anagrams2.get_anagrams("shudder")
    self.assertEqual(r, ['shudder'])

    _, r = self.anagrams2.get_anagrams("shuddered")
    self.assertEqual(r, ['shuddered'])

    _, r = self.anagrams2.get_anagrams("shuddering")
    self.assertEqual(r, ['shuddering'])

    _, r = self.anagrams2.get_anagrams("shudders")
    self.assertEqual(r, ['shudders'])

    _, r = self.anagrams2.get_anagrams("shuffle")
    self.assertEqual(r, ['shuffle'])

    _, r = self.anagrams2.get_anagrams("shuffleboard")
    self.assertEqual(r, ['shuffleboard'])

    _, r = self.anagrams2.get_anagrams("shuffled")
    self.assertEqual(r, ['shuffled'])

    _, r = self.anagrams2.get_anagrams("shuffles")
    self.assertEqual(r, ['shuffles'])

    _, r = self.anagrams2.get_anagrams("shuffling")
    self.assertEqual(r, ['shuffling'])

    _, r = self.anagrams2.get_anagrams("shulman")
    self.assertEqual(r, ['shulman'])

    _, r = self.anagrams2.get_anagrams("shun")
    self.assertEqual(r, ['huns', 'shun'])

    _, r = self.anagrams2.get_anagrams("shuns")
    self.assertEqual(r, ['shuns'])

    _, r = self.anagrams2.get_anagrams("shunt")
    self.assertEqual(r, ['hunts', 'shunt'])

    _, r = self.anagrams2.get_anagrams("shut")
    self.assertEqual(r, ['huts', 'shut', 'thus'])

    _, r = self.anagrams2.get_anagrams("shutdown")
    self.assertEqual(r, ['shutdown'])

    _, r = self.anagrams2.get_anagrams("shutdowns")
    self.assertEqual(r, ['shutdowns'])

    _, r = self.anagrams2.get_anagrams("shutoff")
    self.assertEqual(r, ['shutoff'])

    _, r = self.anagrams2.get_anagrams("shutout")
    self.assertEqual(r, ['shutout'])

    _, r = self.anagrams2.get_anagrams("shuts")
    self.assertEqual(r, ['shuts'])

    _, r = self.anagrams2.get_anagrams("shutter")
    self.assertEqual(r, ['shutter'])

    _, r = self.anagrams2.get_anagrams("shuttered")
    self.assertEqual(r, ['shuttered'])

    _, r = self.anagrams2.get_anagrams("shutters")
    self.assertEqual(r, ['shutters'])

    _, r = self.anagrams2.get_anagrams("shutting")
    self.assertEqual(r, ['shutting'])

    _, r = self.anagrams2.get_anagrams("shuttle")
    self.assertEqual(r, ['shuttle'])

    _, r = self.anagrams2.get_anagrams("shuttlecock")
    self.assertEqual(r, ['shuttlecock'])

    _, r = self.anagrams2.get_anagrams("shuttled")
    self.assertEqual(r, ['shuttled'])

    _, r = self.anagrams2.get_anagrams("shuttles")
    self.assertEqual(r, ['shuttles'])

    _, r = self.anagrams2.get_anagrams("shuttling")
    self.assertEqual(r, ['shuttling'])

    _, r = self.anagrams2.get_anagrams("shy")
    self.assertEqual(r, ['shy'])

    _, r = self.anagrams2.get_anagrams("shylock")
    self.assertEqual(r, ['shylock'])

    _, r = self.anagrams2.get_anagrams("shylockian")
    self.assertEqual(r, ['shylockian'])

    _, r = self.anagrams2.get_anagrams("shyly")
    self.assertEqual(r, ['shyly'])

    _, r = self.anagrams2.get_anagrams("shyness")
    self.assertEqual(r, ['shyness'])

    _, r = self.anagrams2.get_anagrams("siam")
    self.assertEqual(r, ['aims', 'siam'])

    _, r = self.anagrams2.get_anagrams("siamese")
    self.assertEqual(r, ['siamese'])

    _, r = self.anagrams2.get_anagrams("sian")
    self.assertEqual(r, ['ansi', 'sian'])

    _, r = self.anagrams2.get_anagrams("siberia")
    self.assertEqual(r, ['siberia'])

    _, r = self.anagrams2.get_anagrams("siberian")
    self.assertEqual(r, ['binaries', 'siberian'])

    _, r = self.anagrams2.get_anagrams("sibley")
    self.assertEqual(r, ['sibley'])

    _, r = self.anagrams2.get_anagrams("sibling")
    self.assertEqual(r, ['sibling'])

    _, r = self.anagrams2.get_anagrams("siblings")
    self.assertEqual(r, ['siblings'])

    _, r = self.anagrams2.get_anagrams("sicilian")
    self.assertEqual(r, ['sicilian'])

    _, r = self.anagrams2.get_anagrams("siciliana")
    self.assertEqual(r, ['siciliana'])

    _, r = self.anagrams2.get_anagrams("sicilians")
    self.assertEqual(r, ['sicilians'])

    _, r = self.anagrams2.get_anagrams("sicily")
    self.assertEqual(r, ['sicily'])

    _, r = self.anagrams2.get_anagrams("sick")
    self.assertEqual(r, ['sick'])

    _, r = self.anagrams2.get_anagrams("sicken")
    self.assertEqual(r, ['sicken'])

    _, r = self.anagrams2.get_anagrams("sicker")
    self.assertEqual(r, ['sicker'])

    _, r = self.anagrams2.get_anagrams("sickest")
    self.assertEqual(r, ['sickest'])

    _, r = self.anagrams2.get_anagrams("sickle")
    self.assertEqual(r, ['sickle'])

    _, r = self.anagrams2.get_anagrams("sickly")
    self.assertEqual(r, ['sickly'])

    _, r = self.anagrams2.get_anagrams("sickness")
    self.assertEqual(r, ['sickness'])

    _, r = self.anagrams2.get_anagrams("sicknesses")
    self.assertEqual(r, ['sicknesses'])

    _, r = self.anagrams2.get_anagrams("sickroom")
    self.assertEqual(r, ['sickroom'])

    _, r = self.anagrams2.get_anagrams("side")
    self.assertEqual(r, ['dies', 'side'])

    _, r = self.anagrams2.get_anagrams("sidearm")
    self.assertEqual(r, ['admires', 'sidearm'])

    _, r = self.anagrams2.get_anagrams("sideband")
    self.assertEqual(r, ['sideband'])

    _, r = self.anagrams2.get_anagrams("sideboard")
    self.assertEqual(r, ['broadside', 'sideboard'])

    _, r = self.anagrams2.get_anagrams("sideboards")
    self.assertEqual(r, ['sideboards'])

    _, r = self.anagrams2.get_anagrams("sideburns")
    self.assertEqual(r, ['burnsides', 'sideburns'])

    _, r = self.anagrams2.get_anagrams("sidecar")
    self.assertEqual(r, ['radices', 'sidecar'])

    _, r = self.anagrams2.get_anagrams("sided")
    self.assertEqual(r, ['sided'])

    _, r = self.anagrams2.get_anagrams("sidelight")
    self.assertEqual(r, ['sidelight'])

    _, r = self.anagrams2.get_anagrams("sidelights")
    self.assertEqual(r, ['sidelights'])

    _, r = self.anagrams2.get_anagrams("sideline")
    self.assertEqual(r, ['sideline'])

    _, r = self.anagrams2.get_anagrams("sidereal")
    self.assertEqual(r, ['sidereal'])

    _, r = self.anagrams2.get_anagrams("sides")
    self.assertEqual(r, ['sides'])

    _, r = self.anagrams2.get_anagrams("sidesaddle")
    self.assertEqual(r, ['sidesaddle'])

    _, r = self.anagrams2.get_anagrams("sideshow")
    self.assertEqual(r, ['sideshow'])

    _, r = self.anagrams2.get_anagrams("sidestep")
    self.assertEqual(r, ['sidestep'])

    _, r = self.anagrams2.get_anagrams("sidetrack")
    self.assertEqual(r, ['sidetrack'])

    _, r = self.anagrams2.get_anagrams("sidewalk")
    self.assertEqual(r, ['sidewalk'])

    _, r = self.anagrams2.get_anagrams("sidewalks")
    self.assertEqual(r, ['sidewalks'])

    _, r = self.anagrams2.get_anagrams("sideways")
    self.assertEqual(r, ['sideways'])

    _, r = self.anagrams2.get_anagrams("sidewise")
    self.assertEqual(r, ['sidewise'])

    _, r = self.anagrams2.get_anagrams("siding")
    self.assertEqual(r, ['siding'])

    _, r = self.anagrams2.get_anagrams("sidings")
    self.assertEqual(r, ['sidings'])

    _, r = self.anagrams2.get_anagrams("sidney")
    self.assertEqual(r, ['disney', 'sidney'])

    _, r = self.anagrams2.get_anagrams("siege")
    self.assertEqual(r, ['siege'])

    _, r = self.anagrams2.get_anagrams("siegel")
    self.assertEqual(r, ['siegel'])

    _, r = self.anagrams2.get_anagrams("sieges")
    self.assertEqual(r, ['sieges'])

    _, r = self.anagrams2.get_anagrams("siegfried")
    self.assertEqual(r, ['siegfried'])

    _, r = self.anagrams2.get_anagrams("sieglinda")
    self.assertEqual(r, ['sieglinda'])

    _, r = self.anagrams2.get_anagrams("siegmund")
    self.assertEqual(r, ['siegmund'])

    _, r = self.anagrams2.get_anagrams("siemens")
    self.assertEqual(r, ['nemesis', 'siemens'])

    _, r = self.anagrams2.get_anagrams("siena")
    self.assertEqual(r, ['anise', 'siena'])

    _, r = self.anagrams2.get_anagrams("sierra")
    self.assertEqual(r, ['airers', 'ariser', 'raiser', 'sierra'])

    _, r = self.anagrams2.get_anagrams("sieve")
    self.assertEqual(r, ['sieve'])

    _, r = self.anagrams2.get_anagrams("sieves")
    self.assertEqual(r, ['sieves'])

    _, r = self.anagrams2.get_anagrams("sifford")
    self.assertEqual(r, ['sifford'])

    _, r = self.anagrams2.get_anagrams("sift")
    self.assertEqual(r, ['fist', 'fits', 'sift'])

    _, r = self.anagrams2.get_anagrams("sifted")
    self.assertEqual(r, ['fisted', 'sifted'])

    _, r = self.anagrams2.get_anagrams("sifter")
    self.assertEqual(r, ['sifter', 'strife'])

    _, r = self.anagrams2.get_anagrams("sifting")
    self.assertEqual(r, ['sifting'])

    _, r = self.anagrams2.get_anagrams("siggraph")
    self.assertEqual(r, ['siggraph'])

    _, r = self.anagrams2.get_anagrams("sigh")
    self.assertEqual(r, ['sigh'])

    _, r = self.anagrams2.get_anagrams("sighed")
    self.assertEqual(r, ['sighed'])

    _, r = self.anagrams2.get_anagrams("sighing")
    self.assertEqual(r, ['higgins', 'sighing'])

    _, r = self.anagrams2.get_anagrams("sighs")
    self.assertEqual(r, ['sighs'])

    _, r = self.anagrams2.get_anagrams("sight")
    self.assertEqual(r, ['sight'])

    _, r = self.anagrams2.get_anagrams("sighted")
    self.assertEqual(r, ['sighted'])

    _, r = self.anagrams2.get_anagrams("sighting")
    self.assertEqual(r, ['sighting'])

    _, r = self.anagrams2.get_anagrams("sightings")
    self.assertEqual(r, ['sightings'])

    _, r = self.anagrams2.get_anagrams("sightly")
    self.assertEqual(r, ['sightly'])

    _, r = self.anagrams2.get_anagrams("sights")
    self.assertEqual(r, ['sights'])

    _, r = self.anagrams2.get_anagrams("sightseeing")
    self.assertEqual(r, ['sightseeing'])

    _, r = self.anagrams2.get_anagrams("sigma")
    self.assertEqual(r, ['sigma'])

    _, r = self.anagrams2.get_anagrams("sigmund")
    self.assertEqual(r, ['sigmund'])

    _, r = self.anagrams2.get_anagrams("sign")
    self.assertEqual(r, ['gins', 'sign', 'sing'])

    _, r = self.anagrams2.get_anagrams("signal")
    self.assertEqual(r, ['aligns', 'signal'])

    _, r = self.anagrams2.get_anagrams("signaled")
    self.assertEqual(r, ['dealings', 'leadings', 'signaled'])

    _, r = self.anagrams2.get_anagrams("signaling")
    self.assertEqual(r, ['signaling'])

    _, r = self.anagrams2.get_anagrams("signalled")
    self.assertEqual(r, ['signalled'])

    _, r = self.anagrams2.get_anagrams("signalling")
    self.assertEqual(r, ['signalling'])

    _, r = self.anagrams2.get_anagrams("signally")
    self.assertEqual(r, ['sallying', 'signally'])

    _, r = self.anagrams2.get_anagrams("signals")
    self.assertEqual(r, ['signals'])

    _, r = self.anagrams2.get_anagrams("signature")
    self.assertEqual(r, ['signature'])

    _, r = self.anagrams2.get_anagrams("signatures")
    self.assertEqual(r, ['signatures'])

    _, r = self.anagrams2.get_anagrams("signed")
    self.assertEqual(r, ['deigns', 'design', 'signed', 'singed'])

    _, r = self.anagrams2.get_anagrams("signer")
    self.assertEqual(r, ['reigns', 'resign', 'signer', 'singer'])

    _, r = self.anagrams2.get_anagrams("signers")
    self.assertEqual(r, ['resigns', 'signers', 'singers'])

    _, r = self.anagrams2.get_anagrams("signet")
    self.assertEqual(r, ['ingest', 'signet'])

    _, r = self.anagrams2.get_anagrams("significance")
    self.assertEqual(r, ['significance'])

    _, r = self.anagrams2.get_anagrams("significant")
    self.assertEqual(r, ['significant'])

    _, r = self.anagrams2.get_anagrams("significantly")
    self.assertEqual(r, ['significantly'])

    _, r = self.anagrams2.get_anagrams("significants")
    self.assertEqual(r, ['significants'])

    _, r = self.anagrams2.get_anagrams("signification")
    self.assertEqual(r, ['signification'])

    _, r = self.anagrams2.get_anagrams("signified")
    self.assertEqual(r, ['signified'])

    _, r = self.anagrams2.get_anagrams("signifies")
    self.assertEqual(r, ['signifies'])

    _, r = self.anagrams2.get_anagrams("signify")
    self.assertEqual(r, ['signify'])

    _, r = self.anagrams2.get_anagrams("signifying")
    self.assertEqual(r, ['signifying'])

    _, r = self.anagrams2.get_anagrams("signing")
    self.assertEqual(r, ['signing', 'singing'])

    _, r = self.anagrams2.get_anagrams("signs")
    self.assertEqual(r, ['signs', 'sings'])

    _, r = self.anagrams2.get_anagrams("sikh")
    self.assertEqual(r, ['sikh'])

    _, r = self.anagrams2.get_anagrams("sikhes")
    self.assertEqual(r, ['sikhes'])

    _, r = self.anagrams2.get_anagrams("sikhs")
    self.assertEqual(r, ['sikhs'])

    _, r = self.anagrams2.get_anagrams("sikkim")
    self.assertEqual(r, ['sikkim'])

    _, r = self.anagrams2.get_anagrams("sikkimese")
    self.assertEqual(r, ['sikkimese'])

    _, r = self.anagrams2.get_anagrams("sikorsky")
    self.assertEqual(r, ['sikorsky'])

    _, r = self.anagrams2.get_anagrams("silas")
    self.assertEqual(r, ['sails', 'silas'])

    _, r = self.anagrams2.get_anagrams("silence")
    self.assertEqual(r, ['license', 'silence'])

    _, r = self.anagrams2.get_anagrams("silenced")
    self.assertEqual(r, ['declines', 'licensed', 'silenced'])

    _, r = self.anagrams2.get_anagrams("silencer")
    self.assertEqual(r, ['silencer'])

    _, r = self.anagrams2.get_anagrams("silencers")
    self.assertEqual(r, ['silencers'])

    _, r = self.anagrams2.get_anagrams("silences")
    self.assertEqual(r, ['licenses', 'silences'])

    _, r = self.anagrams2.get_anagrams("silencing")
    self.assertEqual(r, ['licensing', 'silencing'])

    _, r = self.anagrams2.get_anagrams("silent")
    self.assertEqual(r, ['enlist', 'inlets', 'listen', 'silent'])

    _, r = self.anagrams2.get_anagrams("silently")
    self.assertEqual(r, ['silently'])

    _, r = self.anagrams2.get_anagrams("silhouette")
    self.assertEqual(r, ['silhouette'])

    _, r = self.anagrams2.get_anagrams("silhouetted")
    self.assertEqual(r, ['silhouetted'])

    _, r = self.anagrams2.get_anagrams("silhouettes")
    self.assertEqual(r, ['silhouettes'])

    _, r = self.anagrams2.get_anagrams("silica")
    self.assertEqual(r, ['silica'])

    _, r = self.anagrams2.get_anagrams("silicate")
    self.assertEqual(r, ['silicate'])

    _, r = self.anagrams2.get_anagrams("silicon")
    self.assertEqual(r, ['silicon'])

    _, r = self.anagrams2.get_anagrams("silicone")
    self.assertEqual(r, ['silicone'])

    _, r = self.anagrams2.get_anagrams("silk")
    self.assertEqual(r, ['silk'])

    _, r = self.anagrams2.get_anagrams("silken")
    self.assertEqual(r, ['likens', 'silken'])

    _, r = self.anagrams2.get_anagrams("silkier")
    self.assertEqual(r, ['silkier'])

    _, r = self.anagrams2.get_anagrams("silkiest")
    self.assertEqual(r, ['silkiest'])

    _, r = self.anagrams2.get_anagrams("silkily")
    self.assertEqual(r, ['silkily'])

    _, r = self.anagrams2.get_anagrams("silkine")
    self.assertEqual(r, ['silkine'])

    _, r = self.anagrams2.get_anagrams("silks")
    self.assertEqual(r, ['silks'])

    _, r = self.anagrams2.get_anagrams("silky")
    self.assertEqual(r, ['silky'])

    _, r = self.anagrams2.get_anagrams("sill")
    self.assertEqual(r, ['ills', 'sill'])

    _, r = self.anagrams2.get_anagrams("silliest")
    self.assertEqual(r, ['silliest'])

    _, r = self.anagrams2.get_anagrams("silliness")
    self.assertEqual(r, ['silliness'])

    _, r = self.anagrams2.get_anagrams("sills")
    self.assertEqual(r, ['sills'])

    _, r = self.anagrams2.get_anagrams("silly")
    self.assertEqual(r, ['silly'])

    _, r = self.anagrams2.get_anagrams("silo")
    self.assertEqual(r, ['lois', 'oils', 'silo', 'soil'])

    _, r = self.anagrams2.get_anagrams("silt")
    self.assertEqual(r, ['list', 'silt', 'slit'])

    _, r = self.anagrams2.get_anagrams("silted")
    self.assertEqual(r, ['idlest', 'listed', 'silted'])

    _, r = self.anagrams2.get_anagrams("silting")
    self.assertEqual(r, ['listing', 'silting'])

    _, r = self.anagrams2.get_anagrams("silts")
    self.assertEqual(r, ['lists', 'silts', 'slits'])

    _, r = self.anagrams2.get_anagrams("silver")
    self.assertEqual(r, ['livers', 'silver', 'sliver'])

    _, r = self.anagrams2.get_anagrams("silvered")
    self.assertEqual(r, ['delivers', 'silvered'])

    _, r = self.anagrams2.get_anagrams("silvering")
    self.assertEqual(r, ['silvering'])

    _, r = self.anagrams2.get_anagrams("silverman")
    self.assertEqual(r, ['silverman'])

    _, r = self.anagrams2.get_anagrams("silvers")
    self.assertEqual(r, ['silvers'])

    _, r = self.anagrams2.get_anagrams("silversmith")
    self.assertEqual(r, ['silversmith'])

    _, r = self.anagrams2.get_anagrams("silverstein")
    self.assertEqual(r, ['silverstein'])

    _, r = self.anagrams2.get_anagrams("silverware")
    self.assertEqual(r, ['silverware'])

    _, r = self.anagrams2.get_anagrams("silvery")
    self.assertEqual(r, ['silvery'])

    _, r = self.anagrams2.get_anagrams("similar")
    self.assertEqual(r, ['similar'])

    _, r = self.anagrams2.get_anagrams("similarities")
    self.assertEqual(r, ['similarities'])

    _, r = self.anagrams2.get_anagrams("similarity")
    self.assertEqual(r, ['similarity'])

    _, r = self.anagrams2.get_anagrams("similarly")
    self.assertEqual(r, ['similarly'])

    _, r = self.anagrams2.get_anagrams("simile")
    self.assertEqual(r, ['simile'])

    _, r = self.anagrams2.get_anagrams("similitude")
    self.assertEqual(r, ['similitude'])

    _, r = self.anagrams2.get_anagrams("simla")
    self.assertEqual(r, ['islam', 'mails', 'simla'])

    _, r = self.anagrams2.get_anagrams("simmer")
    self.assertEqual(r, ['simmer'])

    _, r = self.anagrams2.get_anagrams("simmered")
    self.assertEqual(r, ['immersed', 'simmered'])

    _, r = self.anagrams2.get_anagrams("simmering")
    self.assertEqual(r, ['simmering'])

    _, r = self.anagrams2.get_anagrams("simmers")
    self.assertEqual(r, ['simmers'])

    _, r = self.anagrams2.get_anagrams("simmons")
    self.assertEqual(r, ['simmons'])

    _, r = self.anagrams2.get_anagrams("simmonsville")
    self.assertEqual(r, ['simmonsville'])

    _, r = self.anagrams2.get_anagrams("simms")
    self.assertEqual(r, ['simms'])

    _, r = self.anagrams2.get_anagrams("simon")
    self.assertEqual(r, ['minos', 'simon'])

    _, r = self.anagrams2.get_anagrams("simons")
    self.assertEqual(r, ['simons'])

    _, r = self.anagrams2.get_anagrams("simonson")
    self.assertEqual(r, ['simonson'])

    _, r = self.anagrams2.get_anagrams("simple")
    self.assertEqual(r, ['simple'])

    _, r = self.anagrams2.get_anagrams("simpleminded")
    self.assertEqual(r, ['simpleminded'])

    _, r = self.anagrams2.get_anagrams("simpleness")
    self.assertEqual(r, ['simpleness'])

    _, r = self.anagrams2.get_anagrams("simpler")
    self.assertEqual(r, ['simpler'])

    _, r = self.anagrams2.get_anagrams("simplest")
    self.assertEqual(r, ['simplest'])

    _, r = self.anagrams2.get_anagrams("simpleton")
    self.assertEqual(r, ['simpleton'])

    _, r = self.anagrams2.get_anagrams("simplex")
    self.assertEqual(r, ['simplex'])

    _, r = self.anagrams2.get_anagrams("simplicities")
    self.assertEqual(r, ['simplicities'])

    _, r = self.anagrams2.get_anagrams("simplicity")
    self.assertEqual(r, ['simplicity'])

    _, r = self.anagrams2.get_anagrams("simplification")
    self.assertEqual(r, ['simplification'])

    _, r = self.anagrams2.get_anagrams("simplifications")
    self.assertEqual(r, ['simplifications'])

    _, r = self.anagrams2.get_anagrams("simplified")
    self.assertEqual(r, ['simplified'])

    _, r = self.anagrams2.get_anagrams("simplifier")
    self.assertEqual(r, ['simplifier'])

    _, r = self.anagrams2.get_anagrams("simplifiers")
    self.assertEqual(r, ['simplifiers'])

    _, r = self.anagrams2.get_anagrams("simplifies")
    self.assertEqual(r, ['simplifies'])

    _, r = self.anagrams2.get_anagrams("simplify")
    self.assertEqual(r, ['simplify'])

    _, r = self.anagrams2.get_anagrams("simplifying")
    self.assertEqual(r, ['simplifying'])

    _, r = self.anagrams2.get_anagrams("simplistic")
    self.assertEqual(r, ['simplistic'])

    _, r = self.anagrams2.get_anagrams("simply")
    self.assertEqual(r, ['simply'])

    _, r = self.anagrams2.get_anagrams("simpson")
    self.assertEqual(r, ['simpson'])

    _, r = self.anagrams2.get_anagrams("sims")
    self.assertEqual(r, ['miss', 'sims'])

    _, r = self.anagrams2.get_anagrams("simula")
    self.assertEqual(r, ['simula', 'simula'])

    _, r = self.anagrams2.get_anagrams("simula")
    self.assertEqual(r, ['simula', 'simula'])

    _, r = self.anagrams2.get_anagrams("simulate")
    self.assertEqual(r, ['simulate'])

    _, r = self.anagrams2.get_anagrams("simulated")
    self.assertEqual(r, ['simulated'])

    _, r = self.anagrams2.get_anagrams("simulates")
    self.assertEqual(r, ['simulates'])

    _, r = self.anagrams2.get_anagrams("simulating")
    self.assertEqual(r, ['simulating'])

    _, r = self.anagrams2.get_anagrams("simulation")
    self.assertEqual(r, ['simulation'])

    _, r = self.anagrams2.get_anagrams("simulations")
    self.assertEqual(r, ['simulations'])

    _, r = self.anagrams2.get_anagrams("simulator")
    self.assertEqual(r, ['simulator'])

    _, r = self.anagrams2.get_anagrams("simulators")
    self.assertEqual(r, ['simulators'])

    _, r = self.anagrams2.get_anagrams("simulcast")
    self.assertEqual(r, ['simulcast'])

    _, r = self.anagrams2.get_anagrams("simultaneity")
    self.assertEqual(r, ['simultaneity'])

    _, r = self.anagrams2.get_anagrams("simultaneous")
    self.assertEqual(r, ['simultaneous'])

    _, r = self.anagrams2.get_anagrams("simultaneously")
    self.assertEqual(r, ['simultaneously'])

    _, r = self.anagrams2.get_anagrams("sinai")
    self.assertEqual(r, ['sinai'])

    _, r = self.anagrams2.get_anagrams("sinatra")
    self.assertEqual(r, ['artisan', 'sinatra'])

    _, r = self.anagrams2.get_anagrams("sinbad")
    self.assertEqual(r, ['sinbad'])

    _, r = self.anagrams2.get_anagrams("since")
    self.assertEqual(r, ['since'])

    _, r = self.anagrams2.get_anagrams("sincere")
    self.assertEqual(r, ['sincere'])

    _, r = self.anagrams2.get_anagrams("sincerely")
    self.assertEqual(r, ['sincerely'])

    _, r = self.anagrams2.get_anagrams("sincerest")
    self.assertEqual(r, ['sincerest'])

    _, r = self.anagrams2.get_anagrams("sincerity")
    self.assertEqual(r, ['sincerity'])

    _, r = self.anagrams2.get_anagrams("sinclair")
    self.assertEqual(r, ['sinclair'])

    _, r = self.anagrams2.get_anagrams("sine")
    self.assertEqual(r, ['sine'])

    _, r = self.anagrams2.get_anagrams("sines")
    self.assertEqual(r, ['sines'])

    _, r = self.anagrams2.get_anagrams("sinew")
    self.assertEqual(r, ['sinew', 'swine', 'wines'])

    _, r = self.anagrams2.get_anagrams("sinews")
    self.assertEqual(r, ['sinews'])

    _, r = self.anagrams2.get_anagrams("sinewy")
    self.assertEqual(r, ['sinewy'])

    _, r = self.anagrams2.get_anagrams("sinful")
    self.assertEqual(r, ['sinful'])

    _, r = self.anagrams2.get_anagrams("sinfully")
    self.assertEqual(r, ['sinfully'])

    _, r = self.anagrams2.get_anagrams("sinfulness")
    self.assertEqual(r, ['sinfulness'])

    _, r = self.anagrams2.get_anagrams("sing")
    self.assertEqual(r, ['gins', 'sign', 'sing'])

    _, r = self.anagrams2.get_anagrams("singable")
    self.assertEqual(r, ['belgians', 'singable'])

    _, r = self.anagrams2.get_anagrams("singapore")
    self.assertEqual(r, ['singapore'])

    _, r = self.anagrams2.get_anagrams("singborg")
    self.assertEqual(r, ['singborg'])

    _, r = self.anagrams2.get_anagrams("singe")
    self.assertEqual(r, ['singe'])

    _, r = self.anagrams2.get_anagrams("singed")
    self.assertEqual(r, ['deigns', 'design', 'signed', 'singed'])

    _, r = self.anagrams2.get_anagrams("singer")
    self.assertEqual(r, ['reigns', 'resign', 'signer', 'singer'])

    _, r = self.anagrams2.get_anagrams("singers")
    self.assertEqual(r, ['resigns', 'signers', 'singers'])

    _, r = self.anagrams2.get_anagrams("singing")
    self.assertEqual(r, ['signing', 'singing'])

    _, r = self.anagrams2.get_anagrams("singingly")
    self.assertEqual(r, ['singingly'])

    _, r = self.anagrams2.get_anagrams("single")
    self.assertEqual(r, ['single'])

    _, r = self.anagrams2.get_anagrams("singled")
    self.assertEqual(r, ['singled'])

    _, r = self.anagrams2.get_anagrams("singlehanded")
    self.assertEqual(r, ['singlehanded'])

    _, r = self.anagrams2.get_anagrams("singleness")
    self.assertEqual(r, ['singleness'])

    _, r = self.anagrams2.get_anagrams("singles")
    self.assertEqual(r, ['singles'])

    _, r = self.anagrams2.get_anagrams("singlet")
    self.assertEqual(r, ['glisten', 'singlet', 'tingles'])

    _, r = self.anagrams2.get_anagrams("singleton")
    self.assertEqual(r, ['singleton'])

    _, r = self.anagrams2.get_anagrams("singletons")
    self.assertEqual(r, ['singletons'])

    _, r = self.anagrams2.get_anagrams("singling")
    self.assertEqual(r, ['singling', 'slinging'])

    _, r = self.anagrams2.get_anagrams("singly")
    self.assertEqual(r, ['singly'])

    _, r = self.anagrams2.get_anagrams("sings")
    self.assertEqual(r, ['signs', 'sings'])

    _, r = self.anagrams2.get_anagrams("singsong")
    self.assertEqual(r, ['singsong'])

    _, r = self.anagrams2.get_anagrams("singular")
    self.assertEqual(r, ['singular'])

    _, r = self.anagrams2.get_anagrams("singularities")
    self.assertEqual(r, ['singularities'])

    _, r = self.anagrams2.get_anagrams("singularity")
    self.assertEqual(r, ['singularity'])

    _, r = self.anagrams2.get_anagrams("singularly")
    self.assertEqual(r, ['singularly'])

    _, r = self.anagrams2.get_anagrams("sinister")
    self.assertEqual(r, ['sinister'])

    _, r = self.anagrams2.get_anagrams("sink")
    self.assertEqual(r, ['inks', 'sink', 'skin'])

    _, r = self.anagrams2.get_anagrams("sinked")
    self.assertEqual(r, ['sinked'])

    _, r = self.anagrams2.get_anagrams("sinker")
    self.assertEqual(r, ['inkers', 'sinker'])

    _, r = self.anagrams2.get_anagrams("sinkers")
    self.assertEqual(r, ['sinkers'])

    _, r = self.anagrams2.get_anagrams("sinkhole")
    self.assertEqual(r, ['sinkhole'])

    _, r = self.anagrams2.get_anagrams("sinking")
    self.assertEqual(r, ['inkings', 'sinking'])

    _, r = self.anagrams2.get_anagrams("sinks")
    self.assertEqual(r, ['sinks', 'skins'])

    _, r = self.anagrams2.get_anagrams("sinned")
    self.assertEqual(r, ['dennis', 'sinned'])

    _, r = self.anagrams2.get_anagrams("sinner")
    self.assertEqual(r, ['sinner'])

    _, r = self.anagrams2.get_anagrams("sinners")
    self.assertEqual(r, ['sinners'])

    _, r = self.anagrams2.get_anagrams("sinning")
    self.assertEqual(r, ['innings', 'sinning'])

    _, r = self.anagrams2.get_anagrams("sino-")
    self.assertEqual(r, ['sino-'])

    _, r = self.anagrams2.get_anagrams("sins")
    self.assertEqual(r, ['sins'])

    _, r = self.anagrams2.get_anagrams("sinuous")
    self.assertEqual(r, ['sinuous'])

    _, r = self.anagrams2.get_anagrams("sinus")
    self.assertEqual(r, ['sinus'])

    _, r = self.anagrams2.get_anagrams("sinusoid")
    self.assertEqual(r, ['sinusoid'])

    _, r = self.anagrams2.get_anagrams("sinusoidal")
    self.assertEqual(r, ['sinusoidal'])

    _, r = self.anagrams2.get_anagrams("sinusoids")
    self.assertEqual(r, ['sinusoids'])

    _, r = self.anagrams2.get_anagrams("sioux")
    self.assertEqual(r, ['sioux'])

    _, r = self.anagrams2.get_anagrams("sip")
    self.assertEqual(r, ['sip'])

    _, r = self.anagrams2.get_anagrams("siphon")
    self.assertEqual(r, ['siphon'])

    _, r = self.anagrams2.get_anagrams("siphoning")
    self.assertEqual(r, ['siphoning'])

    _, r = self.anagrams2.get_anagrams("sipping")
    self.assertEqual(r, ['sipping'])

    _, r = self.anagrams2.get_anagrams("sips")
    self.assertEqual(r, ['piss', 'sips'])

    _, r = self.anagrams2.get_anagrams("sir")
    self.assertEqual(r, ['sir', 'sri'])

    _, r = self.anagrams2.get_anagrams("sire")
    self.assertEqual(r, ['eris', 'ires', 'rise', 'sire'])

    _, r = self.anagrams2.get_anagrams("sired")
    self.assertEqual(r, ['dries', 'rides', 'sired'])

    _, r = self.anagrams2.get_anagrams("siren")
    self.assertEqual(r, ['reins', 'resin', 'rinse', 'risen', 'siren'])

    _, r = self.anagrams2.get_anagrams("sirens")
    self.assertEqual(r, ['resins', 'rinses', 'sirens'])

    _, r = self.anagrams2.get_anagrams("sires")
    self.assertEqual(r, ['rises', 'sires'])

    _, r = self.anagrams2.get_anagrams("sirius")
    self.assertEqual(r, ['sirius'])

    _, r = self.anagrams2.get_anagrams("sirs")
    self.assertEqual(r, ['sirs'])

    _, r = self.anagrams2.get_anagrams("sirup")
    self.assertEqual(r, ['sirup'])

    _, r = self.anagrams2.get_anagrams("sister")
    self.assertEqual(r, ['resist', 'sister'])

    _, r = self.anagrams2.get_anagrams("sisterly")
    self.assertEqual(r, ['sisterly'])

    _, r = self.anagrams2.get_anagrams("sisters")
    self.assertEqual(r, ['resists', 'sisters'])

    _, r = self.anagrams2.get_anagrams("sistine")
    self.assertEqual(r, ['sistine'])

    _, r = self.anagrams2.get_anagrams("sisyphean")
    self.assertEqual(r, ['sisyphean'])

    _, r = self.anagrams2.get_anagrams("sisyphus")
    self.assertEqual(r, ['sisyphus'])

    _, r = self.anagrams2.get_anagrams("sit")
    self.assertEqual(r, ['its', 'sit'])

    _, r = self.anagrams2.get_anagrams("site")
    self.assertEqual(r, ['site', 'ties'])

    _, r = self.anagrams2.get_anagrams("sited")
    self.assertEqual(r, ['diets', 'edits', 'sited', 'tides'])

    _, r = self.anagrams2.get_anagrams("sites")
    self.assertEqual(r, ['sites'])

    _, r = self.anagrams2.get_anagrams("siting")
    self.assertEqual(r, ['siting'])

    _, r = self.anagrams2.get_anagrams("sits")
    self.assertEqual(r, ['sits'])

    _, r = self.anagrams2.get_anagrams("sitter")
    self.assertEqual(r, ['sitter'])

    _, r = self.anagrams2.get_anagrams("sitters")
    self.assertEqual(r, ['sitters'])

    _, r = self.anagrams2.get_anagrams("sitting")
    self.assertEqual(r, ['sitting'])

    _, r = self.anagrams2.get_anagrams("sittings")
    self.assertEqual(r, ['sittings'])

    _, r = self.anagrams2.get_anagrams("situ")
    self.assertEqual(r, ['situ', 'suit'])

    _, r = self.anagrams2.get_anagrams("situate")
    self.assertEqual(r, ['situate'])

    _, r = self.anagrams2.get_anagrams("situated")
    self.assertEqual(r, ['situated'])

    _, r = self.anagrams2.get_anagrams("situates")
    self.assertEqual(r, ['situates'])

    _, r = self.anagrams2.get_anagrams("situating")
    self.assertEqual(r, ['situating'])

    _, r = self.anagrams2.get_anagrams("situation")
    self.assertEqual(r, ['situation'])

    _, r = self.anagrams2.get_anagrams("situational")
    self.assertEqual(r, ['situational'])

    _, r = self.anagrams2.get_anagrams("situationally")
    self.assertEqual(r, ['situationally'])

    _, r = self.anagrams2.get_anagrams("situations")
    self.assertEqual(r, ['situations'])

    _, r = self.anagrams2.get_anagrams("siva")
    self.assertEqual(r, ['avis', 'siva', 'visa'])

    _, r = self.anagrams2.get_anagrams("six")
    self.assertEqual(r, ['six'])

    _, r = self.anagrams2.get_anagrams("sixes")
    self.assertEqual(r, ['sixes'])

    _, r = self.anagrams2.get_anagrams("sixfold")
    self.assertEqual(r, ['sixfold'])

    _, r = self.anagrams2.get_anagrams("sixgun")
    self.assertEqual(r, ['sixgun'])

    _, r = self.anagrams2.get_anagrams("sixpence")
    self.assertEqual(r, ['sixpence'])

    _, r = self.anagrams2.get_anagrams("sixteen")
    self.assertEqual(r, ['sixteen'])

    _, r = self.anagrams2.get_anagrams("sixteens")
    self.assertEqual(r, ['sixteens'])

    _, r = self.anagrams2.get_anagrams("sixteenth")
    self.assertEqual(r, ['sixteenth'])

    _, r = self.anagrams2.get_anagrams("sixth")
    self.assertEqual(r, ['sixth'])

    _, r = self.anagrams2.get_anagrams("sixties")
    self.assertEqual(r, ['sixties'])

    _, r = self.anagrams2.get_anagrams("sixtieth")
    self.assertEqual(r, ['sixtieth'])

    _, r = self.anagrams2.get_anagrams("sixty")
    self.assertEqual(r, ['sixty'])

    _, r = self.anagrams2.get_anagrams("sizable")
    self.assertEqual(r, ['sizable'])

    _, r = self.anagrams2.get_anagrams("size")
    self.assertEqual(r, ['size'])

    _, r = self.anagrams2.get_anagrams("sized")
    self.assertEqual(r, ['sized'])

    _, r = self.anagrams2.get_anagrams("sizes")
    self.assertEqual(r, ['sizes', 'zeiss'])

    _, r = self.anagrams2.get_anagrams("sizing")
    self.assertEqual(r, ['sizing'])

    _, r = self.anagrams2.get_anagrams("sizings")
    self.assertEqual(r, ['sizings'])

    _, r = self.anagrams2.get_anagrams("sizzle")
    self.assertEqual(r, ['sizzle'])

    _, r = self.anagrams2.get_anagrams("skate")
    self.assertEqual(r, ['keats', 'skate', 'stake', 'steak', 'takes'])

    _, r = self.anagrams2.get_anagrams("skated")
    self.assertEqual(r, ['skated', 'staked', 'tasked'])

    _, r = self.anagrams2.get_anagrams("skater")
    self.assertEqual(r, ['skater', 'streak', 'takers'])

    _, r = self.anagrams2.get_anagrams("skaters")
    self.assertEqual(r, ['skaters', 'streaks'])

    _, r = self.anagrams2.get_anagrams("skates")
    self.assertEqual(r, ['skates', 'stakes', 'steaks'])

    _, r = self.anagrams2.get_anagrams("skating")
    self.assertEqual(r, ['skating', 'takings', 'tasking'])

    _, r = self.anagrams2.get_anagrams("skeletal")
    self.assertEqual(r, ['skeletal'])

    _, r = self.anagrams2.get_anagrams("skeleton")
    self.assertEqual(r, ['skeleton'])

    _, r = self.anagrams2.get_anagrams("skeletons")
    self.assertEqual(r, ['skeletons'])

    _, r = self.anagrams2.get_anagrams("skeptic")
    self.assertEqual(r, ['pickets', 'skeptic'])

    _, r = self.anagrams2.get_anagrams("skeptical")
    self.assertEqual(r, ['skeptical'])

    _, r = self.anagrams2.get_anagrams("skeptically")
    self.assertEqual(r, ['skeptically'])

    _, r = self.anagrams2.get_anagrams("skepticism")
    self.assertEqual(r, ['skepticism'])

    _, r = self.anagrams2.get_anagrams("skeptics")
    self.assertEqual(r, ['skeptics'])

    _, r = self.anagrams2.get_anagrams("sketch")
    self.assertEqual(r, ['sketch'])

    _, r = self.anagrams2.get_anagrams("sketchbook")
    self.assertEqual(r, ['sketchbook'])

    _, r = self.anagrams2.get_anagrams("sketched")
    self.assertEqual(r, ['sketched'])

    _, r = self.anagrams2.get_anagrams("sketches")
    self.assertEqual(r, ['sketches'])

    _, r = self.anagrams2.get_anagrams("sketchily")
    self.assertEqual(r, ['sketchily'])

    _, r = self.anagrams2.get_anagrams("sketching")
    self.assertEqual(r, ['sketching'])

    _, r = self.anagrams2.get_anagrams("sketchpad")
    self.assertEqual(r, ['sketchpad'])

    _, r = self.anagrams2.get_anagrams("sketchy")
    self.assertEqual(r, ['sketchy'])

    _, r = self.anagrams2.get_anagrams("skew")
    self.assertEqual(r, ['skew'])

    _, r = self.anagrams2.get_anagrams("skewed")
    self.assertEqual(r, ['skewed'])

    _, r = self.anagrams2.get_anagrams("skewer")
    self.assertEqual(r, ['skewer'])

    _, r = self.anagrams2.get_anagrams("skewers")
    self.assertEqual(r, ['skewers'])

    _, r = self.anagrams2.get_anagrams("skewing")
    self.assertEqual(r, ['skewing'])

    _, r = self.anagrams2.get_anagrams("skews")
    self.assertEqual(r, ['skews'])

    _, r = self.anagrams2.get_anagrams("ski")
    self.assertEqual(r, ['ski'])

    _, r = self.anagrams2.get_anagrams("skid")
    self.assertEqual(r, ['disk', 'kids', 'skid'])

    _, r = self.anagrams2.get_anagrams("skidding")
    self.assertEqual(r, ['skidding'])

    _, r = self.anagrams2.get_anagrams("skied")
    self.assertEqual(r, ['dikes', 'skied'])

    _, r = self.anagrams2.get_anagrams("skies")
    self.assertEqual(r, ['skies'])

    _, r = self.anagrams2.get_anagrams("skiff")
    self.assertEqual(r, ['skiff'])

    _, r = self.anagrams2.get_anagrams("skiing")
    self.assertEqual(r, ['skiing'])

    _, r = self.anagrams2.get_anagrams("skill")
    self.assertEqual(r, ['kills', 'skill'])

    _, r = self.anagrams2.get_anagrams("skilled")
    self.assertEqual(r, ['skilled'])

    _, r = self.anagrams2.get_anagrams("skillet")
    self.assertEqual(r, ['skillet'])

    _, r = self.anagrams2.get_anagrams("skillful")
    self.assertEqual(r, ['skillful'])

    _, r = self.anagrams2.get_anagrams("skillfully")
    self.assertEqual(r, ['skillfully'])

    _, r = self.anagrams2.get_anagrams("skillfulness")
    self.assertEqual(r, ['skillfulness'])

    _, r = self.anagrams2.get_anagrams("skills")
    self.assertEqual(r, ['skills'])

    _, r = self.anagrams2.get_anagrams("skim")
    self.assertEqual(r, ['skim'])

    _, r = self.anagrams2.get_anagrams("skimmed")
    self.assertEqual(r, ['skimmed'])

    _, r = self.anagrams2.get_anagrams("skimming")
    self.assertEqual(r, ['skimming'])

    _, r = self.anagrams2.get_anagrams("skimp")
    self.assertEqual(r, ['skimp'])

    _, r = self.anagrams2.get_anagrams("skimped")
    self.assertEqual(r, ['skimped'])

    _, r = self.anagrams2.get_anagrams("skimping")
    self.assertEqual(r, ['skimping'])

    _, r = self.anagrams2.get_anagrams("skimps")
    self.assertEqual(r, ['skimps'])

    _, r = self.anagrams2.get_anagrams("skimpy")
    self.assertEqual(r, ['skimpy'])

    _, r = self.anagrams2.get_anagrams("skims")
    self.assertEqual(r, ['skims'])

    _, r = self.anagrams2.get_anagrams("skin")
    self.assertEqual(r, ['inks', 'sink', 'skin'])

    _, r = self.anagrams2.get_anagrams("skindive")
    self.assertEqual(r, ['skindive'])

    _, r = self.anagrams2.get_anagrams("skinned")
    self.assertEqual(r, ['skinned'])

    _, r = self.anagrams2.get_anagrams("skinner")
    self.assertEqual(r, ['skinner'])

    _, r = self.anagrams2.get_anagrams("skinners")
    self.assertEqual(r, ['skinners'])

    _, r = self.anagrams2.get_anagrams("skinning")
    self.assertEqual(r, ['skinning'])

    _, r = self.anagrams2.get_anagrams("skinny")
    self.assertEqual(r, ['skinny'])

    _, r = self.anagrams2.get_anagrams("skins")
    self.assertEqual(r, ['sinks', 'skins'])

    _, r = self.anagrams2.get_anagrams("skip")
    self.assertEqual(r, ['skip'])

    _, r = self.anagrams2.get_anagrams("skipped")
    self.assertEqual(r, ['skipped'])

    _, r = self.anagrams2.get_anagrams("skipper")
    self.assertEqual(r, ['skipper'])

    _, r = self.anagrams2.get_anagrams("skippers")
    self.assertEqual(r, ['skippers'])

    _, r = self.anagrams2.get_anagrams("skipping")
    self.assertEqual(r, ['skipping'])

    _, r = self.anagrams2.get_anagrams("skippy")
    self.assertEqual(r, ['skippy'])

    _, r = self.anagrams2.get_anagrams("skips")
    self.assertEqual(r, ['skips'])

    _, r = self.anagrams2.get_anagrams("skirmish")
    self.assertEqual(r, ['skirmish'])

    _, r = self.anagrams2.get_anagrams("skirmished")
    self.assertEqual(r, ['skirmished'])

    _, r = self.anagrams2.get_anagrams("skirmisher")
    self.assertEqual(r, ['skirmisher'])

    _, r = self.anagrams2.get_anagrams("skirmishers")
    self.assertEqual(r, ['skirmishers'])

    _, r = self.anagrams2.get_anagrams("skirmishes")
    self.assertEqual(r, ['skirmishes'])

    _, r = self.anagrams2.get_anagrams("skirmishing")
    self.assertEqual(r, ['skirmishing'])

    _, r = self.anagrams2.get_anagrams("skirt")
    self.assertEqual(r, ['skirt'])

    _, r = self.anagrams2.get_anagrams("skirted")
    self.assertEqual(r, ['skirted'])

    _, r = self.anagrams2.get_anagrams("skirting")
    self.assertEqual(r, ['skirting', 'striking'])

    _, r = self.anagrams2.get_anagrams("skirts")
    self.assertEqual(r, ['skirts'])

    _, r = self.anagrams2.get_anagrams("skis")
    self.assertEqual(r, ['kiss', 'skis'])

    _, r = self.anagrams2.get_anagrams("skit")
    self.assertEqual(r, ['kits', 'skit'])

    _, r = self.anagrams2.get_anagrams("skopje")
    self.assertEqual(r, ['skopje'])

    _, r = self.anagrams2.get_anagrams("skulk")
    self.assertEqual(r, ['skulk'])

    _, r = self.anagrams2.get_anagrams("skulked")
    self.assertEqual(r, ['skulked'])

    _, r = self.anagrams2.get_anagrams("skulker")
    self.assertEqual(r, ['skulker'])

    _, r = self.anagrams2.get_anagrams("skulking")
    self.assertEqual(r, ['skulking'])

    _, r = self.anagrams2.get_anagrams("skulks")
    self.assertEqual(r, ['skulks'])

    _, r = self.anagrams2.get_anagrams("skull")
    self.assertEqual(r, ['skull'])

    _, r = self.anagrams2.get_anagrams("skullcap")
    self.assertEqual(r, ['skullcap'])

    _, r = self.anagrams2.get_anagrams("skullduggery")
    self.assertEqual(r, ['skullduggery'])

    _, r = self.anagrams2.get_anagrams("skulls")
    self.assertEqual(r, ['skulls'])

    _, r = self.anagrams2.get_anagrams("skunk")
    self.assertEqual(r, ['skunk'])

    _, r = self.anagrams2.get_anagrams("skunks")
    self.assertEqual(r, ['skunks'])

    _, r = self.anagrams2.get_anagrams("sky")
    self.assertEqual(r, ['sky'])

    _, r = self.anagrams2.get_anagrams("skye")
    self.assertEqual(r, ['keys', 'skye'])

    _, r = self.anagrams2.get_anagrams("skyhook")
    self.assertEqual(r, ['skyhook'])

    _, r = self.anagrams2.get_anagrams("skyjack")
    self.assertEqual(r, ['skyjack'])

    _, r = self.anagrams2.get_anagrams("skylark")
    self.assertEqual(r, ['skylark'])

    _, r = self.anagrams2.get_anagrams("skylarking")
    self.assertEqual(r, ['skylarking'])

    _, r = self.anagrams2.get_anagrams("skylarks")
    self.assertEqual(r, ['skylarks'])

    _, r = self.anagrams2.get_anagrams("skylight")
    self.assertEqual(r, ['skylight'])

    _, r = self.anagrams2.get_anagrams("skylights")
    self.assertEqual(r, ['skylights'])

    _, r = self.anagrams2.get_anagrams("skyline")
    self.assertEqual(r, ['skyline'])

    _, r = self.anagrams2.get_anagrams("skyrockets")
    self.assertEqual(r, ['skyrockets'])

    _, r = self.anagrams2.get_anagrams("skyscraper")
    self.assertEqual(r, ['skyscraper'])

    _, r = self.anagrams2.get_anagrams("skyscrapers")
    self.assertEqual(r, ['skyscrapers'])

    _, r = self.anagrams2.get_anagrams("slab")
    self.assertEqual(r, ['labs', 'slab'])

    _, r = self.anagrams2.get_anagrams("slack")
    self.assertEqual(r, ['lacks', 'slack'])

    _, r = self.anagrams2.get_anagrams("slacken")
    self.assertEqual(r, ['slacken'])

    _, r = self.anagrams2.get_anagrams("slacker")
    self.assertEqual(r, ['slacker'])

    _, r = self.anagrams2.get_anagrams("slacking")
    self.assertEqual(r, ['slacking'])

    _, r = self.anagrams2.get_anagrams("slackly")
    self.assertEqual(r, ['slackly'])

    _, r = self.anagrams2.get_anagrams("slackness")
    self.assertEqual(r, ['slackness'])

    _, r = self.anagrams2.get_anagrams("slacks")
    self.assertEqual(r, ['slacks'])

    _, r = self.anagrams2.get_anagrams("slain")
    self.assertEqual(r, ['nails', 'slain', 'snail'])

    _, r = self.anagrams2.get_anagrams("slam")
    self.assertEqual(r, ['alms', 'slam'])

    _, r = self.anagrams2.get_anagrams("slammed")
    self.assertEqual(r, ['slammed'])

    _, r = self.anagrams2.get_anagrams("slamming")
    self.assertEqual(r, ['slamming'])

    _, r = self.anagrams2.get_anagrams("slams")
    self.assertEqual(r, ['slams'])

    _, r = self.anagrams2.get_anagrams("slander")
    self.assertEqual(r, ['landers', 'slander', 'snarled'])

    _, r = self.anagrams2.get_anagrams("slanderer")
    self.assertEqual(r, ['slanderer'])

    _, r = self.anagrams2.get_anagrams("slanderous")
    self.assertEqual(r, ['slanderous'])

    _, r = self.anagrams2.get_anagrams("slanders")
    self.assertEqual(r, ['slanders'])

    _, r = self.anagrams2.get_anagrams("slang")
    self.assertEqual(r, ['slang'])

    _, r = self.anagrams2.get_anagrams("slant")
    self.assertEqual(r, ['slant'])

    _, r = self.anagrams2.get_anagrams("slanted")
    self.assertEqual(r, ['slanted'])

    _, r = self.anagrams2.get_anagrams("slanting")
    self.assertEqual(r, ['slanting'])

    _, r = self.anagrams2.get_anagrams("slants")
    self.assertEqual(r, ['slants'])

    _, r = self.anagrams2.get_anagrams("slap")
    self.assertEqual(r, ['alps', 'laps', 'pals', 'slap'])

    _, r = self.anagrams2.get_anagrams("slapped")
    self.assertEqual(r, ['slapped'])

    _, r = self.anagrams2.get_anagrams("slapping")
    self.assertEqual(r, ['slapping'])

    _, r = self.anagrams2.get_anagrams("slaps")
    self.assertEqual(r, ['slaps'])

    _, r = self.anagrams2.get_anagrams("slapstick")
    self.assertEqual(r, ['slapstick'])

    _, r = self.anagrams2.get_anagrams("slash")
    self.assertEqual(r, ['slash'])

    _, r = self.anagrams2.get_anagrams("slashed")
    self.assertEqual(r, ['slashed'])

    _, r = self.anagrams2.get_anagrams("slashes")
    self.assertEqual(r, ['slashes'])

    _, r = self.anagrams2.get_anagrams("slashing")
    self.assertEqual(r, ['lashings', 'slashing'])

    _, r = self.anagrams2.get_anagrams("slat")
    self.assertEqual(r, ['last', 'salt', 'slat'])

    _, r = self.anagrams2.get_anagrams("slate")
    self.assertEqual(r, ['least', 'slate', 'stale', 'steal', 'tales'])

    _, r = self.anagrams2.get_anagrams("slated")
    self.assertEqual(r, ['deltas', 'lasted', 'salted', 'slated'])

    _, r = self.anagrams2.get_anagrams("slater")
    self.assertEqual(r, ['alerts', 'alters', 'salter', 'slater'])

    _, r = self.anagrams2.get_anagrams("slates")
    self.assertEqual(r, ['slates', 'steals', 'tassel'])

    _, r = self.anagrams2.get_anagrams("slats")
    self.assertEqual(r, ['lasts', 'salts', 'slats'])

    _, r = self.anagrams2.get_anagrams("slaughter")
    self.assertEqual(r, ['slaughter'])

    _, r = self.anagrams2.get_anagrams("slaughtered")
    self.assertEqual(r, ['slaughtered'])

    _, r = self.anagrams2.get_anagrams("slaughterhouse")
    self.assertEqual(r, ['slaughterhouse'])

    _, r = self.anagrams2.get_anagrams("slaughtering")
    self.assertEqual(r, ['slaughtering'])

    _, r = self.anagrams2.get_anagrams("slaughters")
    self.assertEqual(r, ['slaughters'])

    _, r = self.anagrams2.get_anagrams("slav")
    self.assertEqual(r, ['slav'])

    _, r = self.anagrams2.get_anagrams("slave")
    self.assertEqual(r, ['salve', 'slave', 'vales'])

    _, r = self.anagrams2.get_anagrams("slaver")
    self.assertEqual(r, ['salver', 'slaver'])

    _, r = self.anagrams2.get_anagrams("slavery")
    self.assertEqual(r, ['slavery'])

    _, r = self.anagrams2.get_anagrams("slaves")
    self.assertEqual(r, ['salves', 'slaves'])

    _, r = self.anagrams2.get_anagrams("slavic")
    self.assertEqual(r, ['slavic'])

    _, r = self.anagrams2.get_anagrams("slavicize")
    self.assertEqual(r, ['slavicize'])

    _, r = self.anagrams2.get_anagrams("slavicizes")
    self.assertEqual(r, ['slavicizes'])

    _, r = self.anagrams2.get_anagrams("slavish")
    self.assertEqual(r, ['slavish'])

    _, r = self.anagrams2.get_anagrams("slavization")
    self.assertEqual(r, ['slavization'])

    _, r = self.anagrams2.get_anagrams("slavizations")
    self.assertEqual(r, ['slavizations'])

    _, r = self.anagrams2.get_anagrams("slavize")
    self.assertEqual(r, ['slavize'])

    _, r = self.anagrams2.get_anagrams("slavizes")
    self.assertEqual(r, ['slavizes'])

    _, r = self.anagrams2.get_anagrams("slavonic")
    self.assertEqual(r, ['slavonic'])

    _, r = self.anagrams2.get_anagrams("slavonicize")
    self.assertEqual(r, ['slavonicize'])

    _, r = self.anagrams2.get_anagrams("slavonicizes")
    self.assertEqual(r, ['slavonicizes'])

    _, r = self.anagrams2.get_anagrams("slavs")
    self.assertEqual(r, ['slavs'])

    _, r = self.anagrams2.get_anagrams("slay")
    self.assertEqual(r, ['lays', 'slay'])

    _, r = self.anagrams2.get_anagrams("slayer")
    self.assertEqual(r, ['layers', 'relays', 'slayer'])

    _, r = self.anagrams2.get_anagrams("slayers")
    self.assertEqual(r, ['slayers'])

    _, r = self.anagrams2.get_anagrams("slaying")
    self.assertEqual(r, ['slaying'])

    _, r = self.anagrams2.get_anagrams("slays")
    self.assertEqual(r, ['slays'])

    _, r = self.anagrams2.get_anagrams("sled")
    self.assertEqual(r, ['sled'])

    _, r = self.anagrams2.get_anagrams("sledding")
    self.assertEqual(r, ['sledding'])

    _, r = self.anagrams2.get_anagrams("sledge")
    self.assertEqual(r, ['ledges', 'sledge'])

    _, r = self.anagrams2.get_anagrams("sledgehammer")
    self.assertEqual(r, ['sledgehammer'])

    _, r = self.anagrams2.get_anagrams("sledges")
    self.assertEqual(r, ['sledges'])

    _, r = self.anagrams2.get_anagrams("sleds")
    self.assertEqual(r, ['sleds'])

    _, r = self.anagrams2.get_anagrams("sleek")
    self.assertEqual(r, ['keels', 'sleek'])

    _, r = self.anagrams2.get_anagrams("sleep")
    self.assertEqual(r, ['peels', 'sleep'])

    _, r = self.anagrams2.get_anagrams("sleeper")
    self.assertEqual(r, ['sleeper'])

    _, r = self.anagrams2.get_anagrams("sleepers")
    self.assertEqual(r, ['peerless', 'sleepers'])

    _, r = self.anagrams2.get_anagrams("sleepily")
    self.assertEqual(r, ['sleepily'])

    _, r = self.anagrams2.get_anagrams("sleepiness")
    self.assertEqual(r, ['sleepiness'])

    _, r = self.anagrams2.get_anagrams("sleeping")
    self.assertEqual(r, ['sleeping'])

    _, r = self.anagrams2.get_anagrams("sleepless")
    self.assertEqual(r, ['sleepless'])

    _, r = self.anagrams2.get_anagrams("sleeplessly")
    self.assertEqual(r, ['sleeplessly'])

    _, r = self.anagrams2.get_anagrams("sleeplessness")
    self.assertEqual(r, ['sleeplessness'])

    _, r = self.anagrams2.get_anagrams("sleeps")
    self.assertEqual(r, ['sleeps'])

    _, r = self.anagrams2.get_anagrams("sleepwalk")
    self.assertEqual(r, ['sleepwalk'])

    _, r = self.anagrams2.get_anagrams("sleepy")
    self.assertEqual(r, ['sleepy'])

    _, r = self.anagrams2.get_anagrams("sleet")
    self.assertEqual(r, ['sleet', 'steel'])

    _, r = self.anagrams2.get_anagrams("sleeve")
    self.assertEqual(r, ['levees', 'sleeve'])

    _, r = self.anagrams2.get_anagrams("sleeves")
    self.assertEqual(r, ['sleeves'])

    _, r = self.anagrams2.get_anagrams("sleigh")
    self.assertEqual(r, ['sleigh'])

    _, r = self.anagrams2.get_anagrams("sleighs")
    self.assertEqual(r, ['sleighs'])

    _, r = self.anagrams2.get_anagrams("sleight")
    self.assertEqual(r, ['sleight'])

    _, r = self.anagrams2.get_anagrams("slender")
    self.assertEqual(r, ['lenders', 'slender'])

    _, r = self.anagrams2.get_anagrams("slenderer")
    self.assertEqual(r, ['slenderer'])

    _, r = self.anagrams2.get_anagrams("slept")
    self.assertEqual(r, ['pelts', 'slept'])

    _, r = self.anagrams2.get_anagrams("slesinger")
    self.assertEqual(r, ['slesinger'])

    _, r = self.anagrams2.get_anagrams("sleuth")
    self.assertEqual(r, ['hustle', 'sleuth'])

    _, r = self.anagrams2.get_anagrams("slew")
    self.assertEqual(r, ['slew'])

    _, r = self.anagrams2.get_anagrams("slewing")
    self.assertEqual(r, ['slewing'])

    _, r = self.anagrams2.get_anagrams("slice")
    self.assertEqual(r, ['slice'])

    _, r = self.anagrams2.get_anagrams("sliced")
    self.assertEqual(r, ['sliced'])

    _, r = self.anagrams2.get_anagrams("slicer")
    self.assertEqual(r, ['relics', 'slicer'])

    _, r = self.anagrams2.get_anagrams("slicers")
    self.assertEqual(r, ['slicers'])

    _, r = self.anagrams2.get_anagrams("slices")
    self.assertEqual(r, ['slices'])

    _, r = self.anagrams2.get_anagrams("slicing")
    self.assertEqual(r, ['slicing'])

    _, r = self.anagrams2.get_anagrams("slick")
    self.assertEqual(r, ['licks', 'slick'])

    _, r = self.anagrams2.get_anagrams("slicker")
    self.assertEqual(r, ['slicker'])

    _, r = self.anagrams2.get_anagrams("slickers")
    self.assertEqual(r, ['slickers'])

    _, r = self.anagrams2.get_anagrams("slicks")
    self.assertEqual(r, ['slicks'])

    _, r = self.anagrams2.get_anagrams("slid")
    self.assertEqual(r, ['lids', 'slid'])

    _, r = self.anagrams2.get_anagrams("slide")
    self.assertEqual(r, ['idles', 'slide'])

    _, r = self.anagrams2.get_anagrams("slider")
    self.assertEqual(r, ['idlers', 'slider'])

    _, r = self.anagrams2.get_anagrams("sliders")
    self.assertEqual(r, ['sliders'])

    _, r = self.anagrams2.get_anagrams("slides")
    self.assertEqual(r, ['slides'])

    _, r = self.anagrams2.get_anagrams("sliding")
    self.assertEqual(r, ['sliding'])

    _, r = self.anagrams2.get_anagrams("slight")
    self.assertEqual(r, ['lights', 'slight'])

    _, r = self.anagrams2.get_anagrams("slighted")
    self.assertEqual(r, ['delights', 'slighted'])

    _, r = self.anagrams2.get_anagrams("slighter")
    self.assertEqual(r, ['lighters', 'slighter'])

    _, r = self.anagrams2.get_anagrams("slightest")
    self.assertEqual(r, ['slightest'])

    _, r = self.anagrams2.get_anagrams("slighting")
    self.assertEqual(r, ['slighting'])

    _, r = self.anagrams2.get_anagrams("slightly")
    self.assertEqual(r, ['slightly'])

    _, r = self.anagrams2.get_anagrams("slightness")
    self.assertEqual(r, ['slightness'])

    _, r = self.anagrams2.get_anagrams("slights")
    self.assertEqual(r, ['slights'])

    _, r = self.anagrams2.get_anagrams("slim")
    self.assertEqual(r, ['slim'])

    _, r = self.anagrams2.get_anagrams("slime")
    self.assertEqual(r, ['limes', 'miles', 'slime', 'smile'])

    _, r = self.anagrams2.get_anagrams("slimed")
    self.assertEqual(r, ['misled', 'slimed', 'smiled'])

    _, r = self.anagrams2.get_anagrams("slimly")
    self.assertEqual(r, ['slimly'])

    _, r = self.anagrams2.get_anagrams("slimy")
    self.assertEqual(r, ['slimy'])

    _, r = self.anagrams2.get_anagrams("sling")
    self.assertEqual(r, ['sling'])

    _, r = self.anagrams2.get_anagrams("slinging")
    self.assertEqual(r, ['singling', 'slinging'])

    _, r = self.anagrams2.get_anagrams("slings")
    self.assertEqual(r, ['slings'])

    _, r = self.anagrams2.get_anagrams("slingshot")
    self.assertEqual(r, ['slingshot'])

    _, r = self.anagrams2.get_anagrams("slip")
    self.assertEqual(r, ['lips', 'lisp', 'slip'])

    _, r = self.anagrams2.get_anagrams("slippage")
    self.assertEqual(r, ['slippage'])

    _, r = self.anagrams2.get_anagrams("slipped")
    self.assertEqual(r, ['slipped'])

    _, r = self.anagrams2.get_anagrams("slipper")
    self.assertEqual(r, ['ripples', 'slipper'])

    _, r = self.anagrams2.get_anagrams("slipperiness")
    self.assertEqual(r, ['slipperiness'])

    _, r = self.anagrams2.get_anagrams("slippers")
    self.assertEqual(r, ['slippers'])

    _, r = self.anagrams2.get_anagrams("slippery")
    self.assertEqual(r, ['slippery'])

    _, r = self.anagrams2.get_anagrams("slipping")
    self.assertEqual(r, ['slipping'])

    _, r = self.anagrams2.get_anagrams("slips")
    self.assertEqual(r, ['lisps', 'slips'])

    _, r = self.anagrams2.get_anagrams("slit")
    self.assertEqual(r, ['list', 'silt', 'slit'])

    _, r = self.anagrams2.get_anagrams("slither")
    self.assertEqual(r, ['slither'])

    _, r = self.anagrams2.get_anagrams("slits")
    self.assertEqual(r, ['lists', 'silts', 'slits'])

    _, r = self.anagrams2.get_anagrams("sliver")
    self.assertEqual(r, ['livers', 'silver', 'sliver'])

    _, r = self.anagrams2.get_anagrams("sloan")
    self.assertEqual(r, ['loans', 'salon', 'sloan'])

    _, r = self.anagrams2.get_anagrams("sloane")
    self.assertEqual(r, ['sloane'])

    _, r = self.anagrams2.get_anagrams("slob")
    self.assertEqual(r, ['slob'])

    _, r = self.anagrams2.get_anagrams("slocum")
    self.assertEqual(r, ['slocum'])

    _, r = self.anagrams2.get_anagrams("slogan")
    self.assertEqual(r, ['slogan'])

    _, r = self.anagrams2.get_anagrams("slogans")
    self.assertEqual(r, ['slogans'])

    _, r = self.anagrams2.get_anagrams("sloop")
    self.assertEqual(r, ['loops', 'pools', 'sloop', 'spool'])

    _, r = self.anagrams2.get_anagrams("slop")
    self.assertEqual(r, ['slop'])

    _, r = self.anagrams2.get_anagrams("slope")
    self.assertEqual(r, ['poles', 'slope'])

    _, r = self.anagrams2.get_anagrams("sloped")
    self.assertEqual(r, ['sloped'])

    _, r = self.anagrams2.get_anagrams("sloper")
    self.assertEqual(r, ['sloper'])

    _, r = self.anagrams2.get_anagrams("slopers")
    self.assertEqual(r, ['slopers'])

    _, r = self.anagrams2.get_anagrams("slopes")
    self.assertEqual(r, ['slopes'])

    _, r = self.anagrams2.get_anagrams("sloping")
    self.assertEqual(r, ['sloping'])

    _, r = self.anagrams2.get_anagrams("slopped")
    self.assertEqual(r, ['slopped'])

    _, r = self.anagrams2.get_anagrams("sloppiness")
    self.assertEqual(r, ['sloppiness'])

    _, r = self.anagrams2.get_anagrams("slopping")
    self.assertEqual(r, ['slopping'])

    _, r = self.anagrams2.get_anagrams("sloppy")
    self.assertEqual(r, ['sloppy'])

    _, r = self.anagrams2.get_anagrams("slops")
    self.assertEqual(r, ['slops'])

    _, r = self.anagrams2.get_anagrams("slot")
    self.assertEqual(r, ['lost', 'lots', 'slot'])

    _, r = self.anagrams2.get_anagrams("sloth")
    self.assertEqual(r, ['holst', 'sloth'])

    _, r = self.anagrams2.get_anagrams("slothful")
    self.assertEqual(r, ['slothful'])

    _, r = self.anagrams2.get_anagrams("sloths")
    self.assertEqual(r, ['sloths'])

    _, r = self.anagrams2.get_anagrams("slots")
    self.assertEqual(r, ['slots'])

    _, r = self.anagrams2.get_anagrams("slotted")
    self.assertEqual(r, ['slotted'])

    _, r = self.anagrams2.get_anagrams("slotting")
    self.assertEqual(r, ['slotting'])

    _, r = self.anagrams2.get_anagrams("slouch")
    self.assertEqual(r, ['slouch'])

    _, r = self.anagrams2.get_anagrams("slouched")
    self.assertEqual(r, ['slouched'])

    _, r = self.anagrams2.get_anagrams("slouches")
    self.assertEqual(r, ['slouches'])

    _, r = self.anagrams2.get_anagrams("slouching")
    self.assertEqual(r, ['slouching'])

    _, r = self.anagrams2.get_anagrams("slovakia")
    self.assertEqual(r, ['slovakia'])

    _, r = self.anagrams2.get_anagrams("slovenia")
    self.assertEqual(r, ['slovenia'])

    _, r = self.anagrams2.get_anagrams("slow")
    self.assertEqual(r, ['lows', 'owls', 'slow'])

    _, r = self.anagrams2.get_anagrams("slowdown")
    self.assertEqual(r, ['slowdown'])

    _, r = self.anagrams2.get_anagrams("slowed")
    self.assertEqual(r, ['slowed'])

    _, r = self.anagrams2.get_anagrams("slower")
    self.assertEqual(r, ['lowers', 'slower'])

    _, r = self.anagrams2.get_anagrams("slowest")
    self.assertEqual(r, ['slowest'])

    _, r = self.anagrams2.get_anagrams("slowing")
    self.assertEqual(r, ['slowing'])

    _, r = self.anagrams2.get_anagrams("slowly")
    self.assertEqual(r, ['slowly'])

    _, r = self.anagrams2.get_anagrams("slowness")
    self.assertEqual(r, ['slowness'])

    _, r = self.anagrams2.get_anagrams("slows")
    self.assertEqual(r, ['slows'])

    _, r = self.anagrams2.get_anagrams("sludge")
    self.assertEqual(r, ['sludge'])

    _, r = self.anagrams2.get_anagrams("slug")
    self.assertEqual(r, ['slug'])

    _, r = self.anagrams2.get_anagrams("sluggish")
    self.assertEqual(r, ['sluggish'])

    _, r = self.anagrams2.get_anagrams("sluggishly")
    self.assertEqual(r, ['sluggishly'])

    _, r = self.anagrams2.get_anagrams("sluggishness")
    self.assertEqual(r, ['sluggishness'])

    _, r = self.anagrams2.get_anagrams("slugs")
    self.assertEqual(r, ['slugs'])

    _, r = self.anagrams2.get_anagrams("sluice")
    self.assertEqual(r, ['sluice'])

    _, r = self.anagrams2.get_anagrams("slum")
    self.assertEqual(r, ['slum'])

    _, r = self.anagrams2.get_anagrams("slumber")
    self.assertEqual(r, ['rumbles', 'slumber'])

    _, r = self.anagrams2.get_anagrams("slumbered")
    self.assertEqual(r, ['slumbered'])

    _, r = self.anagrams2.get_anagrams("slumming")
    self.assertEqual(r, ['slumming'])

    _, r = self.anagrams2.get_anagrams("slump")
    self.assertEqual(r, ['lumps', 'plums', 'slump'])

    _, r = self.anagrams2.get_anagrams("slumped")
    self.assertEqual(r, ['slumped'])

    _, r = self.anagrams2.get_anagrams("slumps")
    self.assertEqual(r, ['slumps'])

    _, r = self.anagrams2.get_anagrams("slums")
    self.assertEqual(r, ['slums'])

    _, r = self.anagrams2.get_anagrams("slung")
    self.assertEqual(r, ['lungs', 'slung'])

    _, r = self.anagrams2.get_anagrams("slur")
    self.assertEqual(r, ['slur'])

    _, r = self.anagrams2.get_anagrams("slurp")
    self.assertEqual(r, ['slurp'])

    _, r = self.anagrams2.get_anagrams("slurring")
    self.assertEqual(r, ['slurring'])

    _, r = self.anagrams2.get_anagrams("slurry")
    self.assertEqual(r, ['slurry'])

    _, r = self.anagrams2.get_anagrams("slurs")
    self.assertEqual(r, ['slurs'])

    _, r = self.anagrams2.get_anagrams("sly")
    self.assertEqual(r, ['sly'])

    _, r = self.anagrams2.get_anagrams("slyly")
    self.assertEqual(r, ['slyly'])

    _, r = self.anagrams2.get_anagrams("smack")
    self.assertEqual(r, ['smack'])

    _, r = self.anagrams2.get_anagrams("smacked")
    self.assertEqual(r, ['smacked'])

    _, r = self.anagrams2.get_anagrams("smacking")
    self.assertEqual(r, ['smacking'])

    _, r = self.anagrams2.get_anagrams("smacks")
    self.assertEqual(r, ['smacks'])

    _, r = self.anagrams2.get_anagrams("small")
    self.assertEqual(r, ['small'])

    _, r = self.anagrams2.get_anagrams("smaller")
    self.assertEqual(r, ['smaller'])

    _, r = self.anagrams2.get_anagrams("smallest")
    self.assertEqual(r, ['smallest'])

    _, r = self.anagrams2.get_anagrams("smalley")
    self.assertEqual(r, ['smalley'])

    _, r = self.anagrams2.get_anagrams("smallish")
    self.assertEqual(r, ['smallish'])

    _, r = self.anagrams2.get_anagrams("smallness")
    self.assertEqual(r, ['smallness'])

    _, r = self.anagrams2.get_anagrams("smallpox")
    self.assertEqual(r, ['smallpox'])

    _, r = self.anagrams2.get_anagrams("smalltime")
    self.assertEqual(r, ['smalltime'])

    _, r = self.anagrams2.get_anagrams("smallwood")
    self.assertEqual(r, ['smallwood'])

    _, r = self.anagrams2.get_anagrams("smart")
    self.assertEqual(r, ['marts', 'smart'])

    _, r = self.anagrams2.get_anagrams("smarted")
    self.assertEqual(r, ['smarted'])

    _, r = self.anagrams2.get_anagrams("smarter")
    self.assertEqual(r, ['smarter'])

    _, r = self.anagrams2.get_anagrams("smartest")
    self.assertEqual(r, ['mattress', 'smartest'])

    _, r = self.anagrams2.get_anagrams("smartly")
    self.assertEqual(r, ['smartly'])

    _, r = self.anagrams2.get_anagrams("smartness")
    self.assertEqual(r, ['smartness'])

    _, r = self.anagrams2.get_anagrams("smash")
    self.assertEqual(r, ['shams', 'smash'])

    _, r = self.anagrams2.get_anagrams("smashed")
    self.assertEqual(r, ['smashed'])

    _, r = self.anagrams2.get_anagrams("smasher")
    self.assertEqual(r, ['marshes', 'smasher'])

    _, r = self.anagrams2.get_anagrams("smashers")
    self.assertEqual(r, ['smashers'])

    _, r = self.anagrams2.get_anagrams("smashes")
    self.assertEqual(r, ['smashes'])

    _, r = self.anagrams2.get_anagrams("smashing")
    self.assertEqual(r, ['smashing'])

    _, r = self.anagrams2.get_anagrams("smashingly")
    self.assertEqual(r, ['smashingly'])

    _, r = self.anagrams2.get_anagrams("smattering")
    self.assertEqual(r, ['smattering'])

    _, r = self.anagrams2.get_anagrams("smear")
    self.assertEqual(r, ['mares', 'smear'])

    _, r = self.anagrams2.get_anagrams("smeared")
    self.assertEqual(r, ['smeared'])

    _, r = self.anagrams2.get_anagrams("smearing")
    self.assertEqual(r, ['smearing'])

    _, r = self.anagrams2.get_anagrams("smears")
    self.assertEqual(r, ['smears'])

    _, r = self.anagrams2.get_anagrams("smell")
    self.assertEqual(r, ['smell'])

    _, r = self.anagrams2.get_anagrams("smelled")
    self.assertEqual(r, ['smelled'])

    _, r = self.anagrams2.get_anagrams("smelling")
    self.assertEqual(r, ['smelling'])

    _, r = self.anagrams2.get_anagrams("smells")
    self.assertEqual(r, ['smells'])

    _, r = self.anagrams2.get_anagrams("smelly")
    self.assertEqual(r, ['smelly'])

    _, r = self.anagrams2.get_anagrams("smelt")
    self.assertEqual(r, ['melts', 'smelt'])

    _, r = self.anagrams2.get_anagrams("smelter")
    self.assertEqual(r, ['smelter'])

    _, r = self.anagrams2.get_anagrams("smelts")
    self.assertEqual(r, ['smelts'])

    _, r = self.anagrams2.get_anagrams("smile")
    self.assertEqual(r, ['limes', 'miles', 'slime', 'smile'])

    _, r = self.anagrams2.get_anagrams("smiled")
    self.assertEqual(r, ['misled', 'slimed', 'smiled'])

    _, r = self.anagrams2.get_anagrams("smiles")
    self.assertEqual(r, ['smiles'])

    _, r = self.anagrams2.get_anagrams("smiling")
    self.assertEqual(r, ['smiling'])

    _, r = self.anagrams2.get_anagrams("smilingly")
    self.assertEqual(r, ['smilingly'])

    _, r = self.anagrams2.get_anagrams("smirk")
    self.assertEqual(r, ['smirk'])

    _, r = self.anagrams2.get_anagrams("smite")
    self.assertEqual(r, ['emits', 'items', 'smite', 'times'])

    _, r = self.anagrams2.get_anagrams("smith")
    self.assertEqual(r, ['smith'])

    _, r = self.anagrams2.get_anagrams("smithereens")
    self.assertEqual(r, ['smithereens'])

    _, r = self.anagrams2.get_anagrams("smithfield")
    self.assertEqual(r, ['smithfield'])

    _, r = self.anagrams2.get_anagrams("smiths")
    self.assertEqual(r, ['smiths'])

    _, r = self.anagrams2.get_anagrams("smithson")
    self.assertEqual(r, ['smithson'])

    _, r = self.anagrams2.get_anagrams("smithsonian")
    self.assertEqual(r, ['smithsonian'])

    _, r = self.anagrams2.get_anagrams("smithtown")
    self.assertEqual(r, ['smithtown'])

    _, r = self.anagrams2.get_anagrams("smithy")
    self.assertEqual(r, ['smithy'])

    _, r = self.anagrams2.get_anagrams("smitten")
    self.assertEqual(r, ['mittens', 'smitten'])

    _, r = self.anagrams2.get_anagrams("smock")
    self.assertEqual(r, ['mocks', 'smock'])

    _, r = self.anagrams2.get_anagrams("smocking")
    self.assertEqual(r, ['smocking'])

    _, r = self.anagrams2.get_anagrams("smocks")
    self.assertEqual(r, ['smocks'])

    _, r = self.anagrams2.get_anagrams("smog")
    self.assertEqual(r, ['smog'])

    _, r = self.anagrams2.get_anagrams("smokable")
    self.assertEqual(r, ['smokable'])

    _, r = self.anagrams2.get_anagrams("smoke")
    self.assertEqual(r, ['smoke'])

    _, r = self.anagrams2.get_anagrams("smoked")
    self.assertEqual(r, ['smoked'])

    _, r = self.anagrams2.get_anagrams("smoker")
    self.assertEqual(r, ['smoker'])

    _, r = self.anagrams2.get_anagrams("smokers")
    self.assertEqual(r, ['smokers'])

    _, r = self.anagrams2.get_anagrams("smokes")
    self.assertEqual(r, ['smokes'])

    _, r = self.anagrams2.get_anagrams("smokescreen")
    self.assertEqual(r, ['smokescreen'])

    _, r = self.anagrams2.get_anagrams("smokestack")
    self.assertEqual(r, ['smokestack'])

    _, r = self.anagrams2.get_anagrams("smokies")
    self.assertEqual(r, ['eskimos', 'smokies'])

    _, r = self.anagrams2.get_anagrams("smoking")
    self.assertEqual(r, ['smoking'])

    _, r = self.anagrams2.get_anagrams("smoky")
    self.assertEqual(r, ['smoky'])

    _, r = self.anagrams2.get_anagrams("smolder")
    self.assertEqual(r, ['smolder'])

    _, r = self.anagrams2.get_anagrams("smoldered")
    self.assertEqual(r, ['smoldered'])

    _, r = self.anagrams2.get_anagrams("smoldering")
    self.assertEqual(r, ['smoldering'])

    _, r = self.anagrams2.get_anagrams("smolders")
    self.assertEqual(r, ['smolders'])

    _, r = self.anagrams2.get_anagrams("smooch")
    self.assertEqual(r, ['smooch'])

    _, r = self.anagrams2.get_anagrams("smooth")
    self.assertEqual(r, ['smooth'])

    _, r = self.anagrams2.get_anagrams("smoothbore")
    self.assertEqual(r, ['smoothbore'])

    _, r = self.anagrams2.get_anagrams("smoothed")
    self.assertEqual(r, ['smoothed'])

    _, r = self.anagrams2.get_anagrams("smoother")
    self.assertEqual(r, ['smoother'])

    _, r = self.anagrams2.get_anagrams("smoothes")
    self.assertEqual(r, ['smoothes'])

    _, r = self.anagrams2.get_anagrams("smoothest")
    self.assertEqual(r, ['smoothest'])

    _, r = self.anagrams2.get_anagrams("smoothing")
    self.assertEqual(r, ['smoothing'])

    _, r = self.anagrams2.get_anagrams("smoothly")
    self.assertEqual(r, ['smoothly'])

    _, r = self.anagrams2.get_anagrams("smoothness")
    self.assertEqual(r, ['smoothness'])

    _, r = self.anagrams2.get_anagrams("smote")
    self.assertEqual(r, ['smote'])

    _, r = self.anagrams2.get_anagrams("smother")
    self.assertEqual(r, ['mothers', 'smother'])

    _, r = self.anagrams2.get_anagrams("smothered")
    self.assertEqual(r, ['smothered'])

    _, r = self.anagrams2.get_anagrams("smothering")
    self.assertEqual(r, ['smothering'])

    _, r = self.anagrams2.get_anagrams("smothers")
    self.assertEqual(r, ['smothers'])

    _, r = self.anagrams2.get_anagrams("smucker")
    self.assertEqual(r, ['smucker'])

    _, r = self.anagrams2.get_anagrams("smudge")
    self.assertEqual(r, ['smudge'])

    _, r = self.anagrams2.get_anagrams("smug")
    self.assertEqual(r, ['gums', 'mugs', 'smug'])

    _, r = self.anagrams2.get_anagrams("smuggle")
    self.assertEqual(r, ['smuggle'])

    _, r = self.anagrams2.get_anagrams("smuggled")
    self.assertEqual(r, ['smuggled'])

    _, r = self.anagrams2.get_anagrams("smuggler")
    self.assertEqual(r, ['smuggler'])

    _, r = self.anagrams2.get_anagrams("smugglers")
    self.assertEqual(r, ['smugglers'])

    _, r = self.anagrams2.get_anagrams("smuggles")
    self.assertEqual(r, ['smuggles'])

    _, r = self.anagrams2.get_anagrams("smuggling")
    self.assertEqual(r, ['smuggling'])

    _, r = self.anagrams2.get_anagrams("smut")
    self.assertEqual(r, ['must', 'smut'])

    _, r = self.anagrams2.get_anagrams("smutty")
    self.assertEqual(r, ['smutty'])

    _, r = self.anagrams2.get_anagrams("smyrna")
    self.assertEqual(r, ['smyrna'])

    _, r = self.anagrams2.get_anagrams("smythe")
    self.assertEqual(r, ['smythe'])

    _, r = self.anagrams2.get_anagrams("snack")
    self.assertEqual(r, ['snack'])

    _, r = self.anagrams2.get_anagrams("snafu")
    self.assertEqual(r, ['snafu'])

    _, r = self.anagrams2.get_anagrams("snag")
    self.assertEqual(r, ['nags', 'sang', 'snag'])

    _, r = self.anagrams2.get_anagrams("snail")
    self.assertEqual(r, ['nails', 'slain', 'snail'])

    _, r = self.anagrams2.get_anagrams("snails")
    self.assertEqual(r, ['snails'])

    _, r = self.anagrams2.get_anagrams("snake")
    self.assertEqual(r, ['snake', 'sneak'])

    _, r = self.anagrams2.get_anagrams("snaked")
    self.assertEqual(r, ['kneads', 'snaked'])

    _, r = self.anagrams2.get_anagrams("snakelike")
    self.assertEqual(r, ['snakelike'])

    _, r = self.anagrams2.get_anagrams("snakes")
    self.assertEqual(r, ['snakes', 'sneaks'])

    _, r = self.anagrams2.get_anagrams("snap")
    self.assertEqual(r, ['naps', 'pans', 'snap', 'span'])

    _, r = self.anagrams2.get_anagrams("snapdragon")
    self.assertEqual(r, ['snapdragon'])

    _, r = self.anagrams2.get_anagrams("snapped")
    self.assertEqual(r, ['appends', 'snapped'])

    _, r = self.anagrams2.get_anagrams("snapper")
    self.assertEqual(r, ['snapper'])

    _, r = self.anagrams2.get_anagrams("snappers")
    self.assertEqual(r, ['snappers'])

    _, r = self.anagrams2.get_anagrams("snappily")
    self.assertEqual(r, ['snappily'])

    _, r = self.anagrams2.get_anagrams("snapping")
    self.assertEqual(r, ['snapping'])

    _, r = self.anagrams2.get_anagrams("snappy")
    self.assertEqual(r, ['snappy'])

    _, r = self.anagrams2.get_anagrams("snaps")
    self.assertEqual(r, ['snaps', 'spans'])

    _, r = self.anagrams2.get_anagrams("snapshot")
    self.assertEqual(r, ['snapshot'])

    _, r = self.anagrams2.get_anagrams("snapshots")
    self.assertEqual(r, ['snapshots'])

    _, r = self.anagrams2.get_anagrams("snare")
    self.assertEqual(r, ['earns', 'nears', 'saner', 'snare'])

    _, r = self.anagrams2.get_anagrams("snared")
    self.assertEqual(r, ['anders', 'sander', 'snared'])

    _, r = self.anagrams2.get_anagrams("snares")
    self.assertEqual(r, ['snares'])

    _, r = self.anagrams2.get_anagrams("snaring")
    self.assertEqual(r, ['snaring'])

    _, r = self.anagrams2.get_anagrams("snark")
    self.assertEqual(r, ['ranks', 'snark'])

    _, r = self.anagrams2.get_anagrams("snarl")
    self.assertEqual(r, ['snarl'])

    _, r = self.anagrams2.get_anagrams("snarled")
    self.assertEqual(r, ['landers', 'slander', 'snarled'])

    _, r = self.anagrams2.get_anagrams("snarling")
    self.assertEqual(r, ['snarling'])

    _, r = self.anagrams2.get_anagrams("snatch")
    self.assertEqual(r, ['chants', 'snatch', 'stanch'])

    _, r = self.anagrams2.get_anagrams("snatched")
    self.assertEqual(r, ['snatched'])

    _, r = self.anagrams2.get_anagrams("snatches")
    self.assertEqual(r, ['snatches'])

    _, r = self.anagrams2.get_anagrams("snatching")
    self.assertEqual(r, ['snatching'])

    _, r = self.anagrams2.get_anagrams("snazzy")
    self.assertEqual(r, ['snazzy'])

    _, r = self.anagrams2.get_anagrams("snead")
    self.assertEqual(r, ['andes', 'danes', 'deans', 'sedan', 'snead'])

    _, r = self.anagrams2.get_anagrams("sneak")
    self.assertEqual(r, ['snake', 'sneak'])

    _, r = self.anagrams2.get_anagrams("sneaked")
    self.assertEqual(r, ['sneaked'])

    _, r = self.anagrams2.get_anagrams("sneaker")
    self.assertEqual(r, ['sneaker'])

    _, r = self.anagrams2.get_anagrams("sneakers")
    self.assertEqual(r, ['sneakers'])

    _, r = self.anagrams2.get_anagrams("sneakier")
    self.assertEqual(r, ['sneakier'])

    _, r = self.anagrams2.get_anagrams("sneakiest")
    self.assertEqual(r, ['sneakiest'])

    _, r = self.anagrams2.get_anagrams("sneakily")
    self.assertEqual(r, ['sneakily'])

    _, r = self.anagrams2.get_anagrams("sneakiness")
    self.assertEqual(r, ['sneakiness'])

    _, r = self.anagrams2.get_anagrams("sneaking")
    self.assertEqual(r, ['sneaking'])

    _, r = self.anagrams2.get_anagrams("sneaks")
    self.assertEqual(r, ['snakes', 'sneaks'])

    _, r = self.anagrams2.get_anagrams("sneaky")
    self.assertEqual(r, ['sneaky'])

    _, r = self.anagrams2.get_anagrams("sneed")
    self.assertEqual(r, ['dense', 'needs', 'sneed'])

    _, r = self.anagrams2.get_anagrams("sneer")
    self.assertEqual(r, ['sneer'])

    _, r = self.anagrams2.get_anagrams("sneered")
    self.assertEqual(r, ['sneered'])

    _, r = self.anagrams2.get_anagrams("sneering")
    self.assertEqual(r, ['sneering'])

    _, r = self.anagrams2.get_anagrams("sneers")
    self.assertEqual(r, ['sneers'])

    _, r = self.anagrams2.get_anagrams("sneeze")
    self.assertEqual(r, ['sneeze'])

    _, r = self.anagrams2.get_anagrams("sneezed")
    self.assertEqual(r, ['sneezed'])

    _, r = self.anagrams2.get_anagrams("sneezes")
    self.assertEqual(r, ['sneezes'])

    _, r = self.anagrams2.get_anagrams("sneezing")
    self.assertEqual(r, ['sneezing'])

    _, r = self.anagrams2.get_anagrams("snider")
    self.assertEqual(r, ['diners', 'rinsed', 'snider'])

    _, r = self.anagrams2.get_anagrams("sniff")
    self.assertEqual(r, ['sniff'])

    _, r = self.anagrams2.get_anagrams("sniffed")
    self.assertEqual(r, ['sniffed'])

    _, r = self.anagrams2.get_anagrams("sniffing")
    self.assertEqual(r, ['sniffing'])

    _, r = self.anagrams2.get_anagrams("sniffle")
    self.assertEqual(r, ['sniffle'])

    _, r = self.anagrams2.get_anagrams("sniffs")
    self.assertEqual(r, ['sniffs'])

    _, r = self.anagrams2.get_anagrams("snifter")
    self.assertEqual(r, ['snifter'])

    _, r = self.anagrams2.get_anagrams("snigger")
    self.assertEqual(r, ['snigger'])

    _, r = self.anagrams2.get_anagrams("snip")
    self.assertEqual(r, ['nips', 'pins', 'snip', 'spin'])

    _, r = self.anagrams2.get_anagrams("snipe")
    self.assertEqual(r, ['penis', 'pines', 'snipe', 'spine'])

    _, r = self.anagrams2.get_anagrams("snippet")
    self.assertEqual(r, ['snippet'])

    _, r = self.anagrams2.get_anagrams("snivel")
    self.assertEqual(r, ['snivel'])

    _, r = self.anagrams2.get_anagrams("snob")
    self.assertEqual(r, ['snob'])

    _, r = self.anagrams2.get_anagrams("snobbery")
    self.assertEqual(r, ['snobbery'])

    _, r = self.anagrams2.get_anagrams("snobbish")
    self.assertEqual(r, ['snobbish'])

    _, r = self.anagrams2.get_anagrams("snodgrass")
    self.assertEqual(r, ['snodgrass'])

    _, r = self.anagrams2.get_anagrams("snoop")
    self.assertEqual(r, ['snoop', 'spoon'])

    _, r = self.anagrams2.get_anagrams("snooped")
    self.assertEqual(r, ['snooped', 'spooned'])

    _, r = self.anagrams2.get_anagrams("snooping")
    self.assertEqual(r, ['snooping', 'spooning'])

    _, r = self.anagrams2.get_anagrams("snoops")
    self.assertEqual(r, ['snoops', 'spoons'])

    _, r = self.anagrams2.get_anagrams("snoopy")
    self.assertEqual(r, ['snoopy'])

    _, r = self.anagrams2.get_anagrams("snore")
    self.assertEqual(r, ['norse', 'rosen', 'snore'])

    _, r = self.anagrams2.get_anagrams("snored")
    self.assertEqual(r, ['drones', 'snored'])

    _, r = self.anagrams2.get_anagrams("snores")
    self.assertEqual(r, ['sensor', 'snores'])

    _, r = self.anagrams2.get_anagrams("snoring")
    self.assertEqual(r, ['snoring'])

    _, r = self.anagrams2.get_anagrams("snorkel")
    self.assertEqual(r, ['snorkel'])

    _, r = self.anagrams2.get_anagrams("snort")
    self.assertEqual(r, ['snort'])

    _, r = self.anagrams2.get_anagrams("snorted")
    self.assertEqual(r, ['rodents', 'snorted'])

    _, r = self.anagrams2.get_anagrams("snorting")
    self.assertEqual(r, ['snorting'])

    _, r = self.anagrams2.get_anagrams("snorts")
    self.assertEqual(r, ['snorts'])

    _, r = self.anagrams2.get_anagrams("snotty")
    self.assertEqual(r, ['snotty'])

    _, r = self.anagrams2.get_anagrams("snout")
    self.assertEqual(r, ['snout'])

    _, r = self.anagrams2.get_anagrams("snouts")
    self.assertEqual(r, ['snouts'])

    _, r = self.anagrams2.get_anagrams("snow")
    self.assertEqual(r, ['owns', 'snow', 'sown'])

    _, r = self.anagrams2.get_anagrams("snowball")
    self.assertEqual(r, ['snowball'])

    _, r = self.anagrams2.get_anagrams("snowbelt")
    self.assertEqual(r, ['snowbelt'])

    _, r = self.anagrams2.get_anagrams("snowed")
    self.assertEqual(r, ['endows', 'snowed'])

    _, r = self.anagrams2.get_anagrams("snowfall")
    self.assertEqual(r, ['snowfall'])

    _, r = self.anagrams2.get_anagrams("snowflake")
    self.assertEqual(r, ['snowflake'])

    _, r = self.anagrams2.get_anagrams("snowier")
    self.assertEqual(r, ['snowier'])

    _, r = self.anagrams2.get_anagrams("snowiest")
    self.assertEqual(r, ['snowiest'])

    _, r = self.anagrams2.get_anagrams("snowily")
    self.assertEqual(r, ['snowily'])

    _, r = self.anagrams2.get_anagrams("snowing")
    self.assertEqual(r, ['snowing'])

    _, r = self.anagrams2.get_anagrams("snowman")
    self.assertEqual(r, ['snowman'])

    _, r = self.anagrams2.get_anagrams("snowmen")
    self.assertEqual(r, ['snowmen'])

    _, r = self.anagrams2.get_anagrams("snows")
    self.assertEqual(r, ['snows'])

    _, r = self.anagrams2.get_anagrams("snowshoe")
    self.assertEqual(r, ['snowshoe'])

    _, r = self.anagrams2.get_anagrams("snowshoes")
    self.assertEqual(r, ['snowshoes'])

    _, r = self.anagrams2.get_anagrams("snowstorm")
    self.assertEqual(r, ['snowstorm'])

    _, r = self.anagrams2.get_anagrams("snowy")
    self.assertEqual(r, ['snowy'])

    _, r = self.anagrams2.get_anagrams("snub")
    self.assertEqual(r, ['buns', 'snub'])

    _, r = self.anagrams2.get_anagrams("snuff")
    self.assertEqual(r, ['snuff'])

    _, r = self.anagrams2.get_anagrams("snuffed")
    self.assertEqual(r, ['snuffed'])

    _, r = self.anagrams2.get_anagrams("snuffer")
    self.assertEqual(r, ['snuffer'])

    _, r = self.anagrams2.get_anagrams("snuffing")
    self.assertEqual(r, ['snuffing'])

    _, r = self.anagrams2.get_anagrams("snuffs")
    self.assertEqual(r, ['snuffs'])

    _, r = self.anagrams2.get_anagrams("snug")
    self.assertEqual(r, ['guns', 'snug', 'sung'])

    _, r = self.anagrams2.get_anagrams("snuggle")
    self.assertEqual(r, ['snuggle'])

    _, r = self.anagrams2.get_anagrams("snuggled")
    self.assertEqual(r, ['snuggled'])

    _, r = self.anagrams2.get_anagrams("snuggles")
    self.assertEqual(r, ['snuggles'])

    _, r = self.anagrams2.get_anagrams("snuggling")
    self.assertEqual(r, ['snuggling'])

    _, r = self.anagrams2.get_anagrams("snugly")
    self.assertEqual(r, ['snugly'])

    _, r = self.anagrams2.get_anagrams("snugness")
    self.assertEqual(r, ['snugness'])

    _, r = self.anagrams2.get_anagrams("snyder")
    self.assertEqual(r, ['snyder'])

    _, r = self.anagrams2.get_anagrams("so")
    self.assertEqual(r, ['so'])

    _, r = self.anagrams2.get_anagrams("soak")
    self.assertEqual(r, ['oaks', 'soak'])

    _, r = self.anagrams2.get_anagrams("soaked")
    self.assertEqual(r, ['soaked'])

    _, r = self.anagrams2.get_anagrams("soaking")
    self.assertEqual(r, ['soaking'])

    _, r = self.anagrams2.get_anagrams("soaks")
    self.assertEqual(r, ['soaks'])

    _, r = self.anagrams2.get_anagrams("soap")
    self.assertEqual(r, ['paso', 'soap'])

    _, r = self.anagrams2.get_anagrams("soaped")
    self.assertEqual(r, ['soaped'])

    _, r = self.anagrams2.get_anagrams("soaping")
    self.assertEqual(r, ['soaping'])

    _, r = self.anagrams2.get_anagrams("soaps")
    self.assertEqual(r, ['soaps'])

    _, r = self.anagrams2.get_anagrams("soapy")
    self.assertEqual(r, ['soapy'])

    _, r = self.anagrams2.get_anagrams("soar")
    self.assertEqual(r, ['oars', 'rosa', 'soar'])

    _, r = self.anagrams2.get_anagrams("soared")
    self.assertEqual(r, ['adores', 'soared'])

    _, r = self.anagrams2.get_anagrams("soaring")
    self.assertEqual(r, ['soaring'])

    _, r = self.anagrams2.get_anagrams("soars")
    self.assertEqual(r, ['soars'])

    _, r = self.anagrams2.get_anagrams("sob")
    self.assertEqual(r, ['sob'])

    _, r = self.anagrams2.get_anagrams("sobbing")
    self.assertEqual(r, ['gibbons', 'sobbing'])

    _, r = self.anagrams2.get_anagrams("sober")
    self.assertEqual(r, ['boers', 'bores', 'robes', 'sober'])

    _, r = self.anagrams2.get_anagrams("sobered")
    self.assertEqual(r, ['sobered'])

    _, r = self.anagrams2.get_anagrams("sobering")
    self.assertEqual(r, ['sobering'])

    _, r = self.anagrams2.get_anagrams("soberly")
    self.assertEqual(r, ['soberly'])

    _, r = self.anagrams2.get_anagrams("soberness")
    self.assertEqual(r, ['soberness'])

    _, r = self.anagrams2.get_anagrams("sobers")
    self.assertEqual(r, ['sobers'])

    _, r = self.anagrams2.get_anagrams("sobriety")
    self.assertEqual(r, ['sobriety'])

    _, r = self.anagrams2.get_anagrams("sobs")
    self.assertEqual(r, ['boss', 'sobs'])

    _, r = self.anagrams2.get_anagrams("soccer")
    self.assertEqual(r, ['soccer'])

    _, r = self.anagrams2.get_anagrams("sociability")
    self.assertEqual(r, ['sociability'])

    _, r = self.anagrams2.get_anagrams("sociable")
    self.assertEqual(r, ['sociable'])

    _, r = self.anagrams2.get_anagrams("sociably")
    self.assertEqual(r, ['sociably'])

    _, r = self.anagrams2.get_anagrams("social")
    self.assertEqual(r, ['social'])

    _, r = self.anagrams2.get_anagrams("socialism")
    self.assertEqual(r, ['socialism'])

    _, r = self.anagrams2.get_anagrams("socialist")
    self.assertEqual(r, ['socialist'])

    _, r = self.anagrams2.get_anagrams("socialists")
    self.assertEqual(r, ['socialists'])

    _, r = self.anagrams2.get_anagrams("socialize")
    self.assertEqual(r, ['socialize'])

    _, r = self.anagrams2.get_anagrams("socialized")
    self.assertEqual(r, ['socialized'])

    _, r = self.anagrams2.get_anagrams("socializes")
    self.assertEqual(r, ['socializes'])

    _, r = self.anagrams2.get_anagrams("socializing")
    self.assertEqual(r, ['socializing'])

    _, r = self.anagrams2.get_anagrams("socially")
    self.assertEqual(r, ['socially'])

    _, r = self.anagrams2.get_anagrams("societal")
    self.assertEqual(r, ['societal'])

    _, r = self.anagrams2.get_anagrams("societies")
    self.assertEqual(r, ['societies'])

    _, r = self.anagrams2.get_anagrams("society")
    self.assertEqual(r, ['society'])

    _, r = self.anagrams2.get_anagrams("socioeconomic")
    self.assertEqual(r, ['socioeconomic'])

    _, r = self.anagrams2.get_anagrams("sociological")
    self.assertEqual(r, ['sociological'])

    _, r = self.anagrams2.get_anagrams("sociologically")
    self.assertEqual(r, ['sociologically'])

    _, r = self.anagrams2.get_anagrams("sociologist")
    self.assertEqual(r, ['sociologist'])

    _, r = self.anagrams2.get_anagrams("sociologists")
    self.assertEqual(r, ['sociologists'])

    _, r = self.anagrams2.get_anagrams("sociology")
    self.assertEqual(r, ['sociology'])

    _, r = self.anagrams2.get_anagrams("sock")
    self.assertEqual(r, ['sock'])

    _, r = self.anagrams2.get_anagrams("socked")
    self.assertEqual(r, ['socked'])

    _, r = self.anagrams2.get_anagrams("socket")
    self.assertEqual(r, ['socket'])

    _, r = self.anagrams2.get_anagrams("sockets")
    self.assertEqual(r, ['sockets'])

    _, r = self.anagrams2.get_anagrams("socking")
    self.assertEqual(r, ['socking'])

    _, r = self.anagrams2.get_anagrams("socks")
    self.assertEqual(r, ['socks'])

    _, r = self.anagrams2.get_anagrams("socrates")
    self.assertEqual(r, ['coarsest', 'coasters', 'socrates'])

    _, r = self.anagrams2.get_anagrams("socratic")
    self.assertEqual(r, ['socratic'])

    _, r = self.anagrams2.get_anagrams("sod")
    self.assertEqual(r, ['sod'])

    _, r = self.anagrams2.get_anagrams("soda")
    self.assertEqual(r, ['soda'])

    _, r = self.anagrams2.get_anagrams("soddy")
    self.assertEqual(r, ['soddy'])

    _, r = self.anagrams2.get_anagrams("sodium")
    self.assertEqual(r, ['sodium'])

    _, r = self.anagrams2.get_anagrams("sodomy")
    self.assertEqual(r, ['sodomy'])

    _, r = self.anagrams2.get_anagrams("sods")
    self.assertEqual(r, ['sods'])

    _, r = self.anagrams2.get_anagrams("sofa")
    self.assertEqual(r, ['sofa'])

    _, r = self.anagrams2.get_anagrams("sofas")
    self.assertEqual(r, ['sofas'])

    _, r = self.anagrams2.get_anagrams("sofia")
    self.assertEqual(r, ['sofia'])

    _, r = self.anagrams2.get_anagrams("soft")
    self.assertEqual(r, ['soft'])

    _, r = self.anagrams2.get_anagrams("softball")
    self.assertEqual(r, ['softball'])

    _, r = self.anagrams2.get_anagrams("soften")
    self.assertEqual(r, ['soften'])

    _, r = self.anagrams2.get_anagrams("softened")
    self.assertEqual(r, ['softened'])

    _, r = self.anagrams2.get_anagrams("softening")
    self.assertEqual(r, ['softening'])

    _, r = self.anagrams2.get_anagrams("softens")
    self.assertEqual(r, ['softens'])

    _, r = self.anagrams2.get_anagrams("softer")
    self.assertEqual(r, ['forest', 'foster', 'softer'])

    _, r = self.anagrams2.get_anagrams("softest")
    self.assertEqual(r, ['softest'])

    _, r = self.anagrams2.get_anagrams("softly")
    self.assertEqual(r, ['softly'])

    _, r = self.anagrams2.get_anagrams("softness")
    self.assertEqual(r, ['softness'])

    _, r = self.anagrams2.get_anagrams("software")
    self.assertEqual(r, ['software'])

    _, r = self.anagrams2.get_anagrams("softwares")
    self.assertEqual(r, ['softwares'])

    _, r = self.anagrams2.get_anagrams("soggy")
    self.assertEqual(r, ['soggy'])

    _, r = self.anagrams2.get_anagrams("soil")
    self.assertEqual(r, ['lois', 'oils', 'silo', 'soil'])

    _, r = self.anagrams2.get_anagrams("soiled")
    self.assertEqual(r, ['isolde', 'soiled'])

    _, r = self.anagrams2.get_anagrams("soiling")
    self.assertEqual(r, ['soiling'])

    _, r = self.anagrams2.get_anagrams("soils")
    self.assertEqual(r, ['soils'])

    _, r = self.anagrams2.get_anagrams("soiree")
    self.assertEqual(r, ['soiree'])

    _, r = self.anagrams2.get_anagrams("sojourn")
    self.assertEqual(r, ['sojourn'])

    _, r = self.anagrams2.get_anagrams("sojourner")
    self.assertEqual(r, ['sojourner'])

    _, r = self.anagrams2.get_anagrams("sojourners")
    self.assertEqual(r, ['sojourners'])

    _, r = self.anagrams2.get_anagrams("sol")
    self.assertEqual(r, ['los', 'sol'])

    _, r = self.anagrams2.get_anagrams("solace")
    self.assertEqual(r, ['solace'])

    _, r = self.anagrams2.get_anagrams("solaced")
    self.assertEqual(r, ['solaced'])

    _, r = self.anagrams2.get_anagrams("solar")
    self.assertEqual(r, ['solar'])

    _, r = self.anagrams2.get_anagrams("sold")
    self.assertEqual(r, ['sold'])

    _, r = self.anagrams2.get_anagrams("solder")
    self.assertEqual(r, ['solder'])

    _, r = self.anagrams2.get_anagrams("soldered")
    self.assertEqual(r, ['soldered'])

    _, r = self.anagrams2.get_anagrams("soldier")
    self.assertEqual(r, ['soldier'])

    _, r = self.anagrams2.get_anagrams("soldiering")
    self.assertEqual(r, ['soldiering'])

    _, r = self.anagrams2.get_anagrams("soldierly")
    self.assertEqual(r, ['soldierly'])

    _, r = self.anagrams2.get_anagrams("soldiers")
    self.assertEqual(r, ['soldiers'])

    _, r = self.anagrams2.get_anagrams("sole")
    self.assertEqual(r, ['lose', 'sole'])

    _, r = self.anagrams2.get_anagrams("solely")
    self.assertEqual(r, ['solely'])

    _, r = self.anagrams2.get_anagrams("solemn")
    self.assertEqual(r, ['lemons', 'melons', 'solemn'])

    _, r = self.anagrams2.get_anagrams("solemnity")
    self.assertEqual(r, ['solemnity'])

    _, r = self.anagrams2.get_anagrams("solemnly")
    self.assertEqual(r, ['solemnly'])

    _, r = self.anagrams2.get_anagrams("solemnness")
    self.assertEqual(r, ['solemnness'])

    _, r = self.anagrams2.get_anagrams("solenoid")
    self.assertEqual(r, ['solenoid'])

    _, r = self.anagrams2.get_anagrams("soles")
    self.assertEqual(r, ['loses', 'soles'])

    _, r = self.anagrams2.get_anagrams("solicit")
    self.assertEqual(r, ['solicit'])

    _, r = self.anagrams2.get_anagrams("solicitation")
    self.assertEqual(r, ['solicitation'])

    _, r = self.anagrams2.get_anagrams("solicited")
    self.assertEqual(r, ['solicited'])

    _, r = self.anagrams2.get_anagrams("soliciting")
    self.assertEqual(r, ['soliciting'])

    _, r = self.anagrams2.get_anagrams("solicitor")
    self.assertEqual(r, ['solicitor'])

    _, r = self.anagrams2.get_anagrams("solicitous")
    self.assertEqual(r, ['solicitous'])

    _, r = self.anagrams2.get_anagrams("solicits")
    self.assertEqual(r, ['solicits'])

    _, r = self.anagrams2.get_anagrams("solicitude")
    self.assertEqual(r, ['solicitude'])

    _, r = self.anagrams2.get_anagrams("solid")
    self.assertEqual(r, ['idols', 'solid'])

    _, r = self.anagrams2.get_anagrams("solidarity")
    self.assertEqual(r, ['solidarity'])

    _, r = self.anagrams2.get_anagrams("solidification")
    self.assertEqual(r, ['solidification'])

    _, r = self.anagrams2.get_anagrams("solidified")
    self.assertEqual(r, ['solidified'])

    _, r = self.anagrams2.get_anagrams("solidifies")
    self.assertEqual(r, ['solidifies'])

    _, r = self.anagrams2.get_anagrams("solidify")
    self.assertEqual(r, ['solidify'])

    _, r = self.anagrams2.get_anagrams("solidifying")
    self.assertEqual(r, ['solidifying'])

    _, r = self.anagrams2.get_anagrams("solidity")
    self.assertEqual(r, ['solidity'])

    _, r = self.anagrams2.get_anagrams("solidly")
    self.assertEqual(r, ['solidly'])

    _, r = self.anagrams2.get_anagrams("solidness")
    self.assertEqual(r, ['solidness'])

    _, r = self.anagrams2.get_anagrams("solids")
    self.assertEqual(r, ['solids'])

    _, r = self.anagrams2.get_anagrams("soliloquy")
    self.assertEqual(r, ['soliloquy'])

    _, r = self.anagrams2.get_anagrams("solitaire")
    self.assertEqual(r, ['solitaire'])

    _, r = self.anagrams2.get_anagrams("solitary")
    self.assertEqual(r, ['royalist', 'solitary'])

    _, r = self.anagrams2.get_anagrams("solitude")
    self.assertEqual(r, ['solitude'])

    _, r = self.anagrams2.get_anagrams("solitudes")
    self.assertEqual(r, ['solitudes'])

    _, r = self.anagrams2.get_anagrams("solly")
    self.assertEqual(r, ['solly'])

    _, r = self.anagrams2.get_anagrams("solo")
    self.assertEqual(r, ['oslo', 'solo'])

    _, r = self.anagrams2.get_anagrams("solomon")
    self.assertEqual(r, ['solomon'])

    _, r = self.anagrams2.get_anagrams("solon")
    self.assertEqual(r, ['olson', 'solon'])

    _, r = self.anagrams2.get_anagrams("solos")
    self.assertEqual(r, ['solos'])

    _, r = self.anagrams2.get_anagrams("soloviev")
    self.assertEqual(r, ['soloviev'])

    _, r = self.anagrams2.get_anagrams("solstice")
    self.assertEqual(r, ['solstice'])

    _, r = self.anagrams2.get_anagrams("solubility")
    self.assertEqual(r, ['solubility'])

    _, r = self.anagrams2.get_anagrams("soluble")
    self.assertEqual(r, ['soluble'])

    _, r = self.anagrams2.get_anagrams("solution")
    self.assertEqual(r, ['solution'])

    _, r = self.anagrams2.get_anagrams("solutions")
    self.assertEqual(r, ['solutions'])

    _, r = self.anagrams2.get_anagrams("solvable")
    self.assertEqual(r, ['solvable'])

    _, r = self.anagrams2.get_anagrams("solve")
    self.assertEqual(r, ['loves', 'solve'])

    _, r = self.anagrams2.get_anagrams("solved")
    self.assertEqual(r, ['solved'])

    _, r = self.anagrams2.get_anagrams("solvent")
    self.assertEqual(r, ['solvent'])

    _, r = self.anagrams2.get_anagrams("solvents")
    self.assertEqual(r, ['solvents'])

    _, r = self.anagrams2.get_anagrams("solver")
    self.assertEqual(r, ['lovers', 'solver'])

    _, r = self.anagrams2.get_anagrams("solvers")
    self.assertEqual(r, ['solvers'])

    _, r = self.anagrams2.get_anagrams("solves")
    self.assertEqual(r, ['solves'])

    _, r = self.anagrams2.get_anagrams("solving")
    self.assertEqual(r, ['solving'])

    _, r = self.anagrams2.get_anagrams("somali")
    self.assertEqual(r, ['somali'])

    _, r = self.anagrams2.get_anagrams("somalia")
    self.assertEqual(r, ['somalia'])

    _, r = self.anagrams2.get_anagrams("somalis")
    self.assertEqual(r, ['somalis'])

    _, r = self.anagrams2.get_anagrams("somatic")
    self.assertEqual(r, ['atomics', 'somatic'])

    _, r = self.anagrams2.get_anagrams("somber")
    self.assertEqual(r, ['somber'])

    _, r = self.anagrams2.get_anagrams("somberly")
    self.assertEqual(r, ['somberly'])

    _, r = self.anagrams2.get_anagrams("some")
    self.assertEqual(r, ['some'])

    _, r = self.anagrams2.get_anagrams("somebody")
    self.assertEqual(r, ['somebody'])

    _, r = self.anagrams2.get_anagrams("someday")
    self.assertEqual(r, ['someday'])

    _, r = self.anagrams2.get_anagrams("somehow")
    self.assertEqual(r, ['somehow'])

    _, r = self.anagrams2.get_anagrams("someone")
    self.assertEqual(r, ['someone'])

    _, r = self.anagrams2.get_anagrams("someplace")
    self.assertEqual(r, ['someplace'])

    _, r = self.anagrams2.get_anagrams("somers")
    self.assertEqual(r, ['somers'])

    _, r = self.anagrams2.get_anagrams("somersault")
    self.assertEqual(r, ['somersault'])

    _, r = self.anagrams2.get_anagrams("somerset")
    self.assertEqual(r, ['somerset'])

    _, r = self.anagrams2.get_anagrams("somerville")
    self.assertEqual(r, ['somerville'])

    _, r = self.anagrams2.get_anagrams("something")
    self.assertEqual(r, ['something'])

    _, r = self.anagrams2.get_anagrams("sometime")
    self.assertEqual(r, ['sometime'])

    _, r = self.anagrams2.get_anagrams("sometimes")
    self.assertEqual(r, ['sometimes'])

    _, r = self.anagrams2.get_anagrams("somewhat")
    self.assertEqual(r, ['somewhat'])

    _, r = self.anagrams2.get_anagrams("somewhere")
    self.assertEqual(r, ['somewhere'])

    _, r = self.anagrams2.get_anagrams("sommelier")
    self.assertEqual(r, ['sommelier'])

    _, r = self.anagrams2.get_anagrams("sommerfeld")
    self.assertEqual(r, ['sommerfeld'])

    _, r = self.anagrams2.get_anagrams("somnolent")
    self.assertEqual(r, ['somnolent'])

    _, r = self.anagrams2.get_anagrams("son")
    self.assertEqual(r, ['son'])

    _, r = self.anagrams2.get_anagrams("sonar")
    self.assertEqual(r, ['arson', 'sonar'])

    _, r = self.anagrams2.get_anagrams("sonata")
    self.assertEqual(r, ['sonata'])

    _, r = self.anagrams2.get_anagrams("sonenberg")
    self.assertEqual(r, ['sonenberg'])

    _, r = self.anagrams2.get_anagrams("song")
    self.assertEqual(r, ['song'])

    _, r = self.anagrams2.get_anagrams("songbook")
    self.assertEqual(r, ['songbook'])

    _, r = self.anagrams2.get_anagrams("songs")
    self.assertEqual(r, ['songs'])

    _, r = self.anagrams2.get_anagrams("sonic")
    self.assertEqual(r, ['coins', 'icons', 'sonic'])

    _, r = self.anagrams2.get_anagrams("sonnet")
    self.assertEqual(r, ['sonnet'])

    _, r = self.anagrams2.get_anagrams("sonnets")
    self.assertEqual(r, ['sonnets'])

    _, r = self.anagrams2.get_anagrams("sonny")
    self.assertEqual(r, ['sonny'])

    _, r = self.anagrams2.get_anagrams("sonoma")
    self.assertEqual(r, ['sonoma'])

    _, r = self.anagrams2.get_anagrams("sonora")
    self.assertEqual(r, ['sonora'])

    _, r = self.anagrams2.get_anagrams("sons")
    self.assertEqual(r, ['sons'])

    _, r = self.anagrams2.get_anagrams("sony")
    self.assertEqual(r, ['sony'])

    _, r = self.anagrams2.get_anagrams("soon")
    self.assertEqual(r, ['soon'])

    _, r = self.anagrams2.get_anagrams("sooner")
    self.assertEqual(r, ['sooner'])

    _, r = self.anagrams2.get_anagrams("soonest")
    self.assertEqual(r, ['soonest'])

    _, r = self.anagrams2.get_anagrams("soot")
    self.assertEqual(r, ['soot'])

    _, r = self.anagrams2.get_anagrams("sooth")
    self.assertEqual(r, ['hoots', 'shoot', 'sooth'])

    _, r = self.anagrams2.get_anagrams("soothe")
    self.assertEqual(r, ['soothe'])

    _, r = self.anagrams2.get_anagrams("soothed")
    self.assertEqual(r, ['soothed'])

    _, r = self.anagrams2.get_anagrams("soother")
    self.assertEqual(r, ['shooter', 'soother'])

    _, r = self.anagrams2.get_anagrams("soothes")
    self.assertEqual(r, ['soothes'])

    _, r = self.anagrams2.get_anagrams("soothing")
    self.assertEqual(r, ['shooting', 'soothing'])

    _, r = self.anagrams2.get_anagrams("soothsayer")
    self.assertEqual(r, ['soothsayer'])

    _, r = self.anagrams2.get_anagrams("sophia")
    self.assertEqual(r, ['sophia'])

    _, r = self.anagrams2.get_anagrams("sophias")
    self.assertEqual(r, ['sophias'])

    _, r = self.anagrams2.get_anagrams("sophie")
    self.assertEqual(r, ['sophie'])

    _, r = self.anagrams2.get_anagrams("sophisticated")
    self.assertEqual(r, ['sophisticated'])

    _, r = self.anagrams2.get_anagrams("sophistication")
    self.assertEqual(r, ['sophistication'])

    _, r = self.anagrams2.get_anagrams("sophistry")
    self.assertEqual(r, ['sophistry'])

    _, r = self.anagrams2.get_anagrams("sophoclean")
    self.assertEqual(r, ['sophoclean'])

    _, r = self.anagrams2.get_anagrams("sophocles")
    self.assertEqual(r, ['sophocles'])

    _, r = self.anagrams2.get_anagrams("sophomore")
    self.assertEqual(r, ['sophomore'])

    _, r = self.anagrams2.get_anagrams("sophomores")
    self.assertEqual(r, ['sophomores'])

    _, r = self.anagrams2.get_anagrams("soprano")
    self.assertEqual(r, ['soprano'])

    _, r = self.anagrams2.get_anagrams("sorcerer")
    self.assertEqual(r, ['sorcerer'])

    _, r = self.anagrams2.get_anagrams("sorcerers")
    self.assertEqual(r, ['sorcerers'])

    _, r = self.anagrams2.get_anagrams("sorcery")
    self.assertEqual(r, ['sorcery'])

    _, r = self.anagrams2.get_anagrams("sordid")
    self.assertEqual(r, ['sordid'])

    _, r = self.anagrams2.get_anagrams("sordidly")
    self.assertEqual(r, ['sordidly'])

    _, r = self.anagrams2.get_anagrams("sordidness")
    self.assertEqual(r, ['sordidness'])

    _, r = self.anagrams2.get_anagrams("sore")
    self.assertEqual(r, ['eros', 'ores', 'rose', 'sore'])

    _, r = self.anagrams2.get_anagrams("sorely")
    self.assertEqual(r, ['sorely'])

    _, r = self.anagrams2.get_anagrams("soreness")
    self.assertEqual(r, ['soreness'])

    _, r = self.anagrams2.get_anagrams("sorensen")
    self.assertEqual(r, ['sorensen'])

    _, r = self.anagrams2.get_anagrams("sorenson")
    self.assertEqual(r, ['sorenson'])

    _, r = self.anagrams2.get_anagrams("sorer")
    self.assertEqual(r, ['sorer'])

    _, r = self.anagrams2.get_anagrams("sores")
    self.assertEqual(r, ['roses', 'sores'])

    _, r = self.anagrams2.get_anagrams("sorest")
    self.assertEqual(r, ['sorest', 'stores'])

    _, r = self.anagrams2.get_anagrams("sorghum")
    self.assertEqual(r, ['sorghum'])

    _, r = self.anagrams2.get_anagrams("sorority")
    self.assertEqual(r, ['sorority'])

    _, r = self.anagrams2.get_anagrams("sorrel")
    self.assertEqual(r, ['sorrel'])

    _, r = self.anagrams2.get_anagrams("sorrentine")
    self.assertEqual(r, ['sorrentine'])

    _, r = self.anagrams2.get_anagrams("sorrier")
    self.assertEqual(r, ['sorrier'])

    _, r = self.anagrams2.get_anagrams("sorriest")
    self.assertEqual(r, ['resistor', 'sorriest'])

    _, r = self.anagrams2.get_anagrams("sorrow")
    self.assertEqual(r, ['sorrow'])

    _, r = self.anagrams2.get_anagrams("sorrowful")
    self.assertEqual(r, ['sorrowful'])

    _, r = self.anagrams2.get_anagrams("sorrowfully")
    self.assertEqual(r, ['sorrowfully'])

    _, r = self.anagrams2.get_anagrams("sorrows")
    self.assertEqual(r, ['sorrows'])

    _, r = self.anagrams2.get_anagrams("sorry")
    self.assertEqual(r, ['sorry'])

    _, r = self.anagrams2.get_anagrams("sort")
    self.assertEqual(r, ['rots', 'sort'])

    _, r = self.anagrams2.get_anagrams("sorted")
    self.assertEqual(r, ['dorset', 'sorted', 'stored', 'strode'])

    _, r = self.anagrams2.get_anagrams("sorter")
    self.assertEqual(r, ['resort', 'roster', 'sorter'])

    _, r = self.anagrams2.get_anagrams("sorters")
    self.assertEqual(r, ['resorts', 'sorters'])

    _, r = self.anagrams2.get_anagrams("sortie")
    self.assertEqual(r, ['sortie', 'tories'])

    _, r = self.anagrams2.get_anagrams("sorting")
    self.assertEqual(r, ['sorting', 'storing'])

    _, r = self.anagrams2.get_anagrams("sorts")
    self.assertEqual(r, ['sorts'])

    _, r = self.anagrams2.get_anagrams("sought")
    self.assertEqual(r, ['sought'])

    _, r = self.anagrams2.get_anagrams("soul")
    self.assertEqual(r, ['soul'])

    _, r = self.anagrams2.get_anagrams("soulful")
    self.assertEqual(r, ['soulful'])

    _, r = self.anagrams2.get_anagrams("souls")
    self.assertEqual(r, ['souls'])

    _, r = self.anagrams2.get_anagrams("sound")
    self.assertEqual(r, ['sound'])

    _, r = self.anagrams2.get_anagrams("sounded")
    self.assertEqual(r, ['sounded'])

    _, r = self.anagrams2.get_anagrams("sounder")
    self.assertEqual(r, ['resound', 'sounder'])

    _, r = self.anagrams2.get_anagrams("soundest")
    self.assertEqual(r, ['soundest'])

    _, r = self.anagrams2.get_anagrams("sounding")
    self.assertEqual(r, ['sounding', 'undoings'])

    _, r = self.anagrams2.get_anagrams("soundings")
    self.assertEqual(r, ['soundings'])

    _, r = self.anagrams2.get_anagrams("soundly")
    self.assertEqual(r, ['soundly'])

    _, r = self.anagrams2.get_anagrams("soundness")
    self.assertEqual(r, ['soundness'])

    _, r = self.anagrams2.get_anagrams("soundproof")
    self.assertEqual(r, ['soundproof'])

    _, r = self.anagrams2.get_anagrams("sounds")
    self.assertEqual(r, ['sounds'])

    _, r = self.anagrams2.get_anagrams("soup")
    self.assertEqual(r, ['opus', 'soup'])

    _, r = self.anagrams2.get_anagrams("souped")
    self.assertEqual(r, ['pseudo', 'souped'])

    _, r = self.anagrams2.get_anagrams("soups")
    self.assertEqual(r, ['soups'])

    _, r = self.anagrams2.get_anagrams("sour")
    self.assertEqual(r, ['ours', 'sour'])

    _, r = self.anagrams2.get_anagrams("source")
    self.assertEqual(r, ['course', 'crusoe', 'source'])

    _, r = self.anagrams2.get_anagrams("sources")
    self.assertEqual(r, ['courses', 'sources'])

    _, r = self.anagrams2.get_anagrams("sourdough")
    self.assertEqual(r, ['sourdough'])

    _, r = self.anagrams2.get_anagrams("soured")
    self.assertEqual(r, ['roused', 'soured'])

    _, r = self.anagrams2.get_anagrams("sourer")
    self.assertEqual(r, ['sourer'])

    _, r = self.anagrams2.get_anagrams("sourest")
    self.assertEqual(r, ['sourest', 'toruses'])

    _, r = self.anagrams2.get_anagrams("souring")
    self.assertEqual(r, ['rousing', 'souring'])

    _, r = self.anagrams2.get_anagrams("sourly")
    self.assertEqual(r, ['sourly'])

    _, r = self.anagrams2.get_anagrams("sourness")
    self.assertEqual(r, ['sourness'])

    _, r = self.anagrams2.get_anagrams("sours")
    self.assertEqual(r, ['russo', 'sours'])

    _, r = self.anagrams2.get_anagrams("sousa")
    self.assertEqual(r, ['sousa'])

    _, r = self.anagrams2.get_anagrams("south")
    self.assertEqual(r, ['shout', 'south'])

    _, r = self.anagrams2.get_anagrams("southampton")
    self.assertEqual(r, ['southampton'])

    _, r = self.anagrams2.get_anagrams("southbound")
    self.assertEqual(r, ['southbound'])

    _, r = self.anagrams2.get_anagrams("southeast")
    self.assertEqual(r, ['southeast'])

    _, r = self.anagrams2.get_anagrams("southeastern")
    self.assertEqual(r, ['southeastern'])

    _, r = self.anagrams2.get_anagrams("southern")
    self.assertEqual(r, ['southern'])

    _, r = self.anagrams2.get_anagrams("southerner")
    self.assertEqual(r, ['southerner'])

    _, r = self.anagrams2.get_anagrams("southerners")
    self.assertEqual(r, ['southerners'])

    _, r = self.anagrams2.get_anagrams("southernmost")
    self.assertEqual(r, ['southernmost'])

    _, r = self.anagrams2.get_anagrams("southernwood")
    self.assertEqual(r, ['southernwood'])

    _, r = self.anagrams2.get_anagrams("southey")
    self.assertEqual(r, ['southey', 'youthes'])

    _, r = self.anagrams2.get_anagrams("southfield")
    self.assertEqual(r, ['southfield'])

    _, r = self.anagrams2.get_anagrams("southland")
    self.assertEqual(r, ['southland'])

    _, r = self.anagrams2.get_anagrams("southpaw")
    self.assertEqual(r, ['southpaw'])

    _, r = self.anagrams2.get_anagrams("southward")
    self.assertEqual(r, ['southward'])

    _, r = self.anagrams2.get_anagrams("southwest")
    self.assertEqual(r, ['southwest'])

    _, r = self.anagrams2.get_anagrams("southwestern")
    self.assertEqual(r, ['southwestern'])

    _, r = self.anagrams2.get_anagrams("souvenir")
    self.assertEqual(r, ['souvenir'])

    _, r = self.anagrams2.get_anagrams("sovereign")
    self.assertEqual(r, ['sovereign'])

    _, r = self.anagrams2.get_anagrams("sovereigns")
    self.assertEqual(r, ['sovereigns'])

    _, r = self.anagrams2.get_anagrams("sovereignty")
    self.assertEqual(r, ['sovereignty'])

    _, r = self.anagrams2.get_anagrams("soviet")
    self.assertEqual(r, ['soviet'])

    _, r = self.anagrams2.get_anagrams("soviets")
    self.assertEqual(r, ['soviets'])

    _, r = self.anagrams2.get_anagrams("sow")
    self.assertEqual(r, ['sow'])

    _, r = self.anagrams2.get_anagrams("sown")
    self.assertEqual(r, ['owns', 'snow', 'sown'])

    _, r = self.anagrams2.get_anagrams("soy")
    self.assertEqual(r, ['soy'])

    _, r = self.anagrams2.get_anagrams("soya")
    self.assertEqual(r, ['soya'])

    _, r = self.anagrams2.get_anagrams("soybean")
    self.assertEqual(r, ['soybean'])

    _, r = self.anagrams2.get_anagrams("spa")
    self.assertEqual(r, ['asp', 'sap', 'spa'])

    _, r = self.anagrams2.get_anagrams("space")
    self.assertEqual(r, ['capes', 'paces', 'space'])

    _, r = self.anagrams2.get_anagrams("spacecraft")
    self.assertEqual(r, ['spacecraft'])

    _, r = self.anagrams2.get_anagrams("spaced")
    self.assertEqual(r, ['spaced'])

    _, r = self.anagrams2.get_anagrams("spacer")
    self.assertEqual(r, ['capers', 'pacers', 'scrape', 'spacer'])

    _, r = self.anagrams2.get_anagrams("spacers")
    self.assertEqual(r, ['scrapes', 'spacers'])

    _, r = self.anagrams2.get_anagrams("spaces")
    self.assertEqual(r, ['spaces'])

    _, r = self.anagrams2.get_anagrams("spaceship")
    self.assertEqual(r, ['spaceship'])

    _, r = self.anagrams2.get_anagrams("spaceships")
    self.assertEqual(r, ['spaceships'])

    _, r = self.anagrams2.get_anagrams("spacesuit")
    self.assertEqual(r, ['spacesuit'])

    _, r = self.anagrams2.get_anagrams("spacewar")
    self.assertEqual(r, ['spacewar'])

    _, r = self.anagrams2.get_anagrams("spacing")
    self.assertEqual(r, ['spacing'])

    _, r = self.anagrams2.get_anagrams("spacings")
    self.assertEqual(r, ['spacings'])

    _, r = self.anagrams2.get_anagrams("spacious")
    self.assertEqual(r, ['spacious'])

    _, r = self.anagrams2.get_anagrams("spaded")
    self.assertEqual(r, ['spaded'])

    _, r = self.anagrams2.get_anagrams("spades")
    self.assertEqual(r, ['passed', 'spades'])

    _, r = self.anagrams2.get_anagrams("spading")
    self.assertEqual(r, ['spading'])

    _, r = self.anagrams2.get_anagrams("spafford")
    self.assertEqual(r, ['spafford'])

    _, r = self.anagrams2.get_anagrams("spahn")
    self.assertEqual(r, ['spahn'])

    _, r = self.anagrams2.get_anagrams("spain")
    self.assertEqual(r, ['pains', 'spain'])

    _, r = self.anagrams2.get_anagrams("spalding")
    self.assertEqual(r, ['spalding'])

    _, r = self.anagrams2.get_anagrams("span")
    self.assertEqual(r, ['naps', 'pans', 'snap', 'span'])

    _, r = self.anagrams2.get_anagrams("spandrel")
    self.assertEqual(r, ['spandrel'])

    _, r = self.anagrams2.get_anagrams("spaniard")
    self.assertEqual(r, ['spaniard'])

    _, r = self.anagrams2.get_anagrams("spaniardization")
    self.assertEqual(r, ['spaniardization'])

    _, r = self.anagrams2.get_anagrams("spaniardizations")
    self.assertEqual(r, ['spaniardizations'])

    _, r = self.anagrams2.get_anagrams("spaniardize")
    self.assertEqual(r, ['spaniardize'])

    _, r = self.anagrams2.get_anagrams("spaniardizes")
    self.assertEqual(r, ['spaniardizes'])

    _, r = self.anagrams2.get_anagrams("spaniards")
    self.assertEqual(r, ['spaniards'])

    _, r = self.anagrams2.get_anagrams("spaniel")
    self.assertEqual(r, ['spaniel'])

    _, r = self.anagrams2.get_anagrams("spanish")
    self.assertEqual(r, ['spanish'])

    _, r = self.anagrams2.get_anagrams("spanishize")
    self.assertEqual(r, ['spanishize'])

    _, r = self.anagrams2.get_anagrams("spanishizes")
    self.assertEqual(r, ['spanishizes'])

    _, r = self.anagrams2.get_anagrams("spank")
    self.assertEqual(r, ['spank'])

    _, r = self.anagrams2.get_anagrams("spanked")
    self.assertEqual(r, ['spanked'])

    _, r = self.anagrams2.get_anagrams("spanking")
    self.assertEqual(r, ['spanking'])

    _, r = self.anagrams2.get_anagrams("spanks")
    self.assertEqual(r, ['spanks'])

    _, r = self.anagrams2.get_anagrams("spanned")
    self.assertEqual(r, ['spanned'])

    _, r = self.anagrams2.get_anagrams("spanner")
    self.assertEqual(r, ['spanner'])

    _, r = self.anagrams2.get_anagrams("spanners")
    self.assertEqual(r, ['spanners'])

    _, r = self.anagrams2.get_anagrams("spanning")
    self.assertEqual(r, ['spanning'])

    _, r = self.anagrams2.get_anagrams("spans")
    self.assertEqual(r, ['snaps', 'spans'])

    _, r = self.anagrams2.get_anagrams("sparc")
    self.assertEqual(r, ['scrap', 'sparc'])

    _, r = self.anagrams2.get_anagrams("sparcstation")
    self.assertEqual(r, ['sparcstation'])

    _, r = self.anagrams2.get_anagrams("spare")
    self.assertEqual(r, ['pares', 'parse', 'pears', 'rapes', 'reaps', 'spare', 'spear'])

    _, r = self.anagrams2.get_anagrams("spared")
    self.assertEqual(r, ['drapes', 'parsed', 'rasped', 'spared', 'spread'])

    _, r = self.anagrams2.get_anagrams("sparely")
    self.assertEqual(r, ['parsley', 'players', 'replays', 'sparely'])

    _, r = self.anagrams2.get_anagrams("spareness")
    self.assertEqual(r, ['spareness'])

    _, r = self.anagrams2.get_anagrams("sparer")
    self.assertEqual(r, ['parser', 'sparer'])

    _, r = self.anagrams2.get_anagrams("spares")
    self.assertEqual(r, ['parses', 'passer', 'spares', 'sparse', 'spears'])

    _, r = self.anagrams2.get_anagrams("sparest")
    self.assertEqual(r, ['repasts', 'sparest'])

    _, r = self.anagrams2.get_anagrams("sparing")
    self.assertEqual(r, ['parings', 'parsing', 'rasping', 'sparing'])

    _, r = self.anagrams2.get_anagrams("sparingly")
    self.assertEqual(r, ['sparingly'])

    _, r = self.anagrams2.get_anagrams("spark")
    self.assertEqual(r, ['parks', 'spark'])

    _, r = self.anagrams2.get_anagrams("sparked")
    self.assertEqual(r, ['sparked'])

    _, r = self.anagrams2.get_anagrams("sparking")
    self.assertEqual(r, ['sparking'])

    _, r = self.anagrams2.get_anagrams("sparkle")
    self.assertEqual(r, ['sparkle'])

    _, r = self.anagrams2.get_anagrams("sparkling")
    self.assertEqual(r, ['sparkling'])

    _, r = self.anagrams2.get_anagrams("sparkman")
    self.assertEqual(r, ['sparkman'])

    _, r = self.anagrams2.get_anagrams("sparks")
    self.assertEqual(r, ['sparks'])

    _, r = self.anagrams2.get_anagrams("sparring")
    self.assertEqual(r, ['sparring'])

    _, r = self.anagrams2.get_anagrams("sparrow")
    self.assertEqual(r, ['sparrow'])

    _, r = self.anagrams2.get_anagrams("sparrows")
    self.assertEqual(r, ['sparrows'])

    _, r = self.anagrams2.get_anagrams("sparse")
    self.assertEqual(r, ['parses', 'passer', 'spares', 'sparse', 'spears'])

    _, r = self.anagrams2.get_anagrams("sparsely")
    self.assertEqual(r, ['sparsely'])

    _, r = self.anagrams2.get_anagrams("sparseness")
    self.assertEqual(r, ['sparseness'])

    _, r = self.anagrams2.get_anagrams("sparser")
    self.assertEqual(r, ['parsers', 'sparser'])

    _, r = self.anagrams2.get_anagrams("sparsest")
    self.assertEqual(r, ['sparsest', 'trespass'])

    _, r = self.anagrams2.get_anagrams("sparta")
    self.assertEqual(r, ['sparta'])

    _, r = self.anagrams2.get_anagrams("spartan")
    self.assertEqual(r, ['spartan'])

    _, r = self.anagrams2.get_anagrams("spartanize")
    self.assertEqual(r, ['spartanize'])

    _, r = self.anagrams2.get_anagrams("spartanizes")
    self.assertEqual(r, ['spartanizes'])

    _, r = self.anagrams2.get_anagrams("spasm")
    self.assertEqual(r, ['spasm'])

    _, r = self.anagrams2.get_anagrams("spastic")
    self.assertEqual(r, ['spastic'])

    _, r = self.anagrams2.get_anagrams("spat")
    self.assertEqual(r, ['past', 'pats', 'spat', 'taps'])

    _, r = self.anagrams2.get_anagrams("spate")
    self.assertEqual(r, ['paste', 'spate', 'tapes'])

    _, r = self.anagrams2.get_anagrams("spates")
    self.assertEqual(r, ['pastes', 'spates'])

    _, r = self.anagrams2.get_anagrams("spatial")
    self.assertEqual(r, ['spatial'])

    _, r = self.anagrams2.get_anagrams("spatially")
    self.assertEqual(r, ['spatially'])

    _, r = self.anagrams2.get_anagrams("spatter")
    self.assertEqual(r, ['patters', 'spatter'])

    _, r = self.anagrams2.get_anagrams("spattered")
    self.assertEqual(r, ['spattered'])

    _, r = self.anagrams2.get_anagrams("spatula")
    self.assertEqual(r, ['spatula'])

    _, r = self.anagrams2.get_anagrams("spaulding")
    self.assertEqual(r, ['spaulding'])

    _, r = self.anagrams2.get_anagrams("spawn")
    self.assertEqual(r, ['pawns', 'spawn'])

    _, r = self.anagrams2.get_anagrams("spawned")
    self.assertEqual(r, ['spawned'])

    _, r = self.anagrams2.get_anagrams("spawning")
    self.assertEqual(r, ['spawning'])

    _, r = self.anagrams2.get_anagrams("spawns")
    self.assertEqual(r, ['spawns'])

    _, r = self.anagrams2.get_anagrams("spayed")
    self.assertEqual(r, ['spayed'])

    _, r = self.anagrams2.get_anagrams("speak")
    self.assertEqual(r, ['peaks', 'speak'])

    _, r = self.anagrams2.get_anagrams("speakable")
    self.assertEqual(r, ['speakable'])

    _, r = self.anagrams2.get_anagrams("speakeasy")
    self.assertEqual(r, ['speakeasy'])

    _, r = self.anagrams2.get_anagrams("speaker")
    self.assertEqual(r, ['speaker'])

    _, r = self.anagrams2.get_anagrams("speakerphone")
    self.assertEqual(r, ['speakerphone'])

    _, r = self.anagrams2.get_anagrams("speakerphones")
    self.assertEqual(r, ['speakerphones'])

    _, r = self.anagrams2.get_anagrams("speakers")
    self.assertEqual(r, ['speakers'])

    _, r = self.anagrams2.get_anagrams("speaking")
    self.assertEqual(r, ['speaking'])

    _, r = self.anagrams2.get_anagrams("speaks")
    self.assertEqual(r, ['speaks'])

    _, r = self.anagrams2.get_anagrams("spear")
    self.assertEqual(r, ['pares', 'parse', 'pears', 'rapes', 'reaps', 'spare', 'spear'])

    _, r = self.anagrams2.get_anagrams("speared")
    self.assertEqual(r, ['speared'])

    _, r = self.anagrams2.get_anagrams("spearmint")
    self.assertEqual(r, ['spearmint'])

    _, r = self.anagrams2.get_anagrams("spears")
    self.assertEqual(r, ['parses', 'passer', 'spares', 'sparse', 'spears'])

    _, r = self.anagrams2.get_anagrams("spec")
    self.assertEqual(r, ['spec'])

    _, r = self.anagrams2.get_anagrams("special")
    self.assertEqual(r, ['special'])

    _, r = self.anagrams2.get_anagrams("specialist")
    self.assertEqual(r, ['specialist'])

    _, r = self.anagrams2.get_anagrams("specialists")
    self.assertEqual(r, ['specialists'])

    _, r = self.anagrams2.get_anagrams("specialization")
    self.assertEqual(r, ['specialization'])

    _, r = self.anagrams2.get_anagrams("specializations")
    self.assertEqual(r, ['specializations'])

    _, r = self.anagrams2.get_anagrams("specialize")
    self.assertEqual(r, ['specialize'])

    _, r = self.anagrams2.get_anagrams("specialized")
    self.assertEqual(r, ['specialized'])

    _, r = self.anagrams2.get_anagrams("specializes")
    self.assertEqual(r, ['specializes'])

    _, r = self.anagrams2.get_anagrams("specializing")
    self.assertEqual(r, ['specializing'])

    _, r = self.anagrams2.get_anagrams("specially")
    self.assertEqual(r, ['specially'])

    _, r = self.anagrams2.get_anagrams("specials")
    self.assertEqual(r, ['specials'])

    _, r = self.anagrams2.get_anagrams("specialties")
    self.assertEqual(r, ['specialties'])

    _, r = self.anagrams2.get_anagrams("specialty")
    self.assertEqual(r, ['specialty'])

    _, r = self.anagrams2.get_anagrams("specie")
    self.assertEqual(r, ['pieces', 'specie'])

    _, r = self.anagrams2.get_anagrams("species")
    self.assertEqual(r, ['species'])

    _, r = self.anagrams2.get_anagrams("specifiable")
    self.assertEqual(r, ['specifiable'])

    _, r = self.anagrams2.get_anagrams("specific")
    self.assertEqual(r, ['specific'])

    _, r = self.anagrams2.get_anagrams("specifically")
    self.assertEqual(r, ['specifically'])

    _, r = self.anagrams2.get_anagrams("specification")
    self.assertEqual(r, ['specification'])

    _, r = self.anagrams2.get_anagrams("specifications")
    self.assertEqual(r, ['specifications'])

    _, r = self.anagrams2.get_anagrams("specificity")
    self.assertEqual(r, ['specificity'])

    _, r = self.anagrams2.get_anagrams("specifics")
    self.assertEqual(r, ['specifics'])

    _, r = self.anagrams2.get_anagrams("specified")
    self.assertEqual(r, ['specified'])

    _, r = self.anagrams2.get_anagrams("specifier")
    self.assertEqual(r, ['specifier'])

    _, r = self.anagrams2.get_anagrams("specifiers")
    self.assertEqual(r, ['specifiers'])

    _, r = self.anagrams2.get_anagrams("specifies")
    self.assertEqual(r, ['specifies'])

    _, r = self.anagrams2.get_anagrams("specify")
    self.assertEqual(r, ['specify'])

    _, r = self.anagrams2.get_anagrams("specifying")
    self.assertEqual(r, ['specifying'])

    _, r = self.anagrams2.get_anagrams("specimen")
    self.assertEqual(r, ['specimen'])

    _, r = self.anagrams2.get_anagrams("specimens")
    self.assertEqual(r, ['specimens'])

    _, r = self.anagrams2.get_anagrams("specious")
    self.assertEqual(r, ['specious'])

    _, r = self.anagrams2.get_anagrams("speck")
    self.assertEqual(r, ['pecks', 'speck'])

    _, r = self.anagrams2.get_anagrams("speckle")
    self.assertEqual(r, ['speckle'])

    _, r = self.anagrams2.get_anagrams("speckled")
    self.assertEqual(r, ['speckled'])

    _, r = self.anagrams2.get_anagrams("speckles")
    self.assertEqual(r, ['speckles'])

    _, r = self.anagrams2.get_anagrams("specks")
    self.assertEqual(r, ['specks'])

    _, r = self.anagrams2.get_anagrams("spectacle")
    self.assertEqual(r, ['spectacle'])

    _, r = self.anagrams2.get_anagrams("spectacled")
    self.assertEqual(r, ['spectacled'])

    _, r = self.anagrams2.get_anagrams("spectacles")
    self.assertEqual(r, ['spectacles'])

    _, r = self.anagrams2.get_anagrams("spectacular")
    self.assertEqual(r, ['spectacular'])

    _, r = self.anagrams2.get_anagrams("spectacularly")
    self.assertEqual(r, ['spectacularly'])

    _, r = self.anagrams2.get_anagrams("spectator")
    self.assertEqual(r, ['spectator'])

    _, r = self.anagrams2.get_anagrams("spectators")
    self.assertEqual(r, ['spectators'])

    _, r = self.anagrams2.get_anagrams("specter")
    self.assertEqual(r, ['respect', 'scepter', 'specter'])

    _, r = self.anagrams2.get_anagrams("specters")
    self.assertEqual(r, ['respects', 'scepters', 'specters'])

    _, r = self.anagrams2.get_anagrams("spector")
    self.assertEqual(r, ['spector'])

    _, r = self.anagrams2.get_anagrams("spectra")
    self.assertEqual(r, ['carpets', 'spectra'])

    _, r = self.anagrams2.get_anagrams("spectral")
    self.assertEqual(r, ['spectral'])

    _, r = self.anagrams2.get_anagrams("spectrogram")
    self.assertEqual(r, ['spectrogram'])

    _, r = self.anagrams2.get_anagrams("spectrograms")
    self.assertEqual(r, ['spectrograms'])

    _, r = self.anagrams2.get_anagrams("spectrograph")
    self.assertEqual(r, ['spectrograph'])

    _, r = self.anagrams2.get_anagrams("spectrographic")
    self.assertEqual(r, ['spectrographic'])

    _, r = self.anagrams2.get_anagrams("spectrography")
    self.assertEqual(r, ['spectrography'])

    _, r = self.anagrams2.get_anagrams("spectrometer")
    self.assertEqual(r, ['spectrometer'])

    _, r = self.anagrams2.get_anagrams("spectrophotometer")
    self.assertEqual(r, ['spectrophotometer'])

    _, r = self.anagrams2.get_anagrams("spectrophotometry")
    self.assertEqual(r, ['spectrophotometry'])

    _, r = self.anagrams2.get_anagrams("spectroscope")
    self.assertEqual(r, ['spectroscope'])

    _, r = self.anagrams2.get_anagrams("spectroscopic")
    self.assertEqual(r, ['spectroscopic'])

    _, r = self.anagrams2.get_anagrams("spectroscopy")
    self.assertEqual(r, ['spectroscopy'])

    _, r = self.anagrams2.get_anagrams("spectrum")
    self.assertEqual(r, ['spectrum'])

    _, r = self.anagrams2.get_anagrams("speculate")
    self.assertEqual(r, ['speculate'])

    _, r = self.anagrams2.get_anagrams("speculated")
    self.assertEqual(r, ['speculated'])

    _, r = self.anagrams2.get_anagrams("speculates")
    self.assertEqual(r, ['speculates'])

    _, r = self.anagrams2.get_anagrams("speculating")
    self.assertEqual(r, ['speculating'])

    _, r = self.anagrams2.get_anagrams("speculation")
    self.assertEqual(r, ['speculation'])

    _, r = self.anagrams2.get_anagrams("speculations")
    self.assertEqual(r, ['speculations'])

    _, r = self.anagrams2.get_anagrams("speculative")
    self.assertEqual(r, ['speculative'])

    _, r = self.anagrams2.get_anagrams("speculator")
    self.assertEqual(r, ['speculator'])

    _, r = self.anagrams2.get_anagrams("speculators")
    self.assertEqual(r, ['speculators'])

    _, r = self.anagrams2.get_anagrams("sped")
    self.assertEqual(r, ['sped'])

    _, r = self.anagrams2.get_anagrams("speech")
    self.assertEqual(r, ['speech'])

    _, r = self.anagrams2.get_anagrams("speeches")
    self.assertEqual(r, ['speeches'])

    _, r = self.anagrams2.get_anagrams("speechless")
    self.assertEqual(r, ['speechless'])

    _, r = self.anagrams2.get_anagrams("speechlessness")
    self.assertEqual(r, ['speechlessness'])

    _, r = self.anagrams2.get_anagrams("speed")
    self.assertEqual(r, ['deeps', 'speed'])

    _, r = self.anagrams2.get_anagrams("speedboat")
    self.assertEqual(r, ['speedboat'])

    _, r = self.anagrams2.get_anagrams("speeded")
    self.assertEqual(r, ['speeded'])

    _, r = self.anagrams2.get_anagrams("speeder")
    self.assertEqual(r, ['speeder'])

    _, r = self.anagrams2.get_anagrams("speeders")
    self.assertEqual(r, ['speeders'])

    _, r = self.anagrams2.get_anagrams("speedily")
    self.assertEqual(r, ['speedily'])

    _, r = self.anagrams2.get_anagrams("speeding")
    self.assertEqual(r, ['speeding'])

    _, r = self.anagrams2.get_anagrams("speedometer")
    self.assertEqual(r, ['speedometer'])

    _, r = self.anagrams2.get_anagrams("speeds")
    self.assertEqual(r, ['speeds'])

    _, r = self.anagrams2.get_anagrams("speedup")
    self.assertEqual(r, ['speedup'])

    _, r = self.anagrams2.get_anagrams("speedups")
    self.assertEqual(r, ['speedups'])

    _, r = self.anagrams2.get_anagrams("speedy")
    self.assertEqual(r, ['speedy'])

    _, r = self.anagrams2.get_anagrams("spell")
    self.assertEqual(r, ['spell'])

    _, r = self.anagrams2.get_anagrams("spellbound")
    self.assertEqual(r, ['spellbound'])

    _, r = self.anagrams2.get_anagrams("spelled")
    self.assertEqual(r, ['spelled'])

    _, r = self.anagrams2.get_anagrams("speller")
    self.assertEqual(r, ['speller'])

    _, r = self.anagrams2.get_anagrams("spellers")
    self.assertEqual(r, ['spellers'])

    _, r = self.anagrams2.get_anagrams("spelling")
    self.assertEqual(r, ['spelling'])

    _, r = self.anagrams2.get_anagrams("spellings")
    self.assertEqual(r, ['spellings'])

    _, r = self.anagrams2.get_anagrams("spells")
    self.assertEqual(r, ['spells'])

    _, r = self.anagrams2.get_anagrams("spencer")
    self.assertEqual(r, ['spencer'])

    _, r = self.anagrams2.get_anagrams("spencerian")
    self.assertEqual(r, ['spencerian'])

    _, r = self.anagrams2.get_anagrams("spend")
    self.assertEqual(r, ['pends', 'spend'])

    _, r = self.anagrams2.get_anagrams("spender")
    self.assertEqual(r, ['spender'])

    _, r = self.anagrams2.get_anagrams("spenders")
    self.assertEqual(r, ['spenders'])

    _, r = self.anagrams2.get_anagrams("spending")
    self.assertEqual(r, ['spending'])

    _, r = self.anagrams2.get_anagrams("spends")
    self.assertEqual(r, ['spends'])

    _, r = self.anagrams2.get_anagrams("spenglerian")
    self.assertEqual(r, ['spenglerian'])

    _, r = self.anagrams2.get_anagrams("spent")
    self.assertEqual(r, ['spent'])

    _, r = self.anagrams2.get_anagrams("sperm")
    self.assertEqual(r, ['sperm'])

    _, r = self.anagrams2.get_anagrams("sperry")
    self.assertEqual(r, ['sperry'])

    _, r = self.anagrams2.get_anagrams("sphere")
    self.assertEqual(r, ['herpes', 'sphere'])

    _, r = self.anagrams2.get_anagrams("spheres")
    self.assertEqual(r, ['spheres'])

    _, r = self.anagrams2.get_anagrams("spherical")
    self.assertEqual(r, ['spherical'])

    _, r = self.anagrams2.get_anagrams("spherically")
    self.assertEqual(r, ['spherically'])

    _, r = self.anagrams2.get_anagrams("spheroid")
    self.assertEqual(r, ['spheroid'])

    _, r = self.anagrams2.get_anagrams("spheroidal")
    self.assertEqual(r, ['spheroidal'])

    _, r = self.anagrams2.get_anagrams("sphinx")
    self.assertEqual(r, ['sphinx'])

    _, r = self.anagrams2.get_anagrams("spica")
    self.assertEqual(r, ['aspic', 'picas', 'spica'])

    _, r = self.anagrams2.get_anagrams("spice")
    self.assertEqual(r, ['epics', 'spice'])

    _, r = self.anagrams2.get_anagrams("spiced")
    self.assertEqual(r, ['spiced'])

    _, r = self.anagrams2.get_anagrams("spices")
    self.assertEqual(r, ['pisces', 'spices'])

    _, r = self.anagrams2.get_anagrams("spiciness")
    self.assertEqual(r, ['spiciness'])

    _, r = self.anagrams2.get_anagrams("spicy")
    self.assertEqual(r, ['spicy'])

    _, r = self.anagrams2.get_anagrams("spider")
    self.assertEqual(r, ['prides', 'spider'])

    _, r = self.anagrams2.get_anagrams("spiders")
    self.assertEqual(r, ['spiders'])

    _, r = self.anagrams2.get_anagrams("spidery")
    self.assertEqual(r, ['spidery'])

    _, r = self.anagrams2.get_anagrams("spiegel")
    self.assertEqual(r, ['spiegel'])

    _, r = self.anagrams2.get_anagrams("spies")
    self.assertEqual(r, ['spies'])

    _, r = self.anagrams2.get_anagrams("spigot")
    self.assertEqual(r, ['spigot'])

    _, r = self.anagrams2.get_anagrams("spike")
    self.assertEqual(r, ['pikes', 'spike'])

    _, r = self.anagrams2.get_anagrams("spiked")
    self.assertEqual(r, ['spiked'])

    _, r = self.anagrams2.get_anagrams("spikes")
    self.assertEqual(r, ['spikes'])

    _, r = self.anagrams2.get_anagrams("spill")
    self.assertEqual(r, ['pills', 'spill'])

    _, r = self.anagrams2.get_anagrams("spilled")
    self.assertEqual(r, ['dispell', 'spilled'])

    _, r = self.anagrams2.get_anagrams("spiller")
    self.assertEqual(r, ['spiller'])

    _, r = self.anagrams2.get_anagrams("spilling")
    self.assertEqual(r, ['spilling'])

    _, r = self.anagrams2.get_anagrams("spills")
    self.assertEqual(r, ['spills'])

    _, r = self.anagrams2.get_anagrams("spilt")
    self.assertEqual(r, ['spilt', 'split'])

    _, r = self.anagrams2.get_anagrams("spin")
    self.assertEqual(r, ['nips', 'pins', 'snip', 'spin'])

    _, r = self.anagrams2.get_anagrams("spinach")
    self.assertEqual(r, ['spinach'])

    _, r = self.anagrams2.get_anagrams("spinal")
    self.assertEqual(r, ['plains', 'spinal'])

    _, r = self.anagrams2.get_anagrams("spinally")
    self.assertEqual(r, ['spinally'])

    _, r = self.anagrams2.get_anagrams("spindle")
    self.assertEqual(r, ['spindle'])

    _, r = self.anagrams2.get_anagrams("spindled")
    self.assertEqual(r, ['spindled', 'splendid'])

    _, r = self.anagrams2.get_anagrams("spindling")
    self.assertEqual(r, ['spindling'])

    _, r = self.anagrams2.get_anagrams("spine")
    self.assertEqual(r, ['penis', 'pines', 'snipe', 'spine'])

    _, r = self.anagrams2.get_anagrams("spinnaker")
    self.assertEqual(r, ['spinnaker'])

    _, r = self.anagrams2.get_anagrams("spinner")
    self.assertEqual(r, ['spinner'])

    _, r = self.anagrams2.get_anagrams("spinners")
    self.assertEqual(r, ['spinners'])

    _, r = self.anagrams2.get_anagrams("spinning")
    self.assertEqual(r, ['pinnings', 'spinning'])

    _, r = self.anagrams2.get_anagrams("spinoff")
    self.assertEqual(r, ['spinoff'])

    _, r = self.anagrams2.get_anagrams("spins")
    self.assertEqual(r, ['spins'])

    _, r = self.anagrams2.get_anagrams("spinster")
    self.assertEqual(r, ['spinster'])

    _, r = self.anagrams2.get_anagrams("spiny")
    self.assertEqual(r, ['spiny'])

    _, r = self.anagrams2.get_anagrams("spiral")
    self.assertEqual(r, ['aprils', 'spiral'])

    _, r = self.anagrams2.get_anagrams("spiraled")
    self.assertEqual(r, ['spiraled'])

    _, r = self.anagrams2.get_anagrams("spiraling")
    self.assertEqual(r, ['spiraling'])

    _, r = self.anagrams2.get_anagrams("spirally")
    self.assertEqual(r, ['spirally'])

    _, r = self.anagrams2.get_anagrams("spire")
    self.assertEqual(r, ['piers', 'spire'])

    _, r = self.anagrams2.get_anagrams("spires")
    self.assertEqual(r, ['spires'])

    _, r = self.anagrams2.get_anagrams("spirit")
    self.assertEqual(r, ['spirit'])

    _, r = self.anagrams2.get_anagrams("spirited")
    self.assertEqual(r, ['spirited'])

    _, r = self.anagrams2.get_anagrams("spiritedly")
    self.assertEqual(r, ['spiritedly'])

    _, r = self.anagrams2.get_anagrams("spiriting")
    self.assertEqual(r, ['spiriting'])

    _, r = self.anagrams2.get_anagrams("spirits")
    self.assertEqual(r, ['spirits'])

    _, r = self.anagrams2.get_anagrams("spiritual")
    self.assertEqual(r, ['spiritual'])

    _, r = self.anagrams2.get_anagrams("spiritually")
    self.assertEqual(r, ['spiritually'])

    _, r = self.anagrams2.get_anagrams("spirituals")
    self.assertEqual(r, ['spirituals'])

    _, r = self.anagrams2.get_anagrams("spiro")
    self.assertEqual(r, ['spiro'])

    _, r = self.anagrams2.get_anagrams("spit")
    self.assertEqual(r, ['pits', 'spit', 'tips'])

    _, r = self.anagrams2.get_anagrams("spite")
    self.assertEqual(r, ['spite'])

    _, r = self.anagrams2.get_anagrams("spited")
    self.assertEqual(r, ['spited'])

    _, r = self.anagrams2.get_anagrams("spiteful")
    self.assertEqual(r, ['spiteful'])

    _, r = self.anagrams2.get_anagrams("spitefully")
    self.assertEqual(r, ['spitefully'])

    _, r = self.anagrams2.get_anagrams("spitefulness")
    self.assertEqual(r, ['spitefulness'])

    _, r = self.anagrams2.get_anagrams("spites")
    self.assertEqual(r, ['spites'])

    _, r = self.anagrams2.get_anagrams("spitfire")
    self.assertEqual(r, ['spitfire'])

    _, r = self.anagrams2.get_anagrams("spiting")
    self.assertEqual(r, ['spiting'])

    _, r = self.anagrams2.get_anagrams("spits")
    self.assertEqual(r, ['spits'])

    _, r = self.anagrams2.get_anagrams("spitting")
    self.assertEqual(r, ['spitting'])

    _, r = self.anagrams2.get_anagrams("spittle")
    self.assertEqual(r, ['spittle'])

    _, r = self.anagrams2.get_anagrams("spitz")
    self.assertEqual(r, ['spitz'])

    _, r = self.anagrams2.get_anagrams("splash")
    self.assertEqual(r, ['splash'])

    _, r = self.anagrams2.get_anagrams("splashed")
    self.assertEqual(r, ['splashed'])

    _, r = self.anagrams2.get_anagrams("splashes")
    self.assertEqual(r, ['splashes'])

    _, r = self.anagrams2.get_anagrams("splashing")
    self.assertEqual(r, ['splashing'])

    _, r = self.anagrams2.get_anagrams("splashy")
    self.assertEqual(r, ['splashy'])

    _, r = self.anagrams2.get_anagrams("spleen")
    self.assertEqual(r, ['spleen'])

    _, r = self.anagrams2.get_anagrams("splendid")
    self.assertEqual(r, ['spindled', 'splendid'])

    _, r = self.anagrams2.get_anagrams("splendidly")
    self.assertEqual(r, ['splendidly'])

    _, r = self.anagrams2.get_anagrams("splendor")
    self.assertEqual(r, ['splendor'])

    _, r = self.anagrams2.get_anagrams("splenetic")
    self.assertEqual(r, ['splenetic'])

    _, r = self.anagrams2.get_anagrams("splice")
    self.assertEqual(r, ['splice'])

    _, r = self.anagrams2.get_anagrams("spliced")
    self.assertEqual(r, ['spliced'])

    _, r = self.anagrams2.get_anagrams("splicer")
    self.assertEqual(r, ['splicer'])

    _, r = self.anagrams2.get_anagrams("splicers")
    self.assertEqual(r, ['splicers'])

    _, r = self.anagrams2.get_anagrams("splices")
    self.assertEqual(r, ['splices'])

    _, r = self.anagrams2.get_anagrams("splicing")
    self.assertEqual(r, ['splicing'])

    _, r = self.anagrams2.get_anagrams("splicings")
    self.assertEqual(r, ['splicings'])

    _, r = self.anagrams2.get_anagrams("spline")
    self.assertEqual(r, ['spline'])

    _, r = self.anagrams2.get_anagrams("splines")
    self.assertEqual(r, ['splines'])

    _, r = self.anagrams2.get_anagrams("splint")
    self.assertEqual(r, ['splint'])

    _, r = self.anagrams2.get_anagrams("splinter")
    self.assertEqual(r, ['splinter'])

    _, r = self.anagrams2.get_anagrams("splintered")
    self.assertEqual(r, ['splintered'])

    _, r = self.anagrams2.get_anagrams("splinters")
    self.assertEqual(r, ['splinters'])

    _, r = self.anagrams2.get_anagrams("splintery")
    self.assertEqual(r, ['splintery'])

    _, r = self.anagrams2.get_anagrams("split")
    self.assertEqual(r, ['spilt', 'split'])

    _, r = self.anagrams2.get_anagrams("splits")
    self.assertEqual(r, ['splits'])

    _, r = self.anagrams2.get_anagrams("splitter")
    self.assertEqual(r, ['splitter', 'triplets'])

    _, r = self.anagrams2.get_anagrams("splitters")
    self.assertEqual(r, ['splitters'])

    _, r = self.anagrams2.get_anagrams("splitting")
    self.assertEqual(r, ['splitting'])

    _, r = self.anagrams2.get_anagrams("splurge")
    self.assertEqual(r, ['splurge'])

    _, r = self.anagrams2.get_anagrams("spoil")
    self.assertEqual(r, ['spoil'])

    _, r = self.anagrams2.get_anagrams("spoilage")
    self.assertEqual(r, ['spoilage'])

    _, r = self.anagrams2.get_anagrams("spoiled")
    self.assertEqual(r, ['despoil', 'spoiled'])

    _, r = self.anagrams2.get_anagrams("spoiler")
    self.assertEqual(r, ['spoiler'])

    _, r = self.anagrams2.get_anagrams("spoilers")
    self.assertEqual(r, ['spoilers'])

    _, r = self.anagrams2.get_anagrams("spoiling")
    self.assertEqual(r, ['spoiling'])

    _, r = self.anagrams2.get_anagrams("spoils")
    self.assertEqual(r, ['spoils'])

    _, r = self.anagrams2.get_anagrams("spokane")
    self.assertEqual(r, ['spokane'])

    _, r = self.anagrams2.get_anagrams("spoke")
    self.assertEqual(r, ['pokes', 'spoke'])

    _, r = self.anagrams2.get_anagrams("spoked")
    self.assertEqual(r, ['spoked'])

    _, r = self.anagrams2.get_anagrams("spoken")
    self.assertEqual(r, ['spoken'])

    _, r = self.anagrams2.get_anagrams("spokes")
    self.assertEqual(r, ['spokes'])

    _, r = self.anagrams2.get_anagrams("spokesman")
    self.assertEqual(r, ['spokesman'])

    _, r = self.anagrams2.get_anagrams("spokesmen")
    self.assertEqual(r, ['spokesmen'])

    _, r = self.anagrams2.get_anagrams("sponge")
    self.assertEqual(r, ['sponge'])

    _, r = self.anagrams2.get_anagrams("sponged")
    self.assertEqual(r, ['sponged'])

    _, r = self.anagrams2.get_anagrams("sponger")
    self.assertEqual(r, ['sponger'])

    _, r = self.anagrams2.get_anagrams("spongers")
    self.assertEqual(r, ['spongers'])

    _, r = self.anagrams2.get_anagrams("sponges")
    self.assertEqual(r, ['sponges'])

    _, r = self.anagrams2.get_anagrams("sponging")
    self.assertEqual(r, ['sponging'])

    _, r = self.anagrams2.get_anagrams("spongy")
    self.assertEqual(r, ['spongy'])

    _, r = self.anagrams2.get_anagrams("sponsor")
    self.assertEqual(r, ['sponsor'])

    _, r = self.anagrams2.get_anagrams("sponsored")
    self.assertEqual(r, ['sponsored'])

    _, r = self.anagrams2.get_anagrams("sponsoring")
    self.assertEqual(r, ['sponsoring'])

    _, r = self.anagrams2.get_anagrams("sponsors")
    self.assertEqual(r, ['sponsors'])

    _, r = self.anagrams2.get_anagrams("sponsorship")
    self.assertEqual(r, ['sponsorship'])

    _, r = self.anagrams2.get_anagrams("spontaneity")
    self.assertEqual(r, ['spontaneity'])

    _, r = self.anagrams2.get_anagrams("spontaneous")
    self.assertEqual(r, ['spontaneous'])

    _, r = self.anagrams2.get_anagrams("spontaneously")
    self.assertEqual(r, ['spontaneously'])

    _, r = self.anagrams2.get_anagrams("spoof")
    self.assertEqual(r, ['spoof'])

    _, r = self.anagrams2.get_anagrams("spook")
    self.assertEqual(r, ['spook'])

    _, r = self.anagrams2.get_anagrams("spooky")
    self.assertEqual(r, ['spooky'])

    _, r = self.anagrams2.get_anagrams("spool")
    self.assertEqual(r, ['loops', 'pools', 'sloop', 'spool'])

    _, r = self.anagrams2.get_anagrams("spooled")
    self.assertEqual(r, ['spooled'])

    _, r = self.anagrams2.get_anagrams("spooler")
    self.assertEqual(r, ['spooler'])

    _, r = self.anagrams2.get_anagrams("spoolers")
    self.assertEqual(r, ['spoolers'])

    _, r = self.anagrams2.get_anagrams("spooling")
    self.assertEqual(r, ['spooling'])

    _, r = self.anagrams2.get_anagrams("spools")
    self.assertEqual(r, ['spools'])

    _, r = self.anagrams2.get_anagrams("spoon")
    self.assertEqual(r, ['snoop', 'spoon'])

    _, r = self.anagrams2.get_anagrams("spooned")
    self.assertEqual(r, ['snooped', 'spooned'])

    _, r = self.anagrams2.get_anagrams("spoonful")
    self.assertEqual(r, ['spoonful'])

    _, r = self.anagrams2.get_anagrams("spooning")
    self.assertEqual(r, ['snooping', 'spooning'])

    _, r = self.anagrams2.get_anagrams("spoons")
    self.assertEqual(r, ['snoops', 'spoons'])

    _, r = self.anagrams2.get_anagrams("sporadic")
    self.assertEqual(r, ['sporadic'])

    _, r = self.anagrams2.get_anagrams("spore")
    self.assertEqual(r, ['pores', 'poser', 'prose', 'ropes', 'spore'])

    _, r = self.anagrams2.get_anagrams("spores")
    self.assertEqual(r, ['posers', 'spores'])

    _, r = self.anagrams2.get_anagrams("sport")
    self.assertEqual(r, ['ports', 'sport'])

    _, r = self.anagrams2.get_anagrams("sported")
    self.assertEqual(r, ['sported'])

    _, r = self.anagrams2.get_anagrams("sporting")
    self.assertEqual(r, ['sporting'])

    _, r = self.anagrams2.get_anagrams("sportingly")
    self.assertEqual(r, ['sportingly'])

    _, r = self.anagrams2.get_anagrams("sportive")
    self.assertEqual(r, ['sportive'])

    _, r = self.anagrams2.get_anagrams("sports")
    self.assertEqual(r, ['sports'])

    _, r = self.anagrams2.get_anagrams("sportsman")
    self.assertEqual(r, ['sportsman'])

    _, r = self.anagrams2.get_anagrams("sportsmen")
    self.assertEqual(r, ['sportsmen'])

    _, r = self.anagrams2.get_anagrams("sportswear")
    self.assertEqual(r, ['sportswear'])

    _, r = self.anagrams2.get_anagrams("sportswriter")
    self.assertEqual(r, ['sportswriter'])

    _, r = self.anagrams2.get_anagrams("sportswriting")
    self.assertEqual(r, ['sportswriting'])

    _, r = self.anagrams2.get_anagrams("sporty")
    self.assertEqual(r, ['sporty'])

    _, r = self.anagrams2.get_anagrams("sposato")
    self.assertEqual(r, ['sposato'])

    _, r = self.anagrams2.get_anagrams("spot")
    self.assertEqual(r, ['opts', 'post', 'pots', 'spot', 'stop', 'tops'])

    _, r = self.anagrams2.get_anagrams("spotless")
    self.assertEqual(r, ['spotless'])

    _, r = self.anagrams2.get_anagrams("spotlessly")
    self.assertEqual(r, ['spotlessly'])

    _, r = self.anagrams2.get_anagrams("spotlight")
    self.assertEqual(r, ['spotlight'])

    _, r = self.anagrams2.get_anagrams("spots")
    self.assertEqual(r, ['posts', 'spots', 'stops'])

    _, r = self.anagrams2.get_anagrams("spotted")
    self.assertEqual(r, ['spotted'])

    _, r = self.anagrams2.get_anagrams("spotter")
    self.assertEqual(r, ['potters', 'protest', 'spotter'])

    _, r = self.anagrams2.get_anagrams("spotters")
    self.assertEqual(r, ['protests', 'spotters'])

    _, r = self.anagrams2.get_anagrams("spotting")
    self.assertEqual(r, ['spotting'])

    _, r = self.anagrams2.get_anagrams("spotty")
    self.assertEqual(r, ['spotty'])

    _, r = self.anagrams2.get_anagrams("spouse")
    self.assertEqual(r, ['spouse'])

    _, r = self.anagrams2.get_anagrams("spouses")
    self.assertEqual(r, ['spouses'])

    _, r = self.anagrams2.get_anagrams("spout")
    self.assertEqual(r, ['pouts', 'spout'])

    _, r = self.anagrams2.get_anagrams("spouted")
    self.assertEqual(r, ['spouted'])

    _, r = self.anagrams2.get_anagrams("spouting")
    self.assertEqual(r, ['spouting'])

    _, r = self.anagrams2.get_anagrams("spouts")
    self.assertEqual(r, ['spouts'])

    _, r = self.anagrams2.get_anagrams("sprague")
    self.assertEqual(r, ['sprague'])

    _, r = self.anagrams2.get_anagrams("sprain")
    self.assertEqual(r, ['sprain'])

    _, r = self.anagrams2.get_anagrams("sprang")
    self.assertEqual(r, ['sprang'])

    _, r = self.anagrams2.get_anagrams("sprawl")
    self.assertEqual(r, ['sprawl'])

    _, r = self.anagrams2.get_anagrams("sprawled")
    self.assertEqual(r, ['sprawled'])

    _, r = self.anagrams2.get_anagrams("sprawling")
    self.assertEqual(r, ['sprawling'])

    _, r = self.anagrams2.get_anagrams("sprawls")
    self.assertEqual(r, ['sprawls'])

    _, r = self.anagrams2.get_anagrams("spray")
    self.assertEqual(r, ['spray'])

    _, r = self.anagrams2.get_anagrams("sprayed")
    self.assertEqual(r, ['sprayed'])

    _, r = self.anagrams2.get_anagrams("sprayer")
    self.assertEqual(r, ['prayers', 'sprayer'])

    _, r = self.anagrams2.get_anagrams("spraying")
    self.assertEqual(r, ['spraying'])

    _, r = self.anagrams2.get_anagrams("sprays")
    self.assertEqual(r, ['sprays'])

    _, r = self.anagrams2.get_anagrams("spread")
    self.assertEqual(r, ['drapes', 'parsed', 'rasped', 'spared', 'spread'])

    _, r = self.anagrams2.get_anagrams("spreader")
    self.assertEqual(r, ['spreader'])

    _, r = self.anagrams2.get_anagrams("spreaders")
    self.assertEqual(r, ['spreaders'])

    _, r = self.anagrams2.get_anagrams("spreading")
    self.assertEqual(r, ['spreading'])

    _, r = self.anagrams2.get_anagrams("spreadings")
    self.assertEqual(r, ['spreadings'])

    _, r = self.anagrams2.get_anagrams("spreads")
    self.assertEqual(r, ['spreads'])

    _, r = self.anagrams2.get_anagrams("spreadsheet")
    self.assertEqual(r, ['spreadsheet'])

    _, r = self.anagrams2.get_anagrams("spree")
    self.assertEqual(r, ['peers', 'spree'])

    _, r = self.anagrams2.get_anagrams("sprees")
    self.assertEqual(r, ['sprees'])

    _, r = self.anagrams2.get_anagrams("sprig")
    self.assertEqual(r, ['grips', 'sprig'])

    _, r = self.anagrams2.get_anagrams("sprightly")
    self.assertEqual(r, ['sprightly'])

    _, r = self.anagrams2.get_anagrams("spring")
    self.assertEqual(r, ['spring'])

    _, r = self.anagrams2.get_anagrams("springboard")
    self.assertEqual(r, ['springboard'])

    _, r = self.anagrams2.get_anagrams("springer")
    self.assertEqual(r, ['springer'])

    _, r = self.anagrams2.get_anagrams("springers")
    self.assertEqual(r, ['springers'])

    _, r = self.anagrams2.get_anagrams("springfield")
    self.assertEqual(r, ['springfield'])

    _, r = self.anagrams2.get_anagrams("springier")
    self.assertEqual(r, ['springier'])

    _, r = self.anagrams2.get_anagrams("springiest")
    self.assertEqual(r, ['persisting', 'springiest'])

    _, r = self.anagrams2.get_anagrams("springiness")
    self.assertEqual(r, ['springiness'])

    _, r = self.anagrams2.get_anagrams("springing")
    self.assertEqual(r, ['springing'])

    _, r = self.anagrams2.get_anagrams("springs")
    self.assertEqual(r, ['springs'])

    _, r = self.anagrams2.get_anagrams("springtime")
    self.assertEqual(r, ['springtime'])

    _, r = self.anagrams2.get_anagrams("springy")
    self.assertEqual(r, ['springy'])

    _, r = self.anagrams2.get_anagrams("sprinkle")
    self.assertEqual(r, ['sprinkle'])

    _, r = self.anagrams2.get_anagrams("sprinkled")
    self.assertEqual(r, ['sprinkled'])

    _, r = self.anagrams2.get_anagrams("sprinkler")
    self.assertEqual(r, ['sprinkler'])

    _, r = self.anagrams2.get_anagrams("sprinkles")
    self.assertEqual(r, ['sprinkles'])

    _, r = self.anagrams2.get_anagrams("sprinkling")
    self.assertEqual(r, ['sprinkling'])

    _, r = self.anagrams2.get_anagrams("sprint")
    self.assertEqual(r, ['prints', 'sprint'])

    _, r = self.anagrams2.get_anagrams("sprinted")
    self.assertEqual(r, ['sprinted'])

    _, r = self.anagrams2.get_anagrams("sprinter")
    self.assertEqual(r, ['printers', 'reprints', 'sprinter'])

    _, r = self.anagrams2.get_anagrams("sprinters")
    self.assertEqual(r, ['sprinters'])

    _, r = self.anagrams2.get_anagrams("sprinting")
    self.assertEqual(r, ['sprinting'])

    _, r = self.anagrams2.get_anagrams("sprints")
    self.assertEqual(r, ['sprints'])

    _, r = self.anagrams2.get_anagrams("sprite")
    self.assertEqual(r, ['esprit', 'priest', 'sprite', 'stripe'])

    _, r = self.anagrams2.get_anagrams("sprocket")
    self.assertEqual(r, ['sprocket'])

    _, r = self.anagrams2.get_anagrams("sproul")
    self.assertEqual(r, ['sproul'])

    _, r = self.anagrams2.get_anagrams("sprout")
    self.assertEqual(r, ['proust', 'sprout', 'stupor'])

    _, r = self.anagrams2.get_anagrams("sprouted")
    self.assertEqual(r, ['proudest', 'sprouted'])

    _, r = self.anagrams2.get_anagrams("sprouting")
    self.assertEqual(r, ['sprouting'])

    _, r = self.anagrams2.get_anagrams("spruce")
    self.assertEqual(r, ['spruce'])

    _, r = self.anagrams2.get_anagrams("spruced")
    self.assertEqual(r, ['spruced'])

    _, r = self.anagrams2.get_anagrams("sprung")
    self.assertEqual(r, ['sprung'])

    _, r = self.anagrams2.get_anagrams("spuds")
    self.assertEqual(r, ['spuds'])

    _, r = self.anagrams2.get_anagrams("spun")
    self.assertEqual(r, ['puns', 'spun'])

    _, r = self.anagrams2.get_anagrams("spunk")
    self.assertEqual(r, ['spunk'])

    _, r = self.anagrams2.get_anagrams("spur")
    self.assertEqual(r, ['spur'])

    _, r = self.anagrams2.get_anagrams("spurious")
    self.assertEqual(r, ['spurious'])

    _, r = self.anagrams2.get_anagrams("spurn")
    self.assertEqual(r, ['spurn'])

    _, r = self.anagrams2.get_anagrams("spurned")
    self.assertEqual(r, ['spurned'])

    _, r = self.anagrams2.get_anagrams("spurning")
    self.assertEqual(r, ['spurning'])

    _, r = self.anagrams2.get_anagrams("spurns")
    self.assertEqual(r, ['spurns'])

    _, r = self.anagrams2.get_anagrams("spurs")
    self.assertEqual(r, ['spurs'])

    _, r = self.anagrams2.get_anagrams("spurt")
    self.assertEqual(r, ['spurt'])

    _, r = self.anagrams2.get_anagrams("spurted")
    self.assertEqual(r, ['spurted'])

    _, r = self.anagrams2.get_anagrams("spurting")
    self.assertEqual(r, ['spurting'])

    _, r = self.anagrams2.get_anagrams("spurts")
    self.assertEqual(r, ['spurts'])

    _, r = self.anagrams2.get_anagrams("sputter")
    self.assertEqual(r, ['putters', 'sputter'])

    _, r = self.anagrams2.get_anagrams("sputtered")
    self.assertEqual(r, ['sputtered'])

    _, r = self.anagrams2.get_anagrams("spy")
    self.assertEqual(r, ['spy'])

    _, r = self.anagrams2.get_anagrams("spyglass")
    self.assertEqual(r, ['spyglass'])

    _, r = self.anagrams2.get_anagrams("spying")
    self.assertEqual(r, ['spying'])

    _, r = self.anagrams2.get_anagrams("squabble")
    self.assertEqual(r, ['squabble'])

    _, r = self.anagrams2.get_anagrams("squabbled")
    self.assertEqual(r, ['squabbled'])

    _, r = self.anagrams2.get_anagrams("squabbles")
    self.assertEqual(r, ['squabbles'])

    _, r = self.anagrams2.get_anagrams("squabbling")
    self.assertEqual(r, ['squabbling'])

    _, r = self.anagrams2.get_anagrams("squad")
    self.assertEqual(r, ['squad'])

    _, r = self.anagrams2.get_anagrams("squadron")
    self.assertEqual(r, ['squadron'])

    _, r = self.anagrams2.get_anagrams("squadrons")
    self.assertEqual(r, ['squadrons'])

    _, r = self.anagrams2.get_anagrams("squads")
    self.assertEqual(r, ['squads'])

    _, r = self.anagrams2.get_anagrams("squalid")
    self.assertEqual(r, ['squalid'])

    _, r = self.anagrams2.get_anagrams("squall")
    self.assertEqual(r, ['squall'])

    _, r = self.anagrams2.get_anagrams("squalls")
    self.assertEqual(r, ['squalls'])

    _, r = self.anagrams2.get_anagrams("squander")
    self.assertEqual(r, ['squander'])

    _, r = self.anagrams2.get_anagrams("square")
    self.assertEqual(r, ['square'])

    _, r = self.anagrams2.get_anagrams("squared")
    self.assertEqual(r, ['squared'])

    _, r = self.anagrams2.get_anagrams("squarely")
    self.assertEqual(r, ['squarely'])

    _, r = self.anagrams2.get_anagrams("squareness")
    self.assertEqual(r, ['squareness'])

    _, r = self.anagrams2.get_anagrams("squarer")
    self.assertEqual(r, ['squarer'])

    _, r = self.anagrams2.get_anagrams("squares")
    self.assertEqual(r, ['squares'])

    _, r = self.anagrams2.get_anagrams("squarest")
    self.assertEqual(r, ['squarest'])

    _, r = self.anagrams2.get_anagrams("squaresville")
    self.assertEqual(r, ['squaresville'])

    _, r = self.anagrams2.get_anagrams("squaring")
    self.assertEqual(r, ['squaring'])

    _, r = self.anagrams2.get_anagrams("squash")
    self.assertEqual(r, ['squash'])

    _, r = self.anagrams2.get_anagrams("squashed")
    self.assertEqual(r, ['squashed'])

    _, r = self.anagrams2.get_anagrams("squashing")
    self.assertEqual(r, ['squashing'])

    _, r = self.anagrams2.get_anagrams("squat")
    self.assertEqual(r, ['squat'])

    _, r = self.anagrams2.get_anagrams("squats")
    self.assertEqual(r, ['squats'])

    _, r = self.anagrams2.get_anagrams("squatting")
    self.assertEqual(r, ['squatting'])

    _, r = self.anagrams2.get_anagrams("squaw")
    self.assertEqual(r, ['squaw'])

    _, r = self.anagrams2.get_anagrams("squawk")
    self.assertEqual(r, ['squawk'])

    _, r = self.anagrams2.get_anagrams("squawked")
    self.assertEqual(r, ['squawked'])

    _, r = self.anagrams2.get_anagrams("squawking")
    self.assertEqual(r, ['squawking'])

    _, r = self.anagrams2.get_anagrams("squawks")
    self.assertEqual(r, ['squawks'])

    _, r = self.anagrams2.get_anagrams("squeak")
    self.assertEqual(r, ['quakes', 'squeak'])

    _, r = self.anagrams2.get_anagrams("squeaked")
    self.assertEqual(r, ['squeaked'])

    _, r = self.anagrams2.get_anagrams("squeaking")
    self.assertEqual(r, ['squeaking'])

    _, r = self.anagrams2.get_anagrams("squeaks")
    self.assertEqual(r, ['squeaks'])

    _, r = self.anagrams2.get_anagrams("squeaky")
    self.assertEqual(r, ['squeaky'])

    _, r = self.anagrams2.get_anagrams("squeal")
    self.assertEqual(r, ['equals', 'squeal'])

    _, r = self.anagrams2.get_anagrams("squealed")
    self.assertEqual(r, ['squealed'])

    _, r = self.anagrams2.get_anagrams("squealing")
    self.assertEqual(r, ['squealing'])

    _, r = self.anagrams2.get_anagrams("squeals")
    self.assertEqual(r, ['squeals'])

    _, r = self.anagrams2.get_anagrams("squeamish")
    self.assertEqual(r, ['squeamish'])

    _, r = self.anagrams2.get_anagrams("squeeze")
    self.assertEqual(r, ['squeeze'])

    _, r = self.anagrams2.get_anagrams("squeezed")
    self.assertEqual(r, ['squeezed'])

    _, r = self.anagrams2.get_anagrams("squeezer")
    self.assertEqual(r, ['squeezer'])

    _, r = self.anagrams2.get_anagrams("squeezes")
    self.assertEqual(r, ['squeezes'])

    _, r = self.anagrams2.get_anagrams("squeezing")
    self.assertEqual(r, ['squeezing'])

    _, r = self.anagrams2.get_anagrams("squelch")
    self.assertEqual(r, ['squelch'])

    _, r = self.anagrams2.get_anagrams("squibb")
    self.assertEqual(r, ['squibb'])

    _, r = self.anagrams2.get_anagrams("squid")
    self.assertEqual(r, ['squid'])

    _, r = self.anagrams2.get_anagrams("squint")
    self.assertEqual(r, ['squint'])

    _, r = self.anagrams2.get_anagrams("squinted")
    self.assertEqual(r, ['squinted'])

    _, r = self.anagrams2.get_anagrams("squinting")
    self.assertEqual(r, ['squinting'])

    _, r = self.anagrams2.get_anagrams("squire")
    self.assertEqual(r, ['squire'])

    _, r = self.anagrams2.get_anagrams("squires")
    self.assertEqual(r, ['squires'])

    _, r = self.anagrams2.get_anagrams("squirm")
    self.assertEqual(r, ['squirm'])

    _, r = self.anagrams2.get_anagrams("squirmed")
    self.assertEqual(r, ['squirmed'])

    _, r = self.anagrams2.get_anagrams("squirms")
    self.assertEqual(r, ['squirms'])

    _, r = self.anagrams2.get_anagrams("squirmy")
    self.assertEqual(r, ['squirmy'])

    _, r = self.anagrams2.get_anagrams("squirrel")
    self.assertEqual(r, ['squirrel'])

    _, r = self.anagrams2.get_anagrams("squirreled")
    self.assertEqual(r, ['squirreled'])

    _, r = self.anagrams2.get_anagrams("squirreling")
    self.assertEqual(r, ['squirreling'])

    _, r = self.anagrams2.get_anagrams("squirrels")
    self.assertEqual(r, ['squirrels'])

    _, r = self.anagrams2.get_anagrams("squirt")
    self.assertEqual(r, ['squirt'])

    _, r = self.anagrams2.get_anagrams("squishy")
    self.assertEqual(r, ['squishy'])

    _, r = self.anagrams2.get_anagrams("sri")
    self.assertEqual(r, ['sir', 'sri'])

    _, r = self.anagrams2.get_anagrams("stab")
    self.assertEqual(r, ['bats', 'stab', 'tabs'])

    _, r = self.anagrams2.get_anagrams("stabbed")
    self.assertEqual(r, ['stabbed'])

    _, r = self.anagrams2.get_anagrams("stabbing")
    self.assertEqual(r, ['stabbing'])

    _, r = self.anagrams2.get_anagrams("stabile")
    self.assertEqual(r, ['bestial', 'stabile'])

    _, r = self.anagrams2.get_anagrams("stabilities")
    self.assertEqual(r, ['stabilities'])

    _, r = self.anagrams2.get_anagrams("stability")
    self.assertEqual(r, ['stability'])

    _, r = self.anagrams2.get_anagrams("stabilize")
    self.assertEqual(r, ['stabilize'])

    _, r = self.anagrams2.get_anagrams("stabilized")
    self.assertEqual(r, ['stabilized'])

    _, r = self.anagrams2.get_anagrams("stabilizer")
    self.assertEqual(r, ['stabilizer'])

    _, r = self.anagrams2.get_anagrams("stabilizers")
    self.assertEqual(r, ['stabilizers'])

    _, r = self.anagrams2.get_anagrams("stabilizes")
    self.assertEqual(r, ['stabilizes'])

    _, r = self.anagrams2.get_anagrams("stabilizing")
    self.assertEqual(r, ['stabilizing'])

    _, r = self.anagrams2.get_anagrams("stable")
    self.assertEqual(r, ['ablest', 'bleats', 'stable', 'tables'])

    _, r = self.anagrams2.get_anagrams("stabled")
    self.assertEqual(r, ['blasted', 'stabled'])

    _, r = self.anagrams2.get_anagrams("stabler")
    self.assertEqual(r, ['blaster', 'stabler'])

    _, r = self.anagrams2.get_anagrams("stables")
    self.assertEqual(r, ['stables'])

    _, r = self.anagrams2.get_anagrams("stabling")
    self.assertEqual(r, ['blasting', 'stabling'])

    _, r = self.anagrams2.get_anagrams("stably")
    self.assertEqual(r, ['stably'])

    _, r = self.anagrams2.get_anagrams("stabs")
    self.assertEqual(r, ['stabs'])

    _, r = self.anagrams2.get_anagrams("stack")
    self.assertEqual(r, ['stack'])

    _, r = self.anagrams2.get_anagrams("stacked")
    self.assertEqual(r, ['stacked'])

    _, r = self.anagrams2.get_anagrams("stacking")
    self.assertEqual(r, ['stacking'])

    _, r = self.anagrams2.get_anagrams("stacks")
    self.assertEqual(r, ['stacks'])

    _, r = self.anagrams2.get_anagrams("stacy")
    self.assertEqual(r, ['stacy'])

    _, r = self.anagrams2.get_anagrams("stadia")
    self.assertEqual(r, ['stadia'])

    _, r = self.anagrams2.get_anagrams("stadium")
    self.assertEqual(r, ['stadium'])

    _, r = self.anagrams2.get_anagrams("staff")
    self.assertEqual(r, ['staff'])

    _, r = self.anagrams2.get_anagrams("staffed")
    self.assertEqual(r, ['staffed'])

    _, r = self.anagrams2.get_anagrams("staffer")
    self.assertEqual(r, ['staffer'])

    _, r = self.anagrams2.get_anagrams("staffers")
    self.assertEqual(r, ['staffers'])

    _, r = self.anagrams2.get_anagrams("staffing")
    self.assertEqual(r, ['staffing'])

    _, r = self.anagrams2.get_anagrams("stafford")
    self.assertEqual(r, ['stafford'])

    _, r = self.anagrams2.get_anagrams("staffordshire")
    self.assertEqual(r, ['staffordshire'])

    _, r = self.anagrams2.get_anagrams("staffs")
    self.assertEqual(r, ['staffs'])

    _, r = self.anagrams2.get_anagrams("stag")
    self.assertEqual(r, ['stag', 'tags'])

    _, r = self.anagrams2.get_anagrams("stage")
    self.assertEqual(r, ['gates', 'stage'])

    _, r = self.anagrams2.get_anagrams("stagecoach")
    self.assertEqual(r, ['stagecoach'])

    _, r = self.anagrams2.get_anagrams("stagecoaches")
    self.assertEqual(r, ['stagecoaches'])

    _, r = self.anagrams2.get_anagrams("staged")
    self.assertEqual(r, ['staged'])

    _, r = self.anagrams2.get_anagrams("stager")
    self.assertEqual(r, ['grates', 'stager'])

    _, r = self.anagrams2.get_anagrams("stagers")
    self.assertEqual(r, ['stagers'])

    _, r = self.anagrams2.get_anagrams("stages")
    self.assertEqual(r, ['gasset', 'stages'])

    _, r = self.anagrams2.get_anagrams("stagger")
    self.assertEqual(r, ['stagger'])

    _, r = self.anagrams2.get_anagrams("staggered")
    self.assertEqual(r, ['staggered'])

    _, r = self.anagrams2.get_anagrams("staggering")
    self.assertEqual(r, ['staggering'])

    _, r = self.anagrams2.get_anagrams("staggers")
    self.assertEqual(r, ['staggers'])

    _, r = self.anagrams2.get_anagrams("staging")
    self.assertEqual(r, ['staging'])

    _, r = self.anagrams2.get_anagrams("stagnant")
    self.assertEqual(r, ['stagnant'])

    _, r = self.anagrams2.get_anagrams("stagnate")
    self.assertEqual(r, ['stagnate'])

    _, r = self.anagrams2.get_anagrams("stagnation")
    self.assertEqual(r, ['antagonist', 'stagnation'])

    _, r = self.anagrams2.get_anagrams("stags")
    self.assertEqual(r, ['stags'])

    _, r = self.anagrams2.get_anagrams("stahl")
    self.assertEqual(r, ['halts', 'stahl'])

    _, r = self.anagrams2.get_anagrams("staid")
    self.assertEqual(r, ['staid'])

    _, r = self.anagrams2.get_anagrams("stain")
    self.assertEqual(r, ['saint', 'satin', 'stain'])

    _, r = self.anagrams2.get_anagrams("stained")
    self.assertEqual(r, ['detains', 'instead', 'sainted', 'stained'])

    _, r = self.anagrams2.get_anagrams("staining")
    self.assertEqual(r, ['staining'])

    _, r = self.anagrams2.get_anagrams("stainless")
    self.assertEqual(r, ['saltiness', 'stainless'])

    _, r = self.anagrams2.get_anagrams("stains")
    self.assertEqual(r, ['saints', 'stains'])

    _, r = self.anagrams2.get_anagrams("stair")
    self.assertEqual(r, ['stair'])

    _, r = self.anagrams2.get_anagrams("staircase")
    self.assertEqual(r, ['staircase'])

    _, r = self.anagrams2.get_anagrams("staircases")
    self.assertEqual(r, ['staircases'])

    _, r = self.anagrams2.get_anagrams("stairs")
    self.assertEqual(r, ['stairs'])

    _, r = self.anagrams2.get_anagrams("stairway")
    self.assertEqual(r, ['stairway'])

    _, r = self.anagrams2.get_anagrams("stairways")
    self.assertEqual(r, ['stairways'])

    _, r = self.anagrams2.get_anagrams("stairwell")
    self.assertEqual(r, ['stairwell'])

    _, r = self.anagrams2.get_anagrams("stake")
    self.assertEqual(r, ['keats', 'skate', 'stake', 'steak', 'takes'])

    _, r = self.anagrams2.get_anagrams("staked")
    self.assertEqual(r, ['skated', 'staked', 'tasked'])

    _, r = self.anagrams2.get_anagrams("stakes")
    self.assertEqual(r, ['skates', 'stakes', 'steaks'])

    _, r = self.anagrams2.get_anagrams("stalactite")
    self.assertEqual(r, ['stalactite'])

    _, r = self.anagrams2.get_anagrams("stale")
    self.assertEqual(r, ['least', 'slate', 'stale', 'steal', 'tales'])

    _, r = self.anagrams2.get_anagrams("stalemate")
    self.assertEqual(r, ['stalemate'])

    _, r = self.anagrams2.get_anagrams("staley")
    self.assertEqual(r, ['staley'])

    _, r = self.anagrams2.get_anagrams("stalin")
    self.assertEqual(r, ['stalin'])

    _, r = self.anagrams2.get_anagrams("stalinist")
    self.assertEqual(r, ['stalinist'])

    _, r = self.anagrams2.get_anagrams("stalins")
    self.assertEqual(r, ['stalins'])

    _, r = self.anagrams2.get_anagrams("stalk")
    self.assertEqual(r, ['stalk', 'talks'])

    _, r = self.anagrams2.get_anagrams("stalked")
    self.assertEqual(r, ['stalked'])

    _, r = self.anagrams2.get_anagrams("stalking")
    self.assertEqual(r, ['stalking'])

    _, r = self.anagrams2.get_anagrams("stall")
    self.assertEqual(r, ['stall'])

    _, r = self.anagrams2.get_anagrams("stalled")
    self.assertEqual(r, ['stalled'])

    _, r = self.anagrams2.get_anagrams("stalling")
    self.assertEqual(r, ['stalling'])

    _, r = self.anagrams2.get_anagrams("stallings")
    self.assertEqual(r, ['stallings'])

    _, r = self.anagrams2.get_anagrams("stallion")
    self.assertEqual(r, ['stallion'])

    _, r = self.anagrams2.get_anagrams("stalls")
    self.assertEqual(r, ['stalls'])

    _, r = self.anagrams2.get_anagrams("stalwart")
    self.assertEqual(r, ['stalwart'])

    _, r = self.anagrams2.get_anagrams("stalwartly")
    self.assertEqual(r, ['stalwartly'])

    _, r = self.anagrams2.get_anagrams("stamen")
    self.assertEqual(r, ['stamen'])

    _, r = self.anagrams2.get_anagrams("stamens")
    self.assertEqual(r, ['stamens'])

    _, r = self.anagrams2.get_anagrams("stamford")
    self.assertEqual(r, ['stamford'])

    _, r = self.anagrams2.get_anagrams("stamina")
    self.assertEqual(r, ['stamina'])

    _, r = self.anagrams2.get_anagrams("stammer")
    self.assertEqual(r, ['stammer'])

    _, r = self.anagrams2.get_anagrams("stammered")
    self.assertEqual(r, ['stammered'])

    _, r = self.anagrams2.get_anagrams("stammerer")
    self.assertEqual(r, ['stammerer'])

    _, r = self.anagrams2.get_anagrams("stammering")
    self.assertEqual(r, ['stammering'])

    _, r = self.anagrams2.get_anagrams("stammers")
    self.assertEqual(r, ['stammers'])

    _, r = self.anagrams2.get_anagrams("stamp")
    self.assertEqual(r, ['stamp'])

    _, r = self.anagrams2.get_anagrams("stamped")
    self.assertEqual(r, ['stamped'])

    _, r = self.anagrams2.get_anagrams("stampede")
    self.assertEqual(r, ['stampede'])

    _, r = self.anagrams2.get_anagrams("stampeded")
    self.assertEqual(r, ['stampeded'])

    _, r = self.anagrams2.get_anagrams("stampedes")
    self.assertEqual(r, ['stampedes'])

    _, r = self.anagrams2.get_anagrams("stampeding")
    self.assertEqual(r, ['stampeding'])

    _, r = self.anagrams2.get_anagrams("stamper")
    self.assertEqual(r, ['stamper', 'tampers'])

    _, r = self.anagrams2.get_anagrams("stampers")
    self.assertEqual(r, ['stampers'])

    _, r = self.anagrams2.get_anagrams("stamping")
    self.assertEqual(r, ['stamping'])

    _, r = self.anagrams2.get_anagrams("stamps")
    self.assertEqual(r, ['stamps'])

    _, r = self.anagrams2.get_anagrams("stan")
    self.assertEqual(r, ['ants', 'stan'])

    _, r = self.anagrams2.get_anagrams("stanch")
    self.assertEqual(r, ['chants', 'snatch', 'stanch'])

    _, r = self.anagrams2.get_anagrams("stanchest")
    self.assertEqual(r, ['stanchest'])

    _, r = self.anagrams2.get_anagrams("stanchion")
    self.assertEqual(r, ['stanchion'])

    _, r = self.anagrams2.get_anagrams("stand")
    self.assertEqual(r, ['stand'])

    _, r = self.anagrams2.get_anagrams("standard")
    self.assertEqual(r, ['standard'])

    _, r = self.anagrams2.get_anagrams("standardization")
    self.assertEqual(r, ['standardization'])

    _, r = self.anagrams2.get_anagrams("standardize")
    self.assertEqual(r, ['standardize'])

    _, r = self.anagrams2.get_anagrams("standardized")
    self.assertEqual(r, ['standardized'])

    _, r = self.anagrams2.get_anagrams("standardizes")
    self.assertEqual(r, ['standardizes'])

    _, r = self.anagrams2.get_anagrams("standardizing")
    self.assertEqual(r, ['standardizing'])

    _, r = self.anagrams2.get_anagrams("standardly")
    self.assertEqual(r, ['standardly'])

    _, r = self.anagrams2.get_anagrams("standards")
    self.assertEqual(r, ['standards'])

    _, r = self.anagrams2.get_anagrams("standby")
    self.assertEqual(r, ['standby'])

    _, r = self.anagrams2.get_anagrams("standing")
    self.assertEqual(r, ['standing'])

    _, r = self.anagrams2.get_anagrams("standings")
    self.assertEqual(r, ['standings'])

    _, r = self.anagrams2.get_anagrams("standish")
    self.assertEqual(r, ['standish'])

    _, r = self.anagrams2.get_anagrams("standoff")
    self.assertEqual(r, ['standoff'])

    _, r = self.anagrams2.get_anagrams("standpoint")
    self.assertEqual(r, ['standpoint'])

    _, r = self.anagrams2.get_anagrams("standpoints")
    self.assertEqual(r, ['standpoints'])

    _, r = self.anagrams2.get_anagrams("stands")
    self.assertEqual(r, ['stands'])

    _, r = self.anagrams2.get_anagrams("standstill")
    self.assertEqual(r, ['standstill'])

    _, r = self.anagrams2.get_anagrams("stanford")
    self.assertEqual(r, ['stanford'])

    _, r = self.anagrams2.get_anagrams("stanhope")
    self.assertEqual(r, ['stanhope'])

    _, r = self.anagrams2.get_anagrams("stanley")
    self.assertEqual(r, ['stanley'])

    _, r = self.anagrams2.get_anagrams("stans")
    self.assertEqual(r, ['stans'])

    _, r = self.anagrams2.get_anagrams("stanton")
    self.assertEqual(r, ['stanton'])

    _, r = self.anagrams2.get_anagrams("stanza")
    self.assertEqual(r, ['stanza'])

    _, r = self.anagrams2.get_anagrams("stanzas")
    self.assertEqual(r, ['stanzas'])

    _, r = self.anagrams2.get_anagrams("staphylococcus")
    self.assertEqual(r, ['staphylococcus'])

    _, r = self.anagrams2.get_anagrams("staple")
    self.assertEqual(r, ['palest', 'pastel', 'petals', 'plates', 'staple'])

    _, r = self.anagrams2.get_anagrams("stapler")
    self.assertEqual(r, ['plaster', 'stapler'])

    _, r = self.anagrams2.get_anagrams("staples")
    self.assertEqual(r, ['staples'])

    _, r = self.anagrams2.get_anagrams("stapleton")
    self.assertEqual(r, ['stapleton'])

    _, r = self.anagrams2.get_anagrams("stapling")
    self.assertEqual(r, ['stapling'])

    _, r = self.anagrams2.get_anagrams("star")
    self.assertEqual(r, ['arts', 'rats', 'star'])

    _, r = self.anagrams2.get_anagrams("starboard")
    self.assertEqual(r, ['starboard'])

    _, r = self.anagrams2.get_anagrams("starch")
    self.assertEqual(r, ['charts', 'starch'])

    _, r = self.anagrams2.get_anagrams("starched")
    self.assertEqual(r, ['starched'])

    _, r = self.anagrams2.get_anagrams("stardom")
    self.assertEqual(r, ['stardom'])

    _, r = self.anagrams2.get_anagrams("stare")
    self.assertEqual(r, ['aster', 'rates', 'stare', 'tears'])

    _, r = self.anagrams2.get_anagrams("stared")
    self.assertEqual(r, ['stared', 'trades', 'treads'])

    _, r = self.anagrams2.get_anagrams("starer")
    self.assertEqual(r, ['arrest', 'rarest', 'raster', 'raters', 'sartre', 'starer'])

    _, r = self.anagrams2.get_anagrams("stares")
    self.assertEqual(r, ['assert', 'asters', 'stares'])

    _, r = self.anagrams2.get_anagrams("starfish")
    self.assertEqual(r, ['starfish'])

    _, r = self.anagrams2.get_anagrams("stargate")
    self.assertEqual(r, ['stargate'])

    _, r = self.anagrams2.get_anagrams("staring")
    self.assertEqual(r, ['ratings', 'staring'])

    _, r = self.anagrams2.get_anagrams("stark")
    self.assertEqual(r, ['stark'])

    _, r = self.anagrams2.get_anagrams("starkey")
    self.assertEqual(r, ['starkey'])

    _, r = self.anagrams2.get_anagrams("starkly")
    self.assertEqual(r, ['starkly'])

    _, r = self.anagrams2.get_anagrams("starlet")
    self.assertEqual(r, ['rattles', 'starlet', 'startle', 'statler'])

    _, r = self.anagrams2.get_anagrams("starlight")
    self.assertEqual(r, ['starlight'])

    _, r = self.anagrams2.get_anagrams("starling")
    self.assertEqual(r, ['starling'])

    _, r = self.anagrams2.get_anagrams("starr")
    self.assertEqual(r, ['starr'])

    _, r = self.anagrams2.get_anagrams("starred")
    self.assertEqual(r, ['starred', 'traders'])

    _, r = self.anagrams2.get_anagrams("starring")
    self.assertEqual(r, ['starring'])

    _, r = self.anagrams2.get_anagrams("starry")
    self.assertEqual(r, ['starry'])

    _, r = self.anagrams2.get_anagrams("stars")
    self.assertEqual(r, ['stars'])

    _, r = self.anagrams2.get_anagrams("start")
    self.assertEqual(r, ['start'])

    _, r = self.anagrams2.get_anagrams("started")
    self.assertEqual(r, ['started'])

    _, r = self.anagrams2.get_anagrams("starter")
    self.assertEqual(r, ['restart', 'starter'])

    _, r = self.anagrams2.get_anagrams("starters")
    self.assertEqual(r, ['restarts', 'starters'])

    _, r = self.anagrams2.get_anagrams("starting")
    self.assertEqual(r, ['starting'])

    _, r = self.anagrams2.get_anagrams("startle")
    self.assertEqual(r, ['rattles', 'starlet', 'startle', 'statler'])

    _, r = self.anagrams2.get_anagrams("startled")
    self.assertEqual(r, ['startled'])

    _, r = self.anagrams2.get_anagrams("startles")
    self.assertEqual(r, ['startles'])

    _, r = self.anagrams2.get_anagrams("startling")
    self.assertEqual(r, ['startling'])

    _, r = self.anagrams2.get_anagrams("starts")
    self.assertEqual(r, ['starts'])

    _, r = self.anagrams2.get_anagrams("startup")
    self.assertEqual(r, ['startup'])

    _, r = self.anagrams2.get_anagrams("startups")
    self.assertEqual(r, ['startups'])

    _, r = self.anagrams2.get_anagrams("starvation")
    self.assertEqual(r, ['starvation'])

    _, r = self.anagrams2.get_anagrams("starve")
    self.assertEqual(r, ['averts', 'starve', 'vaster'])

    _, r = self.anagrams2.get_anagrams("starved")
    self.assertEqual(r, ['starved'])

    _, r = self.anagrams2.get_anagrams("starves")
    self.assertEqual(r, ['starves'])

    _, r = self.anagrams2.get_anagrams("starving")
    self.assertEqual(r, ['starving'])

    _, r = self.anagrams2.get_anagrams("state")
    self.assertEqual(r, ['state', 'taste'])

    _, r = self.anagrams2.get_anagrams("stated")
    self.assertEqual(r, ['stated', 'tasted'])

    _, r = self.anagrams2.get_anagrams("stately")
    self.assertEqual(r, ['stately'])

    _, r = self.anagrams2.get_anagrams("statement")
    self.assertEqual(r, ['statement', 'testament'])

    _, r = self.anagrams2.get_anagrams("statements")
    self.assertEqual(r, ['statements', 'testaments'])

    _, r = self.anagrams2.get_anagrams("staten")
    self.assertEqual(r, ['staten'])

    _, r = self.anagrams2.get_anagrams("states")
    self.assertEqual(r, ['states', 'tastes'])

    _, r = self.anagrams2.get_anagrams("statesman")
    self.assertEqual(r, ['statesman'])

    _, r = self.anagrams2.get_anagrams("statesmanlike")
    self.assertEqual(r, ['statesmanlike'])

    _, r = self.anagrams2.get_anagrams("statesmen")
    self.assertEqual(r, ['statesmen'])

    _, r = self.anagrams2.get_anagrams("statewide")
    self.assertEqual(r, ['statewide'])

    _, r = self.anagrams2.get_anagrams("static")
    self.assertEqual(r, ['attics', 'static'])

    _, r = self.anagrams2.get_anagrams("statically")
    self.assertEqual(r, ['statically'])

    _, r = self.anagrams2.get_anagrams("stating")
    self.assertEqual(r, ['stating', 'tasting'])

    _, r = self.anagrams2.get_anagrams("station")
    self.assertEqual(r, ['station'])

    _, r = self.anagrams2.get_anagrams("stationary")
    self.assertEqual(r, ['stationary'])

    _, r = self.anagrams2.get_anagrams("stationed")
    self.assertEqual(r, ['antidotes', 'stationed'])

    _, r = self.anagrams2.get_anagrams("stationer")
    self.assertEqual(r, ['stationer'])

    _, r = self.anagrams2.get_anagrams("stationery")
    self.assertEqual(r, ['stationery'])

    _, r = self.anagrams2.get_anagrams("stationing")
    self.assertEqual(r, ['stationing'])

    _, r = self.anagrams2.get_anagrams("stationmaster")
    self.assertEqual(r, ['stationmaster'])

    _, r = self.anagrams2.get_anagrams("stations")
    self.assertEqual(r, ['stations'])

    _, r = self.anagrams2.get_anagrams("statistic")
    self.assertEqual(r, ['statistic'])

    _, r = self.anagrams2.get_anagrams("statistical")
    self.assertEqual(r, ['statistical'])

    _, r = self.anagrams2.get_anagrams("statistically")
    self.assertEqual(r, ['statistically'])

    _, r = self.anagrams2.get_anagrams("statistician")
    self.assertEqual(r, ['statistician'])

    _, r = self.anagrams2.get_anagrams("statisticians")
    self.assertEqual(r, ['statisticians'])

    _, r = self.anagrams2.get_anagrams("statistics")
    self.assertEqual(r, ['statistics'])

    _, r = self.anagrams2.get_anagrams("statler")
    self.assertEqual(r, ['rattles', 'starlet', 'startle', 'statler'])

    _, r = self.anagrams2.get_anagrams("statue")
    self.assertEqual(r, ['astute', 'statue'])

    _, r = self.anagrams2.get_anagrams("statues")
    self.assertEqual(r, ['statues'])

    _, r = self.anagrams2.get_anagrams("statuesque")
    self.assertEqual(r, ['statuesque'])

    _, r = self.anagrams2.get_anagrams("statuesquely")
    self.assertEqual(r, ['statuesquely'])

    _, r = self.anagrams2.get_anagrams("statuesqueness")
    self.assertEqual(r, ['statuesqueness'])

    _, r = self.anagrams2.get_anagrams("statuette")
    self.assertEqual(r, ['statuette'])

    _, r = self.anagrams2.get_anagrams("stature")
    self.assertEqual(r, ['stature'])

    _, r = self.anagrams2.get_anagrams("status")
    self.assertEqual(r, ['status'])

    _, r = self.anagrams2.get_anagrams("statuses")
    self.assertEqual(r, ['statuses'])

    _, r = self.anagrams2.get_anagrams("statute")
    self.assertEqual(r, ['statute'])

    _, r = self.anagrams2.get_anagrams("statutes")
    self.assertEqual(r, ['statutes'])

    _, r = self.anagrams2.get_anagrams("statutorily")
    self.assertEqual(r, ['statutorily'])

    _, r = self.anagrams2.get_anagrams("statutoriness")
    self.assertEqual(r, ['statutoriness'])

    _, r = self.anagrams2.get_anagrams("statutory")
    self.assertEqual(r, ['statutory'])

    _, r = self.anagrams2.get_anagrams("stauffer")
    self.assertEqual(r, ['stauffer'])

    _, r = self.anagrams2.get_anagrams("staunch")
    self.assertEqual(r, ['staunch'])

    _, r = self.anagrams2.get_anagrams("staunchest")
    self.assertEqual(r, ['staunchest'])

    _, r = self.anagrams2.get_anagrams("staunchly")
    self.assertEqual(r, ['staunchly'])

    _, r = self.anagrams2.get_anagrams("staunton")
    self.assertEqual(r, ['staunton'])

    _, r = self.anagrams2.get_anagrams("stave")
    self.assertEqual(r, ['stave'])

    _, r = self.anagrams2.get_anagrams("staved")
    self.assertEqual(r, ['staved'])

    _, r = self.anagrams2.get_anagrams("staves")
    self.assertEqual(r, ['staves'])

    _, r = self.anagrams2.get_anagrams("stay")
    self.assertEqual(r, ['stay'])

    _, r = self.anagrams2.get_anagrams("stayed")
    self.assertEqual(r, ['stayed', 'steady'])

    _, r = self.anagrams2.get_anagrams("staying")
    self.assertEqual(r, ['staying', 'stygian'])

    _, r = self.anagrams2.get_anagrams("stays")
    self.assertEqual(r, ['stays'])

    _, r = self.anagrams2.get_anagrams("stead")
    self.assertEqual(r, ['dates', 'sated', 'stead'])

    _, r = self.anagrams2.get_anagrams("steadfast")
    self.assertEqual(r, ['steadfast'])

    _, r = self.anagrams2.get_anagrams("steadfastly")
    self.assertEqual(r, ['steadfastly'])

    _, r = self.anagrams2.get_anagrams("steadfastness")
    self.assertEqual(r, ['steadfastness'])

    _, r = self.anagrams2.get_anagrams("steadied")
    self.assertEqual(r, ['steadied'])

    _, r = self.anagrams2.get_anagrams("steadier")
    self.assertEqual(r, ['readiest', 'steadier'])

    _, r = self.anagrams2.get_anagrams("steadies")
    self.assertEqual(r, ['steadies'])

    _, r = self.anagrams2.get_anagrams("steadiest")
    self.assertEqual(r, ['steadiest'])

    _, r = self.anagrams2.get_anagrams("steadily")
    self.assertEqual(r, ['steadily'])

    _, r = self.anagrams2.get_anagrams("steadiness")
    self.assertEqual(r, ['steadiness'])

    _, r = self.anagrams2.get_anagrams("steady")
    self.assertEqual(r, ['stayed', 'steady'])

    _, r = self.anagrams2.get_anagrams("steadying")
    self.assertEqual(r, ['steadying'])

    _, r = self.anagrams2.get_anagrams("steak")
    self.assertEqual(r, ['keats', 'skate', 'stake', 'steak', 'takes'])

    _, r = self.anagrams2.get_anagrams("steaks")
    self.assertEqual(r, ['skates', 'stakes', 'steaks'])

    _, r = self.anagrams2.get_anagrams("steal")
    self.assertEqual(r, ['least', 'slate', 'stale', 'steal', 'tales'])

    _, r = self.anagrams2.get_anagrams("stealer")
    self.assertEqual(r, ['realest', 'relates', 'stealer'])

    _, r = self.anagrams2.get_anagrams("stealing")
    self.assertEqual(r, ['stealing'])

    _, r = self.anagrams2.get_anagrams("steals")
    self.assertEqual(r, ['slates', 'steals', 'tassel'])

    _, r = self.anagrams2.get_anagrams("stealth")
    self.assertEqual(r, ['stealth'])

    _, r = self.anagrams2.get_anagrams("stealthily")
    self.assertEqual(r, ['stealthily'])

    _, r = self.anagrams2.get_anagrams("stealthy")
    self.assertEqual(r, ['stealthy'])

    _, r = self.anagrams2.get_anagrams("steam")
    self.assertEqual(r, ['mates', 'meats', 'steam', 'tames', 'teams'])

    _, r = self.anagrams2.get_anagrams("steamboat")
    self.assertEqual(r, ['steamboat'])

    _, r = self.anagrams2.get_anagrams("steamboats")
    self.assertEqual(r, ['steamboats'])

    _, r = self.anagrams2.get_anagrams("steamed")
    self.assertEqual(r, ['steamed'])

    _, r = self.anagrams2.get_anagrams("steamer")
    self.assertEqual(r, ['steamer'])

    _, r = self.anagrams2.get_anagrams("steamers")
    self.assertEqual(r, ['steamers'])

    _, r = self.anagrams2.get_anagrams("steaming")
    self.assertEqual(r, ['steaming'])

    _, r = self.anagrams2.get_anagrams("steams")
    self.assertEqual(r, ['steams'])

    _, r = self.anagrams2.get_anagrams("steamship")
    self.assertEqual(r, ['steamship'])

    _, r = self.anagrams2.get_anagrams("steamships")
    self.assertEqual(r, ['steamships'])

    _, r = self.anagrams2.get_anagrams("steamy")
    self.assertEqual(r, ['steamy'])

    _, r = self.anagrams2.get_anagrams("stearns")
    self.assertEqual(r, ['stearns'])

    _, r = self.anagrams2.get_anagrams("steed")
    self.assertEqual(r, ['steed'])

    _, r = self.anagrams2.get_anagrams("steel")
    self.assertEqual(r, ['sleet', 'steel'])

    _, r = self.anagrams2.get_anagrams("steele")
    self.assertEqual(r, ['steele'])

    _, r = self.anagrams2.get_anagrams("steeled")
    self.assertEqual(r, ['deletes', 'steeled'])

    _, r = self.anagrams2.get_anagrams("steelers")
    self.assertEqual(r, ['steelers'])

    _, r = self.anagrams2.get_anagrams("steeling")
    self.assertEqual(r, ['steeling'])

    _, r = self.anagrams2.get_anagrams("steelmaker")
    self.assertEqual(r, ['steelmaker'])

    _, r = self.anagrams2.get_anagrams("steels")
    self.assertEqual(r, ['steels'])

    _, r = self.anagrams2.get_anagrams("steely")
    self.assertEqual(r, ['steely'])

    _, r = self.anagrams2.get_anagrams("steen")
    self.assertEqual(r, ['steen', 'teens', 'tense'])

    _, r = self.anagrams2.get_anagrams("steep")
    self.assertEqual(r, ['steep'])

    _, r = self.anagrams2.get_anagrams("steeped")
    self.assertEqual(r, ['deepest', 'steeped'])

    _, r = self.anagrams2.get_anagrams("steeper")
    self.assertEqual(r, ['steeper'])

    _, r = self.anagrams2.get_anagrams("steepest")
    self.assertEqual(r, ['steepest'])

    _, r = self.anagrams2.get_anagrams("steeping")
    self.assertEqual(r, ['steeping'])

    _, r = self.anagrams2.get_anagrams("steeple")
    self.assertEqual(r, ['steeple'])

    _, r = self.anagrams2.get_anagrams("steeples")
    self.assertEqual(r, ['steeples'])

    _, r = self.anagrams2.get_anagrams("steeply")
    self.assertEqual(r, ['steeply'])

    _, r = self.anagrams2.get_anagrams("steepness")
    self.assertEqual(r, ['steepness'])

    _, r = self.anagrams2.get_anagrams("steeps")
    self.assertEqual(r, ['steeps'])

    _, r = self.anagrams2.get_anagrams("steer")
    self.assertEqual(r, ['reset', 'steer', 'trees'])

    _, r = self.anagrams2.get_anagrams("steerable")
    self.assertEqual(r, ['steerable'])

    _, r = self.anagrams2.get_anagrams("steered")
    self.assertEqual(r, ['steered'])

    _, r = self.anagrams2.get_anagrams("steering")
    self.assertEqual(r, ['integers', 'steering'])

    _, r = self.anagrams2.get_anagrams("steers")
    self.assertEqual(r, ['resets', 'steers'])

    _, r = self.anagrams2.get_anagrams("stefan")
    self.assertEqual(r, ['fasten', 'stefan'])

    _, r = self.anagrams2.get_anagrams("stegosaurus")
    self.assertEqual(r, ['stegosaurus'])

    _, r = self.anagrams2.get_anagrams("steinbeck")
    self.assertEqual(r, ['steinbeck'])

    _, r = self.anagrams2.get_anagrams("steinberg")
    self.assertEqual(r, ['steinberg'])

    _, r = self.anagrams2.get_anagrams("steiner")
    self.assertEqual(r, ['entries', 'steiner'])

    _, r = self.anagrams2.get_anagrams("stella")
    self.assertEqual(r, ['stella'])

    _, r = self.anagrams2.get_anagrams("stellar")
    self.assertEqual(r, ['stellar'])

    _, r = self.anagrams2.get_anagrams("stem")
    self.assertEqual(r, ['mets', 'stem'])

    _, r = self.anagrams2.get_anagrams("stemmed")
    self.assertEqual(r, ['stemmed'])

    _, r = self.anagrams2.get_anagrams("stemming")
    self.assertEqual(r, ['stemming'])

    _, r = self.anagrams2.get_anagrams("stems")
    self.assertEqual(r, ['stems'])

    _, r = self.anagrams2.get_anagrams("stench")
    self.assertEqual(r, ['stench'])

    _, r = self.anagrams2.get_anagrams("stenches")
    self.assertEqual(r, ['stenches'])

    _, r = self.anagrams2.get_anagrams("stencil")
    self.assertEqual(r, ['clients', 'stencil'])

    _, r = self.anagrams2.get_anagrams("stencils")
    self.assertEqual(r, ['stencils'])

    _, r = self.anagrams2.get_anagrams("stendhal")
    self.assertEqual(r, ['stendhal'])

    _, r = self.anagrams2.get_anagrams("stendler")
    self.assertEqual(r, ['stendler'])

    _, r = self.anagrams2.get_anagrams("stenographer")
    self.assertEqual(r, ['stenographer'])

    _, r = self.anagrams2.get_anagrams("stenographers")
    self.assertEqual(r, ['stenographers'])

    _, r = self.anagrams2.get_anagrams("stenotype")
    self.assertEqual(r, ['stenotype'])

    _, r = self.anagrams2.get_anagrams("step")
    self.assertEqual(r, ['pest', 'pets', 'sept', 'step'])

    _, r = self.anagrams2.get_anagrams("stepchild")
    self.assertEqual(r, ['stepchild'])

    _, r = self.anagrams2.get_anagrams("stephan")
    self.assertEqual(r, ['stephan'])

    _, r = self.anagrams2.get_anagrams("stephanie")
    self.assertEqual(r, ['stephanie'])

    _, r = self.anagrams2.get_anagrams("stephen")
    self.assertEqual(r, ['stephen'])

    _, r = self.anagrams2.get_anagrams("stephens")
    self.assertEqual(r, ['stephens'])

    _, r = self.anagrams2.get_anagrams("stephenson")
    self.assertEqual(r, ['stephenson'])

    _, r = self.anagrams2.get_anagrams("stepmother")
    self.assertEqual(r, ['stepmother'])

    _, r = self.anagrams2.get_anagrams("stepmothers")
    self.assertEqual(r, ['stepmothers'])

    _, r = self.anagrams2.get_anagrams("stepped")
    self.assertEqual(r, ['stepped'])

    _, r = self.anagrams2.get_anagrams("stepper")
    self.assertEqual(r, ['stepper'])

    _, r = self.anagrams2.get_anagrams("stepping")
    self.assertEqual(r, ['stepping'])

    _, r = self.anagrams2.get_anagrams("steps")
    self.assertEqual(r, ['pests', 'steps'])

    _, r = self.anagrams2.get_anagrams("stepson")
    self.assertEqual(r, ['stepson'])

    _, r = self.anagrams2.get_anagrams("stepwise")
    self.assertEqual(r, ['stepwise'])

    _, r = self.anagrams2.get_anagrams("stereo")
    self.assertEqual(r, ['stereo'])

    _, r = self.anagrams2.get_anagrams("stereos")
    self.assertEqual(r, ['orestes', 'stereos'])

    _, r = self.anagrams2.get_anagrams("stereoscopic")
    self.assertEqual(r, ['stereoscopic'])

    _, r = self.anagrams2.get_anagrams("stereotype")
    self.assertEqual(r, ['stereotype'])

    _, r = self.anagrams2.get_anagrams("stereotyped")
    self.assertEqual(r, ['stereotyped'])

    _, r = self.anagrams2.get_anagrams("stereotypes")
    self.assertEqual(r, ['stereotypes'])

    _, r = self.anagrams2.get_anagrams("stereotypical")
    self.assertEqual(r, ['stereotypical'])

    _, r = self.anagrams2.get_anagrams("sterile")
    self.assertEqual(r, ['sterile'])

    _, r = self.anagrams2.get_anagrams("sterilization")
    self.assertEqual(r, ['sterilization'])

    _, r = self.anagrams2.get_anagrams("sterilizations")
    self.assertEqual(r, ['sterilizations'])

    _, r = self.anagrams2.get_anagrams("sterilize")
    self.assertEqual(r, ['listerize', 'sterilize'])

    _, r = self.anagrams2.get_anagrams("sterilized")
    self.assertEqual(r, ['sterilized'])

    _, r = self.anagrams2.get_anagrams("sterilizer")
    self.assertEqual(r, ['sterilizer'])

    _, r = self.anagrams2.get_anagrams("sterilizes")
    self.assertEqual(r, ['listerizes', 'sterilizes'])

    _, r = self.anagrams2.get_anagrams("sterilizing")
    self.assertEqual(r, ['sterilizing'])

    _, r = self.anagrams2.get_anagrams("sterling")
    self.assertEqual(r, ['sterling'])

    _, r = self.anagrams2.get_anagrams("stern")
    self.assertEqual(r, ['ernst', 'rents', 'stern'])

    _, r = self.anagrams2.get_anagrams("sternberg")
    self.assertEqual(r, ['sternberg'])

    _, r = self.anagrams2.get_anagrams("sternly")
    self.assertEqual(r, ['sternly'])

    _, r = self.anagrams2.get_anagrams("sternness")
    self.assertEqual(r, ['sternness'])

    _, r = self.anagrams2.get_anagrams("sterno")
    self.assertEqual(r, ['nestor', 'sterno', 'tenors'])

    _, r = self.anagrams2.get_anagrams("sterns")
    self.assertEqual(r, ['sterns'])

    _, r = self.anagrams2.get_anagrams("stethoscope")
    self.assertEqual(r, ['stethoscope'])

    _, r = self.anagrams2.get_anagrams("stetson")
    self.assertEqual(r, ['stetson'])

    _, r = self.anagrams2.get_anagrams("stetsons")
    self.assertEqual(r, ['stetsons'])

    _, r = self.anagrams2.get_anagrams("steuben")
    self.assertEqual(r, ['steuben'])

    _, r = self.anagrams2.get_anagrams("steve")
    self.assertEqual(r, ['steve'])

    _, r = self.anagrams2.get_anagrams("stevedore")
    self.assertEqual(r, ['stevedore'])

    _, r = self.anagrams2.get_anagrams("steven")
    self.assertEqual(r, ['events', 'steven'])

    _, r = self.anagrams2.get_anagrams("stevens")
    self.assertEqual(r, ['stevens'])

    _, r = self.anagrams2.get_anagrams("stevenson")
    self.assertEqual(r, ['stevenson'])

    _, r = self.anagrams2.get_anagrams("stevie")
    self.assertEqual(r, ['stevie'])

    _, r = self.anagrams2.get_anagrams("stew")
    self.assertEqual(r, ['stew', 'west', 'wets'])

    _, r = self.anagrams2.get_anagrams("steward")
    self.assertEqual(r, ['steward'])

    _, r = self.anagrams2.get_anagrams("stewardess")
    self.assertEqual(r, ['stewardess'])

    _, r = self.anagrams2.get_anagrams("stewards")
    self.assertEqual(r, ['stewards'])

    _, r = self.anagrams2.get_anagrams("stewart")
    self.assertEqual(r, ['stewart'])

    _, r = self.anagrams2.get_anagrams("stewed")
    self.assertEqual(r, ['stewed'])

    _, r = self.anagrams2.get_anagrams("stews")
    self.assertEqual(r, ['stews'])

    _, r = self.anagrams2.get_anagrams("stick")
    self.assertEqual(r, ['stick', 'ticks'])

    _, r = self.anagrams2.get_anagrams("sticker")
    self.assertEqual(r, ['rickets', 'sticker', 'tickers'])

    _, r = self.anagrams2.get_anagrams("stickers")
    self.assertEqual(r, ['stickers'])

    _, r = self.anagrams2.get_anagrams("stickier")
    self.assertEqual(r, ['stickier'])

    _, r = self.anagrams2.get_anagrams("stickiest")
    self.assertEqual(r, ['stickiest'])

    _, r = self.anagrams2.get_anagrams("stickily")
    self.assertEqual(r, ['stickily'])

    _, r = self.anagrams2.get_anagrams("stickiness")
    self.assertEqual(r, ['stickiness'])

    _, r = self.anagrams2.get_anagrams("sticking")
    self.assertEqual(r, ['sticking'])

    _, r = self.anagrams2.get_anagrams("stickleback")
    self.assertEqual(r, ['stickleback'])

    _, r = self.anagrams2.get_anagrams("sticks")
    self.assertEqual(r, ['sticks'])

    _, r = self.anagrams2.get_anagrams("sticky")
    self.assertEqual(r, ['sticky'])

    _, r = self.anagrams2.get_anagrams("stiff")
    self.assertEqual(r, ['stiff'])

    _, r = self.anagrams2.get_anagrams("stiffen")
    self.assertEqual(r, ['stiffen'])

    _, r = self.anagrams2.get_anagrams("stiffens")
    self.assertEqual(r, ['stiffens'])

    _, r = self.anagrams2.get_anagrams("stiffer")
    self.assertEqual(r, ['stiffer'])

    _, r = self.anagrams2.get_anagrams("stiffest")
    self.assertEqual(r, ['stiffest'])

    _, r = self.anagrams2.get_anagrams("stiffly")
    self.assertEqual(r, ['stiffly'])

    _, r = self.anagrams2.get_anagrams("stiffness")
    self.assertEqual(r, ['stiffness'])

    _, r = self.anagrams2.get_anagrams("stiffs")
    self.assertEqual(r, ['stiffs'])

    _, r = self.anagrams2.get_anagrams("stifle")
    self.assertEqual(r, ['itself', 'stifle'])

    _, r = self.anagrams2.get_anagrams("stifled")
    self.assertEqual(r, ['stifled'])

    _, r = self.anagrams2.get_anagrams("stifles")
    self.assertEqual(r, ['stifles'])

    _, r = self.anagrams2.get_anagrams("stifling")
    self.assertEqual(r, ['stifling'])

    _, r = self.anagrams2.get_anagrams("stigma")
    self.assertEqual(r, ['stigma'])

    _, r = self.anagrams2.get_anagrams("stigmata")
    self.assertEqual(r, ['stigmata'])

    _, r = self.anagrams2.get_anagrams("stile")
    self.assertEqual(r, ['islet', 'stile', 'tiles'])

    _, r = self.anagrams2.get_anagrams("stiles")
    self.assertEqual(r, ['islets', 'stiles'])

    _, r = self.anagrams2.get_anagrams("stiletto")
    self.assertEqual(r, ['stiletto'])

    _, r = self.anagrams2.get_anagrams("still")
    self.assertEqual(r, ['still', 'tills'])

    _, r = self.anagrams2.get_anagrams("stillbirth")
    self.assertEqual(r, ['stillbirth'])

    _, r = self.anagrams2.get_anagrams("stillborn")
    self.assertEqual(r, ['stillborn'])

    _, r = self.anagrams2.get_anagrams("stilled")
    self.assertEqual(r, ['stilled'])

    _, r = self.anagrams2.get_anagrams("stiller")
    self.assertEqual(r, ['stiller', 'tillers'])

    _, r = self.anagrams2.get_anagrams("stillest")
    self.assertEqual(r, ['stillest'])

    _, r = self.anagrams2.get_anagrams("stilling")
    self.assertEqual(r, ['stilling'])

    _, r = self.anagrams2.get_anagrams("stillness")
    self.assertEqual(r, ['stillness'])

    _, r = self.anagrams2.get_anagrams("stills")
    self.assertEqual(r, ['stills'])

    _, r = self.anagrams2.get_anagrams("stillwell")
    self.assertEqual(r, ['stillwell'])

    _, r = self.anagrams2.get_anagrams("stilt")
    self.assertEqual(r, ['stilt', 'tilts'])

    _, r = self.anagrams2.get_anagrams("stilts")
    self.assertEqual(r, ['stilts'])

    _, r = self.anagrams2.get_anagrams("stimson")
    self.assertEqual(r, ['stimson'])

    _, r = self.anagrams2.get_anagrams("stimulant")
    self.assertEqual(r, ['stimulant'])

    _, r = self.anagrams2.get_anagrams("stimulants")
    self.assertEqual(r, ['stimulants'])

    _, r = self.anagrams2.get_anagrams("stimulate")
    self.assertEqual(r, ['mutilates', 'stimulate'])

    _, r = self.anagrams2.get_anagrams("stimulated")
    self.assertEqual(r, ['stimulated'])

    _, r = self.anagrams2.get_anagrams("stimulates")
    self.assertEqual(r, ['stimulates'])

    _, r = self.anagrams2.get_anagrams("stimulating")
    self.assertEqual(r, ['stimulating'])

    _, r = self.anagrams2.get_anagrams("stimulation")
    self.assertEqual(r, ['stimulation'])

    _, r = self.anagrams2.get_anagrams("stimulations")
    self.assertEqual(r, ['stimulations'])

    _, r = self.anagrams2.get_anagrams("stimulative")
    self.assertEqual(r, ['stimulative'])

    _, r = self.anagrams2.get_anagrams("stimuli")
    self.assertEqual(r, ['stimuli'])

    _, r = self.anagrams2.get_anagrams("stimulus")
    self.assertEqual(r, ['stimulus'])

    _, r = self.anagrams2.get_anagrams("sting")
    self.assertEqual(r, ['sting'])

    _, r = self.anagrams2.get_anagrams("stinging")
    self.assertEqual(r, ['stinging'])

    _, r = self.anagrams2.get_anagrams("stings")
    self.assertEqual(r, ['stings'])

    _, r = self.anagrams2.get_anagrams("stingy")
    self.assertEqual(r, ['stingy'])

    _, r = self.anagrams2.get_anagrams("stink")
    self.assertEqual(r, ['knits', 'stink'])

    _, r = self.anagrams2.get_anagrams("stinker")
    self.assertEqual(r, ['stinker', 'tinkers'])

    _, r = self.anagrams2.get_anagrams("stinkers")
    self.assertEqual(r, ['stinkers'])

    _, r = self.anagrams2.get_anagrams("stinking")
    self.assertEqual(r, ['stinking'])

    _, r = self.anagrams2.get_anagrams("stinks")
    self.assertEqual(r, ['stinks'])

    _, r = self.anagrams2.get_anagrams("stint")
    self.assertEqual(r, ['stint', 'tints'])

    _, r = self.anagrams2.get_anagrams("stipend")
    self.assertEqual(r, ['stipend'])

    _, r = self.anagrams2.get_anagrams("stipends")
    self.assertEqual(r, ['stipends'])

    _, r = self.anagrams2.get_anagrams("stipulate")
    self.assertEqual(r, ['stipulate'])

    _, r = self.anagrams2.get_anagrams("stipulated")
    self.assertEqual(r, ['stipulated'])

    _, r = self.anagrams2.get_anagrams("stipulates")
    self.assertEqual(r, ['stipulates'])

    _, r = self.anagrams2.get_anagrams("stipulating")
    self.assertEqual(r, ['stipulating'])

    _, r = self.anagrams2.get_anagrams("stipulation")
    self.assertEqual(r, ['stipulation'])

    _, r = self.anagrams2.get_anagrams("stipulations")
    self.assertEqual(r, ['stipulations'])

    _, r = self.anagrams2.get_anagrams("stir")
    self.assertEqual(r, ['stir'])

    _, r = self.anagrams2.get_anagrams("stirling")
    self.assertEqual(r, ['stirling'])

    _, r = self.anagrams2.get_anagrams("stirred")
    self.assertEqual(r, ['stirred', 'strider'])

    _, r = self.anagrams2.get_anagrams("stirrer")
    self.assertEqual(r, ['stirrer'])

    _, r = self.anagrams2.get_anagrams("stirrers")
    self.assertEqual(r, ['stirrers'])

    _, r = self.anagrams2.get_anagrams("stirring")
    self.assertEqual(r, ['stirring'])

    _, r = self.anagrams2.get_anagrams("stirringly")
    self.assertEqual(r, ['stirringly'])

    _, r = self.anagrams2.get_anagrams("stirrings")
    self.assertEqual(r, ['stirrings'])

    _, r = self.anagrams2.get_anagrams("stirrup")
    self.assertEqual(r, ['stirrup'])

    _, r = self.anagrams2.get_anagrams("stirs")
    self.assertEqual(r, ['stirs'])

    _, r = self.anagrams2.get_anagrams("stitch")
    self.assertEqual(r, ['stitch'])

    _, r = self.anagrams2.get_anagrams("stitched")
    self.assertEqual(r, ['stitched'])

    _, r = self.anagrams2.get_anagrams("stitches")
    self.assertEqual(r, ['stitches'])

    _, r = self.anagrams2.get_anagrams("stitching")
    self.assertEqual(r, ['stitching'])

    _, r = self.anagrams2.get_anagrams("stochastic")
    self.assertEqual(r, ['stochastic'])

    _, r = self.anagrams2.get_anagrams("stochastically")
    self.assertEqual(r, ['stochastically'])

    _, r = self.anagrams2.get_anagrams("stock")
    self.assertEqual(r, ['stock'])

    _, r = self.anagrams2.get_anagrams("stockade")
    self.assertEqual(r, ['stockade'])

    _, r = self.anagrams2.get_anagrams("stockades")
    self.assertEqual(r, ['stockades'])

    _, r = self.anagrams2.get_anagrams("stockbroker")
    self.assertEqual(r, ['stockbroker'])

    _, r = self.anagrams2.get_anagrams("stocked")
    self.assertEqual(r, ['stocked'])

    _, r = self.anagrams2.get_anagrams("stocker")
    self.assertEqual(r, ['rockets', 'stocker'])

    _, r = self.anagrams2.get_anagrams("stockers")
    self.assertEqual(r, ['stockers'])

    _, r = self.anagrams2.get_anagrams("stockholder")
    self.assertEqual(r, ['stockholder'])

    _, r = self.anagrams2.get_anagrams("stockholders")
    self.assertEqual(r, ['stockholders'])

    _, r = self.anagrams2.get_anagrams("stockholm")
    self.assertEqual(r, ['stockholm'])

    _, r = self.anagrams2.get_anagrams("stocking")
    self.assertEqual(r, ['stocking'])

    _, r = self.anagrams2.get_anagrams("stockings")
    self.assertEqual(r, ['stockings'])

    _, r = self.anagrams2.get_anagrams("stockpile")
    self.assertEqual(r, ['stockpile'])

    _, r = self.anagrams2.get_anagrams("stockroom")
    self.assertEqual(r, ['stockroom'])

    _, r = self.anagrams2.get_anagrams("stocks")
    self.assertEqual(r, ['stocks'])

    _, r = self.anagrams2.get_anagrams("stockton")
    self.assertEqual(r, ['stockton'])

    _, r = self.anagrams2.get_anagrams("stocky")
    self.assertEqual(r, ['stocky'])

    _, r = self.anagrams2.get_anagrams("stodgy")
    self.assertEqual(r, ['stodgy'])

    _, r = self.anagrams2.get_anagrams("stoichiometry")
    self.assertEqual(r, ['stoichiometry'])

    _, r = self.anagrams2.get_anagrams("stoke")
    self.assertEqual(r, ['stoke'])

    _, r = self.anagrams2.get_anagrams("stokes")
    self.assertEqual(r, ['stokes'])

    _, r = self.anagrams2.get_anagrams("stole")
    self.assertEqual(r, ['stole'])

    _, r = self.anagrams2.get_anagrams("stolen")
    self.assertEqual(r, ['stolen'])

    _, r = self.anagrams2.get_anagrams("stoles")
    self.assertEqual(r, ['stoles'])

    _, r = self.anagrams2.get_anagrams("stolid")
    self.assertEqual(r, ['stolid'])

    _, r = self.anagrams2.get_anagrams("stomach")
    self.assertEqual(r, ['stomach'])

    _, r = self.anagrams2.get_anagrams("stomached")
    self.assertEqual(r, ['stomached'])

    _, r = self.anagrams2.get_anagrams("stomacher")
    self.assertEqual(r, ['stomacher'])

    _, r = self.anagrams2.get_anagrams("stomaches")
    self.assertEqual(r, ['stomaches'])

    _, r = self.anagrams2.get_anagrams("stomaching")
    self.assertEqual(r, ['stomaching'])

    _, r = self.anagrams2.get_anagrams("stomp")
    self.assertEqual(r, ['stomp'])

    _, r = self.anagrams2.get_anagrams("stone")
    self.assertEqual(r, ['notes', 'onset', 'stone', 'tones'])

    _, r = self.anagrams2.get_anagrams("stoned")
    self.assertEqual(r, ['stoned'])

    _, r = self.anagrams2.get_anagrams("stonehenge")
    self.assertEqual(r, ['stonehenge'])

    _, r = self.anagrams2.get_anagrams("stones")
    self.assertEqual(r, ['onsets', 'stones'])

    _, r = self.anagrams2.get_anagrams("stoning")
    self.assertEqual(r, ['stoning'])

    _, r = self.anagrams2.get_anagrams("stony")
    self.assertEqual(r, ['stony', 'tyson'])

    _, r = self.anagrams2.get_anagrams("stood")
    self.assertEqual(r, ['stood'])

    _, r = self.anagrams2.get_anagrams("stooge")
    self.assertEqual(r, ['stooge'])

    _, r = self.anagrams2.get_anagrams("stool")
    self.assertEqual(r, ['loots', 'stool', 'tools'])

    _, r = self.anagrams2.get_anagrams("stoop")
    self.assertEqual(r, ['stoop'])

    _, r = self.anagrams2.get_anagrams("stooped")
    self.assertEqual(r, ['stooped'])

    _, r = self.anagrams2.get_anagrams("stooping")
    self.assertEqual(r, ['stooping'])

    _, r = self.anagrams2.get_anagrams("stoops")
    self.assertEqual(r, ['stoops'])

    _, r = self.anagrams2.get_anagrams("stop")
    self.assertEqual(r, ['opts', 'post', 'pots', 'spot', 'stop', 'tops'])

    _, r = self.anagrams2.get_anagrams("stopcock")
    self.assertEqual(r, ['stopcock'])

    _, r = self.anagrams2.get_anagrams("stopcocks")
    self.assertEqual(r, ['stopcocks'])

    _, r = self.anagrams2.get_anagrams("stopgap")
    self.assertEqual(r, ['stopgap'])

    _, r = self.anagrams2.get_anagrams("stopover")
    self.assertEqual(r, ['stopover'])

    _, r = self.anagrams2.get_anagrams("stoppable")
    self.assertEqual(r, ['stoppable'])

    _, r = self.anagrams2.get_anagrams("stoppage")
    self.assertEqual(r, ['stoppage'])

    _, r = self.anagrams2.get_anagrams("stopped")
    self.assertEqual(r, ['stopped'])

    _, r = self.anagrams2.get_anagrams("stopper")
    self.assertEqual(r, ['stopper'])

    _, r = self.anagrams2.get_anagrams("stoppers")
    self.assertEqual(r, ['stoppers'])

    _, r = self.anagrams2.get_anagrams("stopping")
    self.assertEqual(r, ['stopping'])

    _, r = self.anagrams2.get_anagrams("stops")
    self.assertEqual(r, ['posts', 'spots', 'stops'])

    _, r = self.anagrams2.get_anagrams("stopwatch")
    self.assertEqual(r, ['stopwatch'])

    _, r = self.anagrams2.get_anagrams("storage")
    self.assertEqual(r, ['storage'])

    _, r = self.anagrams2.get_anagrams("storages")
    self.assertEqual(r, ['storages'])

    _, r = self.anagrams2.get_anagrams("store")
    self.assertEqual(r, ['store'])

    _, r = self.anagrams2.get_anagrams("stored")
    self.assertEqual(r, ['dorset', 'sorted', 'stored', 'strode'])

    _, r = self.anagrams2.get_anagrams("storehouse")
    self.assertEqual(r, ['storehouse'])

    _, r = self.anagrams2.get_anagrams("storehouses")
    self.assertEqual(r, ['storehouses'])

    _, r = self.anagrams2.get_anagrams("storekeeper")
    self.assertEqual(r, ['storekeeper'])

    _, r = self.anagrams2.get_anagrams("storeroom")
    self.assertEqual(r, ['storeroom'])

    _, r = self.anagrams2.get_anagrams("stores")
    self.assertEqual(r, ['sorest', 'stores'])

    _, r = self.anagrams2.get_anagrams("storey")
    self.assertEqual(r, ['oyster', 'storey'])

    _, r = self.anagrams2.get_anagrams("storeyed")
    self.assertEqual(r, ['storeyed'])

    _, r = self.anagrams2.get_anagrams("storeys")
    self.assertEqual(r, ['oysters', 'storeys'])

    _, r = self.anagrams2.get_anagrams("storied")
    self.assertEqual(r, ['editors', 'storied'])

    _, r = self.anagrams2.get_anagrams("stories")
    self.assertEqual(r, ['stories'])

    _, r = self.anagrams2.get_anagrams("storing")
    self.assertEqual(r, ['sorting', 'storing'])

    _, r = self.anagrams2.get_anagrams("stork")
    self.assertEqual(r, ['stork'])

    _, r = self.anagrams2.get_anagrams("storks")
    self.assertEqual(r, ['storks'])

    _, r = self.anagrams2.get_anagrams("storm")
    self.assertEqual(r, ['storm', 'strom'])

    _, r = self.anagrams2.get_anagrams("stormed")
    self.assertEqual(r, ['stormed'])

    _, r = self.anagrams2.get_anagrams("stormier")
    self.assertEqual(r, ['stormier'])

    _, r = self.anagrams2.get_anagrams("stormiest")
    self.assertEqual(r, ['stormiest'])

    _, r = self.anagrams2.get_anagrams("storminess")
    self.assertEqual(r, ['storminess'])

    _, r = self.anagrams2.get_anagrams("storming")
    self.assertEqual(r, ['storming'])

    _, r = self.anagrams2.get_anagrams("storms")
    self.assertEqual(r, ['storms'])

    _, r = self.anagrams2.get_anagrams("stormy")
    self.assertEqual(r, ['stormy'])

    _, r = self.anagrams2.get_anagrams("story")
    self.assertEqual(r, ['story'])

    _, r = self.anagrams2.get_anagrams("storyboard")
    self.assertEqual(r, ['storyboard'])

    _, r = self.anagrams2.get_anagrams("storyteller")
    self.assertEqual(r, ['storyteller'])

    _, r = self.anagrams2.get_anagrams("stouffer")
    self.assertEqual(r, ['stouffer'])

    _, r = self.anagrams2.get_anagrams("stout")
    self.assertEqual(r, ['stout'])

    _, r = self.anagrams2.get_anagrams("stouter")
    self.assertEqual(r, ['stouter'])

    _, r = self.anagrams2.get_anagrams("stoutest")
    self.assertEqual(r, ['stoutest'])

    _, r = self.anagrams2.get_anagrams("stoutly")
    self.assertEqual(r, ['stoutly'])

    _, r = self.anagrams2.get_anagrams("stoutness")
    self.assertEqual(r, ['stoutness'])

    _, r = self.anagrams2.get_anagrams("stove")
    self.assertEqual(r, ['stove', 'votes'])

    _, r = self.anagrams2.get_anagrams("stoves")
    self.assertEqual(r, ['stoves'])

    _, r = self.anagrams2.get_anagrams("stow")
    self.assertEqual(r, ['stow', 'twos'])

    _, r = self.anagrams2.get_anagrams("stowe")
    self.assertEqual(r, ['stowe'])

    _, r = self.anagrams2.get_anagrams("stowed")
    self.assertEqual(r, ['stowed'])

    _, r = self.anagrams2.get_anagrams("straddle")
    self.assertEqual(r, ['straddle'])

    _, r = self.anagrams2.get_anagrams("strafe")
    self.assertEqual(r, ['faster', 'strafe'])

    _, r = self.anagrams2.get_anagrams("straggle")
    self.assertEqual(r, ['straggle'])

    _, r = self.anagrams2.get_anagrams("straggled")
    self.assertEqual(r, ['straggled'])

    _, r = self.anagrams2.get_anagrams("straggler")
    self.assertEqual(r, ['straggler'])

    _, r = self.anagrams2.get_anagrams("stragglers")
    self.assertEqual(r, ['stragglers'])

    _, r = self.anagrams2.get_anagrams("straggles")
    self.assertEqual(r, ['straggles'])

    _, r = self.anagrams2.get_anagrams("straggling")
    self.assertEqual(r, ['straggling'])

    _, r = self.anagrams2.get_anagrams("straight")
    self.assertEqual(r, ['straight'])

    _, r = self.anagrams2.get_anagrams("straightaway")
    self.assertEqual(r, ['straightaway'])

    _, r = self.anagrams2.get_anagrams("straighten")
    self.assertEqual(r, ['shattering', 'straighten'])

    _, r = self.anagrams2.get_anagrams("straightened")
    self.assertEqual(r, ['straightened'])

    _, r = self.anagrams2.get_anagrams("straightens")
    self.assertEqual(r, ['straightens'])

    _, r = self.anagrams2.get_anagrams("straighter")
    self.assertEqual(r, ['straighter'])

    _, r = self.anagrams2.get_anagrams("straightest")
    self.assertEqual(r, ['straightest'])

    _, r = self.anagrams2.get_anagrams("straightforward")
    self.assertEqual(r, ['straightforward'])

    _, r = self.anagrams2.get_anagrams("straightforwardly")
    self.assertEqual(r, ['straightforwardly'])

    _, r = self.anagrams2.get_anagrams("straightforwardness")
    self.assertEqual(r, ['straightforwardness'])

    _, r = self.anagrams2.get_anagrams("straightness")
    self.assertEqual(r, ['straightness'])

    _, r = self.anagrams2.get_anagrams("straightway")
    self.assertEqual(r, ['straightway'])

    _, r = self.anagrams2.get_anagrams("strain")
    self.assertEqual(r, ['strain', 'trains'])

    _, r = self.anagrams2.get_anagrams("strained")
    self.assertEqual(r, ['strained'])

    _, r = self.anagrams2.get_anagrams("strainer")
    self.assertEqual(r, ['restrain', 'retrains', 'strainer', 'terrains', 'trainers'])

    _, r = self.anagrams2.get_anagrams("strainers")
    self.assertEqual(r, ['restrains', 'strainers'])

    _, r = self.anagrams2.get_anagrams("straining")
    self.assertEqual(r, ['straining'])

    _, r = self.anagrams2.get_anagrams("strains")
    self.assertEqual(r, ['strains'])

    _, r = self.anagrams2.get_anagrams("strait")
    self.assertEqual(r, ['artist', 'strait', 'traits'])

    _, r = self.anagrams2.get_anagrams("straiten")
    self.assertEqual(r, ['straiten', 'transite'])

    _, r = self.anagrams2.get_anagrams("straits")
    self.assertEqual(r, ['artists', 'straits'])

    _, r = self.anagrams2.get_anagrams("strand")
    self.assertEqual(r, ['strand'])

    _, r = self.anagrams2.get_anagrams("stranded")
    self.assertEqual(r, ['stranded'])

    _, r = self.anagrams2.get_anagrams("stranding")
    self.assertEqual(r, ['stranding'])

    _, r = self.anagrams2.get_anagrams("strands")
    self.assertEqual(r, ['strands'])

    _, r = self.anagrams2.get_anagrams("strange")
    self.assertEqual(r, ['sargent', 'strange'])

    _, r = self.anagrams2.get_anagrams("strangely")
    self.assertEqual(r, ['strangely'])

    _, r = self.anagrams2.get_anagrams("strangeness")
    self.assertEqual(r, ['strangeness'])

    _, r = self.anagrams2.get_anagrams("stranger")
    self.assertEqual(r, ['stranger'])

    _, r = self.anagrams2.get_anagrams("strangers")
    self.assertEqual(r, ['strangers'])

    _, r = self.anagrams2.get_anagrams("strangest")
    self.assertEqual(r, ['strangest'])

    _, r = self.anagrams2.get_anagrams("strangle")
    self.assertEqual(r, ['strangle'])

    _, r = self.anagrams2.get_anagrams("strangled")
    self.assertEqual(r, ['strangled'])

    _, r = self.anagrams2.get_anagrams("strangler")
    self.assertEqual(r, ['strangler'])

    _, r = self.anagrams2.get_anagrams("stranglers")
    self.assertEqual(r, ['stranglers'])

    _, r = self.anagrams2.get_anagrams("strangles")
    self.assertEqual(r, ['strangles'])

    _, r = self.anagrams2.get_anagrams("strangling")
    self.assertEqual(r, ['strangling'])

    _, r = self.anagrams2.get_anagrams("stranglings")
    self.assertEqual(r, ['stranglings'])

    _, r = self.anagrams2.get_anagrams("strangulation")
    self.assertEqual(r, ['strangulation'])

    _, r = self.anagrams2.get_anagrams("strangulations")
    self.assertEqual(r, ['strangulations'])

    _, r = self.anagrams2.get_anagrams("strap")
    self.assertEqual(r, ['parts', 'strap', 'traps'])

    _, r = self.anagrams2.get_anagrams("straps")
    self.assertEqual(r, ['straps'])

    _, r = self.anagrams2.get_anagrams("strasbourg")
    self.assertEqual(r, ['strasbourg'])

    _, r = self.anagrams2.get_anagrams("stratagem")
    self.assertEqual(r, ['stratagem'])

    _, r = self.anagrams2.get_anagrams("stratagems")
    self.assertEqual(r, ['stratagems'])

    _, r = self.anagrams2.get_anagrams("strategic")
    self.assertEqual(r, ['strategic'])

    _, r = self.anagrams2.get_anagrams("strategies")
    self.assertEqual(r, ['strategies'])

    _, r = self.anagrams2.get_anagrams("strategist")
    self.assertEqual(r, ['strategist'])

    _, r = self.anagrams2.get_anagrams("strategy")
    self.assertEqual(r, ['strategy'])

    _, r = self.anagrams2.get_anagrams("stratford")
    self.assertEqual(r, ['stratford'])

    _, r = self.anagrams2.get_anagrams("stratification")
    self.assertEqual(r, ['stratification'])

    _, r = self.anagrams2.get_anagrams("stratifications")
    self.assertEqual(r, ['stratifications'])

    _, r = self.anagrams2.get_anagrams("stratified")
    self.assertEqual(r, ['stratified'])

    _, r = self.anagrams2.get_anagrams("stratifies")
    self.assertEqual(r, ['stratifies'])

    _, r = self.anagrams2.get_anagrams("stratify")
    self.assertEqual(r, ['stratify'])

    _, r = self.anagrams2.get_anagrams("stratosphere")
    self.assertEqual(r, ['stratosphere'])

    _, r = self.anagrams2.get_anagrams("stratospheric")
    self.assertEqual(r, ['stratospheric'])

    _, r = self.anagrams2.get_anagrams("stratton")
    self.assertEqual(r, ['stratton'])

    _, r = self.anagrams2.get_anagrams("stratum")
    self.assertEqual(r, ['stratum'])

    _, r = self.anagrams2.get_anagrams("strauss")
    self.assertEqual(r, ['strauss'])

    _, r = self.anagrams2.get_anagrams("stravinsky")
    self.assertEqual(r, ['stravinsky'])

    _, r = self.anagrams2.get_anagrams("straw")
    self.assertEqual(r, ['straw', 'warts'])

    _, r = self.anagrams2.get_anagrams("strawberries")
    self.assertEqual(r, ['strawberries'])

    _, r = self.anagrams2.get_anagrams("strawberry")
    self.assertEqual(r, ['strawberry'])

    _, r = self.anagrams2.get_anagrams("straws")
    self.assertEqual(r, ['straws'])

    _, r = self.anagrams2.get_anagrams("stray")
    self.assertEqual(r, ['satyr', 'stray', 'trays'])

    _, r = self.anagrams2.get_anagrams("strayed")
    self.assertEqual(r, ['strayed'])

    _, r = self.anagrams2.get_anagrams("strays")
    self.assertEqual(r, ['strays'])

    _, r = self.anagrams2.get_anagrams("streak")
    self.assertEqual(r, ['skater', 'streak', 'takers'])

    _, r = self.anagrams2.get_anagrams("streaked")
    self.assertEqual(r, ['streaked'])

    _, r = self.anagrams2.get_anagrams("streaks")
    self.assertEqual(r, ['skaters', 'streaks'])

    _, r = self.anagrams2.get_anagrams("stream")
    self.assertEqual(r, ['master', 'stream'])

    _, r = self.anagrams2.get_anagrams("streamed")
    self.assertEqual(r, ['mastered', 'streamed'])

    _, r = self.anagrams2.get_anagrams("streamer")
    self.assertEqual(r, ['streamer'])

    _, r = self.anagrams2.get_anagrams("streamers")
    self.assertEqual(r, ['streamers'])

    _, r = self.anagrams2.get_anagrams("streaming")
    self.assertEqual(r, ['emigrants', 'mastering', 'streaming'])

    _, r = self.anagrams2.get_anagrams("streamline")
    self.assertEqual(r, ['streamline'])

    _, r = self.anagrams2.get_anagrams("streamlined")
    self.assertEqual(r, ['streamlined'])

    _, r = self.anagrams2.get_anagrams("streamliner")
    self.assertEqual(r, ['streamliner'])

    _, r = self.anagrams2.get_anagrams("streamlines")
    self.assertEqual(r, ['streamlines'])

    _, r = self.anagrams2.get_anagrams("streamlining")
    self.assertEqual(r, ['streamlining'])

    _, r = self.anagrams2.get_anagrams("streams")
    self.assertEqual(r, ['masters', 'streams'])

    _, r = self.anagrams2.get_anagrams("street")
    self.assertEqual(r, ['setter', 'street', 'tester'])

    _, r = self.anagrams2.get_anagrams("streetcar")
    self.assertEqual(r, ['streetcar'])

    _, r = self.anagrams2.get_anagrams("streetcars")
    self.assertEqual(r, ['streetcars'])

    _, r = self.anagrams2.get_anagrams("streeters")
    self.assertEqual(r, ['streeters'])

    _, r = self.anagrams2.get_anagrams("streets")
    self.assertEqual(r, ['setters', 'streets', 'testers'])

    _, r = self.anagrams2.get_anagrams("strength")
    self.assertEqual(r, ['strength'])

    _, r = self.anagrams2.get_anagrams("strengthen")
    self.assertEqual(r, ['strengthen'])

    _, r = self.anagrams2.get_anagrams("strengthened")
    self.assertEqual(r, ['strengthened'])

    _, r = self.anagrams2.get_anagrams("strengthener")
    self.assertEqual(r, ['strengthener'])

    _, r = self.anagrams2.get_anagrams("strengthening")
    self.assertEqual(r, ['strengthening'])

    _, r = self.anagrams2.get_anagrams("strengthens")
    self.assertEqual(r, ['strengthens'])

    _, r = self.anagrams2.get_anagrams("strengths")
    self.assertEqual(r, ['strengths'])

    _, r = self.anagrams2.get_anagrams("strenuous")
    self.assertEqual(r, ['strenuous'])

    _, r = self.anagrams2.get_anagrams("strenuously")
    self.assertEqual(r, ['strenuously'])

    _, r = self.anagrams2.get_anagrams("streptococcus")
    self.assertEqual(r, ['streptococcus'])

    _, r = self.anagrams2.get_anagrams("stress")
    self.assertEqual(r, ['stress'])

    _, r = self.anagrams2.get_anagrams("stressed")
    self.assertEqual(r, ['desserts', 'stressed'])

    _, r = self.anagrams2.get_anagrams("stresses")
    self.assertEqual(r, ['stresses'])

    _, r = self.anagrams2.get_anagrams("stressful")
    self.assertEqual(r, ['stressful'])

    _, r = self.anagrams2.get_anagrams("stressing")
    self.assertEqual(r, ['stressing'])

    _, r = self.anagrams2.get_anagrams("stretch")
    self.assertEqual(r, ['stretch'])

    _, r = self.anagrams2.get_anagrams("stretched")
    self.assertEqual(r, ['stretched'])

    _, r = self.anagrams2.get_anagrams("stretcher")
    self.assertEqual(r, ['stretcher'])

    _, r = self.anagrams2.get_anagrams("stretchers")
    self.assertEqual(r, ['stretchers'])

    _, r = self.anagrams2.get_anagrams("stretches")
    self.assertEqual(r, ['stretches'])

    _, r = self.anagrams2.get_anagrams("stretching")
    self.assertEqual(r, ['stretching'])

    _, r = self.anagrams2.get_anagrams("strew")
    self.assertEqual(r, ['strew', 'wrest'])

    _, r = self.anagrams2.get_anagrams("strewn")
    self.assertEqual(r, ['strewn'])

    _, r = self.anagrams2.get_anagrams("strews")
    self.assertEqual(r, ['strews'])

    _, r = self.anagrams2.get_anagrams("stricken")
    self.assertEqual(r, ['stricken'])

    _, r = self.anagrams2.get_anagrams("strickland")
    self.assertEqual(r, ['strickland'])

    _, r = self.anagrams2.get_anagrams("strict")
    self.assertEqual(r, ['strict'])

    _, r = self.anagrams2.get_anagrams("stricter")
    self.assertEqual(r, ['restrict', 'stricter'])

    _, r = self.anagrams2.get_anagrams("strictest")
    self.assertEqual(r, ['strictest'])

    _, r = self.anagrams2.get_anagrams("strictly")
    self.assertEqual(r, ['strictly'])

    _, r = self.anagrams2.get_anagrams("strictness")
    self.assertEqual(r, ['strictness'])

    _, r = self.anagrams2.get_anagrams("stricture")
    self.assertEqual(r, ['stricture'])

    _, r = self.anagrams2.get_anagrams("stride")
    self.assertEqual(r, ['driest', 'stride'])

    _, r = self.anagrams2.get_anagrams("strider")
    self.assertEqual(r, ['stirred', 'strider'])

    _, r = self.anagrams2.get_anagrams("strides")
    self.assertEqual(r, ['strides'])

    _, r = self.anagrams2.get_anagrams("striding")
    self.assertEqual(r, ['striding'])

    _, r = self.anagrams2.get_anagrams("strife")
    self.assertEqual(r, ['sifter', 'strife'])

    _, r = self.anagrams2.get_anagrams("strike")
    self.assertEqual(r, ['strike'])

    _, r = self.anagrams2.get_anagrams("strikebreaker")
    self.assertEqual(r, ['strikebreaker'])

    _, r = self.anagrams2.get_anagrams("striker")
    self.assertEqual(r, ['striker'])

    _, r = self.anagrams2.get_anagrams("strikers")
    self.assertEqual(r, ['strikers'])

    _, r = self.anagrams2.get_anagrams("strikes")
    self.assertEqual(r, ['strikes'])

    _, r = self.anagrams2.get_anagrams("striking")
    self.assertEqual(r, ['skirting', 'striking'])

    _, r = self.anagrams2.get_anagrams("strikingly")
    self.assertEqual(r, ['strikingly'])

    _, r = self.anagrams2.get_anagrams("strindberg")
    self.assertEqual(r, ['strindberg'])

    _, r = self.anagrams2.get_anagrams("string")
    self.assertEqual(r, ['string'])

    _, r = self.anagrams2.get_anagrams("stringed")
    self.assertEqual(r, ['stringed'])

    _, r = self.anagrams2.get_anagrams("stringent")
    self.assertEqual(r, ['stringent'])

    _, r = self.anagrams2.get_anagrams("stringently")
    self.assertEqual(r, ['stringently'])

    _, r = self.anagrams2.get_anagrams("stringer")
    self.assertEqual(r, ['stringer'])

    _, r = self.anagrams2.get_anagrams("stringers")
    self.assertEqual(r, ['stringers'])

    _, r = self.anagrams2.get_anagrams("stringier")
    self.assertEqual(r, ['stringier'])

    _, r = self.anagrams2.get_anagrams("stringiest")
    self.assertEqual(r, ['stringiest'])

    _, r = self.anagrams2.get_anagrams("stringiness")
    self.assertEqual(r, ['stringiness'])

    _, r = self.anagrams2.get_anagrams("stringing")
    self.assertEqual(r, ['stringing'])

    _, r = self.anagrams2.get_anagrams("strings")
    self.assertEqual(r, ['strings'])

    _, r = self.anagrams2.get_anagrams("stringy")
    self.assertEqual(r, ['stringy'])

    _, r = self.anagrams2.get_anagrams("strip")
    self.assertEqual(r, ['strip', 'trips'])

    _, r = self.anagrams2.get_anagrams("stripe")
    self.assertEqual(r, ['esprit', 'priest', 'sprite', 'stripe'])

    _, r = self.anagrams2.get_anagrams("striped")
    self.assertEqual(r, ['striped'])

    _, r = self.anagrams2.get_anagrams("stripes")
    self.assertEqual(r, ['persist', 'stripes'])

    _, r = self.anagrams2.get_anagrams("stripped")
    self.assertEqual(r, ['stripped'])

    _, r = self.anagrams2.get_anagrams("stripper")
    self.assertEqual(r, ['stripper'])

    _, r = self.anagrams2.get_anagrams("strippers")
    self.assertEqual(r, ['strippers'])

    _, r = self.anagrams2.get_anagrams("stripping")
    self.assertEqual(r, ['stripping'])

    _, r = self.anagrams2.get_anagrams("strips")
    self.assertEqual(r, ['strips'])

    _, r = self.anagrams2.get_anagrams("striptease")
    self.assertEqual(r, ['striptease', 'tapestries'])

    _, r = self.anagrams2.get_anagrams("strive")
    self.assertEqual(r, ['rivets', 'strive'])

    _, r = self.anagrams2.get_anagrams("striven")
    self.assertEqual(r, ['inverts', 'striven'])

    _, r = self.anagrams2.get_anagrams("strives")
    self.assertEqual(r, ['strives'])

    _, r = self.anagrams2.get_anagrams("striving")
    self.assertEqual(r, ['striving'])

    _, r = self.anagrams2.get_anagrams("strivings")
    self.assertEqual(r, ['strivings'])

    _, r = self.anagrams2.get_anagrams("strobe")
    self.assertEqual(r, ['osbert', 'strobe'])

    _, r = self.anagrams2.get_anagrams("strobed")
    self.assertEqual(r, ['strobed'])

    _, r = self.anagrams2.get_anagrams("strobes")
    self.assertEqual(r, ['strobes'])

    _, r = self.anagrams2.get_anagrams("stroboscopic")
    self.assertEqual(r, ['stroboscopic'])

    _, r = self.anagrams2.get_anagrams("strode")
    self.assertEqual(r, ['dorset', 'sorted', 'stored', 'strode'])

    _, r = self.anagrams2.get_anagrams("stroke")
    self.assertEqual(r, ['stroke'])

    _, r = self.anagrams2.get_anagrams("stroked")
    self.assertEqual(r, ['stroked'])

    _, r = self.anagrams2.get_anagrams("stroker")
    self.assertEqual(r, ['stroker'])

    _, r = self.anagrams2.get_anagrams("strokers")
    self.assertEqual(r, ['strokers'])

    _, r = self.anagrams2.get_anagrams("strokes")
    self.assertEqual(r, ['strokes'])

    _, r = self.anagrams2.get_anagrams("stroking")
    self.assertEqual(r, ['stroking'])

    _, r = self.anagrams2.get_anagrams("stroll")
    self.assertEqual(r, ['stroll', 'trolls'])

    _, r = self.anagrams2.get_anagrams("strolled")
    self.assertEqual(r, ['strolled'])

    _, r = self.anagrams2.get_anagrams("stroller")
    self.assertEqual(r, ['stroller'])

    _, r = self.anagrams2.get_anagrams("strolling")
    self.assertEqual(r, ['strolling'])

    _, r = self.anagrams2.get_anagrams("strolls")
    self.assertEqual(r, ['strolls'])

    _, r = self.anagrams2.get_anagrams("strom")
    self.assertEqual(r, ['storm', 'strom'])

    _, r = self.anagrams2.get_anagrams("stromberg")
    self.assertEqual(r, ['bergstrom', 'stromberg'])

    _, r = self.anagrams2.get_anagrams("strong")
    self.assertEqual(r, ['strong'])

    _, r = self.anagrams2.get_anagrams("stronger")
    self.assertEqual(r, ['stronger'])

    _, r = self.anagrams2.get_anagrams("strongest")
    self.assertEqual(r, ['strongest'])

    _, r = self.anagrams2.get_anagrams("strongheart")
    self.assertEqual(r, ['strongheart'])

    _, r = self.anagrams2.get_anagrams("stronghold")
    self.assertEqual(r, ['stronghold'])

    _, r = self.anagrams2.get_anagrams("strongly")
    self.assertEqual(r, ['strongly'])

    _, r = self.anagrams2.get_anagrams("strontium")
    self.assertEqual(r, ['strontium'])

    _, r = self.anagrams2.get_anagrams("strove")
    self.assertEqual(r, ['strove', 'voters'])

    _, r = self.anagrams2.get_anagrams("struck")
    self.assertEqual(r, ['struck', 'trucks'])

    _, r = self.anagrams2.get_anagrams("structural")
    self.assertEqual(r, ['structural'])

    _, r = self.anagrams2.get_anagrams("structurally")
    self.assertEqual(r, ['structurally'])

    _, r = self.anagrams2.get_anagrams("structure")
    self.assertEqual(r, ['structure'])

    _, r = self.anagrams2.get_anagrams("structured")
    self.assertEqual(r, ['structured'])

    _, r = self.anagrams2.get_anagrams("structurer")
    self.assertEqual(r, ['structurer'])

    _, r = self.anagrams2.get_anagrams("structures")
    self.assertEqual(r, ['structures'])

    _, r = self.anagrams2.get_anagrams("structuring")
    self.assertEqual(r, ['structuring'])

    _, r = self.anagrams2.get_anagrams("struggle")
    self.assertEqual(r, ['struggle'])

    _, r = self.anagrams2.get_anagrams("struggled")
    self.assertEqual(r, ['struggled'])

    _, r = self.anagrams2.get_anagrams("struggles")
    self.assertEqual(r, ['struggles'])

    _, r = self.anagrams2.get_anagrams("struggling")
    self.assertEqual(r, ['struggling'])

    _, r = self.anagrams2.get_anagrams("strung")
    self.assertEqual(r, ['grunts', 'strung'])

    _, r = self.anagrams2.get_anagrams("strut")
    self.assertEqual(r, ['strut', 'trust'])

    _, r = self.anagrams2.get_anagrams("struts")
    self.assertEqual(r, ['struts', 'trusts'])

    _, r = self.anagrams2.get_anagrams("strutting")
    self.assertEqual(r, ['strutting'])

    _, r = self.anagrams2.get_anagrams("strychnine")
    self.assertEqual(r, ['strychnine'])

    _, r = self.anagrams2.get_anagrams("stu")
    self.assertEqual(r, ['stu'])

    _, r = self.anagrams2.get_anagrams("stuart")
    self.assertEqual(r, ['stuart'])

    _, r = self.anagrams2.get_anagrams("stub")
    self.assertEqual(r, ['bust', 'stub', 'tubs'])

    _, r = self.anagrams2.get_anagrams("stubble")
    self.assertEqual(r, ['stubble'])

    _, r = self.anagrams2.get_anagrams("stubblefield")
    self.assertEqual(r, ['stubblefield'])

    _, r = self.anagrams2.get_anagrams("stubblefields")
    self.assertEqual(r, ['stubblefields'])

    _, r = self.anagrams2.get_anagrams("stubborn")
    self.assertEqual(r, ['stubborn'])

    _, r = self.anagrams2.get_anagrams("stubbornly")
    self.assertEqual(r, ['stubbornly'])

    _, r = self.anagrams2.get_anagrams("stubbornness")
    self.assertEqual(r, ['stubbornness'])

    _, r = self.anagrams2.get_anagrams("stubby")
    self.assertEqual(r, ['stubby'])

    _, r = self.anagrams2.get_anagrams("stubs")
    self.assertEqual(r, ['busts', 'stubs'])

    _, r = self.anagrams2.get_anagrams("stucco")
    self.assertEqual(r, ['stucco'])

    _, r = self.anagrams2.get_anagrams("stuck")
    self.assertEqual(r, ['stuck', 'tucks'])

    _, r = self.anagrams2.get_anagrams("stud")
    self.assertEqual(r, ['dust', 'stud'])

    _, r = self.anagrams2.get_anagrams("studebaker")
    self.assertEqual(r, ['studebaker'])

    _, r = self.anagrams2.get_anagrams("student")
    self.assertEqual(r, ['student'])

    _, r = self.anagrams2.get_anagrams("students")
    self.assertEqual(r, ['students'])

    _, r = self.anagrams2.get_anagrams("studied")
    self.assertEqual(r, ['studied'])

    _, r = self.anagrams2.get_anagrams("studies")
    self.assertEqual(r, ['studies'])

    _, r = self.anagrams2.get_anagrams("studio")
    self.assertEqual(r, ['studio'])

    _, r = self.anagrams2.get_anagrams("studios")
    self.assertEqual(r, ['studios'])

    _, r = self.anagrams2.get_anagrams("studious")
    self.assertEqual(r, ['studious'])

    _, r = self.anagrams2.get_anagrams("studiously")
    self.assertEqual(r, ['studiously'])

    _, r = self.anagrams2.get_anagrams("studs")
    self.assertEqual(r, ['dusts', 'studs'])

    _, r = self.anagrams2.get_anagrams("study")
    self.assertEqual(r, ['dusty', 'study'])

    _, r = self.anagrams2.get_anagrams("studying")
    self.assertEqual(r, ['studying'])

    _, r = self.anagrams2.get_anagrams("stuff")
    self.assertEqual(r, ['stuff'])

    _, r = self.anagrams2.get_anagrams("stuffed")
    self.assertEqual(r, ['destuff', 'stuffed'])

    _, r = self.anagrams2.get_anagrams("stuffier")
    self.assertEqual(r, ['stuffier'])

    _, r = self.anagrams2.get_anagrams("stuffiest")
    self.assertEqual(r, ['stuffiest'])

    _, r = self.anagrams2.get_anagrams("stuffing")
    self.assertEqual(r, ['stuffing'])

    _, r = self.anagrams2.get_anagrams("stuffs")
    self.assertEqual(r, ['stuffs'])

    _, r = self.anagrams2.get_anagrams("stuffy")
    self.assertEqual(r, ['stuffy'])

    _, r = self.anagrams2.get_anagrams("stumble")
    self.assertEqual(r, ['stumble', 'tumbles'])

    _, r = self.anagrams2.get_anagrams("stumbled")
    self.assertEqual(r, ['stumbled'])

    _, r = self.anagrams2.get_anagrams("stumbles")
    self.assertEqual(r, ['stumbles'])

    _, r = self.anagrams2.get_anagrams("stumbling")
    self.assertEqual(r, ['stumbling'])

    _, r = self.anagrams2.get_anagrams("stump")
    self.assertEqual(r, ['stump'])

    _, r = self.anagrams2.get_anagrams("stumped")
    self.assertEqual(r, ['stumped'])

    _, r = self.anagrams2.get_anagrams("stumping")
    self.assertEqual(r, ['stumping'])

    _, r = self.anagrams2.get_anagrams("stumps")
    self.assertEqual(r, ['stumps'])

    _, r = self.anagrams2.get_anagrams("stun")
    self.assertEqual(r, ['nuts', 'stun'])

    _, r = self.anagrams2.get_anagrams("stung")
    self.assertEqual(r, ['stung'])

    _, r = self.anagrams2.get_anagrams("stunning")
    self.assertEqual(r, ['stunning'])

    _, r = self.anagrams2.get_anagrams("stunningly")
    self.assertEqual(r, ['stunningly'])

    _, r = self.anagrams2.get_anagrams("stunt")
    self.assertEqual(r, ['stunt'])

    _, r = self.anagrams2.get_anagrams("stunts")
    self.assertEqual(r, ['stunts'])

    _, r = self.anagrams2.get_anagrams("stupefy")
    self.assertEqual(r, ['stupefy'])

    _, r = self.anagrams2.get_anagrams("stupefying")
    self.assertEqual(r, ['stupefying'])

    _, r = self.anagrams2.get_anagrams("stupendous")
    self.assertEqual(r, ['stupendous'])

    _, r = self.anagrams2.get_anagrams("stupendously")
    self.assertEqual(r, ['stupendously'])

    _, r = self.anagrams2.get_anagrams("stupid")
    self.assertEqual(r, ['stupid'])

    _, r = self.anagrams2.get_anagrams("stupidest")
    self.assertEqual(r, ['stupidest'])

    _, r = self.anagrams2.get_anagrams("stupidities")
    self.assertEqual(r, ['stupidities'])

    _, r = self.anagrams2.get_anagrams("stupidity")
    self.assertEqual(r, ['stupidity'])

    _, r = self.anagrams2.get_anagrams("stupidly")
    self.assertEqual(r, ['stupidly'])

    _, r = self.anagrams2.get_anagrams("stupor")
    self.assertEqual(r, ['proust', 'sprout', 'stupor'])

    _, r = self.anagrams2.get_anagrams("sturbridge")
    self.assertEqual(r, ['sturbridge'])

    _, r = self.anagrams2.get_anagrams("sturdiness")
    self.assertEqual(r, ['sturdiness'])

    _, r = self.anagrams2.get_anagrams("sturdy")
    self.assertEqual(r, ['sturdy'])

    _, r = self.anagrams2.get_anagrams("sturgeon")
    self.assertEqual(r, ['sturgeon'])

    _, r = self.anagrams2.get_anagrams("sturm")
    self.assertEqual(r, ['sturm'])

    _, r = self.anagrams2.get_anagrams("stutter")
    self.assertEqual(r, ['stutter'])

    _, r = self.anagrams2.get_anagrams("stuttgart")
    self.assertEqual(r, ['stuttgart'])

    _, r = self.anagrams2.get_anagrams("stuyvesant")
    self.assertEqual(r, ['stuyvesant'])

    _, r = self.anagrams2.get_anagrams("stygian")
    self.assertEqual(r, ['staying', 'stygian'])

    _, r = self.anagrams2.get_anagrams("style")
    self.assertEqual(r, ['style'])

    _, r = self.anagrams2.get_anagrams("styled")
    self.assertEqual(r, ['styled'])

    _, r = self.anagrams2.get_anagrams("styler")
    self.assertEqual(r, ['styler'])

    _, r = self.anagrams2.get_anagrams("stylers")
    self.assertEqual(r, ['stylers'])

    _, r = self.anagrams2.get_anagrams("styles")
    self.assertEqual(r, ['styles'])

    _, r = self.anagrams2.get_anagrams("styli")
    self.assertEqual(r, ['styli'])

    _, r = self.anagrams2.get_anagrams("styling")
    self.assertEqual(r, ['styling'])

    _, r = self.anagrams2.get_anagrams("stylish")
    self.assertEqual(r, ['stylish'])

    _, r = self.anagrams2.get_anagrams("stylishly")
    self.assertEqual(r, ['stylishly'])

    _, r = self.anagrams2.get_anagrams("stylishness")
    self.assertEqual(r, ['stylishness'])

    _, r = self.anagrams2.get_anagrams("stylistic")
    self.assertEqual(r, ['stylistic'])

    _, r = self.anagrams2.get_anagrams("stylistically")
    self.assertEqual(r, ['stylistically'])

    _, r = self.anagrams2.get_anagrams("stylized")
    self.assertEqual(r, ['stylized'])

    _, r = self.anagrams2.get_anagrams("stylus")
    self.assertEqual(r, ['stylus'])

    _, r = self.anagrams2.get_anagrams("styrofoam")
    self.assertEqual(r, ['styrofoam'])

    _, r = self.anagrams2.get_anagrams("styx")
    self.assertEqual(r, ['styx'])

    _, r = self.anagrams2.get_anagrams("suave")
    self.assertEqual(r, ['suave'])

    _, r = self.anagrams2.get_anagrams("sub")
    self.assertEqual(r, ['bus', 'sub'])

    _, r = self.anagrams2.get_anagrams("subatomic")
    self.assertEqual(r, ['subatomic'])

    _, r = self.anagrams2.get_anagrams("subchannel")
    self.assertEqual(r, ['subchannel'])

    _, r = self.anagrams2.get_anagrams("subchannels")
    self.assertEqual(r, ['subchannels'])

    _, r = self.anagrams2.get_anagrams("subclass")
    self.assertEqual(r, ['subclass'])

    _, r = self.anagrams2.get_anagrams("subclasses")
    self.assertEqual(r, ['subclasses'])

    _, r = self.anagrams2.get_anagrams("subcommittees")
    self.assertEqual(r, ['subcommittees'])

    _, r = self.anagrams2.get_anagrams("subcomponent")
    self.assertEqual(r, ['subcomponent'])

    _, r = self.anagrams2.get_anagrams("subcomponents")
    self.assertEqual(r, ['subcomponents'])

    _, r = self.anagrams2.get_anagrams("subcomputation")
    self.assertEqual(r, ['subcomputation'])

    _, r = self.anagrams2.get_anagrams("subcomputations")
    self.assertEqual(r, ['subcomputations'])

    _, r = self.anagrams2.get_anagrams("subconscious")
    self.assertEqual(r, ['subconscious'])

    _, r = self.anagrams2.get_anagrams("subconsciously")
    self.assertEqual(r, ['subconsciously'])

    _, r = self.anagrams2.get_anagrams("subculture")
    self.assertEqual(r, ['subculture'])

    _, r = self.anagrams2.get_anagrams("subcultures")
    self.assertEqual(r, ['subcultures'])

    _, r = self.anagrams2.get_anagrams("subcycle")
    self.assertEqual(r, ['subcycle'])

    _, r = self.anagrams2.get_anagrams("subcycles")
    self.assertEqual(r, ['subcycles'])

    _, r = self.anagrams2.get_anagrams("subdirectories")
    self.assertEqual(r, ['subdirectories'])

    _, r = self.anagrams2.get_anagrams("subdirectory")
    self.assertEqual(r, ['subdirectory'])

    _, r = self.anagrams2.get_anagrams("subdivide")
    self.assertEqual(r, ['subdivide'])

    _, r = self.anagrams2.get_anagrams("subdivided")
    self.assertEqual(r, ['subdivided'])

    _, r = self.anagrams2.get_anagrams("subdivides")
    self.assertEqual(r, ['subdivides'])

    _, r = self.anagrams2.get_anagrams("subdividing")
    self.assertEqual(r, ['subdividing'])

    _, r = self.anagrams2.get_anagrams("subdivision")
    self.assertEqual(r, ['subdivision'])

    _, r = self.anagrams2.get_anagrams("subdivisions")
    self.assertEqual(r, ['subdivisions'])

    _, r = self.anagrams2.get_anagrams("subdomains")
    self.assertEqual(r, ['subdomains'])

    _, r = self.anagrams2.get_anagrams("subdue")
    self.assertEqual(r, ['subdue'])

    _, r = self.anagrams2.get_anagrams("subdued")
    self.assertEqual(r, ['subdued'])

    _, r = self.anagrams2.get_anagrams("subdues")
    self.assertEqual(r, ['subdues'])

    _, r = self.anagrams2.get_anagrams("subduing")
    self.assertEqual(r, ['subduing'])

    _, r = self.anagrams2.get_anagrams("subexpression")
    self.assertEqual(r, ['subexpression'])

    _, r = self.anagrams2.get_anagrams("subexpressions")
    self.assertEqual(r, ['subexpressions'])

    _, r = self.anagrams2.get_anagrams("subfield")
    self.assertEqual(r, ['subfield'])

    _, r = self.anagrams2.get_anagrams("subfields")
    self.assertEqual(r, ['subfields'])

    _, r = self.anagrams2.get_anagrams("subfile")
    self.assertEqual(r, ['subfile'])

    _, r = self.anagrams2.get_anagrams("subfiles")
    self.assertEqual(r, ['subfiles'])

    _, r = self.anagrams2.get_anagrams("subgoal")
    self.assertEqual(r, ['subgoal'])

    _, r = self.anagrams2.get_anagrams("subgoals")
    self.assertEqual(r, ['subgoals'])

    _, r = self.anagrams2.get_anagrams("subgraph")
    self.assertEqual(r, ['hapsburg', 'subgraph'])

    _, r = self.anagrams2.get_anagrams("subgraphs")
    self.assertEqual(r, ['subgraphs'])

    _, r = self.anagrams2.get_anagrams("subgroup")
    self.assertEqual(r, ['subgroup'])

    _, r = self.anagrams2.get_anagrams("subgroups")
    self.assertEqual(r, ['subgroups'])

    _, r = self.anagrams2.get_anagrams("subinterval")
    self.assertEqual(r, ['subinterval'])

    _, r = self.anagrams2.get_anagrams("subintervals")
    self.assertEqual(r, ['subintervals'])

    _, r = self.anagrams2.get_anagrams("subject")
    self.assertEqual(r, ['subject'])

    _, r = self.anagrams2.get_anagrams("subjected")
    self.assertEqual(r, ['subjected'])

    _, r = self.anagrams2.get_anagrams("subjecting")
    self.assertEqual(r, ['subjecting'])

    _, r = self.anagrams2.get_anagrams("subjection")
    self.assertEqual(r, ['subjection'])

    _, r = self.anagrams2.get_anagrams("subjective")
    self.assertEqual(r, ['subjective'])

    _, r = self.anagrams2.get_anagrams("subjectively")
    self.assertEqual(r, ['subjectively'])

    _, r = self.anagrams2.get_anagrams("subjectivity")
    self.assertEqual(r, ['subjectivity'])

    _, r = self.anagrams2.get_anagrams("subjects")
    self.assertEqual(r, ['subjects'])

    _, r = self.anagrams2.get_anagrams("sublanguage")
    self.assertEqual(r, ['sublanguage'])

    _, r = self.anagrams2.get_anagrams("sublanguages")
    self.assertEqual(r, ['sublanguages'])

    _, r = self.anagrams2.get_anagrams("sublayer")
    self.assertEqual(r, ['sublayer'])

    _, r = self.anagrams2.get_anagrams("sublayers")
    self.assertEqual(r, ['sublayers'])

    _, r = self.anagrams2.get_anagrams("sublimation")
    self.assertEqual(r, ['sublimation'])

    _, r = self.anagrams2.get_anagrams("sublimations")
    self.assertEqual(r, ['sublimations'])

    _, r = self.anagrams2.get_anagrams("sublime")
    self.assertEqual(r, ['sublime'])

    _, r = self.anagrams2.get_anagrams("sublimed")
    self.assertEqual(r, ['sublimed'])

    _, r = self.anagrams2.get_anagrams("sublist")
    self.assertEqual(r, ['sublist'])

    _, r = self.anagrams2.get_anagrams("sublists")
    self.assertEqual(r, ['sublists'])

    _, r = self.anagrams2.get_anagrams("submarine")
    self.assertEqual(r, ['submarine'])

    _, r = self.anagrams2.get_anagrams("submariner")
    self.assertEqual(r, ['submariner'])

    _, r = self.anagrams2.get_anagrams("submariners")
    self.assertEqual(r, ['submariners'])

    _, r = self.anagrams2.get_anagrams("submarines")
    self.assertEqual(r, ['submarines'])

    _, r = self.anagrams2.get_anagrams("submerge")
    self.assertEqual(r, ['submerge'])

    _, r = self.anagrams2.get_anagrams("submerged")
    self.assertEqual(r, ['submerged'])

    _, r = self.anagrams2.get_anagrams("submerges")
    self.assertEqual(r, ['submerges'])

    _, r = self.anagrams2.get_anagrams("submerging")
    self.assertEqual(r, ['submerging'])

    _, r = self.anagrams2.get_anagrams("submission")
    self.assertEqual(r, ['submission'])

    _, r = self.anagrams2.get_anagrams("submissions")
    self.assertEqual(r, ['submissions'])

    _, r = self.anagrams2.get_anagrams("submissive")
    self.assertEqual(r, ['submissive'])

    _, r = self.anagrams2.get_anagrams("submit")
    self.assertEqual(r, ['submit'])

    _, r = self.anagrams2.get_anagrams("submits")
    self.assertEqual(r, ['submits'])

    _, r = self.anagrams2.get_anagrams("submittal")
    self.assertEqual(r, ['submittal'])

    _, r = self.anagrams2.get_anagrams("submitted")
    self.assertEqual(r, ['submitted'])

    _, r = self.anagrams2.get_anagrams("submitting")
    self.assertEqual(r, ['submitting'])

    _, r = self.anagrams2.get_anagrams("submode")
    self.assertEqual(r, ['submode'])

    _, r = self.anagrams2.get_anagrams("submodes")
    self.assertEqual(r, ['submodes'])

    _, r = self.anagrams2.get_anagrams("submodule")
    self.assertEqual(r, ['submodule'])

    _, r = self.anagrams2.get_anagrams("submodules")
    self.assertEqual(r, ['submodules'])

    _, r = self.anagrams2.get_anagrams("submultiplexed")
    self.assertEqual(r, ['submultiplexed'])

    _, r = self.anagrams2.get_anagrams("subnet")
    self.assertEqual(r, ['subnet'])

    _, r = self.anagrams2.get_anagrams("subnets")
    self.assertEqual(r, ['subnets'])

    _, r = self.anagrams2.get_anagrams("subnetwork")
    self.assertEqual(r, ['subnetwork'])

    _, r = self.anagrams2.get_anagrams("subnetworks")
    self.assertEqual(r, ['subnetworks'])

    _, r = self.anagrams2.get_anagrams("suboptimal")
    self.assertEqual(r, ['suboptimal'])

    _, r = self.anagrams2.get_anagrams("subordinate")
    self.assertEqual(r, ['subordinate'])

    _, r = self.anagrams2.get_anagrams("subordinated")
    self.assertEqual(r, ['subordinated'])

    _, r = self.anagrams2.get_anagrams("subordinates")
    self.assertEqual(r, ['subordinates'])

    _, r = self.anagrams2.get_anagrams("subordination")
    self.assertEqual(r, ['subordination'])

    _, r = self.anagrams2.get_anagrams("subparts")
    self.assertEqual(r, ['subparts'])

    _, r = self.anagrams2.get_anagrams("subphases")
    self.assertEqual(r, ['subphases'])

    _, r = self.anagrams2.get_anagrams("subpoena")
    self.assertEqual(r, ['subpoena'])

    _, r = self.anagrams2.get_anagrams("subproblem")
    self.assertEqual(r, ['subproblem'])

    _, r = self.anagrams2.get_anagrams("subproblems")
    self.assertEqual(r, ['subproblems'])

    _, r = self.anagrams2.get_anagrams("subprocesses")
    self.assertEqual(r, ['subprocesses'])

    _, r = self.anagrams2.get_anagrams("subprogram")
    self.assertEqual(r, ['subprogram'])

    _, r = self.anagrams2.get_anagrams("subprograms")
    self.assertEqual(r, ['subprograms'])

    _, r = self.anagrams2.get_anagrams("subproject")
    self.assertEqual(r, ['subproject'])

    _, r = self.anagrams2.get_anagrams("subproof")
    self.assertEqual(r, ['subproof'])

    _, r = self.anagrams2.get_anagrams("subproofs")
    self.assertEqual(r, ['subproofs'])

    _, r = self.anagrams2.get_anagrams("subrange")
    self.assertEqual(r, ['subrange'])

    _, r = self.anagrams2.get_anagrams("subranges")
    self.assertEqual(r, ['subranges'])

    _, r = self.anagrams2.get_anagrams("subroutine")
    self.assertEqual(r, ['subroutine'])

    _, r = self.anagrams2.get_anagrams("subroutines")
    self.assertEqual(r, ['subroutines'])

    _, r = self.anagrams2.get_anagrams("subs")
    self.assertEqual(r, ['buss', 'subs'])

    _, r = self.anagrams2.get_anagrams("subschema")
    self.assertEqual(r, ['subschema'])

    _, r = self.anagrams2.get_anagrams("subschemas")
    self.assertEqual(r, ['subschemas'])

    _, r = self.anagrams2.get_anagrams("subscribe")
    self.assertEqual(r, ['subscribe'])

    _, r = self.anagrams2.get_anagrams("subscribed")
    self.assertEqual(r, ['subscribed'])

    _, r = self.anagrams2.get_anagrams("subscriber")
    self.assertEqual(r, ['subscriber'])

    _, r = self.anagrams2.get_anagrams("subscribers")
    self.assertEqual(r, ['subscribers'])

    _, r = self.anagrams2.get_anagrams("subscribes")
    self.assertEqual(r, ['subscribes'])

    _, r = self.anagrams2.get_anagrams("subscribing")
    self.assertEqual(r, ['subscribing'])

    _, r = self.anagrams2.get_anagrams("subscript")
    self.assertEqual(r, ['subscript'])

    _, r = self.anagrams2.get_anagrams("subscripted")
    self.assertEqual(r, ['subscripted'])

    _, r = self.anagrams2.get_anagrams("subscripting")
    self.assertEqual(r, ['subscripting'])

    _, r = self.anagrams2.get_anagrams("subscription")
    self.assertEqual(r, ['subscription'])

    _, r = self.anagrams2.get_anagrams("subscriptions")
    self.assertEqual(r, ['subscriptions'])

    _, r = self.anagrams2.get_anagrams("subscripts")
    self.assertEqual(r, ['subscripts'])

    _, r = self.anagrams2.get_anagrams("subsection")
    self.assertEqual(r, ['subsection'])

    _, r = self.anagrams2.get_anagrams("subsections")
    self.assertEqual(r, ['subsections'])

    _, r = self.anagrams2.get_anagrams("subsegment")
    self.assertEqual(r, ['subsegment'])

    _, r = self.anagrams2.get_anagrams("subsegments")
    self.assertEqual(r, ['subsegments'])

    _, r = self.anagrams2.get_anagrams("subsequence")
    self.assertEqual(r, ['subsequence'])

    _, r = self.anagrams2.get_anagrams("subsequences")
    self.assertEqual(r, ['subsequences'])

    _, r = self.anagrams2.get_anagrams("subsequent")
    self.assertEqual(r, ['subsequent'])

    _, r = self.anagrams2.get_anagrams("subsequently")
    self.assertEqual(r, ['subsequently'])

    _, r = self.anagrams2.get_anagrams("subservient")
    self.assertEqual(r, ['subservient'])

    _, r = self.anagrams2.get_anagrams("subset")
    self.assertEqual(r, ['subset'])

    _, r = self.anagrams2.get_anagrams("subsets")
    self.assertEqual(r, ['subsets'])

    _, r = self.anagrams2.get_anagrams("subside")
    self.assertEqual(r, ['subside'])

    _, r = self.anagrams2.get_anagrams("subsided")
    self.assertEqual(r, ['subsided'])

    _, r = self.anagrams2.get_anagrams("subsides")
    self.assertEqual(r, ['subsides'])

    _, r = self.anagrams2.get_anagrams("subsidiaries")
    self.assertEqual(r, ['subsidiaries'])

    _, r = self.anagrams2.get_anagrams("subsidiary")
    self.assertEqual(r, ['subsidiary'])

    _, r = self.anagrams2.get_anagrams("subsidies")
    self.assertEqual(r, ['subsidies'])

    _, r = self.anagrams2.get_anagrams("subsiding")
    self.assertEqual(r, ['subsiding'])

    _, r = self.anagrams2.get_anagrams("subsidize")
    self.assertEqual(r, ['subsidize'])

    _, r = self.anagrams2.get_anagrams("subsidized")
    self.assertEqual(r, ['subsidized'])

    _, r = self.anagrams2.get_anagrams("subsidizes")
    self.assertEqual(r, ['subsidizes'])

    _, r = self.anagrams2.get_anagrams("subsidizing")
    self.assertEqual(r, ['subsidizing'])

    _, r = self.anagrams2.get_anagrams("subsidy")
    self.assertEqual(r, ['subsidy'])

    _, r = self.anagrams2.get_anagrams("subsist")
    self.assertEqual(r, ['subsist'])

    _, r = self.anagrams2.get_anagrams("subsisted")
    self.assertEqual(r, ['subsisted'])

    _, r = self.anagrams2.get_anagrams("subsistence")
    self.assertEqual(r, ['subsistence'])

    _, r = self.anagrams2.get_anagrams("subsistent")
    self.assertEqual(r, ['subsistent'])

    _, r = self.anagrams2.get_anagrams("subsisting")
    self.assertEqual(r, ['subsisting'])

    _, r = self.anagrams2.get_anagrams("subsists")
    self.assertEqual(r, ['subsists'])

    _, r = self.anagrams2.get_anagrams("subslot")
    self.assertEqual(r, ['subslot'])

    _, r = self.anagrams2.get_anagrams("subslots")
    self.assertEqual(r, ['subslots'])

    _, r = self.anagrams2.get_anagrams("subspace")
    self.assertEqual(r, ['subspace'])

    _, r = self.anagrams2.get_anagrams("subspaces")
    self.assertEqual(r, ['subspaces'])

    _, r = self.anagrams2.get_anagrams("substance")
    self.assertEqual(r, ['substance'])

    _, r = self.anagrams2.get_anagrams("substances")
    self.assertEqual(r, ['substances'])

    _, r = self.anagrams2.get_anagrams("substantial")
    self.assertEqual(r, ['substantial'])

    _, r = self.anagrams2.get_anagrams("substantially")
    self.assertEqual(r, ['substantially'])

    _, r = self.anagrams2.get_anagrams("substantiate")
    self.assertEqual(r, ['substantiate'])

    _, r = self.anagrams2.get_anagrams("substantiated")
    self.assertEqual(r, ['substantiated'])

    _, r = self.anagrams2.get_anagrams("substantiates")
    self.assertEqual(r, ['substantiates'])

    _, r = self.anagrams2.get_anagrams("substantiating")
    self.assertEqual(r, ['substantiating'])

    _, r = self.anagrams2.get_anagrams("substantiation")
    self.assertEqual(r, ['substantiation'])

    _, r = self.anagrams2.get_anagrams("substantiations")
    self.assertEqual(r, ['substantiations'])

    _, r = self.anagrams2.get_anagrams("substantive")
    self.assertEqual(r, ['substantive'])

    _, r = self.anagrams2.get_anagrams("substantively")
    self.assertEqual(r, ['substantively'])

    _, r = self.anagrams2.get_anagrams("substantivity")
    self.assertEqual(r, ['substantivity'])

    _, r = self.anagrams2.get_anagrams("substation")
    self.assertEqual(r, ['substation'])

    _, r = self.anagrams2.get_anagrams("substations")
    self.assertEqual(r, ['substations'])

    _, r = self.anagrams2.get_anagrams("substitutability")
    self.assertEqual(r, ['substitutability'])

    _, r = self.anagrams2.get_anagrams("substitutable")
    self.assertEqual(r, ['substitutable'])

    _, r = self.anagrams2.get_anagrams("substitute")
    self.assertEqual(r, ['substitute'])

    _, r = self.anagrams2.get_anagrams("substituted")
    self.assertEqual(r, ['substituted'])

    _, r = self.anagrams2.get_anagrams("substitutes")
    self.assertEqual(r, ['substitutes'])

    _, r = self.anagrams2.get_anagrams("substituting")
    self.assertEqual(r, ['substituting'])

    _, r = self.anagrams2.get_anagrams("substitution")
    self.assertEqual(r, ['substitution'])

    _, r = self.anagrams2.get_anagrams("substitutions")
    self.assertEqual(r, ['substitutions'])

    _, r = self.anagrams2.get_anagrams("substrate")
    self.assertEqual(r, ['substrate'])

    _, r = self.anagrams2.get_anagrams("substrates")
    self.assertEqual(r, ['substrates'])

    _, r = self.anagrams2.get_anagrams("substring")
    self.assertEqual(r, ['substring'])

    _, r = self.anagrams2.get_anagrams("substrings")
    self.assertEqual(r, ['substrings'])

    _, r = self.anagrams2.get_anagrams("substructure")
    self.assertEqual(r, ['substructure'])

    _, r = self.anagrams2.get_anagrams("substructures")
    self.assertEqual(r, ['substructures'])

    _, r = self.anagrams2.get_anagrams("subsume")
    self.assertEqual(r, ['subsume'])

    _, r = self.anagrams2.get_anagrams("subsumed")
    self.assertEqual(r, ['subsumed'])

    _, r = self.anagrams2.get_anagrams("subsumes")
    self.assertEqual(r, ['subsumes'])

    _, r = self.anagrams2.get_anagrams("subsuming")
    self.assertEqual(r, ['subsuming'])

    _, r = self.anagrams2.get_anagrams("subsystem")
    self.assertEqual(r, ['subsystem'])

    _, r = self.anagrams2.get_anagrams("subsystems")
    self.assertEqual(r, ['subsystems'])

    _, r = self.anagrams2.get_anagrams("subtask")
    self.assertEqual(r, ['subtask'])

    _, r = self.anagrams2.get_anagrams("subtasks")
    self.assertEqual(r, ['subtasks'])

    _, r = self.anagrams2.get_anagrams("subterfuge")
    self.assertEqual(r, ['subterfuge'])

    _, r = self.anagrams2.get_anagrams("subterranean")
    self.assertEqual(r, ['subterranean'])

    _, r = self.anagrams2.get_anagrams("subtitle")
    self.assertEqual(r, ['subtitle'])

    _, r = self.anagrams2.get_anagrams("subtitled")
    self.assertEqual(r, ['subtitled'])

    _, r = self.anagrams2.get_anagrams("subtitles")
    self.assertEqual(r, ['subtitles'])

    _, r = self.anagrams2.get_anagrams("subtle")
    self.assertEqual(r, ['bluest', 'bustle', 'subtle'])

    _, r = self.anagrams2.get_anagrams("subtleness")
    self.assertEqual(r, ['subtleness'])

    _, r = self.anagrams2.get_anagrams("subtler")
    self.assertEqual(r, ['bluster', 'butlers', 'subtler'])

    _, r = self.anagrams2.get_anagrams("subtlest")
    self.assertEqual(r, ['subtlest'])

    _, r = self.anagrams2.get_anagrams("subtleties")
    self.assertEqual(r, ['subtleties'])

    _, r = self.anagrams2.get_anagrams("subtlety")
    self.assertEqual(r, ['subtlety'])

    _, r = self.anagrams2.get_anagrams("subtly")
    self.assertEqual(r, ['subtly'])

    _, r = self.anagrams2.get_anagrams("subtotal")
    self.assertEqual(r, ['subtotal'])

    _, r = self.anagrams2.get_anagrams("subtract")
    self.assertEqual(r, ['subtract'])

    _, r = self.anagrams2.get_anagrams("subtracted")
    self.assertEqual(r, ['subtracted'])

    _, r = self.anagrams2.get_anagrams("subtracting")
    self.assertEqual(r, ['subtracting'])

    _, r = self.anagrams2.get_anagrams("subtraction")
    self.assertEqual(r, ['subtraction'])

    _, r = self.anagrams2.get_anagrams("subtractions")
    self.assertEqual(r, ['subtractions'])

    _, r = self.anagrams2.get_anagrams("subtractor")
    self.assertEqual(r, ['subtractor'])

    _, r = self.anagrams2.get_anagrams("subtractors")
    self.assertEqual(r, ['subtractors'])

    _, r = self.anagrams2.get_anagrams("subtracts")
    self.assertEqual(r, ['subtracts'])

    _, r = self.anagrams2.get_anagrams("subtrahend")
    self.assertEqual(r, ['subtrahend'])

    _, r = self.anagrams2.get_anagrams("subtrahends")
    self.assertEqual(r, ['subtrahends'])

    _, r = self.anagrams2.get_anagrams("subtree")
    self.assertEqual(r, ['subtree'])

    _, r = self.anagrams2.get_anagrams("subtrees")
    self.assertEqual(r, ['subtrees'])

    _, r = self.anagrams2.get_anagrams("subunit")
    self.assertEqual(r, ['subunit'])

    _, r = self.anagrams2.get_anagrams("subunits")
    self.assertEqual(r, ['subunits'])

    _, r = self.anagrams2.get_anagrams("suburb")
    self.assertEqual(r, ['suburb'])

    _, r = self.anagrams2.get_anagrams("suburban")
    self.assertEqual(r, ['suburban'])

    _, r = self.anagrams2.get_anagrams("suburbia")
    self.assertEqual(r, ['suburbia'])

    _, r = self.anagrams2.get_anagrams("suburbs")
    self.assertEqual(r, ['suburbs'])

    _, r = self.anagrams2.get_anagrams("subversion")
    self.assertEqual(r, ['subversion'])

    _, r = self.anagrams2.get_anagrams("subversive")
    self.assertEqual(r, ['subversive'])

    _, r = self.anagrams2.get_anagrams("subvert")
    self.assertEqual(r, ['subvert'])

    _, r = self.anagrams2.get_anagrams("subverted")
    self.assertEqual(r, ['subverted'])

    _, r = self.anagrams2.get_anagrams("subverter")
    self.assertEqual(r, ['subverter'])

    _, r = self.anagrams2.get_anagrams("subverting")
    self.assertEqual(r, ['subverting'])

    _, r = self.anagrams2.get_anagrams("subverts")
    self.assertEqual(r, ['subverts'])

    _, r = self.anagrams2.get_anagrams("subway")
    self.assertEqual(r, ['subway'])

    _, r = self.anagrams2.get_anagrams("subways")
    self.assertEqual(r, ['subways'])

    _, r = self.anagrams2.get_anagrams("succeed")
    self.assertEqual(r, ['succeed'])

    _, r = self.anagrams2.get_anagrams("succeeded")
    self.assertEqual(r, ['succeeded'])

    _, r = self.anagrams2.get_anagrams("succeeding")
    self.assertEqual(r, ['succeeding'])

    _, r = self.anagrams2.get_anagrams("succeeds")
    self.assertEqual(r, ['succeeds'])

    _, r = self.anagrams2.get_anagrams("success")
    self.assertEqual(r, ['success'])

    _, r = self.anagrams2.get_anagrams("successes")
    self.assertEqual(r, ['successes'])

    _, r = self.anagrams2.get_anagrams("successful")
    self.assertEqual(r, ['successful'])

    _, r = self.anagrams2.get_anagrams("successfully")
    self.assertEqual(r, ['successfully'])

    _, r = self.anagrams2.get_anagrams("succession")
    self.assertEqual(r, ['succession'])

    _, r = self.anagrams2.get_anagrams("successions")
    self.assertEqual(r, ['successions'])

    _, r = self.anagrams2.get_anagrams("successive")
    self.assertEqual(r, ['successive'])

    _, r = self.anagrams2.get_anagrams("successively")
    self.assertEqual(r, ['successively'])

    _, r = self.anagrams2.get_anagrams("successor")
    self.assertEqual(r, ['successor'])

    _, r = self.anagrams2.get_anagrams("successors")
    self.assertEqual(r, ['successors'])

    _, r = self.anagrams2.get_anagrams("succinct")
    self.assertEqual(r, ['succinct'])

    _, r = self.anagrams2.get_anagrams("succinctly")
    self.assertEqual(r, ['succinctly'])

    _, r = self.anagrams2.get_anagrams("succinctness")
    self.assertEqual(r, ['succinctness'])

    _, r = self.anagrams2.get_anagrams("succor")
    self.assertEqual(r, ['crocus', 'occurs', 'succor'])

    _, r = self.anagrams2.get_anagrams("succumb")
    self.assertEqual(r, ['succumb'])

    _, r = self.anagrams2.get_anagrams("succumbed")
    self.assertEqual(r, ['succumbed'])

    _, r = self.anagrams2.get_anagrams("succumbing")
    self.assertEqual(r, ['succumbing'])

    _, r = self.anagrams2.get_anagrams("succumbs")
    self.assertEqual(r, ['succumbs'])

    _, r = self.anagrams2.get_anagrams("such")
    self.assertEqual(r, ['such'])

    _, r = self.anagrams2.get_anagrams("suck")
    self.assertEqual(r, ['suck'])

    _, r = self.anagrams2.get_anagrams("sucked")
    self.assertEqual(r, ['sucked'])

    _, r = self.anagrams2.get_anagrams("sucker")
    self.assertEqual(r, ['sucker'])

    _, r = self.anagrams2.get_anagrams("suckers")
    self.assertEqual(r, ['suckers'])

    _, r = self.anagrams2.get_anagrams("sucking")
    self.assertEqual(r, ['sucking'])

    _, r = self.anagrams2.get_anagrams("suckle")
    self.assertEqual(r, ['suckle'])

    _, r = self.anagrams2.get_anagrams("suckling")
    self.assertEqual(r, ['suckling'])

    _, r = self.anagrams2.get_anagrams("sucks")
    self.assertEqual(r, ['sucks'])

    _, r = self.anagrams2.get_anagrams("suction")
    self.assertEqual(r, ['suction'])

    _, r = self.anagrams2.get_anagrams("sudan")
    self.assertEqual(r, ['sudan'])

    _, r = self.anagrams2.get_anagrams("sudanese")
    self.assertEqual(r, ['sudanese'])

    _, r = self.anagrams2.get_anagrams("sudanic")
    self.assertEqual(r, ['sudanic'])

    _, r = self.anagrams2.get_anagrams("sudden")
    self.assertEqual(r, ['sudden'])

    _, r = self.anagrams2.get_anagrams("suddenly")
    self.assertEqual(r, ['suddenly'])

    _, r = self.anagrams2.get_anagrams("suddenness")
    self.assertEqual(r, ['suddenness'])

    _, r = self.anagrams2.get_anagrams("suds")
    self.assertEqual(r, ['suds'])

    _, r = self.anagrams2.get_anagrams("sudsing")
    self.assertEqual(r, ['sudsing'])

    _, r = self.anagrams2.get_anagrams("sue")
    self.assertEqual(r, ['sue', 'use'])

    _, r = self.anagrams2.get_anagrams("sued")
    self.assertEqual(r, ['deus', 'dues', 'sued', 'used'])

    _, r = self.anagrams2.get_anagrams("sues")
    self.assertEqual(r, ['sues', 'uses'])

    _, r = self.anagrams2.get_anagrams("suez")
    self.assertEqual(r, ['suez', 'zeus'])

    _, r = self.anagrams2.get_anagrams("suffer")
    self.assertEqual(r, ['suffer'])

    _, r = self.anagrams2.get_anagrams("sufferance")
    self.assertEqual(r, ['sufferance'])

    _, r = self.anagrams2.get_anagrams("suffered")
    self.assertEqual(r, ['suffered'])

    _, r = self.anagrams2.get_anagrams("sufferer")
    self.assertEqual(r, ['sufferer'])

    _, r = self.anagrams2.get_anagrams("sufferers")
    self.assertEqual(r, ['sufferers'])

    _, r = self.anagrams2.get_anagrams("suffering")
    self.assertEqual(r, ['suffering'])

    _, r = self.anagrams2.get_anagrams("sufferings")
    self.assertEqual(r, ['sufferings'])

    _, r = self.anagrams2.get_anagrams("suffers")
    self.assertEqual(r, ['suffers'])

    _, r = self.anagrams2.get_anagrams("suffice")
    self.assertEqual(r, ['suffice'])

    _, r = self.anagrams2.get_anagrams("sufficed")
    self.assertEqual(r, ['sufficed'])

    _, r = self.anagrams2.get_anagrams("suffices")
    self.assertEqual(r, ['suffices'])

    _, r = self.anagrams2.get_anagrams("sufficiency")
    self.assertEqual(r, ['sufficiency'])

    _, r = self.anagrams2.get_anagrams("sufficient")
    self.assertEqual(r, ['sufficient'])

    _, r = self.anagrams2.get_anagrams("sufficiently")
    self.assertEqual(r, ['sufficiently'])

    _, r = self.anagrams2.get_anagrams("sufficing")
    self.assertEqual(r, ['sufficing'])

    _, r = self.anagrams2.get_anagrams("suffix")
    self.assertEqual(r, ['suffix'])

    _, r = self.anagrams2.get_anagrams("suffixed")
    self.assertEqual(r, ['suffixed'])

    _, r = self.anagrams2.get_anagrams("suffixer")
    self.assertEqual(r, ['suffixer'])

    _, r = self.anagrams2.get_anagrams("suffixes")
    self.assertEqual(r, ['suffixes'])

    _, r = self.anagrams2.get_anagrams("suffixing")
    self.assertEqual(r, ['suffixing'])

    _, r = self.anagrams2.get_anagrams("suffocate")
    self.assertEqual(r, ['suffocate'])

    _, r = self.anagrams2.get_anagrams("suffocated")
    self.assertEqual(r, ['suffocated'])

    _, r = self.anagrams2.get_anagrams("suffocates")
    self.assertEqual(r, ['suffocates'])

    _, r = self.anagrams2.get_anagrams("suffocating")
    self.assertEqual(r, ['suffocating'])

    _, r = self.anagrams2.get_anagrams("suffocation")
    self.assertEqual(r, ['suffocation'])

    _, r = self.anagrams2.get_anagrams("suffolk")
    self.assertEqual(r, ['suffolk'])

    _, r = self.anagrams2.get_anagrams("suffrage")
    self.assertEqual(r, ['suffrage'])

    _, r = self.anagrams2.get_anagrams("suffragette")
    self.assertEqual(r, ['suffragette'])

    _, r = self.anagrams2.get_anagrams("sugar")
    self.assertEqual(r, ['argus', 'sugar'])

    _, r = self.anagrams2.get_anagrams("sugared")
    self.assertEqual(r, ['sugared'])

    _, r = self.anagrams2.get_anagrams("sugaring")
    self.assertEqual(r, ['sugaring'])

    _, r = self.anagrams2.get_anagrams("sugarings")
    self.assertEqual(r, ['sugarings'])

    _, r = self.anagrams2.get_anagrams("sugars")
    self.assertEqual(r, ['sugars'])

    _, r = self.anagrams2.get_anagrams("suggest")
    self.assertEqual(r, ['suggest'])

    _, r = self.anagrams2.get_anagrams("suggested")
    self.assertEqual(r, ['suggested'])

    _, r = self.anagrams2.get_anagrams("suggestible")
    self.assertEqual(r, ['suggestible'])

    _, r = self.anagrams2.get_anagrams("suggesting")
    self.assertEqual(r, ['suggesting'])

    _, r = self.anagrams2.get_anagrams("suggestion")
    self.assertEqual(r, ['suggestion'])

    _, r = self.anagrams2.get_anagrams("suggestions")
    self.assertEqual(r, ['suggestions'])

    _, r = self.anagrams2.get_anagrams("suggestive")
    self.assertEqual(r, ['suggestive'])

    _, r = self.anagrams2.get_anagrams("suggestively")
    self.assertEqual(r, ['suggestively'])

    _, r = self.anagrams2.get_anagrams("suggests")
    self.assertEqual(r, ['suggests'])

    _, r = self.anagrams2.get_anagrams("suicidal")
    self.assertEqual(r, ['suicidal'])

    _, r = self.anagrams2.get_anagrams("suicidally")
    self.assertEqual(r, ['suicidally'])

    _, r = self.anagrams2.get_anagrams("suicide")
    self.assertEqual(r, ['suicide'])

    _, r = self.anagrams2.get_anagrams("suicides")
    self.assertEqual(r, ['suicides'])

    _, r = self.anagrams2.get_anagrams("suing")
    self.assertEqual(r, ['suing', 'using'])

    _, r = self.anagrams2.get_anagrams("suit")
    self.assertEqual(r, ['situ', 'suit'])

    _, r = self.anagrams2.get_anagrams("suitability")
    self.assertEqual(r, ['suitability'])

    _, r = self.anagrams2.get_anagrams("suitable")
    self.assertEqual(r, ['suitable'])

    _, r = self.anagrams2.get_anagrams("suitableness")
    self.assertEqual(r, ['suitableness'])

    _, r = self.anagrams2.get_anagrams("suitably")
    self.assertEqual(r, ['suitably'])

    _, r = self.anagrams2.get_anagrams("suitcase")
    self.assertEqual(r, ['suitcase'])

    _, r = self.anagrams2.get_anagrams("suitcases")
    self.assertEqual(r, ['suitcases'])

    _, r = self.anagrams2.get_anagrams("suite")
    self.assertEqual(r, ['suite'])

    _, r = self.anagrams2.get_anagrams("suited")
    self.assertEqual(r, ['duties', 'suited'])

    _, r = self.anagrams2.get_anagrams("suiters")
    self.assertEqual(r, ['suiters'])

    _, r = self.anagrams2.get_anagrams("suites")
    self.assertEqual(r, ['suites', 'tissue'])

    _, r = self.anagrams2.get_anagrams("suiting")
    self.assertEqual(r, ['suiting'])

    _, r = self.anagrams2.get_anagrams("suitor")
    self.assertEqual(r, ['suitor'])

    _, r = self.anagrams2.get_anagrams("suitors")
    self.assertEqual(r, ['suitors'])

    _, r = self.anagrams2.get_anagrams("suits")
    self.assertEqual(r, ['suits'])

    _, r = self.anagrams2.get_anagrams("sukarno")
    self.assertEqual(r, ['sukarno'])

    _, r = self.anagrams2.get_anagrams("sulfa")
    self.assertEqual(r, ['sulfa'])

    _, r = self.anagrams2.get_anagrams("sulfur")
    self.assertEqual(r, ['sulfur'])

    _, r = self.anagrams2.get_anagrams("sulfuric")
    self.assertEqual(r, ['sulfuric'])

    _, r = self.anagrams2.get_anagrams("sulfurous")
    self.assertEqual(r, ['sulfurous'])

    _, r = self.anagrams2.get_anagrams("sulk")
    self.assertEqual(r, ['sulk'])

    _, r = self.anagrams2.get_anagrams("sulked")
    self.assertEqual(r, ['sulked'])

    _, r = self.anagrams2.get_anagrams("sulkiness")
    self.assertEqual(r, ['sulkiness'])

    _, r = self.anagrams2.get_anagrams("sulking")
    self.assertEqual(r, ['sulking'])

    _, r = self.anagrams2.get_anagrams("sulks")
    self.assertEqual(r, ['sulks'])

    _, r = self.anagrams2.get_anagrams("sulky")
    self.assertEqual(r, ['sulky'])

    _, r = self.anagrams2.get_anagrams("sullen")
    self.assertEqual(r, ['sullen'])

    _, r = self.anagrams2.get_anagrams("sullenly")
    self.assertEqual(r, ['sullenly'])

    _, r = self.anagrams2.get_anagrams("sullenness")
    self.assertEqual(r, ['sullenness'])

    _, r = self.anagrams2.get_anagrams("sullivan")
    self.assertEqual(r, ['sullivan'])

    _, r = self.anagrams2.get_anagrams("sulphate")
    self.assertEqual(r, ['sulphate'])

    _, r = self.anagrams2.get_anagrams("sulphur")
    self.assertEqual(r, ['sulphur'])

    _, r = self.anagrams2.get_anagrams("sulphured")
    self.assertEqual(r, ['sulphured'])

    _, r = self.anagrams2.get_anagrams("sulphuric")
    self.assertEqual(r, ['sulphuric'])

    _, r = self.anagrams2.get_anagrams("sultan")
    self.assertEqual(r, ['sultan'])

    _, r = self.anagrams2.get_anagrams("sultans")
    self.assertEqual(r, ['sultans'])

    _, r = self.anagrams2.get_anagrams("sultry")
    self.assertEqual(r, ['sultry'])

    _, r = self.anagrams2.get_anagrams("sulzberger")
    self.assertEqual(r, ['sulzberger'])

    _, r = self.anagrams2.get_anagrams("sum")
    self.assertEqual(r, ['sum'])

    _, r = self.anagrams2.get_anagrams("sumac")
    self.assertEqual(r, ['sumac'])

    _, r = self.anagrams2.get_anagrams("sumatra")
    self.assertEqual(r, ['sumatra'])

    _, r = self.anagrams2.get_anagrams("sumeria")
    self.assertEqual(r, ['sumeria'])

    _, r = self.anagrams2.get_anagrams("sumerian")
    self.assertEqual(r, ['sumerian'])

    _, r = self.anagrams2.get_anagrams("summand")
    self.assertEqual(r, ['summand'])

    _, r = self.anagrams2.get_anagrams("summands")
    self.assertEqual(r, ['summands'])

    _, r = self.anagrams2.get_anagrams("summaries")
    self.assertEqual(r, ['summaries'])

    _, r = self.anagrams2.get_anagrams("summarily")
    self.assertEqual(r, ['summarily'])

    _, r = self.anagrams2.get_anagrams("summarization")
    self.assertEqual(r, ['summarization'])

    _, r = self.anagrams2.get_anagrams("summarizations")
    self.assertEqual(r, ['summarizations'])

    _, r = self.anagrams2.get_anagrams("summarize")
    self.assertEqual(r, ['summarize'])

    _, r = self.anagrams2.get_anagrams("summarized")
    self.assertEqual(r, ['summarized'])

    _, r = self.anagrams2.get_anagrams("summarizes")
    self.assertEqual(r, ['summarizes'])

    _, r = self.anagrams2.get_anagrams("summarizing")
    self.assertEqual(r, ['summarizing'])

    _, r = self.anagrams2.get_anagrams("summary")
    self.assertEqual(r, ['summary'])

    _, r = self.anagrams2.get_anagrams("summation")
    self.assertEqual(r, ['summation'])

    _, r = self.anagrams2.get_anagrams("summations")
    self.assertEqual(r, ['summations'])

    _, r = self.anagrams2.get_anagrams("summed")
    self.assertEqual(r, ['summed'])

    _, r = self.anagrams2.get_anagrams("summer")
    self.assertEqual(r, ['summer'])

    _, r = self.anagrams2.get_anagrams("summerdale")
    self.assertEqual(r, ['summerdale'])

    _, r = self.anagrams2.get_anagrams("summers")
    self.assertEqual(r, ['summers'])

    _, r = self.anagrams2.get_anagrams("summertime")
    self.assertEqual(r, ['summertime'])

    _, r = self.anagrams2.get_anagrams("summing")
    self.assertEqual(r, ['summing'])

    _, r = self.anagrams2.get_anagrams("summit")
    self.assertEqual(r, ['summit'])

    _, r = self.anagrams2.get_anagrams("summitry")
    self.assertEqual(r, ['summitry'])

    _, r = self.anagrams2.get_anagrams("summon")
    self.assertEqual(r, ['summon'])

    _, r = self.anagrams2.get_anagrams("summoned")
    self.assertEqual(r, ['summoned'])

    _, r = self.anagrams2.get_anagrams("summoner")
    self.assertEqual(r, ['summoner'])

    _, r = self.anagrams2.get_anagrams("summoners")
    self.assertEqual(r, ['summoners'])

    _, r = self.anagrams2.get_anagrams("summoning")
    self.assertEqual(r, ['summoning'])

    _, r = self.anagrams2.get_anagrams("summons")
    self.assertEqual(r, ['summons'])

    _, r = self.anagrams2.get_anagrams("summonses")
    self.assertEqual(r, ['summonses'])

    _, r = self.anagrams2.get_anagrams("sumner")
    self.assertEqual(r, ['sumner'])

    _, r = self.anagrams2.get_anagrams("sumptuous")
    self.assertEqual(r, ['sumptuous'])

    _, r = self.anagrams2.get_anagrams("sums")
    self.assertEqual(r, ['sums'])

    _, r = self.anagrams2.get_anagrams("sumter")
    self.assertEqual(r, ['muster', 'sumter'])

    _, r = self.anagrams2.get_anagrams("sun")
    self.assertEqual(r, ['sun'])

    _, r = self.anagrams2.get_anagrams("sunbeam")
    self.assertEqual(r, ['sunbeam'])

    _, r = self.anagrams2.get_anagrams("sunbeams")
    self.assertEqual(r, ['sunbeams'])

    _, r = self.anagrams2.get_anagrams("sunbelt")
    self.assertEqual(r, ['sunbelt'])

    _, r = self.anagrams2.get_anagrams("sunbonnet")
    self.assertEqual(r, ['sunbonnet'])

    _, r = self.anagrams2.get_anagrams("sunburn")
    self.assertEqual(r, ['sunburn'])

    _, r = self.anagrams2.get_anagrams("sunburnt")
    self.assertEqual(r, ['sunburnt'])

    _, r = self.anagrams2.get_anagrams("sunday")
    self.assertEqual(r, ['sunday'])

    _, r = self.anagrams2.get_anagrams("sundays")
    self.assertEqual(r, ['sundays'])

    _, r = self.anagrams2.get_anagrams("sunder")
    self.assertEqual(r, ['nursed', 'sunder'])

    _, r = self.anagrams2.get_anagrams("sundial")
    self.assertEqual(r, ['sundial'])

    _, r = self.anagrams2.get_anagrams("sundown")
    self.assertEqual(r, ['sundown'])

    _, r = self.anagrams2.get_anagrams("sundries")
    self.assertEqual(r, ['sundries'])

    _, r = self.anagrams2.get_anagrams("sundry")
    self.assertEqual(r, ['sundry'])

    _, r = self.anagrams2.get_anagrams("sunflower")
    self.assertEqual(r, ['sunflower'])

    _, r = self.anagrams2.get_anagrams("sung")
    self.assertEqual(r, ['guns', 'snug', 'sung'])

    _, r = self.anagrams2.get_anagrams("sunglass")
    self.assertEqual(r, ['sunglass'])

    _, r = self.anagrams2.get_anagrams("sunglasses")
    self.assertEqual(r, ['sunglasses'])

    _, r = self.anagrams2.get_anagrams("sunk")
    self.assertEqual(r, ['sunk'])

    _, r = self.anagrams2.get_anagrams("sunken")
    self.assertEqual(r, ['sunken'])

    _, r = self.anagrams2.get_anagrams("sunlight")
    self.assertEqual(r, ['hustling', 'sunlight'])

    _, r = self.anagrams2.get_anagrams("sunlit")
    self.assertEqual(r, ['insult', 'sunlit'])

    _, r = self.anagrams2.get_anagrams("sunned")
    self.assertEqual(r, ['sunned'])

    _, r = self.anagrams2.get_anagrams("sunning")
    self.assertEqual(r, ['sunning'])

    _, r = self.anagrams2.get_anagrams("sunny")
    self.assertEqual(r, ['sunny'])

    _, r = self.anagrams2.get_anagrams("sunnyvale")
    self.assertEqual(r, ['sunnyvale'])

    _, r = self.anagrams2.get_anagrams("sunrise")
    self.assertEqual(r, ['insures', 'sunrise'])

    _, r = self.anagrams2.get_anagrams("suns")
    self.assertEqual(r, ['suns'])

    _, r = self.anagrams2.get_anagrams("sunset")
    self.assertEqual(r, ['sunset'])

    _, r = self.anagrams2.get_anagrams("sunshine")
    self.assertEqual(r, ['sunshine'])

    _, r = self.anagrams2.get_anagrams("sunspot")
    self.assertEqual(r, ['sunspot'])

    _, r = self.anagrams2.get_anagrams("suntan")
    self.assertEqual(r, ['suntan'])

    _, r = self.anagrams2.get_anagrams("suntanned")
    self.assertEqual(r, ['suntanned'])

    _, r = self.anagrams2.get_anagrams("suntanning")
    self.assertEqual(r, ['suntanning'])

    _, r = self.anagrams2.get_anagrams("super")
    self.assertEqual(r, ['purse', 'super'])

    _, r = self.anagrams2.get_anagrams("superb")
    self.assertEqual(r, ['superb'])

    _, r = self.anagrams2.get_anagrams("superblock")
    self.assertEqual(r, ['superblock'])

    _, r = self.anagrams2.get_anagrams("superbly")
    self.assertEqual(r, ['superbly'])

    _, r = self.anagrams2.get_anagrams("supercomputer")
    self.assertEqual(r, ['supercomputer'])

    _, r = self.anagrams2.get_anagrams("supercomputers")
    self.assertEqual(r, ['supercomputers'])

    _, r = self.anagrams2.get_anagrams("superego")
    self.assertEqual(r, ['superego'])

    _, r = self.anagrams2.get_anagrams("superegos")
    self.assertEqual(r, ['superegos'])

    _, r = self.anagrams2.get_anagrams("superficial")
    self.assertEqual(r, ['superficial'])

    _, r = self.anagrams2.get_anagrams("superficially")
    self.assertEqual(r, ['superficially'])

    _, r = self.anagrams2.get_anagrams("superfluities")
    self.assertEqual(r, ['superfluities'])

    _, r = self.anagrams2.get_anagrams("superfluity")
    self.assertEqual(r, ['superfluity'])

    _, r = self.anagrams2.get_anagrams("superfluous")
    self.assertEqual(r, ['superfluous'])

    _, r = self.anagrams2.get_anagrams("superfluously")
    self.assertEqual(r, ['superfluously'])

    _, r = self.anagrams2.get_anagrams("supergroup")
    self.assertEqual(r, ['supergroup'])

    _, r = self.anagrams2.get_anagrams("supergroups")
    self.assertEqual(r, ['supergroups'])

    _, r = self.anagrams2.get_anagrams("superhuman")
    self.assertEqual(r, ['superhuman'])

    _, r = self.anagrams2.get_anagrams("superhumanly")
    self.assertEqual(r, ['superhumanly'])

    _, r = self.anagrams2.get_anagrams("superimpose")
    self.assertEqual(r, ['superimpose'])

    _, r = self.anagrams2.get_anagrams("superimposed")
    self.assertEqual(r, ['superimposed'])

    _, r = self.anagrams2.get_anagrams("superimposes")
    self.assertEqual(r, ['superimposes'])

    _, r = self.anagrams2.get_anagrams("superimposing")
    self.assertEqual(r, ['superimposing'])

    _, r = self.anagrams2.get_anagrams("superintend")
    self.assertEqual(r, ['superintend'])

    _, r = self.anagrams2.get_anagrams("superintendent")
    self.assertEqual(r, ['superintendent'])

    _, r = self.anagrams2.get_anagrams("superintendents")
    self.assertEqual(r, ['superintendents'])

    _, r = self.anagrams2.get_anagrams("superior")
    self.assertEqual(r, ['superior'])

    _, r = self.anagrams2.get_anagrams("superiority")
    self.assertEqual(r, ['superiority'])

    _, r = self.anagrams2.get_anagrams("superiors")
    self.assertEqual(r, ['superiors'])

    _, r = self.anagrams2.get_anagrams("superlative")
    self.assertEqual(r, ['superlative'])

    _, r = self.anagrams2.get_anagrams("superlatively")
    self.assertEqual(r, ['superlatively'])

    _, r = self.anagrams2.get_anagrams("superlatives")
    self.assertEqual(r, ['superlatives'])

    _, r = self.anagrams2.get_anagrams("supermarket")
    self.assertEqual(r, ['supermarket'])

    _, r = self.anagrams2.get_anagrams("supermarkets")
    self.assertEqual(r, ['supermarkets'])

    _, r = self.anagrams2.get_anagrams("supermini")
    self.assertEqual(r, ['supermini'])

    _, r = self.anagrams2.get_anagrams("superminis")
    self.assertEqual(r, ['superminis'])

    _, r = self.anagrams2.get_anagrams("supernatural")
    self.assertEqual(r, ['supernatural'])

    _, r = self.anagrams2.get_anagrams("superpose")
    self.assertEqual(r, ['superpose'])

    _, r = self.anagrams2.get_anagrams("superposed")
    self.assertEqual(r, ['superposed'])

    _, r = self.anagrams2.get_anagrams("superposes")
    self.assertEqual(r, ['superposes'])

    _, r = self.anagrams2.get_anagrams("superposing")
    self.assertEqual(r, ['superposing'])

    _, r = self.anagrams2.get_anagrams("superposition")
    self.assertEqual(r, ['superposition'])

    _, r = self.anagrams2.get_anagrams("superscript")
    self.assertEqual(r, ['superscript'])

    _, r = self.anagrams2.get_anagrams("superscripted")
    self.assertEqual(r, ['superscripted'])

    _, r = self.anagrams2.get_anagrams("superscripting")
    self.assertEqual(r, ['superscripting'])

    _, r = self.anagrams2.get_anagrams("superscripts")
    self.assertEqual(r, ['superscripts'])

    _, r = self.anagrams2.get_anagrams("supersede")
    self.assertEqual(r, ['supersede'])

    _, r = self.anagrams2.get_anagrams("superseded")
    self.assertEqual(r, ['superseded'])

    _, r = self.anagrams2.get_anagrams("supersedes")
    self.assertEqual(r, ['supersedes'])

    _, r = self.anagrams2.get_anagrams("superseding")
    self.assertEqual(r, ['superseding'])

    _, r = self.anagrams2.get_anagrams("superset")
    self.assertEqual(r, ['superset'])

    _, r = self.anagrams2.get_anagrams("supersets")
    self.assertEqual(r, ['supersets'])

    _, r = self.anagrams2.get_anagrams("superstition")
    self.assertEqual(r, ['superstition'])

    _, r = self.anagrams2.get_anagrams("superstitions")
    self.assertEqual(r, ['superstitions'])

    _, r = self.anagrams2.get_anagrams("superstitious")
    self.assertEqual(r, ['superstitious'])

    _, r = self.anagrams2.get_anagrams("superuser")
    self.assertEqual(r, ['superuser'])

    _, r = self.anagrams2.get_anagrams("supervise")
    self.assertEqual(r, ['supervise'])

    _, r = self.anagrams2.get_anagrams("supervised")
    self.assertEqual(r, ['supervised'])

    _, r = self.anagrams2.get_anagrams("supervises")
    self.assertEqual(r, ['supervises'])

    _, r = self.anagrams2.get_anagrams("supervising")
    self.assertEqual(r, ['supervising'])

    _, r = self.anagrams2.get_anagrams("supervision")
    self.assertEqual(r, ['supervision'])

    _, r = self.anagrams2.get_anagrams("supervisor")
    self.assertEqual(r, ['supervisor'])

    _, r = self.anagrams2.get_anagrams("supervisors")
    self.assertEqual(r, ['supervisors'])

    _, r = self.anagrams2.get_anagrams("supervisory")
    self.assertEqual(r, ['supervisory'])

    _, r = self.anagrams2.get_anagrams("supine")
    self.assertEqual(r, ['supine'])

    _, r = self.anagrams2.get_anagrams("supper")
    self.assertEqual(r, ['supper'])

    _, r = self.anagrams2.get_anagrams("suppers")
    self.assertEqual(r, ['suppers'])

    _, r = self.anagrams2.get_anagrams("supplant")
    self.assertEqual(r, ['supplant'])

    _, r = self.anagrams2.get_anagrams("supplanted")
    self.assertEqual(r, ['supplanted'])

    _, r = self.anagrams2.get_anagrams("supplanting")
    self.assertEqual(r, ['supplanting'])

    _, r = self.anagrams2.get_anagrams("supplants")
    self.assertEqual(r, ['supplants'])

    _, r = self.anagrams2.get_anagrams("supple")
    self.assertEqual(r, ['supple'])

    _, r = self.anagrams2.get_anagrams("supplement")
    self.assertEqual(r, ['supplement'])

    _, r = self.anagrams2.get_anagrams("supplemental")
    self.assertEqual(r, ['supplemental'])

    _, r = self.anagrams2.get_anagrams("supplementary")
    self.assertEqual(r, ['supplementary'])

    _, r = self.anagrams2.get_anagrams("supplemented")
    self.assertEqual(r, ['supplemented'])

    _, r = self.anagrams2.get_anagrams("supplementing")
    self.assertEqual(r, ['supplementing'])

    _, r = self.anagrams2.get_anagrams("supplements")
    self.assertEqual(r, ['supplements'])

    _, r = self.anagrams2.get_anagrams("suppleness")
    self.assertEqual(r, ['suppleness'])

    _, r = self.anagrams2.get_anagrams("supplication")
    self.assertEqual(r, ['supplication'])

    _, r = self.anagrams2.get_anagrams("supplied")
    self.assertEqual(r, ['supplied'])

    _, r = self.anagrams2.get_anagrams("supplier")
    self.assertEqual(r, ['supplier'])

    _, r = self.anagrams2.get_anagrams("suppliers")
    self.assertEqual(r, ['suppliers'])

    _, r = self.anagrams2.get_anagrams("supplies")
    self.assertEqual(r, ['supplies'])

    _, r = self.anagrams2.get_anagrams("supply")
    self.assertEqual(r, ['supply'])

    _, r = self.anagrams2.get_anagrams("supplying")
    self.assertEqual(r, ['supplying'])

    _, r = self.anagrams2.get_anagrams("support")
    self.assertEqual(r, ['support'])

    _, r = self.anagrams2.get_anagrams("supportable")
    self.assertEqual(r, ['supportable'])

    _, r = self.anagrams2.get_anagrams("supported")
    self.assertEqual(r, ['supported'])

    _, r = self.anagrams2.get_anagrams("supporter")
    self.assertEqual(r, ['supporter'])

    _, r = self.anagrams2.get_anagrams("supporters")
    self.assertEqual(r, ['supporters'])

    _, r = self.anagrams2.get_anagrams("supporting")
    self.assertEqual(r, ['supporting'])

    _, r = self.anagrams2.get_anagrams("supportingly")
    self.assertEqual(r, ['supportingly'])

    _, r = self.anagrams2.get_anagrams("supportive")
    self.assertEqual(r, ['supportive'])

    _, r = self.anagrams2.get_anagrams("supportively")
    self.assertEqual(r, ['supportively'])

    _, r = self.anagrams2.get_anagrams("supports")
    self.assertEqual(r, ['supports'])

    _, r = self.anagrams2.get_anagrams("suppose")
    self.assertEqual(r, ['suppose'])

    _, r = self.anagrams2.get_anagrams("supposed")
    self.assertEqual(r, ['supposed'])

    _, r = self.anagrams2.get_anagrams("supposedly")
    self.assertEqual(r, ['supposedly'])

    _, r = self.anagrams2.get_anagrams("supposes")
    self.assertEqual(r, ['supposes'])

    _, r = self.anagrams2.get_anagrams("supposing")
    self.assertEqual(r, ['supposing'])

    _, r = self.anagrams2.get_anagrams("supposition")
    self.assertEqual(r, ['supposition'])

    _, r = self.anagrams2.get_anagrams("suppositions")
    self.assertEqual(r, ['suppositions'])

    _, r = self.anagrams2.get_anagrams("suppress")
    self.assertEqual(r, ['suppress'])

    _, r = self.anagrams2.get_anagrams("suppressed")
    self.assertEqual(r, ['suppressed'])

    _, r = self.anagrams2.get_anagrams("suppresses")
    self.assertEqual(r, ['suppresses'])

    _, r = self.anagrams2.get_anagrams("suppressing")
    self.assertEqual(r, ['suppressing'])

    _, r = self.anagrams2.get_anagrams("suppression")
    self.assertEqual(r, ['suppression'])

    _, r = self.anagrams2.get_anagrams("suppressor")
    self.assertEqual(r, ['suppressor'])

    _, r = self.anagrams2.get_anagrams("suppressors")
    self.assertEqual(r, ['suppressors'])

    _, r = self.anagrams2.get_anagrams("supranational")
    self.assertEqual(r, ['supranational'])

    _, r = self.anagrams2.get_anagrams("supremacy")
    self.assertEqual(r, ['supremacy'])

    _, r = self.anagrams2.get_anagrams("supreme")
    self.assertEqual(r, ['presume', 'supreme'])

    _, r = self.anagrams2.get_anagrams("supremely")
    self.assertEqual(r, ['supremely'])

    _, r = self.anagrams2.get_anagrams("surcharge")
    self.assertEqual(r, ['surcharge'])

    _, r = self.anagrams2.get_anagrams("sure")
    self.assertEqual(r, ['sure', 'user'])

    _, r = self.anagrams2.get_anagrams("surely")
    self.assertEqual(r, ['surely'])

    _, r = self.anagrams2.get_anagrams("sureness")
    self.assertEqual(r, ['sureness'])

    _, r = self.anagrams2.get_anagrams("sureties")
    self.assertEqual(r, ['sureties'])

    _, r = self.anagrams2.get_anagrams("surety")
    self.assertEqual(r, ['surety'])

    _, r = self.anagrams2.get_anagrams("surf")
    self.assertEqual(r, ['furs', 'surf'])

    _, r = self.anagrams2.get_anagrams("surface")
    self.assertEqual(r, ['surface'])

    _, r = self.anagrams2.get_anagrams("surfaced")
    self.assertEqual(r, ['surfaced'])

    _, r = self.anagrams2.get_anagrams("surfaceness")
    self.assertEqual(r, ['surfaceness'])

    _, r = self.anagrams2.get_anagrams("surfaces")
    self.assertEqual(r, ['surfaces'])

    _, r = self.anagrams2.get_anagrams("surfacing")
    self.assertEqual(r, ['surfacing'])

    _, r = self.anagrams2.get_anagrams("surge")
    self.assertEqual(r, ['surge', 'urges'])

    _, r = self.anagrams2.get_anagrams("surged")
    self.assertEqual(r, ['surged'])

    _, r = self.anagrams2.get_anagrams("surgeon")
    self.assertEqual(r, ['surgeon'])

    _, r = self.anagrams2.get_anagrams("surgeons")
    self.assertEqual(r, ['surgeons'])

    _, r = self.anagrams2.get_anagrams("surgery")
    self.assertEqual(r, ['surgery'])

    _, r = self.anagrams2.get_anagrams("surges")
    self.assertEqual(r, ['surges'])

    _, r = self.anagrams2.get_anagrams("surgical")
    self.assertEqual(r, ['surgical'])

    _, r = self.anagrams2.get_anagrams("surgically")
    self.assertEqual(r, ['surgically'])

    _, r = self.anagrams2.get_anagrams("surging")
    self.assertEqual(r, ['surging', 'urgings'])

    _, r = self.anagrams2.get_anagrams("surliness")
    self.assertEqual(r, ['surliness'])

    _, r = self.anagrams2.get_anagrams("surly")
    self.assertEqual(r, ['surly'])

    _, r = self.anagrams2.get_anagrams("surmise")
    self.assertEqual(r, ['surmise'])

    _, r = self.anagrams2.get_anagrams("surmised")
    self.assertEqual(r, ['surmised'])

    _, r = self.anagrams2.get_anagrams("surmises")
    self.assertEqual(r, ['surmises'])

    _, r = self.anagrams2.get_anagrams("surmount")
    self.assertEqual(r, ['surmount'])

    _, r = self.anagrams2.get_anagrams("surmounted")
    self.assertEqual(r, ['surmounted'])

    _, r = self.anagrams2.get_anagrams("surmounting")
    self.assertEqual(r, ['surmounting'])

    _, r = self.anagrams2.get_anagrams("surmounts")
    self.assertEqual(r, ['surmounts'])

    _, r = self.anagrams2.get_anagrams("surname")
    self.assertEqual(r, ['surname'])

    _, r = self.anagrams2.get_anagrams("surnames")
    self.assertEqual(r, ['surnames'])

    _, r = self.anagrams2.get_anagrams("surpass")
    self.assertEqual(r, ['surpass'])

    _, r = self.anagrams2.get_anagrams("surpassed")
    self.assertEqual(r, ['surpassed'])

    _, r = self.anagrams2.get_anagrams("surpasses")
    self.assertEqual(r, ['surpasses'])

    _, r = self.anagrams2.get_anagrams("surpassing")
    self.assertEqual(r, ['surpassing'])

    _, r = self.anagrams2.get_anagrams("surplus")
    self.assertEqual(r, ['surplus'])

    _, r = self.anagrams2.get_anagrams("surpluses")
    self.assertEqual(r, ['surpluses'])

    _, r = self.anagrams2.get_anagrams("surprise")
    self.assertEqual(r, ['surprise'])

    _, r = self.anagrams2.get_anagrams("surprised")
    self.assertEqual(r, ['surprised'])

    _, r = self.anagrams2.get_anagrams("surprises")
    self.assertEqual(r, ['surprises'])

    _, r = self.anagrams2.get_anagrams("surprising")
    self.assertEqual(r, ['surprising'])

    _, r = self.anagrams2.get_anagrams("surprisingly")
    self.assertEqual(r, ['surprisingly'])

    _, r = self.anagrams2.get_anagrams("surreal")
    self.assertEqual(r, ['surreal'])

    _, r = self.anagrams2.get_anagrams("surrender")
    self.assertEqual(r, ['surrender'])

    _, r = self.anagrams2.get_anagrams("surrendered")
    self.assertEqual(r, ['surrendered'])

    _, r = self.anagrams2.get_anagrams("surrendering")
    self.assertEqual(r, ['surrendering'])

    _, r = self.anagrams2.get_anagrams("surrenders")
    self.assertEqual(r, ['surrenders'])

    _, r = self.anagrams2.get_anagrams("surreptitious")
    self.assertEqual(r, ['surreptitious'])

    _, r = self.anagrams2.get_anagrams("surrey")
    self.assertEqual(r, ['surrey'])

    _, r = self.anagrams2.get_anagrams("surrogate")
    self.assertEqual(r, ['surrogate'])

    _, r = self.anagrams2.get_anagrams("surrogates")
    self.assertEqual(r, ['surrogates'])

    _, r = self.anagrams2.get_anagrams("surround")
    self.assertEqual(r, ['surround'])

    _, r = self.anagrams2.get_anagrams("surrounded")
    self.assertEqual(r, ['surrounded'])

    _, r = self.anagrams2.get_anagrams("surrounding")
    self.assertEqual(r, ['surrounding'])

    _, r = self.anagrams2.get_anagrams("surroundings")
    self.assertEqual(r, ['surroundings'])

    _, r = self.anagrams2.get_anagrams("surrounds")
    self.assertEqual(r, ['surrounds'])

    _, r = self.anagrams2.get_anagrams("surtax")
    self.assertEqual(r, ['surtax'])

    _, r = self.anagrams2.get_anagrams("survey")
    self.assertEqual(r, ['survey'])

    _, r = self.anagrams2.get_anagrams("surveyed")
    self.assertEqual(r, ['surveyed'])

    _, r = self.anagrams2.get_anagrams("surveying")
    self.assertEqual(r, ['surveying'])

    _, r = self.anagrams2.get_anagrams("surveyor")
    self.assertEqual(r, ['surveyor'])

    _, r = self.anagrams2.get_anagrams("surveyors")
    self.assertEqual(r, ['surveyors'])

    _, r = self.anagrams2.get_anagrams("surveys")
    self.assertEqual(r, ['surveys'])

    _, r = self.anagrams2.get_anagrams("survival")
    self.assertEqual(r, ['survival'])

    _, r = self.anagrams2.get_anagrams("survivals")
    self.assertEqual(r, ['survivals'])

    _, r = self.anagrams2.get_anagrams("survive")
    self.assertEqual(r, ['survive'])

    _, r = self.anagrams2.get_anagrams("survived")
    self.assertEqual(r, ['survived'])

    _, r = self.anagrams2.get_anagrams("survives")
    self.assertEqual(r, ['survives'])

    _, r = self.anagrams2.get_anagrams("surviving")
    self.assertEqual(r, ['surviving'])

    _, r = self.anagrams2.get_anagrams("survivor")
    self.assertEqual(r, ['survivor'])

    _, r = self.anagrams2.get_anagrams("survivors")
    self.assertEqual(r, ['survivors'])

    _, r = self.anagrams2.get_anagrams("sus")
    self.assertEqual(r, ['sus'])

    _, r = self.anagrams2.get_anagrams("susan")
    self.assertEqual(r, ['susan'])

    _, r = self.anagrams2.get_anagrams("susanne")
    self.assertEqual(r, ['susanne'])

    _, r = self.anagrams2.get_anagrams("susceptible")
    self.assertEqual(r, ['susceptible'])

    _, r = self.anagrams2.get_anagrams("susie")
    self.assertEqual(r, ['issue', 'susie'])

    _, r = self.anagrams2.get_anagrams("suspect")
    self.assertEqual(r, ['suspect'])

    _, r = self.anagrams2.get_anagrams("suspected")
    self.assertEqual(r, ['suspected'])

    _, r = self.anagrams2.get_anagrams("suspecting")
    self.assertEqual(r, ['suspecting'])

    _, r = self.anagrams2.get_anagrams("suspects")
    self.assertEqual(r, ['suspects'])

    _, r = self.anagrams2.get_anagrams("suspend")
    self.assertEqual(r, ['suspend'])

    _, r = self.anagrams2.get_anagrams("suspended")
    self.assertEqual(r, ['suspended'])

    _, r = self.anagrams2.get_anagrams("suspender")
    self.assertEqual(r, ['suspender'])

    _, r = self.anagrams2.get_anagrams("suspenders")
    self.assertEqual(r, ['suspenders'])

    _, r = self.anagrams2.get_anagrams("suspending")
    self.assertEqual(r, ['suspending'])

    _, r = self.anagrams2.get_anagrams("suspends")
    self.assertEqual(r, ['suspends'])

    _, r = self.anagrams2.get_anagrams("suspense")
    self.assertEqual(r, ['suspense'])

    _, r = self.anagrams2.get_anagrams("suspenses")
    self.assertEqual(r, ['suspenses'])

    _, r = self.anagrams2.get_anagrams("suspension")
    self.assertEqual(r, ['suspension'])

    _, r = self.anagrams2.get_anagrams("suspensions")
    self.assertEqual(r, ['suspensions'])

    _, r = self.anagrams2.get_anagrams("suspicion")
    self.assertEqual(r, ['suspicion'])

    _, r = self.anagrams2.get_anagrams("suspicions")
    self.assertEqual(r, ['suspicions'])

    _, r = self.anagrams2.get_anagrams("suspicious")
    self.assertEqual(r, ['suspicious'])

    _, r = self.anagrams2.get_anagrams("suspiciously")
    self.assertEqual(r, ['suspiciously'])

    _, r = self.anagrams2.get_anagrams("susquehanna")
    self.assertEqual(r, ['susquehanna'])

    _, r = self.anagrams2.get_anagrams("sussex")
    self.assertEqual(r, ['sussex'])

    _, r = self.anagrams2.get_anagrams("sustain")
    self.assertEqual(r, ['sustain'])

    _, r = self.anagrams2.get_anagrams("sustained")
    self.assertEqual(r, ['sustained'])

    _, r = self.anagrams2.get_anagrams("sustaining")
    self.assertEqual(r, ['sustaining'])

    _, r = self.anagrams2.get_anagrams("sustains")
    self.assertEqual(r, ['sustains'])

    _, r = self.anagrams2.get_anagrams("sustenance")
    self.assertEqual(r, ['sustenance'])

    _, r = self.anagrams2.get_anagrams("sutherland")
    self.assertEqual(r, ['sutherland'])

    _, r = self.anagrams2.get_anagrams("sutton")
    self.assertEqual(r, ['sutton'])

    _, r = self.anagrams2.get_anagrams("suture")
    self.assertEqual(r, ['suture'])

    _, r = self.anagrams2.get_anagrams("sutures")
    self.assertEqual(r, ['sutures'])

    _, r = self.anagrams2.get_anagrams("suwanee")
    self.assertEqual(r, ['suwanee'])

    _, r = self.anagrams2.get_anagrams("suzanne")
    self.assertEqual(r, ['suzanne'])

    _, r = self.anagrams2.get_anagrams("suzerainty")
    self.assertEqual(r, ['suzerainty'])

    _, r = self.anagrams2.get_anagrams("suzuki")
    self.assertEqual(r, ['suzuki'])

    _, r = self.anagrams2.get_anagrams("svelte")
    self.assertEqual(r, ['svelte'])

    _, r = self.anagrams2.get_anagrams("svetlana")
    self.assertEqual(r, ['svetlana'])

    _, r = self.anagrams2.get_anagrams("swab")
    self.assertEqual(r, ['swab'])

    _, r = self.anagrams2.get_anagrams("swabbing")
    self.assertEqual(r, ['swabbing'])

    _, r = self.anagrams2.get_anagrams("swagger")
    self.assertEqual(r, ['swagger'])

    _, r = self.anagrams2.get_anagrams("swaggered")
    self.assertEqual(r, ['swaggered'])

    _, r = self.anagrams2.get_anagrams("swaggering")
    self.assertEqual(r, ['swaggering'])

    _, r = self.anagrams2.get_anagrams("swahili")
    self.assertEqual(r, ['swahili'])

    _, r = self.anagrams2.get_anagrams("swain")
    self.assertEqual(r, ['swain'])

    _, r = self.anagrams2.get_anagrams("swains")
    self.assertEqual(r, ['swains'])

    _, r = self.anagrams2.get_anagrams("swallow")
    self.assertEqual(r, ['swallow', 'wallows'])

    _, r = self.anagrams2.get_anagrams("swallowed")
    self.assertEqual(r, ['swallowed'])

    _, r = self.anagrams2.get_anagrams("swallowing")
    self.assertEqual(r, ['swallowing'])

    _, r = self.anagrams2.get_anagrams("swallows")
    self.assertEqual(r, ['swallows'])

    _, r = self.anagrams2.get_anagrams("swallowtail")
    self.assertEqual(r, ['swallowtail'])

    _, r = self.anagrams2.get_anagrams("swam")
    self.assertEqual(r, ['swam'])

    _, r = self.anagrams2.get_anagrams("swami")
    self.assertEqual(r, ['swami'])

    _, r = self.anagrams2.get_anagrams("swamp")
    self.assertEqual(r, ['swamp'])

    _, r = self.anagrams2.get_anagrams("swamped")
    self.assertEqual(r, ['swamped'])

    _, r = self.anagrams2.get_anagrams("swamping")
    self.assertEqual(r, ['swamping'])

    _, r = self.anagrams2.get_anagrams("swamps")
    self.assertEqual(r, ['swamps'])

    _, r = self.anagrams2.get_anagrams("swampy")
    self.assertEqual(r, ['swampy'])

    _, r = self.anagrams2.get_anagrams("swan")
    self.assertEqual(r, ['swan'])

    _, r = self.anagrams2.get_anagrams("swank")
    self.assertEqual(r, ['swank'])

    _, r = self.anagrams2.get_anagrams("swanky")
    self.assertEqual(r, ['swanky'])

    _, r = self.anagrams2.get_anagrams("swanlike")
    self.assertEqual(r, ['swanlike'])

    _, r = self.anagrams2.get_anagrams("swans")
    self.assertEqual(r, ['swans'])

    _, r = self.anagrams2.get_anagrams("swansea")
    self.assertEqual(r, ['swansea'])

    _, r = self.anagrams2.get_anagrams("swanson")
    self.assertEqual(r, ['swanson'])

    _, r = self.anagrams2.get_anagrams("swap")
    self.assertEqual(r, ['paws', 'swap', 'wasp'])

    _, r = self.anagrams2.get_anagrams("swapped")
    self.assertEqual(r, ['swapped'])

    _, r = self.anagrams2.get_anagrams("swapping")
    self.assertEqual(r, ['swapping'])

    _, r = self.anagrams2.get_anagrams("swaps")
    self.assertEqual(r, ['swaps', 'wasps'])

    _, r = self.anagrams2.get_anagrams("swarm")
    self.assertEqual(r, ['swarm', 'warms'])

    _, r = self.anagrams2.get_anagrams("swarmed")
    self.assertEqual(r, ['swarmed'])

    _, r = self.anagrams2.get_anagrams("swarming")
    self.assertEqual(r, ['swarming'])

    _, r = self.anagrams2.get_anagrams("swarms")
    self.assertEqual(r, ['swarms'])

    _, r = self.anagrams2.get_anagrams("swarthmore")
    self.assertEqual(r, ['earthworms', 'swarthmore'])

    _, r = self.anagrams2.get_anagrams("swarthout")
    self.assertEqual(r, ['swarthout'])

    _, r = self.anagrams2.get_anagrams("swarthy")
    self.assertEqual(r, ['swarthy'])

    _, r = self.anagrams2.get_anagrams("swartz")
    self.assertEqual(r, ['swartz'])

    _, r = self.anagrams2.get_anagrams("swastika")
    self.assertEqual(r, ['swastika'])

    _, r = self.anagrams2.get_anagrams("swat")
    self.assertEqual(r, ['swat', 'twas'])

    _, r = self.anagrams2.get_anagrams("swatted")
    self.assertEqual(r, ['swatted'])

    _, r = self.anagrams2.get_anagrams("sway")
    self.assertEqual(r, ['sway', 'ways'])

    _, r = self.anagrams2.get_anagrams("swayed")
    self.assertEqual(r, ['swayed'])

    _, r = self.anagrams2.get_anagrams("swaying")
    self.assertEqual(r, ['swaying'])

    _, r = self.anagrams2.get_anagrams("swaziland")
    self.assertEqual(r, ['swaziland'])

    _, r = self.anagrams2.get_anagrams("swear")
    self.assertEqual(r, ['swear', 'wares', 'wears'])

    _, r = self.anagrams2.get_anagrams("swearer")
    self.assertEqual(r, ['swearer'])

    _, r = self.anagrams2.get_anagrams("swearing")
    self.assertEqual(r, ['swearing'])

    _, r = self.anagrams2.get_anagrams("swears")
    self.assertEqual(r, ['swears'])

    _, r = self.anagrams2.get_anagrams("sweat")
    self.assertEqual(r, ['sweat', 'waste'])

    _, r = self.anagrams2.get_anagrams("sweated")
    self.assertEqual(r, ['sweated'])

    _, r = self.anagrams2.get_anagrams("sweater")
    self.assertEqual(r, ['sweater'])

    _, r = self.anagrams2.get_anagrams("sweaters")
    self.assertEqual(r, ['sweaters'])

    _, r = self.anagrams2.get_anagrams("sweating")
    self.assertEqual(r, ['sweating'])

    _, r = self.anagrams2.get_anagrams("sweats")
    self.assertEqual(r, ['sweats', 'wastes'])

    _, r = self.anagrams2.get_anagrams("sweatshirt")
    self.assertEqual(r, ['sweatshirt'])

    _, r = self.anagrams2.get_anagrams("sweaty")
    self.assertEqual(r, ['sweaty'])

    _, r = self.anagrams2.get_anagrams("swede")
    self.assertEqual(r, ['sewed', 'swede', 'weeds'])

    _, r = self.anagrams2.get_anagrams("sweden")
    self.assertEqual(r, ['sweden'])

    _, r = self.anagrams2.get_anagrams("swedes")
    self.assertEqual(r, ['swedes'])

    _, r = self.anagrams2.get_anagrams("swedish")
    self.assertEqual(r, ['swedish', 'swished'])

    _, r = self.anagrams2.get_anagrams("sweeney")
    self.assertEqual(r, ['sweeney'])

    _, r = self.anagrams2.get_anagrams("sweeneys")
    self.assertEqual(r, ['sweeneys'])

    _, r = self.anagrams2.get_anagrams("sweep")
    self.assertEqual(r, ['sweep', 'weeps'])

    _, r = self.anagrams2.get_anagrams("sweeper")
    self.assertEqual(r, ['sweeper'])

    _, r = self.anagrams2.get_anagrams("sweepers")
    self.assertEqual(r, ['sweepers'])

    _, r = self.anagrams2.get_anagrams("sweeping")
    self.assertEqual(r, ['sweeping'])

    _, r = self.anagrams2.get_anagrams("sweepings")
    self.assertEqual(r, ['sweepings'])

    _, r = self.anagrams2.get_anagrams("sweeps")
    self.assertEqual(r, ['sweeps'])

    _, r = self.anagrams2.get_anagrams("sweepstakes")
    self.assertEqual(r, ['sweepstakes'])

    _, r = self.anagrams2.get_anagrams("sweet")
    self.assertEqual(r, ['sweet'])

    _, r = self.anagrams2.get_anagrams("sweeten")
    self.assertEqual(r, ['sweeten'])

    _, r = self.anagrams2.get_anagrams("sweetened")
    self.assertEqual(r, ['sweetened'])

    _, r = self.anagrams2.get_anagrams("sweetener")
    self.assertEqual(r, ['sweetener'])

    _, r = self.anagrams2.get_anagrams("sweeteners")
    self.assertEqual(r, ['sweeteners'])

    _, r = self.anagrams2.get_anagrams("sweetening")
    self.assertEqual(r, ['sweetening'])

    _, r = self.anagrams2.get_anagrams("sweetenings")
    self.assertEqual(r, ['sweetenings'])

    _, r = self.anagrams2.get_anagrams("sweetens")
    self.assertEqual(r, ['sweetens'])

    _, r = self.anagrams2.get_anagrams("sweeter")
    self.assertEqual(r, ['sweeter'])

    _, r = self.anagrams2.get_anagrams("sweetest")
    self.assertEqual(r, ['sweetest'])

    _, r = self.anagrams2.get_anagrams("sweetheart")
    self.assertEqual(r, ['sweetheart'])

    _, r = self.anagrams2.get_anagrams("sweethearts")
    self.assertEqual(r, ['sweethearts'])

    _, r = self.anagrams2.get_anagrams("sweetish")
    self.assertEqual(r, ['sweetish'])

    _, r = self.anagrams2.get_anagrams("sweetly")
    self.assertEqual(r, ['sweetly'])

    _, r = self.anagrams2.get_anagrams("sweetness")
    self.assertEqual(r, ['sweetness'])

    _, r = self.anagrams2.get_anagrams("sweets")
    self.assertEqual(r, ['sweets'])

    _, r = self.anagrams2.get_anagrams("swell")
    self.assertEqual(r, ['swell', 'wells'])

    _, r = self.anagrams2.get_anagrams("swelled")
    self.assertEqual(r, ['swelled'])

    _, r = self.anagrams2.get_anagrams("swelling")
    self.assertEqual(r, ['swelling'])

    _, r = self.anagrams2.get_anagrams("swellings")
    self.assertEqual(r, ['swellings'])

    _, r = self.anagrams2.get_anagrams("swells")
    self.assertEqual(r, ['swells'])

    _, r = self.anagrams2.get_anagrams("swelter")
    self.assertEqual(r, ['swelter', 'wrestle'])

    _, r = self.anagrams2.get_anagrams("swenson")
    self.assertEqual(r, ['swenson'])

    _, r = self.anagrams2.get_anagrams("swept")
    self.assertEqual(r, ['swept'])

    _, r = self.anagrams2.get_anagrams("swerve")
    self.assertEqual(r, ['swerve'])

    _, r = self.anagrams2.get_anagrams("swerved")
    self.assertEqual(r, ['swerved'])

    _, r = self.anagrams2.get_anagrams("swerves")
    self.assertEqual(r, ['swerves'])

    _, r = self.anagrams2.get_anagrams("swerving")
    self.assertEqual(r, ['swerving'])

    _, r = self.anagrams2.get_anagrams("swift")
    self.assertEqual(r, ['swift'])

    _, r = self.anagrams2.get_anagrams("swifter")
    self.assertEqual(r, ['swifter'])

    _, r = self.anagrams2.get_anagrams("swiftest")
    self.assertEqual(r, ['swiftest'])

    _, r = self.anagrams2.get_anagrams("swiftly")
    self.assertEqual(r, ['swiftly'])

    _, r = self.anagrams2.get_anagrams("swiftness")
    self.assertEqual(r, ['swiftness'])

    _, r = self.anagrams2.get_anagrams("swim")
    self.assertEqual(r, ['swim'])

    _, r = self.anagrams2.get_anagrams("swimmer")
    self.assertEqual(r, ['swimmer'])

    _, r = self.anagrams2.get_anagrams("swimmers")
    self.assertEqual(r, ['swimmers'])

    _, r = self.anagrams2.get_anagrams("swimming")
    self.assertEqual(r, ['swimming'])

    _, r = self.anagrams2.get_anagrams("swimmingly")
    self.assertEqual(r, ['swimmingly'])

    _, r = self.anagrams2.get_anagrams("swims")
    self.assertEqual(r, ['swims'])

    _, r = self.anagrams2.get_anagrams("swimsuit")
    self.assertEqual(r, ['swimsuit'])

    _, r = self.anagrams2.get_anagrams("swinburne")
    self.assertEqual(r, ['swinburne'])

    _, r = self.anagrams2.get_anagrams("swindle")
    self.assertEqual(r, ['swindle'])

    _, r = self.anagrams2.get_anagrams("swine")
    self.assertEqual(r, ['sinew', 'swine', 'wines'])

    _, r = self.anagrams2.get_anagrams("swing")
    self.assertEqual(r, ['swing', 'wings'])

    _, r = self.anagrams2.get_anagrams("swinger")
    self.assertEqual(r, ['swinger'])

    _, r = self.anagrams2.get_anagrams("swingers")
    self.assertEqual(r, ['swingers'])

    _, r = self.anagrams2.get_anagrams("swinging")
    self.assertEqual(r, ['swinging'])

    _, r = self.anagrams2.get_anagrams("swings")
    self.assertEqual(r, ['swings'])

    _, r = self.anagrams2.get_anagrams("swink")
    self.assertEqual(r, ['swink', 'winks'])

    _, r = self.anagrams2.get_anagrams("swipe")
    self.assertEqual(r, ['swipe', 'wipes'])

    _, r = self.anagrams2.get_anagrams("swirl")
    self.assertEqual(r, ['swirl'])

    _, r = self.anagrams2.get_anagrams("swirled")
    self.assertEqual(r, ['swirled'])

    _, r = self.anagrams2.get_anagrams("swirling")
    self.assertEqual(r, ['swirling'])

    _, r = self.anagrams2.get_anagrams("swish")
    self.assertEqual(r, ['swish'])

    _, r = self.anagrams2.get_anagrams("swished")
    self.assertEqual(r, ['swedish', 'swished'])

    _, r = self.anagrams2.get_anagrams("swiss")
    self.assertEqual(r, ['swiss'])

    _, r = self.anagrams2.get_anagrams("switch")
    self.assertEqual(r, ['switch'])

    _, r = self.anagrams2.get_anagrams("switchblade")
    self.assertEqual(r, ['switchblade'])

    _, r = self.anagrams2.get_anagrams("switchboard")
    self.assertEqual(r, ['switchboard'])

    _, r = self.anagrams2.get_anagrams("switchboards")
    self.assertEqual(r, ['switchboards'])

    _, r = self.anagrams2.get_anagrams("switched")
    self.assertEqual(r, ['switched'])

    _, r = self.anagrams2.get_anagrams("switcher")
    self.assertEqual(r, ['switcher'])

    _, r = self.anagrams2.get_anagrams("switchers")
    self.assertEqual(r, ['switchers'])

    _, r = self.anagrams2.get_anagrams("switches")
    self.assertEqual(r, ['switches'])

    _, r = self.anagrams2.get_anagrams("switching")
    self.assertEqual(r, ['switching'])

    _, r = self.anagrams2.get_anagrams("switchings")
    self.assertEqual(r, ['switchings'])

    _, r = self.anagrams2.get_anagrams("switchman")
    self.assertEqual(r, ['switchman'])

    _, r = self.anagrams2.get_anagrams("switzer")
    self.assertEqual(r, ['switzer'])

    _, r = self.anagrams2.get_anagrams("switzerland")
    self.assertEqual(r, ['switzerland'])

    _, r = self.anagrams2.get_anagrams("swivel")
    self.assertEqual(r, ['swivel'])

    _, r = self.anagrams2.get_anagrams("swizzle")
    self.assertEqual(r, ['swizzle'])

    _, r = self.anagrams2.get_anagrams("swollen")
    self.assertEqual(r, ['swollen'])

    _, r = self.anagrams2.get_anagrams("swoon")
    self.assertEqual(r, ['swoon'])

    _, r = self.anagrams2.get_anagrams("swoop")
    self.assertEqual(r, ['swoop'])

    _, r = self.anagrams2.get_anagrams("swooped")
    self.assertEqual(r, ['swooped'])

    _, r = self.anagrams2.get_anagrams("swooping")
    self.assertEqual(r, ['swooping'])

    _, r = self.anagrams2.get_anagrams("swoops")
    self.assertEqual(r, ['swoops'])

    _, r = self.anagrams2.get_anagrams("sword")
    self.assertEqual(r, ['sword', 'words'])

    _, r = self.anagrams2.get_anagrams("swordfish")
    self.assertEqual(r, ['swordfish'])

    _, r = self.anagrams2.get_anagrams("swords")
    self.assertEqual(r, ['swords'])

    _, r = self.anagrams2.get_anagrams("swore")
    self.assertEqual(r, ['swore', 'worse'])

    _, r = self.anagrams2.get_anagrams("sworn")
    self.assertEqual(r, ['sworn'])

    _, r = self.anagrams2.get_anagrams("swum")
    self.assertEqual(r, ['swum'])

    _, r = self.anagrams2.get_anagrams("swung")
    self.assertEqual(r, ['swung'])

    _, r = self.anagrams2.get_anagrams("sybil")
    self.assertEqual(r, ['sybil'])

    _, r = self.anagrams2.get_anagrams("sycamore")
    self.assertEqual(r, ['sycamore'])

    _, r = self.anagrams2.get_anagrams("sycophant")
    self.assertEqual(r, ['sycophant'])

    _, r = self.anagrams2.get_anagrams("sycophantic")
    self.assertEqual(r, ['sycophantic'])

    _, r = self.anagrams2.get_anagrams("sydney")
    self.assertEqual(r, ['sydney'])

    _, r = self.anagrams2.get_anagrams("sykes")
    self.assertEqual(r, ['sykes'])

    _, r = self.anagrams2.get_anagrams("syllable")
    self.assertEqual(r, ['syllable'])

    _, r = self.anagrams2.get_anagrams("syllables")
    self.assertEqual(r, ['syllables'])

    _, r = self.anagrams2.get_anagrams("syllogism")
    self.assertEqual(r, ['syllogism'])

    _, r = self.anagrams2.get_anagrams("syllogisms")
    self.assertEqual(r, ['syllogisms'])

    _, r = self.anagrams2.get_anagrams("syllogistic")
    self.assertEqual(r, ['syllogistic'])

    _, r = self.anagrams2.get_anagrams("sylow")
    self.assertEqual(r, ['sylow'])

    _, r = self.anagrams2.get_anagrams("sylvan")
    self.assertEqual(r, ['sylvan'])

    _, r = self.anagrams2.get_anagrams("sylvania")
    self.assertEqual(r, ['sylvania'])

    _, r = self.anagrams2.get_anagrams("sylvester")
    self.assertEqual(r, ['sylvester'])

    _, r = self.anagrams2.get_anagrams("sylvia")
    self.assertEqual(r, ['sylvia'])

    _, r = self.anagrams2.get_anagrams("sylvie")
    self.assertEqual(r, ['sylvie'])

    _, r = self.anagrams2.get_anagrams("symbiosis")
    self.assertEqual(r, ['symbiosis'])

    _, r = self.anagrams2.get_anagrams("symbiotic")
    self.assertEqual(r, ['symbiotic'])

    _, r = self.anagrams2.get_anagrams("symbol")
    self.assertEqual(r, ['symbol'])

    _, r = self.anagrams2.get_anagrams("symbolic")
    self.assertEqual(r, ['symbolic'])

    _, r = self.anagrams2.get_anagrams("symbolically")
    self.assertEqual(r, ['symbolically'])

    _, r = self.anagrams2.get_anagrams("symbolics")
    self.assertEqual(r, ['symbolics'])

    _, r = self.anagrams2.get_anagrams("symbolism")
    self.assertEqual(r, ['symbolism'])

    _, r = self.anagrams2.get_anagrams("symbolization")
    self.assertEqual(r, ['symbolization'])

    _, r = self.anagrams2.get_anagrams("symbolize")
    self.assertEqual(r, ['symbolize'])

    _, r = self.anagrams2.get_anagrams("symbolized")
    self.assertEqual(r, ['symbolized'])

    _, r = self.anagrams2.get_anagrams("symbolizes")
    self.assertEqual(r, ['symbolizes'])

    _, r = self.anagrams2.get_anagrams("symbolizing")
    self.assertEqual(r, ['symbolizing'])

    _, r = self.anagrams2.get_anagrams("symbols")
    self.assertEqual(r, ['symbols'])

    _, r = self.anagrams2.get_anagrams("symington")
    self.assertEqual(r, ['symington'])

    _, r = self.anagrams2.get_anagrams("symmetric")
    self.assertEqual(r, ['symmetric'])

    _, r = self.anagrams2.get_anagrams("symmetrical")
    self.assertEqual(r, ['symmetrical'])

    _, r = self.anagrams2.get_anagrams("symmetrically")
    self.assertEqual(r, ['symmetrically'])

    _, r = self.anagrams2.get_anagrams("symmetries")
    self.assertEqual(r, ['symmetries'])

    _, r = self.anagrams2.get_anagrams("symmetry")
    self.assertEqual(r, ['symmetry'])

    _, r = self.anagrams2.get_anagrams("sympathetic")
    self.assertEqual(r, ['sympathetic'])

    _, r = self.anagrams2.get_anagrams("sympathies")
    self.assertEqual(r, ['sympathies'])

    _, r = self.anagrams2.get_anagrams("sympathize")
    self.assertEqual(r, ['sympathize'])

    _, r = self.anagrams2.get_anagrams("sympathized")
    self.assertEqual(r, ['sympathized'])

    _, r = self.anagrams2.get_anagrams("sympathizer")
    self.assertEqual(r, ['sympathizer'])

    _, r = self.anagrams2.get_anagrams("sympathizers")
    self.assertEqual(r, ['sympathizers'])

    _, r = self.anagrams2.get_anagrams("sympathizes")
    self.assertEqual(r, ['sympathizes'])

    _, r = self.anagrams2.get_anagrams("sympathizing")
    self.assertEqual(r, ['sympathizing'])

    _, r = self.anagrams2.get_anagrams("sympathizingly")
    self.assertEqual(r, ['sympathizingly'])

    _, r = self.anagrams2.get_anagrams("sympathy")
    self.assertEqual(r, ['sympathy'])

    _, r = self.anagrams2.get_anagrams("symphonic")
    self.assertEqual(r, ['symphonic'])

    _, r = self.anagrams2.get_anagrams("symphonies")
    self.assertEqual(r, ['symphonies'])

    _, r = self.anagrams2.get_anagrams("symphony")
    self.assertEqual(r, ['symphony'])

    _, r = self.anagrams2.get_anagrams("symposia")
    self.assertEqual(r, ['symposia'])

    _, r = self.anagrams2.get_anagrams("symposium")
    self.assertEqual(r, ['symposium'])

    _, r = self.anagrams2.get_anagrams("symposiums")
    self.assertEqual(r, ['symposiums'])

    _, r = self.anagrams2.get_anagrams("symptom")
    self.assertEqual(r, ['symptom'])

    _, r = self.anagrams2.get_anagrams("symptomatic")
    self.assertEqual(r, ['symptomatic'])

    _, r = self.anagrams2.get_anagrams("symptoms")
    self.assertEqual(r, ['symptoms'])

    _, r = self.anagrams2.get_anagrams("synagogue")
    self.assertEqual(r, ['synagogue'])

    _, r = self.anagrams2.get_anagrams("synapse")
    self.assertEqual(r, ['synapse'])

    _, r = self.anagrams2.get_anagrams("synapses")
    self.assertEqual(r, ['synapses'])

    _, r = self.anagrams2.get_anagrams("synaptic")
    self.assertEqual(r, ['synaptic'])

    _, r = self.anagrams2.get_anagrams("synchronism")
    self.assertEqual(r, ['synchronism'])

    _, r = self.anagrams2.get_anagrams("synchronization")
    self.assertEqual(r, ['synchronization'])

    _, r = self.anagrams2.get_anagrams("synchronize")
    self.assertEqual(r, ['synchronize'])

    _, r = self.anagrams2.get_anagrams("synchronized")
    self.assertEqual(r, ['synchronized'])

    _, r = self.anagrams2.get_anagrams("synchronizer")
    self.assertEqual(r, ['synchronizer'])

    _, r = self.anagrams2.get_anagrams("synchronizers")
    self.assertEqual(r, ['synchronizers'])

    _, r = self.anagrams2.get_anagrams("synchronizes")
    self.assertEqual(r, ['synchronizes'])

    _, r = self.anagrams2.get_anagrams("synchronizing")
    self.assertEqual(r, ['synchronizing'])

    _, r = self.anagrams2.get_anagrams("synchronous")
    self.assertEqual(r, ['synchronous'])

    _, r = self.anagrams2.get_anagrams("synchronously")
    self.assertEqual(r, ['synchronously'])

    _, r = self.anagrams2.get_anagrams("synchrony")
    self.assertEqual(r, ['synchrony'])

    _, r = self.anagrams2.get_anagrams("synchrotron")
    self.assertEqual(r, ['synchrotron'])

    _, r = self.anagrams2.get_anagrams("syncopate")
    self.assertEqual(r, ['syncopate'])

    _, r = self.anagrams2.get_anagrams("syndicate")
    self.assertEqual(r, ['syndicate'])

    _, r = self.anagrams2.get_anagrams("syndicated")
    self.assertEqual(r, ['syndicated'])

    _, r = self.anagrams2.get_anagrams("syndicates")
    self.assertEqual(r, ['syndicates'])

    _, r = self.anagrams2.get_anagrams("syndication")
    self.assertEqual(r, ['syndication'])

    _, r = self.anagrams2.get_anagrams("syndrome")
    self.assertEqual(r, ['syndrome'])

    _, r = self.anagrams2.get_anagrams("syndromes")
    self.assertEqual(r, ['syndromes'])

    _, r = self.anagrams2.get_anagrams("synergism")
    self.assertEqual(r, ['synergism'])

    _, r = self.anagrams2.get_anagrams("synergistic")
    self.assertEqual(r, ['synergistic'])

    _, r = self.anagrams2.get_anagrams("synergy")
    self.assertEqual(r, ['synergy'])

    _, r = self.anagrams2.get_anagrams("synge")
    self.assertEqual(r, ['synge'])

    _, r = self.anagrams2.get_anagrams("synod")
    self.assertEqual(r, ['synod'])

    _, r = self.anagrams2.get_anagrams("synonym")
    self.assertEqual(r, ['synonym'])

    _, r = self.anagrams2.get_anagrams("synonymous")
    self.assertEqual(r, ['synonymous'])

    _, r = self.anagrams2.get_anagrams("synonymously")
    self.assertEqual(r, ['synonymously'])

    _, r = self.anagrams2.get_anagrams("synonyms")
    self.assertEqual(r, ['synonyms'])

    _, r = self.anagrams2.get_anagrams("synopses")
    self.assertEqual(r, ['synopses'])

    _, r = self.anagrams2.get_anagrams("synopsis")
    self.assertEqual(r, ['synopsis'])

    _, r = self.anagrams2.get_anagrams("syntactic")
    self.assertEqual(r, ['syntactic'])

    _, r = self.anagrams2.get_anagrams("syntactical")
    self.assertEqual(r, ['syntactical'])

    _, r = self.anagrams2.get_anagrams("syntactically")
    self.assertEqual(r, ['syntactically'])

    _, r = self.anagrams2.get_anagrams("syntax")
    self.assertEqual(r, ['syntax'])

    _, r = self.anagrams2.get_anagrams("syntaxes")
    self.assertEqual(r, ['syntaxes'])

    _, r = self.anagrams2.get_anagrams("synthesis")
    self.assertEqual(r, ['synthesis'])

    _, r = self.anagrams2.get_anagrams("synthesize")
    self.assertEqual(r, ['synthesize'])

    _, r = self.anagrams2.get_anagrams("synthesized")
    self.assertEqual(r, ['synthesized'])

    _, r = self.anagrams2.get_anagrams("synthesizer")
    self.assertEqual(r, ['synthesizer'])

    _, r = self.anagrams2.get_anagrams("synthesizers")
    self.assertEqual(r, ['synthesizers'])

    _, r = self.anagrams2.get_anagrams("synthesizes")
    self.assertEqual(r, ['synthesizes'])

    _, r = self.anagrams2.get_anagrams("synthesizing")
    self.assertEqual(r, ['synthesizing'])

    _, r = self.anagrams2.get_anagrams("synthetic")
    self.assertEqual(r, ['synthetic'])

    _, r = self.anagrams2.get_anagrams("synthetics")
    self.assertEqual(r, ['synthetics'])

    _, r = self.anagrams2.get_anagrams("syracuse")
    self.assertEqual(r, ['syracuse'])

    _, r = self.anagrams2.get_anagrams("syria")
    self.assertEqual(r, ['syria'])

    _, r = self.anagrams2.get_anagrams("syrian")
    self.assertEqual(r, ['syrian'])

    _, r = self.anagrams2.get_anagrams("syrianize")
    self.assertEqual(r, ['syrianize'])

    _, r = self.anagrams2.get_anagrams("syrianizes")
    self.assertEqual(r, ['syrianizes'])

    _, r = self.anagrams2.get_anagrams("syrians")
    self.assertEqual(r, ['syrians'])

    _, r = self.anagrams2.get_anagrams("syringe")
    self.assertEqual(r, ['syringe'])

    _, r = self.anagrams2.get_anagrams("syringes")
    self.assertEqual(r, ['syringes'])

    _, r = self.anagrams2.get_anagrams("syrup")
    self.assertEqual(r, ['syrup'])

    _, r = self.anagrams2.get_anagrams("syrupy")
    self.assertEqual(r, ['syrupy'])

    _, r = self.anagrams2.get_anagrams("system")
    self.assertEqual(r, ['system'])

    _, r = self.anagrams2.get_anagrams("systematic")
    self.assertEqual(r, ['systematic'])

    _, r = self.anagrams2.get_anagrams("systematically")
    self.assertEqual(r, ['systematically'])

    _, r = self.anagrams2.get_anagrams("systematize")
    self.assertEqual(r, ['systematize'])

    _, r = self.anagrams2.get_anagrams("systematized")
    self.assertEqual(r, ['systematized'])

    _, r = self.anagrams2.get_anagrams("systematizes")
    self.assertEqual(r, ['systematizes'])

    _, r = self.anagrams2.get_anagrams("systematizing")
    self.assertEqual(r, ['systematizing'])

    _, r = self.anagrams2.get_anagrams("systemic")
    self.assertEqual(r, ['systemic'])

    _, r = self.anagrams2.get_anagrams("systems")
    self.assertEqual(r, ['systems'])

    _, r = self.anagrams2.get_anagrams("systemwide")
    self.assertEqual(r, ['systemwide'])

    _, r = self.anagrams2.get_anagrams("szilard")
    self.assertEqual(r, ['lizards', 'szilard'])

    _, r = self.anagrams2.get_anagrams("tab")
    self.assertEqual(r, ['bat', 'tab'])

    _, r = self.anagrams2.get_anagrams("tabernacle")
    self.assertEqual(r, ['tabernacle'])

    _, r = self.anagrams2.get_anagrams("tabernacles")
    self.assertEqual(r, ['tabernacles'])

    _, r = self.anagrams2.get_anagrams("table")
    self.assertEqual(r, ['bleat', 'table'])

    _, r = self.anagrams2.get_anagrams("tableau")
    self.assertEqual(r, ['tableau'])

    _, r = self.anagrams2.get_anagrams("tableaus")
    self.assertEqual(r, ['tableaus'])

    _, r = self.anagrams2.get_anagrams("tablecloth")
    self.assertEqual(r, ['tablecloth'])

    _, r = self.anagrams2.get_anagrams("tablecloths")
    self.assertEqual(r, ['tablecloths'])

    _, r = self.anagrams2.get_anagrams("tabled")
    self.assertEqual(r, ['tabled'])

    _, r = self.anagrams2.get_anagrams("tables")
    self.assertEqual(r, ['ablest', 'bleats', 'stable', 'tables'])

    _, r = self.anagrams2.get_anagrams("tablespoon")
    self.assertEqual(r, ['tablespoon'])

    _, r = self.anagrams2.get_anagrams("tablespoonful")
    self.assertEqual(r, ['tablespoonful'])

    _, r = self.anagrams2.get_anagrams("tablespoonfuls")
    self.assertEqual(r, ['tablespoonfuls'])

    _, r = self.anagrams2.get_anagrams("tablespoons")
    self.assertEqual(r, ['tablespoons'])

    _, r = self.anagrams2.get_anagrams("tablet")
    self.assertEqual(r, ['battle', 'tablet'])

    _, r = self.anagrams2.get_anagrams("tablets")
    self.assertEqual(r, ['battles', 'tablets'])

    _, r = self.anagrams2.get_anagrams("tabling")
    self.assertEqual(r, ['tabling'])

    _, r = self.anagrams2.get_anagrams("taboo")
    self.assertEqual(r, ['taboo'])

    _, r = self.anagrams2.get_anagrams("taboos")
    self.assertEqual(r, ['taboos'])

    _, r = self.anagrams2.get_anagrams("tabs")
    self.assertEqual(r, ['bats', 'stab', 'tabs'])

    _, r = self.anagrams2.get_anagrams("tabular")
    self.assertEqual(r, ['tabular'])

    _, r = self.anagrams2.get_anagrams("tabulate")
    self.assertEqual(r, ['tabulate'])

    _, r = self.anagrams2.get_anagrams("tabulated")
    self.assertEqual(r, ['tabulated'])

    _, r = self.anagrams2.get_anagrams("tabulates")
    self.assertEqual(r, ['tabulates'])

    _, r = self.anagrams2.get_anagrams("tabulating")
    self.assertEqual(r, ['tabulating'])

    _, r = self.anagrams2.get_anagrams("tabulation")
    self.assertEqual(r, ['tabulation'])

    _, r = self.anagrams2.get_anagrams("tabulations")
    self.assertEqual(r, ['tabulations'])

    _, r = self.anagrams2.get_anagrams("tabulator")
    self.assertEqual(r, ['tabulator'])

    _, r = self.anagrams2.get_anagrams("tabulators")
    self.assertEqual(r, ['tabulators'])

    _, r = self.anagrams2.get_anagrams("tachometer")
    self.assertEqual(r, ['tachometer'])

    _, r = self.anagrams2.get_anagrams("tachometers")
    self.assertEqual(r, ['tachometers'])

    _, r = self.anagrams2.get_anagrams("tacit")
    self.assertEqual(r, ['attic', 'tacit'])

    _, r = self.anagrams2.get_anagrams("tacitly")
    self.assertEqual(r, ['tacitly'])

    _, r = self.anagrams2.get_anagrams("tacitus")
    self.assertEqual(r, ['tacitus'])

    _, r = self.anagrams2.get_anagrams("tack")
    self.assertEqual(r, ['tack'])

    _, r = self.anagrams2.get_anagrams("tacked")
    self.assertEqual(r, ['tacked'])

    _, r = self.anagrams2.get_anagrams("tacking")
    self.assertEqual(r, ['tacking'])

    _, r = self.anagrams2.get_anagrams("tackle")
    self.assertEqual(r, ['tackle'])

    _, r = self.anagrams2.get_anagrams("tackles")
    self.assertEqual(r, ['tackles'])

    _, r = self.anagrams2.get_anagrams("tacoma")
    self.assertEqual(r, ['tacoma'])

    _, r = self.anagrams2.get_anagrams("tact")
    self.assertEqual(r, ['tact'])

    _, r = self.anagrams2.get_anagrams("tactic")
    self.assertEqual(r, ['tactic'])

    _, r = self.anagrams2.get_anagrams("tactics")
    self.assertEqual(r, ['tactics'])

    _, r = self.anagrams2.get_anagrams("tactile")
    self.assertEqual(r, ['lattice', 'tactile'])

    _, r = self.anagrams2.get_anagrams("taft")
    self.assertEqual(r, ['taft'])

    _, r = self.anagrams2.get_anagrams("tag")
    self.assertEqual(r, ['tag'])

    _, r = self.anagrams2.get_anagrams("tagged")
    self.assertEqual(r, ['gadget', 'tagged'])

    _, r = self.anagrams2.get_anagrams("tagging")
    self.assertEqual(r, ['tagging'])

    _, r = self.anagrams2.get_anagrams("tags")
    self.assertEqual(r, ['stag', 'tags'])

    _, r = self.anagrams2.get_anagrams("tahiti")
    self.assertEqual(r, ['tahiti'])

    _, r = self.anagrams2.get_anagrams("tahoe")
    self.assertEqual(r, ['tahoe'])

    _, r = self.anagrams2.get_anagrams("tail")
    self.assertEqual(r, ['tail'])

    _, r = self.anagrams2.get_anagrams("tailed")
    self.assertEqual(r, ['detail', 'dilate', 'tailed'])

    _, r = self.anagrams2.get_anagrams("tailing")
    self.assertEqual(r, ['tailing'])

    _, r = self.anagrams2.get_anagrams("tailor")
    self.assertEqual(r, ['tailor'])

    _, r = self.anagrams2.get_anagrams("tailored")
    self.assertEqual(r, ['tailored'])

    _, r = self.anagrams2.get_anagrams("tailoring")
    self.assertEqual(r, ['tailoring'])

    _, r = self.anagrams2.get_anagrams("tailors")
    self.assertEqual(r, ['tailors'])

    _, r = self.anagrams2.get_anagrams("tails")
    self.assertEqual(r, ['tails'])

    _, r = self.anagrams2.get_anagrams("taint")
    self.assertEqual(r, ['taint', 'titan'])

    _, r = self.anagrams2.get_anagrams("tainted")
    self.assertEqual(r, ['tainted'])

    _, r = self.anagrams2.get_anagrams("taipei")
    self.assertEqual(r, ['taipei'])

    _, r = self.anagrams2.get_anagrams("taiwan")
    self.assertEqual(r, ['taiwan'])

    _, r = self.anagrams2.get_anagrams("taiwanese")
    self.assertEqual(r, ['taiwanese'])

    _, r = self.anagrams2.get_anagrams("take")
    self.assertEqual(r, ['kate', 'take'])

    _, r = self.anagrams2.get_anagrams("taken")
    self.assertEqual(r, ['taken'])

    _, r = self.anagrams2.get_anagrams("taker")
    self.assertEqual(r, ['taker'])

    _, r = self.anagrams2.get_anagrams("takers")
    self.assertEqual(r, ['skater', 'streak', 'takers'])

    _, r = self.anagrams2.get_anagrams("takes")
    self.assertEqual(r, ['keats', 'skate', 'stake', 'steak', 'takes'])

    _, r = self.anagrams2.get_anagrams("taking")
    self.assertEqual(r, ['taking'])

    _, r = self.anagrams2.get_anagrams("takings")
    self.assertEqual(r, ['skating', 'takings', 'tasking'])

    _, r = self.anagrams2.get_anagrams("tale")
    self.assertEqual(r, ['late', 'tale'])

    _, r = self.anagrams2.get_anagrams("talent")
    self.assertEqual(r, ['latent', 'talent'])

    _, r = self.anagrams2.get_anagrams("talented")
    self.assertEqual(r, ['talented'])

    _, r = self.anagrams2.get_anagrams("talents")
    self.assertEqual(r, ['talents'])

    _, r = self.anagrams2.get_anagrams("tales")
    self.assertEqual(r, ['least', 'slate', 'stale', 'steal', 'tales'])

    _, r = self.anagrams2.get_anagrams("talk")
    self.assertEqual(r, ['talk'])

    _, r = self.anagrams2.get_anagrams("talkative")
    self.assertEqual(r, ['talkative'])

    _, r = self.anagrams2.get_anagrams("talkatively")
    self.assertEqual(r, ['talkatively'])

    _, r = self.anagrams2.get_anagrams("talkativeness")
    self.assertEqual(r, ['talkativeness'])

    _, r = self.anagrams2.get_anagrams("talked")
    self.assertEqual(r, ['talked'])

    _, r = self.anagrams2.get_anagrams("talker")
    self.assertEqual(r, ['talker'])

    _, r = self.anagrams2.get_anagrams("talkers")
    self.assertEqual(r, ['talkers'])

    _, r = self.anagrams2.get_anagrams("talkie")
    self.assertEqual(r, ['talkie'])

    _, r = self.anagrams2.get_anagrams("talking")
    self.assertEqual(r, ['talking'])

    _, r = self.anagrams2.get_anagrams("talks")
    self.assertEqual(r, ['stalk', 'talks'])

    _, r = self.anagrams2.get_anagrams("tall")
    self.assertEqual(r, ['tall'])

    _, r = self.anagrams2.get_anagrams("talladega")
    self.assertEqual(r, ['talladega'])

    _, r = self.anagrams2.get_anagrams("tallahassee")
    self.assertEqual(r, ['tallahassee'])

    _, r = self.anagrams2.get_anagrams("tallahatchie")
    self.assertEqual(r, ['tallahatchie'])

    _, r = self.anagrams2.get_anagrams("tallahoosa")
    self.assertEqual(r, ['tallahoosa'])

    _, r = self.anagrams2.get_anagrams("tallchief")
    self.assertEqual(r, ['tallchief'])

    _, r = self.anagrams2.get_anagrams("taller")
    self.assertEqual(r, ['taller'])

    _, r = self.anagrams2.get_anagrams("tallest")
    self.assertEqual(r, ['tallest'])

    _, r = self.anagrams2.get_anagrams("talleyrand")
    self.assertEqual(r, ['talleyrand'])

    _, r = self.anagrams2.get_anagrams("tallness")
    self.assertEqual(r, ['tallness'])

    _, r = self.anagrams2.get_anagrams("tallow")
    self.assertEqual(r, ['tallow'])

    _, r = self.anagrams2.get_anagrams("tally")
    self.assertEqual(r, ['tally'])

    _, r = self.anagrams2.get_anagrams("talmud")
    self.assertEqual(r, ['talmud'])

    _, r = self.anagrams2.get_anagrams("talmudism")
    self.assertEqual(r, ['talmudism'])

    _, r = self.anagrams2.get_anagrams("talmudization")
    self.assertEqual(r, ['talmudization'])

    _, r = self.anagrams2.get_anagrams("talmudizations")
    self.assertEqual(r, ['talmudizations'])

    _, r = self.anagrams2.get_anagrams("talmudize")
    self.assertEqual(r, ['talmudize'])

    _, r = self.anagrams2.get_anagrams("talmudizes")
    self.assertEqual(r, ['talmudizes'])

    _, r = self.anagrams2.get_anagrams("tame")
    self.assertEqual(r, ['mate', 'meat', 'meta', 'tame', 'team'])

    _, r = self.anagrams2.get_anagrams("tamed")
    self.assertEqual(r, ['mated', 'tamed'])

    _, r = self.anagrams2.get_anagrams("tamely")
    self.assertEqual(r, ['tamely'])

    _, r = self.anagrams2.get_anagrams("tameness")
    self.assertEqual(r, ['tameness'])

    _, r = self.anagrams2.get_anagrams("tamer")
    self.assertEqual(r, ['mater', 'tamer'])

    _, r = self.anagrams2.get_anagrams("tames")
    self.assertEqual(r, ['mates', 'meats', 'steam', 'tames', 'teams'])

    _, r = self.anagrams2.get_anagrams("tamil")
    self.assertEqual(r, ['tamil'])

    _, r = self.anagrams2.get_anagrams("taming")
    self.assertEqual(r, ['mating', 'taming'])

    _, r = self.anagrams2.get_anagrams("tammany")
    self.assertEqual(r, ['tammany'])

    _, r = self.anagrams2.get_anagrams("tammanyize")
    self.assertEqual(r, ['tammanyize'])

    _, r = self.anagrams2.get_anagrams("tammanyizes")
    self.assertEqual(r, ['tammanyizes'])

    _, r = self.anagrams2.get_anagrams("tampa")
    self.assertEqual(r, ['tampa'])

    _, r = self.anagrams2.get_anagrams("tamper")
    self.assertEqual(r, ['tamper'])

    _, r = self.anagrams2.get_anagrams("tampered")
    self.assertEqual(r, ['tampered'])

    _, r = self.anagrams2.get_anagrams("tampering")
    self.assertEqual(r, ['tampering'])

    _, r = self.anagrams2.get_anagrams("tampers")
    self.assertEqual(r, ['stamper', 'tampers'])

    _, r = self.anagrams2.get_anagrams("tan")
    self.assertEqual(r, ['ant', 'nat', 'tan'])

    _, r = self.anagrams2.get_anagrams("tanaka")
    self.assertEqual(r, ['tanaka'])

    _, r = self.anagrams2.get_anagrams("tananarive")
    self.assertEqual(r, ['tananarive'])

    _, r = self.anagrams2.get_anagrams("tandem")
    self.assertEqual(r, ['tandem'])

    _, r = self.anagrams2.get_anagrams("tang")
    self.assertEqual(r, ['gnat', 'tang'])

    _, r = self.anagrams2.get_anagrams("tanganyika")
    self.assertEqual(r, ['tanganyika'])

    _, r = self.anagrams2.get_anagrams("tangent")
    self.assertEqual(r, ['gannett', 'tangent'])

    _, r = self.anagrams2.get_anagrams("tangential")
    self.assertEqual(r, ['tangential'])

    _, r = self.anagrams2.get_anagrams("tangents")
    self.assertEqual(r, ['tangents'])

    _, r = self.anagrams2.get_anagrams("tangible")
    self.assertEqual(r, ['bleating', 'tangible'])

    _, r = self.anagrams2.get_anagrams("tangibly")
    self.assertEqual(r, ['tangibly'])

    _, r = self.anagrams2.get_anagrams("tangle")
    self.assertEqual(r, ['tangle'])

    _, r = self.anagrams2.get_anagrams("tangled")
    self.assertEqual(r, ['tangled'])

    _, r = self.anagrams2.get_anagrams("tangy")
    self.assertEqual(r, ['tangy'])

    _, r = self.anagrams2.get_anagrams("tank")
    self.assertEqual(r, ['kant', 'tank'])

    _, r = self.anagrams2.get_anagrams("tanker")
    self.assertEqual(r, ['tanker'])

    _, r = self.anagrams2.get_anagrams("tankers")
    self.assertEqual(r, ['rankest', 'tankers'])

    _, r = self.anagrams2.get_anagrams("tanks")
    self.assertEqual(r, ['tanks'])

    _, r = self.anagrams2.get_anagrams("tannenbaum")
    self.assertEqual(r, ['tannenbaum'])

    _, r = self.anagrams2.get_anagrams("tanner")
    self.assertEqual(r, ['tanner'])

    _, r = self.anagrams2.get_anagrams("tanners")
    self.assertEqual(r, ['tanners'])

    _, r = self.anagrams2.get_anagrams("tantalizing")
    self.assertEqual(r, ['tantalizing'])

    _, r = self.anagrams2.get_anagrams("tantalizingly")
    self.assertEqual(r, ['tantalizingly'])

    _, r = self.anagrams2.get_anagrams("tantalus")
    self.assertEqual(r, ['tantalus'])

    _, r = self.anagrams2.get_anagrams("tantamount")
    self.assertEqual(r, ['tantamount'])

    _, r = self.anagrams2.get_anagrams("tantrum")
    self.assertEqual(r, ['tantrum'])

    _, r = self.anagrams2.get_anagrams("tantrums")
    self.assertEqual(r, ['tantrums'])

    _, r = self.anagrams2.get_anagrams("tanya")
    self.assertEqual(r, ['tanya'])

    _, r = self.anagrams2.get_anagrams("tanzania")
    self.assertEqual(r, ['tanzania'])

    _, r = self.anagrams2.get_anagrams("taoism")
    self.assertEqual(r, ['taoism'])

    _, r = self.anagrams2.get_anagrams("taoist")
    self.assertEqual(r, ['taoist'])

    _, r = self.anagrams2.get_anagrams("taos")
    self.assertEqual(r, ['oats', 'taos'])

    _, r = self.anagrams2.get_anagrams("tap")
    self.assertEqual(r, ['apt', 'pat', 'tap'])

    _, r = self.anagrams2.get_anagrams("tape")
    self.assertEqual(r, ['pate', 'peat', 'tape'])

    _, r = self.anagrams2.get_anagrams("taped")
    self.assertEqual(r, ['adept', 'taped'])

    _, r = self.anagrams2.get_anagrams("taper")
    self.assertEqual(r, ['prate', 'taper'])

    _, r = self.anagrams2.get_anagrams("tapered")
    self.assertEqual(r, ['predate', 'tapered'])

    _, r = self.anagrams2.get_anagrams("tapering")
    self.assertEqual(r, ['tapering'])

    _, r = self.anagrams2.get_anagrams("tapers")
    self.assertEqual(r, ['repast', 'tapers'])

    _, r = self.anagrams2.get_anagrams("tapes")
    self.assertEqual(r, ['paste', 'spate', 'tapes'])

    _, r = self.anagrams2.get_anagrams("tapestries")
    self.assertEqual(r, ['striptease', 'tapestries'])

    _, r = self.anagrams2.get_anagrams("tapestry")
    self.assertEqual(r, ['tapestry'])

    _, r = self.anagrams2.get_anagrams("taping")
    self.assertEqual(r, ['taping'])

    _, r = self.anagrams2.get_anagrams("tapings")
    self.assertEqual(r, ['pasting', 'tapings'])

    _, r = self.anagrams2.get_anagrams("tapped")
    self.assertEqual(r, ['tapped'])

    _, r = self.anagrams2.get_anagrams("tapper")
    self.assertEqual(r, ['tapper'])

    _, r = self.anagrams2.get_anagrams("tappers")
    self.assertEqual(r, ['tappers'])

    _, r = self.anagrams2.get_anagrams("tapping")
    self.assertEqual(r, ['tapping'])

    _, r = self.anagrams2.get_anagrams("taproot")
    self.assertEqual(r, ['taproot'])

    _, r = self.anagrams2.get_anagrams("taproots")
    self.assertEqual(r, ['taproots'])

    _, r = self.anagrams2.get_anagrams("taps")
    self.assertEqual(r, ['past', 'pats', 'spat', 'taps'])

    _, r = self.anagrams2.get_anagrams("tar")
    self.assertEqual(r, ['art', 'rat', 'tar'])

    _, r = self.anagrams2.get_anagrams("tara")
    self.assertEqual(r, ['tara'])

    _, r = self.anagrams2.get_anagrams("tarbell")
    self.assertEqual(r, ['tarbell'])

    _, r = self.anagrams2.get_anagrams("tardiness")
    self.assertEqual(r, ['tardiness'])

    _, r = self.anagrams2.get_anagrams("tardy")
    self.assertEqual(r, ['tardy'])

    _, r = self.anagrams2.get_anagrams("target")
    self.assertEqual(r, ['target'])

    _, r = self.anagrams2.get_anagrams("targeted")
    self.assertEqual(r, ['targeted'])

    _, r = self.anagrams2.get_anagrams("targeting")
    self.assertEqual(r, ['targeting'])

    _, r = self.anagrams2.get_anagrams("targets")
    self.assertEqual(r, ['targets'])

    _, r = self.anagrams2.get_anagrams("tariff")
    self.assertEqual(r, ['tariff'])

    _, r = self.anagrams2.get_anagrams("tariffs")
    self.assertEqual(r, ['tariffs'])

    _, r = self.anagrams2.get_anagrams("tarry")
    self.assertEqual(r, ['tarry'])

    _, r = self.anagrams2.get_anagrams("tarrytown")
    self.assertEqual(r, ['tarrytown'])

    _, r = self.anagrams2.get_anagrams("tart")
    self.assertEqual(r, ['tart'])

    _, r = self.anagrams2.get_anagrams("tartary")
    self.assertEqual(r, ['tartary'])

    _, r = self.anagrams2.get_anagrams("tartly")
    self.assertEqual(r, ['tartly'])

    _, r = self.anagrams2.get_anagrams("tartness")
    self.assertEqual(r, ['tartness'])

    _, r = self.anagrams2.get_anagrams("tartuffe")
    self.assertEqual(r, ['tartuffe'])

    _, r = self.anagrams2.get_anagrams("tarzan")
    self.assertEqual(r, ['tarzan'])

    _, r = self.anagrams2.get_anagrams("task")
    self.assertEqual(r, ['task'])

    _, r = self.anagrams2.get_anagrams("tasked")
    self.assertEqual(r, ['skated', 'staked', 'tasked'])

    _, r = self.anagrams2.get_anagrams("tasking")
    self.assertEqual(r, ['skating', 'takings', 'tasking'])

    _, r = self.anagrams2.get_anagrams("tasks")
    self.assertEqual(r, ['tasks'])

    _, r = self.anagrams2.get_anagrams("tasmania")
    self.assertEqual(r, ['tasmania'])

    _, r = self.anagrams2.get_anagrams("tass")
    self.assertEqual(r, ['tass'])

    _, r = self.anagrams2.get_anagrams("tassel")
    self.assertEqual(r, ['slates', 'steals', 'tassel'])

    _, r = self.anagrams2.get_anagrams("tassels")
    self.assertEqual(r, ['tassels'])

    _, r = self.anagrams2.get_anagrams("taste")
    self.assertEqual(r, ['state', 'taste'])

    _, r = self.anagrams2.get_anagrams("tasted")
    self.assertEqual(r, ['stated', 'tasted'])

    _, r = self.anagrams2.get_anagrams("tasteful")
    self.assertEqual(r, ['tasteful'])

    _, r = self.anagrams2.get_anagrams("tastefully")
    self.assertEqual(r, ['tastefully'])

    _, r = self.anagrams2.get_anagrams("tastefulness")
    self.assertEqual(r, ['tastefulness'])

    _, r = self.anagrams2.get_anagrams("tasteless")
    self.assertEqual(r, ['tasteless'])

    _, r = self.anagrams2.get_anagrams("tastelessly")
    self.assertEqual(r, ['tastelessly'])

    _, r = self.anagrams2.get_anagrams("taster")
    self.assertEqual(r, ['taster', 'treats'])

    _, r = self.anagrams2.get_anagrams("tasters")
    self.assertEqual(r, ['tasters'])

    _, r = self.anagrams2.get_anagrams("tastes")
    self.assertEqual(r, ['states', 'tastes'])

    _, r = self.anagrams2.get_anagrams("tasting")
    self.assertEqual(r, ['stating', 'tasting'])

    _, r = self.anagrams2.get_anagrams("tate")
    self.assertEqual(r, ['tate'])

    _, r = self.anagrams2.get_anagrams("tatter")
    self.assertEqual(r, ['tatter'])

    _, r = self.anagrams2.get_anagrams("tattered")
    self.assertEqual(r, ['tattered'])

    _, r = self.anagrams2.get_anagrams("tattoo")
    self.assertEqual(r, ['tattoo'])

    _, r = self.anagrams2.get_anagrams("tattooed")
    self.assertEqual(r, ['tattooed'])

    _, r = self.anagrams2.get_anagrams("tattoos")
    self.assertEqual(r, ['tattoos'])

    _, r = self.anagrams2.get_anagrams("tau")
    self.assertEqual(r, ['tau'])

    _, r = self.anagrams2.get_anagrams("taught")
    self.assertEqual(r, ['taught'])

    _, r = self.anagrams2.get_anagrams("taunt")
    self.assertEqual(r, ['taunt'])

    _, r = self.anagrams2.get_anagrams("taunted")
    self.assertEqual(r, ['attuned', 'taunted'])

    _, r = self.anagrams2.get_anagrams("taunter")
    self.assertEqual(r, ['taunter'])

    _, r = self.anagrams2.get_anagrams("taunting")
    self.assertEqual(r, ['attuning', 'taunting'])

    _, r = self.anagrams2.get_anagrams("taunts")
    self.assertEqual(r, ['taunts'])

    _, r = self.anagrams2.get_anagrams("taurus")
    self.assertEqual(r, ['taurus'])

    _, r = self.anagrams2.get_anagrams("taut")
    self.assertEqual(r, ['taut'])

    _, r = self.anagrams2.get_anagrams("tautly")
    self.assertEqual(r, ['tautly'])

    _, r = self.anagrams2.get_anagrams("tautness")
    self.assertEqual(r, ['tautness'])

    _, r = self.anagrams2.get_anagrams("tautological")
    self.assertEqual(r, ['tautological'])

    _, r = self.anagrams2.get_anagrams("tautologically")
    self.assertEqual(r, ['tautologically'])

    _, r = self.anagrams2.get_anagrams("tautologies")
    self.assertEqual(r, ['tautologies'])

    _, r = self.anagrams2.get_anagrams("tautology")
    self.assertEqual(r, ['tautology'])

    _, r = self.anagrams2.get_anagrams("tavern")
    self.assertEqual(r, ['tavern'])

    _, r = self.anagrams2.get_anagrams("taverns")
    self.assertEqual(r, ['servant', 'taverns'])

    _, r = self.anagrams2.get_anagrams("tawney")
    self.assertEqual(r, ['tawney'])

    _, r = self.anagrams2.get_anagrams("tawny")
    self.assertEqual(r, ['tawny'])

    _, r = self.anagrams2.get_anagrams("tax")
    self.assertEqual(r, ['tax'])

    _, r = self.anagrams2.get_anagrams("taxable")
    self.assertEqual(r, ['taxable'])

    _, r = self.anagrams2.get_anagrams("taxation")
    self.assertEqual(r, ['taxation'])

    _, r = self.anagrams2.get_anagrams("taxed")
    self.assertEqual(r, ['taxed'])

    _, r = self.anagrams2.get_anagrams("taxes")
    self.assertEqual(r, ['taxes', 'texas'])

    _, r = self.anagrams2.get_anagrams("taxi")
    self.assertEqual(r, ['taxi'])

    _, r = self.anagrams2.get_anagrams("taxicab")
    self.assertEqual(r, ['taxicab'])

    _, r = self.anagrams2.get_anagrams("taxicabs")
    self.assertEqual(r, ['taxicabs'])

    _, r = self.anagrams2.get_anagrams("taxied")
    self.assertEqual(r, ['taxied'])

    _, r = self.anagrams2.get_anagrams("taxiing")
    self.assertEqual(r, ['taxiing'])

    _, r = self.anagrams2.get_anagrams("taxing")
    self.assertEqual(r, ['taxing'])

    _, r = self.anagrams2.get_anagrams("taxis")
    self.assertEqual(r, ['taxis'])

    _, r = self.anagrams2.get_anagrams("taxonomic")
    self.assertEqual(r, ['taxonomic'])

    _, r = self.anagrams2.get_anagrams("taxonomically")
    self.assertEqual(r, ['taxonomically'])

    _, r = self.anagrams2.get_anagrams("taxonomy")
    self.assertEqual(r, ['taxonomy'])

    _, r = self.anagrams2.get_anagrams("taxpayer")
    self.assertEqual(r, ['taxpayer'])

    _, r = self.anagrams2.get_anagrams("taxpayers")
    self.assertEqual(r, ['taxpayers'])

    _, r = self.anagrams2.get_anagrams("taylor")
    self.assertEqual(r, ['taylor'])

    _, r = self.anagrams2.get_anagrams("taylorize")
    self.assertEqual(r, ['taylorize'])

    _, r = self.anagrams2.get_anagrams("taylorizes")
    self.assertEqual(r, ['taylorizes'])

    _, r = self.anagrams2.get_anagrams("taylors")
    self.assertEqual(r, ['taylors'])

    _, r = self.anagrams2.get_anagrams("tchaikovsky")
    self.assertEqual(r, ['tchaikovsky'])

    _, r = self.anagrams2.get_anagrams("tea")
    self.assertEqual(r, ['ate', 'eat', 'tea'])

    _, r = self.anagrams2.get_anagrams("teach")
    self.assertEqual(r, ['cheat', 'teach'])

    _, r = self.anagrams2.get_anagrams("teachable")
    self.assertEqual(r, ['teachable'])

    _, r = self.anagrams2.get_anagrams("teacher")
    self.assertEqual(r, ['cheater', 'teacher'])

    _, r = self.anagrams2.get_anagrams("teachers")
    self.assertEqual(r, ['cheaters', 'teachers'])

    _, r = self.anagrams2.get_anagrams("teaches")
    self.assertEqual(r, ['teaches'])

    _, r = self.anagrams2.get_anagrams("teaching")
    self.assertEqual(r, ['cheating', 'teaching'])

    _, r = self.anagrams2.get_anagrams("teachings")
    self.assertEqual(r, ['teachings'])

    _, r = self.anagrams2.get_anagrams("teacup")
    self.assertEqual(r, ['teacup'])

    _, r = self.anagrams2.get_anagrams("team")
    self.assertEqual(r, ['mate', 'meat', 'meta', 'tame', 'team'])

    _, r = self.anagrams2.get_anagrams("teamed")
    self.assertEqual(r, ['teamed'])

    _, r = self.anagrams2.get_anagrams("teaming")
    self.assertEqual(r, ['teaming'])

    _, r = self.anagrams2.get_anagrams("teams")
    self.assertEqual(r, ['mates', 'meats', 'steam', 'tames', 'teams'])

    _, r = self.anagrams2.get_anagrams("tear")
    self.assertEqual(r, ['rate', 'tear'])

    _, r = self.anagrams2.get_anagrams("teared")
    self.assertEqual(r, ['teared'])

    _, r = self.anagrams2.get_anagrams("tearful")
    self.assertEqual(r, ['tearful'])

    _, r = self.anagrams2.get_anagrams("tearfully")
    self.assertEqual(r, ['tearfully'])

    _, r = self.anagrams2.get_anagrams("tearing")
    self.assertEqual(r, ['granite', 'ingrate', 'tearing'])

    _, r = self.anagrams2.get_anagrams("tears")
    self.assertEqual(r, ['aster', 'rates', 'stare', 'tears'])

    _, r = self.anagrams2.get_anagrams("teas")
    self.assertEqual(r, ['east', 'eats', 'sate', 'seat', 'teas'])

    _, r = self.anagrams2.get_anagrams("tease")
    self.assertEqual(r, ['tease'])

    _, r = self.anagrams2.get_anagrams("teased")
    self.assertEqual(r, ['seated', 'sedate', 'teased'])

    _, r = self.anagrams2.get_anagrams("teases")
    self.assertEqual(r, ['teases'])

    _, r = self.anagrams2.get_anagrams("teasing")
    self.assertEqual(r, ['eatings', 'seating', 'teasing'])

    _, r = self.anagrams2.get_anagrams("teaspoon")
    self.assertEqual(r, ['teaspoon'])

    _, r = self.anagrams2.get_anagrams("teaspoonful")
    self.assertEqual(r, ['teaspoonful'])

    _, r = self.anagrams2.get_anagrams("teaspoonfuls")
    self.assertEqual(r, ['teaspoonfuls'])

    _, r = self.anagrams2.get_anagrams("teaspoons")
    self.assertEqual(r, ['teaspoons'])

    _, r = self.anagrams2.get_anagrams("technical")
    self.assertEqual(r, ['technical'])

    _, r = self.anagrams2.get_anagrams("technicalities")
    self.assertEqual(r, ['technicalities'])

    _, r = self.anagrams2.get_anagrams("technicality")
    self.assertEqual(r, ['technicality'])

    _, r = self.anagrams2.get_anagrams("technically")
    self.assertEqual(r, ['technically'])

    _, r = self.anagrams2.get_anagrams("technician")
    self.assertEqual(r, ['technician'])

    _, r = self.anagrams2.get_anagrams("technicians")
    self.assertEqual(r, ['technicians'])

    _, r = self.anagrams2.get_anagrams("technion")
    self.assertEqual(r, ['technion'])

    _, r = self.anagrams2.get_anagrams("technique")
    self.assertEqual(r, ['technique'])

    _, r = self.anagrams2.get_anagrams("techniques")
    self.assertEqual(r, ['techniques'])

    _, r = self.anagrams2.get_anagrams("technological")
    self.assertEqual(r, ['technological'])

    _, r = self.anagrams2.get_anagrams("technologically")
    self.assertEqual(r, ['technologically'])

    _, r = self.anagrams2.get_anagrams("technologies")
    self.assertEqual(r, ['technologies'])

    _, r = self.anagrams2.get_anagrams("technologist")
    self.assertEqual(r, ['technologist'])

    _, r = self.anagrams2.get_anagrams("technologists")
    self.assertEqual(r, ['technologists'])

    _, r = self.anagrams2.get_anagrams("technology")
    self.assertEqual(r, ['technology'])

    _, r = self.anagrams2.get_anagrams("ted")
    self.assertEqual(r, ['ted'])

    _, r = self.anagrams2.get_anagrams("teddy")
    self.assertEqual(r, ['teddy'])

    _, r = self.anagrams2.get_anagrams("tedious")
    self.assertEqual(r, ['outside', 'tedious'])

    _, r = self.anagrams2.get_anagrams("tediously")
    self.assertEqual(r, ['tediously'])

    _, r = self.anagrams2.get_anagrams("tediousness")
    self.assertEqual(r, ['tediousness'])

    _, r = self.anagrams2.get_anagrams("tedium")
    self.assertEqual(r, ['tedium'])

    _, r = self.anagrams2.get_anagrams("teem")
    self.assertEqual(r, ['meet', 'mete', 'teem'])

    _, r = self.anagrams2.get_anagrams("teemed")
    self.assertEqual(r, ['teemed'])

    _, r = self.anagrams2.get_anagrams("teeming")
    self.assertEqual(r, ['meeting', 'teeming'])

    _, r = self.anagrams2.get_anagrams("teems")
    self.assertEqual(r, ['meets', 'metes', 'teems'])

    _, r = self.anagrams2.get_anagrams("teen")
    self.assertEqual(r, ['teen'])

    _, r = self.anagrams2.get_anagrams("teenage")
    self.assertEqual(r, ['teenage'])

    _, r = self.anagrams2.get_anagrams("teenaged")
    self.assertEqual(r, ['teenaged'])

    _, r = self.anagrams2.get_anagrams("teenager")
    self.assertEqual(r, ['generate', 'teenager'])

    _, r = self.anagrams2.get_anagrams("teenagers")
    self.assertEqual(r, ['generates', 'teenagers'])

    _, r = self.anagrams2.get_anagrams("teens")
    self.assertEqual(r, ['steen', 'teens', 'tense'])

    _, r = self.anagrams2.get_anagrams("teeth")
    self.assertEqual(r, ['teeth'])

    _, r = self.anagrams2.get_anagrams("teethe")
    self.assertEqual(r, ['teethe'])

    _, r = self.anagrams2.get_anagrams("teethed")
    self.assertEqual(r, ['teethed'])

    _, r = self.anagrams2.get_anagrams("teethes")
    self.assertEqual(r, ['teethes'])

    _, r = self.anagrams2.get_anagrams("teething")
    self.assertEqual(r, ['teething'])

    _, r = self.anagrams2.get_anagrams("teflon")
    self.assertEqual(r, ['teflon'])

    _, r = self.anagrams2.get_anagrams("tegucigalpa")
    self.assertEqual(r, ['tegucigalpa'])

    _, r = self.anagrams2.get_anagrams("teheran")
    self.assertEqual(r, ['earthen', 'hearten', 'teheran'])

    _, r = self.anagrams2.get_anagrams("tehran")
    self.assertEqual(r, ['anther', 'tehran'])

    _, r = self.anagrams2.get_anagrams("tektronix")
    self.assertEqual(r, ['tektronix'])

    _, r = self.anagrams2.get_anagrams("telecommunication")
    self.assertEqual(r, ['telecommunication'])

    _, r = self.anagrams2.get_anagrams("telecommunications")
    self.assertEqual(r, ['telecommunications'])

    _, r = self.anagrams2.get_anagrams("teledyne")
    self.assertEqual(r, ['teledyne'])

    _, r = self.anagrams2.get_anagrams("telefunken")
    self.assertEqual(r, ['telefunken'])

    _, r = self.anagrams2.get_anagrams("telegram")
    self.assertEqual(r, ['telegram'])

    _, r = self.anagrams2.get_anagrams("telegrams")
    self.assertEqual(r, ['telegrams'])

    _, r = self.anagrams2.get_anagrams("telegraph")
    self.assertEqual(r, ['telegraph'])

    _, r = self.anagrams2.get_anagrams("telegraphed")
    self.assertEqual(r, ['telegraphed'])

    _, r = self.anagrams2.get_anagrams("telegrapher")
    self.assertEqual(r, ['telegrapher'])

    _, r = self.anagrams2.get_anagrams("telegraphers")
    self.assertEqual(r, ['telegraphers'])

    _, r = self.anagrams2.get_anagrams("telegraphic")
    self.assertEqual(r, ['telegraphic'])

    _, r = self.anagrams2.get_anagrams("telegraphing")
    self.assertEqual(r, ['telegraphing'])

    _, r = self.anagrams2.get_anagrams("telegraphs")
    self.assertEqual(r, ['telegraphs'])

    _, r = self.anagrams2.get_anagrams("telemann")
    self.assertEqual(r, ['telemann'])

    _, r = self.anagrams2.get_anagrams("telemetry")
    self.assertEqual(r, ['telemetry'])

    _, r = self.anagrams2.get_anagrams("teleological")
    self.assertEqual(r, ['teleological'])

    _, r = self.anagrams2.get_anagrams("teleologically")
    self.assertEqual(r, ['teleologically'])

    _, r = self.anagrams2.get_anagrams("teleology")
    self.assertEqual(r, ['teleology'])

    _, r = self.anagrams2.get_anagrams("telepathy")
    self.assertEqual(r, ['telepathy'])

    _, r = self.anagrams2.get_anagrams("telephone")
    self.assertEqual(r, ['telephone'])

    _, r = self.anagrams2.get_anagrams("telephoned")
    self.assertEqual(r, ['telephoned'])

    _, r = self.anagrams2.get_anagrams("telephoner")
    self.assertEqual(r, ['telephoner'])

    _, r = self.anagrams2.get_anagrams("telephoners")
    self.assertEqual(r, ['telephoners'])

    _, r = self.anagrams2.get_anagrams("telephones")
    self.assertEqual(r, ['telephones'])

    _, r = self.anagrams2.get_anagrams("telephonic")
    self.assertEqual(r, ['telephonic'])

    _, r = self.anagrams2.get_anagrams("telephoning")
    self.assertEqual(r, ['telephoning'])

    _, r = self.anagrams2.get_anagrams("telephony")
    self.assertEqual(r, ['telephony'])

    _, r = self.anagrams2.get_anagrams("teleprocessing")
    self.assertEqual(r, ['teleprocessing'])

    _, r = self.anagrams2.get_anagrams("telescope")
    self.assertEqual(r, ['telescope'])

    _, r = self.anagrams2.get_anagrams("telescoped")
    self.assertEqual(r, ['telescoped'])

    _, r = self.anagrams2.get_anagrams("telescopes")
    self.assertEqual(r, ['telescopes'])

    _, r = self.anagrams2.get_anagrams("telescoping")
    self.assertEqual(r, ['telescoping'])

    _, r = self.anagrams2.get_anagrams("teletex")
    self.assertEqual(r, ['teletex'])

    _, r = self.anagrams2.get_anagrams("teletext")
    self.assertEqual(r, ['teletext'])

    _, r = self.anagrams2.get_anagrams("teletype")
    self.assertEqual(r, ['teletype'])

    _, r = self.anagrams2.get_anagrams("teletypes")
    self.assertEqual(r, ['teletypes'])

    _, r = self.anagrams2.get_anagrams("televise")
    self.assertEqual(r, ['televise'])

    _, r = self.anagrams2.get_anagrams("televised")
    self.assertEqual(r, ['televised'])

    _, r = self.anagrams2.get_anagrams("televises")
    self.assertEqual(r, ['televises'])

    _, r = self.anagrams2.get_anagrams("televising")
    self.assertEqual(r, ['televising'])

    _, r = self.anagrams2.get_anagrams("television")
    self.assertEqual(r, ['television'])

    _, r = self.anagrams2.get_anagrams("televisions")
    self.assertEqual(r, ['televisions'])

    _, r = self.anagrams2.get_anagrams("televisor")
    self.assertEqual(r, ['televisor'])

    _, r = self.anagrams2.get_anagrams("televisors")
    self.assertEqual(r, ['televisors'])

    _, r = self.anagrams2.get_anagrams("telex")
    self.assertEqual(r, ['telex'])

    _, r = self.anagrams2.get_anagrams("tell")
    self.assertEqual(r, ['tell'])

    _, r = self.anagrams2.get_anagrams("teller")
    self.assertEqual(r, ['teller'])

    _, r = self.anagrams2.get_anagrams("tellers")
    self.assertEqual(r, ['tellers'])

    _, r = self.anagrams2.get_anagrams("telling")
    self.assertEqual(r, ['telling'])

    _, r = self.anagrams2.get_anagrams("tells")
    self.assertEqual(r, ['tells'])

    _, r = self.anagrams2.get_anagrams("telnet")
    self.assertEqual(r, ['nettle', 'telnet', 'telnet'])

    _, r = self.anagrams2.get_anagrams("telnet")
    self.assertEqual(r, ['nettle', 'telnet', 'telnet'])

    _, r = self.anagrams2.get_anagrams("temper")
    self.assertEqual(r, ['temper'])

    _, r = self.anagrams2.get_anagrams("temperament")
    self.assertEqual(r, ['temperament'])

    _, r = self.anagrams2.get_anagrams("temperamental")
    self.assertEqual(r, ['temperamental'])

    _, r = self.anagrams2.get_anagrams("temperaments")
    self.assertEqual(r, ['temperaments'])

    _, r = self.anagrams2.get_anagrams("temperance")
    self.assertEqual(r, ['temperance'])

    _, r = self.anagrams2.get_anagrams("temperate")
    self.assertEqual(r, ['temperate'])

    _, r = self.anagrams2.get_anagrams("temperately")
    self.assertEqual(r, ['temperately'])

    _, r = self.anagrams2.get_anagrams("temperateness")
    self.assertEqual(r, ['temperateness'])

    _, r = self.anagrams2.get_anagrams("temperature")
    self.assertEqual(r, ['temperature'])

    _, r = self.anagrams2.get_anagrams("temperatures")
    self.assertEqual(r, ['temperatures'])

    _, r = self.anagrams2.get_anagrams("tempered")
    self.assertEqual(r, ['tempered'])

    _, r = self.anagrams2.get_anagrams("tempering")
    self.assertEqual(r, ['tempering'])

    _, r = self.anagrams2.get_anagrams("tempers")
    self.assertEqual(r, ['tempers'])

    _, r = self.anagrams2.get_anagrams("tempest")
    self.assertEqual(r, ['tempest'])

    _, r = self.anagrams2.get_anagrams("tempestuous")
    self.assertEqual(r, ['tempestuous'])

    _, r = self.anagrams2.get_anagrams("tempestuously")
    self.assertEqual(r, ['tempestuously'])

    _, r = self.anagrams2.get_anagrams("template")
    self.assertEqual(r, ['template'])

    _, r = self.anagrams2.get_anagrams("templates")
    self.assertEqual(r, ['templates'])

    _, r = self.anagrams2.get_anagrams("temple")
    self.assertEqual(r, ['temple'])

    _, r = self.anagrams2.get_anagrams("templeman")
    self.assertEqual(r, ['templeman'])

    _, r = self.anagrams2.get_anagrams("temples")
    self.assertEqual(r, ['temples'])

    _, r = self.anagrams2.get_anagrams("templeton")
    self.assertEqual(r, ['templeton'])

    _, r = self.anagrams2.get_anagrams("temporal")
    self.assertEqual(r, ['temporal'])

    _, r = self.anagrams2.get_anagrams("temporally")
    self.assertEqual(r, ['temporally'])

    _, r = self.anagrams2.get_anagrams("temporaries")
    self.assertEqual(r, ['temporaries'])

    _, r = self.anagrams2.get_anagrams("temporarily")
    self.assertEqual(r, ['temporarily'])

    _, r = self.anagrams2.get_anagrams("temporary")
    self.assertEqual(r, ['temporary'])

    _, r = self.anagrams2.get_anagrams("tempt")
    self.assertEqual(r, ['tempt'])

    _, r = self.anagrams2.get_anagrams("temptation")
    self.assertEqual(r, ['temptation'])

    _, r = self.anagrams2.get_anagrams("temptations")
    self.assertEqual(r, ['temptations'])

    _, r = self.anagrams2.get_anagrams("tempted")
    self.assertEqual(r, ['tempted'])

    _, r = self.anagrams2.get_anagrams("tempter")
    self.assertEqual(r, ['tempter'])

    _, r = self.anagrams2.get_anagrams("tempters")
    self.assertEqual(r, ['tempters'])

    _, r = self.anagrams2.get_anagrams("tempting")
    self.assertEqual(r, ['tempting'])

    _, r = self.anagrams2.get_anagrams("temptingly")
    self.assertEqual(r, ['temptingly'])

    _, r = self.anagrams2.get_anagrams("tempts")
    self.assertEqual(r, ['tempts'])

    _, r = self.anagrams2.get_anagrams("ten")
    self.assertEqual(r, ['net', 'ten'])

    _, r = self.anagrams2.get_anagrams("tenacious")
    self.assertEqual(r, ['tenacious'])

    _, r = self.anagrams2.get_anagrams("tenaciously")
    self.assertEqual(r, ['tenaciously'])

    _, r = self.anagrams2.get_anagrams("tenant")
    self.assertEqual(r, ['tenant'])

    _, r = self.anagrams2.get_anagrams("tenants")
    self.assertEqual(r, ['tenants'])

    _, r = self.anagrams2.get_anagrams("tend")
    self.assertEqual(r, ['dent', 'tend'])

    _, r = self.anagrams2.get_anagrams("tended")
    self.assertEqual(r, ['dented', 'tended'])

    _, r = self.anagrams2.get_anagrams("tendencies")
    self.assertEqual(r, ['tendencies'])

    _, r = self.anagrams2.get_anagrams("tendency")
    self.assertEqual(r, ['tendency'])

    _, r = self.anagrams2.get_anagrams("tender")
    self.assertEqual(r, ['rented', 'tender'])

    _, r = self.anagrams2.get_anagrams("tenderly")
    self.assertEqual(r, ['tenderly'])

    _, r = self.anagrams2.get_anagrams("tenderness")
    self.assertEqual(r, ['tenderness'])

    _, r = self.anagrams2.get_anagrams("tenders")
    self.assertEqual(r, ['tenders'])

    _, r = self.anagrams2.get_anagrams("tending")
    self.assertEqual(r, ['denting', 'tending'])

    _, r = self.anagrams2.get_anagrams("tends")
    self.assertEqual(r, ['dents', 'tends'])

    _, r = self.anagrams2.get_anagrams("tenement")
    self.assertEqual(r, ['tenement'])

    _, r = self.anagrams2.get_anagrams("tenements")
    self.assertEqual(r, ['tenements'])

    _, r = self.anagrams2.get_anagrams("tenex")
    self.assertEqual(r, ['tenex', 'tenex'])

    _, r = self.anagrams2.get_anagrams("tenex")
    self.assertEqual(r, ['tenex', 'tenex'])

    _, r = self.anagrams2.get_anagrams("tenfold")
    self.assertEqual(r, ['tenfold'])

    _, r = self.anagrams2.get_anagrams("tenneco")
    self.assertEqual(r, ['tenneco'])

    _, r = self.anagrams2.get_anagrams("tennessee")
    self.assertEqual(r, ['tennessee'])

    _, r = self.anagrams2.get_anagrams("tenney")
    self.assertEqual(r, ['tenney'])

    _, r = self.anagrams2.get_anagrams("tennis")
    self.assertEqual(r, ['tennis'])

    _, r = self.anagrams2.get_anagrams("tennyson")
    self.assertEqual(r, ['tennyson'])

    _, r = self.anagrams2.get_anagrams("tenor")
    self.assertEqual(r, ['notre', 'tenor', 'toner'])

    _, r = self.anagrams2.get_anagrams("tenors")
    self.assertEqual(r, ['nestor', 'sterno', 'tenors'])

    _, r = self.anagrams2.get_anagrams("tens")
    self.assertEqual(r, ['nest', 'nets', 'sent', 'tens'])

    _, r = self.anagrams2.get_anagrams("tense")
    self.assertEqual(r, ['steen', 'teens', 'tense'])

    _, r = self.anagrams2.get_anagrams("tensed")
    self.assertEqual(r, ['nested', 'tensed'])

    _, r = self.anagrams2.get_anagrams("tensely")
    self.assertEqual(r, ['tensely'])

    _, r = self.anagrams2.get_anagrams("tenseness")
    self.assertEqual(r, ['tenseness'])

    _, r = self.anagrams2.get_anagrams("tenser")
    self.assertEqual(r, ['enters', 'ernest', 'nester', 'resent', 'tenser'])

    _, r = self.anagrams2.get_anagrams("tenses")
    self.assertEqual(r, ['tenses'])

    _, r = self.anagrams2.get_anagrams("tensest")
    self.assertEqual(r, ['tensest'])

    _, r = self.anagrams2.get_anagrams("tensing")
    self.assertEqual(r, ['nesting', 'tensing'])

    _, r = self.anagrams2.get_anagrams("tension")
    self.assertEqual(r, ['tension'])

    _, r = self.anagrams2.get_anagrams("tensions")
    self.assertEqual(r, ['tensions'])

    _, r = self.anagrams2.get_anagrams("tent")
    self.assertEqual(r, ['tent'])

    _, r = self.anagrams2.get_anagrams("tentacle")
    self.assertEqual(r, ['tentacle'])

    _, r = self.anagrams2.get_anagrams("tentacled")
    self.assertEqual(r, ['tentacled'])

    _, r = self.anagrams2.get_anagrams("tentacles")
    self.assertEqual(r, ['tentacles'])

    _, r = self.anagrams2.get_anagrams("tentative")
    self.assertEqual(r, ['attentive', 'tentative'])

    _, r = self.anagrams2.get_anagrams("tentatively")
    self.assertEqual(r, ['attentively', 'tentatively'])

    _, r = self.anagrams2.get_anagrams("tented")
    self.assertEqual(r, ['netted', 'tented'])

    _, r = self.anagrams2.get_anagrams("tenth")
    self.assertEqual(r, ['tenth'])

    _, r = self.anagrams2.get_anagrams("tenting")
    self.assertEqual(r, ['netting', 'tenting'])

    _, r = self.anagrams2.get_anagrams("tents")
    self.assertEqual(r, ['tents'])

    _, r = self.anagrams2.get_anagrams("tenure")
    self.assertEqual(r, ['neuter', 'tenure'])

    _, r = self.anagrams2.get_anagrams("teresa")
    self.assertEqual(r, ['easter', 'eaters', 'teresa'])

    _, r = self.anagrams2.get_anagrams("term")
    self.assertEqual(r, ['term'])

    _, r = self.anagrams2.get_anagrams("termed")
    self.assertEqual(r, ['termed'])

    _, r = self.anagrams2.get_anagrams("terminal")
    self.assertEqual(r, ['terminal'])

    _, r = self.anagrams2.get_anagrams("terminally")
    self.assertEqual(r, ['terminally'])

    _, r = self.anagrams2.get_anagrams("terminals")
    self.assertEqual(r, ['terminals'])

    _, r = self.anagrams2.get_anagrams("terminate")
    self.assertEqual(r, ['terminate'])

    _, r = self.anagrams2.get_anagrams("terminated")
    self.assertEqual(r, ['terminated'])

    _, r = self.anagrams2.get_anagrams("terminates")
    self.assertEqual(r, ['terminates'])

    _, r = self.anagrams2.get_anagrams("terminating")
    self.assertEqual(r, ['terminating'])

    _, r = self.anagrams2.get_anagrams("termination")
    self.assertEqual(r, ['termination'])

    _, r = self.anagrams2.get_anagrams("terminations")
    self.assertEqual(r, ['terminations'])

    _, r = self.anagrams2.get_anagrams("terminator")
    self.assertEqual(r, ['terminator'])

    _, r = self.anagrams2.get_anagrams("terminators")
    self.assertEqual(r, ['terminators'])

    _, r = self.anagrams2.get_anagrams("terming")
    self.assertEqual(r, ['terming'])

    _, r = self.anagrams2.get_anagrams("terminologies")
    self.assertEqual(r, ['terminologies'])

    _, r = self.anagrams2.get_anagrams("terminology")
    self.assertEqual(r, ['terminology'])

    _, r = self.anagrams2.get_anagrams("terminus")
    self.assertEqual(r, ['terminus'])

    _, r = self.anagrams2.get_anagrams("terms")
    self.assertEqual(r, ['terms'])

    _, r = self.anagrams2.get_anagrams("termwise")
    self.assertEqual(r, ['termwise'])

    _, r = self.anagrams2.get_anagrams("ternary")
    self.assertEqual(r, ['ternary'])

    _, r = self.anagrams2.get_anagrams("terpsichore")
    self.assertEqual(r, ['terpsichore'])

    _, r = self.anagrams2.get_anagrams("terra")
    self.assertEqual(r, ['rater', 'terra'])

    _, r = self.anagrams2.get_anagrams("terrace")
    self.assertEqual(r, ['caterer', 'retrace', 'terrace'])

    _, r = self.anagrams2.get_anagrams("terraced")
    self.assertEqual(r, ['retraced', 'terraced'])

    _, r = self.anagrams2.get_anagrams("terraces")
    self.assertEqual(r, ['retraces', 'terraces'])

    _, r = self.anagrams2.get_anagrams("terrain")
    self.assertEqual(r, ['retrain', 'terrain', 'trainer'])

    _, r = self.anagrams2.get_anagrams("terrains")
    self.assertEqual(r, ['restrain', 'retrains', 'strainer', 'terrains', 'trainers'])

    _, r = self.anagrams2.get_anagrams("terran")
    self.assertEqual(r, ['errant', 'ranter', 'terran'])

    _, r = self.anagrams2.get_anagrams("terre")
    self.assertEqual(r, ['terre'])

    _, r = self.anagrams2.get_anagrams("terrestrial")
    self.assertEqual(r, ['terrestrial'])

    _, r = self.anagrams2.get_anagrams("terrestrials")
    self.assertEqual(r, ['terrestrials'])

    _, r = self.anagrams2.get_anagrams("terrible")
    self.assertEqual(r, ['terrible'])

    _, r = self.anagrams2.get_anagrams("terribly")
    self.assertEqual(r, ['terribly'])

    _, r = self.anagrams2.get_anagrams("terrier")
    self.assertEqual(r, ['retrier', 'terrier'])

    _, r = self.anagrams2.get_anagrams("terriers")
    self.assertEqual(r, ['retriers', 'terriers'])

    _, r = self.anagrams2.get_anagrams("terrific")
    self.assertEqual(r, ['terrific'])

    _, r = self.anagrams2.get_anagrams("terrified")
    self.assertEqual(r, ['terrified'])

    _, r = self.anagrams2.get_anagrams("terrifies")
    self.assertEqual(r, ['terrifies'])

    _, r = self.anagrams2.get_anagrams("terrify")
    self.assertEqual(r, ['terrify'])

    _, r = self.anagrams2.get_anagrams("terrifying")
    self.assertEqual(r, ['terrifying'])

    _, r = self.anagrams2.get_anagrams("territorial")
    self.assertEqual(r, ['territorial'])

    _, r = self.anagrams2.get_anagrams("territories")
    self.assertEqual(r, ['territories'])

    _, r = self.anagrams2.get_anagrams("territory")
    self.assertEqual(r, ['territory'])

    _, r = self.anagrams2.get_anagrams("terror")
    self.assertEqual(r, ['terror'])

    _, r = self.anagrams2.get_anagrams("terrorism")
    self.assertEqual(r, ['terrorism'])

    _, r = self.anagrams2.get_anagrams("terrorist")
    self.assertEqual(r, ['terrorist'])

    _, r = self.anagrams2.get_anagrams("terroristic")
    self.assertEqual(r, ['terroristic'])

    _, r = self.anagrams2.get_anagrams("terrorists")
    self.assertEqual(r, ['terrorists'])

    _, r = self.anagrams2.get_anagrams("terrorize")
    self.assertEqual(r, ['terrorize'])

    _, r = self.anagrams2.get_anagrams("terrorized")
    self.assertEqual(r, ['terrorized'])

    _, r = self.anagrams2.get_anagrams("terrorizes")
    self.assertEqual(r, ['terrorizes'])

    _, r = self.anagrams2.get_anagrams("terrorizing")
    self.assertEqual(r, ['terrorizing'])

    _, r = self.anagrams2.get_anagrams("terrors")
    self.assertEqual(r, ['terrors'])

    _, r = self.anagrams2.get_anagrams("tertiary")
    self.assertEqual(r, ['tertiary'])

    _, r = self.anagrams2.get_anagrams("tess")
    self.assertEqual(r, ['sets', 'tess'])

    _, r = self.anagrams2.get_anagrams("tessie")
    self.assertEqual(r, ['tessie'])

    _, r = self.anagrams2.get_anagrams("test")
    self.assertEqual(r, ['test'])

    _, r = self.anagrams2.get_anagrams("testability")
    self.assertEqual(r, ['testability'])

    _, r = self.anagrams2.get_anagrams("testable")
    self.assertEqual(r, ['settable', 'testable'])

    _, r = self.anagrams2.get_anagrams("testament")
    self.assertEqual(r, ['statement', 'testament'])

    _, r = self.anagrams2.get_anagrams("testaments")
    self.assertEqual(r, ['statements', 'testaments'])

    _, r = self.anagrams2.get_anagrams("tested")
    self.assertEqual(r, ['detest', 'tested'])

    _, r = self.anagrams2.get_anagrams("tester")
    self.assertEqual(r, ['setter', 'street', 'tester'])

    _, r = self.anagrams2.get_anagrams("testers")
    self.assertEqual(r, ['setters', 'streets', 'testers'])

    _, r = self.anagrams2.get_anagrams("testicle")
    self.assertEqual(r, ['testicle'])

    _, r = self.anagrams2.get_anagrams("testicles")
    self.assertEqual(r, ['testicles'])

    _, r = self.anagrams2.get_anagrams("testified")
    self.assertEqual(r, ['testified'])

    _, r = self.anagrams2.get_anagrams("testifier")
    self.assertEqual(r, ['testifier'])

    _, r = self.anagrams2.get_anagrams("testifiers")
    self.assertEqual(r, ['testifiers'])

    _, r = self.anagrams2.get_anagrams("testifies")
    self.assertEqual(r, ['testifies'])

    _, r = self.anagrams2.get_anagrams("testify")
    self.assertEqual(r, ['testify'])

    _, r = self.anagrams2.get_anagrams("testifying")
    self.assertEqual(r, ['testifying'])

    _, r = self.anagrams2.get_anagrams("testimonies")
    self.assertEqual(r, ['testimonies'])

    _, r = self.anagrams2.get_anagrams("testimony")
    self.assertEqual(r, ['testimony'])

    _, r = self.anagrams2.get_anagrams("testing")
    self.assertEqual(r, ['setting', 'testing'])

    _, r = self.anagrams2.get_anagrams("testings")
    self.assertEqual(r, ['settings', 'testings'])

    _, r = self.anagrams2.get_anagrams("tests")
    self.assertEqual(r, ['tests'])

    _, r = self.anagrams2.get_anagrams("teutonic")
    self.assertEqual(r, ['teutonic'])

    _, r = self.anagrams2.get_anagrams("tex")
    self.assertEqual(r, ['tex', 'tex'])

    _, r = self.anagrams2.get_anagrams("tex")
    self.assertEqual(r, ['tex', 'tex'])

    _, r = self.anagrams2.get_anagrams("texaco")
    self.assertEqual(r, ['texaco'])

    _, r = self.anagrams2.get_anagrams("texan")
    self.assertEqual(r, ['texan'])

    _, r = self.anagrams2.get_anagrams("texans")
    self.assertEqual(r, ['texans'])

    _, r = self.anagrams2.get_anagrams("texas")
    self.assertEqual(r, ['taxes', 'texas'])

    _, r = self.anagrams2.get_anagrams("texases")
    self.assertEqual(r, ['texases'])

    _, r = self.anagrams2.get_anagrams("text")
    self.assertEqual(r, ['text'])

    _, r = self.anagrams2.get_anagrams("textbook")
    self.assertEqual(r, ['textbook'])

    _, r = self.anagrams2.get_anagrams("textbooks")
    self.assertEqual(r, ['textbooks'])

    _, r = self.anagrams2.get_anagrams("textile")
    self.assertEqual(r, ['textile'])

    _, r = self.anagrams2.get_anagrams("textiles")
    self.assertEqual(r, ['textiles'])

    _, r = self.anagrams2.get_anagrams("textron")
    self.assertEqual(r, ['textron'])

    _, r = self.anagrams2.get_anagrams("texts")
    self.assertEqual(r, ['texts'])

    _, r = self.anagrams2.get_anagrams("textual")
    self.assertEqual(r, ['textual'])

    _, r = self.anagrams2.get_anagrams("textually")
    self.assertEqual(r, ['textually'])

    _, r = self.anagrams2.get_anagrams("texture")
    self.assertEqual(r, ['texture'])

    _, r = self.anagrams2.get_anagrams("textured")
    self.assertEqual(r, ['textured'])

    _, r = self.anagrams2.get_anagrams("textures")
    self.assertEqual(r, ['textures'])

    _, r = self.anagrams2.get_anagrams("thai")
    self.assertEqual(r, ['thai'])

    _, r = self.anagrams2.get_anagrams("thailand")
    self.assertEqual(r, ['thailand'])

    _, r = self.anagrams2.get_anagrams("thalia")
    self.assertEqual(r, ['thalia'])

    _, r = self.anagrams2.get_anagrams("thames")
    self.assertEqual(r, ['thames'])

    _, r = self.anagrams2.get_anagrams("than")
    self.assertEqual(r, ['than'])

    _, r = self.anagrams2.get_anagrams("thank")
    self.assertEqual(r, ['thank'])

    _, r = self.anagrams2.get_anagrams("thanked")
    self.assertEqual(r, ['thanked'])

    _, r = self.anagrams2.get_anagrams("thankful")
    self.assertEqual(r, ['thankful'])

    _, r = self.anagrams2.get_anagrams("thankfully")
    self.assertEqual(r, ['thankfully'])

    _, r = self.anagrams2.get_anagrams("thankfulness")
    self.assertEqual(r, ['thankfulness'])

    _, r = self.anagrams2.get_anagrams("thanking")
    self.assertEqual(r, ['thanking'])

    _, r = self.anagrams2.get_anagrams("thankless")
    self.assertEqual(r, ['thankless'])

    _, r = self.anagrams2.get_anagrams("thanklessly")
    self.assertEqual(r, ['thanklessly'])

    _, r = self.anagrams2.get_anagrams("thanklessness")
    self.assertEqual(r, ['thanklessness'])

    _, r = self.anagrams2.get_anagrams("thanks")
    self.assertEqual(r, ['thanks'])

    _, r = self.anagrams2.get_anagrams("thanksgiving")
    self.assertEqual(r, ['thanksgiving'])

    _, r = self.anagrams2.get_anagrams("thanksgivings")
    self.assertEqual(r, ['thanksgivings'])

    _, r = self.anagrams2.get_anagrams("that")
    self.assertEqual(r, ['that'])

    _, r = self.anagrams2.get_anagrams("thatch")
    self.assertEqual(r, ['thatch'])

    _, r = self.anagrams2.get_anagrams("thatches")
    self.assertEqual(r, ['hatchets', 'thatches'])

    _, r = self.anagrams2.get_anagrams("thats")
    self.assertEqual(r, ['thats'])

    _, r = self.anagrams2.get_anagrams("thaw")
    self.assertEqual(r, ['thaw', 'what'])

    _, r = self.anagrams2.get_anagrams("thawed")
    self.assertEqual(r, ['thawed'])

    _, r = self.anagrams2.get_anagrams("thawing")
    self.assertEqual(r, ['thawing'])

    _, r = self.anagrams2.get_anagrams("thaws")
    self.assertEqual(r, ['thaws'])

    _, r = self.anagrams2.get_anagrams("thayer")
    self.assertEqual(r, ['earthy', 'hearty', 'thayer'])

    _, r = self.anagrams2.get_anagrams("the")
    self.assertEqual(r, ['the'])

    _, r = self.anagrams2.get_anagrams("thea")
    self.assertEqual(r, ['hate', 'heat', 'thea'])

    _, r = self.anagrams2.get_anagrams("theater")
    self.assertEqual(r, ['theater'])

    _, r = self.anagrams2.get_anagrams("theaters")
    self.assertEqual(r, ['theaters'])

    _, r = self.anagrams2.get_anagrams("theatrical")
    self.assertEqual(r, ['theatrical'])

    _, r = self.anagrams2.get_anagrams("theatrically")
    self.assertEqual(r, ['theatrically'])

    _, r = self.anagrams2.get_anagrams("theatricals")
    self.assertEqual(r, ['theatricals'])

    _, r = self.anagrams2.get_anagrams("thebes")
    self.assertEqual(r, ['behest', 'thebes'])

    _, r = self.anagrams2.get_anagrams("theft")
    self.assertEqual(r, ['theft'])

    _, r = self.anagrams2.get_anagrams("thefts")
    self.assertEqual(r, ['thefts'])

    _, r = self.anagrams2.get_anagrams("their")
    self.assertEqual(r, ['their'])

    _, r = self.anagrams2.get_anagrams("theirs")
    self.assertEqual(r, ['theirs'])

    _, r = self.anagrams2.get_anagrams("thelma")
    self.assertEqual(r, ['hamlet', 'thelma'])

    _, r = self.anagrams2.get_anagrams("them")
    self.assertEqual(r, ['them'])

    _, r = self.anagrams2.get_anagrams("thematic")
    self.assertEqual(r, ['thematic'])

    _, r = self.anagrams2.get_anagrams("theme")
    self.assertEqual(r, ['theme'])

    _, r = self.anagrams2.get_anagrams("themes")
    self.assertEqual(r, ['themes'])

    _, r = self.anagrams2.get_anagrams("themselves")
    self.assertEqual(r, ['themselves'])

    _, r = self.anagrams2.get_anagrams("then")
    self.assertEqual(r, ['then'])

    _, r = self.anagrams2.get_anagrams("thence")
    self.assertEqual(r, ['thence'])

    _, r = self.anagrams2.get_anagrams("thenceforth")
    self.assertEqual(r, ['thenceforth'])

    _, r = self.anagrams2.get_anagrams("theodore")
    self.assertEqual(r, ['theodore'])

    _, r = self.anagrams2.get_anagrams("theodosian")
    self.assertEqual(r, ['theodosian'])

    _, r = self.anagrams2.get_anagrams("theodosius")
    self.assertEqual(r, ['theodosius'])

    _, r = self.anagrams2.get_anagrams("theological")
    self.assertEqual(r, ['theological'])

    _, r = self.anagrams2.get_anagrams("theology")
    self.assertEqual(r, ['theology'])

    _, r = self.anagrams2.get_anagrams("theorem")
    self.assertEqual(r, ['theorem'])

    _, r = self.anagrams2.get_anagrams("theorems")
    self.assertEqual(r, ['theorems'])

    _, r = self.anagrams2.get_anagrams("theoretic")
    self.assertEqual(r, ['theoretic'])

    _, r = self.anagrams2.get_anagrams("theoretical")
    self.assertEqual(r, ['theoretical'])

    _, r = self.anagrams2.get_anagrams("theoretically")
    self.assertEqual(r, ['theoretically'])

    _, r = self.anagrams2.get_anagrams("theoreticians")
    self.assertEqual(r, ['theoreticians'])

    _, r = self.anagrams2.get_anagrams("theories")
    self.assertEqual(r, ['theories'])

    _, r = self.anagrams2.get_anagrams("theorist")
    self.assertEqual(r, ['theorist'])

    _, r = self.anagrams2.get_anagrams("theorists")
    self.assertEqual(r, ['theorists'])

    _, r = self.anagrams2.get_anagrams("theorization")
    self.assertEqual(r, ['theorization'])

    _, r = self.anagrams2.get_anagrams("theorizations")
    self.assertEqual(r, ['theorizations'])

    _, r = self.anagrams2.get_anagrams("theorize")
    self.assertEqual(r, ['theorize'])

    _, r = self.anagrams2.get_anagrams("theorized")
    self.assertEqual(r, ['theorized'])

    _, r = self.anagrams2.get_anagrams("theorizer")
    self.assertEqual(r, ['theorizer'])

    _, r = self.anagrams2.get_anagrams("theorizers")
    self.assertEqual(r, ['theorizers'])

    _, r = self.anagrams2.get_anagrams("theorizes")
    self.assertEqual(r, ['theorizes'])

    _, r = self.anagrams2.get_anagrams("theorizing")
    self.assertEqual(r, ['theorizing'])

    _, r = self.anagrams2.get_anagrams("theory")
    self.assertEqual(r, ['theory'])

    _, r = self.anagrams2.get_anagrams("therapeutic")
    self.assertEqual(r, ['therapeutic'])

    _, r = self.anagrams2.get_anagrams("therapies")
    self.assertEqual(r, ['therapies'])

    _, r = self.anagrams2.get_anagrams("therapist")
    self.assertEqual(r, ['therapist'])

    _, r = self.anagrams2.get_anagrams("therapists")
    self.assertEqual(r, ['therapists'])

    _, r = self.anagrams2.get_anagrams("therapy")
    self.assertEqual(r, ['therapy'])

    _, r = self.anagrams2.get_anagrams("there")
    self.assertEqual(r, ['ether', 'there', 'three'])

    _, r = self.anagrams2.get_anagrams("thereabouts")
    self.assertEqual(r, ['thereabouts'])

    _, r = self.anagrams2.get_anagrams("thereafter")
    self.assertEqual(r, ['thereafter'])

    _, r = self.anagrams2.get_anagrams("thereby")
    self.assertEqual(r, ['thereby'])

    _, r = self.anagrams2.get_anagrams("therefore")
    self.assertEqual(r, ['therefore'])

    _, r = self.anagrams2.get_anagrams("therein")
    self.assertEqual(r, ['neither', 'therein'])

    _, r = self.anagrams2.get_anagrams("thereof")
    self.assertEqual(r, ['thereof'])

    _, r = self.anagrams2.get_anagrams("thereon")
    self.assertEqual(r, ['thereon'])

    _, r = self.anagrams2.get_anagrams("theresa")
    self.assertEqual(r, ['heaters', 'theresa'])

    _, r = self.anagrams2.get_anagrams("thereto")
    self.assertEqual(r, ['thereto'])

    _, r = self.anagrams2.get_anagrams("thereupon")
    self.assertEqual(r, ['thereupon'])

    _, r = self.anagrams2.get_anagrams("therewith")
    self.assertEqual(r, ['therewith'])

    _, r = self.anagrams2.get_anagrams("thermal")
    self.assertEqual(r, ['thermal'])

    _, r = self.anagrams2.get_anagrams("thermodynamic")
    self.assertEqual(r, ['thermodynamic'])

    _, r = self.anagrams2.get_anagrams("thermodynamics")
    self.assertEqual(r, ['thermodynamics'])

    _, r = self.anagrams2.get_anagrams("thermofax")
    self.assertEqual(r, ['thermofax'])

    _, r = self.anagrams2.get_anagrams("thermometer")
    self.assertEqual(r, ['thermometer'])

    _, r = self.anagrams2.get_anagrams("thermometers")
    self.assertEqual(r, ['thermometers'])

    _, r = self.anagrams2.get_anagrams("thermostat")
    self.assertEqual(r, ['thermostat'])

    _, r = self.anagrams2.get_anagrams("thermostats")
    self.assertEqual(r, ['thermostats'])

    _, r = self.anagrams2.get_anagrams("these")
    self.assertEqual(r, ['sheet', 'these'])

    _, r = self.anagrams2.get_anagrams("theses")
    self.assertEqual(r, ['sheets', 'theses'])

    _, r = self.anagrams2.get_anagrams("theseus")
    self.assertEqual(r, ['theseus'])

    _, r = self.anagrams2.get_anagrams("thesis")
    self.assertEqual(r, ['thesis'])

    _, r = self.anagrams2.get_anagrams("thessalonian")
    self.assertEqual(r, ['thessalonian'])

    _, r = self.anagrams2.get_anagrams("thessaly")
    self.assertEqual(r, ['thessaly'])

    _, r = self.anagrams2.get_anagrams("thetis")
    self.assertEqual(r, ['thetis', 'tithes'])

    _, r = self.anagrams2.get_anagrams("they")
    self.assertEqual(r, ['they'])

    _, r = self.anagrams2.get_anagrams("thick")
    self.assertEqual(r, ['thick'])

    _, r = self.anagrams2.get_anagrams("thicken")
    self.assertEqual(r, ['kitchen', 'thicken'])

    _, r = self.anagrams2.get_anagrams("thickens")
    self.assertEqual(r, ['kitchens', 'thickens'])

    _, r = self.anagrams2.get_anagrams("thicker")
    self.assertEqual(r, ['thicker'])

    _, r = self.anagrams2.get_anagrams("thickest")
    self.assertEqual(r, ['thickest', 'thickets'])

    _, r = self.anagrams2.get_anagrams("thicket")
    self.assertEqual(r, ['thicket'])

    _, r = self.anagrams2.get_anagrams("thickets")
    self.assertEqual(r, ['thickest', 'thickets'])

    _, r = self.anagrams2.get_anagrams("thickly")
    self.assertEqual(r, ['thickly'])

    _, r = self.anagrams2.get_anagrams("thickness")
    self.assertEqual(r, ['thickness'])

    _, r = self.anagrams2.get_anagrams("thief")
    self.assertEqual(r, ['thief'])

    _, r = self.anagrams2.get_anagrams("thiensville")
    self.assertEqual(r, ['thiensville'])

    _, r = self.anagrams2.get_anagrams("thieve")
    self.assertEqual(r, ['thieve'])

    _, r = self.anagrams2.get_anagrams("thieves")
    self.assertEqual(r, ['thieves'])

    _, r = self.anagrams2.get_anagrams("thieving")
    self.assertEqual(r, ['thieving'])

    _, r = self.anagrams2.get_anagrams("thigh")
    self.assertEqual(r, ['thigh'])

    _, r = self.anagrams2.get_anagrams("thighs")
    self.assertEqual(r, ['thighs'])

    _, r = self.anagrams2.get_anagrams("thimble")
    self.assertEqual(r, ['thimble'])

    _, r = self.anagrams2.get_anagrams("thimbles")
    self.assertEqual(r, ['thimbles'])

    _, r = self.anagrams2.get_anagrams("thimbu")
    self.assertEqual(r, ['thimbu'])

    _, r = self.anagrams2.get_anagrams("thin")
    self.assertEqual(r, ['hint', 'thin'])

    _, r = self.anagrams2.get_anagrams("thing")
    self.assertEqual(r, ['night', 'thing'])

    _, r = self.anagrams2.get_anagrams("things")
    self.assertEqual(r, ['nights', 'things'])

    _, r = self.anagrams2.get_anagrams("think")
    self.assertEqual(r, ['think'])

    _, r = self.anagrams2.get_anagrams("thinkable")
    self.assertEqual(r, ['thinkable'])

    _, r = self.anagrams2.get_anagrams("thinkably")
    self.assertEqual(r, ['thinkably'])

    _, r = self.anagrams2.get_anagrams("thinker")
    self.assertEqual(r, ['thinker'])

    _, r = self.anagrams2.get_anagrams("thinkers")
    self.assertEqual(r, ['thinkers'])

    _, r = self.anagrams2.get_anagrams("thinking")
    self.assertEqual(r, ['thinking'])

    _, r = self.anagrams2.get_anagrams("thinks")
    self.assertEqual(r, ['thinks'])

    _, r = self.anagrams2.get_anagrams("thinly")
    self.assertEqual(r, ['thinly'])

    _, r = self.anagrams2.get_anagrams("thinner")
    self.assertEqual(r, ['thinner'])

    _, r = self.anagrams2.get_anagrams("thinness")
    self.assertEqual(r, ['thinness'])

    _, r = self.anagrams2.get_anagrams("thinnest")
    self.assertEqual(r, ['thinnest'])

    _, r = self.anagrams2.get_anagrams("third")
    self.assertEqual(r, ['third'])

    _, r = self.anagrams2.get_anagrams("thirdly")
    self.assertEqual(r, ['thirdly'])

    _, r = self.anagrams2.get_anagrams("thirds")
    self.assertEqual(r, ['thirds'])

    _, r = self.anagrams2.get_anagrams("thirst")
    self.assertEqual(r, ['thirst'])

    _, r = self.anagrams2.get_anagrams("thirsted")
    self.assertEqual(r, ['thirsted'])

    _, r = self.anagrams2.get_anagrams("thirsts")
    self.assertEqual(r, ['thirsts'])

    _, r = self.anagrams2.get_anagrams("thirsty")
    self.assertEqual(r, ['thirsty'])

    _, r = self.anagrams2.get_anagrams("thirteen")
    self.assertEqual(r, ['thirteen'])

    _, r = self.anagrams2.get_anagrams("thirteens")
    self.assertEqual(r, ['thirteens'])

    _, r = self.anagrams2.get_anagrams("thirteenth")
    self.assertEqual(r, ['thirteenth'])

    _, r = self.anagrams2.get_anagrams("thirties")
    self.assertEqual(r, ['thirties'])

    _, r = self.anagrams2.get_anagrams("thirtieth")
    self.assertEqual(r, ['thirtieth'])

    _, r = self.anagrams2.get_anagrams("thirty")
    self.assertEqual(r, ['thirty'])

    _, r = self.anagrams2.get_anagrams("this")
    self.assertEqual(r, ['hits', 'shit', 'this'])

    _, r = self.anagrams2.get_anagrams("thistle")
    self.assertEqual(r, ['thistle'])

    _, r = self.anagrams2.get_anagrams("thomas")
    self.assertEqual(r, ['thomas'])

    _, r = self.anagrams2.get_anagrams("thomistic")
    self.assertEqual(r, ['thomistic'])

    _, r = self.anagrams2.get_anagrams("thompson")
    self.assertEqual(r, ['thompson'])

    _, r = self.anagrams2.get_anagrams("thomson")
    self.assertEqual(r, ['thomson'])

    _, r = self.anagrams2.get_anagrams("thong")
    self.assertEqual(r, ['thong'])

    _, r = self.anagrams2.get_anagrams("thor")
    self.assertEqual(r, ['roth', 'thor'])

    _, r = self.anagrams2.get_anagrams("thoreau")
    self.assertEqual(r, ['thoreau'])

    _, r = self.anagrams2.get_anagrams("thorn")
    self.assertEqual(r, ['north', 'thorn'])

    _, r = self.anagrams2.get_anagrams("thornburg")
    self.assertEqual(r, ['thornburg'])

    _, r = self.anagrams2.get_anagrams("thorns")
    self.assertEqual(r, ['thorns'])

    _, r = self.anagrams2.get_anagrams("thornton")
    self.assertEqual(r, ['thornton'])

    _, r = self.anagrams2.get_anagrams("thorny")
    self.assertEqual(r, ['thorny'])

    _, r = self.anagrams2.get_anagrams("thorough")
    self.assertEqual(r, ['thorough'])

    _, r = self.anagrams2.get_anagrams("thoroughfare")
    self.assertEqual(r, ['thoroughfare'])

    _, r = self.anagrams2.get_anagrams("thoroughfares")
    self.assertEqual(r, ['thoroughfares'])

    _, r = self.anagrams2.get_anagrams("thoroughly")
    self.assertEqual(r, ['thoroughly'])

    _, r = self.anagrams2.get_anagrams("thoroughness")
    self.assertEqual(r, ['thoroughness'])

    _, r = self.anagrams2.get_anagrams("thorpe")
    self.assertEqual(r, ['thorpe'])

    _, r = self.anagrams2.get_anagrams("thorstein")
    self.assertEqual(r, ['thorstein'])

    _, r = self.anagrams2.get_anagrams("those")
    self.assertEqual(r, ['those'])

    _, r = self.anagrams2.get_anagrams("though")
    self.assertEqual(r, ['though'])

    _, r = self.anagrams2.get_anagrams("thought")
    self.assertEqual(r, ['thought'])

    _, r = self.anagrams2.get_anagrams("thoughtful")
    self.assertEqual(r, ['thoughtful'])

    _, r = self.anagrams2.get_anagrams("thoughtfully")
    self.assertEqual(r, ['thoughtfully'])

    _, r = self.anagrams2.get_anagrams("thoughtfulness")
    self.assertEqual(r, ['thoughtfulness'])

    _, r = self.anagrams2.get_anagrams("thoughtless")
    self.assertEqual(r, ['thoughtless'])

    _, r = self.anagrams2.get_anagrams("thoughtlessly")
    self.assertEqual(r, ['thoughtlessly'])

    _, r = self.anagrams2.get_anagrams("thoughtlessness")
    self.assertEqual(r, ['thoughtlessness'])

    _, r = self.anagrams2.get_anagrams("thoughts")
    self.assertEqual(r, ['thoughts'])

    _, r = self.anagrams2.get_anagrams("thousand")
    self.assertEqual(r, ['thousand'])

    _, r = self.anagrams2.get_anagrams("thousands")
    self.assertEqual(r, ['thousands'])

    _, r = self.anagrams2.get_anagrams("thousandth")
    self.assertEqual(r, ['thousandth'])

    _, r = self.anagrams2.get_anagrams("thrace")
    self.assertEqual(r, ['thrace'])

    _, r = self.anagrams2.get_anagrams("thracian")
    self.assertEqual(r, ['thracian'])

    _, r = self.anagrams2.get_anagrams("thrash")
    self.assertEqual(r, ['thrash'])

    _, r = self.anagrams2.get_anagrams("thrashed")
    self.assertEqual(r, ['thrashed'])

    _, r = self.anagrams2.get_anagrams("thrasher")
    self.assertEqual(r, ['thrasher'])

    _, r = self.anagrams2.get_anagrams("thrashes")
    self.assertEqual(r, ['thrashes'])

    _, r = self.anagrams2.get_anagrams("thrashing")
    self.assertEqual(r, ['thrashing'])

    _, r = self.anagrams2.get_anagrams("thread")
    self.assertEqual(r, ['dearth', 'hatred', 'thread'])

    _, r = self.anagrams2.get_anagrams("threaded")
    self.assertEqual(r, ['threaded'])

    _, r = self.anagrams2.get_anagrams("threader")
    self.assertEqual(r, ['threader'])

    _, r = self.anagrams2.get_anagrams("threaders")
    self.assertEqual(r, ['threaders'])

    _, r = self.anagrams2.get_anagrams("threading")
    self.assertEqual(r, ['threading'])

    _, r = self.anagrams2.get_anagrams("threads")
    self.assertEqual(r, ['dearths', 'hardest', 'threads'])

    _, r = self.anagrams2.get_anagrams("threat")
    self.assertEqual(r, ['threat'])

    _, r = self.anagrams2.get_anagrams("threaten")
    self.assertEqual(r, ['threaten'])

    _, r = self.anagrams2.get_anagrams("threatened")
    self.assertEqual(r, ['threatened'])

    _, r = self.anagrams2.get_anagrams("threatening")
    self.assertEqual(r, ['threatening'])

    _, r = self.anagrams2.get_anagrams("threatens")
    self.assertEqual(r, ['threatens'])

    _, r = self.anagrams2.get_anagrams("threats")
    self.assertEqual(r, ['shatter', 'threats'])

    _, r = self.anagrams2.get_anagrams("three")
    self.assertEqual(r, ['ether', 'there', 'three'])

    _, r = self.anagrams2.get_anagrams("threefold")
    self.assertEqual(r, ['threefold'])

    _, r = self.anagrams2.get_anagrams("threes")
    self.assertEqual(r, ['esther', 'ethers', 'hester', 'threes'])

    _, r = self.anagrams2.get_anagrams("threescore")
    self.assertEqual(r, ['threescore'])

    _, r = self.anagrams2.get_anagrams("threshold")
    self.assertEqual(r, ['threshold'])

    _, r = self.anagrams2.get_anagrams("thresholds")
    self.assertEqual(r, ['thresholds'])

    _, r = self.anagrams2.get_anagrams("threw")
    self.assertEqual(r, ['threw'])

    _, r = self.anagrams2.get_anagrams("thrice")
    self.assertEqual(r, ['thrice'])

    _, r = self.anagrams2.get_anagrams("thrift")
    self.assertEqual(r, ['thrift'])

    _, r = self.anagrams2.get_anagrams("thrifty")
    self.assertEqual(r, ['thrifty'])

    _, r = self.anagrams2.get_anagrams("thrill")
    self.assertEqual(r, ['thrill'])

    _, r = self.anagrams2.get_anagrams("thrilled")
    self.assertEqual(r, ['thrilled'])

    _, r = self.anagrams2.get_anagrams("thriller")
    self.assertEqual(r, ['thriller'])

    _, r = self.anagrams2.get_anagrams("thrillers")
    self.assertEqual(r, ['thrillers'])

    _, r = self.anagrams2.get_anagrams("thrilling")
    self.assertEqual(r, ['thrilling'])

    _, r = self.anagrams2.get_anagrams("thrillingly")
    self.assertEqual(r, ['thrillingly'])

    _, r = self.anagrams2.get_anagrams("thrills")
    self.assertEqual(r, ['thrills'])

    _, r = self.anagrams2.get_anagrams("thrive")
    self.assertEqual(r, ['thrive'])

    _, r = self.anagrams2.get_anagrams("thrived")
    self.assertEqual(r, ['thrived'])

    _, r = self.anagrams2.get_anagrams("thrives")
    self.assertEqual(r, ['thrives'])

    _, r = self.anagrams2.get_anagrams("thriving")
    self.assertEqual(r, ['thriving'])

    _, r = self.anagrams2.get_anagrams("throat")
    self.assertEqual(r, ['throat'])

    _, r = self.anagrams2.get_anagrams("throated")
    self.assertEqual(r, ['throated'])

    _, r = self.anagrams2.get_anagrams("throats")
    self.assertEqual(r, ['throats'])

    _, r = self.anagrams2.get_anagrams("throb")
    self.assertEqual(r, ['broth', 'throb'])

    _, r = self.anagrams2.get_anagrams("throbbed")
    self.assertEqual(r, ['throbbed'])

    _, r = self.anagrams2.get_anagrams("throbbing")
    self.assertEqual(r, ['throbbing'])

    _, r = self.anagrams2.get_anagrams("throbs")
    self.assertEqual(r, ['throbs'])

    _, r = self.anagrams2.get_anagrams("throne")
    self.assertEqual(r, ['hornet', 'throne'])

    _, r = self.anagrams2.get_anagrams("throneberry")
    self.assertEqual(r, ['throneberry'])

    _, r = self.anagrams2.get_anagrams("thrones")
    self.assertEqual(r, ['hornets', 'shorten', 'thrones'])

    _, r = self.anagrams2.get_anagrams("throng")
    self.assertEqual(r, ['throng'])

    _, r = self.anagrams2.get_anagrams("throngs")
    self.assertEqual(r, ['throngs'])

    _, r = self.anagrams2.get_anagrams("throttle")
    self.assertEqual(r, ['throttle'])

    _, r = self.anagrams2.get_anagrams("throttled")
    self.assertEqual(r, ['throttled'])

    _, r = self.anagrams2.get_anagrams("throttles")
    self.assertEqual(r, ['throttles'])

    _, r = self.anagrams2.get_anagrams("throttling")
    self.assertEqual(r, ['throttling'])

    _, r = self.anagrams2.get_anagrams("through")
    self.assertEqual(r, ['through'])

    _, r = self.anagrams2.get_anagrams("throughout")
    self.assertEqual(r, ['throughout'])

    _, r = self.anagrams2.get_anagrams("throughput")
    self.assertEqual(r, ['throughput'])

    _, r = self.anagrams2.get_anagrams("throw")
    self.assertEqual(r, ['throw', 'worth'])

    _, r = self.anagrams2.get_anagrams("thrower")
    self.assertEqual(r, ['thrower'])

    _, r = self.anagrams2.get_anagrams("throwing")
    self.assertEqual(r, ['throwing'])

    _, r = self.anagrams2.get_anagrams("thrown")
    self.assertEqual(r, ['thrown'])

    _, r = self.anagrams2.get_anagrams("throws")
    self.assertEqual(r, ['throws', 'worths'])

    _, r = self.anagrams2.get_anagrams("thrush")
    self.assertEqual(r, ['thrush'])

    _, r = self.anagrams2.get_anagrams("thrust")
    self.assertEqual(r, ['thrust', 'truths'])

    _, r = self.anagrams2.get_anagrams("thruster")
    self.assertEqual(r, ['thruster'])

    _, r = self.anagrams2.get_anagrams("thrusters")
    self.assertEqual(r, ['thrusters'])

    _, r = self.anagrams2.get_anagrams("thrusting")
    self.assertEqual(r, ['thrusting'])

    _, r = self.anagrams2.get_anagrams("thrusts")
    self.assertEqual(r, ['thrusts'])

    _, r = self.anagrams2.get_anagrams("thuban")
    self.assertEqual(r, ['bhutan', 'thuban'])

    _, r = self.anagrams2.get_anagrams("thud")
    self.assertEqual(r, ['thud'])

    _, r = self.anagrams2.get_anagrams("thuds")
    self.assertEqual(r, ['thuds'])

    _, r = self.anagrams2.get_anagrams("thug")
    self.assertEqual(r, ['thug'])

    _, r = self.anagrams2.get_anagrams("thugs")
    self.assertEqual(r, ['thugs'])

    _, r = self.anagrams2.get_anagrams("thule")
    self.assertEqual(r, ['thule'])

    _, r = self.anagrams2.get_anagrams("thumb")
    self.assertEqual(r, ['thumb'])

    _, r = self.anagrams2.get_anagrams("thumbed")
    self.assertEqual(r, ['thumbed'])

    _, r = self.anagrams2.get_anagrams("thumbing")
    self.assertEqual(r, ['thumbing'])

    _, r = self.anagrams2.get_anagrams("thumbs")
    self.assertEqual(r, ['thumbs'])

    _, r = self.anagrams2.get_anagrams("thump")
    self.assertEqual(r, ['thump'])

    _, r = self.anagrams2.get_anagrams("thumped")
    self.assertEqual(r, ['thumped'])

    _, r = self.anagrams2.get_anagrams("thumping")
    self.assertEqual(r, ['thumping'])

    _, r = self.anagrams2.get_anagrams("thunder")
    self.assertEqual(r, ['thunder'])

    _, r = self.anagrams2.get_anagrams("thunderbolt")
    self.assertEqual(r, ['thunderbolt'])

    _, r = self.anagrams2.get_anagrams("thunderbolts")
    self.assertEqual(r, ['thunderbolts'])

    _, r = self.anagrams2.get_anagrams("thundered")
    self.assertEqual(r, ['thundered'])

    _, r = self.anagrams2.get_anagrams("thunderer")
    self.assertEqual(r, ['thunderer'])

    _, r = self.anagrams2.get_anagrams("thunderers")
    self.assertEqual(r, ['thunderers'])

    _, r = self.anagrams2.get_anagrams("thundering")
    self.assertEqual(r, ['thundering'])

    _, r = self.anagrams2.get_anagrams("thunders")
    self.assertEqual(r, ['thunders'])

    _, r = self.anagrams2.get_anagrams("thunderstorm")
    self.assertEqual(r, ['thunderstorm'])

    _, r = self.anagrams2.get_anagrams("thunderstorms")
    self.assertEqual(r, ['thunderstorms'])

    _, r = self.anagrams2.get_anagrams("thurber")
    self.assertEqual(r, ['thurber'])

    _, r = self.anagrams2.get_anagrams("thurman")
    self.assertEqual(r, ['thurman'])

    _, r = self.anagrams2.get_anagrams("thursday")
    self.assertEqual(r, ['thursday'])

    _, r = self.anagrams2.get_anagrams("thursdays")
    self.assertEqual(r, ['thursdays'])

    _, r = self.anagrams2.get_anagrams("thus")
    self.assertEqual(r, ['huts', 'shut', 'thus'])

    _, r = self.anagrams2.get_anagrams("thusly")
    self.assertEqual(r, ['thusly'])

    _, r = self.anagrams2.get_anagrams("thwart")
    self.assertEqual(r, ['thwart'])

    _, r = self.anagrams2.get_anagrams("thwarted")
    self.assertEqual(r, ['thwarted'])

    _, r = self.anagrams2.get_anagrams("thwarting")
    self.assertEqual(r, ['thwarting'])

    _, r = self.anagrams2.get_anagrams("thwarts")
    self.assertEqual(r, ['thwarts'])

    _, r = self.anagrams2.get_anagrams("thyself")
    self.assertEqual(r, ['thyself'])

    _, r = self.anagrams2.get_anagrams("tiber")
    self.assertEqual(r, ['biter', 'tiber', 'tribe'])

    _, r = self.anagrams2.get_anagrams("tibet")
    self.assertEqual(r, ['tibet'])

    _, r = self.anagrams2.get_anagrams("tibetan")
    self.assertEqual(r, ['tibetan'])

    _, r = self.anagrams2.get_anagrams("tiburon")
    self.assertEqual(r, ['tiburon'])

    _, r = self.anagrams2.get_anagrams("tick")
    self.assertEqual(r, ['tick'])

    _, r = self.anagrams2.get_anagrams("ticked")
    self.assertEqual(r, ['ticked'])

    _, r = self.anagrams2.get_anagrams("ticker")
    self.assertEqual(r, ['ticker'])

    _, r = self.anagrams2.get_anagrams("tickers")
    self.assertEqual(r, ['rickets', 'sticker', 'tickers'])

    _, r = self.anagrams2.get_anagrams("ticket")
    self.assertEqual(r, ['ticket'])

    _, r = self.anagrams2.get_anagrams("tickets")
    self.assertEqual(r, ['tickets'])

    _, r = self.anagrams2.get_anagrams("ticking")
    self.assertEqual(r, ['ticking'])

    _, r = self.anagrams2.get_anagrams("tickle")
    self.assertEqual(r, ['tickle'])

    _, r = self.anagrams2.get_anagrams("tickled")
    self.assertEqual(r, ['tickled'])

    _, r = self.anagrams2.get_anagrams("tickles")
    self.assertEqual(r, ['tickles'])

    _, r = self.anagrams2.get_anagrams("tickling")
    self.assertEqual(r, ['tickling'])

    _, r = self.anagrams2.get_anagrams("ticklish")
    self.assertEqual(r, ['ticklish'])

    _, r = self.anagrams2.get_anagrams("ticks")
    self.assertEqual(r, ['stick', 'ticks'])

    _, r = self.anagrams2.get_anagrams("ticonderoga")
    self.assertEqual(r, ['ticonderoga'])

    _, r = self.anagrams2.get_anagrams("tidal")
    self.assertEqual(r, ['tidal'])

    _, r = self.anagrams2.get_anagrams("tidally")
    self.assertEqual(r, ['tidally'])

    _, r = self.anagrams2.get_anagrams("tide")
    self.assertEqual(r, ['diet', 'edit', 'tide', 'tied'])

    _, r = self.anagrams2.get_anagrams("tided")
    self.assertEqual(r, ['tided'])

    _, r = self.anagrams2.get_anagrams("tides")
    self.assertEqual(r, ['diets', 'edits', 'sited', 'tides'])

    _, r = self.anagrams2.get_anagrams("tidied")
    self.assertEqual(r, ['tidied'])

    _, r = self.anagrams2.get_anagrams("tidiness")
    self.assertEqual(r, ['insisted', 'tidiness'])

    _, r = self.anagrams2.get_anagrams("tiding")
    self.assertEqual(r, ['tiding'])

    _, r = self.anagrams2.get_anagrams("tidings")
    self.assertEqual(r, ['tidings'])

    _, r = self.anagrams2.get_anagrams("tidy")
    self.assertEqual(r, ['tidy'])

    _, r = self.anagrams2.get_anagrams("tidying")
    self.assertEqual(r, ['dignity', 'tidying'])

    _, r = self.anagrams2.get_anagrams("tie")
    self.assertEqual(r, ['tie'])

    _, r = self.anagrams2.get_anagrams("tieck")
    self.assertEqual(r, ['tieck'])

    _, r = self.anagrams2.get_anagrams("tied")
    self.assertEqual(r, ['diet', 'edit', 'tide', 'tied'])

    _, r = self.anagrams2.get_anagrams("tientsin")
    self.assertEqual(r, ['tientsin', 'tinniest'])

    _, r = self.anagrams2.get_anagrams("tier")
    self.assertEqual(r, ['rite', 'tier', 'tire'])

    _, r = self.anagrams2.get_anagrams("tiers")
    self.assertEqual(r, ['rites', 'tiers', 'tires', 'tries'])

    _, r = self.anagrams2.get_anagrams("ties")
    self.assertEqual(r, ['site', 'ties'])

    _, r = self.anagrams2.get_anagrams("tiffany")
    self.assertEqual(r, ['tiffany'])

    _, r = self.anagrams2.get_anagrams("tiger")
    self.assertEqual(r, ['tiger'])

    _, r = self.anagrams2.get_anagrams("tigers")
    self.assertEqual(r, ['tigers'])

    _, r = self.anagrams2.get_anagrams("tight")
    self.assertEqual(r, ['tight'])

    _, r = self.anagrams2.get_anagrams("tighten")
    self.assertEqual(r, ['tighten'])

    _, r = self.anagrams2.get_anagrams("tightened")
    self.assertEqual(r, ['tightened'])

    _, r = self.anagrams2.get_anagrams("tightener")
    self.assertEqual(r, ['tightener'])

    _, r = self.anagrams2.get_anagrams("tighteners")
    self.assertEqual(r, ['tighteners'])

    _, r = self.anagrams2.get_anagrams("tightening")
    self.assertEqual(r, ['tightening'])

    _, r = self.anagrams2.get_anagrams("tightenings")
    self.assertEqual(r, ['tightenings'])

    _, r = self.anagrams2.get_anagrams("tightens")
    self.assertEqual(r, ['tightens'])

    _, r = self.anagrams2.get_anagrams("tighter")
    self.assertEqual(r, ['tighter'])

    _, r = self.anagrams2.get_anagrams("tightest")
    self.assertEqual(r, ['tightest'])

    _, r = self.anagrams2.get_anagrams("tightly")
    self.assertEqual(r, ['tightly'])

    _, r = self.anagrams2.get_anagrams("tightness")
    self.assertEqual(r, ['tightness'])

    _, r = self.anagrams2.get_anagrams("tigris")
    self.assertEqual(r, ['tigris'])

    _, r = self.anagrams2.get_anagrams("tijuana")
    self.assertEqual(r, ['juanita', 'tijuana'])

    _, r = self.anagrams2.get_anagrams("tilde")
    self.assertEqual(r, ['tilde', 'tiled'])

    _, r = self.anagrams2.get_anagrams("tile")
    self.assertEqual(r, ['itel', 'tile'])

    _, r = self.anagrams2.get_anagrams("tiled")
    self.assertEqual(r, ['tilde', 'tiled'])

    _, r = self.anagrams2.get_anagrams("tiles")
    self.assertEqual(r, ['islet', 'stile', 'tiles'])

    _, r = self.anagrams2.get_anagrams("tiling")
    self.assertEqual(r, ['tiling'])

    _, r = self.anagrams2.get_anagrams("till")
    self.assertEqual(r, ['till'])

    _, r = self.anagrams2.get_anagrams("tillable")
    self.assertEqual(r, ['tillable'])

    _, r = self.anagrams2.get_anagrams("tilled")
    self.assertEqual(r, ['tilled'])

    _, r = self.anagrams2.get_anagrams("tiller")
    self.assertEqual(r, ['tiller'])

    _, r = self.anagrams2.get_anagrams("tillers")
    self.assertEqual(r, ['stiller', 'tillers'])

    _, r = self.anagrams2.get_anagrams("tillich")
    self.assertEqual(r, ['tillich'])

    _, r = self.anagrams2.get_anagrams("tillie")
    self.assertEqual(r, ['tillie'])

    _, r = self.anagrams2.get_anagrams("tilling")
    self.assertEqual(r, ['tilling'])

    _, r = self.anagrams2.get_anagrams("tills")
    self.assertEqual(r, ['still', 'tills'])

    _, r = self.anagrams2.get_anagrams("tilt")
    self.assertEqual(r, ['tilt'])

    _, r = self.anagrams2.get_anagrams("tilted")
    self.assertEqual(r, ['tilted', 'titled'])

    _, r = self.anagrams2.get_anagrams("tilting")
    self.assertEqual(r, ['tilting'])

    _, r = self.anagrams2.get_anagrams("tilts")
    self.assertEqual(r, ['stilt', 'tilts'])

    _, r = self.anagrams2.get_anagrams("tim")
    self.assertEqual(r, ['tim'])

    _, r = self.anagrams2.get_anagrams("timber")
    self.assertEqual(r, ['timber'])

    _, r = self.anagrams2.get_anagrams("timbered")
    self.assertEqual(r, ['timbered'])

    _, r = self.anagrams2.get_anagrams("timbering")
    self.assertEqual(r, ['timbering'])

    _, r = self.anagrams2.get_anagrams("timbers")
    self.assertEqual(r, ['timbers'])

    _, r = self.anagrams2.get_anagrams("time")
    self.assertEqual(r, ['emit', 'item', 'time'])

    _, r = self.anagrams2.get_anagrams("timed")
    self.assertEqual(r, ['timed'])

    _, r = self.anagrams2.get_anagrams("timeless")
    self.assertEqual(r, ['timeless'])

    _, r = self.anagrams2.get_anagrams("timelessly")
    self.assertEqual(r, ['timelessly'])

    _, r = self.anagrams2.get_anagrams("timelessness")
    self.assertEqual(r, ['timelessness'])

    _, r = self.anagrams2.get_anagrams("timely")
    self.assertEqual(r, ['timely'])

    _, r = self.anagrams2.get_anagrams("timeout")
    self.assertEqual(r, ['timeout'])

    _, r = self.anagrams2.get_anagrams("timeouts")
    self.assertEqual(r, ['timeouts'])

    _, r = self.anagrams2.get_anagrams("timer")
    self.assertEqual(r, ['merit', 'miter', 'mitre', 'remit', 'timer'])

    _, r = self.anagrams2.get_anagrams("timers")
    self.assertEqual(r, ['merits', 'mister', 'mitres', 'timers'])

    _, r = self.anagrams2.get_anagrams("times")
    self.assertEqual(r, ['emits', 'items', 'smite', 'times'])

    _, r = self.anagrams2.get_anagrams("timeshare")
    self.assertEqual(r, ['timeshare'])

    _, r = self.anagrams2.get_anagrams("timeshares")
    self.assertEqual(r, ['timeshares'])

    _, r = self.anagrams2.get_anagrams("timesharing")
    self.assertEqual(r, ['timesharing'])

    _, r = self.anagrams2.get_anagrams("timestamp")
    self.assertEqual(r, ['timestamp'])

    _, r = self.anagrams2.get_anagrams("timestamps")
    self.assertEqual(r, ['timestamps'])

    _, r = self.anagrams2.get_anagrams("timetable")
    self.assertEqual(r, ['timetable'])

    _, r = self.anagrams2.get_anagrams("timetables")
    self.assertEqual(r, ['timetables'])

    _, r = self.anagrams2.get_anagrams("timex")
    self.assertEqual(r, ['timex'])

    _, r = self.anagrams2.get_anagrams("timid")
    self.assertEqual(r, ['timid'])

    _, r = self.anagrams2.get_anagrams("timidity")
    self.assertEqual(r, ['timidity'])

    _, r = self.anagrams2.get_anagrams("timidly")
    self.assertEqual(r, ['timidly'])

    _, r = self.anagrams2.get_anagrams("timing")
    self.assertEqual(r, ['timing'])

    _, r = self.anagrams2.get_anagrams("timings")
    self.assertEqual(r, ['misting', 'timings'])

    _, r = self.anagrams2.get_anagrams("timmy")
    self.assertEqual(r, ['timmy'])

    _, r = self.anagrams2.get_anagrams("timon")
    self.assertEqual(r, ['timon'])

    _, r = self.anagrams2.get_anagrams("timonize")
    self.assertEqual(r, ['timonize'])

    _, r = self.anagrams2.get_anagrams("timonizes")
    self.assertEqual(r, ['timonizes'])

    _, r = self.anagrams2.get_anagrams("tims")
    self.assertEqual(r, ['mist', 'tims'])

    _, r = self.anagrams2.get_anagrams("tin")
    self.assertEqual(r, ['tin'])

    _, r = self.anagrams2.get_anagrams("tina")
    self.assertEqual(r, ['anti', 'tina'])

    _, r = self.anagrams2.get_anagrams("tincture")
    self.assertEqual(r, ['tincture'])

    _, r = self.anagrams2.get_anagrams("tinge")
    self.assertEqual(r, ['tinge'])

    _, r = self.anagrams2.get_anagrams("tinged")
    self.assertEqual(r, ['tinged'])

    _, r = self.anagrams2.get_anagrams("tingle")
    self.assertEqual(r, ['tingle'])

    _, r = self.anagrams2.get_anagrams("tingled")
    self.assertEqual(r, ['glinted', 'tingled'])

    _, r = self.anagrams2.get_anagrams("tingles")
    self.assertEqual(r, ['glisten', 'singlet', 'tingles'])

    _, r = self.anagrams2.get_anagrams("tingling")
    self.assertEqual(r, ['glinting', 'tingling'])

    _, r = self.anagrams2.get_anagrams("tinier")
    self.assertEqual(r, ['tinier'])

    _, r = self.anagrams2.get_anagrams("tiniest")
    self.assertEqual(r, ['tiniest'])

    _, r = self.anagrams2.get_anagrams("tinily")
    self.assertEqual(r, ['tinily'])

    _, r = self.anagrams2.get_anagrams("tininess")
    self.assertEqual(r, ['tininess'])

    _, r = self.anagrams2.get_anagrams("tinker")
    self.assertEqual(r, ['tinker'])

    _, r = self.anagrams2.get_anagrams("tinkered")
    self.assertEqual(r, ['tinkered'])

    _, r = self.anagrams2.get_anagrams("tinkering")
    self.assertEqual(r, ['tinkering'])

    _, r = self.anagrams2.get_anagrams("tinkers")
    self.assertEqual(r, ['stinker', 'tinkers'])

    _, r = self.anagrams2.get_anagrams("tinkle")
    self.assertEqual(r, ['tinkle'])

    _, r = self.anagrams2.get_anagrams("tinkled")
    self.assertEqual(r, ['tinkled'])

    _, r = self.anagrams2.get_anagrams("tinkles")
    self.assertEqual(r, ['tinkles'])

    _, r = self.anagrams2.get_anagrams("tinkling")
    self.assertEqual(r, ['tinkling'])

    _, r = self.anagrams2.get_anagrams("tinnier")
    self.assertEqual(r, ['tinnier'])

    _, r = self.anagrams2.get_anagrams("tinniest")
    self.assertEqual(r, ['tientsin', 'tinniest'])

    _, r = self.anagrams2.get_anagrams("tinnily")
    self.assertEqual(r, ['tinnily'])

    _, r = self.anagrams2.get_anagrams("tinniness")
    self.assertEqual(r, ['tinniness'])

    _, r = self.anagrams2.get_anagrams("tinny")
    self.assertEqual(r, ['tinny'])

    _, r = self.anagrams2.get_anagrams("tins")
    self.assertEqual(r, ['tins'])

    _, r = self.anagrams2.get_anagrams("tinseltown")
    self.assertEqual(r, ['tinseltown'])

    _, r = self.anagrams2.get_anagrams("tint")
    self.assertEqual(r, ['tint'])

    _, r = self.anagrams2.get_anagrams("tinted")
    self.assertEqual(r, ['tinted'])

    _, r = self.anagrams2.get_anagrams("tinting")
    self.assertEqual(r, ['tinting'])

    _, r = self.anagrams2.get_anagrams("tints")
    self.assertEqual(r, ['stint', 'tints'])

    _, r = self.anagrams2.get_anagrams("tiny")
    self.assertEqual(r, ['tiny'])

    _, r = self.anagrams2.get_anagrams("tioga")
    self.assertEqual(r, ['tioga'])

    _, r = self.anagrams2.get_anagrams("tip")
    self.assertEqual(r, ['pit', 'tip'])

    _, r = self.anagrams2.get_anagrams("tippecanoe")
    self.assertEqual(r, ['tippecanoe'])

    _, r = self.anagrams2.get_anagrams("tipped")
    self.assertEqual(r, ['tipped'])

    _, r = self.anagrams2.get_anagrams("tipper")
    self.assertEqual(r, ['tipper'])

    _, r = self.anagrams2.get_anagrams("tipperary")
    self.assertEqual(r, ['tipperary'])

    _, r = self.anagrams2.get_anagrams("tippers")
    self.assertEqual(r, ['tippers'])

    _, r = self.anagrams2.get_anagrams("tipping")
    self.assertEqual(r, ['tipping'])

    _, r = self.anagrams2.get_anagrams("tips")
    self.assertEqual(r, ['pits', 'spit', 'tips'])

    _, r = self.anagrams2.get_anagrams("tiptoe")
    self.assertEqual(r, ['tiptoe'])

    _, r = self.anagrams2.get_anagrams("tirana")
    self.assertEqual(r, ['tirana'])

    _, r = self.anagrams2.get_anagrams("tire")
    self.assertEqual(r, ['rite', 'tier', 'tire'])

    _, r = self.anagrams2.get_anagrams("tired")
    self.assertEqual(r, ['tired', 'tried'])

    _, r = self.anagrams2.get_anagrams("tiredly")
    self.assertEqual(r, ['tiredly'])

    _, r = self.anagrams2.get_anagrams("tireless")
    self.assertEqual(r, ['tireless'])

    _, r = self.anagrams2.get_anagrams("tirelessly")
    self.assertEqual(r, ['tirelessly'])

    _, r = self.anagrams2.get_anagrams("tirelessness")
    self.assertEqual(r, ['tirelessness'])

    _, r = self.anagrams2.get_anagrams("tires")
    self.assertEqual(r, ['rites', 'tiers', 'tires', 'tries'])

    _, r = self.anagrams2.get_anagrams("tiresome")
    self.assertEqual(r, ['tiresome'])

    _, r = self.anagrams2.get_anagrams("tiresomely")
    self.assertEqual(r, ['tiresomely'])

    _, r = self.anagrams2.get_anagrams("tiresomeness")
    self.assertEqual(r, ['tiresomeness'])

    _, r = self.anagrams2.get_anagrams("tiring")
    self.assertEqual(r, ['tiring'])

    _, r = self.anagrams2.get_anagrams("tissue")
    self.assertEqual(r, ['suites', 'tissue'])

    _, r = self.anagrams2.get_anagrams("tissues")
    self.assertEqual(r, ['tissues'])

    _, r = self.anagrams2.get_anagrams("tit")
    self.assertEqual(r, ['tit'])

    _, r = self.anagrams2.get_anagrams("titan")
    self.assertEqual(r, ['taint', 'titan'])

    _, r = self.anagrams2.get_anagrams("tithe")
    self.assertEqual(r, ['tithe'])

    _, r = self.anagrams2.get_anagrams("tither")
    self.assertEqual(r, ['hitter', 'tither'])

    _, r = self.anagrams2.get_anagrams("tithes")
    self.assertEqual(r, ['thetis', 'tithes'])

    _, r = self.anagrams2.get_anagrams("tithing")
    self.assertEqual(r, ['hitting', 'tithing'])

    _, r = self.anagrams2.get_anagrams("title")
    self.assertEqual(r, ['title'])

    _, r = self.anagrams2.get_anagrams("titled")
    self.assertEqual(r, ['tilted', 'titled'])

    _, r = self.anagrams2.get_anagrams("titles")
    self.assertEqual(r, ['titles'])

    _, r = self.anagrams2.get_anagrams("tito")
    self.assertEqual(r, ['tito'])

    _, r = self.anagrams2.get_anagrams("tits")
    self.assertEqual(r, ['tits'])

    _, r = self.anagrams2.get_anagrams("titter")
    self.assertEqual(r, ['titter'])

    _, r = self.anagrams2.get_anagrams("titters")
    self.assertEqual(r, ['titters'])

    _, r = self.anagrams2.get_anagrams("titus")
    self.assertEqual(r, ['titus'])

    _, r = self.anagrams2.get_anagrams("to")
    self.assertEqual(r, ['to'])

    _, r = self.anagrams2.get_anagrams("toad")
    self.assertEqual(r, ['toad'])

    _, r = self.anagrams2.get_anagrams("toads")
    self.assertEqual(r, ['toads'])

    _, r = self.anagrams2.get_anagrams("toast")
    self.assertEqual(r, ['toast'])

    _, r = self.anagrams2.get_anagrams("toasted")
    self.assertEqual(r, ['toasted'])

    _, r = self.anagrams2.get_anagrams("toaster")
    self.assertEqual(r, ['rosetta', 'rotates', 'toaster'])

    _, r = self.anagrams2.get_anagrams("toasting")
    self.assertEqual(r, ['toasting'])

    _, r = self.anagrams2.get_anagrams("toasts")
    self.assertEqual(r, ['toasts'])

    _, r = self.anagrams2.get_anagrams("tobacco")
    self.assertEqual(r, ['tobacco'])

    _, r = self.anagrams2.get_anagrams("tobago")
    self.assertEqual(r, ['bogota', 'tobago'])

    _, r = self.anagrams2.get_anagrams("toby")
    self.assertEqual(r, ['toby'])

    _, r = self.anagrams2.get_anagrams("today")
    self.assertEqual(r, ['today'])

    _, r = self.anagrams2.get_anagrams("todays")
    self.assertEqual(r, ['todays'])

    _, r = self.anagrams2.get_anagrams("todd")
    self.assertEqual(r, ['todd'])

    _, r = self.anagrams2.get_anagrams("toe")
    self.assertEqual(r, ['toe'])

    _, r = self.anagrams2.get_anagrams("toes")
    self.assertEqual(r, ['toes'])

    _, r = self.anagrams2.get_anagrams("together")
    self.assertEqual(r, ['together'])

    _, r = self.anagrams2.get_anagrams("togetherness")
    self.assertEqual(r, ['togetherness'])

    _, r = self.anagrams2.get_anagrams("toggle")
    self.assertEqual(r, ['toggle'])

    _, r = self.anagrams2.get_anagrams("toggled")
    self.assertEqual(r, ['toggled'])

    _, r = self.anagrams2.get_anagrams("toggles")
    self.assertEqual(r, ['toggles'])

    _, r = self.anagrams2.get_anagrams("toggling")
    self.assertEqual(r, ['toggling'])

    _, r = self.anagrams2.get_anagrams("togo")
    self.assertEqual(r, ['goto', 'togo'])

    _, r = self.anagrams2.get_anagrams("toil")
    self.assertEqual(r, ['toil'])

    _, r = self.anagrams2.get_anagrams("toiled")
    self.assertEqual(r, ['toiled'])

    _, r = self.anagrams2.get_anagrams("toiler")
    self.assertEqual(r, ['loiter', 'toiler'])

    _, r = self.anagrams2.get_anagrams("toilet")
    self.assertEqual(r, ['lottie', 'toilet'])

    _, r = self.anagrams2.get_anagrams("toilets")
    self.assertEqual(r, ['toilets'])

    _, r = self.anagrams2.get_anagrams("toiling")
    self.assertEqual(r, ['toiling'])

    _, r = self.anagrams2.get_anagrams("toils")
    self.assertEqual(r, ['toils'])

    _, r = self.anagrams2.get_anagrams("token")
    self.assertEqual(r, ['token'])

    _, r = self.anagrams2.get_anagrams("tokens")
    self.assertEqual(r, ['tokens'])

    _, r = self.anagrams2.get_anagrams("tokyo")
    self.assertEqual(r, ['kyoto', 'tokyo'])

    _, r = self.anagrams2.get_anagrams("toland")
    self.assertEqual(r, ['dalton', 'toland'])

    _, r = self.anagrams2.get_anagrams("told")
    self.assertEqual(r, ['told'])

    _, r = self.anagrams2.get_anagrams("toledo")
    self.assertEqual(r, ['looted', 'toledo', 'tooled'])

    _, r = self.anagrams2.get_anagrams("tolerability")
    self.assertEqual(r, ['tolerability'])

    _, r = self.anagrams2.get_anagrams("tolerable")
    self.assertEqual(r, ['tolerable'])

    _, r = self.anagrams2.get_anagrams("tolerably")
    self.assertEqual(r, ['tolerably'])

    _, r = self.anagrams2.get_anagrams("tolerance")
    self.assertEqual(r, ['tolerance'])

    _, r = self.anagrams2.get_anagrams("tolerances")
    self.assertEqual(r, ['tolerances'])

    _, r = self.anagrams2.get_anagrams("tolerant")
    self.assertEqual(r, ['tolerant'])

    _, r = self.anagrams2.get_anagrams("tolerantly")
    self.assertEqual(r, ['tolerantly'])

    _, r = self.anagrams2.get_anagrams("tolerate")
    self.assertEqual(r, ['tolerate'])

    _, r = self.anagrams2.get_anagrams("tolerated")
    self.assertEqual(r, ['tolerated'])

    _, r = self.anagrams2.get_anagrams("tolerates")
    self.assertEqual(r, ['tolerates'])

    _, r = self.anagrams2.get_anagrams("tolerating")
    self.assertEqual(r, ['tolerating'])

    _, r = self.anagrams2.get_anagrams("toleration")
    self.assertEqual(r, ['toleration'])

    _, r = self.anagrams2.get_anagrams("toll")
    self.assertEqual(r, ['toll'])

    _, r = self.anagrams2.get_anagrams("tolled")
    self.assertEqual(r, ['tolled'])

    _, r = self.anagrams2.get_anagrams("tolley")
    self.assertEqual(r, ['tolley'])

    _, r = self.anagrams2.get_anagrams("tolls")
    self.assertEqual(r, ['tolls'])

    _, r = self.anagrams2.get_anagrams("tolstoy")
    self.assertEqual(r, ['tolstoy'])

    _, r = self.anagrams2.get_anagrams("tom")
    self.assertEqual(r, ['tom'])

    _, r = self.anagrams2.get_anagrams("tomahawk")
    self.assertEqual(r, ['tomahawk'])

    _, r = self.anagrams2.get_anagrams("tomahawks")
    self.assertEqual(r, ['tomahawks'])

    _, r = self.anagrams2.get_anagrams("tomato")
    self.assertEqual(r, ['tomato'])

    _, r = self.anagrams2.get_anagrams("tomatoes")
    self.assertEqual(r, ['tomatoes'])

    _, r = self.anagrams2.get_anagrams("tomb")
    self.assertEqual(r, ['tomb'])

    _, r = self.anagrams2.get_anagrams("tombigbee")
    self.assertEqual(r, ['tombigbee'])

    _, r = self.anagrams2.get_anagrams("tombs")
    self.assertEqual(r, ['tombs'])

    _, r = self.anagrams2.get_anagrams("tomlinson")
    self.assertEqual(r, ['tomlinson'])

    _, r = self.anagrams2.get_anagrams("tommie")
    self.assertEqual(r, ['tommie'])

    _, r = self.anagrams2.get_anagrams("tomography")
    self.assertEqual(r, ['tomography'])

    _, r = self.anagrams2.get_anagrams("tomorrow")
    self.assertEqual(r, ['tomorrow'])

    _, r = self.anagrams2.get_anagrams("tomorrows")
    self.assertEqual(r, ['tomorrows'])

    _, r = self.anagrams2.get_anagrams("tompkins")
    self.assertEqual(r, ['tompkins'])

    _, r = self.anagrams2.get_anagrams("ton")
    self.assertEqual(r, ['not', 'ton'])

    _, r = self.anagrams2.get_anagrams("tone")
    self.assertEqual(r, ['note', 'tone'])

    _, r = self.anagrams2.get_anagrams("toned")
    self.assertEqual(r, ['noted', 'toned'])

    _, r = self.anagrams2.get_anagrams("toner")
    self.assertEqual(r, ['notre', 'tenor', 'toner'])

    _, r = self.anagrams2.get_anagrams("tones")
    self.assertEqual(r, ['notes', 'onset', 'stone', 'tones'])

    _, r = self.anagrams2.get_anagrams("tongs")
    self.assertEqual(r, ['tongs'])

    _, r = self.anagrams2.get_anagrams("tongue")
    self.assertEqual(r, ['tongue'])

    _, r = self.anagrams2.get_anagrams("tongued")
    self.assertEqual(r, ['tongued'])

    _, r = self.anagrams2.get_anagrams("tongues")
    self.assertEqual(r, ['tongues'])

    _, r = self.anagrams2.get_anagrams("toni")
    self.assertEqual(r, ['into', 'toni'])

    _, r = self.anagrams2.get_anagrams("tonic")
    self.assertEqual(r, ['tonic'])

    _, r = self.anagrams2.get_anagrams("tonics")
    self.assertEqual(r, ['tonics'])

    _, r = self.anagrams2.get_anagrams("tonight")
    self.assertEqual(r, ['tonight'])

    _, r = self.anagrams2.get_anagrams("toning")
    self.assertEqual(r, ['noting', 'toning'])

    _, r = self.anagrams2.get_anagrams("tonio")
    self.assertEqual(r, ['tonio'])

    _, r = self.anagrams2.get_anagrams("tonnage")
    self.assertEqual(r, ['tonnage'])

    _, r = self.anagrams2.get_anagrams("tons")
    self.assertEqual(r, ['tons'])

    _, r = self.anagrams2.get_anagrams("tonsil")
    self.assertEqual(r, ['liston', 'tonsil'])

    _, r = self.anagrams2.get_anagrams("too")
    self.assertEqual(r, ['too'])

    _, r = self.anagrams2.get_anagrams("took")
    self.assertEqual(r, ['took'])

    _, r = self.anagrams2.get_anagrams("tool")
    self.assertEqual(r, ['loot', 'tool'])

    _, r = self.anagrams2.get_anagrams("tooled")
    self.assertEqual(r, ['looted', 'toledo', 'tooled'])

    _, r = self.anagrams2.get_anagrams("tooler")
    self.assertEqual(r, ['looter', 'tooler'])

    _, r = self.anagrams2.get_anagrams("toolers")
    self.assertEqual(r, ['toolers'])

    _, r = self.anagrams2.get_anagrams("tooling")
    self.assertEqual(r, ['looting', 'tooling'])

    _, r = self.anagrams2.get_anagrams("tools")
    self.assertEqual(r, ['loots', 'stool', 'tools'])

    _, r = self.anagrams2.get_anagrams("toomey")
    self.assertEqual(r, ['toomey'])

    _, r = self.anagrams2.get_anagrams("tooth")
    self.assertEqual(r, ['tooth'])

    _, r = self.anagrams2.get_anagrams("toothbrush")
    self.assertEqual(r, ['toothbrush'])

    _, r = self.anagrams2.get_anagrams("toothbrushes")
    self.assertEqual(r, ['toothbrushes'])

    _, r = self.anagrams2.get_anagrams("toothpaste")
    self.assertEqual(r, ['toothpaste'])

    _, r = self.anagrams2.get_anagrams("toothpick")
    self.assertEqual(r, ['toothpick'])

    _, r = self.anagrams2.get_anagrams("toothpicks")
    self.assertEqual(r, ['toothpicks'])

    _, r = self.anagrams2.get_anagrams("top")
    self.assertEqual(r, ['opt', 'pot', 'top'])

    _, r = self.anagrams2.get_anagrams("topeka")
    self.assertEqual(r, ['topeka'])

    _, r = self.anagrams2.get_anagrams("toper")
    self.assertEqual(r, ['porte', 'toper'])

    _, r = self.anagrams2.get_anagrams("topic")
    self.assertEqual(r, ['optic', 'topic'])

    _, r = self.anagrams2.get_anagrams("topical")
    self.assertEqual(r, ['capitol', 'optical', 'topical'])

    _, r = self.anagrams2.get_anagrams("topically")
    self.assertEqual(r, ['optically', 'topically'])

    _, r = self.anagrams2.get_anagrams("topics")
    self.assertEqual(r, ['optics', 'topics'])

    _, r = self.anagrams2.get_anagrams("topmost")
    self.assertEqual(r, ['topmost'])

    _, r = self.anagrams2.get_anagrams("topography")
    self.assertEqual(r, ['topography'])

    _, r = self.anagrams2.get_anagrams("topological")
    self.assertEqual(r, ['topological'])

    _, r = self.anagrams2.get_anagrams("topologies")
    self.assertEqual(r, ['topologies'])

    _, r = self.anagrams2.get_anagrams("topology")
    self.assertEqual(r, ['topology'])

    _, r = self.anagrams2.get_anagrams("topple")
    self.assertEqual(r, ['topple'])

    _, r = self.anagrams2.get_anagrams("toppled")
    self.assertEqual(r, ['toppled'])

    _, r = self.anagrams2.get_anagrams("topples")
    self.assertEqual(r, ['topples'])

    _, r = self.anagrams2.get_anagrams("toppling")
    self.assertEqual(r, ['toppling'])

    _, r = self.anagrams2.get_anagrams("tops")
    self.assertEqual(r, ['opts', 'post', 'pots', 'spot', 'stop', 'tops'])

    _, r = self.anagrams2.get_anagrams("topsy")
    self.assertEqual(r, ['topsy'])

    _, r = self.anagrams2.get_anagrams("torah")
    self.assertEqual(r, ['torah'])

    _, r = self.anagrams2.get_anagrams("torch")
    self.assertEqual(r, ['torch'])

    _, r = self.anagrams2.get_anagrams("torches")
    self.assertEqual(r, ['torches'])

    _, r = self.anagrams2.get_anagrams("tore")
    self.assertEqual(r, ['tore'])

    _, r = self.anagrams2.get_anagrams("tories")
    self.assertEqual(r, ['sortie', 'tories'])

    _, r = self.anagrams2.get_anagrams("torment")
    self.assertEqual(r, ['torment'])

    _, r = self.anagrams2.get_anagrams("tormented")
    self.assertEqual(r, ['tormented'])

    _, r = self.anagrams2.get_anagrams("tormenter")
    self.assertEqual(r, ['tormenter'])

    _, r = self.anagrams2.get_anagrams("tormenters")
    self.assertEqual(r, ['tormenters'])

    _, r = self.anagrams2.get_anagrams("tormenting")
    self.assertEqual(r, ['tormenting'])

    _, r = self.anagrams2.get_anagrams("torn")
    self.assertEqual(r, ['torn'])

    _, r = self.anagrams2.get_anagrams("tornado")
    self.assertEqual(r, ['tornado'])

    _, r = self.anagrams2.get_anagrams("tornadoes")
    self.assertEqual(r, ['tornadoes'])

    _, r = self.anagrams2.get_anagrams("toronto")
    self.assertEqual(r, ['toronto'])

    _, r = self.anagrams2.get_anagrams("torpedo")
    self.assertEqual(r, ['torpedo'])

    _, r = self.anagrams2.get_anagrams("torpedoes")
    self.assertEqual(r, ['torpedoes'])

    _, r = self.anagrams2.get_anagrams("torque")
    self.assertEqual(r, ['torque'])

    _, r = self.anagrams2.get_anagrams("torquemada")
    self.assertEqual(r, ['torquemada'])

    _, r = self.anagrams2.get_anagrams("torrance")
    self.assertEqual(r, ['torrance'])

    _, r = self.anagrams2.get_anagrams("torrent")
    self.assertEqual(r, ['torrent'])

    _, r = self.anagrams2.get_anagrams("torrents")
    self.assertEqual(r, ['torrents'])

    _, r = self.anagrams2.get_anagrams("torrid")
    self.assertEqual(r, ['torrid'])

    _, r = self.anagrams2.get_anagrams("tortoise")
    self.assertEqual(r, ['tortoise'])

    _, r = self.anagrams2.get_anagrams("tortoises")
    self.assertEqual(r, ['tortoises'])

    _, r = self.anagrams2.get_anagrams("torture")
    self.assertEqual(r, ['torture'])

    _, r = self.anagrams2.get_anagrams("tortured")
    self.assertEqual(r, ['tortured'])

    _, r = self.anagrams2.get_anagrams("torturer")
    self.assertEqual(r, ['torturer'])

    _, r = self.anagrams2.get_anagrams("torturers")
    self.assertEqual(r, ['torturers'])

    _, r = self.anagrams2.get_anagrams("tortures")
    self.assertEqual(r, ['tortures'])

    _, r = self.anagrams2.get_anagrams("torturing")
    self.assertEqual(r, ['torturing'])

    _, r = self.anagrams2.get_anagrams("torus")
    self.assertEqual(r, ['torus', 'tours'])

    _, r = self.anagrams2.get_anagrams("toruses")
    self.assertEqual(r, ['sourest', 'toruses'])

    _, r = self.anagrams2.get_anagrams("tory")
    self.assertEqual(r, ['tory', 'troy'])

    _, r = self.anagrams2.get_anagrams("toryize")
    self.assertEqual(r, ['toryize'])

    _, r = self.anagrams2.get_anagrams("toryizes")
    self.assertEqual(r, ['toryizes'])

    _, r = self.anagrams2.get_anagrams("tosca")
    self.assertEqual(r, ['ascot', 'coast', 'coats', 'costa', 'tosca'])

    _, r = self.anagrams2.get_anagrams("toscanini")
    self.assertEqual(r, ['toscanini'])

    _, r = self.anagrams2.get_anagrams("toshiba")
    self.assertEqual(r, ['toshiba'])

    _, r = self.anagrams2.get_anagrams("toss")
    self.assertEqual(r, ['toss'])

    _, r = self.anagrams2.get_anagrams("tossed")
    self.assertEqual(r, ['tossed'])

    _, r = self.anagrams2.get_anagrams("tosses")
    self.assertEqual(r, ['tosses'])

    _, r = self.anagrams2.get_anagrams("tossing")
    self.assertEqual(r, ['tossing'])

    _, r = self.anagrams2.get_anagrams("total")
    self.assertEqual(r, ['total'])

    _, r = self.anagrams2.get_anagrams("totaled")
    self.assertEqual(r, ['totaled'])

    _, r = self.anagrams2.get_anagrams("totaling")
    self.assertEqual(r, ['totaling'])

    _, r = self.anagrams2.get_anagrams("totalities")
    self.assertEqual(r, ['totalities'])

    _, r = self.anagrams2.get_anagrams("totality")
    self.assertEqual(r, ['totality'])

    _, r = self.anagrams2.get_anagrams("totalled")
    self.assertEqual(r, ['allotted', 'totalled'])

    _, r = self.anagrams2.get_anagrams("totaller")
    self.assertEqual(r, ['allotter', 'totaller'])

    _, r = self.anagrams2.get_anagrams("totallers")
    self.assertEqual(r, ['totallers'])

    _, r = self.anagrams2.get_anagrams("totalling")
    self.assertEqual(r, ['allotting', 'totalling'])

    _, r = self.anagrams2.get_anagrams("totally")
    self.assertEqual(r, ['totally'])

    _, r = self.anagrams2.get_anagrams("totals")
    self.assertEqual(r, ['totals'])

    _, r = self.anagrams2.get_anagrams("toto")
    self.assertEqual(r, ['otto', 'toto'])

    _, r = self.anagrams2.get_anagrams("totter")
    self.assertEqual(r, ['totter'])

    _, r = self.anagrams2.get_anagrams("tottered")
    self.assertEqual(r, ['tottered'])

    _, r = self.anagrams2.get_anagrams("tottering")
    self.assertEqual(r, ['tottering'])

    _, r = self.anagrams2.get_anagrams("totters")
    self.assertEqual(r, ['totters'])

    _, r = self.anagrams2.get_anagrams("touch")
    self.assertEqual(r, ['touch'])

    _, r = self.anagrams2.get_anagrams("touchable")
    self.assertEqual(r, ['touchable'])

    _, r = self.anagrams2.get_anagrams("touched")
    self.assertEqual(r, ['touched'])

    _, r = self.anagrams2.get_anagrams("touches")
    self.assertEqual(r, ['touches'])

    _, r = self.anagrams2.get_anagrams("touchier")
    self.assertEqual(r, ['touchier'])

    _, r = self.anagrams2.get_anagrams("touchiest")
    self.assertEqual(r, ['touchiest'])

    _, r = self.anagrams2.get_anagrams("touchily")
    self.assertEqual(r, ['touchily'])

    _, r = self.anagrams2.get_anagrams("touchiness")
    self.assertEqual(r, ['touchiness'])

    _, r = self.anagrams2.get_anagrams("touching")
    self.assertEqual(r, ['touching'])

    _, r = self.anagrams2.get_anagrams("touchingly")
    self.assertEqual(r, ['touchingly'])

    _, r = self.anagrams2.get_anagrams("touchy")
    self.assertEqual(r, ['touchy'])

    _, r = self.anagrams2.get_anagrams("tough")
    self.assertEqual(r, ['ought', 'tough'])

    _, r = self.anagrams2.get_anagrams("toughen")
    self.assertEqual(r, ['toughen'])

    _, r = self.anagrams2.get_anagrams("tougher")
    self.assertEqual(r, ['tougher'])

    _, r = self.anagrams2.get_anagrams("toughest")
    self.assertEqual(r, ['toughest'])

    _, r = self.anagrams2.get_anagrams("toughly")
    self.assertEqual(r, ['toughly'])

    _, r = self.anagrams2.get_anagrams("toughness")
    self.assertEqual(r, ['toughness'])

    _, r = self.anagrams2.get_anagrams("toulouse")
    self.assertEqual(r, ['toulouse'])

    _, r = self.anagrams2.get_anagrams("tour")
    self.assertEqual(r, ['rout', 'tour'])

    _, r = self.anagrams2.get_anagrams("toured")
    self.assertEqual(r, ['detour', 'routed', 'toured'])

    _, r = self.anagrams2.get_anagrams("touring")
    self.assertEqual(r, ['routing', 'touring'])

    _, r = self.anagrams2.get_anagrams("tourist")
    self.assertEqual(r, ['tourist'])

    _, r = self.anagrams2.get_anagrams("tourists")
    self.assertEqual(r, ['tourists'])

    _, r = self.anagrams2.get_anagrams("tournament")
    self.assertEqual(r, ['tournament'])

    _, r = self.anagrams2.get_anagrams("tournaments")
    self.assertEqual(r, ['tournaments'])

    _, r = self.anagrams2.get_anagrams("tours")
    self.assertEqual(r, ['torus', 'tours'])

    _, r = self.anagrams2.get_anagrams("tow")
    self.assertEqual(r, ['tow', 'two'])

    _, r = self.anagrams2.get_anagrams("toward")
    self.assertEqual(r, ['toward'])

    _, r = self.anagrams2.get_anagrams("towards")
    self.assertEqual(r, ['towards'])

    _, r = self.anagrams2.get_anagrams("towed")
    self.assertEqual(r, ['towed'])

    _, r = self.anagrams2.get_anagrams("towel")
    self.assertEqual(r, ['towel'])

    _, r = self.anagrams2.get_anagrams("toweling")
    self.assertEqual(r, ['toweling'])

    _, r = self.anagrams2.get_anagrams("towelled")
    self.assertEqual(r, ['towelled'])

    _, r = self.anagrams2.get_anagrams("towelling")
    self.assertEqual(r, ['towelling'])

    _, r = self.anagrams2.get_anagrams("towels")
    self.assertEqual(r, ['lowest', 'towels'])

    _, r = self.anagrams2.get_anagrams("tower")
    self.assertEqual(r, ['tower', 'wrote'])

    _, r = self.anagrams2.get_anagrams("towered")
    self.assertEqual(r, ['towered'])

    _, r = self.anagrams2.get_anagrams("towering")
    self.assertEqual(r, ['towering'])

    _, r = self.anagrams2.get_anagrams("towers")
    self.assertEqual(r, ['towers'])

    _, r = self.anagrams2.get_anagrams("town")
    self.assertEqual(r, ['town', 'wont'])

    _, r = self.anagrams2.get_anagrams("townley")
    self.assertEqual(r, ['townley'])

    _, r = self.anagrams2.get_anagrams("towns")
    self.assertEqual(r, ['towns'])

    _, r = self.anagrams2.get_anagrams("townsend")
    self.assertEqual(r, ['townsend'])

    _, r = self.anagrams2.get_anagrams("township")
    self.assertEqual(r, ['township'])

    _, r = self.anagrams2.get_anagrams("townships")
    self.assertEqual(r, ['townships'])

    _, r = self.anagrams2.get_anagrams("towsley")
    self.assertEqual(r, ['towsley'])

    _, r = self.anagrams2.get_anagrams("toy")
    self.assertEqual(r, ['toy'])

    _, r = self.anagrams2.get_anagrams("toyed")
    self.assertEqual(r, ['toyed'])

    _, r = self.anagrams2.get_anagrams("toying")
    self.assertEqual(r, ['toying'])

    _, r = self.anagrams2.get_anagrams("toynbee")
    self.assertEqual(r, ['toynbee'])

    _, r = self.anagrams2.get_anagrams("toyota")
    self.assertEqual(r, ['toyota'])

    _, r = self.anagrams2.get_anagrams("toys")
    self.assertEqual(r, ['toys', 'yost'])

    _, r = self.anagrams2.get_anagrams("trace")
    self.assertEqual(r, ['caret', 'cater', 'crate', 'react', 'recta', 'trace'])

    _, r = self.anagrams2.get_anagrams("traceable")
    self.assertEqual(r, ['traceable'])

    _, r = self.anagrams2.get_anagrams("traced")
    self.assertEqual(r, ['carted', 'traced'])

    _, r = self.anagrams2.get_anagrams("tracer")
    self.assertEqual(r, ['carter', 'crater', 'tracer'])

    _, r = self.anagrams2.get_anagrams("tracers")
    self.assertEqual(r, ['carters', 'craters', 'tracers'])

    _, r = self.anagrams2.get_anagrams("traces")
    self.assertEqual(r, ['caster', 'caters', 'crates', 'reacts', 'recast', 'traces'])

    _, r = self.anagrams2.get_anagrams("tracing")
    self.assertEqual(r, ['carting', 'tracing'])

    _, r = self.anagrams2.get_anagrams("tracings")
    self.assertEqual(r, ['tracings'])

    _, r = self.anagrams2.get_anagrams("track")
    self.assertEqual(r, ['track'])

    _, r = self.anagrams2.get_anagrams("tracked")
    self.assertEqual(r, ['tracked'])

    _, r = self.anagrams2.get_anagrams("tracker")
    self.assertEqual(r, ['tracker'])

    _, r = self.anagrams2.get_anagrams("trackers")
    self.assertEqual(r, ['trackers'])

    _, r = self.anagrams2.get_anagrams("tracking")
    self.assertEqual(r, ['tracking'])

    _, r = self.anagrams2.get_anagrams("tracks")
    self.assertEqual(r, ['tracks'])

    _, r = self.anagrams2.get_anagrams("tract")
    self.assertEqual(r, ['tract'])

    _, r = self.anagrams2.get_anagrams("tractability")
    self.assertEqual(r, ['tractability'])

    _, r = self.anagrams2.get_anagrams("tractable")
    self.assertEqual(r, ['tractable'])

    _, r = self.anagrams2.get_anagrams("tractarians")
    self.assertEqual(r, ['tractarians'])

    _, r = self.anagrams2.get_anagrams("tractive")
    self.assertEqual(r, ['tractive'])

    _, r = self.anagrams2.get_anagrams("tractor")
    self.assertEqual(r, ['tractor'])

    _, r = self.anagrams2.get_anagrams("tractors")
    self.assertEqual(r, ['tractors'])

    _, r = self.anagrams2.get_anagrams("tracts")
    self.assertEqual(r, ['tracts'])

    _, r = self.anagrams2.get_anagrams("tracy")
    self.assertEqual(r, ['carty', 'tracy'])

    _, r = self.anagrams2.get_anagrams("trade")
    self.assertEqual(r, ['dater', 'rated', 'trade', 'tread'])

    _, r = self.anagrams2.get_anagrams("traded")
    self.assertEqual(r, ['darted', 'traded'])

    _, r = self.anagrams2.get_anagrams("trademark")
    self.assertEqual(r, ['trademark'])

    _, r = self.anagrams2.get_anagrams("trademarks")
    self.assertEqual(r, ['trademarks'])

    _, r = self.anagrams2.get_anagrams("tradeoff")
    self.assertEqual(r, ['tradeoff'])

    _, r = self.anagrams2.get_anagrams("tradeoffs")
    self.assertEqual(r, ['tradeoffs'])

    _, r = self.anagrams2.get_anagrams("trader")
    self.assertEqual(r, ['darter', 'retard', 'trader'])

    _, r = self.anagrams2.get_anagrams("traders")
    self.assertEqual(r, ['starred', 'traders'])

    _, r = self.anagrams2.get_anagrams("trades")
    self.assertEqual(r, ['stared', 'trades', 'treads'])

    _, r = self.anagrams2.get_anagrams("tradesman")
    self.assertEqual(r, ['tradesman'])

    _, r = self.anagrams2.get_anagrams("trading")
    self.assertEqual(r, ['darting', 'trading'])

    _, r = self.anagrams2.get_anagrams("tradition")
    self.assertEqual(r, ['tradition'])

    _, r = self.anagrams2.get_anagrams("traditional")
    self.assertEqual(r, ['traditional'])

    _, r = self.anagrams2.get_anagrams("traditionally")
    self.assertEqual(r, ['traditionally'])

    _, r = self.anagrams2.get_anagrams("traditions")
    self.assertEqual(r, ['traditions'])

    _, r = self.anagrams2.get_anagrams("traffic")
    self.assertEqual(r, ['traffic'])

    _, r = self.anagrams2.get_anagrams("trafficked")
    self.assertEqual(r, ['trafficked'])

    _, r = self.anagrams2.get_anagrams("trafficker")
    self.assertEqual(r, ['trafficker'])

    _, r = self.anagrams2.get_anagrams("traffickers")
    self.assertEqual(r, ['traffickers'])

    _, r = self.anagrams2.get_anagrams("trafficking")
    self.assertEqual(r, ['trafficking'])

    _, r = self.anagrams2.get_anagrams("traffics")
    self.assertEqual(r, ['traffics'])

    _, r = self.anagrams2.get_anagrams("tragedies")
    self.assertEqual(r, ['tragedies'])

    _, r = self.anagrams2.get_anagrams("tragedy")
    self.assertEqual(r, ['tragedy'])

    _, r = self.anagrams2.get_anagrams("tragic")
    self.assertEqual(r, ['tragic'])

    _, r = self.anagrams2.get_anagrams("tragically")
    self.assertEqual(r, ['tragically'])

    _, r = self.anagrams2.get_anagrams("trail")
    self.assertEqual(r, ['trail', 'trial'])

    _, r = self.anagrams2.get_anagrams("trailed")
    self.assertEqual(r, ['trailed'])

    _, r = self.anagrams2.get_anagrams("trailer")
    self.assertEqual(r, ['trailer'])

    _, r = self.anagrams2.get_anagrams("trailers")
    self.assertEqual(r, ['trailers'])

    _, r = self.anagrams2.get_anagrams("trailing")
    self.assertEqual(r, ['trailing'])

    _, r = self.anagrams2.get_anagrams("trailings")
    self.assertEqual(r, ['trailings'])

    _, r = self.anagrams2.get_anagrams("trails")
    self.assertEqual(r, ['trails', 'trials'])

    _, r = self.anagrams2.get_anagrams("train")
    self.assertEqual(r, ['train'])

    _, r = self.anagrams2.get_anagrams("trained")
    self.assertEqual(r, ['trained'])

    _, r = self.anagrams2.get_anagrams("trainee")
    self.assertEqual(r, ['trainee'])

    _, r = self.anagrams2.get_anagrams("trainees")
    self.assertEqual(r, ['trainees'])

    _, r = self.anagrams2.get_anagrams("trainer")
    self.assertEqual(r, ['retrain', 'terrain', 'trainer'])

    _, r = self.anagrams2.get_anagrams("trainers")
    self.assertEqual(r, ['restrain', 'retrains', 'strainer', 'terrains', 'trainers'])

    _, r = self.anagrams2.get_anagrams("training")
    self.assertEqual(r, ['training'])

    _, r = self.anagrams2.get_anagrams("trains")
    self.assertEqual(r, ['strain', 'trains'])

    _, r = self.anagrams2.get_anagrams("trait")
    self.assertEqual(r, ['trait'])

    _, r = self.anagrams2.get_anagrams("traitor")
    self.assertEqual(r, ['traitor'])

    _, r = self.anagrams2.get_anagrams("traitors")
    self.assertEqual(r, ['traitors'])

    _, r = self.anagrams2.get_anagrams("traits")
    self.assertEqual(r, ['artist', 'strait', 'traits'])

    _, r = self.anagrams2.get_anagrams("trajectories")
    self.assertEqual(r, ['trajectories'])

    _, r = self.anagrams2.get_anagrams("trajectory")
    self.assertEqual(r, ['trajectory'])

    _, r = self.anagrams2.get_anagrams("tramp")
    self.assertEqual(r, ['tramp'])

    _, r = self.anagrams2.get_anagrams("tramped")
    self.assertEqual(r, ['tramped'])

    _, r = self.anagrams2.get_anagrams("tramping")
    self.assertEqual(r, ['tramping'])

    _, r = self.anagrams2.get_anagrams("trample")
    self.assertEqual(r, ['trample'])

    _, r = self.anagrams2.get_anagrams("trampled")
    self.assertEqual(r, ['trampled'])

    _, r = self.anagrams2.get_anagrams("trampler")
    self.assertEqual(r, ['trampler'])

    _, r = self.anagrams2.get_anagrams("tramples")
    self.assertEqual(r, ['tramples'])

    _, r = self.anagrams2.get_anagrams("trampling")
    self.assertEqual(r, ['trampling'])

    _, r = self.anagrams2.get_anagrams("tramps")
    self.assertEqual(r, ['tramps'])

    _, r = self.anagrams2.get_anagrams("trance")
    self.assertEqual(r, ['cretan', 'nectar', 'recant', 'trance'])

    _, r = self.anagrams2.get_anagrams("trances")
    self.assertEqual(r, ['trances'])

    _, r = self.anagrams2.get_anagrams("tranquil")
    self.assertEqual(r, ['tranquil'])

    _, r = self.anagrams2.get_anagrams("tranquility")
    self.assertEqual(r, ['tranquility'])

    _, r = self.anagrams2.get_anagrams("tranquilly")
    self.assertEqual(r, ['tranquilly'])

    _, r = self.anagrams2.get_anagrams("transact")
    self.assertEqual(r, ['transact'])

    _, r = self.anagrams2.get_anagrams("transaction")
    self.assertEqual(r, ['transaction'])

    _, r = self.anagrams2.get_anagrams("transactions")
    self.assertEqual(r, ['transactions'])

    _, r = self.anagrams2.get_anagrams("transatlantic")
    self.assertEqual(r, ['transatlantic'])

    _, r = self.anagrams2.get_anagrams("transceive")
    self.assertEqual(r, ['transceive'])

    _, r = self.anagrams2.get_anagrams("transceiver")
    self.assertEqual(r, ['transceiver'])

    _, r = self.anagrams2.get_anagrams("transceivers")
    self.assertEqual(r, ['transceivers'])

    _, r = self.anagrams2.get_anagrams("transcend")
    self.assertEqual(r, ['transcend'])

    _, r = self.anagrams2.get_anagrams("transcended")
    self.assertEqual(r, ['transcended'])

    _, r = self.anagrams2.get_anagrams("transcendent")
    self.assertEqual(r, ['transcendent'])

    _, r = self.anagrams2.get_anagrams("transcending")
    self.assertEqual(r, ['transcending'])

    _, r = self.anagrams2.get_anagrams("transcends")
    self.assertEqual(r, ['transcends'])

    _, r = self.anagrams2.get_anagrams("transcontinental")
    self.assertEqual(r, ['transcontinental'])

    _, r = self.anagrams2.get_anagrams("transcribe")
    self.assertEqual(r, ['transcribe'])

    _, r = self.anagrams2.get_anagrams("transcribed")
    self.assertEqual(r, ['transcribed'])

    _, r = self.anagrams2.get_anagrams("transcriber")
    self.assertEqual(r, ['transcriber'])

    _, r = self.anagrams2.get_anagrams("transcribers")
    self.assertEqual(r, ['transcribers'])

    _, r = self.anagrams2.get_anagrams("transcribes")
    self.assertEqual(r, ['transcribes'])

    _, r = self.anagrams2.get_anagrams("transcribing")
    self.assertEqual(r, ['transcribing'])

    _, r = self.anagrams2.get_anagrams("transcript")
    self.assertEqual(r, ['transcript'])

    _, r = self.anagrams2.get_anagrams("transcription")
    self.assertEqual(r, ['transcription'])

    _, r = self.anagrams2.get_anagrams("transcriptions")
    self.assertEqual(r, ['transcriptions'])

    _, r = self.anagrams2.get_anagrams("transcripts")
    self.assertEqual(r, ['transcripts'])

    _, r = self.anagrams2.get_anagrams("transfer")
    self.assertEqual(r, ['transfer'])

    _, r = self.anagrams2.get_anagrams("transferability")
    self.assertEqual(r, ['transferability'])

    _, r = self.anagrams2.get_anagrams("transferable")
    self.assertEqual(r, ['transferable'])

    _, r = self.anagrams2.get_anagrams("transferal")
    self.assertEqual(r, ['transferal'])

    _, r = self.anagrams2.get_anagrams("transferals")
    self.assertEqual(r, ['transferals'])

    _, r = self.anagrams2.get_anagrams("transference")
    self.assertEqual(r, ['transference'])

    _, r = self.anagrams2.get_anagrams("transferred")
    self.assertEqual(r, ['transferred'])

    _, r = self.anagrams2.get_anagrams("transferrer")
    self.assertEqual(r, ['transferrer'])

    _, r = self.anagrams2.get_anagrams("transferrers")
    self.assertEqual(r, ['transferrers'])

    _, r = self.anagrams2.get_anagrams("transferring")
    self.assertEqual(r, ['transferring'])

    _, r = self.anagrams2.get_anagrams("transfers")
    self.assertEqual(r, ['transfers'])

    _, r = self.anagrams2.get_anagrams("transfinite")
    self.assertEqual(r, ['transfinite'])

    _, r = self.anagrams2.get_anagrams("transform")
    self.assertEqual(r, ['transform'])

    _, r = self.anagrams2.get_anagrams("transformable")
    self.assertEqual(r, ['transformable'])

    _, r = self.anagrams2.get_anagrams("transformation")
    self.assertEqual(r, ['transformation'])

    _, r = self.anagrams2.get_anagrams("transformational")
    self.assertEqual(r, ['transformational'])

    _, r = self.anagrams2.get_anagrams("transformations")
    self.assertEqual(r, ['transformations'])

    _, r = self.anagrams2.get_anagrams("transformed")
    self.assertEqual(r, ['transformed'])

    _, r = self.anagrams2.get_anagrams("transformer")
    self.assertEqual(r, ['transformer'])

    _, r = self.anagrams2.get_anagrams("transformers")
    self.assertEqual(r, ['transformers'])

    _, r = self.anagrams2.get_anagrams("transforming")
    self.assertEqual(r, ['transforming'])

    _, r = self.anagrams2.get_anagrams("transforms")
    self.assertEqual(r, ['transforms'])

    _, r = self.anagrams2.get_anagrams("transgress")
    self.assertEqual(r, ['transgress'])

    _, r = self.anagrams2.get_anagrams("transgressed")
    self.assertEqual(r, ['transgressed'])

    _, r = self.anagrams2.get_anagrams("transgression")
    self.assertEqual(r, ['transgression'])

    _, r = self.anagrams2.get_anagrams("transgressions")
    self.assertEqual(r, ['transgressions'])

    _, r = self.anagrams2.get_anagrams("transience")
    self.assertEqual(r, ['transience'])

    _, r = self.anagrams2.get_anagrams("transiency")
    self.assertEqual(r, ['transiency'])

    _, r = self.anagrams2.get_anagrams("transient")
    self.assertEqual(r, ['instanter', 'transient'])

    _, r = self.anagrams2.get_anagrams("transiently")
    self.assertEqual(r, ['transiently'])

    _, r = self.anagrams2.get_anagrams("transients")
    self.assertEqual(r, ['transients'])

    _, r = self.anagrams2.get_anagrams("transistor")
    self.assertEqual(r, ['transistor'])

    _, r = self.anagrams2.get_anagrams("transistorize")
    self.assertEqual(r, ['transistorize'])

    _, r = self.anagrams2.get_anagrams("transistorized")
    self.assertEqual(r, ['transistorized'])

    _, r = self.anagrams2.get_anagrams("transistorizing")
    self.assertEqual(r, ['transistorizing'])

    _, r = self.anagrams2.get_anagrams("transistors")
    self.assertEqual(r, ['transistors'])

    _, r = self.anagrams2.get_anagrams("transit")
    self.assertEqual(r, ['transit', 'tristan'])

    _, r = self.anagrams2.get_anagrams("transite")
    self.assertEqual(r, ['straiten', 'transite'])

    _, r = self.anagrams2.get_anagrams("transition")
    self.assertEqual(r, ['transition'])

    _, r = self.anagrams2.get_anagrams("transitional")
    self.assertEqual(r, ['transitional'])

    _, r = self.anagrams2.get_anagrams("transitioned")
    self.assertEqual(r, ['transitioned'])

    _, r = self.anagrams2.get_anagrams("transitions")
    self.assertEqual(r, ['transitions'])

    _, r = self.anagrams2.get_anagrams("transitive")
    self.assertEqual(r, ['transitive'])

    _, r = self.anagrams2.get_anagrams("transitively")
    self.assertEqual(r, ['transitively'])

    _, r = self.anagrams2.get_anagrams("transitiveness")
    self.assertEqual(r, ['transitiveness'])

    _, r = self.anagrams2.get_anagrams("transitivity")
    self.assertEqual(r, ['transitivity'])

    _, r = self.anagrams2.get_anagrams("transitory")
    self.assertEqual(r, ['transitory'])

    _, r = self.anagrams2.get_anagrams("translatability")
    self.assertEqual(r, ['translatability'])

    _, r = self.anagrams2.get_anagrams("translatable")
    self.assertEqual(r, ['translatable'])

    _, r = self.anagrams2.get_anagrams("translate")
    self.assertEqual(r, ['translate'])

    _, r = self.anagrams2.get_anagrams("translated")
    self.assertEqual(r, ['translated'])

    _, r = self.anagrams2.get_anagrams("translates")
    self.assertEqual(r, ['translates'])

    _, r = self.anagrams2.get_anagrams("translating")
    self.assertEqual(r, ['translating'])

    _, r = self.anagrams2.get_anagrams("translation")
    self.assertEqual(r, ['translation'])

    _, r = self.anagrams2.get_anagrams("translational")
    self.assertEqual(r, ['translational'])

    _, r = self.anagrams2.get_anagrams("translations")
    self.assertEqual(r, ['translations'])

    _, r = self.anagrams2.get_anagrams("translator")
    self.assertEqual(r, ['translator'])

    _, r = self.anagrams2.get_anagrams("translators")
    self.assertEqual(r, ['translators'])

    _, r = self.anagrams2.get_anagrams("translucent")
    self.assertEqual(r, ['translucent'])

    _, r = self.anagrams2.get_anagrams("transmission")
    self.assertEqual(r, ['transmission'])

    _, r = self.anagrams2.get_anagrams("transmissions")
    self.assertEqual(r, ['transmissions'])

    _, r = self.anagrams2.get_anagrams("transmit")
    self.assertEqual(r, ['transmit'])

    _, r = self.anagrams2.get_anagrams("transmits")
    self.assertEqual(r, ['transmits'])

    _, r = self.anagrams2.get_anagrams("transmittal")
    self.assertEqual(r, ['transmittal'])

    _, r = self.anagrams2.get_anagrams("transmitted")
    self.assertEqual(r, ['transmitted'])

    _, r = self.anagrams2.get_anagrams("transmitter")
    self.assertEqual(r, ['transmitter'])

    _, r = self.anagrams2.get_anagrams("transmitters")
    self.assertEqual(r, ['transmitters'])

    _, r = self.anagrams2.get_anagrams("transmitting")
    self.assertEqual(r, ['transmitting'])

    _, r = self.anagrams2.get_anagrams("transmogrification")
    self.assertEqual(r, ['transmogrification'])

    _, r = self.anagrams2.get_anagrams("transmogrify")
    self.assertEqual(r, ['transmogrify'])

    _, r = self.anagrams2.get_anagrams("transpacific")
    self.assertEqual(r, ['transpacific'])

    _, r = self.anagrams2.get_anagrams("transparencies")
    self.assertEqual(r, ['transparencies'])

    _, r = self.anagrams2.get_anagrams("transparency")
    self.assertEqual(r, ['transparency'])

    _, r = self.anagrams2.get_anagrams("transparent")
    self.assertEqual(r, ['transparent'])

    _, r = self.anagrams2.get_anagrams("transparently")
    self.assertEqual(r, ['transparently'])

    _, r = self.anagrams2.get_anagrams("transpire")
    self.assertEqual(r, ['transpire'])

    _, r = self.anagrams2.get_anagrams("transpired")
    self.assertEqual(r, ['transpired'])

    _, r = self.anagrams2.get_anagrams("transpires")
    self.assertEqual(r, ['transpires'])

    _, r = self.anagrams2.get_anagrams("transpiring")
    self.assertEqual(r, ['transpiring'])

    _, r = self.anagrams2.get_anagrams("transplant")
    self.assertEqual(r, ['transplant'])

    _, r = self.anagrams2.get_anagrams("transplanted")
    self.assertEqual(r, ['transplanted'])

    _, r = self.anagrams2.get_anagrams("transplanting")
    self.assertEqual(r, ['transplanting'])

    _, r = self.anagrams2.get_anagrams("transplants")
    self.assertEqual(r, ['transplants'])

    _, r = self.anagrams2.get_anagrams("transponder")
    self.assertEqual(r, ['transponder'])

    _, r = self.anagrams2.get_anagrams("transponders")
    self.assertEqual(r, ['transponders'])

    _, r = self.anagrams2.get_anagrams("transport")
    self.assertEqual(r, ['transport'])

    _, r = self.anagrams2.get_anagrams("transportability")
    self.assertEqual(r, ['transportability'])

    _, r = self.anagrams2.get_anagrams("transportation")
    self.assertEqual(r, ['transportation'])

    _, r = self.anagrams2.get_anagrams("transported")
    self.assertEqual(r, ['transported'])

    _, r = self.anagrams2.get_anagrams("transporter")
    self.assertEqual(r, ['transporter'])

    _, r = self.anagrams2.get_anagrams("transporters")
    self.assertEqual(r, ['transporters'])

    _, r = self.anagrams2.get_anagrams("transporting")
    self.assertEqual(r, ['transporting'])

    _, r = self.anagrams2.get_anagrams("transports")
    self.assertEqual(r, ['transports'])

    _, r = self.anagrams2.get_anagrams("transpose")
    self.assertEqual(r, ['transpose'])

    _, r = self.anagrams2.get_anagrams("transposed")
    self.assertEqual(r, ['transposed'])

    _, r = self.anagrams2.get_anagrams("transposes")
    self.assertEqual(r, ['transposes'])

    _, r = self.anagrams2.get_anagrams("transposing")
    self.assertEqual(r, ['transposing'])

    _, r = self.anagrams2.get_anagrams("transposition")
    self.assertEqual(r, ['transposition'])

    _, r = self.anagrams2.get_anagrams("transputer")
    self.assertEqual(r, ['transputer'])

    _, r = self.anagrams2.get_anagrams("transvaal")
    self.assertEqual(r, ['transvaal'])

    _, r = self.anagrams2.get_anagrams("transylvania")
    self.assertEqual(r, ['transylvania'])

    _, r = self.anagrams2.get_anagrams("trap")
    self.assertEqual(r, ['part', 'rapt', 'trap'])

    _, r = self.anagrams2.get_anagrams("trapezoid")
    self.assertEqual(r, ['trapezoid'])

    _, r = self.anagrams2.get_anagrams("trapezoidal")
    self.assertEqual(r, ['trapezoidal'])

    _, r = self.anagrams2.get_anagrams("trapezoids")
    self.assertEqual(r, ['trapezoids'])

    _, r = self.anagrams2.get_anagrams("trapped")
    self.assertEqual(r, ['trapped'])

    _, r = self.anagrams2.get_anagrams("trapper")
    self.assertEqual(r, ['trapper'])

    _, r = self.anagrams2.get_anagrams("trappers")
    self.assertEqual(r, ['trappers'])

    _, r = self.anagrams2.get_anagrams("trapping")
    self.assertEqual(r, ['trapping'])

    _, r = self.anagrams2.get_anagrams("trappings")
    self.assertEqual(r, ['trappings'])

    _, r = self.anagrams2.get_anagrams("traps")
    self.assertEqual(r, ['parts', 'strap', 'traps'])

    _, r = self.anagrams2.get_anagrams("trash")
    self.assertEqual(r, ['trash'])

    _, r = self.anagrams2.get_anagrams("trastevere")
    self.assertEqual(r, ['trastevere'])

    _, r = self.anagrams2.get_anagrams("trauma")
    self.assertEqual(r, ['trauma'])

    _, r = self.anagrams2.get_anagrams("traumatic")
    self.assertEqual(r, ['traumatic'])

    _, r = self.anagrams2.get_anagrams("travail")
    self.assertEqual(r, ['travail'])

    _, r = self.anagrams2.get_anagrams("travel")
    self.assertEqual(r, ['travel'])

    _, r = self.anagrams2.get_anagrams("traveled")
    self.assertEqual(r, ['traveled'])

    _, r = self.anagrams2.get_anagrams("traveler")
    self.assertEqual(r, ['traveler'])

    _, r = self.anagrams2.get_anagrams("travelers")
    self.assertEqual(r, ['travelers'])

    _, r = self.anagrams2.get_anagrams("traveling")
    self.assertEqual(r, ['traveling'])

    _, r = self.anagrams2.get_anagrams("travelings")
    self.assertEqual(r, ['travelings'])

    _, r = self.anagrams2.get_anagrams("travels")
    self.assertEqual(r, ['travels'])

    _, r = self.anagrams2.get_anagrams("traversal")
    self.assertEqual(r, ['traversal'])

    _, r = self.anagrams2.get_anagrams("traversals")
    self.assertEqual(r, ['traversals'])

    _, r = self.anagrams2.get_anagrams("traverse")
    self.assertEqual(r, ['traverse'])

    _, r = self.anagrams2.get_anagrams("traversed")
    self.assertEqual(r, ['traversed'])

    _, r = self.anagrams2.get_anagrams("traverses")
    self.assertEqual(r, ['traverses'])

    _, r = self.anagrams2.get_anagrams("traversing")
    self.assertEqual(r, ['traversing'])

    _, r = self.anagrams2.get_anagrams("travesties")
    self.assertEqual(r, ['travesties'])

    _, r = self.anagrams2.get_anagrams("travesty")
    self.assertEqual(r, ['travesty'])

    _, r = self.anagrams2.get_anagrams("travis")
    self.assertEqual(r, ['travis'])

    _, r = self.anagrams2.get_anagrams("tray")
    self.assertEqual(r, ['tray'])

    _, r = self.anagrams2.get_anagrams("trays")
    self.assertEqual(r, ['satyr', 'stray', 'trays'])

    _, r = self.anagrams2.get_anagrams("treacheries")
    self.assertEqual(r, ['treacheries'])

    _, r = self.anagrams2.get_anagrams("treacherous")
    self.assertEqual(r, ['treacherous'])

    _, r = self.anagrams2.get_anagrams("treacherously")
    self.assertEqual(r, ['treacherously'])

    _, r = self.anagrams2.get_anagrams("treachery")
    self.assertEqual(r, ['treachery'])

    _, r = self.anagrams2.get_anagrams("tread")
    self.assertEqual(r, ['dater', 'rated', 'trade', 'tread'])

    _, r = self.anagrams2.get_anagrams("treading")
    self.assertEqual(r, ['gradient', 'treading'])

    _, r = self.anagrams2.get_anagrams("treads")
    self.assertEqual(r, ['stared', 'trades', 'treads'])

    _, r = self.anagrams2.get_anagrams("treadwell")
    self.assertEqual(r, ['treadwell'])

    _, r = self.anagrams2.get_anagrams("treason")
    self.assertEqual(r, ['senator', 'treason'])

    _, r = self.anagrams2.get_anagrams("treasure")
    self.assertEqual(r, ['treasure'])

    _, r = self.anagrams2.get_anagrams("treasured")
    self.assertEqual(r, ['treasured'])

    _, r = self.anagrams2.get_anagrams("treasurer")
    self.assertEqual(r, ['treasurer'])

    _, r = self.anagrams2.get_anagrams("treasures")
    self.assertEqual(r, ['treasures'])

    _, r = self.anagrams2.get_anagrams("treasuries")
    self.assertEqual(r, ['treasuries'])

    _, r = self.anagrams2.get_anagrams("treasuring")
    self.assertEqual(r, ['treasuring'])

    _, r = self.anagrams2.get_anagrams("treasury")
    self.assertEqual(r, ['treasury'])

    _, r = self.anagrams2.get_anagrams("treat")
    self.assertEqual(r, ['treat'])

    _, r = self.anagrams2.get_anagrams("treated")
    self.assertEqual(r, ['treated'])

    _, r = self.anagrams2.get_anagrams("treaties")
    self.assertEqual(r, ['iterates', 'treaties', 'treatise'])

    _, r = self.anagrams2.get_anagrams("treating")
    self.assertEqual(r, ['treating'])

    _, r = self.anagrams2.get_anagrams("treatise")
    self.assertEqual(r, ['iterates', 'treaties', 'treatise'])

    _, r = self.anagrams2.get_anagrams("treatises")
    self.assertEqual(r, ['treatises'])

    _, r = self.anagrams2.get_anagrams("treatment")
    self.assertEqual(r, ['treatment'])

    _, r = self.anagrams2.get_anagrams("treatments")
    self.assertEqual(r, ['treatments'])

    _, r = self.anagrams2.get_anagrams("treats")
    self.assertEqual(r, ['taster', 'treats'])

    _, r = self.anagrams2.get_anagrams("treaty")
    self.assertEqual(r, ['treaty'])

    _, r = self.anagrams2.get_anagrams("treble")
    self.assertEqual(r, ['treble'])

    _, r = self.anagrams2.get_anagrams("tree")
    self.assertEqual(r, ['tree'])

    _, r = self.anagrams2.get_anagrams("trees")
    self.assertEqual(r, ['reset', 'steer', 'trees'])

    _, r = self.anagrams2.get_anagrams("treetop")
    self.assertEqual(r, ['treetop'])

    _, r = self.anagrams2.get_anagrams("treetops")
    self.assertEqual(r, ['treetops'])

    _, r = self.anagrams2.get_anagrams("trek")
    self.assertEqual(r, ['trek'])

    _, r = self.anagrams2.get_anagrams("treks")
    self.assertEqual(r, ['treks'])

    _, r = self.anagrams2.get_anagrams("tremble")
    self.assertEqual(r, ['tremble'])

    _, r = self.anagrams2.get_anagrams("trembled")
    self.assertEqual(r, ['trembled'])

    _, r = self.anagrams2.get_anagrams("trembles")
    self.assertEqual(r, ['trembles'])

    _, r = self.anagrams2.get_anagrams("trembling")
    self.assertEqual(r, ['trembling'])

    _, r = self.anagrams2.get_anagrams("tremendous")
    self.assertEqual(r, ['tremendous'])

    _, r = self.anagrams2.get_anagrams("tremendously")
    self.assertEqual(r, ['tremendously'])

    _, r = self.anagrams2.get_anagrams("tremor")
    self.assertEqual(r, ['tremor'])

    _, r = self.anagrams2.get_anagrams("tremors")
    self.assertEqual(r, ['tremors'])

    _, r = self.anagrams2.get_anagrams("trench")
    self.assertEqual(r, ['trench'])

    _, r = self.anagrams2.get_anagrams("trencher")
    self.assertEqual(r, ['trencher'])

    _, r = self.anagrams2.get_anagrams("trenches")
    self.assertEqual(r, ['trenches'])

    _, r = self.anagrams2.get_anagrams("trend")
    self.assertEqual(r, ['trend'])

    _, r = self.anagrams2.get_anagrams("trending")
    self.assertEqual(r, ['trending'])

    _, r = self.anagrams2.get_anagrams("trends")
    self.assertEqual(r, ['trends'])

    _, r = self.anagrams2.get_anagrams("trenton")
    self.assertEqual(r, ['trenton'])

    _, r = self.anagrams2.get_anagrams("trespass")
    self.assertEqual(r, ['sparsest', 'trespass'])

    _, r = self.anagrams2.get_anagrams("trespassed")
    self.assertEqual(r, ['trespassed'])

    _, r = self.anagrams2.get_anagrams("trespasser")
    self.assertEqual(r, ['trespasser'])

    _, r = self.anagrams2.get_anagrams("trespassers")
    self.assertEqual(r, ['trespassers'])

    _, r = self.anagrams2.get_anagrams("trespasses")
    self.assertEqual(r, ['trespasses'])

    _, r = self.anagrams2.get_anagrams("tress")
    self.assertEqual(r, ['rests', 'tress'])

    _, r = self.anagrams2.get_anagrams("tresses")
    self.assertEqual(r, ['tresses'])

    _, r = self.anagrams2.get_anagrams("trevelyan")
    self.assertEqual(r, ['trevelyan'])

    _, r = self.anagrams2.get_anagrams("trial")
    self.assertEqual(r, ['trail', 'trial'])

    _, r = self.anagrams2.get_anagrams("trials")
    self.assertEqual(r, ['trails', 'trials'])

    _, r = self.anagrams2.get_anagrams("triangle")
    self.assertEqual(r, ['alerting', 'altering', 'integral', 'relating', 'triangle'])

    _, r = self.anagrams2.get_anagrams("triangles")
    self.assertEqual(r, ['integrals', 'triangles'])

    _, r = self.anagrams2.get_anagrams("triangular")
    self.assertEqual(r, ['triangular'])

    _, r = self.anagrams2.get_anagrams("triangularly")
    self.assertEqual(r, ['triangularly'])

    _, r = self.anagrams2.get_anagrams("triangulum")
    self.assertEqual(r, ['triangulum'])

    _, r = self.anagrams2.get_anagrams("trianon")
    self.assertEqual(r, ['trianon'])

    _, r = self.anagrams2.get_anagrams("triassic")
    self.assertEqual(r, ['triassic'])

    _, r = self.anagrams2.get_anagrams("tribal")
    self.assertEqual(r, ['tribal'])

    _, r = self.anagrams2.get_anagrams("tribe")
    self.assertEqual(r, ['biter', 'tiber', 'tribe'])

    _, r = self.anagrams2.get_anagrams("tribes")
    self.assertEqual(r, ['bestir', 'biters', 'tribes'])

    _, r = self.anagrams2.get_anagrams("tribunal")
    self.assertEqual(r, ['tribunal'])

    _, r = self.anagrams2.get_anagrams("tribunals")
    self.assertEqual(r, ['tribunals'])

    _, r = self.anagrams2.get_anagrams("tribune")
    self.assertEqual(r, ['tribune'])

    _, r = self.anagrams2.get_anagrams("tribunes")
    self.assertEqual(r, ['tribunes'])

    _, r = self.anagrams2.get_anagrams("tributary")
    self.assertEqual(r, ['tributary'])

    _, r = self.anagrams2.get_anagrams("tribute")
    self.assertEqual(r, ['tribute'])

    _, r = self.anagrams2.get_anagrams("tributes")
    self.assertEqual(r, ['tributes'])

    _, r = self.anagrams2.get_anagrams("triceratops")
    self.assertEqual(r, ['triceratops'])

    _, r = self.anagrams2.get_anagrams("trichinella")
    self.assertEqual(r, ['trichinella'])

    _, r = self.anagrams2.get_anagrams("trichotomy")
    self.assertEqual(r, ['trichotomy'])

    _, r = self.anagrams2.get_anagrams("trick")
    self.assertEqual(r, ['trick'])

    _, r = self.anagrams2.get_anagrams("tricked")
    self.assertEqual(r, ['tricked'])

    _, r = self.anagrams2.get_anagrams("trickier")
    self.assertEqual(r, ['trickier'])

    _, r = self.anagrams2.get_anagrams("trickiest")
    self.assertEqual(r, ['trickiest'])

    _, r = self.anagrams2.get_anagrams("trickiness")
    self.assertEqual(r, ['trickiness'])

    _, r = self.anagrams2.get_anagrams("tricking")
    self.assertEqual(r, ['tricking'])

    _, r = self.anagrams2.get_anagrams("trickle")
    self.assertEqual(r, ['trickle'])

    _, r = self.anagrams2.get_anagrams("trickled")
    self.assertEqual(r, ['trickled'])

    _, r = self.anagrams2.get_anagrams("trickles")
    self.assertEqual(r, ['trickles'])

    _, r = self.anagrams2.get_anagrams("trickling")
    self.assertEqual(r, ['trickling'])

    _, r = self.anagrams2.get_anagrams("tricks")
    self.assertEqual(r, ['tricks'])

    _, r = self.anagrams2.get_anagrams("tricky")
    self.assertEqual(r, ['tricky'])

    _, r = self.anagrams2.get_anagrams("tried")
    self.assertEqual(r, ['tired', 'tried'])

    _, r = self.anagrams2.get_anagrams("trier")
    self.assertEqual(r, ['trier'])

    _, r = self.anagrams2.get_anagrams("triers")
    self.assertEqual(r, ['triers'])

    _, r = self.anagrams2.get_anagrams("tries")
    self.assertEqual(r, ['rites', 'tiers', 'tires', 'tries'])

    _, r = self.anagrams2.get_anagrams("trifle")
    self.assertEqual(r, ['filter', 'lifter', 'trifle'])

    _, r = self.anagrams2.get_anagrams("trifler")
    self.assertEqual(r, ['trifler'])

    _, r = self.anagrams2.get_anagrams("trifles")
    self.assertEqual(r, ['filters', 'lifters', 'trifles'])

    _, r = self.anagrams2.get_anagrams("trifling")
    self.assertEqual(r, ['flirting', 'trifling'])

    _, r = self.anagrams2.get_anagrams("trigger")
    self.assertEqual(r, ['trigger'])

    _, r = self.anagrams2.get_anagrams("triggered")
    self.assertEqual(r, ['triggered'])

    _, r = self.anagrams2.get_anagrams("triggering")
    self.assertEqual(r, ['triggering'])

    _, r = self.anagrams2.get_anagrams("triggers")
    self.assertEqual(r, ['triggers'])

    _, r = self.anagrams2.get_anagrams("trigonometric")
    self.assertEqual(r, ['trigonometric'])

    _, r = self.anagrams2.get_anagrams("trigonometry")
    self.assertEqual(r, ['trigonometry'])

    _, r = self.anagrams2.get_anagrams("trigram")
    self.assertEqual(r, ['trigram'])

    _, r = self.anagrams2.get_anagrams("trigrams")
    self.assertEqual(r, ['trigrams'])

    _, r = self.anagrams2.get_anagrams("trihedral")
    self.assertEqual(r, ['trihedral'])

    _, r = self.anagrams2.get_anagrams("trilateral")
    self.assertEqual(r, ['trilateral'])

    _, r = self.anagrams2.get_anagrams("trill")
    self.assertEqual(r, ['trill'])

    _, r = self.anagrams2.get_anagrams("trilled")
    self.assertEqual(r, ['trilled'])

    _, r = self.anagrams2.get_anagrams("trillion")
    self.assertEqual(r, ['trillion'])

    _, r = self.anagrams2.get_anagrams("trillions")
    self.assertEqual(r, ['trillions'])

    _, r = self.anagrams2.get_anagrams("trillionth")
    self.assertEqual(r, ['trillionth'])

    _, r = self.anagrams2.get_anagrams("trim")
    self.assertEqual(r, ['trim'])

    _, r = self.anagrams2.get_anagrams("trimble")
    self.assertEqual(r, ['trimble'])

    _, r = self.anagrams2.get_anagrams("trimly")
    self.assertEqual(r, ['trimly'])

    _, r = self.anagrams2.get_anagrams("trimmed")
    self.assertEqual(r, ['trimmed'])

    _, r = self.anagrams2.get_anagrams("trimmer")
    self.assertEqual(r, ['trimmer'])

    _, r = self.anagrams2.get_anagrams("trimmest")
    self.assertEqual(r, ['trimmest'])

    _, r = self.anagrams2.get_anagrams("trimming")
    self.assertEqual(r, ['trimming'])

    _, r = self.anagrams2.get_anagrams("trimmings")
    self.assertEqual(r, ['trimmings'])

    _, r = self.anagrams2.get_anagrams("trimness")
    self.assertEqual(r, ['trimness'])

    _, r = self.anagrams2.get_anagrams("trims")
    self.assertEqual(r, ['trims'])

    _, r = self.anagrams2.get_anagrams("trinidad")
    self.assertEqual(r, ['trinidad'])

    _, r = self.anagrams2.get_anagrams("trinket")
    self.assertEqual(r, ['trinket'])

    _, r = self.anagrams2.get_anagrams("trinkets")
    self.assertEqual(r, ['trinkets'])

    _, r = self.anagrams2.get_anagrams("trio")
    self.assertEqual(r, ['riot', 'trio'])

    _, r = self.anagrams2.get_anagrams("trip")
    self.assertEqual(r, ['trip'])

    _, r = self.anagrams2.get_anagrams("triple")
    self.assertEqual(r, ['triple'])

    _, r = self.anagrams2.get_anagrams("tripled")
    self.assertEqual(r, ['tripled'])

    _, r = self.anagrams2.get_anagrams("triples")
    self.assertEqual(r, ['triples'])

    _, r = self.anagrams2.get_anagrams("triplet")
    self.assertEqual(r, ['triplet'])

    _, r = self.anagrams2.get_anagrams("triplets")
    self.assertEqual(r, ['splitter', 'triplets'])

    _, r = self.anagrams2.get_anagrams("triplett")
    self.assertEqual(r, ['triplett'])

    _, r = self.anagrams2.get_anagrams("tripling")
    self.assertEqual(r, ['tripling'])

    _, r = self.anagrams2.get_anagrams("tripod")
    self.assertEqual(r, ['tripod'])

    _, r = self.anagrams2.get_anagrams("trips")
    self.assertEqual(r, ['strip', 'trips'])

    _, r = self.anagrams2.get_anagrams("tristan")
    self.assertEqual(r, ['transit', 'tristan'])

    _, r = self.anagrams2.get_anagrams("triumph")
    self.assertEqual(r, ['triumph'])

    _, r = self.anagrams2.get_anagrams("triumphal")
    self.assertEqual(r, ['triumphal'])

    _, r = self.anagrams2.get_anagrams("triumphant")
    self.assertEqual(r, ['triumphant'])

    _, r = self.anagrams2.get_anagrams("triumphantly")
    self.assertEqual(r, ['triumphantly'])

    _, r = self.anagrams2.get_anagrams("triumphed")
    self.assertEqual(r, ['triumphed'])

    _, r = self.anagrams2.get_anagrams("triumphing")
    self.assertEqual(r, ['triumphing'])

    _, r = self.anagrams2.get_anagrams("triumphs")
    self.assertEqual(r, ['triumphs'])

    _, r = self.anagrams2.get_anagrams("trivia")
    self.assertEqual(r, ['trivia'])

    _, r = self.anagrams2.get_anagrams("trivial")
    self.assertEqual(r, ['trivial'])

    _, r = self.anagrams2.get_anagrams("trivialities")
    self.assertEqual(r, ['trivialities'])

    _, r = self.anagrams2.get_anagrams("triviality")
    self.assertEqual(r, ['triviality'])

    _, r = self.anagrams2.get_anagrams("trivially")
    self.assertEqual(r, ['trivially'])

    _, r = self.anagrams2.get_anagrams("trobriand")
    self.assertEqual(r, ['trobriand'])

    _, r = self.anagrams2.get_anagrams("trod")
    self.assertEqual(r, ['trod'])

    _, r = self.anagrams2.get_anagrams("trojan")
    self.assertEqual(r, ['trojan'])

    _, r = self.anagrams2.get_anagrams("troll")
    self.assertEqual(r, ['troll'])

    _, r = self.anagrams2.get_anagrams("trolley")
    self.assertEqual(r, ['trolley'])

    _, r = self.anagrams2.get_anagrams("trolleys")
    self.assertEqual(r, ['trolleys'])

    _, r = self.anagrams2.get_anagrams("trolls")
    self.assertEqual(r, ['stroll', 'trolls'])

    _, r = self.anagrams2.get_anagrams("troop")
    self.assertEqual(r, ['porto', 'troop'])

    _, r = self.anagrams2.get_anagrams("trooper")
    self.assertEqual(r, ['trooper'])

    _, r = self.anagrams2.get_anagrams("troopers")
    self.assertEqual(r, ['troopers'])

    _, r = self.anagrams2.get_anagrams("troops")
    self.assertEqual(r, ['troops'])

    _, r = self.anagrams2.get_anagrams("tropez")
    self.assertEqual(r, ['tropez'])

    _, r = self.anagrams2.get_anagrams("trophies")
    self.assertEqual(r, ['trophies'])

    _, r = self.anagrams2.get_anagrams("trophy")
    self.assertEqual(r, ['trophy'])

    _, r = self.anagrams2.get_anagrams("tropic")
    self.assertEqual(r, ['tropic'])

    _, r = self.anagrams2.get_anagrams("tropical")
    self.assertEqual(r, ['tropical'])

    _, r = self.anagrams2.get_anagrams("tropics")
    self.assertEqual(r, ['tropics'])

    _, r = self.anagrams2.get_anagrams("trot")
    self.assertEqual(r, ['trot'])

    _, r = self.anagrams2.get_anagrams("trots")
    self.assertEqual(r, ['trots'])

    _, r = self.anagrams2.get_anagrams("trotsky")
    self.assertEqual(r, ['trotsky'])

    _, r = self.anagrams2.get_anagrams("trouble")
    self.assertEqual(r, ['trouble'])

    _, r = self.anagrams2.get_anagrams("troubled")
    self.assertEqual(r, ['troubled'])

    _, r = self.anagrams2.get_anagrams("troublemaker")
    self.assertEqual(r, ['troublemaker'])

    _, r = self.anagrams2.get_anagrams("troublemakers")
    self.assertEqual(r, ['troublemakers'])

    _, r = self.anagrams2.get_anagrams("troubles")
    self.assertEqual(r, ['troubles'])

    _, r = self.anagrams2.get_anagrams("troubleshoot")
    self.assertEqual(r, ['troubleshoot'])

    _, r = self.anagrams2.get_anagrams("troubleshooter")
    self.assertEqual(r, ['troubleshooter'])

    _, r = self.anagrams2.get_anagrams("troubleshooters")
    self.assertEqual(r, ['troubleshooters'])

    _, r = self.anagrams2.get_anagrams("troubleshooting")
    self.assertEqual(r, ['troubleshooting'])

    _, r = self.anagrams2.get_anagrams("troubleshoots")
    self.assertEqual(r, ['troubleshoots'])

    _, r = self.anagrams2.get_anagrams("troublesome")
    self.assertEqual(r, ['troublesome'])

    _, r = self.anagrams2.get_anagrams("troublesomely")
    self.assertEqual(r, ['troublesomely'])

    _, r = self.anagrams2.get_anagrams("troubling")
    self.assertEqual(r, ['troubling'])

    _, r = self.anagrams2.get_anagrams("trough")
    self.assertEqual(r, ['trough'])

    _, r = self.anagrams2.get_anagrams("trouser")
    self.assertEqual(r, ['routers', 'trouser'])

    _, r = self.anagrams2.get_anagrams("trousers")
    self.assertEqual(r, ['trousers'])

    _, r = self.anagrams2.get_anagrams("trout")
    self.assertEqual(r, ['trout', 'tutor'])

    _, r = self.anagrams2.get_anagrams("troutman")
    self.assertEqual(r, ['troutman'])

    _, r = self.anagrams2.get_anagrams("trowel")
    self.assertEqual(r, ['trowel'])

    _, r = self.anagrams2.get_anagrams("trowels")
    self.assertEqual(r, ['trowels'])

    _, r = self.anagrams2.get_anagrams("troy")
    self.assertEqual(r, ['tory', 'troy'])

    _, r = self.anagrams2.get_anagrams("truant")
    self.assertEqual(r, ['truant'])

    _, r = self.anagrams2.get_anagrams("truants")
    self.assertEqual(r, ['truants'])

    _, r = self.anagrams2.get_anagrams("truce")
    self.assertEqual(r, ['truce'])

    _, r = self.anagrams2.get_anagrams("truck")
    self.assertEqual(r, ['truck'])

    _, r = self.anagrams2.get_anagrams("trucked")
    self.assertEqual(r, ['trucked'])

    _, r = self.anagrams2.get_anagrams("truckee")
    self.assertEqual(r, ['truckee'])

    _, r = self.anagrams2.get_anagrams("trucker")
    self.assertEqual(r, ['trucker'])

    _, r = self.anagrams2.get_anagrams("truckers")
    self.assertEqual(r, ['truckers'])

    _, r = self.anagrams2.get_anagrams("trucking")
    self.assertEqual(r, ['trucking'])

    _, r = self.anagrams2.get_anagrams("trucks")
    self.assertEqual(r, ['struck', 'trucks'])

    _, r = self.anagrams2.get_anagrams("trudeau")
    self.assertEqual(r, ['trudeau'])

    _, r = self.anagrams2.get_anagrams("trudge")
    self.assertEqual(r, ['trudge'])

    _, r = self.anagrams2.get_anagrams("trudged")
    self.assertEqual(r, ['trudged'])

    _, r = self.anagrams2.get_anagrams("trudy")
    self.assertEqual(r, ['trudy'])

    _, r = self.anagrams2.get_anagrams("true")
    self.assertEqual(r, ['true'])

    _, r = self.anagrams2.get_anagrams("trued")
    self.assertEqual(r, ['trued'])

    _, r = self.anagrams2.get_anagrams("truer")
    self.assertEqual(r, ['truer'])

    _, r = self.anagrams2.get_anagrams("trues")
    self.assertEqual(r, ['trues'])

    _, r = self.anagrams2.get_anagrams("truest")
    self.assertEqual(r, ['truest', 'utters'])

    _, r = self.anagrams2.get_anagrams("truing")
    self.assertEqual(r, ['truing', 'turing'])

    _, r = self.anagrams2.get_anagrams("truism")
    self.assertEqual(r, ['truism'])

    _, r = self.anagrams2.get_anagrams("truisms")
    self.assertEqual(r, ['truisms'])

    _, r = self.anagrams2.get_anagrams("trujillo")
    self.assertEqual(r, ['trujillo'])

    _, r = self.anagrams2.get_anagrams("truk")
    self.assertEqual(r, ['kurt', 'truk'])

    _, r = self.anagrams2.get_anagrams("truly")
    self.assertEqual(r, ['truly'])

    _, r = self.anagrams2.get_anagrams("truman")
    self.assertEqual(r, ['truman'])

    _, r = self.anagrams2.get_anagrams("trumbull")
    self.assertEqual(r, ['trumbull'])

    _, r = self.anagrams2.get_anagrams("trump")
    self.assertEqual(r, ['trump'])

    _, r = self.anagrams2.get_anagrams("trumped")
    self.assertEqual(r, ['trumped'])

    _, r = self.anagrams2.get_anagrams("trumpet")
    self.assertEqual(r, ['trumpet'])

    _, r = self.anagrams2.get_anagrams("trumpeter")
    self.assertEqual(r, ['trumpeter'])

    _, r = self.anagrams2.get_anagrams("trumps")
    self.assertEqual(r, ['trumps'])

    _, r = self.anagrams2.get_anagrams("truncate")
    self.assertEqual(r, ['truncate'])

    _, r = self.anagrams2.get_anagrams("truncated")
    self.assertEqual(r, ['truncated'])

    _, r = self.anagrams2.get_anagrams("truncates")
    self.assertEqual(r, ['truncates'])

    _, r = self.anagrams2.get_anagrams("truncating")
    self.assertEqual(r, ['truncating'])

    _, r = self.anagrams2.get_anagrams("truncation")
    self.assertEqual(r, ['truncation'])

    _, r = self.anagrams2.get_anagrams("truncations")
    self.assertEqual(r, ['truncations'])

    _, r = self.anagrams2.get_anagrams("trunk")
    self.assertEqual(r, ['trunk'])

    _, r = self.anagrams2.get_anagrams("trunks")
    self.assertEqual(r, ['trunks'])

    _, r = self.anagrams2.get_anagrams("trust")
    self.assertEqual(r, ['strut', 'trust'])

    _, r = self.anagrams2.get_anagrams("trusted")
    self.assertEqual(r, ['trusted'])

    _, r = self.anagrams2.get_anagrams("trustee")
    self.assertEqual(r, ['trustee'])

    _, r = self.anagrams2.get_anagrams("trustees")
    self.assertEqual(r, ['trustees'])

    _, r = self.anagrams2.get_anagrams("trustful")
    self.assertEqual(r, ['trustful'])

    _, r = self.anagrams2.get_anagrams("trustfully")
    self.assertEqual(r, ['trustfully'])

    _, r = self.anagrams2.get_anagrams("trustfulness")
    self.assertEqual(r, ['trustfulness'])

    _, r = self.anagrams2.get_anagrams("trusting")
    self.assertEqual(r, ['trusting'])

    _, r = self.anagrams2.get_anagrams("trustingly")
    self.assertEqual(r, ['trustingly'])

    _, r = self.anagrams2.get_anagrams("trusts")
    self.assertEqual(r, ['struts', 'trusts'])

    _, r = self.anagrams2.get_anagrams("trustworthiness")
    self.assertEqual(r, ['trustworthiness'])

    _, r = self.anagrams2.get_anagrams("trustworthy")
    self.assertEqual(r, ['trustworthy'])

    _, r = self.anagrams2.get_anagrams("trusty")
    self.assertEqual(r, ['trusty'])

    _, r = self.anagrams2.get_anagrams("truth")
    self.assertEqual(r, ['truth'])

    _, r = self.anagrams2.get_anagrams("truthful")
    self.assertEqual(r, ['truthful'])

    _, r = self.anagrams2.get_anagrams("truthfully")
    self.assertEqual(r, ['truthfully'])

    _, r = self.anagrams2.get_anagrams("truthfulness")
    self.assertEqual(r, ['truthfulness'])

    _, r = self.anagrams2.get_anagrams("truths")
    self.assertEqual(r, ['thrust', 'truths'])

    _, r = self.anagrams2.get_anagrams("try")
    self.assertEqual(r, ['try'])

    _, r = self.anagrams2.get_anagrams("trying")
    self.assertEqual(r, ['trying'])

    _, r = self.anagrams2.get_anagrams("tsunematsu")
    self.assertEqual(r, ['tsunematsu'])

    _, r = self.anagrams2.get_anagrams("tub")
    self.assertEqual(r, ['but', 'tub'])

    _, r = self.anagrams2.get_anagrams("tube")
    self.assertEqual(r, ['tube'])

    _, r = self.anagrams2.get_anagrams("tuber")
    self.assertEqual(r, ['brute', 'tuber'])

    _, r = self.anagrams2.get_anagrams("tuberculosis")
    self.assertEqual(r, ['tuberculosis'])

    _, r = self.anagrams2.get_anagrams("tubers")
    self.assertEqual(r, ['brutes', 'buster', 'tubers'])

    _, r = self.anagrams2.get_anagrams("tubes")
    self.assertEqual(r, ['tubes'])

    _, r = self.anagrams2.get_anagrams("tubing")
    self.assertEqual(r, ['tubing'])

    _, r = self.anagrams2.get_anagrams("tubs")
    self.assertEqual(r, ['bust', 'stub', 'tubs'])

    _, r = self.anagrams2.get_anagrams("tuck")
    self.assertEqual(r, ['tuck'])

    _, r = self.anagrams2.get_anagrams("tucked")
    self.assertEqual(r, ['tucked'])

    _, r = self.anagrams2.get_anagrams("tucker")
    self.assertEqual(r, ['tucker'])

    _, r = self.anagrams2.get_anagrams("tucking")
    self.assertEqual(r, ['tucking'])

    _, r = self.anagrams2.get_anagrams("tucks")
    self.assertEqual(r, ['stuck', 'tucks'])

    _, r = self.anagrams2.get_anagrams("tucson")
    self.assertEqual(r, ['counts', 'tucson'])

    _, r = self.anagrams2.get_anagrams("tudor")
    self.assertEqual(r, ['tudor'])

    _, r = self.anagrams2.get_anagrams("tuesday")
    self.assertEqual(r, ['tuesday'])

    _, r = self.anagrams2.get_anagrams("tuesdays")
    self.assertEqual(r, ['tuesdays'])

    _, r = self.anagrams2.get_anagrams("tuft")
    self.assertEqual(r, ['tuft'])

    _, r = self.anagrams2.get_anagrams("tufts")
    self.assertEqual(r, ['tufts'])

    _, r = self.anagrams2.get_anagrams("tug")
    self.assertEqual(r, ['gut', 'tug'])

    _, r = self.anagrams2.get_anagrams("tugs")
    self.assertEqual(r, ['gust', 'guts', 'tugs'])

    _, r = self.anagrams2.get_anagrams("tuition")
    self.assertEqual(r, ['tuition'])

    _, r = self.anagrams2.get_anagrams("tulane")
    self.assertEqual(r, ['tulane'])

    _, r = self.anagrams2.get_anagrams("tulip")
    self.assertEqual(r, ['tulip'])

    _, r = self.anagrams2.get_anagrams("tulips")
    self.assertEqual(r, ['tulips'])

    _, r = self.anagrams2.get_anagrams("tulsa")
    self.assertEqual(r, ['sault', 'tulsa'])

    _, r = self.anagrams2.get_anagrams("tumble")
    self.assertEqual(r, ['tumble'])

    _, r = self.anagrams2.get_anagrams("tumbled")
    self.assertEqual(r, ['tumbled'])

    _, r = self.anagrams2.get_anagrams("tumbler")
    self.assertEqual(r, ['tumbler'])

    _, r = self.anagrams2.get_anagrams("tumblers")
    self.assertEqual(r, ['tumblers'])

    _, r = self.anagrams2.get_anagrams("tumbles")
    self.assertEqual(r, ['stumble', 'tumbles'])

    _, r = self.anagrams2.get_anagrams("tumbling")
    self.assertEqual(r, ['tumbling'])

    _, r = self.anagrams2.get_anagrams("tumor")
    self.assertEqual(r, ['tumor'])

    _, r = self.anagrams2.get_anagrams("tumors")
    self.assertEqual(r, ['tumors'])

    _, r = self.anagrams2.get_anagrams("tumult")
    self.assertEqual(r, ['tumult'])

    _, r = self.anagrams2.get_anagrams("tumults")
    self.assertEqual(r, ['tumults'])

    _, r = self.anagrams2.get_anagrams("tumultuous")
    self.assertEqual(r, ['tumultuous'])

    _, r = self.anagrams2.get_anagrams("tunable")
    self.assertEqual(r, ['tunable'])

    _, r = self.anagrams2.get_anagrams("tune")
    self.assertEqual(r, ['tune'])

    _, r = self.anagrams2.get_anagrams("tuned")
    self.assertEqual(r, ['tuned'])

    _, r = self.anagrams2.get_anagrams("tuner")
    self.assertEqual(r, ['tuner'])

    _, r = self.anagrams2.get_anagrams("tuners")
    self.assertEqual(r, ['tuners', 'unrest'])

    _, r = self.anagrams2.get_anagrams("tunes")
    self.assertEqual(r, ['tunes'])

    _, r = self.anagrams2.get_anagrams("tunic")
    self.assertEqual(r, ['tunic'])

    _, r = self.anagrams2.get_anagrams("tunics")
    self.assertEqual(r, ['tunics'])

    _, r = self.anagrams2.get_anagrams("tuning")
    self.assertEqual(r, ['tuning'])

    _, r = self.anagrams2.get_anagrams("tunis")
    self.assertEqual(r, ['tunis', 'units'])

    _, r = self.anagrams2.get_anagrams("tunisia")
    self.assertEqual(r, ['tunisia'])

    _, r = self.anagrams2.get_anagrams("tunisian")
    self.assertEqual(r, ['tunisian'])

    _, r = self.anagrams2.get_anagrams("tunnel")
    self.assertEqual(r, ['tunnel'])

    _, r = self.anagrams2.get_anagrams("tunneled")
    self.assertEqual(r, ['tunneled'])

    _, r = self.anagrams2.get_anagrams("tunnels")
    self.assertEqual(r, ['tunnels'])

    _, r = self.anagrams2.get_anagrams("tuple")
    self.assertEqual(r, ['tuple'])

    _, r = self.anagrams2.get_anagrams("tuples")
    self.assertEqual(r, ['tuples'])

    _, r = self.anagrams2.get_anagrams("turban")
    self.assertEqual(r, ['turban'])

    _, r = self.anagrams2.get_anagrams("turbans")
    self.assertEqual(r, ['turbans'])

    _, r = self.anagrams2.get_anagrams("turbulence")
    self.assertEqual(r, ['turbulence'])

    _, r = self.anagrams2.get_anagrams("turbulent")
    self.assertEqual(r, ['turbulent'])

    _, r = self.anagrams2.get_anagrams("turbulently")
    self.assertEqual(r, ['turbulently'])

    _, r = self.anagrams2.get_anagrams("turf")
    self.assertEqual(r, ['turf'])

    _, r = self.anagrams2.get_anagrams("turgid")
    self.assertEqual(r, ['turgid'])

    _, r = self.anagrams2.get_anagrams("turgidly")
    self.assertEqual(r, ['turgidly'])

    _, r = self.anagrams2.get_anagrams("turin")
    self.assertEqual(r, ['turin'])

    _, r = self.anagrams2.get_anagrams("turing")
    self.assertEqual(r, ['truing', 'turing'])

    _, r = self.anagrams2.get_anagrams("turkey")
    self.assertEqual(r, ['turkey'])

    _, r = self.anagrams2.get_anagrams("turkeys")
    self.assertEqual(r, ['turkeys'])

    _, r = self.anagrams2.get_anagrams("turkish")
    self.assertEqual(r, ['turkish'])

    _, r = self.anagrams2.get_anagrams("turkize")
    self.assertEqual(r, ['turkize'])

    _, r = self.anagrams2.get_anagrams("turkizes")
    self.assertEqual(r, ['turkizes'])

    _, r = self.anagrams2.get_anagrams("turmoil")
    self.assertEqual(r, ['turmoil'])

    _, r = self.anagrams2.get_anagrams("turmoils")
    self.assertEqual(r, ['turmoils'])

    _, r = self.anagrams2.get_anagrams("turn")
    self.assertEqual(r, ['runt', 'turn'])

    _, r = self.anagrams2.get_anagrams("turnable")
    self.assertEqual(r, ['turnable'])

    _, r = self.anagrams2.get_anagrams("turnaround")
    self.assertEqual(r, ['turnaround'])

    _, r = self.anagrams2.get_anagrams("turned")
    self.assertEqual(r, ['turned'])

    _, r = self.anagrams2.get_anagrams("turner")
    self.assertEqual(r, ['return', 'turner'])

    _, r = self.anagrams2.get_anagrams("turners")
    self.assertEqual(r, ['returns', 'turners'])

    _, r = self.anagrams2.get_anagrams("turning")
    self.assertEqual(r, ['turning'])

    _, r = self.anagrams2.get_anagrams("turnings")
    self.assertEqual(r, ['turnings'])

    _, r = self.anagrams2.get_anagrams("turnip")
    self.assertEqual(r, ['turnip'])

    _, r = self.anagrams2.get_anagrams("turnips")
    self.assertEqual(r, ['turnips'])

    _, r = self.anagrams2.get_anagrams("turnover")
    self.assertEqual(r, ['overturn', 'turnover'])

    _, r = self.anagrams2.get_anagrams("turns")
    self.assertEqual(r, ['turns'])

    _, r = self.anagrams2.get_anagrams("turpentine")
    self.assertEqual(r, ['turpentine'])

    _, r = self.anagrams2.get_anagrams("turquoise")
    self.assertEqual(r, ['turquoise'])

    _, r = self.anagrams2.get_anagrams("turret")
    self.assertEqual(r, ['turret'])

    _, r = self.anagrams2.get_anagrams("turrets")
    self.assertEqual(r, ['turrets'])

    _, r = self.anagrams2.get_anagrams("turtle")
    self.assertEqual(r, ['turtle'])

    _, r = self.anagrams2.get_anagrams("turtleneck")
    self.assertEqual(r, ['turtleneck'])

    _, r = self.anagrams2.get_anagrams("turtles")
    self.assertEqual(r, ['turtles'])

    _, r = self.anagrams2.get_anagrams("tuscaloosa")
    self.assertEqual(r, ['tuscaloosa'])

    _, r = self.anagrams2.get_anagrams("tuscan")
    self.assertEqual(r, ['tuscan'])

    _, r = self.anagrams2.get_anagrams("tuscanize")
    self.assertEqual(r, ['tuscanize'])

    _, r = self.anagrams2.get_anagrams("tuscanizes")
    self.assertEqual(r, ['tuscanizes'])

    _, r = self.anagrams2.get_anagrams("tuscany")
    self.assertEqual(r, ['tuscany'])

    _, r = self.anagrams2.get_anagrams("tuscarora")
    self.assertEqual(r, ['tuscarora'])

    _, r = self.anagrams2.get_anagrams("tuskegee")
    self.assertEqual(r, ['tuskegee'])

    _, r = self.anagrams2.get_anagrams("tutankhamen")
    self.assertEqual(r, ['tutankhamen'])

    _, r = self.anagrams2.get_anagrams("tutankhamon")
    self.assertEqual(r, ['tutankhamon'])

    _, r = self.anagrams2.get_anagrams("tutankhamun")
    self.assertEqual(r, ['tutankhamun'])

    _, r = self.anagrams2.get_anagrams("tutenkhamon")
    self.assertEqual(r, ['tutenkhamon'])

    _, r = self.anagrams2.get_anagrams("tutor")
    self.assertEqual(r, ['trout', 'tutor'])

    _, r = self.anagrams2.get_anagrams("tutored")
    self.assertEqual(r, ['tutored'])

    _, r = self.anagrams2.get_anagrams("tutorial")
    self.assertEqual(r, ['tutorial'])

    _, r = self.anagrams2.get_anagrams("tutorials")
    self.assertEqual(r, ['tutorials'])

    _, r = self.anagrams2.get_anagrams("tutoring")
    self.assertEqual(r, ['tutoring'])

    _, r = self.anagrams2.get_anagrams("tutors")
    self.assertEqual(r, ['tutors'])

    _, r = self.anagrams2.get_anagrams("tuttle")
    self.assertEqual(r, ['tuttle'])

    _, r = self.anagrams2.get_anagrams("twain")
    self.assertEqual(r, ['twain'])

    _, r = self.anagrams2.get_anagrams("twang")
    self.assertEqual(r, ['twang'])

    _, r = self.anagrams2.get_anagrams("twas")
    self.assertEqual(r, ['swat', 'twas'])

    _, r = self.anagrams2.get_anagrams("tweed")
    self.assertEqual(r, ['tweed'])

    _, r = self.anagrams2.get_anagrams("twelfth")
    self.assertEqual(r, ['twelfth'])

    _, r = self.anagrams2.get_anagrams("twelve")
    self.assertEqual(r, ['twelve'])

    _, r = self.anagrams2.get_anagrams("twelves")
    self.assertEqual(r, ['twelves'])

    _, r = self.anagrams2.get_anagrams("twenties")
    self.assertEqual(r, ['twenties'])

    _, r = self.anagrams2.get_anagrams("twentieth")
    self.assertEqual(r, ['twentieth'])

    _, r = self.anagrams2.get_anagrams("twenty")
    self.assertEqual(r, ['twenty'])

    _, r = self.anagrams2.get_anagrams("twice")
    self.assertEqual(r, ['twice'])

    _, r = self.anagrams2.get_anagrams("twig")
    self.assertEqual(r, ['twig'])

    _, r = self.anagrams2.get_anagrams("twigs")
    self.assertEqual(r, ['twigs'])

    _, r = self.anagrams2.get_anagrams("twilight")
    self.assertEqual(r, ['twilight'])

    _, r = self.anagrams2.get_anagrams("twilights")
    self.assertEqual(r, ['twilights'])

    _, r = self.anagrams2.get_anagrams("twill")
    self.assertEqual(r, ['twill'])

    _, r = self.anagrams2.get_anagrams("twin")
    self.assertEqual(r, ['twin'])

    _, r = self.anagrams2.get_anagrams("twine")
    self.assertEqual(r, ['twine'])

    _, r = self.anagrams2.get_anagrams("twined")
    self.assertEqual(r, ['twined'])

    _, r = self.anagrams2.get_anagrams("twiner")
    self.assertEqual(r, ['twiner', 'winter'])

    _, r = self.anagrams2.get_anagrams("twinkle")
    self.assertEqual(r, ['twinkle'])

    _, r = self.anagrams2.get_anagrams("twinkled")
    self.assertEqual(r, ['twinkled'])

    _, r = self.anagrams2.get_anagrams("twinkler")
    self.assertEqual(r, ['twinkler'])

    _, r = self.anagrams2.get_anagrams("twinkles")
    self.assertEqual(r, ['twinkles'])

    _, r = self.anagrams2.get_anagrams("twinkling")
    self.assertEqual(r, ['twinkling'])

    _, r = self.anagrams2.get_anagrams("twins")
    self.assertEqual(r, ['twins'])

    _, r = self.anagrams2.get_anagrams("twirl")
    self.assertEqual(r, ['twirl'])

    _, r = self.anagrams2.get_anagrams("twirled")
    self.assertEqual(r, ['twirled'])

    _, r = self.anagrams2.get_anagrams("twirler")
    self.assertEqual(r, ['twirler'])

    _, r = self.anagrams2.get_anagrams("twirling")
    self.assertEqual(r, ['twirling'])

    _, r = self.anagrams2.get_anagrams("twirls")
    self.assertEqual(r, ['twirls'])

    _, r = self.anagrams2.get_anagrams("twist")
    self.assertEqual(r, ['twist'])

    _, r = self.anagrams2.get_anagrams("twisted")
    self.assertEqual(r, ['twisted'])

    _, r = self.anagrams2.get_anagrams("twister")
    self.assertEqual(r, ['twister'])

    _, r = self.anagrams2.get_anagrams("twisters")
    self.assertEqual(r, ['twisters'])

    _, r = self.anagrams2.get_anagrams("twisting")
    self.assertEqual(r, ['twisting'])

    _, r = self.anagrams2.get_anagrams("twists")
    self.assertEqual(r, ['twists'])

    _, r = self.anagrams2.get_anagrams("twitch")
    self.assertEqual(r, ['twitch'])

    _, r = self.anagrams2.get_anagrams("twitched")
    self.assertEqual(r, ['twitched'])

    _, r = self.anagrams2.get_anagrams("twitching")
    self.assertEqual(r, ['twitching'])

    _, r = self.anagrams2.get_anagrams("twitter")
    self.assertEqual(r, ['twitter'])

    _, r = self.anagrams2.get_anagrams("twittered")
    self.assertEqual(r, ['twittered'])

    _, r = self.anagrams2.get_anagrams("twittering")
    self.assertEqual(r, ['twittering'])

    _, r = self.anagrams2.get_anagrams("two")
    self.assertEqual(r, ['tow', 'two'])

    _, r = self.anagrams2.get_anagrams("twofold")
    self.assertEqual(r, ['twofold'])

    _, r = self.anagrams2.get_anagrams("twombly")
    self.assertEqual(r, ['twombly'])

    _, r = self.anagrams2.get_anagrams("twos")
    self.assertEqual(r, ['stow', 'twos'])

    _, r = self.anagrams2.get_anagrams("tyburn")
    self.assertEqual(r, ['tyburn'])

    _, r = self.anagrams2.get_anagrams("tying")
    self.assertEqual(r, ['tying'])

    _, r = self.anagrams2.get_anagrams("tyler")
    self.assertEqual(r, ['tyler'])

    _, r = self.anagrams2.get_anagrams("tylerize")
    self.assertEqual(r, ['tylerize'])

    _, r = self.anagrams2.get_anagrams("tylerizes")
    self.assertEqual(r, ['tylerizes'])

    _, r = self.anagrams2.get_anagrams("tyndall")
    self.assertEqual(r, ['tyndall'])

    _, r = self.anagrams2.get_anagrams("type")
    self.assertEqual(r, ['type'])

    _, r = self.anagrams2.get_anagrams("typed")
    self.assertEqual(r, ['typed'])

    _, r = self.anagrams2.get_anagrams("typeout")
    self.assertEqual(r, ['typeout'])

    _, r = self.anagrams2.get_anagrams("types")
    self.assertEqual(r, ['types'])

    _, r = self.anagrams2.get_anagrams("typesetter")
    self.assertEqual(r, ['typesetter'])

    _, r = self.anagrams2.get_anagrams("typewriter")
    self.assertEqual(r, ['typewriter'])

    _, r = self.anagrams2.get_anagrams("typewriters")
    self.assertEqual(r, ['typewriters'])

    _, r = self.anagrams2.get_anagrams("typhoid")
    self.assertEqual(r, ['typhoid'])

    _, r = self.anagrams2.get_anagrams("typhon")
    self.assertEqual(r, ['python', 'typhon'])

    _, r = self.anagrams2.get_anagrams("typical")
    self.assertEqual(r, ['typical'])

    _, r = self.anagrams2.get_anagrams("typically")
    self.assertEqual(r, ['typically'])

    _, r = self.anagrams2.get_anagrams("typicalness")
    self.assertEqual(r, ['typicalness'])

    _, r = self.anagrams2.get_anagrams("typified")
    self.assertEqual(r, ['typified'])

    _, r = self.anagrams2.get_anagrams("typifies")
    self.assertEqual(r, ['typifies'])

    _, r = self.anagrams2.get_anagrams("typify")
    self.assertEqual(r, ['typify'])

    _, r = self.anagrams2.get_anagrams("typifying")
    self.assertEqual(r, ['typifying'])

    _, r = self.anagrams2.get_anagrams("typing")
    self.assertEqual(r, ['typing'])

    _, r = self.anagrams2.get_anagrams("typist")
    self.assertEqual(r, ['typist'])

    _, r = self.anagrams2.get_anagrams("typists")
    self.assertEqual(r, ['typists'])

    _, r = self.anagrams2.get_anagrams("typo")
    self.assertEqual(r, ['typo'])

    _, r = self.anagrams2.get_anagrams("typographic")
    self.assertEqual(r, ['typographic'])

    _, r = self.anagrams2.get_anagrams("typographical")
    self.assertEqual(r, ['typographical'])

    _, r = self.anagrams2.get_anagrams("typographically")
    self.assertEqual(r, ['typographically'])

    _, r = self.anagrams2.get_anagrams("typography")
    self.assertEqual(r, ['typography'])

    _, r = self.anagrams2.get_anagrams("tyrannical")
    self.assertEqual(r, ['tyrannical'])

    _, r = self.anagrams2.get_anagrams("tyrannosaurus")
    self.assertEqual(r, ['tyrannosaurus'])

    _, r = self.anagrams2.get_anagrams("tyranny")
    self.assertEqual(r, ['tyranny'])

    _, r = self.anagrams2.get_anagrams("tyrant")
    self.assertEqual(r, ['tyrant'])

    _, r = self.anagrams2.get_anagrams("tyrants")
    self.assertEqual(r, ['tyrants'])

    _, r = self.anagrams2.get_anagrams("tyson")
    self.assertEqual(r, ['stony', 'tyson'])

    _, r = self.anagrams2.get_anagrams("tzeltal")
    self.assertEqual(r, ['tzeltal'])

    _, r = self.anagrams2.get_anagrams("ubiquitous")
    self.assertEqual(r, ['ubiquitous'])

    _, r = self.anagrams2.get_anagrams("ubiquitously")
    self.assertEqual(r, ['ubiquitously'])

    _, r = self.anagrams2.get_anagrams("ubiquity")
    self.assertEqual(r, ['ubiquity'])

    _, r = self.anagrams2.get_anagrams("udall")
    self.assertEqual(r, ['udall'])

    _, r = self.anagrams2.get_anagrams("uganda")
    self.assertEqual(r, ['uganda'])

    _, r = self.anagrams2.get_anagrams("ugh")
    self.assertEqual(r, ['hug', 'ugh'])

    _, r = self.anagrams2.get_anagrams("uglier")
    self.assertEqual(r, ['uglier'])

    _, r = self.anagrams2.get_anagrams("ugliest")
    self.assertEqual(r, ['ugliest'])

    _, r = self.anagrams2.get_anagrams("ugliness")
    self.assertEqual(r, ['ugliness'])

    _, r = self.anagrams2.get_anagrams("ugly")
    self.assertEqual(r, ['ugly'])

    _, r = self.anagrams2.get_anagrams("ukraine")
    self.assertEqual(r, ['ukraine'])

    _, r = self.anagrams2.get_anagrams("ukrainian")
    self.assertEqual(r, ['ukrainian'])

    _, r = self.anagrams2.get_anagrams("ukrainians")
    self.assertEqual(r, ['ukrainians'])

    _, r = self.anagrams2.get_anagrams("ulan")
    self.assertEqual(r, ['ulan'])

    _, r = self.anagrams2.get_anagrams("ulcer")
    self.assertEqual(r, ['cruel', 'ulcer'])

    _, r = self.anagrams2.get_anagrams("ulcers")
    self.assertEqual(r, ['ulcers'])

    _, r = self.anagrams2.get_anagrams("ullman")
    self.assertEqual(r, ['ullman'])

    _, r = self.anagrams2.get_anagrams("ulster")
    self.assertEqual(r, ['luster', 'result', 'rustle', 'ulster'])

    _, r = self.anagrams2.get_anagrams("ultimate")
    self.assertEqual(r, ['mutilate', 'ultimate'])

    _, r = self.anagrams2.get_anagrams("ultimately")
    self.assertEqual(r, ['ultimately'])

    _, r = self.anagrams2.get_anagrams("ultra")
    self.assertEqual(r, ['ultra'])

    _, r = self.anagrams2.get_anagrams("ultrasonic")
    self.assertEqual(r, ['ultrasonic'])

    _, r = self.anagrams2.get_anagrams("ultrix")
    self.assertEqual(r, ['ultrix', 'ultrix'])

    _, r = self.anagrams2.get_anagrams("ultrix")
    self.assertEqual(r, ['ultrix', 'ultrix'])

    _, r = self.anagrams2.get_anagrams("ulysses")
    self.assertEqual(r, ['ulysses'])

    _, r = self.anagrams2.get_anagrams("umbrage")
    self.assertEqual(r, ['umbrage'])

    _, r = self.anagrams2.get_anagrams("umbrella")
    self.assertEqual(r, ['umbrella'])

    _, r = self.anagrams2.get_anagrams("umbrellas")
    self.assertEqual(r, ['umbrellas'])

    _, r = self.anagrams2.get_anagrams("umpire")
    self.assertEqual(r, ['impure', 'umpire'])

    _, r = self.anagrams2.get_anagrams("umpires")
    self.assertEqual(r, ['umpires'])

    _, r = self.anagrams2.get_anagrams("unabated")
    self.assertEqual(r, ['unabated'])

    _, r = self.anagrams2.get_anagrams("unabbreviated")
    self.assertEqual(r, ['unabbreviated'])

    _, r = self.anagrams2.get_anagrams("unable")
    self.assertEqual(r, ['nebula', 'unable'])

    _, r = self.anagrams2.get_anagrams("unacceptability")
    self.assertEqual(r, ['unacceptability'])

    _, r = self.anagrams2.get_anagrams("unacceptable")
    self.assertEqual(r, ['unacceptable'])

    _, r = self.anagrams2.get_anagrams("unacceptably")
    self.assertEqual(r, ['unacceptably'])

    _, r = self.anagrams2.get_anagrams("unaccountable")
    self.assertEqual(r, ['unaccountable'])

    _, r = self.anagrams2.get_anagrams("unaccustomed")
    self.assertEqual(r, ['unaccustomed'])

    _, r = self.anagrams2.get_anagrams("unachievable")
    self.assertEqual(r, ['unachievable'])

    _, r = self.anagrams2.get_anagrams("unacknowledged")
    self.assertEqual(r, ['unacknowledged'])

    _, r = self.anagrams2.get_anagrams("unadulterated")
    self.assertEqual(r, ['unadulterated'])

    _, r = self.anagrams2.get_anagrams("unaesthetically")
    self.assertEqual(r, ['unaesthetically'])

    _, r = self.anagrams2.get_anagrams("unaffected")
    self.assertEqual(r, ['unaffected'])

    _, r = self.anagrams2.get_anagrams("unaffectedly")
    self.assertEqual(r, ['unaffectedly'])

    _, r = self.anagrams2.get_anagrams("unaffectedness")
    self.assertEqual(r, ['unaffectedness'])

    _, r = self.anagrams2.get_anagrams("unaided")
    self.assertEqual(r, ['unaided'])

    _, r = self.anagrams2.get_anagrams("unalienability")
    self.assertEqual(r, ['unalienability'])

    _, r = self.anagrams2.get_anagrams("unalienable")
    self.assertEqual(r, ['unalienable'])

    _, r = self.anagrams2.get_anagrams("unalterably")
    self.assertEqual(r, ['unalterably'])

    _, r = self.anagrams2.get_anagrams("unaltered")
    self.assertEqual(r, ['unaltered', 'unrelated'])

    _, r = self.anagrams2.get_anagrams("unambiguous")
    self.assertEqual(r, ['unambiguous'])

    _, r = self.anagrams2.get_anagrams("unambiguously")
    self.assertEqual(r, ['unambiguously'])

    _, r = self.anagrams2.get_anagrams("unambitious")
    self.assertEqual(r, ['unambitious'])

    _, r = self.anagrams2.get_anagrams("unanalyzable")
    self.assertEqual(r, ['unanalyzable'])

    _, r = self.anagrams2.get_anagrams("unanimity")
    self.assertEqual(r, ['unanimity'])

    _, r = self.anagrams2.get_anagrams("unanimous")
    self.assertEqual(r, ['unanimous'])

    _, r = self.anagrams2.get_anagrams("unanimously")
    self.assertEqual(r, ['unanimously'])

    _, r = self.anagrams2.get_anagrams("unanswerable")
    self.assertEqual(r, ['unanswerable'])

    _, r = self.anagrams2.get_anagrams("unanswered")
    self.assertEqual(r, ['unanswered'])

    _, r = self.anagrams2.get_anagrams("unanticipated")
    self.assertEqual(r, ['unanticipated'])

    _, r = self.anagrams2.get_anagrams("unarmed")
    self.assertEqual(r, ['unarmed'])

    _, r = self.anagrams2.get_anagrams("unary")
    self.assertEqual(r, ['unary'])

    _, r = self.anagrams2.get_anagrams("unassailable")
    self.assertEqual(r, ['unassailable'])

    _, r = self.anagrams2.get_anagrams("unassigned")
    self.assertEqual(r, ['unassigned'])

    _, r = self.anagrams2.get_anagrams("unassisted")
    self.assertEqual(r, ['unassisted'])

    _, r = self.anagrams2.get_anagrams("unattainability")
    self.assertEqual(r, ['unattainability'])

    _, r = self.anagrams2.get_anagrams("unattainable")
    self.assertEqual(r, ['unattainable'])

    _, r = self.anagrams2.get_anagrams("unattended")
    self.assertEqual(r, ['unattended'])

    _, r = self.anagrams2.get_anagrams("unattractive")
    self.assertEqual(r, ['unattractive'])

    _, r = self.anagrams2.get_anagrams("unattractively")
    self.assertEqual(r, ['unattractively'])

    _, r = self.anagrams2.get_anagrams("unauthorized")
    self.assertEqual(r, ['unauthorized'])

    _, r = self.anagrams2.get_anagrams("unavailability")
    self.assertEqual(r, ['unavailability'])

    _, r = self.anagrams2.get_anagrams("unavailable")
    self.assertEqual(r, ['unavailable'])

    _, r = self.anagrams2.get_anagrams("unavoidable")
    self.assertEqual(r, ['unavoidable'])

    _, r = self.anagrams2.get_anagrams("unavoidably")
    self.assertEqual(r, ['unavoidably'])

    _, r = self.anagrams2.get_anagrams("unaware")
    self.assertEqual(r, ['unaware'])

    _, r = self.anagrams2.get_anagrams("unawareness")
    self.assertEqual(r, ['unawareness'])

    _, r = self.anagrams2.get_anagrams("unawares")
    self.assertEqual(r, ['unawares'])

    _, r = self.anagrams2.get_anagrams("unbalanced")
    self.assertEqual(r, ['unbalanced'])

    _, r = self.anagrams2.get_anagrams("unbearable")
    self.assertEqual(r, ['unbearable'])

    _, r = self.anagrams2.get_anagrams("unbecoming")
    self.assertEqual(r, ['unbecoming'])

    _, r = self.anagrams2.get_anagrams("unbelievable")
    self.assertEqual(r, ['unbelievable'])

    _, r = self.anagrams2.get_anagrams("unbiased")
    self.assertEqual(r, ['unbiased'])

    _, r = self.anagrams2.get_anagrams("unbind")
    self.assertEqual(r, ['unbind'])

    _, r = self.anagrams2.get_anagrams("unblock")
    self.assertEqual(r, ['unblock'])

    _, r = self.anagrams2.get_anagrams("unblocked")
    self.assertEqual(r, ['unblocked'])

    _, r = self.anagrams2.get_anagrams("unblocking")
    self.assertEqual(r, ['unblocking'])

    _, r = self.anagrams2.get_anagrams("unblocks")
    self.assertEqual(r, ['unblocks'])

    _, r = self.anagrams2.get_anagrams("unborn")
    self.assertEqual(r, ['unborn'])

    _, r = self.anagrams2.get_anagrams("unbound")
    self.assertEqual(r, ['unbound'])

    _, r = self.anagrams2.get_anagrams("unbounded")
    self.assertEqual(r, ['unbounded'])

    _, r = self.anagrams2.get_anagrams("unbreakable")
    self.assertEqual(r, ['unbreakable'])

    _, r = self.anagrams2.get_anagrams("unbridled")
    self.assertEqual(r, ['unbridled'])

    _, r = self.anagrams2.get_anagrams("unbroken")
    self.assertEqual(r, ['unbroken'])

    _, r = self.anagrams2.get_anagrams("unbuffered")
    self.assertEqual(r, ['unbuffered'])

    _, r = self.anagrams2.get_anagrams("uncancelled")
    self.assertEqual(r, ['uncancelled'])

    _, r = self.anagrams2.get_anagrams("uncanny")
    self.assertEqual(r, ['uncanny'])

    _, r = self.anagrams2.get_anagrams("uncapitalized")
    self.assertEqual(r, ['uncapitalized'])

    _, r = self.anagrams2.get_anagrams("uncaught")
    self.assertEqual(r, ['uncaught'])

    _, r = self.anagrams2.get_anagrams("uncertain")
    self.assertEqual(r, ['uncertain'])

    _, r = self.anagrams2.get_anagrams("uncertainly")
    self.assertEqual(r, ['uncertainly'])

    _, r = self.anagrams2.get_anagrams("uncertainties")
    self.assertEqual(r, ['uncertainties'])

    _, r = self.anagrams2.get_anagrams("uncertainty")
    self.assertEqual(r, ['uncertainty'])

    _, r = self.anagrams2.get_anagrams("unchangeable")
    self.assertEqual(r, ['unchangeable'])

    _, r = self.anagrams2.get_anagrams("unchanged")
    self.assertEqual(r, ['unchanged'])

    _, r = self.anagrams2.get_anagrams("unchanging")
    self.assertEqual(r, ['unchanging'])

    _, r = self.anagrams2.get_anagrams("unclaimed")
    self.assertEqual(r, ['unclaimed'])

    _, r = self.anagrams2.get_anagrams("unclassified")
    self.assertEqual(r, ['unclassified'])

    _, r = self.anagrams2.get_anagrams("uncle")
    self.assertEqual(r, ['uncle'])

    _, r = self.anagrams2.get_anagrams("unclean")
    self.assertEqual(r, ['unclean'])

    _, r = self.anagrams2.get_anagrams("uncleanly")
    self.assertEqual(r, ['uncleanly'])

    _, r = self.anagrams2.get_anagrams("uncleanness")
    self.assertEqual(r, ['uncleanness'])

    _, r = self.anagrams2.get_anagrams("unclear")
    self.assertEqual(r, ['nuclear', 'unclear'])

    _, r = self.anagrams2.get_anagrams("uncleared")
    self.assertEqual(r, ['uncleared'])

    _, r = self.anagrams2.get_anagrams("uncles")
    self.assertEqual(r, ['uncles'])

    _, r = self.anagrams2.get_anagrams("unclosed")
    self.assertEqual(r, ['unclosed'])

    _, r = self.anagrams2.get_anagrams("uncomfortable")
    self.assertEqual(r, ['uncomfortable'])

    _, r = self.anagrams2.get_anagrams("uncomfortably")
    self.assertEqual(r, ['uncomfortably'])

    _, r = self.anagrams2.get_anagrams("uncommitted")
    self.assertEqual(r, ['uncommitted'])

    _, r = self.anagrams2.get_anagrams("uncommon")
    self.assertEqual(r, ['uncommon'])

    _, r = self.anagrams2.get_anagrams("uncommonly")
    self.assertEqual(r, ['uncommonly'])

    _, r = self.anagrams2.get_anagrams("uncompromising")
    self.assertEqual(r, ['uncompromising'])

    _, r = self.anagrams2.get_anagrams("uncomputable")
    self.assertEqual(r, ['uncomputable'])

    _, r = self.anagrams2.get_anagrams("unconcerned")
    self.assertEqual(r, ['unconcerned'])

    _, r = self.anagrams2.get_anagrams("unconcernedly")
    self.assertEqual(r, ['unconcernedly'])

    _, r = self.anagrams2.get_anagrams("unconditional")
    self.assertEqual(r, ['unconditional'])

    _, r = self.anagrams2.get_anagrams("unconditionally")
    self.assertEqual(r, ['unconditionally'])

    _, r = self.anagrams2.get_anagrams("unconnected")
    self.assertEqual(r, ['unconnected'])

    _, r = self.anagrams2.get_anagrams("unconscionable")
    self.assertEqual(r, ['unconscionable'])

    _, r = self.anagrams2.get_anagrams("unconscious")
    self.assertEqual(r, ['unconscious'])

    _, r = self.anagrams2.get_anagrams("unconsciously")
    self.assertEqual(r, ['unconsciously'])

    _, r = self.anagrams2.get_anagrams("unconsciousness")
    self.assertEqual(r, ['unconsciousness'])

    _, r = self.anagrams2.get_anagrams("unconstitutional")
    self.assertEqual(r, ['unconstitutional'])

    _, r = self.anagrams2.get_anagrams("unconstrained")
    self.assertEqual(r, ['unconstrained'])

    _, r = self.anagrams2.get_anagrams("uncontrollability")
    self.assertEqual(r, ['uncontrollability'])

    _, r = self.anagrams2.get_anagrams("uncontrollable")
    self.assertEqual(r, ['uncontrollable'])

    _, r = self.anagrams2.get_anagrams("uncontrollably")
    self.assertEqual(r, ['uncontrollably'])

    _, r = self.anagrams2.get_anagrams("uncontrolled")
    self.assertEqual(r, ['uncontrolled'])

    _, r = self.anagrams2.get_anagrams("unconventional")
    self.assertEqual(r, ['unconventional'])

    _, r = self.anagrams2.get_anagrams("unconventionally")
    self.assertEqual(r, ['unconventionally'])

    _, r = self.anagrams2.get_anagrams("unconvinced")
    self.assertEqual(r, ['unconvinced'])

    _, r = self.anagrams2.get_anagrams("unconvincing")
    self.assertEqual(r, ['unconvincing'])

    _, r = self.anagrams2.get_anagrams("uncoordinated")
    self.assertEqual(r, ['uncoordinated'])

    _, r = self.anagrams2.get_anagrams("uncorrectable")
    self.assertEqual(r, ['uncorrectable'])

    _, r = self.anagrams2.get_anagrams("uncorrected")
    self.assertEqual(r, ['uncorrected'])

    _, r = self.anagrams2.get_anagrams("uncountable")
    self.assertEqual(r, ['uncountable'])

    _, r = self.anagrams2.get_anagrams("uncountably")
    self.assertEqual(r, ['uncountably'])

    _, r = self.anagrams2.get_anagrams("uncouth")
    self.assertEqual(r, ['uncouth'])

    _, r = self.anagrams2.get_anagrams("uncover")
    self.assertEqual(r, ['uncover'])

    _, r = self.anagrams2.get_anagrams("uncovered")
    self.assertEqual(r, ['uncovered'])

    _, r = self.anagrams2.get_anagrams("uncovering")
    self.assertEqual(r, ['uncovering'])

    _, r = self.anagrams2.get_anagrams("uncovers")
    self.assertEqual(r, ['uncovers'])

    _, r = self.anagrams2.get_anagrams("undamaged")
    self.assertEqual(r, ['undamaged'])

    _, r = self.anagrams2.get_anagrams("undaunted")
    self.assertEqual(r, ['undaunted'])

    _, r = self.anagrams2.get_anagrams("undauntedly")
    self.assertEqual(r, ['undauntedly'])

    _, r = self.anagrams2.get_anagrams("undecidable")
    self.assertEqual(r, ['undecidable'])

    _, r = self.anagrams2.get_anagrams("undecided")
    self.assertEqual(r, ['undecided'])

    _, r = self.anagrams2.get_anagrams("undeclared")
    self.assertEqual(r, ['undeclared'])

    _, r = self.anagrams2.get_anagrams("undecomposable")
    self.assertEqual(r, ['undecomposable'])

    _, r = self.anagrams2.get_anagrams("undefinability")
    self.assertEqual(r, ['undefinability'])

    _, r = self.anagrams2.get_anagrams("undefined")
    self.assertEqual(r, ['undefined'])

    _, r = self.anagrams2.get_anagrams("undeleted")
    self.assertEqual(r, ['undeleted'])

    _, r = self.anagrams2.get_anagrams("undeniable")
    self.assertEqual(r, ['undeniable'])

    _, r = self.anagrams2.get_anagrams("undeniably")
    self.assertEqual(r, ['undeniably'])

    _, r = self.anagrams2.get_anagrams("under")
    self.assertEqual(r, ['under'])

    _, r = self.anagrams2.get_anagrams("underbrush")
    self.assertEqual(r, ['underbrush'])

    _, r = self.anagrams2.get_anagrams("underdone")
    self.assertEqual(r, ['underdone'])

    _, r = self.anagrams2.get_anagrams("underestimate")
    self.assertEqual(r, ['underestimate'])

    _, r = self.anagrams2.get_anagrams("underestimated")
    self.assertEqual(r, ['underestimated'])

    _, r = self.anagrams2.get_anagrams("underestimates")
    self.assertEqual(r, ['underestimates'])

    _, r = self.anagrams2.get_anagrams("underestimating")
    self.assertEqual(r, ['underestimating'])

    _, r = self.anagrams2.get_anagrams("underestimation")
    self.assertEqual(r, ['underestimation'])

    _, r = self.anagrams2.get_anagrams("underflow")
    self.assertEqual(r, ['underflow', 'wonderful'])

    _, r = self.anagrams2.get_anagrams("underflowed")
    self.assertEqual(r, ['underflowed'])

    _, r = self.anagrams2.get_anagrams("underflowing")
    self.assertEqual(r, ['underflowing'])

    _, r = self.anagrams2.get_anagrams("underflows")
    self.assertEqual(r, ['underflows'])

    _, r = self.anagrams2.get_anagrams("underfoot")
    self.assertEqual(r, ['underfoot'])

    _, r = self.anagrams2.get_anagrams("undergo")
    self.assertEqual(r, ['undergo'])

    _, r = self.anagrams2.get_anagrams("undergoes")
    self.assertEqual(r, ['undergoes'])

    _, r = self.anagrams2.get_anagrams("undergoing")
    self.assertEqual(r, ['undergoing'])

    _, r = self.anagrams2.get_anagrams("undergone")
    self.assertEqual(r, ['undergone'])

    _, r = self.anagrams2.get_anagrams("undergraduate")
    self.assertEqual(r, ['undergraduate'])

    _, r = self.anagrams2.get_anagrams("undergraduates")
    self.assertEqual(r, ['undergraduates'])

    _, r = self.anagrams2.get_anagrams("underground")
    self.assertEqual(r, ['underground'])

    _, r = self.anagrams2.get_anagrams("underlie")
    self.assertEqual(r, ['underlie'])

    _, r = self.anagrams2.get_anagrams("underlies")
    self.assertEqual(r, ['underlies'])

    _, r = self.anagrams2.get_anagrams("underline")
    self.assertEqual(r, ['underline'])

    _, r = self.anagrams2.get_anagrams("underlined")
    self.assertEqual(r, ['underlined'])

    _, r = self.anagrams2.get_anagrams("underlines")
    self.assertEqual(r, ['underlines'])

    _, r = self.anagrams2.get_anagrams("underling")
    self.assertEqual(r, ['underling'])

    _, r = self.anagrams2.get_anagrams("underlings")
    self.assertEqual(r, ['underlings'])

    _, r = self.anagrams2.get_anagrams("underlining")
    self.assertEqual(r, ['underlining'])

    _, r = self.anagrams2.get_anagrams("underlinings")
    self.assertEqual(r, ['underlinings'])

    _, r = self.anagrams2.get_anagrams("underloaded")
    self.assertEqual(r, ['underloaded'])

    _, r = self.anagrams2.get_anagrams("underlying")
    self.assertEqual(r, ['enduringly', 'underlying'])

    _, r = self.anagrams2.get_anagrams("undermine")
    self.assertEqual(r, ['undermine'])

    _, r = self.anagrams2.get_anagrams("undermined")
    self.assertEqual(r, ['undermined'])

    _, r = self.anagrams2.get_anagrams("undermines")
    self.assertEqual(r, ['undermines'])

    _, r = self.anagrams2.get_anagrams("undermining")
    self.assertEqual(r, ['undermining'])

    _, r = self.anagrams2.get_anagrams("underneath")
    self.assertEqual(r, ['underneath'])

    _, r = self.anagrams2.get_anagrams("underpinning")
    self.assertEqual(r, ['underpinning'])

    _, r = self.anagrams2.get_anagrams("underpinnings")
    self.assertEqual(r, ['underpinnings'])

    _, r = self.anagrams2.get_anagrams("underplay")
    self.assertEqual(r, ['underplay'])

    _, r = self.anagrams2.get_anagrams("underplayed")
    self.assertEqual(r, ['underplayed'])

    _, r = self.anagrams2.get_anagrams("underplaying")
    self.assertEqual(r, ['underplaying'])

    _, r = self.anagrams2.get_anagrams("underplays")
    self.assertEqual(r, ['underplays'])

    _, r = self.anagrams2.get_anagrams("underscore")
    self.assertEqual(r, ['underscore'])

    _, r = self.anagrams2.get_anagrams("underscored")
    self.assertEqual(r, ['underscored'])

    _, r = self.anagrams2.get_anagrams("underscores")
    self.assertEqual(r, ['underscores'])

    _, r = self.anagrams2.get_anagrams("understand")
    self.assertEqual(r, ['understand'])

    _, r = self.anagrams2.get_anagrams("understandability")
    self.assertEqual(r, ['understandability'])

    _, r = self.anagrams2.get_anagrams("understandable")
    self.assertEqual(r, ['understandable'])

    _, r = self.anagrams2.get_anagrams("understandably")
    self.assertEqual(r, ['understandably'])

    _, r = self.anagrams2.get_anagrams("understanding")
    self.assertEqual(r, ['understanding'])

    _, r = self.anagrams2.get_anagrams("understandingly")
    self.assertEqual(r, ['understandingly'])

    _, r = self.anagrams2.get_anagrams("understandings")
    self.assertEqual(r, ['understandings'])

    _, r = self.anagrams2.get_anagrams("understands")
    self.assertEqual(r, ['understands'])

    _, r = self.anagrams2.get_anagrams("understated")
    self.assertEqual(r, ['understated'])

    _, r = self.anagrams2.get_anagrams("understood")
    self.assertEqual(r, ['understood'])

    _, r = self.anagrams2.get_anagrams("undertake")
    self.assertEqual(r, ['undertake'])

    _, r = self.anagrams2.get_anagrams("undertaken")
    self.assertEqual(r, ['undertaken'])

    _, r = self.anagrams2.get_anagrams("undertaker")
    self.assertEqual(r, ['undertaker'])

    _, r = self.anagrams2.get_anagrams("undertakers")
    self.assertEqual(r, ['undertakers'])

    _, r = self.anagrams2.get_anagrams("undertakes")
    self.assertEqual(r, ['undertakes'])

    _, r = self.anagrams2.get_anagrams("undertaking")
    self.assertEqual(r, ['undertaking'])

    _, r = self.anagrams2.get_anagrams("undertakings")
    self.assertEqual(r, ['undertakings'])

    _, r = self.anagrams2.get_anagrams("undertook")
    self.assertEqual(r, ['undertook'])

    _, r = self.anagrams2.get_anagrams("underwater")
    self.assertEqual(r, ['underwater'])

    _, r = self.anagrams2.get_anagrams("underway")
    self.assertEqual(r, ['underway'])

    _, r = self.anagrams2.get_anagrams("underwear")
    self.assertEqual(r, ['underwear'])

    _, r = self.anagrams2.get_anagrams("underwent")
    self.assertEqual(r, ['underwent'])

    _, r = self.anagrams2.get_anagrams("underworld")
    self.assertEqual(r, ['underworld'])

    _, r = self.anagrams2.get_anagrams("underwrite")
    self.assertEqual(r, ['underwrite'])

    _, r = self.anagrams2.get_anagrams("underwriter")
    self.assertEqual(r, ['underwriter'])

    _, r = self.anagrams2.get_anagrams("underwriters")
    self.assertEqual(r, ['underwriters'])

    _, r = self.anagrams2.get_anagrams("underwrites")
    self.assertEqual(r, ['underwrites'])

    _, r = self.anagrams2.get_anagrams("underwriting")
    self.assertEqual(r, ['underwriting'])

    _, r = self.anagrams2.get_anagrams("undesirability")
    self.assertEqual(r, ['undesirability'])

    _, r = self.anagrams2.get_anagrams("undesirable")
    self.assertEqual(r, ['undesirable'])

    _, r = self.anagrams2.get_anagrams("undetectable")
    self.assertEqual(r, ['undetectable'])

    _, r = self.anagrams2.get_anagrams("undetected")
    self.assertEqual(r, ['undetected'])

    _, r = self.anagrams2.get_anagrams("undetermined")
    self.assertEqual(r, ['undetermined'])

    _, r = self.anagrams2.get_anagrams("undeveloped")
    self.assertEqual(r, ['undeveloped'])

    _, r = self.anagrams2.get_anagrams("undid")
    self.assertEqual(r, ['undid'])

    _, r = self.anagrams2.get_anagrams("undiminished")
    self.assertEqual(r, ['undiminished'])

    _, r = self.anagrams2.get_anagrams("undirected")
    self.assertEqual(r, ['undirected'])

    _, r = self.anagrams2.get_anagrams("undisciplined")
    self.assertEqual(r, ['undisciplined'])

    _, r = self.anagrams2.get_anagrams("undiscovered")
    self.assertEqual(r, ['undiscovered'])

    _, r = self.anagrams2.get_anagrams("undisturbed")
    self.assertEqual(r, ['undisturbed'])

    _, r = self.anagrams2.get_anagrams("undivided")
    self.assertEqual(r, ['undivided'])

    _, r = self.anagrams2.get_anagrams("undo")
    self.assertEqual(r, ['undo'])

    _, r = self.anagrams2.get_anagrams("undocumented")
    self.assertEqual(r, ['undocumented'])

    _, r = self.anagrams2.get_anagrams("undoes")
    self.assertEqual(r, ['undoes'])

    _, r = self.anagrams2.get_anagrams("undoing")
    self.assertEqual(r, ['undoing'])

    _, r = self.anagrams2.get_anagrams("undoings")
    self.assertEqual(r, ['sounding', 'undoings'])

    _, r = self.anagrams2.get_anagrams("undone")
    self.assertEqual(r, ['undone'])

    _, r = self.anagrams2.get_anagrams("undoubtedly")
    self.assertEqual(r, ['undoubtedly'])

    _, r = self.anagrams2.get_anagrams("undress")
    self.assertEqual(r, ['undress'])

    _, r = self.anagrams2.get_anagrams("undressed")
    self.assertEqual(r, ['undressed'])

    _, r = self.anagrams2.get_anagrams("undresses")
    self.assertEqual(r, ['undresses'])

    _, r = self.anagrams2.get_anagrams("undressing")
    self.assertEqual(r, ['undressing'])

    _, r = self.anagrams2.get_anagrams("undue")
    self.assertEqual(r, ['undue'])

    _, r = self.anagrams2.get_anagrams("unduly")
    self.assertEqual(r, ['unduly'])

    _, r = self.anagrams2.get_anagrams("uneasily")
    self.assertEqual(r, ['uneasily'])

    _, r = self.anagrams2.get_anagrams("uneasiness")
    self.assertEqual(r, ['uneasiness'])

    _, r = self.anagrams2.get_anagrams("uneasy")
    self.assertEqual(r, ['uneasy'])

    _, r = self.anagrams2.get_anagrams("uneconomic")
    self.assertEqual(r, ['uneconomic'])

    _, r = self.anagrams2.get_anagrams("uneconomical")
    self.assertEqual(r, ['uneconomical'])

    _, r = self.anagrams2.get_anagrams("unembellished")
    self.assertEqual(r, ['unembellished'])

    _, r = self.anagrams2.get_anagrams("unemployed")
    self.assertEqual(r, ['unemployed'])

    _, r = self.anagrams2.get_anagrams("unemployment")
    self.assertEqual(r, ['unemployment'])

    _, r = self.anagrams2.get_anagrams("unencrypted")
    self.assertEqual(r, ['unencrypted'])

    _, r = self.anagrams2.get_anagrams("unending")
    self.assertEqual(r, ['unending'])

    _, r = self.anagrams2.get_anagrams("unenlightening")
    self.assertEqual(r, ['unenlightening'])

    _, r = self.anagrams2.get_anagrams("unequal")
    self.assertEqual(r, ['unequal'])

    _, r = self.anagrams2.get_anagrams("unequaled")
    self.assertEqual(r, ['unequaled'])

    _, r = self.anagrams2.get_anagrams("unequally")
    self.assertEqual(r, ['unequally'])

    _, r = self.anagrams2.get_anagrams("unequivocal")
    self.assertEqual(r, ['unequivocal'])

    _, r = self.anagrams2.get_anagrams("unequivocally")
    self.assertEqual(r, ['unequivocally'])

    _, r = self.anagrams2.get_anagrams("unesco")
    self.assertEqual(r, ['ounces', 'unesco'])

    _, r = self.anagrams2.get_anagrams("unessential")
    self.assertEqual(r, ['unessential'])

    _, r = self.anagrams2.get_anagrams("unevaluated")
    self.assertEqual(r, ['unevaluated'])

    _, r = self.anagrams2.get_anagrams("uneven")
    self.assertEqual(r, ['uneven'])

    _, r = self.anagrams2.get_anagrams("unevenly")
    self.assertEqual(r, ['unevenly'])

    _, r = self.anagrams2.get_anagrams("unevenness")
    self.assertEqual(r, ['unevenness'])

    _, r = self.anagrams2.get_anagrams("uneventful")
    self.assertEqual(r, ['uneventful'])

    _, r = self.anagrams2.get_anagrams("unexcused")
    self.assertEqual(r, ['unexcused'])

    _, r = self.anagrams2.get_anagrams("unexpanded")
    self.assertEqual(r, ['unexpanded'])

    _, r = self.anagrams2.get_anagrams("unexpected")
    self.assertEqual(r, ['unexpected'])

    _, r = self.anagrams2.get_anagrams("unexpectedly")
    self.assertEqual(r, ['unexpectedly'])

    _, r = self.anagrams2.get_anagrams("unexplained")
    self.assertEqual(r, ['unexplained'])

    _, r = self.anagrams2.get_anagrams("unexplored")
    self.assertEqual(r, ['unexplored'])

    _, r = self.anagrams2.get_anagrams("unextended")
    self.assertEqual(r, ['unextended'])

    _, r = self.anagrams2.get_anagrams("unfair")
    self.assertEqual(r, ['unfair'])

    _, r = self.anagrams2.get_anagrams("unfairly")
    self.assertEqual(r, ['unfairly'])

    _, r = self.anagrams2.get_anagrams("unfairness")
    self.assertEqual(r, ['unfairness'])

    _, r = self.anagrams2.get_anagrams("unfaithful")
    self.assertEqual(r, ['unfaithful'])

    _, r = self.anagrams2.get_anagrams("unfaithfully")
    self.assertEqual(r, ['unfaithfully'])

    _, r = self.anagrams2.get_anagrams("unfaithfulness")
    self.assertEqual(r, ['unfaithfulness'])

    _, r = self.anagrams2.get_anagrams("unfamiliar")
    self.assertEqual(r, ['unfamiliar'])

    _, r = self.anagrams2.get_anagrams("unfamiliarity")
    self.assertEqual(r, ['unfamiliarity'])

    _, r = self.anagrams2.get_anagrams("unfamiliarly")
    self.assertEqual(r, ['unfamiliarly'])

    _, r = self.anagrams2.get_anagrams("unfavorable")
    self.assertEqual(r, ['unfavorable'])

    _, r = self.anagrams2.get_anagrams("unfettered")
    self.assertEqual(r, ['unfettered'])

    _, r = self.anagrams2.get_anagrams("unfinished")
    self.assertEqual(r, ['unfinished'])

    _, r = self.anagrams2.get_anagrams("unfit")
    self.assertEqual(r, ['unfit'])

    _, r = self.anagrams2.get_anagrams("unfitness")
    self.assertEqual(r, ['unfitness'])

    _, r = self.anagrams2.get_anagrams("unflagging")
    self.assertEqual(r, ['unflagging'])

    _, r = self.anagrams2.get_anagrams("unfold")
    self.assertEqual(r, ['unfold'])

    _, r = self.anagrams2.get_anagrams("unfolded")
    self.assertEqual(r, ['unfolded'])

    _, r = self.anagrams2.get_anagrams("unfolding")
    self.assertEqual(r, ['foundling', 'unfolding'])

    _, r = self.anagrams2.get_anagrams("unfolds")
    self.assertEqual(r, ['unfolds'])

    _, r = self.anagrams2.get_anagrams("unforeseen")
    self.assertEqual(r, ['unforeseen'])

    _, r = self.anagrams2.get_anagrams("unforgeable")
    self.assertEqual(r, ['unforgeable'])

    _, r = self.anagrams2.get_anagrams("unforgiving")
    self.assertEqual(r, ['unforgiving'])

    _, r = self.anagrams2.get_anagrams("unformatted")
    self.assertEqual(r, ['unformatted'])

    _, r = self.anagrams2.get_anagrams("unfortunate")
    self.assertEqual(r, ['unfortunate'])

    _, r = self.anagrams2.get_anagrams("unfortunately")
    self.assertEqual(r, ['unfortunately'])

    _, r = self.anagrams2.get_anagrams("unfortunates")
    self.assertEqual(r, ['unfortunates'])

    _, r = self.anagrams2.get_anagrams("unfounded")
    self.assertEqual(r, ['unfounded'])

    _, r = self.anagrams2.get_anagrams("unfriendliness")
    self.assertEqual(r, ['unfriendliness'])

    _, r = self.anagrams2.get_anagrams("unfriendly")
    self.assertEqual(r, ['unfriendly'])

    _, r = self.anagrams2.get_anagrams("unfulfilled")
    self.assertEqual(r, ['unfulfilled'])

    _, r = self.anagrams2.get_anagrams("ungrammatical")
    self.assertEqual(r, ['ungrammatical'])

    _, r = self.anagrams2.get_anagrams("ungrateful")
    self.assertEqual(r, ['ungrateful'])

    _, r = self.anagrams2.get_anagrams("ungratefully")
    self.assertEqual(r, ['ungratefully'])

    _, r = self.anagrams2.get_anagrams("ungratefulness")
    self.assertEqual(r, ['ungratefulness'])

    _, r = self.anagrams2.get_anagrams("ungrounded")
    self.assertEqual(r, ['ungrounded'])

    _, r = self.anagrams2.get_anagrams("unguarded")
    self.assertEqual(r, ['unguarded'])

    _, r = self.anagrams2.get_anagrams("unguided")
    self.assertEqual(r, ['unguided'])

    _, r = self.anagrams2.get_anagrams("unhappier")
    self.assertEqual(r, ['unhappier'])

    _, r = self.anagrams2.get_anagrams("unhappiest")
    self.assertEqual(r, ['unhappiest'])

    _, r = self.anagrams2.get_anagrams("unhappily")
    self.assertEqual(r, ['unhappily'])

    _, r = self.anagrams2.get_anagrams("unhappiness")
    self.assertEqual(r, ['unhappiness'])

    _, r = self.anagrams2.get_anagrams("unhappy")
    self.assertEqual(r, ['unhappy'])

    _, r = self.anagrams2.get_anagrams("unharmed")
    self.assertEqual(r, ['unharmed'])

    _, r = self.anagrams2.get_anagrams("unhealthy")
    self.assertEqual(r, ['unhealthy'])

    _, r = self.anagrams2.get_anagrams("unheard")
    self.assertEqual(r, ['unheard'])

    _, r = self.anagrams2.get_anagrams("unheeded")
    self.assertEqual(r, ['unheeded'])

    _, r = self.anagrams2.get_anagrams("unibus")
    self.assertEqual(r, ['unibus'])

    _, r = self.anagrams2.get_anagrams("unicorn")
    self.assertEqual(r, ['unicorn'])

    _, r = self.anagrams2.get_anagrams("unicorns")
    self.assertEqual(r, ['unicorns'])

    _, r = self.anagrams2.get_anagrams("unicycle")
    self.assertEqual(r, ['unicycle'])

    _, r = self.anagrams2.get_anagrams("unidentified")
    self.assertEqual(r, ['unidentified'])

    _, r = self.anagrams2.get_anagrams("unidirectional")
    self.assertEqual(r, ['unidirectional'])

    _, r = self.anagrams2.get_anagrams("unidirectionality")
    self.assertEqual(r, ['unidirectionality'])

    _, r = self.anagrams2.get_anagrams("unidirectionally")
    self.assertEqual(r, ['unidirectionally'])

    _, r = self.anagrams2.get_anagrams("unification")
    self.assertEqual(r, ['unification'])

    _, r = self.anagrams2.get_anagrams("unifications")
    self.assertEqual(r, ['unifications'])

    _, r = self.anagrams2.get_anagrams("unified")
    self.assertEqual(r, ['unified'])

    _, r = self.anagrams2.get_anagrams("unifier")
    self.assertEqual(r, ['unifier'])

    _, r = self.anagrams2.get_anagrams("unifiers")
    self.assertEqual(r, ['unifiers'])

    _, r = self.anagrams2.get_anagrams("unifies")
    self.assertEqual(r, ['unifies'])

    _, r = self.anagrams2.get_anagrams("uniform")
    self.assertEqual(r, ['uniform'])

    _, r = self.anagrams2.get_anagrams("uniformed")
    self.assertEqual(r, ['uniformed'])

    _, r = self.anagrams2.get_anagrams("uniformity")
    self.assertEqual(r, ['uniformity'])

    _, r = self.anagrams2.get_anagrams("uniformly")
    self.assertEqual(r, ['uniformly'])

    _, r = self.anagrams2.get_anagrams("uniforms")
    self.assertEqual(r, ['uniforms'])

    _, r = self.anagrams2.get_anagrams("unify")
    self.assertEqual(r, ['unify'])

    _, r = self.anagrams2.get_anagrams("unifying")
    self.assertEqual(r, ['unifying'])

    _, r = self.anagrams2.get_anagrams("unilluminating")
    self.assertEqual(r, ['unilluminating'])

    _, r = self.anagrams2.get_anagrams("unimaginable")
    self.assertEqual(r, ['unimaginable'])

    _, r = self.anagrams2.get_anagrams("unimpeded")
    self.assertEqual(r, ['unimpeded'])

    _, r = self.anagrams2.get_anagrams("unimplemented")
    self.assertEqual(r, ['unimplemented'])

    _, r = self.anagrams2.get_anagrams("unimportant")
    self.assertEqual(r, ['unimportant'])

    _, r = self.anagrams2.get_anagrams("unindented")
    self.assertEqual(r, ['unindented', 'unintended'])

    _, r = self.anagrams2.get_anagrams("uninitialized")
    self.assertEqual(r, ['uninitialized'])

    _, r = self.anagrams2.get_anagrams("uninsulated")
    self.assertEqual(r, ['uninsulated'])

    _, r = self.anagrams2.get_anagrams("unintelligible")
    self.assertEqual(r, ['unintelligible'])

    _, r = self.anagrams2.get_anagrams("unintended")
    self.assertEqual(r, ['unindented', 'unintended'])

    _, r = self.anagrams2.get_anagrams("unintentional")
    self.assertEqual(r, ['unintentional'])

    _, r = self.anagrams2.get_anagrams("unintentionally")
    self.assertEqual(r, ['unintentionally'])

    _, r = self.anagrams2.get_anagrams("uninteresting")
    self.assertEqual(r, ['uninteresting'])

    _, r = self.anagrams2.get_anagrams("uninterestingly")
    self.assertEqual(r, ['uninterestingly'])

    _, r = self.anagrams2.get_anagrams("uninterpreted")
    self.assertEqual(r, ['uninterpreted'])

    _, r = self.anagrams2.get_anagrams("uninterrupted")
    self.assertEqual(r, ['uninterrupted'])

    _, r = self.anagrams2.get_anagrams("uninterruptedly")
    self.assertEqual(r, ['uninterruptedly'])

    _, r = self.anagrams2.get_anagrams("union")
    self.assertEqual(r, ['union'])

    _, r = self.anagrams2.get_anagrams("unionization")
    self.assertEqual(r, ['unionization'])

    _, r = self.anagrams2.get_anagrams("unionize")
    self.assertEqual(r, ['unionize'])

    _, r = self.anagrams2.get_anagrams("unionized")
    self.assertEqual(r, ['unionized'])

    _, r = self.anagrams2.get_anagrams("unionizer")
    self.assertEqual(r, ['unionizer'])

    _, r = self.anagrams2.get_anagrams("unionizers")
    self.assertEqual(r, ['unionizers'])

    _, r = self.anagrams2.get_anagrams("unionizes")
    self.assertEqual(r, ['unionizes'])

    _, r = self.anagrams2.get_anagrams("unionizing")
    self.assertEqual(r, ['unionizing'])

    _, r = self.anagrams2.get_anagrams("unions")
    self.assertEqual(r, ['unions', 'unison'])

    _, r = self.anagrams2.get_anagrams("uniplus")
    self.assertEqual(r, ['uniplus'])

    _, r = self.anagrams2.get_anagrams("uniprocessor")
    self.assertEqual(r, ['uniprocessor'])

    _, r = self.anagrams2.get_anagrams("unique")
    self.assertEqual(r, ['unique'])

    _, r = self.anagrams2.get_anagrams("uniquely")
    self.assertEqual(r, ['uniquely'])

    _, r = self.anagrams2.get_anagrams("uniqueness")
    self.assertEqual(r, ['uniqueness'])

    _, r = self.anagrams2.get_anagrams("uniroyal")
    self.assertEqual(r, ['uniroyal'])

    _, r = self.anagrams2.get_anagrams("unisoft")
    self.assertEqual(r, ['unisoft'])

    _, r = self.anagrams2.get_anagrams("unison")
    self.assertEqual(r, ['unions', 'unison'])

    _, r = self.anagrams2.get_anagrams("unit")
    self.assertEqual(r, ['unit'])

    _, r = self.anagrams2.get_anagrams("unitarian")
    self.assertEqual(r, ['unitarian'])

    _, r = self.anagrams2.get_anagrams("unitarianize")
    self.assertEqual(r, ['unitarianize'])

    _, r = self.anagrams2.get_anagrams("unitarianizes")
    self.assertEqual(r, ['unitarianizes'])

    _, r = self.anagrams2.get_anagrams("unitarians")
    self.assertEqual(r, ['unitarians'])

    _, r = self.anagrams2.get_anagrams("unite")
    self.assertEqual(r, ['unite', 'untie'])

    _, r = self.anagrams2.get_anagrams("united")
    self.assertEqual(r, ['united', 'untied'])

    _, r = self.anagrams2.get_anagrams("unites")
    self.assertEqual(r, ['unites', 'unties'])

    _, r = self.anagrams2.get_anagrams("unities")
    self.assertEqual(r, ['unities'])

    _, r = self.anagrams2.get_anagrams("uniting")
    self.assertEqual(r, ['uniting'])

    _, r = self.anagrams2.get_anagrams("units")
    self.assertEqual(r, ['tunis', 'units'])

    _, r = self.anagrams2.get_anagrams("unity")
    self.assertEqual(r, ['unity'])

    _, r = self.anagrams2.get_anagrams("univac")
    self.assertEqual(r, ['univac'])

    _, r = self.anagrams2.get_anagrams("univalve")
    self.assertEqual(r, ['univalve'])

    _, r = self.anagrams2.get_anagrams("univalves")
    self.assertEqual(r, ['univalves'])

    _, r = self.anagrams2.get_anagrams("universal")
    self.assertEqual(r, ['universal'])

    _, r = self.anagrams2.get_anagrams("universality")
    self.assertEqual(r, ['universality'])

    _, r = self.anagrams2.get_anagrams("universally")
    self.assertEqual(r, ['universally'])

    _, r = self.anagrams2.get_anagrams("universals")
    self.assertEqual(r, ['universals'])

    _, r = self.anagrams2.get_anagrams("universe")
    self.assertEqual(r, ['universe'])

    _, r = self.anagrams2.get_anagrams("universes")
    self.assertEqual(r, ['universes'])

    _, r = self.anagrams2.get_anagrams("universities")
    self.assertEqual(r, ['universities'])

    _, r = self.anagrams2.get_anagrams("university")
    self.assertEqual(r, ['university'])

    _, r = self.anagrams2.get_anagrams("unix")
    self.assertEqual(r, ['unix', 'unix'])

    _, r = self.anagrams2.get_anagrams("unix")
    self.assertEqual(r, ['unix', 'unix'])

    _, r = self.anagrams2.get_anagrams("unjust")
    self.assertEqual(r, ['unjust'])

    _, r = self.anagrams2.get_anagrams("unjustifiable")
    self.assertEqual(r, ['unjustifiable'])

    _, r = self.anagrams2.get_anagrams("unjustified")
    self.assertEqual(r, ['unjustified'])

    _, r = self.anagrams2.get_anagrams("unjustly")
    self.assertEqual(r, ['unjustly'])

    _, r = self.anagrams2.get_anagrams("unkind")
    self.assertEqual(r, ['unkind'])

    _, r = self.anagrams2.get_anagrams("unkindly")
    self.assertEqual(r, ['unkindly'])

    _, r = self.anagrams2.get_anagrams("unkindness")
    self.assertEqual(r, ['unkindness'])

    _, r = self.anagrams2.get_anagrams("unknowable")
    self.assertEqual(r, ['unknowable'])

    _, r = self.anagrams2.get_anagrams("unknowing")
    self.assertEqual(r, ['unknowing'])

    _, r = self.anagrams2.get_anagrams("unknowingly")
    self.assertEqual(r, ['unknowingly'])

    _, r = self.anagrams2.get_anagrams("unknown")
    self.assertEqual(r, ['unknown'])

    _, r = self.anagrams2.get_anagrams("unknowns")
    self.assertEqual(r, ['unknowns'])

    _, r = self.anagrams2.get_anagrams("unlabelled")
    self.assertEqual(r, ['unlabelled'])

    _, r = self.anagrams2.get_anagrams("unlawful")
    self.assertEqual(r, ['unlawful'])

    _, r = self.anagrams2.get_anagrams("unlawfully")
    self.assertEqual(r, ['unlawfully'])

    _, r = self.anagrams2.get_anagrams("unleash")
    self.assertEqual(r, ['unleash'])

    _, r = self.anagrams2.get_anagrams("unleashed")
    self.assertEqual(r, ['unleashed'])

    _, r = self.anagrams2.get_anagrams("unleashes")
    self.assertEqual(r, ['unleashes'])

    _, r = self.anagrams2.get_anagrams("unleashing")
    self.assertEqual(r, ['unleashing'])

    _, r = self.anagrams2.get_anagrams("unless")
    self.assertEqual(r, ['unless'])

    _, r = self.anagrams2.get_anagrams("unlike")
    self.assertEqual(r, ['unlike'])

    _, r = self.anagrams2.get_anagrams("unlikely")
    self.assertEqual(r, ['unlikely'])

    _, r = self.anagrams2.get_anagrams("unlikeness")
    self.assertEqual(r, ['unlikeness'])

    _, r = self.anagrams2.get_anagrams("unlimited")
    self.assertEqual(r, ['unlimited'])

    _, r = self.anagrams2.get_anagrams("unlink")
    self.assertEqual(r, ['unlink'])

    _, r = self.anagrams2.get_anagrams("unlinked")
    self.assertEqual(r, ['unlinked'])

    _, r = self.anagrams2.get_anagrams("unlinking")
    self.assertEqual(r, ['unlinking'])

    _, r = self.anagrams2.get_anagrams("unlinks")
    self.assertEqual(r, ['unlinks'])

    _, r = self.anagrams2.get_anagrams("unload")
    self.assertEqual(r, ['unload'])

    _, r = self.anagrams2.get_anagrams("unloaded")
    self.assertEqual(r, ['unloaded'])

    _, r = self.anagrams2.get_anagrams("unloading")
    self.assertEqual(r, ['unloading'])

    _, r = self.anagrams2.get_anagrams("unloads")
    self.assertEqual(r, ['unloads'])

    _, r = self.anagrams2.get_anagrams("unlock")
    self.assertEqual(r, ['unlock'])

    _, r = self.anagrams2.get_anagrams("unlocked")
    self.assertEqual(r, ['unlocked'])

    _, r = self.anagrams2.get_anagrams("unlocking")
    self.assertEqual(r, ['unlocking'])

    _, r = self.anagrams2.get_anagrams("unlocks")
    self.assertEqual(r, ['unlocks'])

    _, r = self.anagrams2.get_anagrams("unlucky")
    self.assertEqual(r, ['unlucky'])

    _, r = self.anagrams2.get_anagrams("unmanageable")
    self.assertEqual(r, ['unmanageable'])

    _, r = self.anagrams2.get_anagrams("unmanageably")
    self.assertEqual(r, ['unmanageably'])

    _, r = self.anagrams2.get_anagrams("unmanned")
    self.assertEqual(r, ['unmanned'])

    _, r = self.anagrams2.get_anagrams("unmarked")
    self.assertEqual(r, ['unmarked'])

    _, r = self.anagrams2.get_anagrams("unmarried")
    self.assertEqual(r, ['unmarried'])

    _, r = self.anagrams2.get_anagrams("unmask")
    self.assertEqual(r, ['unmask'])

    _, r = self.anagrams2.get_anagrams("unmasked")
    self.assertEqual(r, ['unmasked'])

    _, r = self.anagrams2.get_anagrams("unmatched")
    self.assertEqual(r, ['unmatched'])

    _, r = self.anagrams2.get_anagrams("unmentionable")
    self.assertEqual(r, ['unmentionable'])

    _, r = self.anagrams2.get_anagrams("unmerciful")
    self.assertEqual(r, ['unmerciful'])

    _, r = self.anagrams2.get_anagrams("unmercifully")
    self.assertEqual(r, ['unmercifully'])

    _, r = self.anagrams2.get_anagrams("unmistakable")
    self.assertEqual(r, ['unmistakable'])

    _, r = self.anagrams2.get_anagrams("unmistakably")
    self.assertEqual(r, ['unmistakably'])

    _, r = self.anagrams2.get_anagrams("unmodified")
    self.assertEqual(r, ['unmodified'])

    _, r = self.anagrams2.get_anagrams("unmoved")
    self.assertEqual(r, ['unmoved'])

    _, r = self.anagrams2.get_anagrams("unnamed")
    self.assertEqual(r, ['mundane', 'unnamed'])

    _, r = self.anagrams2.get_anagrams("unnatural")
    self.assertEqual(r, ['unnatural'])

    _, r = self.anagrams2.get_anagrams("unnaturally")
    self.assertEqual(r, ['unnaturally'])

    _, r = self.anagrams2.get_anagrams("unnaturalness")
    self.assertEqual(r, ['unnaturalness'])

    _, r = self.anagrams2.get_anagrams("unnecessarily")
    self.assertEqual(r, ['unnecessarily'])

    _, r = self.anagrams2.get_anagrams("unnecessary")
    self.assertEqual(r, ['unnecessary'])

    _, r = self.anagrams2.get_anagrams("unneeded")
    self.assertEqual(r, ['unneeded'])

    _, r = self.anagrams2.get_anagrams("unnerve")
    self.assertEqual(r, ['unnerve'])

    _, r = self.anagrams2.get_anagrams("unnerved")
    self.assertEqual(r, ['unnerved'])

    _, r = self.anagrams2.get_anagrams("unnerves")
    self.assertEqual(r, ['unnerves'])

    _, r = self.anagrams2.get_anagrams("unnerving")
    self.assertEqual(r, ['unnerving'])

    _, r = self.anagrams2.get_anagrams("unnoticed")
    self.assertEqual(r, ['continued', 'unnoticed'])

    _, r = self.anagrams2.get_anagrams("unobservable")
    self.assertEqual(r, ['unobservable'])

    _, r = self.anagrams2.get_anagrams("unobserved")
    self.assertEqual(r, ['unobserved'])

    _, r = self.anagrams2.get_anagrams("unobtainable")
    self.assertEqual(r, ['unobtainable'])

    _, r = self.anagrams2.get_anagrams("unoccupied")
    self.assertEqual(r, ['unoccupied'])

    _, r = self.anagrams2.get_anagrams("unofficial")
    self.assertEqual(r, ['unofficial'])

    _, r = self.anagrams2.get_anagrams("unofficially")
    self.assertEqual(r, ['unofficially'])

    _, r = self.anagrams2.get_anagrams("unopened")
    self.assertEqual(r, ['unopened'])

    _, r = self.anagrams2.get_anagrams("unordered")
    self.assertEqual(r, ['unordered'])

    _, r = self.anagrams2.get_anagrams("unpack")
    self.assertEqual(r, ['unpack'])

    _, r = self.anagrams2.get_anagrams("unpacked")
    self.assertEqual(r, ['unpacked'])

    _, r = self.anagrams2.get_anagrams("unpacking")
    self.assertEqual(r, ['unpacking'])

    _, r = self.anagrams2.get_anagrams("unpacks")
    self.assertEqual(r, ['unpacks'])

    _, r = self.anagrams2.get_anagrams("unpaid")
    self.assertEqual(r, ['unpaid'])

    _, r = self.anagrams2.get_anagrams("unparalleled")
    self.assertEqual(r, ['unparalleled'])

    _, r = self.anagrams2.get_anagrams("unparsed")
    self.assertEqual(r, ['unparsed'])

    _, r = self.anagrams2.get_anagrams("unplanned")
    self.assertEqual(r, ['unplanned'])

    _, r = self.anagrams2.get_anagrams("unpleasant")
    self.assertEqual(r, ['unpleasant'])

    _, r = self.anagrams2.get_anagrams("unpleasantly")
    self.assertEqual(r, ['unpleasantly'])

    _, r = self.anagrams2.get_anagrams("unpleasantness")
    self.assertEqual(r, ['unpleasantness'])

    _, r = self.anagrams2.get_anagrams("unplug")
    self.assertEqual(r, ['unplug'])

    _, r = self.anagrams2.get_anagrams("unpopular")
    self.assertEqual(r, ['unpopular'])

    _, r = self.anagrams2.get_anagrams("unpopularity")
    self.assertEqual(r, ['unpopularity'])

    _, r = self.anagrams2.get_anagrams("unprecedented")
    self.assertEqual(r, ['unprecedented'])

    _, r = self.anagrams2.get_anagrams("unpredictable")
    self.assertEqual(r, ['unpredictable'])

    _, r = self.anagrams2.get_anagrams("unpredictably")
    self.assertEqual(r, ['unpredictably'])

    _, r = self.anagrams2.get_anagrams("unprescribed")
    self.assertEqual(r, ['unprescribed'])

    _, r = self.anagrams2.get_anagrams("unpreserved")
    self.assertEqual(r, ['unpreserved'])

    _, r = self.anagrams2.get_anagrams("unprimed")
    self.assertEqual(r, ['unprimed'])

    _, r = self.anagrams2.get_anagrams("unprofitable")
    self.assertEqual(r, ['unprofitable'])

    _, r = self.anagrams2.get_anagrams("unprojected")
    self.assertEqual(r, ['unprojected'])

    _, r = self.anagrams2.get_anagrams("unprotected")
    self.assertEqual(r, ['unprotected'])

    _, r = self.anagrams2.get_anagrams("unprovability")
    self.assertEqual(r, ['unprovability'])

    _, r = self.anagrams2.get_anagrams("unprovable")
    self.assertEqual(r, ['unprovable'])

    _, r = self.anagrams2.get_anagrams("unproven")
    self.assertEqual(r, ['unproven'])

    _, r = self.anagrams2.get_anagrams("unpublished")
    self.assertEqual(r, ['unpublished'])

    _, r = self.anagrams2.get_anagrams("unqualified")
    self.assertEqual(r, ['unqualified'])

    _, r = self.anagrams2.get_anagrams("unqualifiedly")
    self.assertEqual(r, ['unqualifiedly'])

    _, r = self.anagrams2.get_anagrams("unquestionably")
    self.assertEqual(r, ['unquestionably'])

    _, r = self.anagrams2.get_anagrams("unquestioned")
    self.assertEqual(r, ['unquestioned'])

    _, r = self.anagrams2.get_anagrams("unquoted")
    self.assertEqual(r, ['unquoted'])

    _, r = self.anagrams2.get_anagrams("unravel")
    self.assertEqual(r, ['unravel'])

    _, r = self.anagrams2.get_anagrams("unraveled")
    self.assertEqual(r, ['unraveled'])

    _, r = self.anagrams2.get_anagrams("unraveling")
    self.assertEqual(r, ['unraveling'])

    _, r = self.anagrams2.get_anagrams("unravels")
    self.assertEqual(r, ['unravels'])

    _, r = self.anagrams2.get_anagrams("unreachable")
    self.assertEqual(r, ['unreachable'])

    _, r = self.anagrams2.get_anagrams("unreal")
    self.assertEqual(r, ['lauren', 'neural', 'unreal'])

    _, r = self.anagrams2.get_anagrams("unrealistic")
    self.assertEqual(r, ['unrealistic'])

    _, r = self.anagrams2.get_anagrams("unrealistically")
    self.assertEqual(r, ['unrealistically'])

    _, r = self.anagrams2.get_anagrams("unreasonable")
    self.assertEqual(r, ['unreasonable'])

    _, r = self.anagrams2.get_anagrams("unreasonableness")
    self.assertEqual(r, ['unreasonableness'])

    _, r = self.anagrams2.get_anagrams("unreasonably")
    self.assertEqual(r, ['unreasonably'])

    _, r = self.anagrams2.get_anagrams("unrecognizable")
    self.assertEqual(r, ['unrecognizable'])

    _, r = self.anagrams2.get_anagrams("unrecognized")
    self.assertEqual(r, ['unrecognized'])

    _, r = self.anagrams2.get_anagrams("unregulated")
    self.assertEqual(r, ['unregulated'])

    _, r = self.anagrams2.get_anagrams("unrelated")
    self.assertEqual(r, ['unaltered', 'unrelated'])

    _, r = self.anagrams2.get_anagrams("unreliability")
    self.assertEqual(r, ['unreliability'])

    _, r = self.anagrams2.get_anagrams("unreliable")
    self.assertEqual(r, ['unreliable'])

    _, r = self.anagrams2.get_anagrams("unreported")
    self.assertEqual(r, ['unreported'])

    _, r = self.anagrams2.get_anagrams("unrepresentable")
    self.assertEqual(r, ['unrepresentable'])

    _, r = self.anagrams2.get_anagrams("unresolved")
    self.assertEqual(r, ['unresolved'])

    _, r = self.anagrams2.get_anagrams("unresponsive")
    self.assertEqual(r, ['unresponsive'])

    _, r = self.anagrams2.get_anagrams("unrest")
    self.assertEqual(r, ['tuners', 'unrest'])

    _, r = self.anagrams2.get_anagrams("unrestrained")
    self.assertEqual(r, ['unrestrained'])

    _, r = self.anagrams2.get_anagrams("unrestricted")
    self.assertEqual(r, ['unrestricted'])

    _, r = self.anagrams2.get_anagrams("unrestrictedly")
    self.assertEqual(r, ['unrestrictedly'])

    _, r = self.anagrams2.get_anagrams("unrestrictive")
    self.assertEqual(r, ['unrestrictive'])

    _, r = self.anagrams2.get_anagrams("unroll")
    self.assertEqual(r, ['unroll'])

    _, r = self.anagrams2.get_anagrams("unrolled")
    self.assertEqual(r, ['unrolled'])

    _, r = self.anagrams2.get_anagrams("unrolling")
    self.assertEqual(r, ['unrolling'])

    _, r = self.anagrams2.get_anagrams("unrolls")
    self.assertEqual(r, ['unrolls'])

    _, r = self.anagrams2.get_anagrams("unruly")
    self.assertEqual(r, ['unruly'])

    _, r = self.anagrams2.get_anagrams("unsafe")
    self.assertEqual(r, ['unsafe'])

    _, r = self.anagrams2.get_anagrams("unsafely")
    self.assertEqual(r, ['unsafely'])

    _, r = self.anagrams2.get_anagrams("unsanitary")
    self.assertEqual(r, ['unsanitary'])

    _, r = self.anagrams2.get_anagrams("unsatisfactory")
    self.assertEqual(r, ['unsatisfactory'])

    _, r = self.anagrams2.get_anagrams("unsatisfiability")
    self.assertEqual(r, ['unsatisfiability'])

    _, r = self.anagrams2.get_anagrams("unsatisfiable")
    self.assertEqual(r, ['unsatisfiable'])

    _, r = self.anagrams2.get_anagrams("unsatisfied")
    self.assertEqual(r, ['unsatisfied'])

    _, r = self.anagrams2.get_anagrams("unsatisfying")
    self.assertEqual(r, ['unsatisfying'])

    _, r = self.anagrams2.get_anagrams("unscrupulous")
    self.assertEqual(r, ['unscrupulous'])

    _, r = self.anagrams2.get_anagrams("unseeded")
    self.assertEqual(r, ['unseeded'])

    _, r = self.anagrams2.get_anagrams("unseen")
    self.assertEqual(r, ['unseen'])

    _, r = self.anagrams2.get_anagrams("unselected")
    self.assertEqual(r, ['unselected'])

    _, r = self.anagrams2.get_anagrams("unselfish")
    self.assertEqual(r, ['unselfish'])

    _, r = self.anagrams2.get_anagrams("unselfishly")
    self.assertEqual(r, ['unselfishly'])

    _, r = self.anagrams2.get_anagrams("unselfishness")
    self.assertEqual(r, ['unselfishness'])

    _, r = self.anagrams2.get_anagrams("unsent")
    self.assertEqual(r, ['unsent'])

    _, r = self.anagrams2.get_anagrams("unsettled")
    self.assertEqual(r, ['unsettled'])

    _, r = self.anagrams2.get_anagrams("unsettling")
    self.assertEqual(r, ['unsettling'])

    _, r = self.anagrams2.get_anagrams("unshaken")
    self.assertEqual(r, ['unshaken'])

    _, r = self.anagrams2.get_anagrams("unshared")
    self.assertEqual(r, ['unshared'])

    _, r = self.anagrams2.get_anagrams("unsigned")
    self.assertEqual(r, ['unsigned'])

    _, r = self.anagrams2.get_anagrams("unskilled")
    self.assertEqual(r, ['unskilled'])

    _, r = self.anagrams2.get_anagrams("unslotted")
    self.assertEqual(r, ['unslotted'])

    _, r = self.anagrams2.get_anagrams("unsolvable")
    self.assertEqual(r, ['unsolvable'])

    _, r = self.anagrams2.get_anagrams("unsolved")
    self.assertEqual(r, ['unsolved'])

    _, r = self.anagrams2.get_anagrams("unsophisticated")
    self.assertEqual(r, ['unsophisticated'])

    _, r = self.anagrams2.get_anagrams("unsound")
    self.assertEqual(r, ['unsound'])

    _, r = self.anagrams2.get_anagrams("unspeakable")
    self.assertEqual(r, ['unspeakable'])

    _, r = self.anagrams2.get_anagrams("unspecified")
    self.assertEqual(r, ['unspecified'])

    _, r = self.anagrams2.get_anagrams("unstable")
    self.assertEqual(r, ['unstable'])

    _, r = self.anagrams2.get_anagrams("unsteadiness")
    self.assertEqual(r, ['unsteadiness'])

    _, r = self.anagrams2.get_anagrams("unsteady")
    self.assertEqual(r, ['unsteady'])

    _, r = self.anagrams2.get_anagrams("unstructured")
    self.assertEqual(r, ['unstructured'])

    _, r = self.anagrams2.get_anagrams("unsuccessful")
    self.assertEqual(r, ['unsuccessful'])

    _, r = self.anagrams2.get_anagrams("unsuccessfully")
    self.assertEqual(r, ['unsuccessfully'])

    _, r = self.anagrams2.get_anagrams("unsuitable")
    self.assertEqual(r, ['unsuitable'])

    _, r = self.anagrams2.get_anagrams("unsuited")
    self.assertEqual(r, ['unsuited'])

    _, r = self.anagrams2.get_anagrams("unsupported")
    self.assertEqual(r, ['unsupported'])

    _, r = self.anagrams2.get_anagrams("unsure")
    self.assertEqual(r, ['unsure'])

    _, r = self.anagrams2.get_anagrams("unsurprising")
    self.assertEqual(r, ['unsurprising'])

    _, r = self.anagrams2.get_anagrams("unsurprisingly")
    self.assertEqual(r, ['unsurprisingly'])

    _, r = self.anagrams2.get_anagrams("unsynchronized")
    self.assertEqual(r, ['unsynchronized'])

    _, r = self.anagrams2.get_anagrams("untagged")
    self.assertEqual(r, ['untagged'])

    _, r = self.anagrams2.get_anagrams("untapped")
    self.assertEqual(r, ['untapped'])

    _, r = self.anagrams2.get_anagrams("untenable")
    self.assertEqual(r, ['untenable'])

    _, r = self.anagrams2.get_anagrams("unterminated")
    self.assertEqual(r, ['unterminated'])

    _, r = self.anagrams2.get_anagrams("untested")
    self.assertEqual(r, ['untested'])

    _, r = self.anagrams2.get_anagrams("unthinkable")
    self.assertEqual(r, ['unthinkable'])

    _, r = self.anagrams2.get_anagrams("unthinking")
    self.assertEqual(r, ['unthinking'])

    _, r = self.anagrams2.get_anagrams("untidiness")
    self.assertEqual(r, ['untidiness'])

    _, r = self.anagrams2.get_anagrams("untidy")
    self.assertEqual(r, ['nudity', 'untidy'])

    _, r = self.anagrams2.get_anagrams("untie")
    self.assertEqual(r, ['unite', 'untie'])

    _, r = self.anagrams2.get_anagrams("untied")
    self.assertEqual(r, ['united', 'untied'])

    _, r = self.anagrams2.get_anagrams("unties")
    self.assertEqual(r, ['unites', 'unties'])

    _, r = self.anagrams2.get_anagrams("until")
    self.assertEqual(r, ['until'])

    _, r = self.anagrams2.get_anagrams("untimely")
    self.assertEqual(r, ['minutely', 'untimely'])

    _, r = self.anagrams2.get_anagrams("unto")
    self.assertEqual(r, ['unto'])

    _, r = self.anagrams2.get_anagrams("untold")
    self.assertEqual(r, ['untold'])

    _, r = self.anagrams2.get_anagrams("untouchable")
    self.assertEqual(r, ['untouchable'])

    _, r = self.anagrams2.get_anagrams("untouchables")
    self.assertEqual(r, ['untouchables'])

    _, r = self.anagrams2.get_anagrams("untouched")
    self.assertEqual(r, ['untouched'])

    _, r = self.anagrams2.get_anagrams("untoward")
    self.assertEqual(r, ['untoward'])

    _, r = self.anagrams2.get_anagrams("untrained")
    self.assertEqual(r, ['untrained'])

    _, r = self.anagrams2.get_anagrams("untranslated")
    self.assertEqual(r, ['untranslated'])

    _, r = self.anagrams2.get_anagrams("untreated")
    self.assertEqual(r, ['untreated'])

    _, r = self.anagrams2.get_anagrams("untried")
    self.assertEqual(r, ['intrude', 'untried'])

    _, r = self.anagrams2.get_anagrams("untrue")
    self.assertEqual(r, ['untrue'])

    _, r = self.anagrams2.get_anagrams("untruthful")
    self.assertEqual(r, ['untruthful'])

    _, r = self.anagrams2.get_anagrams("untruthfulness")
    self.assertEqual(r, ['untruthfulness'])

    _, r = self.anagrams2.get_anagrams("untying")
    self.assertEqual(r, ['untying'])

    _, r = self.anagrams2.get_anagrams("unusable")
    self.assertEqual(r, ['unusable'])

    _, r = self.anagrams2.get_anagrams("unused")
    self.assertEqual(r, ['unused'])

    _, r = self.anagrams2.get_anagrams("unusual")
    self.assertEqual(r, ['unusual'])

    _, r = self.anagrams2.get_anagrams("unusually")
    self.assertEqual(r, ['unusually'])

    _, r = self.anagrams2.get_anagrams("unvarying")
    self.assertEqual(r, ['unvarying'])

    _, r = self.anagrams2.get_anagrams("unveil")
    self.assertEqual(r, ['unveil'])

    _, r = self.anagrams2.get_anagrams("unveiled")
    self.assertEqual(r, ['unveiled'])

    _, r = self.anagrams2.get_anagrams("unveiling")
    self.assertEqual(r, ['unveiling'])

    _, r = self.anagrams2.get_anagrams("unveils")
    self.assertEqual(r, ['unveils'])

    _, r = self.anagrams2.get_anagrams("unwanted")
    self.assertEqual(r, ['unwanted'])

    _, r = self.anagrams2.get_anagrams("unwelcome")
    self.assertEqual(r, ['unwelcome'])

    _, r = self.anagrams2.get_anagrams("unwholesome")
    self.assertEqual(r, ['unwholesome'])

    _, r = self.anagrams2.get_anagrams("unwieldiness")
    self.assertEqual(r, ['unwieldiness'])

    _, r = self.anagrams2.get_anagrams("unwieldy")
    self.assertEqual(r, ['unwieldy'])

    _, r = self.anagrams2.get_anagrams("unwilling")
    self.assertEqual(r, ['unwilling'])

    _, r = self.anagrams2.get_anagrams("unwillingly")
    self.assertEqual(r, ['unwillingly'])

    _, r = self.anagrams2.get_anagrams("unwillingness")
    self.assertEqual(r, ['unwillingness'])

    _, r = self.anagrams2.get_anagrams("unwind")
    self.assertEqual(r, ['unwind'])

    _, r = self.anagrams2.get_anagrams("unwinder")
    self.assertEqual(r, ['unwinder'])

    _, r = self.anagrams2.get_anagrams("unwinders")
    self.assertEqual(r, ['unwinders'])

    _, r = self.anagrams2.get_anagrams("unwinding")
    self.assertEqual(r, ['unwinding'])

    _, r = self.anagrams2.get_anagrams("unwinds")
    self.assertEqual(r, ['unwinds'])

    _, r = self.anagrams2.get_anagrams("unwise")
    self.assertEqual(r, ['unwise'])

    _, r = self.anagrams2.get_anagrams("unwisely")
    self.assertEqual(r, ['unwisely'])

    _, r = self.anagrams2.get_anagrams("unwiser")
    self.assertEqual(r, ['unwiser'])

    _, r = self.anagrams2.get_anagrams("unwisest")
    self.assertEqual(r, ['unwisest'])

    _, r = self.anagrams2.get_anagrams("unwitting")
    self.assertEqual(r, ['unwitting'])

    _, r = self.anagrams2.get_anagrams("unwittingly")
    self.assertEqual(r, ['unwittingly'])

    _, r = self.anagrams2.get_anagrams("unworthiness")
    self.assertEqual(r, ['unworthiness'])

    _, r = self.anagrams2.get_anagrams("unworthy")
    self.assertEqual(r, ['unworthy'])

    _, r = self.anagrams2.get_anagrams("unwound")
    self.assertEqual(r, ['unwound'])

    _, r = self.anagrams2.get_anagrams("unwrap")
    self.assertEqual(r, ['unwrap'])

    _, r = self.anagrams2.get_anagrams("unwrapped")
    self.assertEqual(r, ['unwrapped'])

    _, r = self.anagrams2.get_anagrams("unwrapping")
    self.assertEqual(r, ['unwrapping'])

    _, r = self.anagrams2.get_anagrams("unwraps")
    self.assertEqual(r, ['unwraps'])

    _, r = self.anagrams2.get_anagrams("unwritten")
    self.assertEqual(r, ['unwritten'])

    _, r = self.anagrams2.get_anagrams("up")
    self.assertEqual(r, ['up'])

    _, r = self.anagrams2.get_anagrams("upbraid")
    self.assertEqual(r, ['upbraid'])

    _, r = self.anagrams2.get_anagrams("upcoming")
    self.assertEqual(r, ['upcoming'])

    _, r = self.anagrams2.get_anagrams("update")
    self.assertEqual(r, ['update'])

    _, r = self.anagrams2.get_anagrams("updated")
    self.assertEqual(r, ['updated'])

    _, r = self.anagrams2.get_anagrams("updater")
    self.assertEqual(r, ['updater'])

    _, r = self.anagrams2.get_anagrams("updates")
    self.assertEqual(r, ['updates'])

    _, r = self.anagrams2.get_anagrams("updating")
    self.assertEqual(r, ['updating'])

    _, r = self.anagrams2.get_anagrams("upgrade")
    self.assertEqual(r, ['upgrade'])

    _, r = self.anagrams2.get_anagrams("upgraded")
    self.assertEqual(r, ['upgraded'])

    _, r = self.anagrams2.get_anagrams("upgrades")
    self.assertEqual(r, ['upgrades'])

    _, r = self.anagrams2.get_anagrams("upgrading")
    self.assertEqual(r, ['upgrading'])

    _, r = self.anagrams2.get_anagrams("upheld")
    self.assertEqual(r, ['upheld'])

    _, r = self.anagrams2.get_anagrams("uphill")
    self.assertEqual(r, ['uphill'])

    _, r = self.anagrams2.get_anagrams("uphold")
    self.assertEqual(r, ['uphold'])

    _, r = self.anagrams2.get_anagrams("upholder")
    self.assertEqual(r, ['upholder'])

    _, r = self.anagrams2.get_anagrams("upholders")
    self.assertEqual(r, ['upholders'])

    _, r = self.anagrams2.get_anagrams("upholding")
    self.assertEqual(r, ['upholding'])

    _, r = self.anagrams2.get_anagrams("upholds")
    self.assertEqual(r, ['upholds'])

    _, r = self.anagrams2.get_anagrams("upholster")
    self.assertEqual(r, ['upholster'])

    _, r = self.anagrams2.get_anagrams("upholstered")
    self.assertEqual(r, ['upholstered'])

    _, r = self.anagrams2.get_anagrams("upholsterer")
    self.assertEqual(r, ['upholsterer'])

    _, r = self.anagrams2.get_anagrams("upholstering")
    self.assertEqual(r, ['upholstering'])

    _, r = self.anagrams2.get_anagrams("upholsters")
    self.assertEqual(r, ['upholsters'])

    _, r = self.anagrams2.get_anagrams("upkeep")
    self.assertEqual(r, ['upkeep'])

    _, r = self.anagrams2.get_anagrams("upland")
    self.assertEqual(r, ['dunlap', 'upland'])

    _, r = self.anagrams2.get_anagrams("uplands")
    self.assertEqual(r, ['uplands'])

    _, r = self.anagrams2.get_anagrams("uplift")
    self.assertEqual(r, ['uplift'])

    _, r = self.anagrams2.get_anagrams("uplink")
    self.assertEqual(r, ['uplink'])

    _, r = self.anagrams2.get_anagrams("uplinks")
    self.assertEqual(r, ['uplinks'])

    _, r = self.anagrams2.get_anagrams("upload")
    self.assertEqual(r, ['upload'])

    _, r = self.anagrams2.get_anagrams("upon")
    self.assertEqual(r, ['upon'])

    _, r = self.anagrams2.get_anagrams("upper")
    self.assertEqual(r, ['upper'])

    _, r = self.anagrams2.get_anagrams("uppermost")
    self.assertEqual(r, ['uppermost'])

    _, r = self.anagrams2.get_anagrams("upright")
    self.assertEqual(r, ['upright'])

    _, r = self.anagrams2.get_anagrams("uprightly")
    self.assertEqual(r, ['uprightly'])

    _, r = self.anagrams2.get_anagrams("uprightness")
    self.assertEqual(r, ['uprightness'])

    _, r = self.anagrams2.get_anagrams("uprising")
    self.assertEqual(r, ['uprising'])

    _, r = self.anagrams2.get_anagrams("uprisings")
    self.assertEqual(r, ['uprisings'])

    _, r = self.anagrams2.get_anagrams("uproar")
    self.assertEqual(r, ['uproar'])

    _, r = self.anagrams2.get_anagrams("uproot")
    self.assertEqual(r, ['uproot'])

    _, r = self.anagrams2.get_anagrams("uprooted")
    self.assertEqual(r, ['uprooted'])

    _, r = self.anagrams2.get_anagrams("uprooting")
    self.assertEqual(r, ['uprooting'])

    _, r = self.anagrams2.get_anagrams("uproots")
    self.assertEqual(r, ['uproots'])

    _, r = self.anagrams2.get_anagrams("upset")
    self.assertEqual(r, ['setup', 'upset'])

    _, r = self.anagrams2.get_anagrams("upsets")
    self.assertEqual(r, ['setups', 'upsets'])

    _, r = self.anagrams2.get_anagrams("upshot")
    self.assertEqual(r, ['upshot'])

    _, r = self.anagrams2.get_anagrams("upshots")
    self.assertEqual(r, ['upshots'])

    _, r = self.anagrams2.get_anagrams("upside")
    self.assertEqual(r, ['upside'])

    _, r = self.anagrams2.get_anagrams("upstairs")
    self.assertEqual(r, ['upstairs'])

    _, r = self.anagrams2.get_anagrams("upstream")
    self.assertEqual(r, ['upstream'])

    _, r = self.anagrams2.get_anagrams("upton")
    self.assertEqual(r, ['upton'])

    _, r = self.anagrams2.get_anagrams("upturn")
    self.assertEqual(r, ['upturn'])

    _, r = self.anagrams2.get_anagrams("upturned")
    self.assertEqual(r, ['upturned'])

    _, r = self.anagrams2.get_anagrams("upturning")
    self.assertEqual(r, ['upturning'])

    _, r = self.anagrams2.get_anagrams("upturns")
    self.assertEqual(r, ['upturns'])

    _, r = self.anagrams2.get_anagrams("upward")
    self.assertEqual(r, ['upward'])

    _, r = self.anagrams2.get_anagrams("upwards")
    self.assertEqual(r, ['upwards'])

    _, r = self.anagrams2.get_anagrams("urania")
    self.assertEqual(r, ['urania'])

    _, r = self.anagrams2.get_anagrams("uranus")
    self.assertEqual(r, ['uranus'])

    _, r = self.anagrams2.get_anagrams("urban")
    self.assertEqual(r, ['braun', 'urban'])

    _, r = self.anagrams2.get_anagrams("urbana")
    self.assertEqual(r, ['urbana'])

    _, r = self.anagrams2.get_anagrams("urchin")
    self.assertEqual(r, ['urchin'])

    _, r = self.anagrams2.get_anagrams("urchins")
    self.assertEqual(r, ['urchins'])

    _, r = self.anagrams2.get_anagrams("urdu")
    self.assertEqual(r, ['urdu'])

    _, r = self.anagrams2.get_anagrams("urge")
    self.assertEqual(r, ['urge'])

    _, r = self.anagrams2.get_anagrams("urged")
    self.assertEqual(r, ['urged'])

    _, r = self.anagrams2.get_anagrams("urgent")
    self.assertEqual(r, ['urgent'])

    _, r = self.anagrams2.get_anagrams("urgently")
    self.assertEqual(r, ['urgently'])

    _, r = self.anagrams2.get_anagrams("urges")
    self.assertEqual(r, ['surge', 'urges'])

    _, r = self.anagrams2.get_anagrams("urging")
    self.assertEqual(r, ['urging'])

    _, r = self.anagrams2.get_anagrams("urgings")
    self.assertEqual(r, ['surging', 'urgings'])

    _, r = self.anagrams2.get_anagrams("uri")
    self.assertEqual(r, ['uri'])

    _, r = self.anagrams2.get_anagrams("urinate")
    self.assertEqual(r, ['urinate'])

    _, r = self.anagrams2.get_anagrams("urinated")
    self.assertEqual(r, ['urinated'])

    _, r = self.anagrams2.get_anagrams("urinates")
    self.assertEqual(r, ['urinates'])

    _, r = self.anagrams2.get_anagrams("urinating")
    self.assertEqual(r, ['urinating'])

    _, r = self.anagrams2.get_anagrams("urination")
    self.assertEqual(r, ['ruination', 'urination'])

    _, r = self.anagrams2.get_anagrams("urine")
    self.assertEqual(r, ['urine'])

    _, r = self.anagrams2.get_anagrams("uris")
    self.assertEqual(r, ['uris'])

    _, r = self.anagrams2.get_anagrams("urn")
    self.assertEqual(r, ['run', 'urn'])

    _, r = self.anagrams2.get_anagrams("urns")
    self.assertEqual(r, ['runs', 'urns'])

    _, r = self.anagrams2.get_anagrams("urquhart")
    self.assertEqual(r, ['urquhart'])

    _, r = self.anagrams2.get_anagrams("ursa")
    self.assertEqual(r, ['ursa'])

    _, r = self.anagrams2.get_anagrams("ursula")
    self.assertEqual(r, ['ursula'])

    _, r = self.anagrams2.get_anagrams("ursuline")
    self.assertEqual(r, ['ursuline'])

    _, r = self.anagrams2.get_anagrams("uruguay")
    self.assertEqual(r, ['uruguay'])

    _, r = self.anagrams2.get_anagrams("uruguay'a")
    self.assertEqual(r, ["uruguay'a"])

    _, r = self.anagrams2.get_anagrams("uruguayan")
    self.assertEqual(r, ['uruguayan'])

    _, r = self.anagrams2.get_anagrams("uruguayans")
    self.assertEqual(r, ['uruguayans'])

    _, r = self.anagrams2.get_anagrams("us")
    self.assertEqual(r, ['us'])

    _, r = self.anagrams2.get_anagrams("usability")
    self.assertEqual(r, ['usability'])

    _, r = self.anagrams2.get_anagrams("usable")
    self.assertEqual(r, ['usable'])

    _, r = self.anagrams2.get_anagrams("usably")
    self.assertEqual(r, ['usably'])

    _, r = self.anagrams2.get_anagrams("usage")
    self.assertEqual(r, ['usage'])

    _, r = self.anagrams2.get_anagrams("usages")
    self.assertEqual(r, ['usages'])

    _, r = self.anagrams2.get_anagrams("use")
    self.assertEqual(r, ['sue', 'use'])

    _, r = self.anagrams2.get_anagrams("used")
    self.assertEqual(r, ['deus', 'dues', 'sued', 'used'])

    _, r = self.anagrams2.get_anagrams("useful")
    self.assertEqual(r, ['useful'])

    _, r = self.anagrams2.get_anagrams("usefully")
    self.assertEqual(r, ['usefully'])

    _, r = self.anagrams2.get_anagrams("usefulness")
    self.assertEqual(r, ['usefulness'])

    _, r = self.anagrams2.get_anagrams("useless")
    self.assertEqual(r, ['useless'])

    _, r = self.anagrams2.get_anagrams("uselessly")
    self.assertEqual(r, ['uselessly'])

    _, r = self.anagrams2.get_anagrams("uselessness")
    self.assertEqual(r, ['uselessness'])

    _, r = self.anagrams2.get_anagrams("usenet")
    self.assertEqual(r, ['usenet'])

    _, r = self.anagrams2.get_anagrams("usenix")
    self.assertEqual(r, ['usenix'])

    _, r = self.anagrams2.get_anagrams("user")
    self.assertEqual(r, ['sure', 'user'])

    _, r = self.anagrams2.get_anagrams("users")
    self.assertEqual(r, ['users'])

    _, r = self.anagrams2.get_anagrams("uses")
    self.assertEqual(r, ['sues', 'uses'])

    _, r = self.anagrams2.get_anagrams("usher")
    self.assertEqual(r, ['usher'])

    _, r = self.anagrams2.get_anagrams("ushered")
    self.assertEqual(r, ['ushered'])

    _, r = self.anagrams2.get_anagrams("ushering")
    self.assertEqual(r, ['ushering'])

    _, r = self.anagrams2.get_anagrams("ushers")
    self.assertEqual(r, ['rhesus', 'rushes', 'ushers'])

    _, r = self.anagrams2.get_anagrams("using")
    self.assertEqual(r, ['suing', 'using'])

    _, r = self.anagrams2.get_anagrams("usual")
    self.assertEqual(r, ['usual'])

    _, r = self.anagrams2.get_anagrams("usually")
    self.assertEqual(r, ['usually'])

    _, r = self.anagrams2.get_anagrams("usurp")
    self.assertEqual(r, ['usurp'])

    _, r = self.anagrams2.get_anagrams("usurped")
    self.assertEqual(r, ['pursued', 'usurped'])

    _, r = self.anagrams2.get_anagrams("usurper")
    self.assertEqual(r, ['pursuer', 'usurper'])

    _, r = self.anagrams2.get_anagrams("utah")
    self.assertEqual(r, ['utah'])

    _, r = self.anagrams2.get_anagrams("utensil")
    self.assertEqual(r, ['utensil'])

    _, r = self.anagrams2.get_anagrams("utensils")
    self.assertEqual(r, ['utensils'])

    _, r = self.anagrams2.get_anagrams("utica")
    self.assertEqual(r, ['utica'])

    _, r = self.anagrams2.get_anagrams("utilities")
    self.assertEqual(r, ['utilities'])

    _, r = self.anagrams2.get_anagrams("utility")
    self.assertEqual(r, ['utility'])

    _, r = self.anagrams2.get_anagrams("utilization")
    self.assertEqual(r, ['utilization'])

    _, r = self.anagrams2.get_anagrams("utilizations")
    self.assertEqual(r, ['utilizations'])

    _, r = self.anagrams2.get_anagrams("utilize")
    self.assertEqual(r, ['utilize'])

    _, r = self.anagrams2.get_anagrams("utilized")
    self.assertEqual(r, ['utilized'])

    _, r = self.anagrams2.get_anagrams("utilizes")
    self.assertEqual(r, ['utilizes'])

    _, r = self.anagrams2.get_anagrams("utilizing")
    self.assertEqual(r, ['utilizing'])

    _, r = self.anagrams2.get_anagrams("utmost")
    self.assertEqual(r, ['utmost'])

    _, r = self.anagrams2.get_anagrams("utopia")
    self.assertEqual(r, ['utopia'])

    _, r = self.anagrams2.get_anagrams("utopian")
    self.assertEqual(r, ['utopian'])

    _, r = self.anagrams2.get_anagrams("utopianize")
    self.assertEqual(r, ['utopianize'])

    _, r = self.anagrams2.get_anagrams("utopianizes")
    self.assertEqual(r, ['utopianizes'])

    _, r = self.anagrams2.get_anagrams("utopians")
    self.assertEqual(r, ['utopians'])

    _, r = self.anagrams2.get_anagrams("utrecht")
    self.assertEqual(r, ['utrecht'])

    _, r = self.anagrams2.get_anagrams("utter")
    self.assertEqual(r, ['utter'])

    _, r = self.anagrams2.get_anagrams("utterance")
    self.assertEqual(r, ['utterance'])

    _, r = self.anagrams2.get_anagrams("utterances")
    self.assertEqual(r, ['utterances'])

    _, r = self.anagrams2.get_anagrams("uttered")
    self.assertEqual(r, ['uttered'])

    _, r = self.anagrams2.get_anagrams("uttering")
    self.assertEqual(r, ['uttering'])

    _, r = self.anagrams2.get_anagrams("utterly")
    self.assertEqual(r, ['utterly'])

    _, r = self.anagrams2.get_anagrams("uttermost")
    self.assertEqual(r, ['uttermost'])

    _, r = self.anagrams2.get_anagrams("utters")
    self.assertEqual(r, ['truest', 'utters'])

    _, r = self.anagrams2.get_anagrams("uzi")
    self.assertEqual(r, ['uzi'])

    _, r = self.anagrams2.get_anagrams("vacancies")
    self.assertEqual(r, ['vacancies'])

    _, r = self.anagrams2.get_anagrams("vacancy")
    self.assertEqual(r, ['vacancy'])

    _, r = self.anagrams2.get_anagrams("vacant")
    self.assertEqual(r, ['vacant'])

    _, r = self.anagrams2.get_anagrams("vacantly")
    self.assertEqual(r, ['vacantly'])

    _, r = self.anagrams2.get_anagrams("vacate")
    self.assertEqual(r, ['caveat', 'vacate'])

    _, r = self.anagrams2.get_anagrams("vacated")
    self.assertEqual(r, ['vacated'])

    _, r = self.anagrams2.get_anagrams("vacates")
    self.assertEqual(r, ['caveats', 'vacates'])

    _, r = self.anagrams2.get_anagrams("vacating")
    self.assertEqual(r, ['vacating'])

    _, r = self.anagrams2.get_anagrams("vacation")
    self.assertEqual(r, ['vacation'])

    _, r = self.anagrams2.get_anagrams("vacationed")
    self.assertEqual(r, ['vacationed'])

    _, r = self.anagrams2.get_anagrams("vacationer")
    self.assertEqual(r, ['vacationer'])

    _, r = self.anagrams2.get_anagrams("vacationers")
    self.assertEqual(r, ['vacationers'])

    _, r = self.anagrams2.get_anagrams("vacationing")
    self.assertEqual(r, ['vacationing'])

    _, r = self.anagrams2.get_anagrams("vacations")
    self.assertEqual(r, ['vacations'])

    _, r = self.anagrams2.get_anagrams("vacuo")
    self.assertEqual(r, ['vacuo'])

    _, r = self.anagrams2.get_anagrams("vacuous")
    self.assertEqual(r, ['vacuous'])

    _, r = self.anagrams2.get_anagrams("vacuously")
    self.assertEqual(r, ['vacuously'])

    _, r = self.anagrams2.get_anagrams("vacuum")
    self.assertEqual(r, ['vacuum'])

    _, r = self.anagrams2.get_anagrams("vacuumed")
    self.assertEqual(r, ['vacuumed'])

    _, r = self.anagrams2.get_anagrams("vacuuming")
    self.assertEqual(r, ['vacuuming'])

    _, r = self.anagrams2.get_anagrams("vaduz")
    self.assertEqual(r, ['vaduz'])

    _, r = self.anagrams2.get_anagrams("vagabond")
    self.assertEqual(r, ['vagabond'])

    _, r = self.anagrams2.get_anagrams("vagabonds")
    self.assertEqual(r, ['vagabonds'])

    _, r = self.anagrams2.get_anagrams("vagaries")
    self.assertEqual(r, ['vagaries'])

    _, r = self.anagrams2.get_anagrams("vagary")
    self.assertEqual(r, ['vagary'])

    _, r = self.anagrams2.get_anagrams("vagina")
    self.assertEqual(r, ['vagina'])

    _, r = self.anagrams2.get_anagrams("vaginas")
    self.assertEqual(r, ['vaginas'])

    _, r = self.anagrams2.get_anagrams("vagrant")
    self.assertEqual(r, ['vagrant'])

    _, r = self.anagrams2.get_anagrams("vagrantly")
    self.assertEqual(r, ['vagrantly'])

    _, r = self.anagrams2.get_anagrams("vague")
    self.assertEqual(r, ['vague'])

    _, r = self.anagrams2.get_anagrams("vaguely")
    self.assertEqual(r, ['vaguely'])

    _, r = self.anagrams2.get_anagrams("vagueness")
    self.assertEqual(r, ['vagueness'])

    _, r = self.anagrams2.get_anagrams("vaguer")
    self.assertEqual(r, ['vaguer'])

    _, r = self.anagrams2.get_anagrams("vaguest")
    self.assertEqual(r, ['gustave', 'vaguest'])

    _, r = self.anagrams2.get_anagrams("vail")
    self.assertEqual(r, ['vail', 'vial'])

    _, r = self.anagrams2.get_anagrams("vain")
    self.assertEqual(r, ['ivan', 'vain'])

    _, r = self.anagrams2.get_anagrams("vainly")
    self.assertEqual(r, ['vainly'])

    _, r = self.anagrams2.get_anagrams("vale")
    self.assertEqual(r, ['vale', 'veal', 'vela'])

    _, r = self.anagrams2.get_anagrams("valence")
    self.assertEqual(r, ['valence'])

    _, r = self.anagrams2.get_anagrams("valences")
    self.assertEqual(r, ['valences'])

    _, r = self.anagrams2.get_anagrams("valentine")
    self.assertEqual(r, ['valentine'])

    _, r = self.anagrams2.get_anagrams("valentines")
    self.assertEqual(r, ['valentines'])

    _, r = self.anagrams2.get_anagrams("valerie")
    self.assertEqual(r, ['valerie'])

    _, r = self.anagrams2.get_anagrams("valery")
    self.assertEqual(r, ['valery'])

    _, r = self.anagrams2.get_anagrams("vales")
    self.assertEqual(r, ['salve', 'slave', 'vales'])

    _, r = self.anagrams2.get_anagrams("valet")
    self.assertEqual(r, ['valet'])

    _, r = self.anagrams2.get_anagrams("valets")
    self.assertEqual(r, ['valets'])

    _, r = self.anagrams2.get_anagrams("valhalla")
    self.assertEqual(r, ['valhalla'])

    _, r = self.anagrams2.get_anagrams("valiant")
    self.assertEqual(r, ['valiant'])

    _, r = self.anagrams2.get_anagrams("valiantly")
    self.assertEqual(r, ['valiantly'])

    _, r = self.anagrams2.get_anagrams("valid")
    self.assertEqual(r, ['valid', 'vidal'])

    _, r = self.anagrams2.get_anagrams("validate")
    self.assertEqual(r, ['validate'])

    _, r = self.anagrams2.get_anagrams("validated")
    self.assertEqual(r, ['validated'])

    _, r = self.anagrams2.get_anagrams("validates")
    self.assertEqual(r, ['validates'])

    _, r = self.anagrams2.get_anagrams("validating")
    self.assertEqual(r, ['validating'])

    _, r = self.anagrams2.get_anagrams("validation")
    self.assertEqual(r, ['validation'])

    _, r = self.anagrams2.get_anagrams("validity")
    self.assertEqual(r, ['validity'])

    _, r = self.anagrams2.get_anagrams("validly")
    self.assertEqual(r, ['validly'])

    _, r = self.anagrams2.get_anagrams("validness")
    self.assertEqual(r, ['validness'])

    _, r = self.anagrams2.get_anagrams("valkyrie")
    self.assertEqual(r, ['valkyrie'])

    _, r = self.anagrams2.get_anagrams("valletta")
    self.assertEqual(r, ['valletta'])

    _, r = self.anagrams2.get_anagrams("valley")
    self.assertEqual(r, ['valley'])

    _, r = self.anagrams2.get_anagrams("valleys")
    self.assertEqual(r, ['valleys'])

    _, r = self.anagrams2.get_anagrams("valois")
    self.assertEqual(r, ['valois'])

    _, r = self.anagrams2.get_anagrams("valor")
    self.assertEqual(r, ['valor'])

    _, r = self.anagrams2.get_anagrams("valparaiso")
    self.assertEqual(r, ['valparaiso'])

    _, r = self.anagrams2.get_anagrams("valuable")
    self.assertEqual(r, ['valuable'])

    _, r = self.anagrams2.get_anagrams("valuables")
    self.assertEqual(r, ['valuables'])

    _, r = self.anagrams2.get_anagrams("valuably")
    self.assertEqual(r, ['valuably'])

    _, r = self.anagrams2.get_anagrams("valuation")
    self.assertEqual(r, ['valuation'])

    _, r = self.anagrams2.get_anagrams("valuations")
    self.assertEqual(r, ['valuations'])

    _, r = self.anagrams2.get_anagrams("value")
    self.assertEqual(r, ['value'])

    _, r = self.anagrams2.get_anagrams("valued")
    self.assertEqual(r, ['valued'])

    _, r = self.anagrams2.get_anagrams("valuer")
    self.assertEqual(r, ['valuer'])

    _, r = self.anagrams2.get_anagrams("valuers")
    self.assertEqual(r, ['valuers'])

    _, r = self.anagrams2.get_anagrams("values")
    self.assertEqual(r, ['values'])

    _, r = self.anagrams2.get_anagrams("valuing")
    self.assertEqual(r, ['valuing'])

    _, r = self.anagrams2.get_anagrams("valve")
    self.assertEqual(r, ['valve'])

    _, r = self.anagrams2.get_anagrams("valves")
    self.assertEqual(r, ['valves'])

    _, r = self.anagrams2.get_anagrams("vampire")
    self.assertEqual(r, ['vampire'])

    _, r = self.anagrams2.get_anagrams("van")
    self.assertEqual(r, ['van'])

    _, r = self.anagrams2.get_anagrams("vance")
    self.assertEqual(r, ['vance'])

    _, r = self.anagrams2.get_anagrams("vancement")
    self.assertEqual(r, ['vancement'])

    _, r = self.anagrams2.get_anagrams("vancouver")
    self.assertEqual(r, ['vancouver'])

    _, r = self.anagrams2.get_anagrams("vandalize")
    self.assertEqual(r, ['vandalize'])

    _, r = self.anagrams2.get_anagrams("vandalized")
    self.assertEqual(r, ['vandalized'])

    _, r = self.anagrams2.get_anagrams("vandalizes")
    self.assertEqual(r, ['vandalizes'])

    _, r = self.anagrams2.get_anagrams("vandalizing")
    self.assertEqual(r, ['vandalizing'])

    _, r = self.anagrams2.get_anagrams("vandenberg")
    self.assertEqual(r, ['vandenberg'])

    _, r = self.anagrams2.get_anagrams("vanderbilt")
    self.assertEqual(r, ['vanderbilt'])

    _, r = self.anagrams2.get_anagrams("vanderburgh")
    self.assertEqual(r, ['vanderburgh'])

    _, r = self.anagrams2.get_anagrams("vanderpoel")
    self.assertEqual(r, ['vanderpoel'])

    _, r = self.anagrams2.get_anagrams("vane")
    self.assertEqual(r, ['neva', 'vane'])

    _, r = self.anagrams2.get_anagrams("vanes")
    self.assertEqual(r, ['evans', 'vanes'])

    _, r = self.anagrams2.get_anagrams("vanessa")
    self.assertEqual(r, ['vanessa'])

    _, r = self.anagrams2.get_anagrams("vanguard")
    self.assertEqual(r, ['vanguard'])

    _, r = self.anagrams2.get_anagrams("vanilla")
    self.assertEqual(r, ['vanilla'])

    _, r = self.anagrams2.get_anagrams("vanish")
    self.assertEqual(r, ['vanish'])

    _, r = self.anagrams2.get_anagrams("vanished")
    self.assertEqual(r, ['vanished'])

    _, r = self.anagrams2.get_anagrams("vanisher")
    self.assertEqual(r, ['vanisher'])

    _, r = self.anagrams2.get_anagrams("vanishes")
    self.assertEqual(r, ['vanishes'])

    _, r = self.anagrams2.get_anagrams("vanishing")
    self.assertEqual(r, ['vanishing'])

    _, r = self.anagrams2.get_anagrams("vanishingly")
    self.assertEqual(r, ['vanishingly'])

    _, r = self.anagrams2.get_anagrams("vanities")
    self.assertEqual(r, ['vanities'])

    _, r = self.anagrams2.get_anagrams("vanity")
    self.assertEqual(r, ['vanity'])

    _, r = self.anagrams2.get_anagrams("vanquish")
    self.assertEqual(r, ['vanquish'])

    _, r = self.anagrams2.get_anagrams("vanquished")
    self.assertEqual(r, ['vanquished'])

    _, r = self.anagrams2.get_anagrams("vanquishes")
    self.assertEqual(r, ['vanquishes'])

    _, r = self.anagrams2.get_anagrams("vanquishing")
    self.assertEqual(r, ['vanquishing'])

    _, r = self.anagrams2.get_anagrams("vans")
    self.assertEqual(r, ['vans'])

    _, r = self.anagrams2.get_anagrams("vantage")
    self.assertEqual(r, ['vantage'])

    _, r = self.anagrams2.get_anagrams("vapor")
    self.assertEqual(r, ['vapor'])

    _, r = self.anagrams2.get_anagrams("vaporing")
    self.assertEqual(r, ['vaporing'])

    _, r = self.anagrams2.get_anagrams("vapors")
    self.assertEqual(r, ['vapors'])

    _, r = self.anagrams2.get_anagrams("variability")
    self.assertEqual(r, ['variability'])

    _, r = self.anagrams2.get_anagrams("variable")
    self.assertEqual(r, ['variable'])

    _, r = self.anagrams2.get_anagrams("variableness")
    self.assertEqual(r, ['variableness'])

    _, r = self.anagrams2.get_anagrams("variables")
    self.assertEqual(r, ['variables'])

    _, r = self.anagrams2.get_anagrams("variably")
    self.assertEqual(r, ['variably'])

    _, r = self.anagrams2.get_anagrams("varian")
    self.assertEqual(r, ['varian'])

    _, r = self.anagrams2.get_anagrams("variance")
    self.assertEqual(r, ['variance'])

    _, r = self.anagrams2.get_anagrams("variances")
    self.assertEqual(r, ['variances'])

    _, r = self.anagrams2.get_anagrams("variant")
    self.assertEqual(r, ['variant'])

    _, r = self.anagrams2.get_anagrams("variantly")
    self.assertEqual(r, ['variantly'])

    _, r = self.anagrams2.get_anagrams("variants")
    self.assertEqual(r, ['variants'])

    _, r = self.anagrams2.get_anagrams("variation")
    self.assertEqual(r, ['variation'])

    _, r = self.anagrams2.get_anagrams("variations")
    self.assertEqual(r, ['variations'])

    _, r = self.anagrams2.get_anagrams("varied")
    self.assertEqual(r, ['varied'])

    _, r = self.anagrams2.get_anagrams("varies")
    self.assertEqual(r, ['varies'])

    _, r = self.anagrams2.get_anagrams("varieties")
    self.assertEqual(r, ['varieties'])

    _, r = self.anagrams2.get_anagrams("variety")
    self.assertEqual(r, ['variety'])

    _, r = self.anagrams2.get_anagrams("various")
    self.assertEqual(r, ['saviour', 'various'])

    _, r = self.anagrams2.get_anagrams("variously")
    self.assertEqual(r, ['variously'])

    _, r = self.anagrams2.get_anagrams("varitype")
    self.assertEqual(r, ['varitype'])

    _, r = self.anagrams2.get_anagrams("varityping")
    self.assertEqual(r, ['varityping'])

    _, r = self.anagrams2.get_anagrams("varnish")
    self.assertEqual(r, ['varnish'])

    _, r = self.anagrams2.get_anagrams("varnishes")
    self.assertEqual(r, ['varnishes'])

    _, r = self.anagrams2.get_anagrams("vary")
    self.assertEqual(r, ['vary'])

    _, r = self.anagrams2.get_anagrams("varying")
    self.assertEqual(r, ['varying'])

    _, r = self.anagrams2.get_anagrams("varyings")
    self.assertEqual(r, ['varyings'])

    _, r = self.anagrams2.get_anagrams("vase")
    self.assertEqual(r, ['save', 'vase'])

    _, r = self.anagrams2.get_anagrams("vases")
    self.assertEqual(r, ['saves', 'vases'])

    _, r = self.anagrams2.get_anagrams("vasquez")
    self.assertEqual(r, ['vasquez'])

    _, r = self.anagrams2.get_anagrams("vassal")
    self.assertEqual(r, ['vassal'])

    _, r = self.anagrams2.get_anagrams("vassar")
    self.assertEqual(r, ['vassar'])

    _, r = self.anagrams2.get_anagrams("vast")
    self.assertEqual(r, ['vast', 'vats'])

    _, r = self.anagrams2.get_anagrams("vaster")
    self.assertEqual(r, ['averts', 'starve', 'vaster'])

    _, r = self.anagrams2.get_anagrams("vastest")
    self.assertEqual(r, ['vastest'])

    _, r = self.anagrams2.get_anagrams("vastly")
    self.assertEqual(r, ['vastly'])

    _, r = self.anagrams2.get_anagrams("vastness")
    self.assertEqual(r, ['vastness'])

    _, r = self.anagrams2.get_anagrams("vat")
    self.assertEqual(r, ['vat'])

    _, r = self.anagrams2.get_anagrams("vatican")
    self.assertEqual(r, ['vatican'])

    _, r = self.anagrams2.get_anagrams("vaticanization")
    self.assertEqual(r, ['vaticanization'])

    _, r = self.anagrams2.get_anagrams("vaticanizations")
    self.assertEqual(r, ['vaticanizations'])

    _, r = self.anagrams2.get_anagrams("vaticanize")
    self.assertEqual(r, ['vaticanize'])

    _, r = self.anagrams2.get_anagrams("vaticanizes")
    self.assertEqual(r, ['vaticanizes'])

    _, r = self.anagrams2.get_anagrams("vats")
    self.assertEqual(r, ['vast', 'vats'])

    _, r = self.anagrams2.get_anagrams("vaudeville")
    self.assertEqual(r, ['vaudeville'])

    _, r = self.anagrams2.get_anagrams("vaudois")
    self.assertEqual(r, ['vaudois'])

    _, r = self.anagrams2.get_anagrams("vaughan")
    self.assertEqual(r, ['vaughan'])

    _, r = self.anagrams2.get_anagrams("vaughn")
    self.assertEqual(r, ['vaughn'])

    _, r = self.anagrams2.get_anagrams("vault")
    self.assertEqual(r, ['vault'])

    _, r = self.anagrams2.get_anagrams("vaulted")
    self.assertEqual(r, ['vaulted'])

    _, r = self.anagrams2.get_anagrams("vaulter")
    self.assertEqual(r, ['vaulter'])

    _, r = self.anagrams2.get_anagrams("vaulting")
    self.assertEqual(r, ['vaulting'])

    _, r = self.anagrams2.get_anagrams("vaults")
    self.assertEqual(r, ['vaults'])

    _, r = self.anagrams2.get_anagrams("vaunt")
    self.assertEqual(r, ['vaunt'])

    _, r = self.anagrams2.get_anagrams("vaunted")
    self.assertEqual(r, ['vaunted'])

    _, r = self.anagrams2.get_anagrams("vax")
    self.assertEqual(r, ['vax'])

    _, r = self.anagrams2.get_anagrams("vaxes")
    self.assertEqual(r, ['vaxes'])

    _, r = self.anagrams2.get_anagrams("veal")
    self.assertEqual(r, ['vale', 'veal', 'vela'])

    _, r = self.anagrams2.get_anagrams("vector")
    self.assertEqual(r, ['covert', 'vector'])

    _, r = self.anagrams2.get_anagrams("vectorization")
    self.assertEqual(r, ['vectorization'])

    _, r = self.anagrams2.get_anagrams("vectorizing")
    self.assertEqual(r, ['vectorizing'])

    _, r = self.anagrams2.get_anagrams("vectors")
    self.assertEqual(r, ['vectors'])

    _, r = self.anagrams2.get_anagrams("veda")
    self.assertEqual(r, ['dave', 'veda'])

    _, r = self.anagrams2.get_anagrams("veer")
    self.assertEqual(r, ['ever', 'veer'])

    _, r = self.anagrams2.get_anagrams("veered")
    self.assertEqual(r, ['veered'])

    _, r = self.anagrams2.get_anagrams("veering")
    self.assertEqual(r, ['veering'])

    _, r = self.anagrams2.get_anagrams("veers")
    self.assertEqual(r, ['serve', 'sever', 'veers', 'verse'])

    _, r = self.anagrams2.get_anagrams("vega")
    self.assertEqual(r, ['gave', 'vega'])

    _, r = self.anagrams2.get_anagrams("veganism")
    self.assertEqual(r, ['veganism'])

    _, r = self.anagrams2.get_anagrams("vegas")
    self.assertEqual(r, ['vegas'])

    _, r = self.anagrams2.get_anagrams("vegetable")
    self.assertEqual(r, ['vegetable'])

    _, r = self.anagrams2.get_anagrams("vegetables")
    self.assertEqual(r, ['vegetables'])

    _, r = self.anagrams2.get_anagrams("vegetarian")
    self.assertEqual(r, ['vegetarian'])

    _, r = self.anagrams2.get_anagrams("vegetarians")
    self.assertEqual(r, ['vegetarians'])

    _, r = self.anagrams2.get_anagrams("vegetate")
    self.assertEqual(r, ['vegetate'])

    _, r = self.anagrams2.get_anagrams("vegetated")
    self.assertEqual(r, ['vegetated'])

    _, r = self.anagrams2.get_anagrams("vegetates")
    self.assertEqual(r, ['vegetates'])

    _, r = self.anagrams2.get_anagrams("vegetating")
    self.assertEqual(r, ['vegetating'])

    _, r = self.anagrams2.get_anagrams("vegetation")
    self.assertEqual(r, ['vegetation'])

    _, r = self.anagrams2.get_anagrams("vegetative")
    self.assertEqual(r, ['vegetative'])

    _, r = self.anagrams2.get_anagrams("vehemence")
    self.assertEqual(r, ['vehemence'])

    _, r = self.anagrams2.get_anagrams("vehement")
    self.assertEqual(r, ['vehement'])

    _, r = self.anagrams2.get_anagrams("vehemently")
    self.assertEqual(r, ['vehemently'])

    _, r = self.anagrams2.get_anagrams("vehicle")
    self.assertEqual(r, ['vehicle'])

    _, r = self.anagrams2.get_anagrams("vehicles")
    self.assertEqual(r, ['vehicles'])

    _, r = self.anagrams2.get_anagrams("vehicular")
    self.assertEqual(r, ['vehicular'])

    _, r = self.anagrams2.get_anagrams("veil")
    self.assertEqual(r, ['evil', 'levi', 'live', 'veil', 'vile'])

    _, r = self.anagrams2.get_anagrams("veiled")
    self.assertEqual(r, ['levied', 'veiled'])

    _, r = self.anagrams2.get_anagrams("veiling")
    self.assertEqual(r, ['veiling'])

    _, r = self.anagrams2.get_anagrams("veils")
    self.assertEqual(r, ['elvis', 'evils', 'levis', 'lives', 'veils'])

    _, r = self.anagrams2.get_anagrams("vein")
    self.assertEqual(r, ['vein', 'vine'])

    _, r = self.anagrams2.get_anagrams("veined")
    self.assertEqual(r, ['envied', 'veined'])

    _, r = self.anagrams2.get_anagrams("veining")
    self.assertEqual(r, ['veining'])

    _, r = self.anagrams2.get_anagrams("veins")
    self.assertEqual(r, ['veins', 'vines'])

    _, r = self.anagrams2.get_anagrams("vela")
    self.assertEqual(r, ['vale', 'veal', 'vela'])

    _, r = self.anagrams2.get_anagrams("velasquez")
    self.assertEqual(r, ['velasquez'])

    _, r = self.anagrams2.get_anagrams("vella")
    self.assertEqual(r, ['vella'])

    _, r = self.anagrams2.get_anagrams("velocities")
    self.assertEqual(r, ['velocities'])

    _, r = self.anagrams2.get_anagrams("velocity")
    self.assertEqual(r, ['velocity'])

    _, r = self.anagrams2.get_anagrams("velvet")
    self.assertEqual(r, ['velvet'])

    _, r = self.anagrams2.get_anagrams("vendor")
    self.assertEqual(r, ['vendor'])

    _, r = self.anagrams2.get_anagrams("vendors")
    self.assertEqual(r, ['vendors'])

    _, r = self.anagrams2.get_anagrams("venerable")
    self.assertEqual(r, ['venerable'])

    _, r = self.anagrams2.get_anagrams("veneration")
    self.assertEqual(r, ['veneration'])

    _, r = self.anagrams2.get_anagrams("venetian")
    self.assertEqual(r, ['aventine', 'venetian'])

    _, r = self.anagrams2.get_anagrams("veneto")
    self.assertEqual(r, ['veneto'])

    _, r = self.anagrams2.get_anagrams("venezuela")
    self.assertEqual(r, ['venezuela'])

    _, r = self.anagrams2.get_anagrams("venezuelan")
    self.assertEqual(r, ['venezuelan'])

    _, r = self.anagrams2.get_anagrams("vengeance")
    self.assertEqual(r, ['vengeance'])

    _, r = self.anagrams2.get_anagrams("venial")
    self.assertEqual(r, ['venial'])

    _, r = self.anagrams2.get_anagrams("venice")
    self.assertEqual(r, ['evince', 'venice'])

    _, r = self.anagrams2.get_anagrams("venison")
    self.assertEqual(r, ['venison'])

    _, r = self.anagrams2.get_anagrams("venn")
    self.assertEqual(r, ['venn'])

    _, r = self.anagrams2.get_anagrams("venom")
    self.assertEqual(r, ['venom'])

    _, r = self.anagrams2.get_anagrams("venomous")
    self.assertEqual(r, ['venomous'])

    _, r = self.anagrams2.get_anagrams("venomously")
    self.assertEqual(r, ['venomously'])

    _, r = self.anagrams2.get_anagrams("vent")
    self.assertEqual(r, ['vent'])

    _, r = self.anagrams2.get_anagrams("vented")
    self.assertEqual(r, ['vented'])

    _, r = self.anagrams2.get_anagrams("ventilate")
    self.assertEqual(r, ['ventilate'])

    _, r = self.anagrams2.get_anagrams("ventilated")
    self.assertEqual(r, ['ventilated'])

    _, r = self.anagrams2.get_anagrams("ventilates")
    self.assertEqual(r, ['ventilates'])

    _, r = self.anagrams2.get_anagrams("ventilating")
    self.assertEqual(r, ['ventilating'])

    _, r = self.anagrams2.get_anagrams("ventilation")
    self.assertEqual(r, ['ventilation'])

    _, r = self.anagrams2.get_anagrams("ventricle")
    self.assertEqual(r, ['ventricle'])

    _, r = self.anagrams2.get_anagrams("ventricles")
    self.assertEqual(r, ['ventricles'])

    _, r = self.anagrams2.get_anagrams("vents")
    self.assertEqual(r, ['vents'])

    _, r = self.anagrams2.get_anagrams("ventura")
    self.assertEqual(r, ['ventura'])

    _, r = self.anagrams2.get_anagrams("venture")
    self.assertEqual(r, ['venture'])

    _, r = self.anagrams2.get_anagrams("ventured")
    self.assertEqual(r, ['ventured'])

    _, r = self.anagrams2.get_anagrams("venturer")
    self.assertEqual(r, ['venturer'])

    _, r = self.anagrams2.get_anagrams("venturers")
    self.assertEqual(r, ['venturers'])

    _, r = self.anagrams2.get_anagrams("ventures")
    self.assertEqual(r, ['ventures'])

    _, r = self.anagrams2.get_anagrams("venturing")
    self.assertEqual(r, ['venturing'])

    _, r = self.anagrams2.get_anagrams("venturings")
    self.assertEqual(r, ['venturings'])

    _, r = self.anagrams2.get_anagrams("venus")
    self.assertEqual(r, ['venus'])

    _, r = self.anagrams2.get_anagrams("venusian")
    self.assertEqual(r, ['venusian'])

    _, r = self.anagrams2.get_anagrams("venusians")
    self.assertEqual(r, ['venusians'])

    _, r = self.anagrams2.get_anagrams("vera")
    self.assertEqual(r, ['aver', 'rave', 'vera'])

    _, r = self.anagrams2.get_anagrams("veracity")
    self.assertEqual(r, ['veracity'])

    _, r = self.anagrams2.get_anagrams("veranda")
    self.assertEqual(r, ['veranda'])

    _, r = self.anagrams2.get_anagrams("verandas")
    self.assertEqual(r, ['verandas'])

    _, r = self.anagrams2.get_anagrams("verb")
    self.assertEqual(r, ['verb'])

    _, r = self.anagrams2.get_anagrams("verbal")
    self.assertEqual(r, ['verbal'])

    _, r = self.anagrams2.get_anagrams("verbalize")
    self.assertEqual(r, ['verbalize'])

    _, r = self.anagrams2.get_anagrams("verbalized")
    self.assertEqual(r, ['verbalized'])

    _, r = self.anagrams2.get_anagrams("verbalizes")
    self.assertEqual(r, ['verbalizes'])

    _, r = self.anagrams2.get_anagrams("verbalizing")
    self.assertEqual(r, ['verbalizing'])

    _, r = self.anagrams2.get_anagrams("verbally")
    self.assertEqual(r, ['verbally'])

    _, r = self.anagrams2.get_anagrams("verbose")
    self.assertEqual(r, ['observe', 'verbose'])

    _, r = self.anagrams2.get_anagrams("verbs")
    self.assertEqual(r, ['verbs'])

    _, r = self.anagrams2.get_anagrams("verde")
    self.assertEqual(r, ['verde'])

    _, r = self.anagrams2.get_anagrams("verderer")
    self.assertEqual(r, ['verderer'])

    _, r = self.anagrams2.get_anagrams("verdi")
    self.assertEqual(r, ['diver', 'drive', 'verdi'])

    _, r = self.anagrams2.get_anagrams("verdict")
    self.assertEqual(r, ['verdict'])

    _, r = self.anagrams2.get_anagrams("verdure")
    self.assertEqual(r, ['verdure'])

    _, r = self.anagrams2.get_anagrams("verge")
    self.assertEqual(r, ['verge'])

    _, r = self.anagrams2.get_anagrams("verger")
    self.assertEqual(r, ['verger'])

    _, r = self.anagrams2.get_anagrams("verges")
    self.assertEqual(r, ['verges'])

    _, r = self.anagrams2.get_anagrams("vergil")
    self.assertEqual(r, ['vergil'])

    _, r = self.anagrams2.get_anagrams("verifiability")
    self.assertEqual(r, ['verifiability'])

    _, r = self.anagrams2.get_anagrams("verifiable")
    self.assertEqual(r, ['verifiable'])

    _, r = self.anagrams2.get_anagrams("verification")
    self.assertEqual(r, ['verification'])

    _, r = self.anagrams2.get_anagrams("verifications")
    self.assertEqual(r, ['verifications'])

    _, r = self.anagrams2.get_anagrams("verified")
    self.assertEqual(r, ['verified'])

    _, r = self.anagrams2.get_anagrams("verifier")
    self.assertEqual(r, ['verifier'])

    _, r = self.anagrams2.get_anagrams("verifiers")
    self.assertEqual(r, ['verifiers'])

    _, r = self.anagrams2.get_anagrams("verifies")
    self.assertEqual(r, ['verifies'])

    _, r = self.anagrams2.get_anagrams("verify")
    self.assertEqual(r, ['verify'])

    _, r = self.anagrams2.get_anagrams("verifying")
    self.assertEqual(r, ['verifying'])

    _, r = self.anagrams2.get_anagrams("verily")
    self.assertEqual(r, ['livery', 'verily'])

    _, r = self.anagrams2.get_anagrams("veritable")
    self.assertEqual(r, ['veritable'])

    _, r = self.anagrams2.get_anagrams("verlag")
    self.assertEqual(r, ['gravel', 'verlag'])

    _, r = self.anagrams2.get_anagrams("vermin")
    self.assertEqual(r, ['mervin', 'vermin'])

    _, r = self.anagrams2.get_anagrams("vermont")
    self.assertEqual(r, ['vermont'])

    _, r = self.anagrams2.get_anagrams("vern")
    self.assertEqual(r, ['vern'])

    _, r = self.anagrams2.get_anagrams("verna")
    self.assertEqual(r, ['raven', 'verna'])

    _, r = self.anagrams2.get_anagrams("vernacular")
    self.assertEqual(r, ['vernacular'])

    _, r = self.anagrams2.get_anagrams("verne")
    self.assertEqual(r, ['nerve', 'never', 'verne'])

    _, r = self.anagrams2.get_anagrams("vernon")
    self.assertEqual(r, ['vernon'])

    _, r = self.anagrams2.get_anagrams("verona")
    self.assertEqual(r, ['verona'])

    _, r = self.anagrams2.get_anagrams("veronica")
    self.assertEqual(r, ['veronica'])

    _, r = self.anagrams2.get_anagrams("versa")
    self.assertEqual(r, ['avers', 'raves', 'saver', 'versa'])

    _, r = self.anagrams2.get_anagrams("versailles")
    self.assertEqual(r, ['versailles'])

    _, r = self.anagrams2.get_anagrams("versatec")
    self.assertEqual(r, ['versatec'])

    _, r = self.anagrams2.get_anagrams("versatile")
    self.assertEqual(r, ['relatives', 'versatile'])

    _, r = self.anagrams2.get_anagrams("versatility")
    self.assertEqual(r, ['versatility'])

    _, r = self.anagrams2.get_anagrams("verse")
    self.assertEqual(r, ['serve', 'sever', 'veers', 'verse'])

    _, r = self.anagrams2.get_anagrams("versed")
    self.assertEqual(r, ['served', 'versed'])

    _, r = self.anagrams2.get_anagrams("verses")
    self.assertEqual(r, ['serves', 'severs', 'verses'])

    _, r = self.anagrams2.get_anagrams("versing")
    self.assertEqual(r, ['serving', 'versing'])

    _, r = self.anagrams2.get_anagrams("version")
    self.assertEqual(r, ['iverson', 'version'])

    _, r = self.anagrams2.get_anagrams("versions")
    self.assertEqual(r, ['versions'])

    _, r = self.anagrams2.get_anagrams("versus")
    self.assertEqual(r, ['versus'])

    _, r = self.anagrams2.get_anagrams("vertebrate")
    self.assertEqual(r, ['vertebrate'])

    _, r = self.anagrams2.get_anagrams("vertebrates")
    self.assertEqual(r, ['vertebrates'])

    _, r = self.anagrams2.get_anagrams("vertex")
    self.assertEqual(r, ['vertex'])

    _, r = self.anagrams2.get_anagrams("vertical")
    self.assertEqual(r, ['vertical'])

    _, r = self.anagrams2.get_anagrams("vertically")
    self.assertEqual(r, ['vertically'])

    _, r = self.anagrams2.get_anagrams("verticalness")
    self.assertEqual(r, ['verticalness'])

    _, r = self.anagrams2.get_anagrams("vertices")
    self.assertEqual(r, ['vertices'])

    _, r = self.anagrams2.get_anagrams("very")
    self.assertEqual(r, ['very'])

    _, r = self.anagrams2.get_anagrams("vessel")
    self.assertEqual(r, ['selves', 'vessel'])

    _, r = self.anagrams2.get_anagrams("vessels")
    self.assertEqual(r, ['vessels'])

    _, r = self.anagrams2.get_anagrams("vest")
    self.assertEqual(r, ['vest'])

    _, r = self.anagrams2.get_anagrams("vested")
    self.assertEqual(r, ['vested'])

    _, r = self.anagrams2.get_anagrams("vestige")
    self.assertEqual(r, ['vestige'])

    _, r = self.anagrams2.get_anagrams("vestiges")
    self.assertEqual(r, ['vestiges'])

    _, r = self.anagrams2.get_anagrams("vestigial")
    self.assertEqual(r, ['vestigial'])

    _, r = self.anagrams2.get_anagrams("vests")
    self.assertEqual(r, ['vests'])

    _, r = self.anagrams2.get_anagrams("vesuvius")
    self.assertEqual(r, ['vesuvius'])

    _, r = self.anagrams2.get_anagrams("veteran")
    self.assertEqual(r, ['veteran'])

    _, r = self.anagrams2.get_anagrams("veterans")
    self.assertEqual(r, ['veterans'])

    _, r = self.anagrams2.get_anagrams("veterinarian")
    self.assertEqual(r, ['veterinarian'])

    _, r = self.anagrams2.get_anagrams("veterinarians")
    self.assertEqual(r, ['veterinarians'])

    _, r = self.anagrams2.get_anagrams("veterinary")
    self.assertEqual(r, ['veterinary'])

    _, r = self.anagrams2.get_anagrams("veto")
    self.assertEqual(r, ['veto', 'vote'])

    _, r = self.anagrams2.get_anagrams("vetoed")
    self.assertEqual(r, ['devote', 'vetoed'])

    _, r = self.anagrams2.get_anagrams("vetoer")
    self.assertEqual(r, ['vetoer'])

    _, r = self.anagrams2.get_anagrams("vetoes")
    self.assertEqual(r, ['vetoes'])

    _, r = self.anagrams2.get_anagrams("vex")
    self.assertEqual(r, ['vex'])

    _, r = self.anagrams2.get_anagrams("vexation")
    self.assertEqual(r, ['vexation'])

    _, r = self.anagrams2.get_anagrams("vexed")
    self.assertEqual(r, ['vexed'])

    _, r = self.anagrams2.get_anagrams("vexes")
    self.assertEqual(r, ['vexes'])

    _, r = self.anagrams2.get_anagrams("vexing")
    self.assertEqual(r, ['vexing'])

    _, r = self.anagrams2.get_anagrams("via")
    self.assertEqual(r, ['via'])

    _, r = self.anagrams2.get_anagrams("viability")
    self.assertEqual(r, ['viability'])

    _, r = self.anagrams2.get_anagrams("viable")
    self.assertEqual(r, ['viable'])

    _, r = self.anagrams2.get_anagrams("viably")
    self.assertEqual(r, ['viably'])

    _, r = self.anagrams2.get_anagrams("vial")
    self.assertEqual(r, ['vail', 'vial'])

    _, r = self.anagrams2.get_anagrams("vials")
    self.assertEqual(r, ['vials'])

    _, r = self.anagrams2.get_anagrams("vibrate")
    self.assertEqual(r, ['vibrate'])

    _, r = self.anagrams2.get_anagrams("vibrated")
    self.assertEqual(r, ['vibrated'])

    _, r = self.anagrams2.get_anagrams("vibrating")
    self.assertEqual(r, ['vibrating'])

    _, r = self.anagrams2.get_anagrams("vibration")
    self.assertEqual(r, ['vibration'])

    _, r = self.anagrams2.get_anagrams("vibrations")
    self.assertEqual(r, ['vibrations'])

    _, r = self.anagrams2.get_anagrams("vibrator")
    self.assertEqual(r, ['vibrator'])

    _, r = self.anagrams2.get_anagrams("vic")
    self.assertEqual(r, ['vic'])

    _, r = self.anagrams2.get_anagrams("vice")
    self.assertEqual(r, ['vice'])

    _, r = self.anagrams2.get_anagrams("viceroy")
    self.assertEqual(r, ['viceroy'])

    _, r = self.anagrams2.get_anagrams("vices")
    self.assertEqual(r, ['vices'])

    _, r = self.anagrams2.get_anagrams("vichy")
    self.assertEqual(r, ['vichy'])

    _, r = self.anagrams2.get_anagrams("vicinity")
    self.assertEqual(r, ['vicinity'])

    _, r = self.anagrams2.get_anagrams("vicious")
    self.assertEqual(r, ['vicious'])

    _, r = self.anagrams2.get_anagrams("viciously")
    self.assertEqual(r, ['viciously'])

    _, r = self.anagrams2.get_anagrams("viciousness")
    self.assertEqual(r, ['viciousness'])

    _, r = self.anagrams2.get_anagrams("vicissitude")
    self.assertEqual(r, ['vicissitude'])

    _, r = self.anagrams2.get_anagrams("vicissitudes")
    self.assertEqual(r, ['vicissitudes'])

    _, r = self.anagrams2.get_anagrams("vickers")
    self.assertEqual(r, ['vickers'])

    _, r = self.anagrams2.get_anagrams("vicksburg")
    self.assertEqual(r, ['vicksburg'])

    _, r = self.anagrams2.get_anagrams("vicky")
    self.assertEqual(r, ['vicky'])

    _, r = self.anagrams2.get_anagrams("victim")
    self.assertEqual(r, ['victim'])

    _, r = self.anagrams2.get_anagrams("victimize")
    self.assertEqual(r, ['victimize'])

    _, r = self.anagrams2.get_anagrams("victimized")
    self.assertEqual(r, ['victimized'])

    _, r = self.anagrams2.get_anagrams("victimizer")
    self.assertEqual(r, ['victimizer'])

    _, r = self.anagrams2.get_anagrams("victimizers")
    self.assertEqual(r, ['victimizers'])

    _, r = self.anagrams2.get_anagrams("victimizes")
    self.assertEqual(r, ['victimizes'])

    _, r = self.anagrams2.get_anagrams("victimizing")
    self.assertEqual(r, ['victimizing'])

    _, r = self.anagrams2.get_anagrams("victims")
    self.assertEqual(r, ['victims'])

    _, r = self.anagrams2.get_anagrams("victor")
    self.assertEqual(r, ['victor'])

    _, r = self.anagrams2.get_anagrams("victoria")
    self.assertEqual(r, ['victoria'])

    _, r = self.anagrams2.get_anagrams("victorian")
    self.assertEqual(r, ['victorian'])

    _, r = self.anagrams2.get_anagrams("victorianize")
    self.assertEqual(r, ['victorianize'])

    _, r = self.anagrams2.get_anagrams("victorianizes")
    self.assertEqual(r, ['victorianizes'])

    _, r = self.anagrams2.get_anagrams("victorians")
    self.assertEqual(r, ['victorians'])

    _, r = self.anagrams2.get_anagrams("victories")
    self.assertEqual(r, ['victories'])

    _, r = self.anagrams2.get_anagrams("victorious")
    self.assertEqual(r, ['victorious'])

    _, r = self.anagrams2.get_anagrams("victoriously")
    self.assertEqual(r, ['victoriously'])

    _, r = self.anagrams2.get_anagrams("victors")
    self.assertEqual(r, ['victors'])

    _, r = self.anagrams2.get_anagrams("victory")
    self.assertEqual(r, ['victory'])

    _, r = self.anagrams2.get_anagrams("victrola")
    self.assertEqual(r, ['victrola'])

    _, r = self.anagrams2.get_anagrams("victual")
    self.assertEqual(r, ['victual'])

    _, r = self.anagrams2.get_anagrams("victualer")
    self.assertEqual(r, ['lucrative', 'victualer'])

    _, r = self.anagrams2.get_anagrams("victuals")
    self.assertEqual(r, ['victuals'])

    _, r = self.anagrams2.get_anagrams("vida")
    self.assertEqual(r, ['avid', 'vida'])

    _, r = self.anagrams2.get_anagrams("vidal")
    self.assertEqual(r, ['valid', 'vidal'])

    _, r = self.anagrams2.get_anagrams("video")
    self.assertEqual(r, ['video'])

    _, r = self.anagrams2.get_anagrams("videotape")
    self.assertEqual(r, ['videotape'])

    _, r = self.anagrams2.get_anagrams("videotapes")
    self.assertEqual(r, ['videotapes'])

    _, r = self.anagrams2.get_anagrams("videotex")
    self.assertEqual(r, ['videotex'])

    _, r = self.anagrams2.get_anagrams("vie")
    self.assertEqual(r, ['vie'])

    _, r = self.anagrams2.get_anagrams("vied")
    self.assertEqual(r, ['dive', 'vied'])

    _, r = self.anagrams2.get_anagrams("vienna")
    self.assertEqual(r, ['vienna'])

    _, r = self.anagrams2.get_anagrams("viennese")
    self.assertEqual(r, ['viennese'])

    _, r = self.anagrams2.get_anagrams("vientiane")
    self.assertEqual(r, ['vientiane'])

    _, r = self.anagrams2.get_anagrams("vier")
    self.assertEqual(r, ['vier'])

    _, r = self.anagrams2.get_anagrams("vies")
    self.assertEqual(r, ['vies'])

    _, r = self.anagrams2.get_anagrams("viet")
    self.assertEqual(r, ['viet'])

    _, r = self.anagrams2.get_anagrams("vietnam")
    self.assertEqual(r, ['vietnam'])

    _, r = self.anagrams2.get_anagrams("vietnamese")
    self.assertEqual(r, ['vietnamese'])

    _, r = self.anagrams2.get_anagrams("view")
    self.assertEqual(r, ['view'])

    _, r = self.anagrams2.get_anagrams("viewable")
    self.assertEqual(r, ['viewable'])

    _, r = self.anagrams2.get_anagrams("viewed")
    self.assertEqual(r, ['viewed'])

    _, r = self.anagrams2.get_anagrams("viewer")
    self.assertEqual(r, ['review', 'viewer'])

    _, r = self.anagrams2.get_anagrams("viewers")
    self.assertEqual(r, ['reviews', 'viewers'])

    _, r = self.anagrams2.get_anagrams("viewing")
    self.assertEqual(r, ['viewing'])

    _, r = self.anagrams2.get_anagrams("viewpoint")
    self.assertEqual(r, ['viewpoint'])

    _, r = self.anagrams2.get_anagrams("viewpoints")
    self.assertEqual(r, ['viewpoints'])

    _, r = self.anagrams2.get_anagrams("views")
    self.assertEqual(r, ['views', 'wives'])

    _, r = self.anagrams2.get_anagrams("vigilance")
    self.assertEqual(r, ['vigilance'])

    _, r = self.anagrams2.get_anagrams("vigilant")
    self.assertEqual(r, ['vigilant'])

    _, r = self.anagrams2.get_anagrams("vigilante")
    self.assertEqual(r, ['vigilante'])

    _, r = self.anagrams2.get_anagrams("vigilantes")
    self.assertEqual(r, ['vigilantes'])

    _, r = self.anagrams2.get_anagrams("vigilantly")
    self.assertEqual(r, ['vigilantly'])

    _, r = self.anagrams2.get_anagrams("vignette")
    self.assertEqual(r, ['vignette'])

    _, r = self.anagrams2.get_anagrams("vignettes")
    self.assertEqual(r, ['vignettes'])

    _, r = self.anagrams2.get_anagrams("vigor")
    self.assertEqual(r, ['vigor', 'virgo'])

    _, r = self.anagrams2.get_anagrams("vigorous")
    self.assertEqual(r, ['vigorous'])

    _, r = self.anagrams2.get_anagrams("vigorously")
    self.assertEqual(r, ['vigorously'])

    _, r = self.anagrams2.get_anagrams("viking")
    self.assertEqual(r, ['viking'])

    _, r = self.anagrams2.get_anagrams("vikings")
    self.assertEqual(r, ['vikings'])

    _, r = self.anagrams2.get_anagrams("vikram")
    self.assertEqual(r, ['vikram'])

    _, r = self.anagrams2.get_anagrams("vile")
    self.assertEqual(r, ['evil', 'levi', 'live', 'veil', 'vile'])

    _, r = self.anagrams2.get_anagrams("vilely")
    self.assertEqual(r, ['evilly', 'lively', 'vilely'])

    _, r = self.anagrams2.get_anagrams("vileness")
    self.assertEqual(r, ['liveness', 'vileness'])

    _, r = self.anagrams2.get_anagrams("vilification")
    self.assertEqual(r, ['vilification'])

    _, r = self.anagrams2.get_anagrams("vilifications")
    self.assertEqual(r, ['vilifications'])

    _, r = self.anagrams2.get_anagrams("vilified")
    self.assertEqual(r, ['vilified'])

    _, r = self.anagrams2.get_anagrams("vilifies")
    self.assertEqual(r, ['vilifies'])

    _, r = self.anagrams2.get_anagrams("vilify")
    self.assertEqual(r, ['vilify'])

    _, r = self.anagrams2.get_anagrams("vilifying")
    self.assertEqual(r, ['vilifying'])

    _, r = self.anagrams2.get_anagrams("villa")
    self.assertEqual(r, ['villa'])

    _, r = self.anagrams2.get_anagrams("village")
    self.assertEqual(r, ['village'])

    _, r = self.anagrams2.get_anagrams("villager")
    self.assertEqual(r, ['villager'])

    _, r = self.anagrams2.get_anagrams("villagers")
    self.assertEqual(r, ['villagers'])

    _, r = self.anagrams2.get_anagrams("villages")
    self.assertEqual(r, ['villages'])

    _, r = self.anagrams2.get_anagrams("villain")
    self.assertEqual(r, ['villain'])

    _, r = self.anagrams2.get_anagrams("villainous")
    self.assertEqual(r, ['villainous'])

    _, r = self.anagrams2.get_anagrams("villainously")
    self.assertEqual(r, ['villainously'])

    _, r = self.anagrams2.get_anagrams("villainousness")
    self.assertEqual(r, ['villainousness'])

    _, r = self.anagrams2.get_anagrams("villains")
    self.assertEqual(r, ['villains'])

    _, r = self.anagrams2.get_anagrams("villainy")
    self.assertEqual(r, ['villainy'])

    _, r = self.anagrams2.get_anagrams("villas")
    self.assertEqual(r, ['villas'])

    _, r = self.anagrams2.get_anagrams("vince")
    self.assertEqual(r, ['vince'])

    _, r = self.anagrams2.get_anagrams("vincent")
    self.assertEqual(r, ['vincent'])

    _, r = self.anagrams2.get_anagrams("vinci")
    self.assertEqual(r, ['vinci'])

    _, r = self.anagrams2.get_anagrams("vindicate")
    self.assertEqual(r, ['vindicate'])

    _, r = self.anagrams2.get_anagrams("vindicated")
    self.assertEqual(r, ['vindicated'])

    _, r = self.anagrams2.get_anagrams("vindication")
    self.assertEqual(r, ['vindication'])

    _, r = self.anagrams2.get_anagrams("vindictive")
    self.assertEqual(r, ['vindictive'])

    _, r = self.anagrams2.get_anagrams("vindictively")
    self.assertEqual(r, ['vindictively'])

    _, r = self.anagrams2.get_anagrams("vindictiveness")
    self.assertEqual(r, ['vindictiveness'])

    _, r = self.anagrams2.get_anagrams("vine")
    self.assertEqual(r, ['vein', 'vine'])

    _, r = self.anagrams2.get_anagrams("vinegar")
    self.assertEqual(r, ['vinegar'])

    _, r = self.anagrams2.get_anagrams("vines")
    self.assertEqual(r, ['veins', 'vines'])

    _, r = self.anagrams2.get_anagrams("vineyard")
    self.assertEqual(r, ['vineyard'])

    _, r = self.anagrams2.get_anagrams("vineyards")
    self.assertEqual(r, ['vineyards'])

    _, r = self.anagrams2.get_anagrams("vinson")
    self.assertEqual(r, ['vinson'])

    _, r = self.anagrams2.get_anagrams("vintage")
    self.assertEqual(r, ['vintage'])

    _, r = self.anagrams2.get_anagrams("violate")
    self.assertEqual(r, ['violate'])

    _, r = self.anagrams2.get_anagrams("violated")
    self.assertEqual(r, ['dovetail', 'violated'])

    _, r = self.anagrams2.get_anagrams("violates")
    self.assertEqual(r, ['violates'])

    _, r = self.anagrams2.get_anagrams("violating")
    self.assertEqual(r, ['violating'])

    _, r = self.anagrams2.get_anagrams("violation")
    self.assertEqual(r, ['violation'])

    _, r = self.anagrams2.get_anagrams("violations")
    self.assertEqual(r, ['violations'])

    _, r = self.anagrams2.get_anagrams("violator")
    self.assertEqual(r, ['violator'])

    _, r = self.anagrams2.get_anagrams("violators")
    self.assertEqual(r, ['violators'])

    _, r = self.anagrams2.get_anagrams("violence")
    self.assertEqual(r, ['violence'])

    _, r = self.anagrams2.get_anagrams("violent")
    self.assertEqual(r, ['violent'])

    _, r = self.anagrams2.get_anagrams("violently")
    self.assertEqual(r, ['violently'])

    _, r = self.anagrams2.get_anagrams("violet")
    self.assertEqual(r, ['violet'])

    _, r = self.anagrams2.get_anagrams("violets")
    self.assertEqual(r, ['violets'])

    _, r = self.anagrams2.get_anagrams("violin")
    self.assertEqual(r, ['violin'])

    _, r = self.anagrams2.get_anagrams("violinist")
    self.assertEqual(r, ['violinist'])

    _, r = self.anagrams2.get_anagrams("violinists")
    self.assertEqual(r, ['violinists'])

    _, r = self.anagrams2.get_anagrams("violins")
    self.assertEqual(r, ['violins'])

    _, r = self.anagrams2.get_anagrams("viper")
    self.assertEqual(r, ['viper'])

    _, r = self.anagrams2.get_anagrams("vipers")
    self.assertEqual(r, ['vipers'])

    _, r = self.anagrams2.get_anagrams("virgil")
    self.assertEqual(r, ['virgil'])

    _, r = self.anagrams2.get_anagrams("virgin")
    self.assertEqual(r, ['irving', 'virgin'])

    _, r = self.anagrams2.get_anagrams("virginia")
    self.assertEqual(r, ['virginia'])

    _, r = self.anagrams2.get_anagrams("virginian")
    self.assertEqual(r, ['virginian'])

    _, r = self.anagrams2.get_anagrams("virginians")
    self.assertEqual(r, ['virginians'])

    _, r = self.anagrams2.get_anagrams("virginity")
    self.assertEqual(r, ['virginity'])

    _, r = self.anagrams2.get_anagrams("virgins")
    self.assertEqual(r, ['virgins'])

    _, r = self.anagrams2.get_anagrams("virgo")
    self.assertEqual(r, ['vigor', 'virgo'])

    _, r = self.anagrams2.get_anagrams("virtual")
    self.assertEqual(r, ['virtual'])

    _, r = self.anagrams2.get_anagrams("virtually")
    self.assertEqual(r, ['virtually'])

    _, r = self.anagrams2.get_anagrams("virtue")
    self.assertEqual(r, ['virtue'])

    _, r = self.anagrams2.get_anagrams("virtues")
    self.assertEqual(r, ['virtues'])

    _, r = self.anagrams2.get_anagrams("virtuoso")
    self.assertEqual(r, ['virtuoso'])

    _, r = self.anagrams2.get_anagrams("virtuosos")
    self.assertEqual(r, ['virtuosos'])

    _, r = self.anagrams2.get_anagrams("virtuous")
    self.assertEqual(r, ['virtuous'])

    _, r = self.anagrams2.get_anagrams("virtuously")
    self.assertEqual(r, ['virtuously'])

    _, r = self.anagrams2.get_anagrams("virulent")
    self.assertEqual(r, ['virulent'])

    _, r = self.anagrams2.get_anagrams("virus")
    self.assertEqual(r, ['virus'])

    _, r = self.anagrams2.get_anagrams("viruses")
    self.assertEqual(r, ['viruses'])

    _, r = self.anagrams2.get_anagrams("visa")
    self.assertEqual(r, ['avis', 'siva', 'visa'])

    _, r = self.anagrams2.get_anagrams("visage")
    self.assertEqual(r, ['visage'])

    _, r = self.anagrams2.get_anagrams("visas")
    self.assertEqual(r, ['visas'])

    _, r = self.anagrams2.get_anagrams("viscount")
    self.assertEqual(r, ['viscount'])

    _, r = self.anagrams2.get_anagrams("viscounts")
    self.assertEqual(r, ['viscounts'])

    _, r = self.anagrams2.get_anagrams("viscous")
    self.assertEqual(r, ['viscous'])

    _, r = self.anagrams2.get_anagrams("vishnu")
    self.assertEqual(r, ['vishnu'])

    _, r = self.anagrams2.get_anagrams("visibility")
    self.assertEqual(r, ['visibility'])

    _, r = self.anagrams2.get_anagrams("visible")
    self.assertEqual(r, ['visible'])

    _, r = self.anagrams2.get_anagrams("visibly")
    self.assertEqual(r, ['visibly'])

    _, r = self.anagrams2.get_anagrams("visigoth")
    self.assertEqual(r, ['visigoth'])

    _, r = self.anagrams2.get_anagrams("visigoths")
    self.assertEqual(r, ['visigoths'])

    _, r = self.anagrams2.get_anagrams("vision")
    self.assertEqual(r, ['vision'])

    _, r = self.anagrams2.get_anagrams("visionary")
    self.assertEqual(r, ['visionary'])

    _, r = self.anagrams2.get_anagrams("visions")
    self.assertEqual(r, ['visions'])

    _, r = self.anagrams2.get_anagrams("visit")
    self.assertEqual(r, ['visit'])

    _, r = self.anagrams2.get_anagrams("visitation")
    self.assertEqual(r, ['visitation'])

    _, r = self.anagrams2.get_anagrams("visitations")
    self.assertEqual(r, ['visitations'])

    _, r = self.anagrams2.get_anagrams("visited")
    self.assertEqual(r, ['visited'])

    _, r = self.anagrams2.get_anagrams("visiting")
    self.assertEqual(r, ['visiting'])

    _, r = self.anagrams2.get_anagrams("visitor")
    self.assertEqual(r, ['visitor'])

    _, r = self.anagrams2.get_anagrams("visitors")
    self.assertEqual(r, ['visitors'])

    _, r = self.anagrams2.get_anagrams("visits")
    self.assertEqual(r, ['visits'])

    _, r = self.anagrams2.get_anagrams("visor")
    self.assertEqual(r, ['visor'])

    _, r = self.anagrams2.get_anagrams("visors")
    self.assertEqual(r, ['visors'])

    _, r = self.anagrams2.get_anagrams("vista")
    self.assertEqual(r, ['vista'])

    _, r = self.anagrams2.get_anagrams("vistas")
    self.assertEqual(r, ['vistas'])

    _, r = self.anagrams2.get_anagrams("visual")
    self.assertEqual(r, ['visual'])

    _, r = self.anagrams2.get_anagrams("visualize")
    self.assertEqual(r, ['visualize'])

    _, r = self.anagrams2.get_anagrams("visualized")
    self.assertEqual(r, ['visualized'])

    _, r = self.anagrams2.get_anagrams("visualizer")
    self.assertEqual(r, ['visualizer'])

    _, r = self.anagrams2.get_anagrams("visualizes")
    self.assertEqual(r, ['visualizes'])

    _, r = self.anagrams2.get_anagrams("visualizing")
    self.assertEqual(r, ['visualizing'])

    _, r = self.anagrams2.get_anagrams("visually")
    self.assertEqual(r, ['visually'])

    _, r = self.anagrams2.get_anagrams("vita")
    self.assertEqual(r, ['vita'])

    _, r = self.anagrams2.get_anagrams("vitae")
    self.assertEqual(r, ['vitae'])

    _, r = self.anagrams2.get_anagrams("vital")
    self.assertEqual(r, ['vital'])

    _, r = self.anagrams2.get_anagrams("vitality")
    self.assertEqual(r, ['vitality'])

    _, r = self.anagrams2.get_anagrams("vitally")
    self.assertEqual(r, ['vitally'])

    _, r = self.anagrams2.get_anagrams("vitals")
    self.assertEqual(r, ['vitals'])

    _, r = self.anagrams2.get_anagrams("vito")
    self.assertEqual(r, ['vito'])

    _, r = self.anagrams2.get_anagrams("vitus")
    self.assertEqual(r, ['vitus'])

    _, r = self.anagrams2.get_anagrams("vivaldi")
    self.assertEqual(r, ['vivaldi'])

    _, r = self.anagrams2.get_anagrams("vivian")
    self.assertEqual(r, ['vivian'])

    _, r = self.anagrams2.get_anagrams("vivid")
    self.assertEqual(r, ['vivid'])

    _, r = self.anagrams2.get_anagrams("vividly")
    self.assertEqual(r, ['vividly'])

    _, r = self.anagrams2.get_anagrams("vividness")
    self.assertEqual(r, ['vividness'])

    _, r = self.anagrams2.get_anagrams("vizier")
    self.assertEqual(r, ['vizier'])

    _, r = self.anagrams2.get_anagrams("vladimir")
    self.assertEqual(r, ['vladimir'])

    _, r = self.anagrams2.get_anagrams("vladivostok")
    self.assertEqual(r, ['vladivostok'])

    _, r = self.anagrams2.get_anagrams("vocabularies")
    self.assertEqual(r, ['vocabularies'])

    _, r = self.anagrams2.get_anagrams("vocabulary")
    self.assertEqual(r, ['vocabulary'])

    _, r = self.anagrams2.get_anagrams("vocal")
    self.assertEqual(r, ['vocal'])

    _, r = self.anagrams2.get_anagrams("vocally")
    self.assertEqual(r, ['vocally'])

    _, r = self.anagrams2.get_anagrams("vocals")
    self.assertEqual(r, ['vocals'])

    _, r = self.anagrams2.get_anagrams("vocation")
    self.assertEqual(r, ['vocation'])

    _, r = self.anagrams2.get_anagrams("vocational")
    self.assertEqual(r, ['vocational'])

    _, r = self.anagrams2.get_anagrams("vocationally")
    self.assertEqual(r, ['vocationally'])

    _, r = self.anagrams2.get_anagrams("vocations")
    self.assertEqual(r, ['vocations'])

    _, r = self.anagrams2.get_anagrams("vogel")
    self.assertEqual(r, ['glove', 'vogel'])

    _, r = self.anagrams2.get_anagrams("vogue")
    self.assertEqual(r, ['vogue'])

    _, r = self.anagrams2.get_anagrams("voice")
    self.assertEqual(r, ['voice'])

    _, r = self.anagrams2.get_anagrams("voiced")
    self.assertEqual(r, ['voiced'])

    _, r = self.anagrams2.get_anagrams("voicer")
    self.assertEqual(r, ['voicer'])

    _, r = self.anagrams2.get_anagrams("voicers")
    self.assertEqual(r, ['voicers'])

    _, r = self.anagrams2.get_anagrams("voices")
    self.assertEqual(r, ['voices'])

    _, r = self.anagrams2.get_anagrams("voicing")
    self.assertEqual(r, ['voicing'])

    _, r = self.anagrams2.get_anagrams("void")
    self.assertEqual(r, ['ovid', 'void'])

    _, r = self.anagrams2.get_anagrams("voided")
    self.assertEqual(r, ['devoid', 'voided'])

    _, r = self.anagrams2.get_anagrams("voider")
    self.assertEqual(r, ['voider'])

    _, r = self.anagrams2.get_anagrams("voiding")
    self.assertEqual(r, ['voiding'])

    _, r = self.anagrams2.get_anagrams("voids")
    self.assertEqual(r, ['voids'])

    _, r = self.anagrams2.get_anagrams("volatile")
    self.assertEqual(r, ['volatile'])

    _, r = self.anagrams2.get_anagrams("volatilities")
    self.assertEqual(r, ['volatilities'])

    _, r = self.anagrams2.get_anagrams("volatility")
    self.assertEqual(r, ['volatility'])

    _, r = self.anagrams2.get_anagrams("volcanic")
    self.assertEqual(r, ['volcanic'])

    _, r = self.anagrams2.get_anagrams("volcano")
    self.assertEqual(r, ['volcano'])

    _, r = self.anagrams2.get_anagrams("volcanos")
    self.assertEqual(r, ['volcanos'])

    _, r = self.anagrams2.get_anagrams("volition")
    self.assertEqual(r, ['volition'])

    _, r = self.anagrams2.get_anagrams("volkswagen")
    self.assertEqual(r, ['volkswagen'])

    _, r = self.anagrams2.get_anagrams("volkswagens")
    self.assertEqual(r, ['volkswagens'])

    _, r = self.anagrams2.get_anagrams("volley")
    self.assertEqual(r, ['lovely', 'volley'])

    _, r = self.anagrams2.get_anagrams("volleyball")
    self.assertEqual(r, ['volleyball'])

    _, r = self.anagrams2.get_anagrams("volleyballs")
    self.assertEqual(r, ['volleyballs'])

    _, r = self.anagrams2.get_anagrams("volstead")
    self.assertEqual(r, ['volstead'])

    _, r = self.anagrams2.get_anagrams("volt")
    self.assertEqual(r, ['volt'])

    _, r = self.anagrams2.get_anagrams("volta")
    self.assertEqual(r, ['volta'])

    _, r = self.anagrams2.get_anagrams("voltage")
    self.assertEqual(r, ['voltage'])

    _, r = self.anagrams2.get_anagrams("voltages")
    self.assertEqual(r, ['voltages'])

    _, r = self.anagrams2.get_anagrams("voltaire")
    self.assertEqual(r, ['voltaire'])

    _, r = self.anagrams2.get_anagrams("volterra")
    self.assertEqual(r, ['volterra'])

    _, r = self.anagrams2.get_anagrams("volts")
    self.assertEqual(r, ['volts'])

    _, r = self.anagrams2.get_anagrams("volume")
    self.assertEqual(r, ['volume'])

    _, r = self.anagrams2.get_anagrams("volumes")
    self.assertEqual(r, ['volumes'])

    _, r = self.anagrams2.get_anagrams("voluntarily")
    self.assertEqual(r, ['voluntarily'])

    _, r = self.anagrams2.get_anagrams("voluntary")
    self.assertEqual(r, ['voluntary'])

    _, r = self.anagrams2.get_anagrams("volunteer")
    self.assertEqual(r, ['volunteer'])

    _, r = self.anagrams2.get_anagrams("volunteered")
    self.assertEqual(r, ['volunteered'])

    _, r = self.anagrams2.get_anagrams("volunteering")
    self.assertEqual(r, ['volunteering'])

    _, r = self.anagrams2.get_anagrams("volunteers")
    self.assertEqual(r, ['volunteers'])

    _, r = self.anagrams2.get_anagrams("volvo")
    self.assertEqual(r, ['volvo'])

    _, r = self.anagrams2.get_anagrams("vomit")
    self.assertEqual(r, ['vomit'])

    _, r = self.anagrams2.get_anagrams("vomited")
    self.assertEqual(r, ['vomited'])

    _, r = self.anagrams2.get_anagrams("vomiting")
    self.assertEqual(r, ['vomiting'])

    _, r = self.anagrams2.get_anagrams("vomits")
    self.assertEqual(r, ['vomits'])

    _, r = self.anagrams2.get_anagrams("vortex")
    self.assertEqual(r, ['vortex'])

    _, r = self.anagrams2.get_anagrams("voss")
    self.assertEqual(r, ['voss'])

    _, r = self.anagrams2.get_anagrams("vote")
    self.assertEqual(r, ['veto', 'vote'])

    _, r = self.anagrams2.get_anagrams("voted")
    self.assertEqual(r, ['voted'])

    _, r = self.anagrams2.get_anagrams("voter")
    self.assertEqual(r, ['overt', 'voter'])

    _, r = self.anagrams2.get_anagrams("voters")
    self.assertEqual(r, ['strove', 'voters'])

    _, r = self.anagrams2.get_anagrams("votes")
    self.assertEqual(r, ['stove', 'votes'])

    _, r = self.anagrams2.get_anagrams("voting")
    self.assertEqual(r, ['voting'])

    _, r = self.anagrams2.get_anagrams("votive")
    self.assertEqual(r, ['votive'])

    _, r = self.anagrams2.get_anagrams("vouch")
    self.assertEqual(r, ['vouch'])

    _, r = self.anagrams2.get_anagrams("voucher")
    self.assertEqual(r, ['voucher'])

    _, r = self.anagrams2.get_anagrams("vouchers")
    self.assertEqual(r, ['vouchers'])

    _, r = self.anagrams2.get_anagrams("vouches")
    self.assertEqual(r, ['vouches'])

    _, r = self.anagrams2.get_anagrams("vouching")
    self.assertEqual(r, ['vouching'])

    _, r = self.anagrams2.get_anagrams("vought")
    self.assertEqual(r, ['vought'])

    _, r = self.anagrams2.get_anagrams("vow")
    self.assertEqual(r, ['vow'])

    _, r = self.anagrams2.get_anagrams("vowed")
    self.assertEqual(r, ['vowed'])

    _, r = self.anagrams2.get_anagrams("vowel")
    self.assertEqual(r, ['vowel'])

    _, r = self.anagrams2.get_anagrams("vowels")
    self.assertEqual(r, ['vowels', 'wolves'])

    _, r = self.anagrams2.get_anagrams("vower")
    self.assertEqual(r, ['vower'])

    _, r = self.anagrams2.get_anagrams("vowing")
    self.assertEqual(r, ['vowing'])

    _, r = self.anagrams2.get_anagrams("vows")
    self.assertEqual(r, ['vows'])

    _, r = self.anagrams2.get_anagrams("voyage")
    self.assertEqual(r, ['voyage'])

    _, r = self.anagrams2.get_anagrams("voyaged")
    self.assertEqual(r, ['voyaged'])

    _, r = self.anagrams2.get_anagrams("voyager")
    self.assertEqual(r, ['voyager'])

    _, r = self.anagrams2.get_anagrams("voyagers")
    self.assertEqual(r, ['voyagers'])

    _, r = self.anagrams2.get_anagrams("voyages")
    self.assertEqual(r, ['voyages'])

    _, r = self.anagrams2.get_anagrams("voyaging")
    self.assertEqual(r, ['voyaging'])

    _, r = self.anagrams2.get_anagrams("voyagings")
    self.assertEqual(r, ['voyagings'])

    _, r = self.anagrams2.get_anagrams("vreeland")
    self.assertEqual(r, ['lavender', 'vreeland'])

    _, r = self.anagrams2.get_anagrams("vulcan")
    self.assertEqual(r, ['vulcan'])

    _, r = self.anagrams2.get_anagrams("vulcanism")
    self.assertEqual(r, ['vulcanism'])

    _, r = self.anagrams2.get_anagrams("vulgar")
    self.assertEqual(r, ['vulgar'])

    _, r = self.anagrams2.get_anagrams("vulgarly")
    self.assertEqual(r, ['vulgarly'])

    _, r = self.anagrams2.get_anagrams("vulnerabilities")
    self.assertEqual(r, ['vulnerabilities'])

    _, r = self.anagrams2.get_anagrams("vulnerability")
    self.assertEqual(r, ['vulnerability'])

    _, r = self.anagrams2.get_anagrams("vulnerable")
    self.assertEqual(r, ['vulnerable'])

    _, r = self.anagrams2.get_anagrams("vulture")
    self.assertEqual(r, ['vulture'])

    _, r = self.anagrams2.get_anagrams("vultures")
    self.assertEqual(r, ['vultures'])

    _, r = self.anagrams2.get_anagrams("waals")
    self.assertEqual(r, ['waals'])

    _, r = self.anagrams2.get_anagrams("wabash")
    self.assertEqual(r, ['wabash'])

    _, r = self.anagrams2.get_anagrams("wacke")
    self.assertEqual(r, ['wacke'])

    _, r = self.anagrams2.get_anagrams("wacky")
    self.assertEqual(r, ['wacky'])

    _, r = self.anagrams2.get_anagrams("waco")
    self.assertEqual(r, ['waco'])

    _, r = self.anagrams2.get_anagrams("wade")
    self.assertEqual(r, ['awed', 'wade'])

    _, r = self.anagrams2.get_anagrams("waded")
    self.assertEqual(r, ['waded'])

    _, r = self.anagrams2.get_anagrams("wader")
    self.assertEqual(r, ['wader'])

    _, r = self.anagrams2.get_anagrams("wades")
    self.assertEqual(r, ['sawed', 'wades'])

    _, r = self.anagrams2.get_anagrams("wading")
    self.assertEqual(r, ['wading'])

    _, r = self.anagrams2.get_anagrams("wadsworth")
    self.assertEqual(r, ['wadsworth'])

    _, r = self.anagrams2.get_anagrams("wafer")
    self.assertEqual(r, ['wafer'])

    _, r = self.anagrams2.get_anagrams("wafers")
    self.assertEqual(r, ['wafers'])

    _, r = self.anagrams2.get_anagrams("waffle")
    self.assertEqual(r, ['waffle'])

    _, r = self.anagrams2.get_anagrams("waffles")
    self.assertEqual(r, ['waffles'])

    _, r = self.anagrams2.get_anagrams("waft")
    self.assertEqual(r, ['waft'])

    _, r = self.anagrams2.get_anagrams("wag")
    self.assertEqual(r, ['wag'])

    _, r = self.anagrams2.get_anagrams("wage")
    self.assertEqual(r, ['wage'])

    _, r = self.anagrams2.get_anagrams("waged")
    self.assertEqual(r, ['waged'])

    _, r = self.anagrams2.get_anagrams("wager")
    self.assertEqual(r, ['wager'])

    _, r = self.anagrams2.get_anagrams("wagers")
    self.assertEqual(r, ['wagers'])

    _, r = self.anagrams2.get_anagrams("wages")
    self.assertEqual(r, ['wages'])

    _, r = self.anagrams2.get_anagrams("waging")
    self.assertEqual(r, ['waging'])

    _, r = self.anagrams2.get_anagrams("wagner")
    self.assertEqual(r, ['wagner'])

    _, r = self.anagrams2.get_anagrams("wagnerian")
    self.assertEqual(r, ['wagnerian'])

    _, r = self.anagrams2.get_anagrams("wagnerize")
    self.assertEqual(r, ['wagnerize'])

    _, r = self.anagrams2.get_anagrams("wagnerizes")
    self.assertEqual(r, ['wagnerizes'])

    _, r = self.anagrams2.get_anagrams("wagon")
    self.assertEqual(r, ['wagon'])

    _, r = self.anagrams2.get_anagrams("wagoner")
    self.assertEqual(r, ['wagoner'])

    _, r = self.anagrams2.get_anagrams("wagons")
    self.assertEqual(r, ['wagons'])

    _, r = self.anagrams2.get_anagrams("wags")
    self.assertEqual(r, ['wags'])

    _, r = self.anagrams2.get_anagrams("wahl")
    self.assertEqual(r, ['wahl'])

    _, r = self.anagrams2.get_anagrams("wail")
    self.assertEqual(r, ['wail'])

    _, r = self.anagrams2.get_anagrams("wailed")
    self.assertEqual(r, ['wailed'])

    _, r = self.anagrams2.get_anagrams("wailing")
    self.assertEqual(r, ['wailing'])

    _, r = self.anagrams2.get_anagrams("wails")
    self.assertEqual(r, ['wails'])

    _, r = self.anagrams2.get_anagrams("wainwright")
    self.assertEqual(r, ['wainwright'])

    _, r = self.anagrams2.get_anagrams("waist")
    self.assertEqual(r, ['waist', 'waits'])

    _, r = self.anagrams2.get_anagrams("waistcoat")
    self.assertEqual(r, ['waistcoat'])

    _, r = self.anagrams2.get_anagrams("waistcoats")
    self.assertEqual(r, ['waistcoats'])

    _, r = self.anagrams2.get_anagrams("waists")
    self.assertEqual(r, ['waists'])

    _, r = self.anagrams2.get_anagrams("wait")
    self.assertEqual(r, ['wait'])

    _, r = self.anagrams2.get_anagrams("waite")
    self.assertEqual(r, ['waite'])

    _, r = self.anagrams2.get_anagrams("waited")
    self.assertEqual(r, ['waited'])

    _, r = self.anagrams2.get_anagrams("waiter")
    self.assertEqual(r, ['waiter'])

    _, r = self.anagrams2.get_anagrams("waiters")
    self.assertEqual(r, ['waiters'])

    _, r = self.anagrams2.get_anagrams("waiting")
    self.assertEqual(r, ['waiting'])

    _, r = self.anagrams2.get_anagrams("waitress")
    self.assertEqual(r, ['waitress'])

    _, r = self.anagrams2.get_anagrams("waitresses")
    self.assertEqual(r, ['waitresses'])

    _, r = self.anagrams2.get_anagrams("waits")
    self.assertEqual(r, ['waist', 'waits'])

    _, r = self.anagrams2.get_anagrams("waive")
    self.assertEqual(r, ['waive'])

    _, r = self.anagrams2.get_anagrams("waived")
    self.assertEqual(r, ['waived'])

    _, r = self.anagrams2.get_anagrams("waiver")
    self.assertEqual(r, ['waiver'])

    _, r = self.anagrams2.get_anagrams("waiverable")
    self.assertEqual(r, ['waiverable'])

    _, r = self.anagrams2.get_anagrams("waives")
    self.assertEqual(r, ['waives'])

    _, r = self.anagrams2.get_anagrams("waiving")
    self.assertEqual(r, ['waiving'])

    _, r = self.anagrams2.get_anagrams("wake")
    self.assertEqual(r, ['wake', 'weak'])

    _, r = self.anagrams2.get_anagrams("waked")
    self.assertEqual(r, ['waked'])

    _, r = self.anagrams2.get_anagrams("wakefield")
    self.assertEqual(r, ['wakefield'])

    _, r = self.anagrams2.get_anagrams("waken")
    self.assertEqual(r, ['waken'])

    _, r = self.anagrams2.get_anagrams("wakened")
    self.assertEqual(r, ['wakened'])

    _, r = self.anagrams2.get_anagrams("wakening")
    self.assertEqual(r, ['wakening'])

    _, r = self.anagrams2.get_anagrams("wakes")
    self.assertEqual(r, ['askew', 'wakes'])

    _, r = self.anagrams2.get_anagrams("wakeup")
    self.assertEqual(r, ['wakeup'])

    _, r = self.anagrams2.get_anagrams("waking")
    self.assertEqual(r, ['waking'])

    _, r = self.anagrams2.get_anagrams("walbridge")
    self.assertEqual(r, ['walbridge'])

    _, r = self.anagrams2.get_anagrams("walcott")
    self.assertEqual(r, ['walcott'])

    _, r = self.anagrams2.get_anagrams("walden")
    self.assertEqual(r, ['walden'])

    _, r = self.anagrams2.get_anagrams("waldensian")
    self.assertEqual(r, ['waldensian'])

    _, r = self.anagrams2.get_anagrams("waldo")
    self.assertEqual(r, ['waldo'])

    _, r = self.anagrams2.get_anagrams("waldorf")
    self.assertEqual(r, ['lawford', 'waldorf', 'walford'])

    _, r = self.anagrams2.get_anagrams("waldron")
    self.assertEqual(r, ['rowland', 'waldron'])

    _, r = self.anagrams2.get_anagrams("wales")
    self.assertEqual(r, ['wales'])

    _, r = self.anagrams2.get_anagrams("walford")
    self.assertEqual(r, ['lawford', 'waldorf', 'walford'])

    _, r = self.anagrams2.get_anagrams("walgreen")
    self.assertEqual(r, ['walgreen'])

    _, r = self.anagrams2.get_anagrams("walk")
    self.assertEqual(r, ['walk'])

    _, r = self.anagrams2.get_anagrams("walked")
    self.assertEqual(r, ['walked'])

    _, r = self.anagrams2.get_anagrams("walker")
    self.assertEqual(r, ['walker'])

    _, r = self.anagrams2.get_anagrams("walkers")
    self.assertEqual(r, ['walkers'])

    _, r = self.anagrams2.get_anagrams("walking")
    self.assertEqual(r, ['walking'])

    _, r = self.anagrams2.get_anagrams("walks")
    self.assertEqual(r, ['walks'])

    _, r = self.anagrams2.get_anagrams("wall")
    self.assertEqual(r, ['wall'])

    _, r = self.anagrams2.get_anagrams("wallace")
    self.assertEqual(r, ['wallace'])

    _, r = self.anagrams2.get_anagrams("walled")
    self.assertEqual(r, ['walled'])

    _, r = self.anagrams2.get_anagrams("wallenstein")
    self.assertEqual(r, ['wallenstein'])

    _, r = self.anagrams2.get_anagrams("waller")
    self.assertEqual(r, ['waller'])

    _, r = self.anagrams2.get_anagrams("wallet")
    self.assertEqual(r, ['wallet'])

    _, r = self.anagrams2.get_anagrams("wallets")
    self.assertEqual(r, ['wallets'])

    _, r = self.anagrams2.get_anagrams("walling")
    self.assertEqual(r, ['walling'])

    _, r = self.anagrams2.get_anagrams("wallis")
    self.assertEqual(r, ['wallis'])

    _, r = self.anagrams2.get_anagrams("wallow")
    self.assertEqual(r, ['wallow'])

    _, r = self.anagrams2.get_anagrams("wallowed")
    self.assertEqual(r, ['wallowed'])

    _, r = self.anagrams2.get_anagrams("wallowing")
    self.assertEqual(r, ['wallowing'])

    _, r = self.anagrams2.get_anagrams("wallows")
    self.assertEqual(r, ['swallow', 'wallows'])

    _, r = self.anagrams2.get_anagrams("walls")
    self.assertEqual(r, ['walls'])

    _, r = self.anagrams2.get_anagrams("walnut")
    self.assertEqual(r, ['walnut'])

    _, r = self.anagrams2.get_anagrams("walnuts")
    self.assertEqual(r, ['walnuts'])

    _, r = self.anagrams2.get_anagrams("walpole")
    self.assertEqual(r, ['walpole'])

    _, r = self.anagrams2.get_anagrams("walrus")
    self.assertEqual(r, ['walrus'])

    _, r = self.anagrams2.get_anagrams("walruses")
    self.assertEqual(r, ['walruses'])

    _, r = self.anagrams2.get_anagrams("walsh")
    self.assertEqual(r, ['shawl', 'walsh'])

    _, r = self.anagrams2.get_anagrams("walt")
    self.assertEqual(r, ['walt'])

    _, r = self.anagrams2.get_anagrams("walter")
    self.assertEqual(r, ['walter'])

    _, r = self.anagrams2.get_anagrams("walters")
    self.assertEqual(r, ['walters'])

    _, r = self.anagrams2.get_anagrams("waltham")
    self.assertEqual(r, ['waltham'])

    _, r = self.anagrams2.get_anagrams("walton")
    self.assertEqual(r, ['walton'])

    _, r = self.anagrams2.get_anagrams("waltz")
    self.assertEqual(r, ['waltz'])

    _, r = self.anagrams2.get_anagrams("waltzed")
    self.assertEqual(r, ['waltzed'])

    _, r = self.anagrams2.get_anagrams("waltzes")
    self.assertEqual(r, ['waltzes'])

    _, r = self.anagrams2.get_anagrams("waltzing")
    self.assertEqual(r, ['waltzing'])

    _, r = self.anagrams2.get_anagrams("walworth")
    self.assertEqual(r, ['walworth'])

    _, r = self.anagrams2.get_anagrams("wan")
    self.assertEqual(r, ['wan'])

    _, r = self.anagrams2.get_anagrams("wand")
    self.assertEqual(r, ['dawn', 'wand'])

    _, r = self.anagrams2.get_anagrams("wander")
    self.assertEqual(r, ['andrew', 'wander', 'warden', 'warned'])

    _, r = self.anagrams2.get_anagrams("wandered")
    self.assertEqual(r, ['wandered'])

    _, r = self.anagrams2.get_anagrams("wanderer")
    self.assertEqual(r, ['wanderer'])

    _, r = self.anagrams2.get_anagrams("wanderers")
    self.assertEqual(r, ['wanderers'])

    _, r = self.anagrams2.get_anagrams("wandering")
    self.assertEqual(r, ['wandering'])

    _, r = self.anagrams2.get_anagrams("wanderings")
    self.assertEqual(r, ['wanderings'])

    _, r = self.anagrams2.get_anagrams("wanders")
    self.assertEqual(r, ['andrews', 'wanders', 'wardens'])

    _, r = self.anagrams2.get_anagrams("wane")
    self.assertEqual(r, ['anew', 'wane', 'wean'])

    _, r = self.anagrams2.get_anagrams("waned")
    self.assertEqual(r, ['waned'])

    _, r = self.anagrams2.get_anagrams("wanes")
    self.assertEqual(r, ['wanes'])

    _, r = self.anagrams2.get_anagrams("wang")
    self.assertEqual(r, ['gnaw', 'wang'])

    _, r = self.anagrams2.get_anagrams("waning")
    self.assertEqual(r, ['awning', 'waning'])

    _, r = self.anagrams2.get_anagrams("wanly")
    self.assertEqual(r, ['wanly'])

    _, r = self.anagrams2.get_anagrams("wansee")
    self.assertEqual(r, ['wansee'])

    _, r = self.anagrams2.get_anagrams("wansley")
    self.assertEqual(r, ['wansley'])

    _, r = self.anagrams2.get_anagrams("want")
    self.assertEqual(r, ['want'])

    _, r = self.anagrams2.get_anagrams("wanted")
    self.assertEqual(r, ['wanted'])

    _, r = self.anagrams2.get_anagrams("wanting")
    self.assertEqual(r, ['wanting'])

    _, r = self.anagrams2.get_anagrams("wanton")
    self.assertEqual(r, ['wanton'])

    _, r = self.anagrams2.get_anagrams("wantonly")
    self.assertEqual(r, ['wantonly'])

    _, r = self.anagrams2.get_anagrams("wantonness")
    self.assertEqual(r, ['wantonness'])

    _, r = self.anagrams2.get_anagrams("wants")
    self.assertEqual(r, ['wants'])

    _, r = self.anagrams2.get_anagrams("wapato")
    self.assertEqual(r, ['wapato'])

    _, r = self.anagrams2.get_anagrams("wappinger")
    self.assertEqual(r, ['wappinger'])

    _, r = self.anagrams2.get_anagrams("war")
    self.assertEqual(r, ['raw', 'war'])

    _, r = self.anagrams2.get_anagrams("warble")
    self.assertEqual(r, ['warble'])

    _, r = self.anagrams2.get_anagrams("warbled")
    self.assertEqual(r, ['warbled'])

    _, r = self.anagrams2.get_anagrams("warbler")
    self.assertEqual(r, ['brawler', 'warbler'])

    _, r = self.anagrams2.get_anagrams("warbles")
    self.assertEqual(r, ['warbles'])

    _, r = self.anagrams2.get_anagrams("warbling")
    self.assertEqual(r, ['brawling', 'warbling'])

    _, r = self.anagrams2.get_anagrams("warburton")
    self.assertEqual(r, ['warburton'])

    _, r = self.anagrams2.get_anagrams("ward")
    self.assertEqual(r, ['draw', 'ward'])

    _, r = self.anagrams2.get_anagrams("warden")
    self.assertEqual(r, ['andrew', 'wander', 'warden', 'warned'])

    _, r = self.anagrams2.get_anagrams("wardens")
    self.assertEqual(r, ['andrews', 'wanders', 'wardens'])

    _, r = self.anagrams2.get_anagrams("warder")
    self.assertEqual(r, ['drawer', 'redraw', 'reward', 'warder', 'warred'])

    _, r = self.anagrams2.get_anagrams("wardrobe")
    self.assertEqual(r, ['wardrobe'])

    _, r = self.anagrams2.get_anagrams("wardrobes")
    self.assertEqual(r, ['wardrobes'])

    _, r = self.anagrams2.get_anagrams("wards")
    self.assertEqual(r, ['draws', 'wards'])

    _, r = self.anagrams2.get_anagrams("ware")
    self.assertEqual(r, ['ware', 'wear'])

    _, r = self.anagrams2.get_anagrams("warehouse")
    self.assertEqual(r, ['warehouse'])

    _, r = self.anagrams2.get_anagrams("warehouses")
    self.assertEqual(r, ['warehouses'])

    _, r = self.anagrams2.get_anagrams("warehousing")
    self.assertEqual(r, ['warehousing'])

    _, r = self.anagrams2.get_anagrams("wares")
    self.assertEqual(r, ['swear', 'wares', 'wears'])

    _, r = self.anagrams2.get_anagrams("warfare")
    self.assertEqual(r, ['warfare'])

    _, r = self.anagrams2.get_anagrams("warfield")
    self.assertEqual(r, ['warfield'])

    _, r = self.anagrams2.get_anagrams("warily")
    self.assertEqual(r, ['warily'])

    _, r = self.anagrams2.get_anagrams("wariness")
    self.assertEqual(r, ['wariness'])

    _, r = self.anagrams2.get_anagrams("waring")
    self.assertEqual(r, ['waring'])

    _, r = self.anagrams2.get_anagrams("warlike")
    self.assertEqual(r, ['warlike'])

    _, r = self.anagrams2.get_anagrams("warm")
    self.assertEqual(r, ['mawr', 'warm'])

    _, r = self.anagrams2.get_anagrams("warmed")
    self.assertEqual(r, ['warmed'])

    _, r = self.anagrams2.get_anagrams("warmer")
    self.assertEqual(r, ['warmer'])

    _, r = self.anagrams2.get_anagrams("warmers")
    self.assertEqual(r, ['warmers'])

    _, r = self.anagrams2.get_anagrams("warmest")
    self.assertEqual(r, ['warmest'])

    _, r = self.anagrams2.get_anagrams("warming")
    self.assertEqual(r, ['warming'])

    _, r = self.anagrams2.get_anagrams("warmly")
    self.assertEqual(r, ['warmly'])

    _, r = self.anagrams2.get_anagrams("warms")
    self.assertEqual(r, ['swarm', 'warms'])

    _, r = self.anagrams2.get_anagrams("warmth")
    self.assertEqual(r, ['warmth'])

    _, r = self.anagrams2.get_anagrams("warn")
    self.assertEqual(r, ['warn'])

    _, r = self.anagrams2.get_anagrams("warned")
    self.assertEqual(r, ['andrew', 'wander', 'warden', 'warned'])

    _, r = self.anagrams2.get_anagrams("warner")
    self.assertEqual(r, ['warner'])

    _, r = self.anagrams2.get_anagrams("warning")
    self.assertEqual(r, ['warning'])

    _, r = self.anagrams2.get_anagrams("warningly")
    self.assertEqual(r, ['warningly'])

    _, r = self.anagrams2.get_anagrams("warnings")
    self.assertEqual(r, ['warnings'])

    _, r = self.anagrams2.get_anagrams("warnock")
    self.assertEqual(r, ['warnock'])

    _, r = self.anagrams2.get_anagrams("warns")
    self.assertEqual(r, ['warns'])

    _, r = self.anagrams2.get_anagrams("warp")
    self.assertEqual(r, ['warp', 'wrap'])

    _, r = self.anagrams2.get_anagrams("warped")
    self.assertEqual(r, ['warped'])

    _, r = self.anagrams2.get_anagrams("warping")
    self.assertEqual(r, ['warping'])

    _, r = self.anagrams2.get_anagrams("warps")
    self.assertEqual(r, ['warps', 'wraps'])

    _, r = self.anagrams2.get_anagrams("warrant")
    self.assertEqual(r, ['warrant'])

    _, r = self.anagrams2.get_anagrams("warranted")
    self.assertEqual(r, ['warranted'])

    _, r = self.anagrams2.get_anagrams("warranties")
    self.assertEqual(r, ['warranties'])

    _, r = self.anagrams2.get_anagrams("warranting")
    self.assertEqual(r, ['warranting'])

    _, r = self.anagrams2.get_anagrams("warrants")
    self.assertEqual(r, ['warrants'])

    _, r = self.anagrams2.get_anagrams("warranty")
    self.assertEqual(r, ['warranty'])

    _, r = self.anagrams2.get_anagrams("warred")
    self.assertEqual(r, ['drawer', 'redraw', 'reward', 'warder', 'warred'])

    _, r = self.anagrams2.get_anagrams("warring")
    self.assertEqual(r, ['warring'])

    _, r = self.anagrams2.get_anagrams("warrior")
    self.assertEqual(r, ['warrior'])

    _, r = self.anagrams2.get_anagrams("warriors")
    self.assertEqual(r, ['warriors'])

    _, r = self.anagrams2.get_anagrams("wars")
    self.assertEqual(r, ['wars'])

    _, r = self.anagrams2.get_anagrams("warsaw")
    self.assertEqual(r, ['warsaw'])

    _, r = self.anagrams2.get_anagrams("warship")
    self.assertEqual(r, ['warship'])

    _, r = self.anagrams2.get_anagrams("warships")
    self.assertEqual(r, ['warships'])

    _, r = self.anagrams2.get_anagrams("wart")
    self.assertEqual(r, ['wart'])

    _, r = self.anagrams2.get_anagrams("wartime")
    self.assertEqual(r, ['wartime'])

    _, r = self.anagrams2.get_anagrams("warts")
    self.assertEqual(r, ['straw', 'warts'])

    _, r = self.anagrams2.get_anagrams("warwick")
    self.assertEqual(r, ['warwick'])

    _, r = self.anagrams2.get_anagrams("wary")
    self.assertEqual(r, ['awry', 'wary'])

    _, r = self.anagrams2.get_anagrams("was")
    self.assertEqual(r, ['saw', 'was'])

    _, r = self.anagrams2.get_anagrams("wash")
    self.assertEqual(r, ['wash'])

    _, r = self.anagrams2.get_anagrams("washburn")
    self.assertEqual(r, ['washburn'])

    _, r = self.anagrams2.get_anagrams("washed")
    self.assertEqual(r, ['washed'])

    _, r = self.anagrams2.get_anagrams("washer")
    self.assertEqual(r, ['washer'])

    _, r = self.anagrams2.get_anagrams("washers")
    self.assertEqual(r, ['washers'])

    _, r = self.anagrams2.get_anagrams("washes")
    self.assertEqual(r, ['washes'])

    _, r = self.anagrams2.get_anagrams("washing")
    self.assertEqual(r, ['washing'])

    _, r = self.anagrams2.get_anagrams("washings")
    self.assertEqual(r, ['washings'])

    _, r = self.anagrams2.get_anagrams("washington")
    self.assertEqual(r, ['washington'])

    _, r = self.anagrams2.get_anagrams("washoe")
    self.assertEqual(r, ['washoe'])

    _, r = self.anagrams2.get_anagrams("wasp")
    self.assertEqual(r, ['paws', 'swap', 'wasp'])

    _, r = self.anagrams2.get_anagrams("wasps")
    self.assertEqual(r, ['swaps', 'wasps'])

    _, r = self.anagrams2.get_anagrams("wasserman")
    self.assertEqual(r, ['wasserman'])

    _, r = self.anagrams2.get_anagrams("waste")
    self.assertEqual(r, ['sweat', 'waste'])

    _, r = self.anagrams2.get_anagrams("wasted")
    self.assertEqual(r, ['wasted'])

    _, r = self.anagrams2.get_anagrams("wasteful")
    self.assertEqual(r, ['wasteful'])

    _, r = self.anagrams2.get_anagrams("wastefully")
    self.assertEqual(r, ['wastefully'])

    _, r = self.anagrams2.get_anagrams("wastefulness")
    self.assertEqual(r, ['wastefulness'])

    _, r = self.anagrams2.get_anagrams("wastes")
    self.assertEqual(r, ['sweats', 'wastes'])

    _, r = self.anagrams2.get_anagrams("wasting")
    self.assertEqual(r, ['wasting'])

    _, r = self.anagrams2.get_anagrams("watanabe")
    self.assertEqual(r, ['watanabe'])

    _, r = self.anagrams2.get_anagrams("watch")
    self.assertEqual(r, ['watch'])

    _, r = self.anagrams2.get_anagrams("watched")
    self.assertEqual(r, ['watched'])

    _, r = self.anagrams2.get_anagrams("watcher")
    self.assertEqual(r, ['watcher'])

    _, r = self.anagrams2.get_anagrams("watchers")
    self.assertEqual(r, ['watchers'])

    _, r = self.anagrams2.get_anagrams("watches")
    self.assertEqual(r, ['watches'])

    _, r = self.anagrams2.get_anagrams("watchful")
    self.assertEqual(r, ['watchful'])

    _, r = self.anagrams2.get_anagrams("watchfully")
    self.assertEqual(r, ['watchfully'])

    _, r = self.anagrams2.get_anagrams("watchfulness")
    self.assertEqual(r, ['watchfulness'])

    _, r = self.anagrams2.get_anagrams("watching")
    self.assertEqual(r, ['watching'])

    _, r = self.anagrams2.get_anagrams("watchings")
    self.assertEqual(r, ['watchings'])

    _, r = self.anagrams2.get_anagrams("watchman")
    self.assertEqual(r, ['watchman'])

    _, r = self.anagrams2.get_anagrams("watchword")
    self.assertEqual(r, ['watchword'])

    _, r = self.anagrams2.get_anagrams("watchwords")
    self.assertEqual(r, ['watchwords'])

    _, r = self.anagrams2.get_anagrams("water")
    self.assertEqual(r, ['water'])

    _, r = self.anagrams2.get_anagrams("waterbury")
    self.assertEqual(r, ['waterbury'])

    _, r = self.anagrams2.get_anagrams("watered")
    self.assertEqual(r, ['watered'])

    _, r = self.anagrams2.get_anagrams("waterfall")
    self.assertEqual(r, ['waterfall'])

    _, r = self.anagrams2.get_anagrams("waterfalls")
    self.assertEqual(r, ['waterfalls'])

    _, r = self.anagrams2.get_anagrams("watergate")
    self.assertEqual(r, ['watergate'])

    _, r = self.anagrams2.get_anagrams("waterhouse")
    self.assertEqual(r, ['waterhouse'])

    _, r = self.anagrams2.get_anagrams("watering")
    self.assertEqual(r, ['watering'])

    _, r = self.anagrams2.get_anagrams("waterings")
    self.assertEqual(r, ['waterings'])

    _, r = self.anagrams2.get_anagrams("waterloo")
    self.assertEqual(r, ['waterloo'])

    _, r = self.anagrams2.get_anagrams("waterman")
    self.assertEqual(r, ['waterman'])

    _, r = self.anagrams2.get_anagrams("waterproof")
    self.assertEqual(r, ['waterproof'])

    _, r = self.anagrams2.get_anagrams("waterproofing")
    self.assertEqual(r, ['waterproofing'])

    _, r = self.anagrams2.get_anagrams("waters")
    self.assertEqual(r, ['rawest', 'waters'])

    _, r = self.anagrams2.get_anagrams("watertown")
    self.assertEqual(r, ['watertown'])

    _, r = self.anagrams2.get_anagrams("waterway")
    self.assertEqual(r, ['waterway'])

    _, r = self.anagrams2.get_anagrams("waterways")
    self.assertEqual(r, ['waterways'])

    _, r = self.anagrams2.get_anagrams("watery")
    self.assertEqual(r, ['watery'])

    _, r = self.anagrams2.get_anagrams("watkins")
    self.assertEqual(r, ['watkins'])

    _, r = self.anagrams2.get_anagrams("watson")
    self.assertEqual(r, ['watson'])

    _, r = self.anagrams2.get_anagrams("wattenberg")
    self.assertEqual(r, ['wattenberg'])

    _, r = self.anagrams2.get_anagrams("watterson")
    self.assertEqual(r, ['watterson'])

    _, r = self.anagrams2.get_anagrams("watts")
    self.assertEqual(r, ['watts'])

    _, r = self.anagrams2.get_anagrams("waukesha")
    self.assertEqual(r, ['waukesha'])

    _, r = self.anagrams2.get_anagrams("waunona")
    self.assertEqual(r, ['waunona'])

    _, r = self.anagrams2.get_anagrams("waupaca")
    self.assertEqual(r, ['waupaca'])

    _, r = self.anagrams2.get_anagrams("waupun")
    self.assertEqual(r, ['waupun'])

    _, r = self.anagrams2.get_anagrams("wausau")
    self.assertEqual(r, ['wausau'])

    _, r = self.anagrams2.get_anagrams("wauwatosa")
    self.assertEqual(r, ['wauwatosa'])

    _, r = self.anagrams2.get_anagrams("wave")
    self.assertEqual(r, ['wave'])

    _, r = self.anagrams2.get_anagrams("waved")
    self.assertEqual(r, ['waved'])

    _, r = self.anagrams2.get_anagrams("waveform")
    self.assertEqual(r, ['waveform'])

    _, r = self.anagrams2.get_anagrams("waveforms")
    self.assertEqual(r, ['waveforms'])

    _, r = self.anagrams2.get_anagrams("wavefront")
    self.assertEqual(r, ['wavefront'])

    _, r = self.anagrams2.get_anagrams("wavefronts")
    self.assertEqual(r, ['wavefronts'])

    _, r = self.anagrams2.get_anagrams("waveguides")
    self.assertEqual(r, ['waveguides'])

    _, r = self.anagrams2.get_anagrams("waveland")
    self.assertEqual(r, ['waveland'])

    _, r = self.anagrams2.get_anagrams("wavelength")
    self.assertEqual(r, ['wavelength'])

    _, r = self.anagrams2.get_anagrams("wavelengths")
    self.assertEqual(r, ['wavelengths'])

    _, r = self.anagrams2.get_anagrams("waver")
    self.assertEqual(r, ['waver'])

    _, r = self.anagrams2.get_anagrams("wavers")
    self.assertEqual(r, ['wavers'])

    _, r = self.anagrams2.get_anagrams("waves")
    self.assertEqual(r, ['waves'])

    _, r = self.anagrams2.get_anagrams("waving")
    self.assertEqual(r, ['waving'])

    _, r = self.anagrams2.get_anagrams("wax")
    self.assertEqual(r, ['wax'])

    _, r = self.anagrams2.get_anagrams("waxed")
    self.assertEqual(r, ['waxed'])

    _, r = self.anagrams2.get_anagrams("waxen")
    self.assertEqual(r, ['waxen'])

    _, r = self.anagrams2.get_anagrams("waxer")
    self.assertEqual(r, ['waxer'])

    _, r = self.anagrams2.get_anagrams("waxers")
    self.assertEqual(r, ['waxers'])

    _, r = self.anagrams2.get_anagrams("waxes")
    self.assertEqual(r, ['waxes'])

    _, r = self.anagrams2.get_anagrams("waxing")
    self.assertEqual(r, ['waxing'])

    _, r = self.anagrams2.get_anagrams("waxy")
    self.assertEqual(r, ['waxy'])

    _, r = self.anagrams2.get_anagrams("way")
    self.assertEqual(r, ['way'])

    _, r = self.anagrams2.get_anagrams("wayne")
    self.assertEqual(r, ['wayne'])

    _, r = self.anagrams2.get_anagrams("waynesboro")
    self.assertEqual(r, ['waynesboro'])

    _, r = self.anagrams2.get_anagrams("ways")
    self.assertEqual(r, ['sway', 'ways'])

    _, r = self.anagrams2.get_anagrams("wayside")
    self.assertEqual(r, ['wayside'])

    _, r = self.anagrams2.get_anagrams("wayward")
    self.assertEqual(r, ['wayward'])

    _, r = self.anagrams2.get_anagrams("we")
    self.assertEqual(r, ['we'])

    _, r = self.anagrams2.get_anagrams("weak")
    self.assertEqual(r, ['wake', 'weak'])

    _, r = self.anagrams2.get_anagrams("weaken")
    self.assertEqual(r, ['weaken'])

    _, r = self.anagrams2.get_anagrams("weakened")
    self.assertEqual(r, ['weakened'])

    _, r = self.anagrams2.get_anagrams("weakening")
    self.assertEqual(r, ['weakening'])

    _, r = self.anagrams2.get_anagrams("weakens")
    self.assertEqual(r, ['weakens'])

    _, r = self.anagrams2.get_anagrams("weaker")
    self.assertEqual(r, ['weaker'])

    _, r = self.anagrams2.get_anagrams("weakest")
    self.assertEqual(r, ['weakest'])

    _, r = self.anagrams2.get_anagrams("weakly")
    self.assertEqual(r, ['weakly'])

    _, r = self.anagrams2.get_anagrams("weakness")
    self.assertEqual(r, ['weakness'])

    _, r = self.anagrams2.get_anagrams("weaknesses")
    self.assertEqual(r, ['weaknesses'])

    _, r = self.anagrams2.get_anagrams("wealth")
    self.assertEqual(r, ['wealth'])

    _, r = self.anagrams2.get_anagrams("wealthiest")
    self.assertEqual(r, ['wealthiest'])

    _, r = self.anagrams2.get_anagrams("wealths")
    self.assertEqual(r, ['wealths'])

    _, r = self.anagrams2.get_anagrams("wealthy")
    self.assertEqual(r, ['wealthy', 'whatley'])

    _, r = self.anagrams2.get_anagrams("wean")
    self.assertEqual(r, ['anew', 'wane', 'wean'])

    _, r = self.anagrams2.get_anagrams("weaned")
    self.assertEqual(r, ['weaned'])

    _, r = self.anagrams2.get_anagrams("weaning")
    self.assertEqual(r, ['weaning'])

    _, r = self.anagrams2.get_anagrams("weapon")
    self.assertEqual(r, ['weapon'])

    _, r = self.anagrams2.get_anagrams("weapons")
    self.assertEqual(r, ['weapons'])

    _, r = self.anagrams2.get_anagrams("wear")
    self.assertEqual(r, ['ware', 'wear'])

    _, r = self.anagrams2.get_anagrams("wearable")
    self.assertEqual(r, ['wearable'])

    _, r = self.anagrams2.get_anagrams("wearer")
    self.assertEqual(r, ['wearer'])

    _, r = self.anagrams2.get_anagrams("wearied")
    self.assertEqual(r, ['wearied'])

    _, r = self.anagrams2.get_anagrams("wearier")
    self.assertEqual(r, ['wearier'])

    _, r = self.anagrams2.get_anagrams("weariest")
    self.assertEqual(r, ['weariest'])

    _, r = self.anagrams2.get_anagrams("wearily")
    self.assertEqual(r, ['wearily'])

    _, r = self.anagrams2.get_anagrams("weariness")
    self.assertEqual(r, ['weariness'])

    _, r = self.anagrams2.get_anagrams("wearing")
    self.assertEqual(r, ['wearing'])

    _, r = self.anagrams2.get_anagrams("wearisome")
    self.assertEqual(r, ['wearisome'])

    _, r = self.anagrams2.get_anagrams("wearisomely")
    self.assertEqual(r, ['wearisomely'])

    _, r = self.anagrams2.get_anagrams("wears")
    self.assertEqual(r, ['swear', 'wares', 'wears'])

    _, r = self.anagrams2.get_anagrams("weary")
    self.assertEqual(r, ['weary'])

    _, r = self.anagrams2.get_anagrams("wearying")
    self.assertEqual(r, ['wearying'])

    _, r = self.anagrams2.get_anagrams("weasel")
    self.assertEqual(r, ['weasel'])

    _, r = self.anagrams2.get_anagrams("weasels")
    self.assertEqual(r, ['weasels'])

    _, r = self.anagrams2.get_anagrams("weather")
    self.assertEqual(r, ['weather'])

    _, r = self.anagrams2.get_anagrams("weathercock")
    self.assertEqual(r, ['weathercock'])

    _, r = self.anagrams2.get_anagrams("weathercocks")
    self.assertEqual(r, ['weathercocks'])

    _, r = self.anagrams2.get_anagrams("weathered")
    self.assertEqual(r, ['weathered'])

    _, r = self.anagrams2.get_anagrams("weatherford")
    self.assertEqual(r, ['weatherford'])

    _, r = self.anagrams2.get_anagrams("weathering")
    self.assertEqual(r, ['weathering'])

    _, r = self.anagrams2.get_anagrams("weathers")
    self.assertEqual(r, ['weathers', 'wreathes'])

    _, r = self.anagrams2.get_anagrams("weave")
    self.assertEqual(r, ['weave'])

    _, r = self.anagrams2.get_anagrams("weaver")
    self.assertEqual(r, ['weaver'])

    _, r = self.anagrams2.get_anagrams("weaves")
    self.assertEqual(r, ['weaves'])

    _, r = self.anagrams2.get_anagrams("weaving")
    self.assertEqual(r, ['weaving'])

    _, r = self.anagrams2.get_anagrams("web")
    self.assertEqual(r, ['web'])

    _, r = self.anagrams2.get_anagrams("webb")
    self.assertEqual(r, ['webb'])

    _, r = self.anagrams2.get_anagrams("webber")
    self.assertEqual(r, ['webber'])

    _, r = self.anagrams2.get_anagrams("webs")
    self.assertEqual(r, ['webs'])

    _, r = self.anagrams2.get_anagrams("webster")
    self.assertEqual(r, ['webster'])

    _, r = self.anagrams2.get_anagrams("websterville")
    self.assertEqual(r, ['websterville'])

    _, r = self.anagrams2.get_anagrams("wedded")
    self.assertEqual(r, ['wedded'])

    _, r = self.anagrams2.get_anagrams("wedding")
    self.assertEqual(r, ['wedding'])

    _, r = self.anagrams2.get_anagrams("weddings")
    self.assertEqual(r, ['weddings'])

    _, r = self.anagrams2.get_anagrams("wedge")
    self.assertEqual(r, ['wedge'])

    _, r = self.anagrams2.get_anagrams("wedged")
    self.assertEqual(r, ['wedged'])

    _, r = self.anagrams2.get_anagrams("wedges")
    self.assertEqual(r, ['wedges'])

    _, r = self.anagrams2.get_anagrams("wedging")
    self.assertEqual(r, ['wedging'])

    _, r = self.anagrams2.get_anagrams("wedlock")
    self.assertEqual(r, ['wedlock'])

    _, r = self.anagrams2.get_anagrams("wednesday")
    self.assertEqual(r, ['wednesday'])

    _, r = self.anagrams2.get_anagrams("wednesdays")
    self.assertEqual(r, ['wednesdays'])

    _, r = self.anagrams2.get_anagrams("weds")
    self.assertEqual(r, ['weds'])

    _, r = self.anagrams2.get_anagrams("wee")
    self.assertEqual(r, ['ewe', 'wee'])

    _, r = self.anagrams2.get_anagrams("weed")
    self.assertEqual(r, ['weed'])

    _, r = self.anagrams2.get_anagrams("weeds")
    self.assertEqual(r, ['sewed', 'swede', 'weeds'])

    _, r = self.anagrams2.get_anagrams("week")
    self.assertEqual(r, ['week'])

    _, r = self.anagrams2.get_anagrams("weekend")
    self.assertEqual(r, ['weekend'])

    _, r = self.anagrams2.get_anagrams("weekends")
    self.assertEqual(r, ['weekends'])

    _, r = self.anagrams2.get_anagrams("weekly")
    self.assertEqual(r, ['weekly'])

    _, r = self.anagrams2.get_anagrams("weeks")
    self.assertEqual(r, ['weeks'])

    _, r = self.anagrams2.get_anagrams("weep")
    self.assertEqual(r, ['weep'])

    _, r = self.anagrams2.get_anagrams("weeper")
    self.assertEqual(r, ['weeper'])

    _, r = self.anagrams2.get_anagrams("weeping")
    self.assertEqual(r, ['weeping'])

    _, r = self.anagrams2.get_anagrams("weeps")
    self.assertEqual(r, ['sweep', 'weeps'])

    _, r = self.anagrams2.get_anagrams("wehr")
    self.assertEqual(r, ['wehr'])

    _, r = self.anagrams2.get_anagrams("wei")
    self.assertEqual(r, ['wei'])

    _, r = self.anagrams2.get_anagrams("weibull")
    self.assertEqual(r, ['weibull'])

    _, r = self.anagrams2.get_anagrams("weider")
    self.assertEqual(r, ['weider'])

    _, r = self.anagrams2.get_anagrams("weidman")
    self.assertEqual(r, ['weidman'])

    _, r = self.anagrams2.get_anagrams("weierstrass")
    self.assertEqual(r, ['weierstrass'])

    _, r = self.anagrams2.get_anagrams("weigh")
    self.assertEqual(r, ['weigh'])

    _, r = self.anagrams2.get_anagrams("weighed")
    self.assertEqual(r, ['weighed'])

    _, r = self.anagrams2.get_anagrams("weighing")
    self.assertEqual(r, ['weighing'])

    _, r = self.anagrams2.get_anagrams("weighings")
    self.assertEqual(r, ['weighings'])

    _, r = self.anagrams2.get_anagrams("weighs")
    self.assertEqual(r, ['weighs'])

    _, r = self.anagrams2.get_anagrams("weight")
    self.assertEqual(r, ['weight'])

    _, r = self.anagrams2.get_anagrams("weighted")
    self.assertEqual(r, ['weighted'])

    _, r = self.anagrams2.get_anagrams("weighting")
    self.assertEqual(r, ['weighting'])

    _, r = self.anagrams2.get_anagrams("weights")
    self.assertEqual(r, ['weights'])

    _, r = self.anagrams2.get_anagrams("weighty")
    self.assertEqual(r, ['weighty'])

    _, r = self.anagrams2.get_anagrams("weinberg")
    self.assertEqual(r, ['weinberg'])

    _, r = self.anagrams2.get_anagrams("weiner")
    self.assertEqual(r, ['weiner'])

    _, r = self.anagrams2.get_anagrams("weinstein")
    self.assertEqual(r, ['weinstein'])

    _, r = self.anagrams2.get_anagrams("weird")
    self.assertEqual(r, ['weird', 'wider', 'wired'])

    _, r = self.anagrams2.get_anagrams("weirdly")
    self.assertEqual(r, ['weirdly'])

    _, r = self.anagrams2.get_anagrams("weisenheimer")
    self.assertEqual(r, ['weisenheimer'])

    _, r = self.anagrams2.get_anagrams("weiss")
    self.assertEqual(r, ['weiss'])

    _, r = self.anagrams2.get_anagrams("weissman")
    self.assertEqual(r, ['weissman'])

    _, r = self.anagrams2.get_anagrams("weissmuller")
    self.assertEqual(r, ['weissmuller'])

    _, r = self.anagrams2.get_anagrams("welch")
    self.assertEqual(r, ['welch'])

    _, r = self.anagrams2.get_anagrams("welcher")
    self.assertEqual(r, ['welcher'])

    _, r = self.anagrams2.get_anagrams("welches")
    self.assertEqual(r, ['welches'])

    _, r = self.anagrams2.get_anagrams("welcome")
    self.assertEqual(r, ['welcome'])

    _, r = self.anagrams2.get_anagrams("welcomed")
    self.assertEqual(r, ['welcomed'])

    _, r = self.anagrams2.get_anagrams("welcomes")
    self.assertEqual(r, ['welcomes'])

    _, r = self.anagrams2.get_anagrams("welcoming")
    self.assertEqual(r, ['welcoming'])

    _, r = self.anagrams2.get_anagrams("weld")
    self.assertEqual(r, ['lewd', 'weld'])

    _, r = self.anagrams2.get_anagrams("welded")
    self.assertEqual(r, ['welded'])

    _, r = self.anagrams2.get_anagrams("welder")
    self.assertEqual(r, ['welder'])

    _, r = self.anagrams2.get_anagrams("welding")
    self.assertEqual(r, ['welding'])

    _, r = self.anagrams2.get_anagrams("weldon")
    self.assertEqual(r, ['weldon'])

    _, r = self.anagrams2.get_anagrams("welds")
    self.assertEqual(r, ['welds'])

    _, r = self.anagrams2.get_anagrams("weldwood")
    self.assertEqual(r, ['weldwood'])

    _, r = self.anagrams2.get_anagrams("welfare")
    self.assertEqual(r, ['welfare'])

    _, r = self.anagrams2.get_anagrams("well")
    self.assertEqual(r, ['well'])

    _, r = self.anagrams2.get_anagrams("welled")
    self.assertEqual(r, ['welled'])

    _, r = self.anagrams2.get_anagrams("weller")
    self.assertEqual(r, ['weller'])

    _, r = self.anagrams2.get_anagrams("welles")
    self.assertEqual(r, ['welles'])

    _, r = self.anagrams2.get_anagrams("wellesley")
    self.assertEqual(r, ['wellesley'])

    _, r = self.anagrams2.get_anagrams("welling")
    self.assertEqual(r, ['welling'])

    _, r = self.anagrams2.get_anagrams("wellington")
    self.assertEqual(r, ['wellington'])

    _, r = self.anagrams2.get_anagrams("wellman")
    self.assertEqual(r, ['wellman'])

    _, r = self.anagrams2.get_anagrams("wells")
    self.assertEqual(r, ['swell', 'wells'])

    _, r = self.anagrams2.get_anagrams("wellsville")
    self.assertEqual(r, ['wellsville'])

    _, r = self.anagrams2.get_anagrams("welmers")
    self.assertEqual(r, ['welmers'])

    _, r = self.anagrams2.get_anagrams("welsh")
    self.assertEqual(r, ['welsh'])

    _, r = self.anagrams2.get_anagrams("welton")
    self.assertEqual(r, ['welton'])

    _, r = self.anagrams2.get_anagrams("wench")
    self.assertEqual(r, ['wench'])

    _, r = self.anagrams2.get_anagrams("wenches")
    self.assertEqual(r, ['wenches'])

    _, r = self.anagrams2.get_anagrams("wendell")
    self.assertEqual(r, ['wendell'])

    _, r = self.anagrams2.get_anagrams("wendy")
    self.assertEqual(r, ['wendy'])

    _, r = self.anagrams2.get_anagrams("went")
    self.assertEqual(r, ['newt', 'went'])

    _, r = self.anagrams2.get_anagrams("wentworth")
    self.assertEqual(r, ['wentworth'])

    _, r = self.anagrams2.get_anagrams("wept")
    self.assertEqual(r, ['wept'])

    _, r = self.anagrams2.get_anagrams("were")
    self.assertEqual(r, ['were'])

    _, r = self.anagrams2.get_anagrams("werner")
    self.assertEqual(r, ['werner'])

    _, r = self.anagrams2.get_anagrams("werther")
    self.assertEqual(r, ['werther'])

    _, r = self.anagrams2.get_anagrams("wesley")
    self.assertEqual(r, ['wesley'])

    _, r = self.anagrams2.get_anagrams("wesleyan")
    self.assertEqual(r, ['wesleyan'])

    _, r = self.anagrams2.get_anagrams("wesson")
    self.assertEqual(r, ['wesson'])

    _, r = self.anagrams2.get_anagrams("west")
    self.assertEqual(r, ['stew', 'west', 'wets'])

    _, r = self.anagrams2.get_anagrams("westbound")
    self.assertEqual(r, ['westbound'])

    _, r = self.anagrams2.get_anagrams("westbrook")
    self.assertEqual(r, ['westbrook'])

    _, r = self.anagrams2.get_anagrams("westchester")
    self.assertEqual(r, ['westchester'])

    _, r = self.anagrams2.get_anagrams("western")
    self.assertEqual(r, ['western'])

    _, r = self.anagrams2.get_anagrams("westerner")
    self.assertEqual(r, ['westerner'])

    _, r = self.anagrams2.get_anagrams("westerners")
    self.assertEqual(r, ['westerners'])

    _, r = self.anagrams2.get_anagrams("westfield")
    self.assertEqual(r, ['westfield'])

    _, r = self.anagrams2.get_anagrams("westhampton")
    self.assertEqual(r, ['westhampton'])

    _, r = self.anagrams2.get_anagrams("westinghouse")
    self.assertEqual(r, ['westinghouse'])

    _, r = self.anagrams2.get_anagrams("westminster")
    self.assertEqual(r, ['westminster'])

    _, r = self.anagrams2.get_anagrams("westmore")
    self.assertEqual(r, ['westmore'])

    _, r = self.anagrams2.get_anagrams("weston")
    self.assertEqual(r, ['weston'])

    _, r = self.anagrams2.get_anagrams("westphalia")
    self.assertEqual(r, ['westphalia'])

    _, r = self.anagrams2.get_anagrams("westport")
    self.assertEqual(r, ['westport'])

    _, r = self.anagrams2.get_anagrams("westward")
    self.assertEqual(r, ['westward'])

    _, r = self.anagrams2.get_anagrams("westwards")
    self.assertEqual(r, ['westwards'])

    _, r = self.anagrams2.get_anagrams("westwood")
    self.assertEqual(r, ['westwood'])

    _, r = self.anagrams2.get_anagrams("wet")
    self.assertEqual(r, ['wet'])

    _, r = self.anagrams2.get_anagrams("wetly")
    self.assertEqual(r, ['wetly'])

    _, r = self.anagrams2.get_anagrams("wetness")
    self.assertEqual(r, ['wetness'])

    _, r = self.anagrams2.get_anagrams("wets")
    self.assertEqual(r, ['stew', 'west', 'wets'])

    _, r = self.anagrams2.get_anagrams("wetted")
    self.assertEqual(r, ['wetted'])

    _, r = self.anagrams2.get_anagrams("wetter")
    self.assertEqual(r, ['wetter'])

    _, r = self.anagrams2.get_anagrams("wettest")
    self.assertEqual(r, ['wettest'])

    _, r = self.anagrams2.get_anagrams("wetting")
    self.assertEqual(r, ['wetting'])

    _, r = self.anagrams2.get_anagrams("weyerhauser")
    self.assertEqual(r, ['weyerhauser'])

    _, r = self.anagrams2.get_anagrams("whack")
    self.assertEqual(r, ['whack'])

    _, r = self.anagrams2.get_anagrams("whacked")
    self.assertEqual(r, ['whacked'])

    _, r = self.anagrams2.get_anagrams("whacking")
    self.assertEqual(r, ['whacking'])

    _, r = self.anagrams2.get_anagrams("whacks")
    self.assertEqual(r, ['whacks'])

    _, r = self.anagrams2.get_anagrams("whale")
    self.assertEqual(r, ['whale'])

    _, r = self.anagrams2.get_anagrams("whalen")
    self.assertEqual(r, ['whalen', 'whelan'])

    _, r = self.anagrams2.get_anagrams("whaler")
    self.assertEqual(r, ['whaler'])

    _, r = self.anagrams2.get_anagrams("whales")
    self.assertEqual(r, ['whales'])

    _, r = self.anagrams2.get_anagrams("whaling")
    self.assertEqual(r, ['whaling'])

    _, r = self.anagrams2.get_anagrams("wharf")
    self.assertEqual(r, ['wharf'])

    _, r = self.anagrams2.get_anagrams("wharton")
    self.assertEqual(r, ['wharton'])

    _, r = self.anagrams2.get_anagrams("wharves")
    self.assertEqual(r, ['wharves'])

    _, r = self.anagrams2.get_anagrams("what")
    self.assertEqual(r, ['thaw', 'what'])

    _, r = self.anagrams2.get_anagrams("whatever")
    self.assertEqual(r, ['whatever'])

    _, r = self.anagrams2.get_anagrams("whatley")
    self.assertEqual(r, ['wealthy', 'whatley'])

    _, r = self.anagrams2.get_anagrams("whatsoever")
    self.assertEqual(r, ['whatsoever'])

    _, r = self.anagrams2.get_anagrams("wheat")
    self.assertEqual(r, ['wheat'])

    _, r = self.anagrams2.get_anagrams("wheaten")
    self.assertEqual(r, ['wheaten'])

    _, r = self.anagrams2.get_anagrams("wheatland")
    self.assertEqual(r, ['wheatland'])

    _, r = self.anagrams2.get_anagrams("wheaton")
    self.assertEqual(r, ['wheaton'])

    _, r = self.anagrams2.get_anagrams("wheatstone")
    self.assertEqual(r, ['wheatstone'])

    _, r = self.anagrams2.get_anagrams("wheel")
    self.assertEqual(r, ['wheel'])

    _, r = self.anagrams2.get_anagrams("wheeled")
    self.assertEqual(r, ['wheeled'])

    _, r = self.anagrams2.get_anagrams("wheeler")
    self.assertEqual(r, ['wheeler'])

    _, r = self.anagrams2.get_anagrams("wheelers")
    self.assertEqual(r, ['wheelers'])

    _, r = self.anagrams2.get_anagrams("wheeling")
    self.assertEqual(r, ['wheeling'])

    _, r = self.anagrams2.get_anagrams("wheelings")
    self.assertEqual(r, ['wheelings'])

    _, r = self.anagrams2.get_anagrams("wheelock")
    self.assertEqual(r, ['wheelock'])

    _, r = self.anagrams2.get_anagrams("wheels")
    self.assertEqual(r, ['wheels'])

    _, r = self.anagrams2.get_anagrams("whelan")
    self.assertEqual(r, ['whalen', 'whelan'])

    _, r = self.anagrams2.get_anagrams("wheller")
    self.assertEqual(r, ['wheller'])

    _, r = self.anagrams2.get_anagrams("whelp")
    self.assertEqual(r, ['whelp'])

    _, r = self.anagrams2.get_anagrams("when")
    self.assertEqual(r, ['when'])

    _, r = self.anagrams2.get_anagrams("whence")
    self.assertEqual(r, ['whence'])

    _, r = self.anagrams2.get_anagrams("whenever")
    self.assertEqual(r, ['whenever'])

    _, r = self.anagrams2.get_anagrams("where")
    self.assertEqual(r, ['hewer', 'where'])

    _, r = self.anagrams2.get_anagrams("whereabouts")
    self.assertEqual(r, ['whereabouts'])

    _, r = self.anagrams2.get_anagrams("whereas")
    self.assertEqual(r, ['whereas'])

    _, r = self.anagrams2.get_anagrams("whereby")
    self.assertEqual(r, ['whereby'])

    _, r = self.anagrams2.get_anagrams("wherein")
    self.assertEqual(r, ['wherein'])

    _, r = self.anagrams2.get_anagrams("whereupon")
    self.assertEqual(r, ['whereupon'])

    _, r = self.anagrams2.get_anagrams("wherever")
    self.assertEqual(r, ['wherever'])

    _, r = self.anagrams2.get_anagrams("whether")
    self.assertEqual(r, ['whether'])

    _, r = self.anagrams2.get_anagrams("which")
    self.assertEqual(r, ['which'])

    _, r = self.anagrams2.get_anagrams("whichever")
    self.assertEqual(r, ['whichever'])

    _, r = self.anagrams2.get_anagrams("while")
    self.assertEqual(r, ['while'])

    _, r = self.anagrams2.get_anagrams("whim")
    self.assertEqual(r, ['whim'])

    _, r = self.anagrams2.get_anagrams("whimper")
    self.assertEqual(r, ['whimper'])

    _, r = self.anagrams2.get_anagrams("whimpered")
    self.assertEqual(r, ['whimpered'])

    _, r = self.anagrams2.get_anagrams("whimpering")
    self.assertEqual(r, ['whimpering'])

    _, r = self.anagrams2.get_anagrams("whimpers")
    self.assertEqual(r, ['whimpers'])

    _, r = self.anagrams2.get_anagrams("whims")
    self.assertEqual(r, ['whims'])

    _, r = self.anagrams2.get_anagrams("whimsical")
    self.assertEqual(r, ['whimsical'])

    _, r = self.anagrams2.get_anagrams("whimsically")
    self.assertEqual(r, ['whimsically'])

    _, r = self.anagrams2.get_anagrams("whimsies")
    self.assertEqual(r, ['whimsies'])

    _, r = self.anagrams2.get_anagrams("whimsy")
    self.assertEqual(r, ['whimsy'])

    _, r = self.anagrams2.get_anagrams("whine")
    self.assertEqual(r, ['whine'])

    _, r = self.anagrams2.get_anagrams("whined")
    self.assertEqual(r, ['whined'])

    _, r = self.anagrams2.get_anagrams("whines")
    self.assertEqual(r, ['whines'])

    _, r = self.anagrams2.get_anagrams("whining")
    self.assertEqual(r, ['whining'])

    _, r = self.anagrams2.get_anagrams("whip")
    self.assertEqual(r, ['whip'])

    _, r = self.anagrams2.get_anagrams("whippany")
    self.assertEqual(r, ['whippany'])

    _, r = self.anagrams2.get_anagrams("whipped")
    self.assertEqual(r, ['whipped'])

    _, r = self.anagrams2.get_anagrams("whipper")
    self.assertEqual(r, ['whipper'])

    _, r = self.anagrams2.get_anagrams("whippers")
    self.assertEqual(r, ['whippers'])

    _, r = self.anagrams2.get_anagrams("whipping")
    self.assertEqual(r, ['whipping'])

    _, r = self.anagrams2.get_anagrams("whippings")
    self.assertEqual(r, ['whippings'])

    _, r = self.anagrams2.get_anagrams("whipple")
    self.assertEqual(r, ['whipple'])

    _, r = self.anagrams2.get_anagrams("whips")
    self.assertEqual(r, ['whips'])

    _, r = self.anagrams2.get_anagrams("whirl")
    self.assertEqual(r, ['whirl'])

    _, r = self.anagrams2.get_anagrams("whirled")
    self.assertEqual(r, ['whirled'])

    _, r = self.anagrams2.get_anagrams("whirling")
    self.assertEqual(r, ['whirling'])

    _, r = self.anagrams2.get_anagrams("whirlpool")
    self.assertEqual(r, ['whirlpool'])

    _, r = self.anagrams2.get_anagrams("whirlpools")
    self.assertEqual(r, ['whirlpools'])

    _, r = self.anagrams2.get_anagrams("whirls")
    self.assertEqual(r, ['whirls'])

    _, r = self.anagrams2.get_anagrams("whirlwind")
    self.assertEqual(r, ['whirlwind'])

    _, r = self.anagrams2.get_anagrams("whirr")
    self.assertEqual(r, ['whirr'])

    _, r = self.anagrams2.get_anagrams("whirring")
    self.assertEqual(r, ['whirring'])

    _, r = self.anagrams2.get_anagrams("whisk")
    self.assertEqual(r, ['whisk'])

    _, r = self.anagrams2.get_anagrams("whisked")
    self.assertEqual(r, ['whisked'])

    _, r = self.anagrams2.get_anagrams("whisker")
    self.assertEqual(r, ['whisker'])

    _, r = self.anagrams2.get_anagrams("whiskers")
    self.assertEqual(r, ['whiskers'])

    _, r = self.anagrams2.get_anagrams("whiskey")
    self.assertEqual(r, ['whiskey'])

    _, r = self.anagrams2.get_anagrams("whisking")
    self.assertEqual(r, ['whisking'])

    _, r = self.anagrams2.get_anagrams("whisks")
    self.assertEqual(r, ['whisks'])

    _, r = self.anagrams2.get_anagrams("whisper")
    self.assertEqual(r, ['whisper'])

    _, r = self.anagrams2.get_anagrams("whispered")
    self.assertEqual(r, ['whispered'])

    _, r = self.anagrams2.get_anagrams("whispering")
    self.assertEqual(r, ['whispering'])

    _, r = self.anagrams2.get_anagrams("whisperings")
    self.assertEqual(r, ['whisperings'])

    _, r = self.anagrams2.get_anagrams("whispers")
    self.assertEqual(r, ['whispers'])

    _, r = self.anagrams2.get_anagrams("whistle")
    self.assertEqual(r, ['whistle'])

    _, r = self.anagrams2.get_anagrams("whistled")
    self.assertEqual(r, ['whistled'])

    _, r = self.anagrams2.get_anagrams("whistler")
    self.assertEqual(r, ['whistler'])

    _, r = self.anagrams2.get_anagrams("whistlers")
    self.assertEqual(r, ['whistlers'])

    _, r = self.anagrams2.get_anagrams("whistles")
    self.assertEqual(r, ['whistles'])

    _, r = self.anagrams2.get_anagrams("whistling")
    self.assertEqual(r, ['whistling'])

    _, r = self.anagrams2.get_anagrams("whit")
    self.assertEqual(r, ['whit', 'with'])

    _, r = self.anagrams2.get_anagrams("whitaker")
    self.assertEqual(r, ['whitaker'])

    _, r = self.anagrams2.get_anagrams("whitcomb")
    self.assertEqual(r, ['whitcomb'])

    _, r = self.anagrams2.get_anagrams("white")
    self.assertEqual(r, ['white'])

    _, r = self.anagrams2.get_anagrams("whitehall")
    self.assertEqual(r, ['whitehall'])

    _, r = self.anagrams2.get_anagrams("whitehorse")
    self.assertEqual(r, ['whitehorse'])

    _, r = self.anagrams2.get_anagrams("whiteleaf")
    self.assertEqual(r, ['whiteleaf'])

    _, r = self.anagrams2.get_anagrams("whiteley")
    self.assertEqual(r, ['whiteley'])

    _, r = self.anagrams2.get_anagrams("whitely")
    self.assertEqual(r, ['whitely'])

    _, r = self.anagrams2.get_anagrams("whiten")
    self.assertEqual(r, ['whiten'])

    _, r = self.anagrams2.get_anagrams("whitened")
    self.assertEqual(r, ['whitened'])

    _, r = self.anagrams2.get_anagrams("whitener")
    self.assertEqual(r, ['whitener'])

    _, r = self.anagrams2.get_anagrams("whiteners")
    self.assertEqual(r, ['whiteners'])

    _, r = self.anagrams2.get_anagrams("whiteness")
    self.assertEqual(r, ['whiteness'])

    _, r = self.anagrams2.get_anagrams("whitening")
    self.assertEqual(r, ['whitening'])

    _, r = self.anagrams2.get_anagrams("whitens")
    self.assertEqual(r, ['whitens'])

    _, r = self.anagrams2.get_anagrams("whiter")
    self.assertEqual(r, ['whiter', 'wither', 'writhe'])

    _, r = self.anagrams2.get_anagrams("whites")
    self.assertEqual(r, ['whites'])

    _, r = self.anagrams2.get_anagrams("whitespace")
    self.assertEqual(r, ['whitespace'])

    _, r = self.anagrams2.get_anagrams("whitest")
    self.assertEqual(r, ['whitest'])

    _, r = self.anagrams2.get_anagrams("whitewash")
    self.assertEqual(r, ['whitewash'])

    _, r = self.anagrams2.get_anagrams("whitewashed")
    self.assertEqual(r, ['whitewashed'])

    _, r = self.anagrams2.get_anagrams("whitewater")
    self.assertEqual(r, ['whitewater'])

    _, r = self.anagrams2.get_anagrams("whitfield")
    self.assertEqual(r, ['whitfield'])

    _, r = self.anagrams2.get_anagrams("whiting")
    self.assertEqual(r, ['whiting'])

    _, r = self.anagrams2.get_anagrams("whitlock")
    self.assertEqual(r, ['whitlock'])

    _, r = self.anagrams2.get_anagrams("whitman")
    self.assertEqual(r, ['whitman'])

    _, r = self.anagrams2.get_anagrams("whitmanize")
    self.assertEqual(r, ['whitmanize'])

    _, r = self.anagrams2.get_anagrams("whitmanizes")
    self.assertEqual(r, ['whitmanizes'])

    _, r = self.anagrams2.get_anagrams("whitney")
    self.assertEqual(r, ['whitney'])

    _, r = self.anagrams2.get_anagrams("whittaker")
    self.assertEqual(r, ['whittaker'])

    _, r = self.anagrams2.get_anagrams("whittier")
    self.assertEqual(r, ['whittier'])

    _, r = self.anagrams2.get_anagrams("whittle")
    self.assertEqual(r, ['whittle'])

    _, r = self.anagrams2.get_anagrams("whittled")
    self.assertEqual(r, ['whittled'])

    _, r = self.anagrams2.get_anagrams("whittles")
    self.assertEqual(r, ['whittles'])

    _, r = self.anagrams2.get_anagrams("whittling")
    self.assertEqual(r, ['whittling'])

    _, r = self.anagrams2.get_anagrams("whiz")
    self.assertEqual(r, ['whiz'])

    _, r = self.anagrams2.get_anagrams("whizzed")
    self.assertEqual(r, ['whizzed'])

    _, r = self.anagrams2.get_anagrams("whizzes")
    self.assertEqual(r, ['whizzes'])

    _, r = self.anagrams2.get_anagrams("whizzing")
    self.assertEqual(r, ['whizzing'])

    _, r = self.anagrams2.get_anagrams("who")
    self.assertEqual(r, ['how', 'who'])

    _, r = self.anagrams2.get_anagrams("whoever")
    self.assertEqual(r, ['however', 'whoever'])

    _, r = self.anagrams2.get_anagrams("whole")
    self.assertEqual(r, ['whole'])

    _, r = self.anagrams2.get_anagrams("wholehearted")
    self.assertEqual(r, ['wholehearted'])

    _, r = self.anagrams2.get_anagrams("wholeheartedly")
    self.assertEqual(r, ['wholeheartedly'])

    _, r = self.anagrams2.get_anagrams("wholeness")
    self.assertEqual(r, ['wholeness'])

    _, r = self.anagrams2.get_anagrams("wholes")
    self.assertEqual(r, ['wholes'])

    _, r = self.anagrams2.get_anagrams("wholesale")
    self.assertEqual(r, ['wholesale'])

    _, r = self.anagrams2.get_anagrams("wholesaler")
    self.assertEqual(r, ['wholesaler'])

    _, r = self.anagrams2.get_anagrams("wholesalers")
    self.assertEqual(r, ['wholesalers'])

    _, r = self.anagrams2.get_anagrams("wholesome")
    self.assertEqual(r, ['wholesome'])

    _, r = self.anagrams2.get_anagrams("wholesomeness")
    self.assertEqual(r, ['wholesomeness'])

    _, r = self.anagrams2.get_anagrams("wholly")
    self.assertEqual(r, ['wholly'])

    _, r = self.anagrams2.get_anagrams("whom")
    self.assertEqual(r, ['whom'])

    _, r = self.anagrams2.get_anagrams("whomever")
    self.assertEqual(r, ['whomever'])

    _, r = self.anagrams2.get_anagrams("whoop")
    self.assertEqual(r, ['whoop'])

    _, r = self.anagrams2.get_anagrams("whooped")
    self.assertEqual(r, ['whooped'])

    _, r = self.anagrams2.get_anagrams("whooping")
    self.assertEqual(r, ['whooping'])

    _, r = self.anagrams2.get_anagrams("whoops")
    self.assertEqual(r, ['whoops'])

    _, r = self.anagrams2.get_anagrams("whore")
    self.assertEqual(r, ['whore'])

    _, r = self.anagrams2.get_anagrams("whores")
    self.assertEqual(r, ['shower', 'whores'])

    _, r = self.anagrams2.get_anagrams("whorl")
    self.assertEqual(r, ['whorl'])

    _, r = self.anagrams2.get_anagrams("whorls")
    self.assertEqual(r, ['whorls'])

    _, r = self.anagrams2.get_anagrams("whose")
    self.assertEqual(r, ['whose'])

    _, r = self.anagrams2.get_anagrams("why")
    self.assertEqual(r, ['why'])

    _, r = self.anagrams2.get_anagrams("wichita")
    self.assertEqual(r, ['wichita'])

    _, r = self.anagrams2.get_anagrams("wick")
    self.assertEqual(r, ['wick'])

    _, r = self.anagrams2.get_anagrams("wicked")
    self.assertEqual(r, ['wicked'])

    _, r = self.anagrams2.get_anagrams("wickedly")
    self.assertEqual(r, ['wickedly'])

    _, r = self.anagrams2.get_anagrams("wickedness")
    self.assertEqual(r, ['wickedness'])

    _, r = self.anagrams2.get_anagrams("wicker")
    self.assertEqual(r, ['wicker'])

    _, r = self.anagrams2.get_anagrams("wicks")
    self.assertEqual(r, ['wicks'])

    _, r = self.anagrams2.get_anagrams("wide")
    self.assertEqual(r, ['wide'])

    _, r = self.anagrams2.get_anagrams("wideband")
    self.assertEqual(r, ['wideband'])

    _, r = self.anagrams2.get_anagrams("widely")
    self.assertEqual(r, ['widely'])

    _, r = self.anagrams2.get_anagrams("widen")
    self.assertEqual(r, ['edwin', 'widen', 'wined'])

    _, r = self.anagrams2.get_anagrams("widened")
    self.assertEqual(r, ['widened'])

    _, r = self.anagrams2.get_anagrams("widener")
    self.assertEqual(r, ['widener'])

    _, r = self.anagrams2.get_anagrams("widening")
    self.assertEqual(r, ['widening'])

    _, r = self.anagrams2.get_anagrams("widens")
    self.assertEqual(r, ['widens'])

    _, r = self.anagrams2.get_anagrams("wider")
    self.assertEqual(r, ['weird', 'wider', 'wired'])

    _, r = self.anagrams2.get_anagrams("widespread")
    self.assertEqual(r, ['widespread'])

    _, r = self.anagrams2.get_anagrams("widest")
    self.assertEqual(r, ['widest'])

    _, r = self.anagrams2.get_anagrams("widget")
    self.assertEqual(r, ['widget'])

    _, r = self.anagrams2.get_anagrams("widow")
    self.assertEqual(r, ['widow'])

    _, r = self.anagrams2.get_anagrams("widowed")
    self.assertEqual(r, ['widowed'])

    _, r = self.anagrams2.get_anagrams("widower")
    self.assertEqual(r, ['widower'])

    _, r = self.anagrams2.get_anagrams("widowers")
    self.assertEqual(r, ['widowers'])

    _, r = self.anagrams2.get_anagrams("widows")
    self.assertEqual(r, ['widows'])

    _, r = self.anagrams2.get_anagrams("width")
    self.assertEqual(r, ['width'])

    _, r = self.anagrams2.get_anagrams("widths")
    self.assertEqual(r, ['widths'])

    _, r = self.anagrams2.get_anagrams("wieland")
    self.assertEqual(r, ['wieland'])

    _, r = self.anagrams2.get_anagrams("wield")
    self.assertEqual(r, ['wield'])

    _, r = self.anagrams2.get_anagrams("wielded")
    self.assertEqual(r, ['wielded'])

    _, r = self.anagrams2.get_anagrams("wielder")
    self.assertEqual(r, ['wielder'])

    _, r = self.anagrams2.get_anagrams("wielding")
    self.assertEqual(r, ['wielding'])

    _, r = self.anagrams2.get_anagrams("wields")
    self.assertEqual(r, ['wields'])

    _, r = self.anagrams2.get_anagrams("wier")
    self.assertEqual(r, ['wier', 'wire'])

    _, r = self.anagrams2.get_anagrams("wife")
    self.assertEqual(r, ['wife'])

    _, r = self.anagrams2.get_anagrams("wifely")
    self.assertEqual(r, ['wifely'])

    _, r = self.anagrams2.get_anagrams("wig")
    self.assertEqual(r, ['wig'])

    _, r = self.anagrams2.get_anagrams("wiggins")
    self.assertEqual(r, ['wiggins'])

    _, r = self.anagrams2.get_anagrams("wightman")
    self.assertEqual(r, ['wightman'])

    _, r = self.anagrams2.get_anagrams("wigs")
    self.assertEqual(r, ['wigs'])

    _, r = self.anagrams2.get_anagrams("wigwam")
    self.assertEqual(r, ['wigwam'])

    _, r = self.anagrams2.get_anagrams("wilbur")
    self.assertEqual(r, ['wilbur'])

    _, r = self.anagrams2.get_anagrams("wilcox")
    self.assertEqual(r, ['wilcox'])

    _, r = self.anagrams2.get_anagrams("wild")
    self.assertEqual(r, ['wild'])

    _, r = self.anagrams2.get_anagrams("wildcat")
    self.assertEqual(r, ['wildcat'])

    _, r = self.anagrams2.get_anagrams("wildcats")
    self.assertEqual(r, ['wildcats'])

    _, r = self.anagrams2.get_anagrams("wilder")
    self.assertEqual(r, ['wilder'])

    _, r = self.anagrams2.get_anagrams("wilderness")
    self.assertEqual(r, ['wilderness'])

    _, r = self.anagrams2.get_anagrams("wildest")
    self.assertEqual(r, ['wildest'])

    _, r = self.anagrams2.get_anagrams("wildly")
    self.assertEqual(r, ['wildly'])

    _, r = self.anagrams2.get_anagrams("wildness")
    self.assertEqual(r, ['wildness'])

    _, r = self.anagrams2.get_anagrams("wile")
    self.assertEqual(r, ['wile'])

    _, r = self.anagrams2.get_anagrams("wiles")
    self.assertEqual(r, ['wiles'])

    _, r = self.anagrams2.get_anagrams("wiley")
    self.assertEqual(r, ['wiley', 'wylie'])

    _, r = self.anagrams2.get_anagrams("wilfred")
    self.assertEqual(r, ['wilfred'])

    _, r = self.anagrams2.get_anagrams("wilhelm")
    self.assertEqual(r, ['wilhelm'])

    _, r = self.anagrams2.get_anagrams("wilhelmina")
    self.assertEqual(r, ['wilhelmina'])

    _, r = self.anagrams2.get_anagrams("wiliness")
    self.assertEqual(r, ['wiliness'])

    _, r = self.anagrams2.get_anagrams("wilkes")
    self.assertEqual(r, ['wilkes'])

    _, r = self.anagrams2.get_anagrams("wilkie")
    self.assertEqual(r, ['wilkie'])

    _, r = self.anagrams2.get_anagrams("wilkins")
    self.assertEqual(r, ['wilkins'])

    _, r = self.anagrams2.get_anagrams("wilkinson")
    self.assertEqual(r, ['wilkinson'])

    _, r = self.anagrams2.get_anagrams("will")
    self.assertEqual(r, ['will'])

    _, r = self.anagrams2.get_anagrams("willa")
    self.assertEqual(r, ['willa'])

    _, r = self.anagrams2.get_anagrams("willamette")
    self.assertEqual(r, ['willamette'])

    _, r = self.anagrams2.get_anagrams("willard")
    self.assertEqual(r, ['willard'])

    _, r = self.anagrams2.get_anagrams("willcox")
    self.assertEqual(r, ['willcox'])

    _, r = self.anagrams2.get_anagrams("willed")
    self.assertEqual(r, ['willed'])

    _, r = self.anagrams2.get_anagrams("willem")
    self.assertEqual(r, ['willem'])

    _, r = self.anagrams2.get_anagrams("willful")
    self.assertEqual(r, ['willful'])

    _, r = self.anagrams2.get_anagrams("willfully")
    self.assertEqual(r, ['willfully'])

    _, r = self.anagrams2.get_anagrams("william")
    self.assertEqual(r, ['william'])

    _, r = self.anagrams2.get_anagrams("williams")
    self.assertEqual(r, ['williams'])

    _, r = self.anagrams2.get_anagrams("williamsburg")
    self.assertEqual(r, ['williamsburg'])

    _, r = self.anagrams2.get_anagrams("williamson")
    self.assertEqual(r, ['williamson'])

    _, r = self.anagrams2.get_anagrams("willie")
    self.assertEqual(r, ['willie'])

    _, r = self.anagrams2.get_anagrams("willied")
    self.assertEqual(r, ['willied'])

    _, r = self.anagrams2.get_anagrams("willies")
    self.assertEqual(r, ['willies'])

    _, r = self.anagrams2.get_anagrams("willing")
    self.assertEqual(r, ['willing'])

    _, r = self.anagrams2.get_anagrams("willingly")
    self.assertEqual(r, ['willingly'])

    _, r = self.anagrams2.get_anagrams("willingness")
    self.assertEqual(r, ['willingness'])

    _, r = self.anagrams2.get_anagrams("willis")
    self.assertEqual(r, ['willis'])

    _, r = self.anagrams2.get_anagrams("willisson")
    self.assertEqual(r, ['willisson'])

    _, r = self.anagrams2.get_anagrams("willoughby")
    self.assertEqual(r, ['willoughby'])

    _, r = self.anagrams2.get_anagrams("willow")
    self.assertEqual(r, ['willow'])

    _, r = self.anagrams2.get_anagrams("willows")
    self.assertEqual(r, ['willows'])

    _, r = self.anagrams2.get_anagrams("wills")
    self.assertEqual(r, ['wills'])

    _, r = self.anagrams2.get_anagrams("willy")
    self.assertEqual(r, ['willy'])

    _, r = self.anagrams2.get_anagrams("wilma")
    self.assertEqual(r, ['wilma'])

    _, r = self.anagrams2.get_anagrams("wilmette")
    self.assertEqual(r, ['wilmette'])

    _, r = self.anagrams2.get_anagrams("wilmington")
    self.assertEqual(r, ['wilmington'])

    _, r = self.anagrams2.get_anagrams("wilshire")
    self.assertEqual(r, ['wilshire'])

    _, r = self.anagrams2.get_anagrams("wilson")
    self.assertEqual(r, ['wilson'])

    _, r = self.anagrams2.get_anagrams("wilsonian")
    self.assertEqual(r, ['wilsonian'])

    _, r = self.anagrams2.get_anagrams("wilt")
    self.assertEqual(r, ['wilt'])

    _, r = self.anagrams2.get_anagrams("wilted")
    self.assertEqual(r, ['wilted'])

    _, r = self.anagrams2.get_anagrams("wilting")
    self.assertEqual(r, ['wilting'])

    _, r = self.anagrams2.get_anagrams("wilts")
    self.assertEqual(r, ['wilts'])

    _, r = self.anagrams2.get_anagrams("wiltshire")
    self.assertEqual(r, ['wiltshire'])

    _, r = self.anagrams2.get_anagrams("wily")
    self.assertEqual(r, ['wily'])

    _, r = self.anagrams2.get_anagrams("win")
    self.assertEqual(r, ['win'])

    _, r = self.anagrams2.get_anagrams("wince")
    self.assertEqual(r, ['wince'])

    _, r = self.anagrams2.get_anagrams("winced")
    self.assertEqual(r, ['winced'])

    _, r = self.anagrams2.get_anagrams("winces")
    self.assertEqual(r, ['winces'])

    _, r = self.anagrams2.get_anagrams("winchell")
    self.assertEqual(r, ['winchell'])

    _, r = self.anagrams2.get_anagrams("winchester")
    self.assertEqual(r, ['winchester'])

    _, r = self.anagrams2.get_anagrams("wincing")
    self.assertEqual(r, ['wincing'])

    _, r = self.anagrams2.get_anagrams("wind")
    self.assertEqual(r, ['wind'])

    _, r = self.anagrams2.get_anagrams("winded")
    self.assertEqual(r, ['winded'])

    _, r = self.anagrams2.get_anagrams("winder")
    self.assertEqual(r, ['rewind', 'winder'])

    _, r = self.anagrams2.get_anagrams("winders")
    self.assertEqual(r, ['rewinds', 'winders'])

    _, r = self.anagrams2.get_anagrams("winding")
    self.assertEqual(r, ['winding'])

    _, r = self.anagrams2.get_anagrams("windmill")
    self.assertEqual(r, ['windmill'])

    _, r = self.anagrams2.get_anagrams("windmills")
    self.assertEqual(r, ['windmills'])

    _, r = self.anagrams2.get_anagrams("window")
    self.assertEqual(r, ['window'])

    _, r = self.anagrams2.get_anagrams("windows")
    self.assertEqual(r, ['windows'])

    _, r = self.anagrams2.get_anagrams("winds")
    self.assertEqual(r, ['winds'])

    _, r = self.anagrams2.get_anagrams("windsor")
    self.assertEqual(r, ['windsor'])

    _, r = self.anagrams2.get_anagrams("windy")
    self.assertEqual(r, ['windy'])

    _, r = self.anagrams2.get_anagrams("wine")
    self.assertEqual(r, ['wine'])

    _, r = self.anagrams2.get_anagrams("wined")
    self.assertEqual(r, ['edwin', 'widen', 'wined'])

    _, r = self.anagrams2.get_anagrams("winehead")
    self.assertEqual(r, ['winehead'])

    _, r = self.anagrams2.get_anagrams("winer")
    self.assertEqual(r, ['erwin', 'winer'])

    _, r = self.anagrams2.get_anagrams("winers")
    self.assertEqual(r, ['winers'])

    _, r = self.anagrams2.get_anagrams("wines")
    self.assertEqual(r, ['sinew', 'swine', 'wines'])

    _, r = self.anagrams2.get_anagrams("winfield")
    self.assertEqual(r, ['winfield'])

    _, r = self.anagrams2.get_anagrams("wing")
    self.assertEqual(r, ['wing'])

    _, r = self.anagrams2.get_anagrams("winged")
    self.assertEqual(r, ['winged'])

    _, r = self.anagrams2.get_anagrams("winging")
    self.assertEqual(r, ['winging'])

    _, r = self.anagrams2.get_anagrams("wings")
    self.assertEqual(r, ['swing', 'wings'])

    _, r = self.anagrams2.get_anagrams("winifred")
    self.assertEqual(r, ['winifred'])

    _, r = self.anagrams2.get_anagrams("wining")
    self.assertEqual(r, ['wining'])

    _, r = self.anagrams2.get_anagrams("wink")
    self.assertEqual(r, ['wink'])

    _, r = self.anagrams2.get_anagrams("winked")
    self.assertEqual(r, ['winked'])

    _, r = self.anagrams2.get_anagrams("winker")
    self.assertEqual(r, ['winker'])

    _, r = self.anagrams2.get_anagrams("winking")
    self.assertEqual(r, ['winking'])

    _, r = self.anagrams2.get_anagrams("winks")
    self.assertEqual(r, ['swink', 'winks'])

    _, r = self.anagrams2.get_anagrams("winnebago")
    self.assertEqual(r, ['winnebago'])

    _, r = self.anagrams2.get_anagrams("winner")
    self.assertEqual(r, ['winner'])

    _, r = self.anagrams2.get_anagrams("winners")
    self.assertEqual(r, ['winners'])

    _, r = self.anagrams2.get_anagrams("winnetka")
    self.assertEqual(r, ['winnetka'])

    _, r = self.anagrams2.get_anagrams("winnie")
    self.assertEqual(r, ['winnie'])

    _, r = self.anagrams2.get_anagrams("winning")
    self.assertEqual(r, ['winning'])

    _, r = self.anagrams2.get_anagrams("winningly")
    self.assertEqual(r, ['winningly'])

    _, r = self.anagrams2.get_anagrams("winnings")
    self.assertEqual(r, ['winnings'])

    _, r = self.anagrams2.get_anagrams("winnipeg")
    self.assertEqual(r, ['winnipeg'])

    _, r = self.anagrams2.get_anagrams("winnipesaukee")
    self.assertEqual(r, ['winnipesaukee'])

    _, r = self.anagrams2.get_anagrams("winograd")
    self.assertEqual(r, ['winograd'])

    _, r = self.anagrams2.get_anagrams("winooski")
    self.assertEqual(r, ['winooski'])

    _, r = self.anagrams2.get_anagrams("wins")
    self.assertEqual(r, ['wins'])

    _, r = self.anagrams2.get_anagrams("winsborough")
    self.assertEqual(r, ['winsborough'])

    _, r = self.anagrams2.get_anagrams("winsett")
    self.assertEqual(r, ['winsett'])

    _, r = self.anagrams2.get_anagrams("winslow")
    self.assertEqual(r, ['winslow'])

    _, r = self.anagrams2.get_anagrams("winston")
    self.assertEqual(r, ['winston'])

    _, r = self.anagrams2.get_anagrams("winter")
    self.assertEqual(r, ['twiner', 'winter'])

    _, r = self.anagrams2.get_anagrams("wintered")
    self.assertEqual(r, ['wintered'])

    _, r = self.anagrams2.get_anagrams("wintering")
    self.assertEqual(r, ['wintering'])

    _, r = self.anagrams2.get_anagrams("winters")
    self.assertEqual(r, ['winters'])

    _, r = self.anagrams2.get_anagrams("winthrop")
    self.assertEqual(r, ['winthrop'])

    _, r = self.anagrams2.get_anagrams("wintry")
    self.assertEqual(r, ['wintry'])

    _, r = self.anagrams2.get_anagrams("wipe")
    self.assertEqual(r, ['wipe'])

    _, r = self.anagrams2.get_anagrams("wiped")
    self.assertEqual(r, ['wiped'])

    _, r = self.anagrams2.get_anagrams("wiper")
    self.assertEqual(r, ['wiper'])

    _, r = self.anagrams2.get_anagrams("wipers")
    self.assertEqual(r, ['wipers'])

    _, r = self.anagrams2.get_anagrams("wipes")
    self.assertEqual(r, ['swipe', 'wipes'])

    _, r = self.anagrams2.get_anagrams("wiping")
    self.assertEqual(r, ['wiping'])

    _, r = self.anagrams2.get_anagrams("wire")
    self.assertEqual(r, ['wier', 'wire'])

    _, r = self.anagrams2.get_anagrams("wired")
    self.assertEqual(r, ['weird', 'wider', 'wired'])

    _, r = self.anagrams2.get_anagrams("wireless")
    self.assertEqual(r, ['wireless'])

    _, r = self.anagrams2.get_anagrams("wires")
    self.assertEqual(r, ['wires', 'wiser'])

    _, r = self.anagrams2.get_anagrams("wiretap")
    self.assertEqual(r, ['wiretap'])

    _, r = self.anagrams2.get_anagrams("wiretappers")
    self.assertEqual(r, ['wiretappers'])

    _, r = self.anagrams2.get_anagrams("wiretapping")
    self.assertEqual(r, ['wiretapping'])

    _, r = self.anagrams2.get_anagrams("wiretaps")
    self.assertEqual(r, ['wiretaps'])

    _, r = self.anagrams2.get_anagrams("wiriness")
    self.assertEqual(r, ['wiriness'])

    _, r = self.anagrams2.get_anagrams("wiring")
    self.assertEqual(r, ['wiring'])

    _, r = self.anagrams2.get_anagrams("wiry")
    self.assertEqual(r, ['wiry'])

    _, r = self.anagrams2.get_anagrams("wisconsin")
    self.assertEqual(r, ['wisconsin'])

    _, r = self.anagrams2.get_anagrams("wisdom")
    self.assertEqual(r, ['wisdom'])

    _, r = self.anagrams2.get_anagrams("wisdoms")
    self.assertEqual(r, ['wisdoms'])

    _, r = self.anagrams2.get_anagrams("wise")
    self.assertEqual(r, ['wise'])

    _, r = self.anagrams2.get_anagrams("wised")
    self.assertEqual(r, ['wised'])

    _, r = self.anagrams2.get_anagrams("wisely")
    self.assertEqual(r, ['wisely'])

    _, r = self.anagrams2.get_anagrams("wisenheimer")
    self.assertEqual(r, ['wisenheimer'])

    _, r = self.anagrams2.get_anagrams("wiser")
    self.assertEqual(r, ['wires', 'wiser'])

    _, r = self.anagrams2.get_anagrams("wisest")
    self.assertEqual(r, ['wisest'])

    _, r = self.anagrams2.get_anagrams("wish")
    self.assertEqual(r, ['wish'])

    _, r = self.anagrams2.get_anagrams("wished")
    self.assertEqual(r, ['wished'])

    _, r = self.anagrams2.get_anagrams("wisher")
    self.assertEqual(r, ['wisher'])

    _, r = self.anagrams2.get_anagrams("wishers")
    self.assertEqual(r, ['wishers'])

    _, r = self.anagrams2.get_anagrams("wishes")
    self.assertEqual(r, ['wishes'])

    _, r = self.anagrams2.get_anagrams("wishful")
    self.assertEqual(r, ['wishful'])

    _, r = self.anagrams2.get_anagrams("wishing")
    self.assertEqual(r, ['wishing'])

    _, r = self.anagrams2.get_anagrams("wisp")
    self.assertEqual(r, ['wisp'])

    _, r = self.anagrams2.get_anagrams("wisps")
    self.assertEqual(r, ['wisps'])

    _, r = self.anagrams2.get_anagrams("wistful")
    self.assertEqual(r, ['wistful'])

    _, r = self.anagrams2.get_anagrams("wistfully")
    self.assertEqual(r, ['wistfully'])

    _, r = self.anagrams2.get_anagrams("wistfulness")
    self.assertEqual(r, ['wistfulness'])

    _, r = self.anagrams2.get_anagrams("wit")
    self.assertEqual(r, ['wit'])

    _, r = self.anagrams2.get_anagrams("witch")
    self.assertEqual(r, ['witch'])

    _, r = self.anagrams2.get_anagrams("witchcraft")
    self.assertEqual(r, ['witchcraft'])

    _, r = self.anagrams2.get_anagrams("witches")
    self.assertEqual(r, ['witches'])

    _, r = self.anagrams2.get_anagrams("witching")
    self.assertEqual(r, ['witching'])

    _, r = self.anagrams2.get_anagrams("with")
    self.assertEqual(r, ['whit', 'with'])

    _, r = self.anagrams2.get_anagrams("withal")
    self.assertEqual(r, ['withal'])

    _, r = self.anagrams2.get_anagrams("withdraw")
    self.assertEqual(r, ['withdraw'])

    _, r = self.anagrams2.get_anagrams("withdrawal")
    self.assertEqual(r, ['withdrawal'])

    _, r = self.anagrams2.get_anagrams("withdrawals")
    self.assertEqual(r, ['withdrawals'])

    _, r = self.anagrams2.get_anagrams("withdrawing")
    self.assertEqual(r, ['withdrawing'])

    _, r = self.anagrams2.get_anagrams("withdrawn")
    self.assertEqual(r, ['withdrawn'])

    _, r = self.anagrams2.get_anagrams("withdraws")
    self.assertEqual(r, ['withdraws'])

    _, r = self.anagrams2.get_anagrams("withdrew")
    self.assertEqual(r, ['withdrew'])

    _, r = self.anagrams2.get_anagrams("wither")
    self.assertEqual(r, ['whiter', 'wither', 'writhe'])

    _, r = self.anagrams2.get_anagrams("withers")
    self.assertEqual(r, ['withers', 'writhes'])

    _, r = self.anagrams2.get_anagrams("witherspoon")
    self.assertEqual(r, ['witherspoon'])

    _, r = self.anagrams2.get_anagrams("withheld")
    self.assertEqual(r, ['withheld'])

    _, r = self.anagrams2.get_anagrams("withhold")
    self.assertEqual(r, ['withhold'])

    _, r = self.anagrams2.get_anagrams("withholder")
    self.assertEqual(r, ['withholder'])

    _, r = self.anagrams2.get_anagrams("withholders")
    self.assertEqual(r, ['withholders'])

    _, r = self.anagrams2.get_anagrams("withholding")
    self.assertEqual(r, ['withholding'])

    _, r = self.anagrams2.get_anagrams("withholdings")
    self.assertEqual(r, ['withholdings'])

    _, r = self.anagrams2.get_anagrams("withholds")
    self.assertEqual(r, ['withholds'])

    _, r = self.anagrams2.get_anagrams("within")
    self.assertEqual(r, ['within'])

    _, r = self.anagrams2.get_anagrams("without")
    self.assertEqual(r, ['without'])

    _, r = self.anagrams2.get_anagrams("withstand")
    self.assertEqual(r, ['withstand'])

    _, r = self.anagrams2.get_anagrams("withstanding")
    self.assertEqual(r, ['withstanding'])

    _, r = self.anagrams2.get_anagrams("withstands")
    self.assertEqual(r, ['withstands'])

    _, r = self.anagrams2.get_anagrams("withstood")
    self.assertEqual(r, ['withstood'])

    _, r = self.anagrams2.get_anagrams("witness")
    self.assertEqual(r, ['witness'])

    _, r = self.anagrams2.get_anagrams("witnessed")
    self.assertEqual(r, ['witnessed'])

    _, r = self.anagrams2.get_anagrams("witnesses")
    self.assertEqual(r, ['witnesses'])

    _, r = self.anagrams2.get_anagrams("witnessing")
    self.assertEqual(r, ['witnessing'])

    _, r = self.anagrams2.get_anagrams("wits")
    self.assertEqual(r, ['wits'])

    _, r = self.anagrams2.get_anagrams("witt")
    self.assertEqual(r, ['witt'])

    _, r = self.anagrams2.get_anagrams("wittgenstein")
    self.assertEqual(r, ['wittgenstein'])

    _, r = self.anagrams2.get_anagrams("witty")
    self.assertEqual(r, ['witty'])

    _, r = self.anagrams2.get_anagrams("wives")
    self.assertEqual(r, ['views', 'wives'])

    _, r = self.anagrams2.get_anagrams("wizard")
    self.assertEqual(r, ['wizard'])

    _, r = self.anagrams2.get_anagrams("wizards")
    self.assertEqual(r, ['wizards'])

    _, r = self.anagrams2.get_anagrams("woe")
    self.assertEqual(r, ['owe', 'woe'])

    _, r = self.anagrams2.get_anagrams("woeful")
    self.assertEqual(r, ['woeful'])

    _, r = self.anagrams2.get_anagrams("woefully")
    self.assertEqual(r, ['woefully'])

    _, r = self.anagrams2.get_anagrams("woke")
    self.assertEqual(r, ['woke'])

    _, r = self.anagrams2.get_anagrams("wolcott")
    self.assertEqual(r, ['wolcott'])

    _, r = self.anagrams2.get_anagrams("wolf")
    self.assertEqual(r, ['flow', 'fowl', 'wolf'])

    _, r = self.anagrams2.get_anagrams("wolfe")
    self.assertEqual(r, ['wolfe'])

    _, r = self.anagrams2.get_anagrams("wolff")
    self.assertEqual(r, ['wolff'])

    _, r = self.anagrams2.get_anagrams("wolfgang")
    self.assertEqual(r, ['wolfgang'])

    _, r = self.anagrams2.get_anagrams("wolverton")
    self.assertEqual(r, ['wolverton'])

    _, r = self.anagrams2.get_anagrams("wolves")
    self.assertEqual(r, ['vowels', 'wolves'])

    _, r = self.anagrams2.get_anagrams("woman")
    self.assertEqual(r, ['woman'])

    _, r = self.anagrams2.get_anagrams("womanhood")
    self.assertEqual(r, ['womanhood'])

    _, r = self.anagrams2.get_anagrams("womanly")
    self.assertEqual(r, ['womanly'])

    _, r = self.anagrams2.get_anagrams("womb")
    self.assertEqual(r, ['womb'])

    _, r = self.anagrams2.get_anagrams("wombs")
    self.assertEqual(r, ['wombs'])

    _, r = self.anagrams2.get_anagrams("women")
    self.assertEqual(r, ['women'])

    _, r = self.anagrams2.get_anagrams("won")
    self.assertEqual(r, ['now', 'own', 'won'])

    _, r = self.anagrams2.get_anagrams("wonder")
    self.assertEqual(r, ['wonder'])

    _, r = self.anagrams2.get_anagrams("wondered")
    self.assertEqual(r, ['wondered'])

    _, r = self.anagrams2.get_anagrams("wonderful")
    self.assertEqual(r, ['underflow', 'wonderful'])

    _, r = self.anagrams2.get_anagrams("wonderfully")
    self.assertEqual(r, ['wonderfully'])

    _, r = self.anagrams2.get_anagrams("wonderfulness")
    self.assertEqual(r, ['wonderfulness'])

    _, r = self.anagrams2.get_anagrams("wondering")
    self.assertEqual(r, ['wondering'])

    _, r = self.anagrams2.get_anagrams("wonderingly")
    self.assertEqual(r, ['wonderingly'])

    _, r = self.anagrams2.get_anagrams("wonderment")
    self.assertEqual(r, ['wonderment'])

    _, r = self.anagrams2.get_anagrams("wonders")
    self.assertEqual(r, ['downers', 'wonders'])

    _, r = self.anagrams2.get_anagrams("wondrous")
    self.assertEqual(r, ['wondrous'])

    _, r = self.anagrams2.get_anagrams("wondrously")
    self.assertEqual(r, ['wondrously'])

    _, r = self.anagrams2.get_anagrams("wong")
    self.assertEqual(r, ['gown', 'wong'])

    _, r = self.anagrams2.get_anagrams("wont")
    self.assertEqual(r, ['town', 'wont'])

    _, r = self.anagrams2.get_anagrams("wonted")
    self.assertEqual(r, ['wonted'])

    _, r = self.anagrams2.get_anagrams("woo")
    self.assertEqual(r, ['woo'])

    _, r = self.anagrams2.get_anagrams("wood")
    self.assertEqual(r, ['wood'])

    _, r = self.anagrams2.get_anagrams("woodard")
    self.assertEqual(r, ['woodard'])

    _, r = self.anagrams2.get_anagrams("woodberry")
    self.assertEqual(r, ['woodberry'])

    _, r = self.anagrams2.get_anagrams("woodbury")
    self.assertEqual(r, ['woodbury'])

    _, r = self.anagrams2.get_anagrams("woodchuck")
    self.assertEqual(r, ['woodchuck'])

    _, r = self.anagrams2.get_anagrams("woodchucks")
    self.assertEqual(r, ['woodchucks'])

    _, r = self.anagrams2.get_anagrams("woodcock")
    self.assertEqual(r, ['woodcock'])

    _, r = self.anagrams2.get_anagrams("woodcocks")
    self.assertEqual(r, ['woodcocks'])

    _, r = self.anagrams2.get_anagrams("wooded")
    self.assertEqual(r, ['wooded'])

    _, r = self.anagrams2.get_anagrams("wooden")
    self.assertEqual(r, ['wooden'])

    _, r = self.anagrams2.get_anagrams("woodenly")
    self.assertEqual(r, ['woodenly'])

    _, r = self.anagrams2.get_anagrams("woodenness")
    self.assertEqual(r, ['woodenness'])

    _, r = self.anagrams2.get_anagrams("woodland")
    self.assertEqual(r, ['download', 'woodland'])

    _, r = self.anagrams2.get_anagrams("woodlawn")
    self.assertEqual(r, ['woodlawn'])

    _, r = self.anagrams2.get_anagrams("woodman")
    self.assertEqual(r, ['woodman'])

    _, r = self.anagrams2.get_anagrams("woodpecker")
    self.assertEqual(r, ['woodpecker'])

    _, r = self.anagrams2.get_anagrams("woodpeckers")
    self.assertEqual(r, ['woodpeckers'])

    _, r = self.anagrams2.get_anagrams("woodrow")
    self.assertEqual(r, ['woodrow'])

    _, r = self.anagrams2.get_anagrams("woods")
    self.assertEqual(r, ['woods'])

    _, r = self.anagrams2.get_anagrams("woodstock")
    self.assertEqual(r, ['woodstock'])

    _, r = self.anagrams2.get_anagrams("woodward")
    self.assertEqual(r, ['woodward'])

    _, r = self.anagrams2.get_anagrams("woodwards")
    self.assertEqual(r, ['woodwards'])

    _, r = self.anagrams2.get_anagrams("woodwork")
    self.assertEqual(r, ['woodwork'])

    _, r = self.anagrams2.get_anagrams("woodworking")
    self.assertEqual(r, ['woodworking'])

    _, r = self.anagrams2.get_anagrams("woody")
    self.assertEqual(r, ['woody'])

    _, r = self.anagrams2.get_anagrams("wooed")
    self.assertEqual(r, ['wooed'])

    _, r = self.anagrams2.get_anagrams("wooer")
    self.assertEqual(r, ['wooer'])

    _, r = self.anagrams2.get_anagrams("woof")
    self.assertEqual(r, ['woof'])

    _, r = self.anagrams2.get_anagrams("woofed")
    self.assertEqual(r, ['woofed'])

    _, r = self.anagrams2.get_anagrams("woofer")
    self.assertEqual(r, ['woofer'])

    _, r = self.anagrams2.get_anagrams("woofers")
    self.assertEqual(r, ['woofers'])

    _, r = self.anagrams2.get_anagrams("woofing")
    self.assertEqual(r, ['woofing'])

    _, r = self.anagrams2.get_anagrams("woofs")
    self.assertEqual(r, ['woofs'])

    _, r = self.anagrams2.get_anagrams("wooing")
    self.assertEqual(r, ['wooing'])

    _, r = self.anagrams2.get_anagrams("wool")
    self.assertEqual(r, ['wool'])

    _, r = self.anagrams2.get_anagrams("woolen")
    self.assertEqual(r, ['woolen'])

    _, r = self.anagrams2.get_anagrams("woolly")
    self.assertEqual(r, ['woolly'])

    _, r = self.anagrams2.get_anagrams("wools")
    self.assertEqual(r, ['wools'])

    _, r = self.anagrams2.get_anagrams("woolworth")
    self.assertEqual(r, ['woolworth'])

    _, r = self.anagrams2.get_anagrams("woonsocket")
    self.assertEqual(r, ['woonsocket'])

    _, r = self.anagrams2.get_anagrams("woos")
    self.assertEqual(r, ['woos'])

    _, r = self.anagrams2.get_anagrams("wooster")
    self.assertEqual(r, ['wooster'])

    _, r = self.anagrams2.get_anagrams("worcester")
    self.assertEqual(r, ['worcester'])

    _, r = self.anagrams2.get_anagrams("worcestershire")
    self.assertEqual(r, ['worcestershire'])

    _, r = self.anagrams2.get_anagrams("word")
    self.assertEqual(r, ['word'])

    _, r = self.anagrams2.get_anagrams("worded")
    self.assertEqual(r, ['worded'])

    _, r = self.anagrams2.get_anagrams("wordily")
    self.assertEqual(r, ['wordily'])

    _, r = self.anagrams2.get_anagrams("wordiness")
    self.assertEqual(r, ['wordiness'])

    _, r = self.anagrams2.get_anagrams("wording")
    self.assertEqual(r, ['wording'])

    _, r = self.anagrams2.get_anagrams("words")
    self.assertEqual(r, ['sword', 'words'])

    _, r = self.anagrams2.get_anagrams("wordsworth")
    self.assertEqual(r, ['wordsworth'])

    _, r = self.anagrams2.get_anagrams("wordy")
    self.assertEqual(r, ['dowry', 'rowdy', 'wordy'])

    _, r = self.anagrams2.get_anagrams("wore")
    self.assertEqual(r, ['rowe', 'wore'])

    _, r = self.anagrams2.get_anagrams("work")
    self.assertEqual(r, ['work'])

    _, r = self.anagrams2.get_anagrams("workable")
    self.assertEqual(r, ['workable'])

    _, r = self.anagrams2.get_anagrams("workably")
    self.assertEqual(r, ['workably'])

    _, r = self.anagrams2.get_anagrams("workbench")
    self.assertEqual(r, ['workbench'])

    _, r = self.anagrams2.get_anagrams("workbenches")
    self.assertEqual(r, ['workbenches'])

    _, r = self.anagrams2.get_anagrams("workbook")
    self.assertEqual(r, ['workbook'])

    _, r = self.anagrams2.get_anagrams("workbooks")
    self.assertEqual(r, ['workbooks'])

    _, r = self.anagrams2.get_anagrams("worked")
    self.assertEqual(r, ['worked'])

    _, r = self.anagrams2.get_anagrams("worker")
    self.assertEqual(r, ['rework', 'worker'])

    _, r = self.anagrams2.get_anagrams("workers")
    self.assertEqual(r, ['reworks', 'workers'])

    _, r = self.anagrams2.get_anagrams("workhorse")
    self.assertEqual(r, ['workhorse'])

    _, r = self.anagrams2.get_anagrams("workhorses")
    self.assertEqual(r, ['workhorses'])

    _, r = self.anagrams2.get_anagrams("working")
    self.assertEqual(r, ['working'])

    _, r = self.anagrams2.get_anagrams("workingman")
    self.assertEqual(r, ['workingman'])

    _, r = self.anagrams2.get_anagrams("workings")
    self.assertEqual(r, ['workings'])

    _, r = self.anagrams2.get_anagrams("workload")
    self.assertEqual(r, ['workload'])

    _, r = self.anagrams2.get_anagrams("workman")
    self.assertEqual(r, ['workman'])

    _, r = self.anagrams2.get_anagrams("workmanship")
    self.assertEqual(r, ['workmanship'])

    _, r = self.anagrams2.get_anagrams("workmen")
    self.assertEqual(r, ['workmen'])

    _, r = self.anagrams2.get_anagrams("works")
    self.assertEqual(r, ['works'])

    _, r = self.anagrams2.get_anagrams("workshop")
    self.assertEqual(r, ['workshop'])

    _, r = self.anagrams2.get_anagrams("workshops")
    self.assertEqual(r, ['workshops'])

    _, r = self.anagrams2.get_anagrams("workspace")
    self.assertEqual(r, ['workspace'])

    _, r = self.anagrams2.get_anagrams("workstation")
    self.assertEqual(r, ['workstation'])

    _, r = self.anagrams2.get_anagrams("workstations")
    self.assertEqual(r, ['workstations'])

    _, r = self.anagrams2.get_anagrams("world")
    self.assertEqual(r, ['world'])

    _, r = self.anagrams2.get_anagrams("worldliness")
    self.assertEqual(r, ['worldliness'])

    _, r = self.anagrams2.get_anagrams("worldly")
    self.assertEqual(r, ['worldly'])

    _, r = self.anagrams2.get_anagrams("worlds")
    self.assertEqual(r, ['worlds'])

    _, r = self.anagrams2.get_anagrams("worldwide")
    self.assertEqual(r, ['worldwide'])

    _, r = self.anagrams2.get_anagrams("worm")
    self.assertEqual(r, ['worm'])

    _, r = self.anagrams2.get_anagrams("wormed")
    self.assertEqual(r, ['wormed'])

    _, r = self.anagrams2.get_anagrams("worming")
    self.assertEqual(r, ['worming'])

    _, r = self.anagrams2.get_anagrams("worms")
    self.assertEqual(r, ['worms'])

    _, r = self.anagrams2.get_anagrams("worn")
    self.assertEqual(r, ['worn'])

    _, r = self.anagrams2.get_anagrams("worried")
    self.assertEqual(r, ['worried'])

    _, r = self.anagrams2.get_anagrams("worrier")
    self.assertEqual(r, ['worrier'])

    _, r = self.anagrams2.get_anagrams("worriers")
    self.assertEqual(r, ['worriers'])

    _, r = self.anagrams2.get_anagrams("worries")
    self.assertEqual(r, ['worries'])

    _, r = self.anagrams2.get_anagrams("worrisome")
    self.assertEqual(r, ['worrisome'])

    _, r = self.anagrams2.get_anagrams("worry")
    self.assertEqual(r, ['worry'])

    _, r = self.anagrams2.get_anagrams("worrying")
    self.assertEqual(r, ['worrying'])

    _, r = self.anagrams2.get_anagrams("worryingly")
    self.assertEqual(r, ['worryingly'])

    _, r = self.anagrams2.get_anagrams("worse")
    self.assertEqual(r, ['swore', 'worse'])

    _, r = self.anagrams2.get_anagrams("worship")
    self.assertEqual(r, ['worship'])

    _, r = self.anagrams2.get_anagrams("worshiped")
    self.assertEqual(r, ['worshiped'])

    _, r = self.anagrams2.get_anagrams("worshiper")
    self.assertEqual(r, ['worshiper'])

    _, r = self.anagrams2.get_anagrams("worshipful")
    self.assertEqual(r, ['worshipful'])

    _, r = self.anagrams2.get_anagrams("worshiping")
    self.assertEqual(r, ['worshiping'])

    _, r = self.anagrams2.get_anagrams("worships")
    self.assertEqual(r, ['worships'])

    _, r = self.anagrams2.get_anagrams("worst")
    self.assertEqual(r, ['worst'])

    _, r = self.anagrams2.get_anagrams("worsted")
    self.assertEqual(r, ['worsted'])

    _, r = self.anagrams2.get_anagrams("worth")
    self.assertEqual(r, ['throw', 'worth'])

    _, r = self.anagrams2.get_anagrams("worthiest")
    self.assertEqual(r, ['worthiest'])

    _, r = self.anagrams2.get_anagrams("worthiness")
    self.assertEqual(r, ['worthiness'])

    _, r = self.anagrams2.get_anagrams("worthington")
    self.assertEqual(r, ['worthington'])

    _, r = self.anagrams2.get_anagrams("worthless")
    self.assertEqual(r, ['worthless'])

    _, r = self.anagrams2.get_anagrams("worthlessness")
    self.assertEqual(r, ['worthlessness'])

    _, r = self.anagrams2.get_anagrams("worths")
    self.assertEqual(r, ['throws', 'worths'])

    _, r = self.anagrams2.get_anagrams("worthwhile")
    self.assertEqual(r, ['worthwhile'])

    _, r = self.anagrams2.get_anagrams("worthwhileness")
    self.assertEqual(r, ['worthwhileness'])

    _, r = self.anagrams2.get_anagrams("worthy")
    self.assertEqual(r, ['worthy'])

    _, r = self.anagrams2.get_anagrams("wotan")
    self.assertEqual(r, ['wotan'])

    _, r = self.anagrams2.get_anagrams("would")
    self.assertEqual(r, ['would'])

    _, r = self.anagrams2.get_anagrams("wound")
    self.assertEqual(r, ['wound'])

    _, r = self.anagrams2.get_anagrams("wounded")
    self.assertEqual(r, ['wounded'])

    _, r = self.anagrams2.get_anagrams("wounding")
    self.assertEqual(r, ['wounding'])

    _, r = self.anagrams2.get_anagrams("wounds")
    self.assertEqual(r, ['wounds'])

    _, r = self.anagrams2.get_anagrams("wove")
    self.assertEqual(r, ['wove'])

    _, r = self.anagrams2.get_anagrams("woven")
    self.assertEqual(r, ['woven'])

    _, r = self.anagrams2.get_anagrams("wrangle")
    self.assertEqual(r, ['wrangle'])

    _, r = self.anagrams2.get_anagrams("wrangled")
    self.assertEqual(r, ['wrangled'])

    _, r = self.anagrams2.get_anagrams("wrangler")
    self.assertEqual(r, ['wrangler'])

    _, r = self.anagrams2.get_anagrams("wrap")
    self.assertEqual(r, ['warp', 'wrap'])

    _, r = self.anagrams2.get_anagrams("wraparound")
    self.assertEqual(r, ['wraparound'])

    _, r = self.anagrams2.get_anagrams("wrapped")
    self.assertEqual(r, ['wrapped'])

    _, r = self.anagrams2.get_anagrams("wrapper")
    self.assertEqual(r, ['wrapper'])

    _, r = self.anagrams2.get_anagrams("wrappers")
    self.assertEqual(r, ['wrappers'])

    _, r = self.anagrams2.get_anagrams("wrapping")
    self.assertEqual(r, ['wrapping'])

    _, r = self.anagrams2.get_anagrams("wrappings")
    self.assertEqual(r, ['wrappings'])

    _, r = self.anagrams2.get_anagrams("wraps")
    self.assertEqual(r, ['warps', 'wraps'])

    _, r = self.anagrams2.get_anagrams("wrath")
    self.assertEqual(r, ['wrath'])

    _, r = self.anagrams2.get_anagrams("wreak")
    self.assertEqual(r, ['wreak'])

    _, r = self.anagrams2.get_anagrams("wreaks")
    self.assertEqual(r, ['wreaks'])

    _, r = self.anagrams2.get_anagrams("wreath")
    self.assertEqual(r, ['wreath'])

    _, r = self.anagrams2.get_anagrams("wreathed")
    self.assertEqual(r, ['wreathed'])

    _, r = self.anagrams2.get_anagrams("wreathes")
    self.assertEqual(r, ['weathers', 'wreathes'])

    _, r = self.anagrams2.get_anagrams("wreck")
    self.assertEqual(r, ['wreck'])

    _, r = self.anagrams2.get_anagrams("wreckage")
    self.assertEqual(r, ['wreckage'])

    _, r = self.anagrams2.get_anagrams("wrecked")
    self.assertEqual(r, ['wrecked'])

    _, r = self.anagrams2.get_anagrams("wrecker")
    self.assertEqual(r, ['wrecker'])

    _, r = self.anagrams2.get_anagrams("wreckers")
    self.assertEqual(r, ['wreckers'])

    _, r = self.anagrams2.get_anagrams("wrecking")
    self.assertEqual(r, ['wrecking'])

    _, r = self.anagrams2.get_anagrams("wrecks")
    self.assertEqual(r, ['wrecks'])

    _, r = self.anagrams2.get_anagrams("wren")
    self.assertEqual(r, ['wren'])

    _, r = self.anagrams2.get_anagrams("wrench")
    self.assertEqual(r, ['wrench'])

    _, r = self.anagrams2.get_anagrams("wrenched")
    self.assertEqual(r, ['wrenched'])

    _, r = self.anagrams2.get_anagrams("wrenches")
    self.assertEqual(r, ['wrenches'])

    _, r = self.anagrams2.get_anagrams("wrenching")
    self.assertEqual(r, ['wrenching'])

    _, r = self.anagrams2.get_anagrams("wrens")
    self.assertEqual(r, ['wrens'])

    _, r = self.anagrams2.get_anagrams("wrest")
    self.assertEqual(r, ['strew', 'wrest'])

    _, r = self.anagrams2.get_anagrams("wrestle")
    self.assertEqual(r, ['swelter', 'wrestle'])

    _, r = self.anagrams2.get_anagrams("wrestler")
    self.assertEqual(r, ['wrestler'])

    _, r = self.anagrams2.get_anagrams("wrestles")
    self.assertEqual(r, ['wrestles'])

    _, r = self.anagrams2.get_anagrams("wrestling")
    self.assertEqual(r, ['wrestling'])

    _, r = self.anagrams2.get_anagrams("wrestlings")
    self.assertEqual(r, ['wrestlings'])

    _, r = self.anagrams2.get_anagrams("wretch")
    self.assertEqual(r, ['wretch'])

    _, r = self.anagrams2.get_anagrams("wretched")
    self.assertEqual(r, ['wretched'])

    _, r = self.anagrams2.get_anagrams("wretchedness")
    self.assertEqual(r, ['wretchedness'])

    _, r = self.anagrams2.get_anagrams("wretches")
    self.assertEqual(r, ['wretches'])

    _, r = self.anagrams2.get_anagrams("wriggle")
    self.assertEqual(r, ['wriggle'])

    _, r = self.anagrams2.get_anagrams("wriggled")
    self.assertEqual(r, ['wriggled'])

    _, r = self.anagrams2.get_anagrams("wriggler")
    self.assertEqual(r, ['wriggler'])

    _, r = self.anagrams2.get_anagrams("wriggles")
    self.assertEqual(r, ['wriggles'])

    _, r = self.anagrams2.get_anagrams("wriggling")
    self.assertEqual(r, ['wriggling'])

    _, r = self.anagrams2.get_anagrams("wrigley")
    self.assertEqual(r, ['wrigley'])

    _, r = self.anagrams2.get_anagrams("wring")
    self.assertEqual(r, ['wring'])

    _, r = self.anagrams2.get_anagrams("wringer")
    self.assertEqual(r, ['wringer'])

    _, r = self.anagrams2.get_anagrams("wrings")
    self.assertEqual(r, ['wrings'])

    _, r = self.anagrams2.get_anagrams("wrinkle")
    self.assertEqual(r, ['wrinkle'])

    _, r = self.anagrams2.get_anagrams("wrinkled")
    self.assertEqual(r, ['wrinkled'])

    _, r = self.anagrams2.get_anagrams("wrinkles")
    self.assertEqual(r, ['wrinkles'])

    _, r = self.anagrams2.get_anagrams("wrist")
    self.assertEqual(r, ['wrist', 'writs'])

    _, r = self.anagrams2.get_anagrams("wrists")
    self.assertEqual(r, ['wrists'])

    _, r = self.anagrams2.get_anagrams("wristwatch")
    self.assertEqual(r, ['wristwatch'])

    _, r = self.anagrams2.get_anagrams("wristwatches")
    self.assertEqual(r, ['wristwatches'])

    _, r = self.anagrams2.get_anagrams("writ")
    self.assertEqual(r, ['writ'])

    _, r = self.anagrams2.get_anagrams("writable")
    self.assertEqual(r, ['writable'])

    _, r = self.anagrams2.get_anagrams("write")
    self.assertEqual(r, ['write'])

    _, r = self.anagrams2.get_anagrams("writer")
    self.assertEqual(r, ['writer'])

    _, r = self.anagrams2.get_anagrams("writers")
    self.assertEqual(r, ['writers'])

    _, r = self.anagrams2.get_anagrams("writes")
    self.assertEqual(r, ['writes'])

    _, r = self.anagrams2.get_anagrams("writhe")
    self.assertEqual(r, ['whiter', 'wither', 'writhe'])

    _, r = self.anagrams2.get_anagrams("writhed")
    self.assertEqual(r, ['writhed'])

    _, r = self.anagrams2.get_anagrams("writhes")
    self.assertEqual(r, ['withers', 'writhes'])

    _, r = self.anagrams2.get_anagrams("writhing")
    self.assertEqual(r, ['writhing'])

    _, r = self.anagrams2.get_anagrams("writing")
    self.assertEqual(r, ['writing'])

    _, r = self.anagrams2.get_anagrams("writings")
    self.assertEqual(r, ['writings'])

    _, r = self.anagrams2.get_anagrams("writs")
    self.assertEqual(r, ['wrist', 'writs'])

    _, r = self.anagrams2.get_anagrams("written")
    self.assertEqual(r, ['written'])

    _, r = self.anagrams2.get_anagrams("wrong")
    self.assertEqual(r, ['grown', 'wrong'])

    _, r = self.anagrams2.get_anagrams("wronged")
    self.assertEqual(r, ['wronged'])

    _, r = self.anagrams2.get_anagrams("wronging")
    self.assertEqual(r, ['wronging'])

    _, r = self.anagrams2.get_anagrams("wrongly")
    self.assertEqual(r, ['wrongly'])

    _, r = self.anagrams2.get_anagrams("wrongs")
    self.assertEqual(r, ['wrongs'])

    _, r = self.anagrams2.get_anagrams("wronskian")
    self.assertEqual(r, ['wronskian'])

    _, r = self.anagrams2.get_anagrams("wrote")
    self.assertEqual(r, ['tower', 'wrote'])

    _, r = self.anagrams2.get_anagrams("wrought")
    self.assertEqual(r, ['wrought'])

    _, r = self.anagrams2.get_anagrams("wrung")
    self.assertEqual(r, ['wrung'])

    _, r = self.anagrams2.get_anagrams("wu")
    self.assertEqual(r, ['wu'])

    _, r = self.anagrams2.get_anagrams("wuhan")
    self.assertEqual(r, ['wuhan'])

    _, r = self.anagrams2.get_anagrams("wyandotte")
    self.assertEqual(r, ['wyandotte'])

    _, r = self.anagrams2.get_anagrams("wyatt")
    self.assertEqual(r, ['wyatt'])

    _, r = self.anagrams2.get_anagrams("wyeth")
    self.assertEqual(r, ['wyeth'])

    _, r = self.anagrams2.get_anagrams("wylie")
    self.assertEqual(r, ['wiley', 'wylie'])

    _, r = self.anagrams2.get_anagrams("wyman")
    self.assertEqual(r, ['wyman'])

    _, r = self.anagrams2.get_anagrams("wyner")
    self.assertEqual(r, ['wyner'])

    _, r = self.anagrams2.get_anagrams("wynn")
    self.assertEqual(r, ['wynn'])

    _, r = self.anagrams2.get_anagrams("wyoming")
    self.assertEqual(r, ['wyoming'])

    _, r = self.anagrams2.get_anagrams("xanthus")
    self.assertEqual(r, ['xanthus'])

    _, r = self.anagrams2.get_anagrams("xavier")
    self.assertEqual(r, ['xavier'])

    _, r = self.anagrams2.get_anagrams("xebec")
    self.assertEqual(r, ['xebec'])

    _, r = self.anagrams2.get_anagrams("xenakis")
    self.assertEqual(r, ['xenakis'])

    _, r = self.anagrams2.get_anagrams("xenia")
    self.assertEqual(r, ['xenia'])

    _, r = self.anagrams2.get_anagrams("xenix")
    self.assertEqual(r, ['xenix'])

    _, r = self.anagrams2.get_anagrams("xerox")
    self.assertEqual(r, ['xerox'])

    _, r = self.anagrams2.get_anagrams("xeroxed")
    self.assertEqual(r, ['xeroxed'])

    _, r = self.anagrams2.get_anagrams("xeroxes")
    self.assertEqual(r, ['xeroxes'])

    _, r = self.anagrams2.get_anagrams("xeroxing")
    self.assertEqual(r, ['xeroxing'])

    _, r = self.anagrams2.get_anagrams("xerxes")
    self.assertEqual(r, ['xerxes'])

    _, r = self.anagrams2.get_anagrams("xhosa")
    self.assertEqual(r, ['xhosa'])

    _, r = self.anagrams2.get_anagrams("yagi")
    self.assertEqual(r, ['yagi'])

    _, r = self.anagrams2.get_anagrams("yakima")
    self.assertEqual(r, ['yakima'])

    _, r = self.anagrams2.get_anagrams("yale")
    self.assertEqual(r, ['yale'])

    _, r = self.anagrams2.get_anagrams("yalies")
    self.assertEqual(r, ['easily', 'yalies'])

    _, r = self.anagrams2.get_anagrams("yalta")
    self.assertEqual(r, ['yalta'])

    _, r = self.anagrams2.get_anagrams("yamaha")
    self.assertEqual(r, ['yamaha'])

    _, r = self.anagrams2.get_anagrams("yank")
    self.assertEqual(r, ['yank'])

    _, r = self.anagrams2.get_anagrams("yanked")
    self.assertEqual(r, ['yanked'])

    _, r = self.anagrams2.get_anagrams("yankee")
    self.assertEqual(r, ['yankee'])

    _, r = self.anagrams2.get_anagrams("yankees")
    self.assertEqual(r, ['yankees'])

    _, r = self.anagrams2.get_anagrams("yanking")
    self.assertEqual(r, ['yanking'])

    _, r = self.anagrams2.get_anagrams("yanks")
    self.assertEqual(r, ['yanks'])

    _, r = self.anagrams2.get_anagrams("yankton")
    self.assertEqual(r, ['yankton'])

    _, r = self.anagrams2.get_anagrams("yaounde")
    self.assertEqual(r, ['yaounde'])

    _, r = self.anagrams2.get_anagrams("yaqui")
    self.assertEqual(r, ['yaqui'])

    _, r = self.anagrams2.get_anagrams("yard")
    self.assertEqual(r, ['yard'])

    _, r = self.anagrams2.get_anagrams("yards")
    self.assertEqual(r, ['yards'])

    _, r = self.anagrams2.get_anagrams("yardstick")
    self.assertEqual(r, ['yardstick'])

    _, r = self.anagrams2.get_anagrams("yardsticks")
    self.assertEqual(r, ['yardsticks'])

    _, r = self.anagrams2.get_anagrams("yarmouth")
    self.assertEqual(r, ['yarmouth'])

    _, r = self.anagrams2.get_anagrams("yarn")
    self.assertEqual(r, ['nary', 'ryan', 'yarn'])

    _, r = self.anagrams2.get_anagrams("yarns")
    self.assertEqual(r, ['yarns'])

    _, r = self.anagrams2.get_anagrams("yates")
    self.assertEqual(r, ['yates', 'yeast', 'yeats'])

    _, r = self.anagrams2.get_anagrams("yaunde")
    self.assertEqual(r, ['yaunde'])

    _, r = self.anagrams2.get_anagrams("yawn")
    self.assertEqual(r, ['yawn'])

    _, r = self.anagrams2.get_anagrams("yawner")
    self.assertEqual(r, ['yawner'])

    _, r = self.anagrams2.get_anagrams("yawning")
    self.assertEqual(r, ['yawning'])

    _, r = self.anagrams2.get_anagrams("yea")
    self.assertEqual(r, ['aye', 'yea'])

    _, r = self.anagrams2.get_anagrams("yeager")
    self.assertEqual(r, ['yeager'])

    _, r = self.anagrams2.get_anagrams("year")
    self.assertEqual(r, ['year'])

    _, r = self.anagrams2.get_anagrams("yearly")
    self.assertEqual(r, ['yearly'])

    _, r = self.anagrams2.get_anagrams("yearn")
    self.assertEqual(r, ['yearn'])

    _, r = self.anagrams2.get_anagrams("yearned")
    self.assertEqual(r, ['yearned'])

    _, r = self.anagrams2.get_anagrams("yearning")
    self.assertEqual(r, ['yearning'])

    _, r = self.anagrams2.get_anagrams("yearnings")
    self.assertEqual(r, ['yearnings'])

    _, r = self.anagrams2.get_anagrams("years")
    self.assertEqual(r, ['ayers', 'sayer', 'years'])

    _, r = self.anagrams2.get_anagrams("yeas")
    self.assertEqual(r, ['ayes', 'easy', 'yeas'])

    _, r = self.anagrams2.get_anagrams("yeast")
    self.assertEqual(r, ['yates', 'yeast', 'yeats'])

    _, r = self.anagrams2.get_anagrams("yeasts")
    self.assertEqual(r, ['yeasts'])

    _, r = self.anagrams2.get_anagrams("yeats")
    self.assertEqual(r, ['yates', 'yeast', 'yeats'])

    _, r = self.anagrams2.get_anagrams("yell")
    self.assertEqual(r, ['lyle', 'yell'])

    _, r = self.anagrams2.get_anagrams("yelled")
    self.assertEqual(r, ['yelled'])

    _, r = self.anagrams2.get_anagrams("yeller")
    self.assertEqual(r, ['yeller'])

    _, r = self.anagrams2.get_anagrams("yelling")
    self.assertEqual(r, ['yelling'])

    _, r = self.anagrams2.get_anagrams("yellow")
    self.assertEqual(r, ['yellow'])

    _, r = self.anagrams2.get_anagrams("yellowed")
    self.assertEqual(r, ['yellowed'])

    _, r = self.anagrams2.get_anagrams("yellower")
    self.assertEqual(r, ['yellower'])

    _, r = self.anagrams2.get_anagrams("yellowest")
    self.assertEqual(r, ['yellowest'])

    _, r = self.anagrams2.get_anagrams("yellowing")
    self.assertEqual(r, ['yellowing'])

    _, r = self.anagrams2.get_anagrams("yellowish")
    self.assertEqual(r, ['yellowish'])

    _, r = self.anagrams2.get_anagrams("yellowknife")
    self.assertEqual(r, ['yellowknife'])

    _, r = self.anagrams2.get_anagrams("yellowness")
    self.assertEqual(r, ['yellowness'])

    _, r = self.anagrams2.get_anagrams("yellows")
    self.assertEqual(r, ['yellows'])

    _, r = self.anagrams2.get_anagrams("yellowstone")
    self.assertEqual(r, ['yellowstone'])

    _, r = self.anagrams2.get_anagrams("yelp")
    self.assertEqual(r, ['pyle', 'yelp'])

    _, r = self.anagrams2.get_anagrams("yelped")
    self.assertEqual(r, ['deeply', 'yelped'])

    _, r = self.anagrams2.get_anagrams("yelping")
    self.assertEqual(r, ['yelping'])

    _, r = self.anagrams2.get_anagrams("yelps")
    self.assertEqual(r, ['yelps'])

    _, r = self.anagrams2.get_anagrams("yemen")
    self.assertEqual(r, ['enemy', 'yemen'])

    _, r = self.anagrams2.get_anagrams("yentl")
    self.assertEqual(r, ['yentl'])

    _, r = self.anagrams2.get_anagrams("yeoman")
    self.assertEqual(r, ['yeoman'])

    _, r = self.anagrams2.get_anagrams("yeomen")
    self.assertEqual(r, ['yeomen'])

    _, r = self.anagrams2.get_anagrams("yerkes")
    self.assertEqual(r, ['yerkes'])

    _, r = self.anagrams2.get_anagrams("yes")
    self.assertEqual(r, ['yes'])

    _, r = self.anagrams2.get_anagrams("yesterday")
    self.assertEqual(r, ['yesterday'])

    _, r = self.anagrams2.get_anagrams("yesterdays")
    self.assertEqual(r, ['yesterdays'])

    _, r = self.anagrams2.get_anagrams("yet")
    self.assertEqual(r, ['yet'])

    _, r = self.anagrams2.get_anagrams("yiddish")
    self.assertEqual(r, ['yiddish'])

    _, r = self.anagrams2.get_anagrams("yield")
    self.assertEqual(r, ['yield'])

    _, r = self.anagrams2.get_anagrams("yielded")
    self.assertEqual(r, ['yielded'])

    _, r = self.anagrams2.get_anagrams("yielding")
    self.assertEqual(r, ['yielding'])

    _, r = self.anagrams2.get_anagrams("yields")
    self.assertEqual(r, ['yields'])

    _, r = self.anagrams2.get_anagrams("yoder")
    self.assertEqual(r, ['yoder'])

    _, r = self.anagrams2.get_anagrams("yoke")
    self.assertEqual(r, ['yoke'])

    _, r = self.anagrams2.get_anagrams("yokes")
    self.assertEqual(r, ['yokes'])

    _, r = self.anagrams2.get_anagrams("yoknapatawpha")
    self.assertEqual(r, ['yoknapatawpha'])

    _, r = self.anagrams2.get_anagrams("yokohama")
    self.assertEqual(r, ['yokohama'])

    _, r = self.anagrams2.get_anagrams("yokuts")
    self.assertEqual(r, ['yokuts'])

    _, r = self.anagrams2.get_anagrams("yon")
    self.assertEqual(r, ['yon'])

    _, r = self.anagrams2.get_anagrams("yonder")
    self.assertEqual(r, ['rodney', 'yonder'])

    _, r = self.anagrams2.get_anagrams("yonkers")
    self.assertEqual(r, ['yonkers'])

    _, r = self.anagrams2.get_anagrams("yorick")
    self.assertEqual(r, ['yorick'])

    _, r = self.anagrams2.get_anagrams("york")
    self.assertEqual(r, ['york'])

    _, r = self.anagrams2.get_anagrams("yorker")
    self.assertEqual(r, ['yorker'])

    _, r = self.anagrams2.get_anagrams("yorkers")
    self.assertEqual(r, ['yorkers'])

    _, r = self.anagrams2.get_anagrams("yorkshire")
    self.assertEqual(r, ['yorkshire'])

    _, r = self.anagrams2.get_anagrams("yorktown")
    self.assertEqual(r, ['yorktown'])

    _, r = self.anagrams2.get_anagrams("yosemite")
    self.assertEqual(r, ['yosemite'])

    _, r = self.anagrams2.get_anagrams("yost")
    self.assertEqual(r, ['toys', 'yost'])

    _, r = self.anagrams2.get_anagrams("you")
    self.assertEqual(r, ['you'])

    _, r = self.anagrams2.get_anagrams("young")
    self.assertEqual(r, ['young'])

    _, r = self.anagrams2.get_anagrams("younger")
    self.assertEqual(r, ['younger'])

    _, r = self.anagrams2.get_anagrams("youngest")
    self.assertEqual(r, ['youngest'])

    _, r = self.anagrams2.get_anagrams("youngly")
    self.assertEqual(r, ['youngly'])

    _, r = self.anagrams2.get_anagrams("youngster")
    self.assertEqual(r, ['youngster'])

    _, r = self.anagrams2.get_anagrams("youngsters")
    self.assertEqual(r, ['youngsters'])

    _, r = self.anagrams2.get_anagrams("youngstown")
    self.assertEqual(r, ['youngstown'])

    _, r = self.anagrams2.get_anagrams("your")
    self.assertEqual(r, ['your'])

    _, r = self.anagrams2.get_anagrams("yours")
    self.assertEqual(r, ['yours'])

    _, r = self.anagrams2.get_anagrams("yourself")
    self.assertEqual(r, ['yourself'])

    _, r = self.anagrams2.get_anagrams("yourselves")
    self.assertEqual(r, ['yourselves'])

    _, r = self.anagrams2.get_anagrams("youth")
    self.assertEqual(r, ['youth'])

    _, r = self.anagrams2.get_anagrams("youthes")
    self.assertEqual(r, ['southey', 'youthes'])

    _, r = self.anagrams2.get_anagrams("youthful")
    self.assertEqual(r, ['youthful'])

    _, r = self.anagrams2.get_anagrams("youthfully")
    self.assertEqual(r, ['youthfully'])

    _, r = self.anagrams2.get_anagrams("youthfulness")
    self.assertEqual(r, ['youthfulness'])

    _, r = self.anagrams2.get_anagrams("ypsilanti")
    self.assertEqual(r, ['ypsilanti'])

    _, r = self.anagrams2.get_anagrams("yuba")
    self.assertEqual(r, ['yuba'])

    _, r = self.anagrams2.get_anagrams("yucatan")
    self.assertEqual(r, ['yucatan'])

    _, r = self.anagrams2.get_anagrams("yugoslav")
    self.assertEqual(r, ['yugoslav'])

    _, r = self.anagrams2.get_anagrams("yugoslavia")
    self.assertEqual(r, ['yugoslavia'])

    _, r = self.anagrams2.get_anagrams("yugoslavian")
    self.assertEqual(r, ['yugoslavian'])

    _, r = self.anagrams2.get_anagrams("yugoslavians")
    self.assertEqual(r, ['yugoslavians'])

    _, r = self.anagrams2.get_anagrams("yuh")
    self.assertEqual(r, ['yuh'])

    _, r = self.anagrams2.get_anagrams("yuki")
    self.assertEqual(r, ['yuki'])

    _, r = self.anagrams2.get_anagrams("yukon")
    self.assertEqual(r, ['yukon'])

    _, r = self.anagrams2.get_anagrams("yuri")
    self.assertEqual(r, ['yuri'])

    _, r = self.anagrams2.get_anagrams("yves")
    self.assertEqual(r, ['yves'])

    _, r = self.anagrams2.get_anagrams("yvette")
    self.assertEqual(r, ['yvette'])

    _, r = self.anagrams2.get_anagrams("zachary")
    self.assertEqual(r, ['zachary'])

    _, r = self.anagrams2.get_anagrams("zagreb")
    self.assertEqual(r, ['zagreb'])

    _, r = self.anagrams2.get_anagrams("zaire")
    self.assertEqual(r, ['zaire'])

    _, r = self.anagrams2.get_anagrams("zambia")
    self.assertEqual(r, ['zambia'])

    _, r = self.anagrams2.get_anagrams("zan")
    self.assertEqual(r, ['zan'])

    _, r = self.anagrams2.get_anagrams("zanzibar")
    self.assertEqual(r, ['zanzibar'])

    _, r = self.anagrams2.get_anagrams("zeal")
    self.assertEqual(r, ['zeal'])

    _, r = self.anagrams2.get_anagrams("zealand")
    self.assertEqual(r, ['zealand'])

    _, r = self.anagrams2.get_anagrams("zealous")
    self.assertEqual(r, ['zealous'])

    _, r = self.anagrams2.get_anagrams("zealously")
    self.assertEqual(r, ['zealously'])

    _, r = self.anagrams2.get_anagrams("zealousness")
    self.assertEqual(r, ['zealousness'])

    _, r = self.anagrams2.get_anagrams("zebra")
    self.assertEqual(r, ['braze', 'zebra'])

    _, r = self.anagrams2.get_anagrams("zebras")
    self.assertEqual(r, ['brazes', 'zebras'])

    _, r = self.anagrams2.get_anagrams("zeffirelli")
    self.assertEqual(r, ['zeffirelli'])

    _, r = self.anagrams2.get_anagrams("zeiss")
    self.assertEqual(r, ['sizes', 'zeiss'])

    _, r = self.anagrams2.get_anagrams("zellerbach")
    self.assertEqual(r, ['zellerbach'])

    _, r = self.anagrams2.get_anagrams("zen")
    self.assertEqual(r, ['zen'])

    _, r = self.anagrams2.get_anagrams("zenith")
    self.assertEqual(r, ['zenith'])

    _, r = self.anagrams2.get_anagrams("zennist")
    self.assertEqual(r, ['zennist'])

    _, r = self.anagrams2.get_anagrams("zero")
    self.assertEqual(r, ['zero'])

    _, r = self.anagrams2.get_anagrams("zeroed")
    self.assertEqual(r, ['zeroed'])

    _, r = self.anagrams2.get_anagrams("zeroes")
    self.assertEqual(r, ['zeroes'])

    _, r = self.anagrams2.get_anagrams("zeroing")
    self.assertEqual(r, ['zeroing'])

    _, r = self.anagrams2.get_anagrams("zeros")
    self.assertEqual(r, ['zeros'])

    _, r = self.anagrams2.get_anagrams("zeroth")
    self.assertEqual(r, ['zeroth'])

    _, r = self.anagrams2.get_anagrams("zest")
    self.assertEqual(r, ['zest'])

    _, r = self.anagrams2.get_anagrams("zeus")
    self.assertEqual(r, ['suez', 'zeus'])

    _, r = self.anagrams2.get_anagrams("ziegfeld")
    self.assertEqual(r, ['ziegfeld'])

    _, r = self.anagrams2.get_anagrams("ziegfelds")
    self.assertEqual(r, ['ziegfelds'])

    _, r = self.anagrams2.get_anagrams("ziegler")
    self.assertEqual(r, ['ziegler'])

    _, r = self.anagrams2.get_anagrams("ziggy")
    self.assertEqual(r, ['ziggy'])

    _, r = self.anagrams2.get_anagrams("zigzag")
    self.assertEqual(r, ['zigzag'])

    _, r = self.anagrams2.get_anagrams("zillions")
    self.assertEqual(r, ['zillions'])

    _, r = self.anagrams2.get_anagrams("zimmerman")
    self.assertEqual(r, ['zimmerman'])

    _, r = self.anagrams2.get_anagrams("zinc")
    self.assertEqual(r, ['zinc'])

    _, r = self.anagrams2.get_anagrams("zion")
    self.assertEqual(r, ['zion'])

    _, r = self.anagrams2.get_anagrams("zionism")
    self.assertEqual(r, ['zionism'])

    _, r = self.anagrams2.get_anagrams("zionist")
    self.assertEqual(r, ['zionist'])

    _, r = self.anagrams2.get_anagrams("zionists")
    self.assertEqual(r, ['zionists'])

    _, r = self.anagrams2.get_anagrams("zions")
    self.assertEqual(r, ['zions'])

    _, r = self.anagrams2.get_anagrams("zodiac")
    self.assertEqual(r, ['zodiac'])

    _, r = self.anagrams2.get_anagrams("zoe")
    self.assertEqual(r, ['zoe'])

    _, r = self.anagrams2.get_anagrams("zomba")
    self.assertEqual(r, ['zomba'])

    _, r = self.anagrams2.get_anagrams("zonal")
    self.assertEqual(r, ['zonal'])

    _, r = self.anagrams2.get_anagrams("zonally")
    self.assertEqual(r, ['zonally'])

    _, r = self.anagrams2.get_anagrams("zone")
    self.assertEqual(r, ['zone'])

    _, r = self.anagrams2.get_anagrams("zoned")
    self.assertEqual(r, ['dozen', 'zoned'])

    _, r = self.anagrams2.get_anagrams("zones")
    self.assertEqual(r, ['zones'])

    _, r = self.anagrams2.get_anagrams("zoning")
    self.assertEqual(r, ['zoning'])

    _, r = self.anagrams2.get_anagrams("zoo")
    self.assertEqual(r, ['zoo'])

    _, r = self.anagrams2.get_anagrams("zoological")
    self.assertEqual(r, ['zoological'])

    _, r = self.anagrams2.get_anagrams("zoologically")
    self.assertEqual(r, ['zoologically'])

    _, r = self.anagrams2.get_anagrams("zoom")
    self.assertEqual(r, ['zoom'])

    _, r = self.anagrams2.get_anagrams("zooms")
    self.assertEqual(r, ['zooms'])

    _, r = self.anagrams2.get_anagrams("zoos")
    self.assertEqual(r, ['zoos'])

    _, r = self.anagrams2.get_anagrams("zorn")
    self.assertEqual(r, ['zorn'])

    _, r = self.anagrams2.get_anagrams("zoroaster")
    self.assertEqual(r, ['zoroaster'])

    _, r = self.anagrams2.get_anagrams("zoroastrian")
    self.assertEqual(r, ['zoroastrian'])

    _, r = self.anagrams2.get_anagrams("zulu")
    self.assertEqual(r, ['zulu'])

    _, r = self.anagrams2.get_anagrams("zulus")
    self.assertEqual(r, ['zulus'])

    _, r = self.anagrams2.get_anagrams("zurich")
    self.assertEqual(r, ['zurich'])
